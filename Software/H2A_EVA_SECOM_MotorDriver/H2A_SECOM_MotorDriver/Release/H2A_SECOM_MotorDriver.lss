
H2A_SECOM_MotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000074a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000794  00802000  000074a8  0000753c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000746  00802794  00802794  00007cd0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007cd0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d0  00000000  00000000  00007d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000085cb  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001773  00000000  00000000  000106c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a9f  00000000  00000000  00011e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001254  00000000  00000000  000138dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000042ba  00000000  00000000  00014b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005287  00000000  00000000  00018dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f0  00000000  00000000  0001e071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 01 	jmp	0x366	; 0x366 <__ctors_end>
       4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
       8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
       c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      10:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      14:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      18:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      1c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      20:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      24:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      28:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      2c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      30:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      34:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      38:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      3c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      40:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      44:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      48:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      4c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      50:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      54:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      58:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      5c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      60:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      64:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      68:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      6c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      70:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      74:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      78:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      7c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      80:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      84:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      88:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      8c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      90:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      94:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      98:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      9c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      a0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      a4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      a8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      ac:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      b0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      b4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      b8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      bc:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      c0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      c4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      c8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      cc:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      d0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      d4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      d8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      dc:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      e0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      e4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      e8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      ec:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      f0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      f4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      f8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
      fc:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     100:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     104:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     108:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     10c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     110:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     114:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     118:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     11c:	0c 94 10 21 	jmp	0x4220	; 0x4220 <__vector_71>
     120:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     124:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     128:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     12c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     130:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     134:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     138:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     13c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     140:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     144:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     148:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     14c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     150:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     154:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     158:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     15c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     160:	0c 94 25 2b 	jmp	0x564a	; 0x564a <__vector_88>
     164:	0c 94 4d 2b 	jmp	0x569a	; 0x569a <__vector_89>
     168:	0c 94 7d 2b 	jmp	0x56fa	; 0x56fa <__vector_90>
     16c:	0c 94 9a 2b 	jmp	0x5734	; 0x5734 <__vector_91>
     170:	0c 94 c2 2b 	jmp	0x5784	; 0x5784 <__vector_92>
     174:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     178:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     17c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     180:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     184:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     188:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     18c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     190:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     194:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     198:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     19c:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1a0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1a4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1a8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1ac:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1b0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1b4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1b8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1bc:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1c0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1c4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1c8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1cc:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1d0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1d4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1d8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1dc:	0c 94 f2 2b 	jmp	0x57e4	; 0x57e4 <__vector_119>
     1e0:	0c 94 1a 2c 	jmp	0x5834	; 0x5834 <__vector_120>
     1e4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1e8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1ec:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1f0:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1f4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>
     1f8:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 e7 27 	jmp	0x4fce	; 0x4fce <GetFCTemperature>
     200:	0c 94 6f 29 	jmp	0x52de	; 0x52de <AcceptDataGPSDirection>
     204:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <CoreAnalogTakeSnapshot485>
     208:	0c 94 69 07 	jmp	0xed2	; 0xed2 <GetDiodeStatus>
     20c:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <GetMotorVoltage>
     210:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <GetWheelDistance>
     214:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <GetFuelCellPower>
     218:	0c 94 e3 0b 	jmp	0x17c6	; 0x17c6 <GetWheelSpeedEVA>
     21c:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <AcceptDataGPSPosition>
     220:	0c 94 b9 0a 	jmp	0x1572	; 0x1572 <GetFuelCellVoltage>
     224:	0c 94 76 29 	jmp	0x52ec	; 0x52ec <AcceptDataGPSSpeed>
     228:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <GetMotorCurrent>
     22c:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <GetFuelCellEnergy>
     230:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <GetWheelSpeedH2A>
     234:	0c 94 d7 2a 	jmp	0x55ae	; 0x55ae <Ctrl_putchar>
     238:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <GetCruiseControlButtonStatus>
     23c:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <GetTimeSnapshot>
     240:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <GetFullPowerButtonStatus>
     244:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <GetFuelCellCurrent>
     248:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <FCTakeSnapshot485>
     24c:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <GetSupercapPower>
     250:	0c 94 7d 29 	jmp	0x52fa	; 0x52fa <AcceptDataGPSTime>
     254:	0c 94 c7 08 	jmp	0x118e	; 0x118e <GetSupercapCurrent>
     258:	0c 94 31 07 	jmp	0xe62	; 0xe62 <GetMotorDriverTemp>
     25c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <GetSupercapVoltage>
     260:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <GetSupercapEnergy>

00000264 <__trampolines_end>:
     264:	6e 61       	ori	r22, 0x1E	; 30
     266:	6e 00       	.word	0x006e	; ????

00000268 <__c.2159>:
     268:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     278:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     288:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     298:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2a8:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2b8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2c8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2d8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2e8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2f8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     308:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     318:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     328:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     338:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     348:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     358:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	df e5       	ldi	r29, 0x5F	; 95
     370:	de bf       	out	0x3e, r29	; 62
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	0c bf       	out	0x3c, r16	; 60

00000376 <__do_copy_data>:
     376:	17 e2       	ldi	r17, 0x27	; 39
     378:	a0 e0       	ldi	r26, 0x00	; 0
     37a:	b0 e2       	ldi	r27, 0x20	; 32
     37c:	e8 ea       	ldi	r30, 0xA8	; 168
     37e:	f4 e7       	ldi	r31, 0x74	; 116
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	0b bf       	out	0x3b, r16	; 59
     384:	02 c0       	rjmp	.+4      	; 0x38a <__do_copy_data+0x14>
     386:	07 90       	elpm	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	a4 39       	cpi	r26, 0x94	; 148
     38c:	b1 07       	cpc	r27, r17
     38e:	d9 f7       	brne	.-10     	; 0x386 <__do_copy_data+0x10>

00000390 <__do_clear_bss>:
     390:	2e e2       	ldi	r18, 0x2E	; 46
     392:	a4 e9       	ldi	r26, 0x94	; 148
     394:	b7 e2       	ldi	r27, 0x27	; 39
     396:	01 c0       	rjmp	.+2      	; 0x39a <.do_clear_bss_start>

00000398 <.do_clear_bss_loop>:
     398:	1d 92       	st	X+, r1

0000039a <.do_clear_bss_start>:
     39a:	aa 3d       	cpi	r26, 0xDA	; 218
     39c:	b2 07       	cpc	r27, r18
     39e:	e1 f7       	brne	.-8      	; 0x398 <.do_clear_bss_loop>
     3a0:	0e 94 a0 05 	call	0xb40	; 0xb40 <main>
     3a4:	0c 94 52 3a 	jmp	0x74a4	; 0x74a4 <_exit>

000003a8 <__bad_interrupt>:
     3a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ac <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     3ac:	0f 93       	push	r16
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	1f 92       	push	r1
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     3b8:	2f b7       	in	r18, 0x3f	; 63
     3ba:	29 83       	std	Y+1, r18	; 0x01
     3bc:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     3be:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     3c0:	fc 01       	movw	r30, r24
     3c2:	08 ed       	ldi	r16, 0xD8	; 216
     3c4:	04 bf       	out	0x34, r16	; 52
     3c6:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
     3ca:	8f bf       	out	0x3f, r24	; 63
#endif
}
     3cc:	0f 90       	pop	r0
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
     3d6:	66 23       	and	r22, r22
     3d8:	11 f0       	breq	.+4      	; 0x3de <CLKSYS_XOSC_Config+0x8>
     3da:	90 e2       	ldi	r25, 0x20	; 32
     3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <CLKSYS_XOSC_Config+0xa>
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	84 2b       	or	r24, r20
     3e2:	89 2b       	or	r24, r25
     3e4:	80 93 52 00 	sts	0x0052, r24
     3e8:	08 95       	ret

000003ea <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
     3ea:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
     3ec:	68 2b       	or	r22, r24
     3ee:	e0 e5       	ldi	r30, 0x50	; 80
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	65 83       	std	Z+5, r22	; 0x05
     3f4:	08 95       	ret

000003f6 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     3f6:	e0 e5       	ldi	r30, 0x50	; 80
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	20 81       	ld	r18, Z
     3fc:	98 2f       	mov	r25, r24
     3fe:	90 95       	com	r25
     400:	92 23       	and	r25, r18
     402:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     404:	90 81       	ld	r25, Z
	return clkEnabled;
}
     406:	89 23       	and	r24, r25
     408:	08 95       	ret

0000040a <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	18 2f       	mov	r17, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     412:	c0 e4       	ldi	r28, 0x40	; 64
     414:	d0 e0       	ldi	r29, 0x00	; 0
     416:	68 81       	ld	r22, Y
     418:	68 7f       	andi	r22, 0xF8	; 248
     41a:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     41c:	80 e4       	ldi	r24, 0x40	; 64
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 d6 01 	call	0x3ac	; 0x3ac <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     424:	88 81       	ld	r24, Y
	return clkCtrl;
}
     426:	81 23       	and	r24, r17
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	1f 91       	pop	r17
     42e:	08 95       	ret

00000430 <InitSlave>:
 * \param 1 adr: the address of the slave
 *
 */

void InitSlave (int adr){
    sMyAdress = adr;
     430:	80 93 f2 27 	sts	0x27F2, r24
     434:	90 93 f3 27 	sts	0x27F3, r25
    sNumOwnSensor = 0;
     438:	10 92 f0 27 	sts	0x27F0, r1
     43c:	10 92 f1 27 	sts	0x27F1, r1
    sNumWantedSensor = 0;
     440:	10 92 ee 27 	sts	0x27EE, r1
     444:	10 92 ef 27 	sts	0x27EF, r1
    sOwnSensor = NULL;
     448:	10 92 ec 27 	sts	0x27EC, r1
     44c:	10 92 ed 27 	sts	0x27ED, r1
    sWantedSensor = NULL;
     450:	10 92 ea 27 	sts	0x27EA, r1
     454:	10 92 eb 27 	sts	0x27EB, r1
     458:	08 95       	ret

0000045a <AddSlaveOwnSensor>:
 * \return 0 : if there is no fault while adding a sensor
 *         1 : if the buffer of the info is full
 *		     : if there is no more available memory
 *		     : if the function pointer does not match with the sub address of the sensor
 */
int AddSlaveOwnSensor (const char *subadress, int (*fpGetData)(const char*,char*,int),int(*fpTakeSnapshot)(const char*),int measure) {
     45a:	8f 92       	push	r8
     45c:	9f 92       	push	r9
     45e:	af 92       	push	r10
     460:	bf 92       	push	r11
     462:	cf 92       	push	r12
     464:	df 92       	push	r13
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	4c 01       	movw	r8, r24
     474:	6b 01       	movw	r12, r22
     476:	5a 01       	movw	r10, r20
     478:	79 01       	movw	r14, r18

    int status= 0;

    sOwnSensor = (tOwnSensor *) realloc (sOwnSensor, (sNumOwnSensor + 1) * sizeof(tOwnSensor));
     47a:	00 91 f0 27 	lds	r16, 0x27F0
     47e:	10 91 f1 27 	lds	r17, 0x27F1
     482:	0f 5f       	subi	r16, 0xFF	; 255
     484:	1f 4f       	sbci	r17, 0xFF	; 255
     486:	8b e0       	ldi	r24, 0x0B	; 11
     488:	80 9f       	mul	r24, r16
     48a:	e0 01       	movw	r28, r0
     48c:	81 9f       	mul	r24, r17
     48e:	d0 0d       	add	r29, r0
     490:	11 24       	eor	r1, r1
     492:	be 01       	movw	r22, r28
     494:	80 91 ec 27 	lds	r24, 0x27EC
     498:	90 91 ed 27 	lds	r25, 0x27ED
     49c:	0e 94 5f 35 	call	0x6abe	; 0x6abe <realloc>
     4a0:	80 93 ec 27 	sts	0x27EC, r24
     4a4:	90 93 ed 27 	sts	0x27ED, r25
    if(sOwnSensor != NULL){
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	b9 f0       	breq	.+46     	; 0x4da <AddSlaveOwnSensor+0x80>
        strncpy((sOwnSensor)[sNumOwnSensor].subadress,subadress, SUBADR_LENG - 1);
     4ac:	2b 97       	sbiw	r28, 0x0b	; 11
     4ae:	c8 0f       	add	r28, r24
     4b0:	d9 1f       	adc	r29, r25
     4b2:	44 e0       	ldi	r20, 0x04	; 4
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	b4 01       	movw	r22, r8
     4b8:	ce 01       	movw	r24, r28
     4ba:	0e 94 7e 38 	call	0x70fc	; 0x70fc <strncpy>
        sOwnSensor[sNumOwnSensor].subadress[SUBADR_LENG - 1] = '\0';
     4be:	1c 82       	std	Y+4, r1	; 0x04
		sOwnSensor[sNumOwnSensor].fpTakeSnapshot = fpTakeSnapshot;
     4c0:	a9 86       	std	Y+9, r10	; 0x09
     4c2:	ba 86       	std	Y+10, r11	; 0x0a
		sOwnSensor[sNumOwnSensor].fpGetData= fpGetData;
     4c4:	cf 82       	std	Y+7, r12	; 0x07
     4c6:	d8 86       	std	Y+8, r13	; 0x08
		sOwnSensor[sNumOwnSensor].measure_interval = measure;
     4c8:	ed 82       	std	Y+5, r14	; 0x05
     4ca:	fe 82       	std	Y+6, r15	; 0x06
		sNumOwnSensor++;
     4cc:	00 93 f0 27 	sts	0x27F0, r16
     4d0:	10 93 f1 27 	sts	0x27F1, r17
 *		     : if there is no more available memory
 *		     : if the function pointer does not match with the sub address of the sensor
 */
int AddSlaveOwnSensor (const char *subadress, int (*fpGetData)(const char*,char*,int),int(*fpTakeSnapshot)(const char*),int measure) {

    int status= 0;
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <AddSlaveOwnSensor+0x84>
	}

	else{
		// led blink
		// printf("\nReset, Memory full\n");
		status = 1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
    }

    return status;
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	bf 90       	pop	r11
     4f0:	af 90       	pop	r10
     4f2:	9f 90       	pop	r9
     4f4:	8f 90       	pop	r8
     4f6:	08 95       	ret

000004f8 <AddWantedSensor>:
 *
 * \return 0 : if there is no fault while adding a sensor
 *         1 : if there is no more available memory
			 : if the function pointer does not match with the sub address of the sensor
 */
int AddWantedSensor (const char *subadress, int (*fpSetData)(const char*,char*)){
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	6c 01       	movw	r12, r24
     50a:	7b 01       	movw	r14, r22
	int status = 0;

		sWantedSensor = (tWantedSensor *) realloc (sWantedSensor, ((sNumWantedSensor) + 1) * sizeof(tWantedSensor));
     50c:	00 91 ee 27 	lds	r16, 0x27EE
     510:	10 91 ef 27 	lds	r17, 0x27EF
     514:	0f 5f       	subi	r16, 0xFF	; 255
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	87 e0       	ldi	r24, 0x07	; 7
     51a:	80 9f       	mul	r24, r16
     51c:	e0 01       	movw	r28, r0
     51e:	81 9f       	mul	r24, r17
     520:	d0 0d       	add	r29, r0
     522:	11 24       	eor	r1, r1
     524:	be 01       	movw	r22, r28
     526:	80 91 ea 27 	lds	r24, 0x27EA
     52a:	90 91 eb 27 	lds	r25, 0x27EB
     52e:	0e 94 5f 35 	call	0x6abe	; 0x6abe <realloc>
     532:	80 93 ea 27 	sts	0x27EA, r24
     536:	90 93 eb 27 	sts	0x27EB, r25
		if((sWantedSensor)!= NULL){
     53a:	00 97       	sbiw	r24, 0x00	; 0
     53c:	99 f0       	breq	.+38     	; 0x564 <AddWantedSensor+0x6c>
		   strncpy(sWantedSensor[sNumWantedSensor].subadress, subadress, SUBADR_LENG - 1);
     53e:	27 97       	sbiw	r28, 0x07	; 7
     540:	c8 0f       	add	r28, r24
     542:	d9 1f       	adc	r29, r25
     544:	44 e0       	ldi	r20, 0x04	; 4
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	b6 01       	movw	r22, r12
     54a:	ce 01       	movw	r24, r28
     54c:	0e 94 7e 38 	call	0x70fc	; 0x70fc <strncpy>
		  sWantedSensor[sNumWantedSensor].subadress[SUBADR_LENG - 1] = '\0';
     550:	1c 82       	std	Y+4, r1	; 0x04
		  sWantedSensor[sNumWantedSensor].fpSetData = fpSetData;
     552:	ed 82       	std	Y+5, r14	; 0x05
     554:	fe 82       	std	Y+6, r15	; 0x06
		  sNumWantedSensor++;
     556:	00 93 ee 27 	sts	0x27EE, r16
     55a:	10 93 ef 27 	sts	0x27EF, r17
		else {
			// led blink
			//printf("Reset, Memory full\n");
			return 1;
		}
	return status;
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	02 c0       	rjmp	.+4      	; 0x568 <AddWantedSensor+0x70>
		  sNumWantedSensor++;
		}
		else {
			// led blink
			//printf("Reset, Memory full\n");
			return 1;
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
		}
	return status;
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	1f 91       	pop	r17
     56e:	0f 91       	pop	r16
     570:	ff 90       	pop	r15
     572:	ef 90       	pop	r14
     574:	df 90       	pop	r13
     576:	cf 90       	pop	r12
     578:	08 95       	ret

0000057a <HandleSnapshot>:
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
    }
}

//update value of sensors of sensors of a slave
void HandleSnapshot(){
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     582:	00 e0       	ldi	r16, 0x00	; 0
     584:	10 e0       	ldi	r17, 0x00	; 0
     586:	c0 e0       	ldi	r28, 0x00	; 0
     588:	d0 e0       	ldi	r29, 0x00	; 0
     58a:	80 91 f0 27 	lds	r24, 0x27F0
     58e:	90 91 f1 27 	lds	r25, 0x27F1
     592:	c8 17       	cp	r28, r24
     594:	d9 07       	cpc	r29, r25
     596:	94 f4       	brge	.+36     	; 0x5bc <HandleSnapshot+0x42>
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
     598:	80 91 ec 27 	lds	r24, 0x27EC
     59c:	90 91 ed 27 	lds	r25, 0x27ED
     5a0:	80 0f       	add	r24, r16
     5a2:	91 1f       	adc	r25, r17
     5a4:	dc 01       	movw	r26, r24
     5a6:	19 96       	adiw	r26, 0x09	; 9
     5a8:	ed 91       	ld	r30, X+
     5aa:	fc 91       	ld	r31, X
     5ac:	1a 97       	sbiw	r26, 0x0a	; 10
     5ae:	30 97       	sbiw	r30, 0x00	; 0
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <HandleSnapshot+0x3a>
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
     5b2:	19 95       	eicall
//update value of sensors of sensors of a slave
void HandleSnapshot(){

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     5b4:	21 96       	adiw	r28, 0x01	; 1
     5b6:	05 5f       	subi	r16, 0xF5	; 245
     5b8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ba:	e7 cf       	rjmp	.-50     	; 0x58a <HandleSnapshot+0x10>
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
	}
}
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	08 95       	ret

000005c6 <HandleCmdS.constprop.1>:
 *
 * \param 1 response      :  the buffer where the response is saved
 * \param 2 dataFromMaster: the received message from the master
 *
 */
static void HandleCmdS(char* response, char* dataFromMaster){
     5c6:	df 92       	push	r13
     5c8:	ef 92       	push	r14
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	25 97       	sbiw	r28, 0x05	; 5
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	8c 01       	movw	r16, r24
	int position=0, err =0;
	char adr[SUBADR_LENG];

	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
     5e0:	bc 01       	movw	r22, r24
     5e2:	68 5f       	subi	r22, 0xF8	; 248
     5e4:	7f 4f       	sbci	r23, 0xFF	; 255
     5e6:	44 e0       	ldi	r20, 0x04	; 4
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	0e 94 7e 38 	call	0x70fc	; 0x70fc <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     5f2:	1d 82       	std	Y+5, r1	; 0x05

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){
     5f4:	44 e0       	ldi	r20, 0x04	; 4
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	64 ec       	ldi	r22, 0xC4	; 196
     5fa:	70 e2       	ldi	r23, 0x20	; 32
     5fc:	ce 01       	movw	r24, r28
     5fe:	01 96       	adiw	r24, 0x01	; 1
     600:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strncmp>
     604:	89 2b       	or	r24, r25
     606:	91 f0       	breq	.+36     	; 0x62c <HandleCmdS.constprop.1+0x66>

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     608:	60 91 ee 27 	lds	r22, 0x27EE
     60c:	70 91 ef 27 	lds	r23, 0x27EF
		if(/*!strncmp(adressSensor,sWantedSensor[i].subadress,SUBADR_LENG-1)*/ FindSensorOK( adressSensor, sWantedSensor[i].subadress )){
     610:	80 91 ea 27 	lds	r24, 0x27EA
     614:	90 91 eb 27 	lds	r25, 0x27EB
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     618:	b9 81       	ldd	r27, Y+1	; 0x01
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     61a:	fa 80       	ldd	r15, Y+2	; 0x02
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     61c:	eb 80       	ldd	r14, Y+3	; 0x03
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     61e:	dc 80       	ldd	r13, Y+4	; 0x04
     620:	fc 01       	movw	r30, r24
     622:	4f ef       	ldi	r20, 0xFF	; 255
     624:	5f ef       	ldi	r21, 0xFF	; 255
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	0b c0       	rjmp	.+22     	; 0x642 <HandleCmdS.constprop.1+0x7c>
	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){

		HandleSnapshot();
     62c:	0e 94 bd 02 	call	0x57a	; 0x57a <HandleSnapshot>
     630:	6d c0       	rjmp	.+218    	; 0x70c <HandleCmdS.constprop.1+0x146>
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     632:	a0 81       	ld	r26, Z
     634:	aa 32       	cpi	r26, 0x2A	; 42
     636:	49 f0       	breq	.+18     	; 0x64a <HandleCmdS.constprop.1+0x84>
     638:	ab 17       	cp	r26, r27
     63a:	39 f0       	breq	.+14     	; 0x64a <HandleCmdS.constprop.1+0x84>

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     63c:	2f 5f       	subi	r18, 0xFF	; 255
     63e:	3f 4f       	sbci	r19, 0xFF	; 255
     640:	37 96       	adiw	r30, 0x07	; 7
     642:	26 17       	cp	r18, r22
     644:	37 07       	cpc	r19, r23
     646:	ac f3       	brlt	.-22     	; 0x632 <HandleCmdS.constprop.1+0x6c>
     648:	11 c0       	rjmp	.+34     	; 0x66c <HandleCmdS.constprop.1+0xa6>

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     64a:	a1 81       	ldd	r26, Z+1	; 0x01
     64c:	aa 32       	cpi	r26, 0x2A	; 42
     64e:	11 f0       	breq	.+4      	; 0x654 <HandleCmdS.constprop.1+0x8e>
     650:	af 11       	cpse	r26, r15
     652:	f4 cf       	rjmp	.-24     	; 0x63c <HandleCmdS.constprop.1+0x76>
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     654:	a2 81       	ldd	r26, Z+2	; 0x02
     656:	aa 32       	cpi	r26, 0x2A	; 42
     658:	11 f0       	breq	.+4      	; 0x65e <HandleCmdS.constprop.1+0x98>
     65a:	ae 11       	cpse	r26, r14
     65c:	ef cf       	rjmp	.-34     	; 0x63c <HandleCmdS.constprop.1+0x76>
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     65e:	a3 81       	ldd	r26, Z+3	; 0x03
     660:	aa 32       	cpi	r26, 0x2A	; 42
     662:	11 f0       	breq	.+4      	; 0x668 <HandleCmdS.constprop.1+0xa2>
     664:	ad 11       	cpse	r26, r13
     666:	ea cf       	rjmp	.-44     	; 0x63c <HandleCmdS.constprop.1+0x76>
     668:	a9 01       	movw	r20, r18
     66a:	e8 cf       	rjmp	.-48     	; 0x63c <HandleCmdS.constprop.1+0x76>

		HandleSnapshot();
	}
	else{
		position = FindWantedSensorIndex(adr);
		if(position != -1){
     66c:	4f 3f       	cpi	r20, 0xFF	; 255
     66e:	2f ef       	ldi	r18, 0xFF	; 255
     670:	52 07       	cpc	r21, r18
     672:	81 f1       	breq	.+96     	; 0x6d4 <HandleCmdS.constprop.1+0x10e>
			err = (*sWantedSensor[position].fpSetData)(adr,dataFromMaster + SETDATA_POS);
     674:	27 e0       	ldi	r18, 0x07	; 7
     676:	24 9f       	mul	r18, r20
     678:	f0 01       	movw	r30, r0
     67a:	25 9f       	mul	r18, r21
     67c:	f0 0d       	add	r31, r0
     67e:	11 24       	eor	r1, r1
     680:	e8 0f       	add	r30, r24
     682:	f9 1f       	adc	r31, r25
     684:	b8 01       	movw	r22, r16
     686:	64 5f       	subi	r22, 0xF4	; 244
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	05 80       	ldd	r0, Z+5	; 0x05
     68c:	f6 81       	ldd	r31, Z+6	; 0x06
     68e:	e0 2d       	mov	r30, r0
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	19 95       	eicall
     696:	30 91 f3 27 	lds	r19, 0x27F3
     69a:	20 91 f2 27 	lds	r18, 0x27F2

			if(err==0){
     69e:	89 2b       	or	r24, r25
     6a0:	71 f4       	brne	.+28     	; 0x6be <HandleCmdS.constprop.1+0xf8>
				snprintf(response,MAXDATA-1,"$%03dSOK",sMyAdress);
     6a2:	3f 93       	push	r19
     6a4:	2f 93       	push	r18
     6a6:	89 ec       	ldi	r24, 0xC9	; 201
     6a8:	90 e2       	ldi	r25, 0x20	; 32
     6aa:	9f 93       	push	r25
     6ac:	8f 93       	push	r24
     6ae:	1f 92       	push	r1
     6b0:	8d e4       	ldi	r24, 0x4D	; 77
     6b2:	8f 93       	push	r24
     6b4:	86 e9       	ldi	r24, 0x96	; 150
     6b6:	97 e2       	ldi	r25, 0x27	; 39
     6b8:	9f 93       	push	r25
     6ba:	8f 93       	push	r24
     6bc:	23 c0       	rjmp	.+70     	; 0x704 <HandleCmdS.constprop.1+0x13e>
			}
			else{
				snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault'",sMyAdress);
     6be:	e6 e9       	ldi	r30, 0x96	; 150
     6c0:	f7 e2       	ldi	r31, 0x27	; 39
     6c2:	df 01       	movw	r26, r30
     6c4:	0d 90       	ld	r0, X+
     6c6:	00 20       	and	r0, r0
     6c8:	e9 f7       	brne	.-6      	; 0x6c4 <HandleCmdS.constprop.1+0xfe>
     6ca:	3f 93       	push	r19
     6cc:	2f 93       	push	r18
     6ce:	82 ed       	ldi	r24, 0xD2	; 210
     6d0:	90 e2       	ldi	r25, 0x20	; 32
     6d2:	0e c0       	rjmp	.+28     	; 0x6f0 <HandleCmdS.constprop.1+0x12a>
			}
		}
		else{
			snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault wrong sensor'",sMyAdress);
     6d4:	e6 e9       	ldi	r30, 0x96	; 150
     6d6:	f7 e2       	ldi	r31, 0x27	; 39
     6d8:	df 01       	movw	r26, r30
     6da:	0d 90       	ld	r0, X+
     6dc:	00 20       	and	r0, r0
     6de:	e9 f7       	brne	.-6      	; 0x6da <HandleCmdS.constprop.1+0x114>
     6e0:	80 91 f3 27 	lds	r24, 0x27F3
     6e4:	8f 93       	push	r24
     6e6:	80 91 f2 27 	lds	r24, 0x27F2
     6ea:	8f 93       	push	r24
     6ec:	81 ee       	ldi	r24, 0xE1	; 225
     6ee:	90 e2       	ldi	r25, 0x20	; 32
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	85 ee       	ldi	r24, 0xE5	; 229
     6f6:	97 e2       	ldi	r25, 0x27	; 39
     6f8:	8a 1b       	sub	r24, r26
     6fa:	9b 0b       	sbc	r25, r27
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	ff 93       	push	r31
     702:	ef 93       	push	r30
     704:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	de bf       	out	0x3e, r29	; 62
		}
	}
}
     70c:	25 96       	adiw	r28, 0x05	; 5
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	de bf       	out	0x3e, r29	; 62
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	ff 90       	pop	r15
     71c:	ef 90       	pop	r14
     71e:	df 90       	pop	r13
     720:	08 95       	ret

00000722 <SendLineRS485>:
 *
 * \param 1 data : data from the slave
 *
 */

void SendLineRS485(char* data){
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	ec 01       	movw	r28, r24

	while(*data != '\0'){
     728:	89 91       	ld	r24, Y+
     72a:	88 23       	and	r24, r24
     72c:	19 f0       	breq	.+6      	; 0x734 <SendLineRS485+0x12>
		WriteByte_Comm485(*data++);
     72e:	0e 94 45 2a 	call	0x548a	; 0x548a <WriteByte_Comm485>
     732:	fa cf       	rjmp	.-12     	; 0x728 <SendLineRS485+0x6>
	}
	// add \r\n to the sentence
	WriteByte_Comm485(0x0D);
     734:	8d e0       	ldi	r24, 0x0D	; 13
     736:	0e 94 45 2a 	call	0x548a	; 0x548a <WriteByte_Comm485>
	WriteByte_Comm485(0x0A);
     73a:	8a e0       	ldi	r24, 0x0A	; 10
}
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
	while(*data != '\0'){
		WriteByte_Comm485(*data++);
	}
	// add \r\n to the sentence
	WriteByte_Comm485(0x0D);
	WriteByte_Comm485(0x0A);
     740:	0c 94 45 2a 	jmp	0x548a	; 0x548a <WriteByte_Comm485>

00000744 <ReadLineRS45>:
 *
 * \param 1 data : data from the master
 *
 */

uint8_t ReadLineRS45( char *Data ){
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24
		else if( Data[0] == SLAVESENTENCE || Data[0] == MASTERSENTENCE ){
			len = strlen(Data);
			if(len < MAXCHARACTERSSENTENCE - 1) {
				Data[len] = getKarakter;
				Data[len + 1] = '\0';
				if( getKarakter == 0x0A ){
     74c:	10 e0       	ldi	r17, 0x00	; 0

uint8_t ReadLineRS45( char *Data ){
	static char getKarakter;
	uint8_t len, returnValue = 0;

	while( CanRead_Comm485() != 0 && returnValue == 0 ){
     74e:	0e 94 18 2a 	call	0x5430	; 0x5430 <CanRead_Comm485>
     752:	88 23       	and	r24, r24
     754:	29 f1       	breq	.+74     	; 0x7a0 <ReadLineRS45+0x5c>
     756:	11 11       	cpse	r17, r1
     758:	22 c0       	rjmp	.+68     	; 0x79e <ReadLineRS45+0x5a>
		getKarakter = (char )ReadByte_Comm485();
     75a:	0e 94 21 2a 	call	0x5442	; 0x5442 <ReadByte_Comm485>
     75e:	80 93 e9 27 	sts	0x27E9, r24
		if( getKarakter == SLAVESENTENCE || getKarakter == MASTERSENTENCE ){
     762:	9d ed       	ldi	r25, 0xDD	; 221
     764:	98 0f       	add	r25, r24
     766:	92 30       	cpi	r25, 0x02	; 2
     768:	18 f4       	brcc	.+6      	; 0x770 <ReadLineRS45+0x2c>
			Data[0] = getKarakter;
     76a:	88 83       	st	Y, r24
			Data[1] = '\0';
     76c:	19 82       	std	Y+1, r1	; 0x01
     76e:	ef cf       	rjmp	.-34     	; 0x74e <ReadLineRS45+0xa>
		}
		else if( Data[0] == SLAVESENTENCE || Data[0] == MASTERSENTENCE ){
     770:	98 81       	ld	r25, Y
     772:	93 52       	subi	r25, 0x23	; 35
     774:	92 30       	cpi	r25, 0x02	; 2
     776:	58 f7       	brcc	.-42     	; 0x74e <ReadLineRS45+0xa>
			len = strlen(Data);
     778:	fe 01       	movw	r30, r28
     77a:	01 90       	ld	r0, Z+
     77c:	00 20       	and	r0, r0
     77e:	e9 f7       	brne	.-6      	; 0x77a <ReadLineRS45+0x36>
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	ec 1b       	sub	r30, r28
     784:	fd 0b       	sbc	r31, r29
			if(len < MAXCHARACTERSSENTENCE - 1) {
     786:	e2 35       	cpi	r30, 0x52	; 82
     788:	10 f7       	brcc	.-60     	; 0x74e <ReadLineRS45+0xa>
				Data[len] = getKarakter;
     78a:	9e 01       	movw	r18, r28
     78c:	2e 0f       	add	r18, r30
     78e:	31 1d       	adc	r19, r1
     790:	f9 01       	movw	r30, r18
     792:	80 83       	st	Z, r24
				Data[len + 1] = '\0';
     794:	11 82       	std	Z+1, r1	; 0x01
				if( getKarakter == 0x0A ){
     796:	11 e0       	ldi	r17, 0x01	; 1
     798:	8a 30       	cpi	r24, 0x0A	; 10
     79a:	c1 f6       	brne	.-80     	; 0x74c <ReadLineRS45+0x8>
     79c:	d8 cf       	rjmp	.-80     	; 0x74e <ReadLineRS45+0xa>
     79e:	11 e0       	ldi	r17, 0x01	; 1
				}
			}			
		}
	}
	return returnValue;
}
     7a0:	81 2f       	mov	r24, r17
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	08 95       	ret

000007aa <ScanDataInSlave>:
 * \return 0: if there is a fault in the adress of the slave
 *            or the checksum of the master or the message is not from the master
 *            else
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
     7aa:	4f 92       	push	r4
     7ac:	5f 92       	push	r5
     7ae:	6f 92       	push	r6
     7b0:	7f 92       	push	r7
     7b2:	8f 92       	push	r8
     7b4:	9f 92       	push	r9
     7b6:	af 92       	push	r10
     7b8:	bf 92       	push	r11
     7ba:	cf 92       	push	r12
     7bc:	df 92       	push	r13
     7be:	ef 92       	push	r14
     7c0:	ff 92       	push	r15
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	25 97       	sbiw	r28, 0x05	; 5
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	8c 01       	movw	r16, r24
 * \return adress of the slave in integer
 *
 */
static int GetAdressFromMaster (char* dataMaster){

   return strtol(dataMaster + 1,NULL,10);
     7d6:	4a e0       	ldi	r20, 0x0A	; 10
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	0e 94 48 36 	call	0x6c90	; 0x6c90 <strtol>
     7e4:	56 2e       	mov	r5, r22
     7e6:	47 2e       	mov	r4, r23
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
	int err = 0;
    int adress = GetAdressFromMaster(dataFromMaster);
    char cmd = dataFromMaster[COMMAND];
     7e8:	f8 01       	movw	r30, r16
     7ea:	44 81       	ldd	r20, Z+4	; 0x04
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     7ec:	80 81       	ld	r24, Z
     7ee:	83 32       	cpi	r24, 0x23	; 35
     7f0:	09 f0       	breq	.+2      	; 0x7f4 <ScanDataInSlave+0x4a>
     7f2:	91 c1       	rjmp	.+802    	; 0xb16 <ScanDataInSlave+0x36c>
 * \return adress of the slave in integer
 *
 */
static int GetAdressFromMaster (char* dataMaster){

   return strtol(dataMaster + 1,NULL,10);
     7f4:	85 2d       	mov	r24, r5
     7f6:	94 2d       	mov	r25, r4
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     7f8:	20 91 f2 27 	lds	r18, 0x27F2
     7fc:	30 91 f3 27 	lds	r19, 0x27F3
     800:	82 17       	cp	r24, r18
     802:	93 07       	cpc	r25, r19
     804:	19 f0       	breq	.+6      	; 0x80c <ScanDataInSlave+0x62>
     806:	89 2b       	or	r24, r25
     808:	19 f0       	breq	.+6      	; 0x810 <ScanDataInSlave+0x66>
     80a:	85 c1       	rjmp	.+778    	; 0xb16 <ScanDataInSlave+0x36c>
       err = 0;
    }
    else{
	 if(adress == BROADCAST) {
     80c:	89 2b       	or	r24, r25
     80e:	39 f4       	brne	.+14     	; 0x81e <ScanDataInSlave+0x74>
		if(cmd =='S'){
     810:	43 35       	cpi	r20, 0x53	; 83
     812:	09 f0       	breq	.+2      	; 0x816 <ScanDataInSlave+0x6c>
     814:	7c c1       	rjmp	.+760    	; 0xb0e <ScanDataInSlave+0x364>
			HandleCmdS(responseSlave,dataFromMaster);
     816:	c8 01       	movw	r24, r16
     818:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <HandleCmdS.constprop.1>
     81c:	78 c1       	rjmp	.+752    	; 0xb0e <ScanDataInSlave+0x364>
		}
		err =1;
	 }
	 else{

      switch(cmd){
     81e:	49 34       	cpi	r20, 0x49	; 73
     820:	b9 f1       	breq	.+110    	; 0x890 <ScanDataInSlave+0xe6>
     822:	f8 f4       	brcc	.+62     	; 0x862 <ScanDataInSlave+0xb8>
     824:	41 34       	cpi	r20, 0x41	; 65
     826:	21 f1       	breq	.+72     	; 0x870 <ScanDataInSlave+0xc6>
     828:	47 34       	cpi	r20, 0x47	; 71
     82a:	09 f0       	breq	.+2      	; 0x82e <ScanDataInSlave+0x84>
     82c:	45 c1       	rjmp	.+650    	; 0xab8 <ScanDataInSlave+0x30e>
 */
static void HandleCmdG(char* response, char* dataFromMaster){
    int sensorIndex, err;
    char adr[SUBADR_LENG];

    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
     82e:	44 e0       	ldi	r20, 0x04	; 4
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	b8 01       	movw	r22, r16
     834:	6b 5f       	subi	r22, 0xFB	; 251
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	fe 01       	movw	r30, r28
     83a:	31 96       	adiw	r30, 0x01	; 1
     83c:	6f 01       	movw	r12, r30
     83e:	cf 01       	movw	r24, r30
     840:	0e 94 7e 38 	call	0x70fc	; 0x70fc <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     844:	1d 82       	std	Y+5, r1	; 0x05

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     846:	60 90 f0 27 	lds	r6, 0x27F0
     84a:	70 90 f1 27 	lds	r7, 0x27F1
     84e:	80 90 ec 27 	lds	r8, 0x27EC
     852:	90 90 ed 27 	lds	r9, 0x27ED
 *					 -1 if sensor is not found
 */

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;
     856:	aa 24       	eor	r10, r10
     858:	aa 94       	dec	r10
     85a:	ba 2c       	mov	r11, r10

	for(i=0; i < sNumOwnSensor; i++){
     85c:	e1 2c       	mov	r14, r1
     85e:	f1 2c       	mov	r15, r1
     860:	ca c0       	rjmp	.+404    	; 0x9f6 <ScanDataInSlave+0x24c>
		}
		err =1;
	 }
	 else{

      switch(cmd){
     862:	43 35       	cpi	r20, 0x53	; 83
     864:	09 f4       	brne	.+2      	; 0x868 <ScanDataInSlave+0xbe>
     866:	25 c1       	rjmp	.+586    	; 0xab2 <ScanDataInSlave+0x308>
     868:	47 35       	cpi	r20, 0x57	; 87
     86a:	09 f4       	brne	.+2      	; 0x86e <ScanDataInSlave+0xc4>
     86c:	62 c0       	rjmp	.+196    	; 0x932 <ScanDataInSlave+0x188>
     86e:	24 c1       	rjmp	.+584    	; 0xab8 <ScanDataInSlave+0x30e>
 * \param 1 response : the buffer where the response is saved
 *
 */
static void HandleCmdA(char* response){

    snprintf(response,MAXDATA-1,"$%03dA'Slave available'",sMyAdress);
     870:	4f 92       	push	r4
     872:	5f 92       	push	r5
     874:	8d ef       	ldi	r24, 0xFD	; 253
     876:	90 e2       	ldi	r25, 0x20	; 32
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	1f 92       	push	r1
     87e:	8d e4       	ldi	r24, 0x4D	; 77
     880:	8f 93       	push	r24
     882:	86 e9       	ldi	r24, 0x96	; 150
     884:	97 e2       	ldi	r25, 0x27	; 39
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     88e:	88 c0       	rjmp	.+272    	; 0x9a0 <ScanDataInSlave+0x1f6>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     890:	4a e0       	ldi	r20, 0x0A	; 10
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	c8 01       	movw	r24, r16
     89a:	05 96       	adiw	r24, 0x05	; 5
     89c:	0e 94 48 36 	call	0x6c90	; 0x6c90 <strtol>
 *
 */
static void HandleCmdI(char* response, char* dataFromMaster){
	static int index =0;

	index = GetIndexFromMaster(dataFromMaster);
     8a0:	60 93 94 27 	sts	0x2794, r22
     8a4:	70 93 95 27 	sts	0x2795, r23
     8a8:	b0 91 f3 27 	lds	r27, 0x27F3
     8ac:	a0 91 f2 27 	lds	r26, 0x27F2

    if(index > 0 && index <= sNumOwnSensor) {
     8b0:	16 16       	cp	r1, r22
     8b2:	17 06       	cpc	r1, r23
     8b4:	7c f5       	brge	.+94     	; 0x914 <ScanDataInSlave+0x16a>
     8b6:	40 91 f0 27 	lds	r20, 0x27F0
     8ba:	50 91 f1 27 	lds	r21, 0x27F1
     8be:	46 17       	cp	r20, r22
     8c0:	57 07       	cpc	r21, r23
     8c2:	44 f1       	brlt	.+80     	; 0x914 <ScanDataInSlave+0x16a>
        snprintf(response,MAXDATA-1,"$%03dI%02d%s,%02d'Sensor %d'",sMyAdress,index,sOwnSensor[index-1].subadress,sOwnSensor[index-1].measure_interval,index);
     8c4:	4b e0       	ldi	r20, 0x0B	; 11
     8c6:	46 9f       	mul	r20, r22
     8c8:	90 01       	movw	r18, r0
     8ca:	47 9f       	mul	r20, r23
     8cc:	30 0d       	add	r19, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	2b 50       	subi	r18, 0x0B	; 11
     8d2:	31 09       	sbc	r19, r1
     8d4:	e0 91 ec 27 	lds	r30, 0x27EC
     8d8:	f0 91 ed 27 	lds	r31, 0x27ED
     8dc:	e2 0f       	add	r30, r18
     8de:	f3 1f       	adc	r31, r19
     8e0:	7f 93       	push	r23
     8e2:	6f 93       	push	r22
     8e4:	26 81       	ldd	r18, Z+6	; 0x06
     8e6:	2f 93       	push	r18
     8e8:	25 81       	ldd	r18, Z+5	; 0x05
     8ea:	2f 93       	push	r18
     8ec:	ff 93       	push	r31
     8ee:	ef 93       	push	r30
     8f0:	7f 93       	push	r23
     8f2:	6f 93       	push	r22
     8f4:	bf 93       	push	r27
     8f6:	af 93       	push	r26
     8f8:	85 e1       	ldi	r24, 0x15	; 21
     8fa:	91 e2       	ldi	r25, 0x21	; 33
     8fc:	9f 93       	push	r25
     8fe:	8f 93       	push	r24
     900:	1f 92       	push	r1
     902:	8d e4       	ldi	r24, 0x4D	; 77
     904:	8f 93       	push	r24
     906:	86 e9       	ldi	r24, 0x96	; 150
     908:	97 e2       	ldi	r25, 0x27	; 39
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     912:	46 c0       	rjmp	.+140    	; 0x9a0 <ScanDataInSlave+0x1f6>
    }
// the slave sends 0000,0000 if all the sensors that exists are already given
    else{
        sprintf(response,"$%03dI%02d0000,0000'No sensor'", sMyAdress,index);
     914:	7f 93       	push	r23
     916:	6f 93       	push	r22
     918:	bf 93       	push	r27
     91a:	af 93       	push	r26
     91c:	82 e3       	ldi	r24, 0x32	; 50
     91e:	91 e2       	ldi	r25, 0x21	; 33
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	86 e9       	ldi	r24, 0x96	; 150
     926:	97 e2       	ldi	r25, 0x27	; 39
     928:	9f 93       	push	r25
     92a:	8f 93       	push	r24
     92c:	0e 94 3c 39 	call	0x7278	; 0x7278 <sprintf>
     930:	37 c0       	rjmp	.+110    	; 0x9a0 <ScanDataInSlave+0x1f6>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     932:	4a e0       	ldi	r20, 0x0A	; 10
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	c8 01       	movw	r24, r16
     93c:	05 96       	adiw	r24, 0x05	; 5
     93e:	0e 94 48 36 	call	0x6c90	; 0x6c90 <strtol>
     942:	f0 91 f3 27 	lds	r31, 0x27F3
     946:	e0 91 f2 27 	lds	r30, 0x27F2
 */
static void HandleCmdW(char* response, char* dataFromMaster){

    int index = GetIndexFromMaster(dataFromMaster);

    if(index > 0 && index <= sNumWantedSensor){
     94a:	16 16       	cp	r1, r22
     94c:	17 06       	cpc	r1, r23
     94e:	5c f5       	brge	.+86     	; 0x9a6 <ScanDataInSlave+0x1fc>
     950:	40 91 ee 27 	lds	r20, 0x27EE
     954:	50 91 ef 27 	lds	r21, 0x27EF
     958:	46 17       	cp	r20, r22
     95a:	57 07       	cpc	r21, r23
     95c:	24 f1       	brlt	.+72     	; 0x9a6 <ScanDataInSlave+0x1fc>
        snprintf(response,MAXDATA-1,"$%03dW%02d%s'Wants slave'",sMyAdress,index,sWantedSensor[index-1].subadress);
     95e:	27 e0       	ldi	r18, 0x07	; 7
     960:	26 9f       	mul	r18, r22
     962:	a0 01       	movw	r20, r0
     964:	27 9f       	mul	r18, r23
     966:	50 0d       	add	r21, r0
     968:	11 24       	eor	r1, r1
     96a:	47 50       	subi	r20, 0x07	; 7
     96c:	51 09       	sbc	r21, r1
     96e:	20 91 ea 27 	lds	r18, 0x27EA
     972:	30 91 eb 27 	lds	r19, 0x27EB
     976:	24 0f       	add	r18, r20
     978:	35 1f       	adc	r19, r21
     97a:	3f 93       	push	r19
     97c:	2f 93       	push	r18
     97e:	7f 93       	push	r23
     980:	6f 93       	push	r22
     982:	ff 93       	push	r31
     984:	ef 93       	push	r30
     986:	81 e5       	ldi	r24, 0x51	; 81
     988:	91 e2       	ldi	r25, 0x21	; 33
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	1f 92       	push	r1
     990:	8d e4       	ldi	r24, 0x4D	; 77
     992:	8f 93       	push	r24
     994:	86 e9       	ldi	r24, 0x96	; 150
     996:	97 e2       	ldi	r25, 0x27	; 39
     998:	9f 93       	push	r25
     99a:	8f 93       	push	r24
     99c:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	89 c0       	rjmp	.+274    	; 0xab8 <ScanDataInSlave+0x30e>
    }
// the slave sends 0000 if all sensor that exists in the buffer are given
    else {
       snprintf(response,MAXDATA-1,"$%03dW%02d0000'All done'", sMyAdress,index);
     9a6:	7f 93       	push	r23
     9a8:	6f 93       	push	r22
     9aa:	ff 93       	push	r31
     9ac:	ef 93       	push	r30
     9ae:	8b e6       	ldi	r24, 0x6B	; 107
     9b0:	91 e2       	ldi	r25, 0x21	; 33
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	1f 92       	push	r1
     9b8:	8d e4       	ldi	r24, 0x4D	; 77
     9ba:	8f 93       	push	r24
     9bc:	86 e9       	ldi	r24, 0x96	; 150
     9be:	97 e2       	ldi	r25, 0x27	; 39
     9c0:	9f 93       	push	r25
     9c2:	8f 93       	push	r24
     9c4:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     9c8:	eb cf       	rjmp	.-42     	; 0x9a0 <ScanDataInSlave+0x1f6>
static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
		if(!strncmp(adressSensor,sOwnSensor[i].subadress,strlen(adressSensor))){
     9ca:	f6 01       	movw	r30, r12
     9cc:	01 90       	ld	r0, Z+
     9ce:	00 20       	and	r0, r0
     9d0:	e9 f7       	brne	.-6      	; 0x9cc <ScanDataInSlave+0x222>
     9d2:	af 01       	movw	r20, r30
     9d4:	41 50       	subi	r20, 0x01	; 1
     9d6:	51 09       	sbc	r21, r1
     9d8:	4c 19       	sub	r20, r12
     9da:	5d 09       	sbc	r21, r13
     9dc:	b4 01       	movw	r22, r8
     9de:	c6 01       	movw	r24, r12
     9e0:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strncmp>
     9e4:	89 2b       	or	r24, r25
     9e6:	09 f4       	brne	.+2      	; 0x9ea <ScanDataInSlave+0x240>
     9e8:	57 01       	movw	r10, r14

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     9ea:	ff ef       	ldi	r31, 0xFF	; 255
     9ec:	ef 1a       	sub	r14, r31
     9ee:	ff 0a       	sbc	r15, r31
     9f0:	8b e0       	ldi	r24, 0x0B	; 11
     9f2:	88 0e       	add	r8, r24
     9f4:	91 1c       	adc	r9, r1
     9f6:	e6 14       	cp	r14, r6
     9f8:	f7 04       	cpc	r15, r7
     9fa:	3c f3       	brlt	.-50     	; 0x9ca <ScanDataInSlave+0x220>
    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

    sensorIndex = FindOwnSensorIndex(adr);

    if(sensorIndex !=-1){
     9fc:	9f ef       	ldi	r25, 0xFF	; 255
     9fe:	a9 16       	cp	r10, r25
     a00:	b9 06       	cpc	r11, r25
     a02:	09 f4       	brne	.+2      	; 0xa06 <ScanDataInSlave+0x25c>
     a04:	43 c0       	rjmp	.+134    	; 0xa8c <ScanDataInSlave+0x2e2>
		//sensorIndex is -1 if sensor not found
        sprintf(response,"$%03dG",sMyAdress);
     a06:	4f 92       	push	r4
     a08:	5f 92       	push	r5
     a0a:	84 e8       	ldi	r24, 0x84	; 132
     a0c:	91 e2       	ldi	r25, 0x21	; 33
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	86 e9       	ldi	r24, 0x96	; 150
     a14:	e8 2e       	mov	r14, r24
     a16:	87 e2       	ldi	r24, 0x27	; 39
     a18:	f8 2e       	mov	r15, r24
     a1a:	ff 92       	push	r15
     a1c:	ef 92       	push	r14
     a1e:	0e 94 3c 39 	call	0x7278	; 0x7278 <sprintf>
        err= sOwnSensor[sensorIndex].fpGetData(adr,response + strlen(response), MAXDATA-1-strlen(response) );
     a22:	f7 01       	movw	r30, r14
     a24:	01 90       	ld	r0, Z+
     a26:	00 20       	and	r0, r0
     a28:	e9 f7       	brne	.-6      	; 0xa24 <ScanDataInSlave+0x27a>
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	e6 59       	subi	r30, 0x96	; 150
     a2e:	f7 42       	sbci	r31, 0x27	; 39
     a30:	2b e0       	ldi	r18, 0x0B	; 11
     a32:	2a 9d       	mul	r18, r10
     a34:	c0 01       	movw	r24, r0
     a36:	2b 9d       	mul	r18, r11
     a38:	90 0d       	add	r25, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	a0 91 ec 27 	lds	r26, 0x27EC
     a40:	b0 91 ed 27 	lds	r27, 0x27ED
     a44:	a8 0f       	add	r26, r24
     a46:	b9 1f       	adc	r27, r25
     a48:	4d e4       	ldi	r20, 0x4D	; 77
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	4e 1b       	sub	r20, r30
     a4e:	5f 0b       	sbc	r21, r31
     a50:	bf 01       	movw	r22, r30
     a52:	6a 56       	subi	r22, 0x6A	; 106
     a54:	78 4d       	sbci	r23, 0xD8	; 216
     a56:	17 96       	adiw	r26, 0x07	; 7
     a58:	ed 91       	ld	r30, X+
     a5a:	fc 91       	ld	r31, X
     a5c:	18 97       	sbiw	r26, 0x08	; 8
     a5e:	c6 01       	movw	r24, r12
     a60:	19 95       	eicall
        if(err){
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	89 2b       	or	r24, r25
     a70:	19 f1       	breq	.+70     	; 0xab8 <ScanDataInSlave+0x30e>
			sprintf(response,"$%03dGF'Memory fault'",sMyAdress);
     a72:	80 91 f3 27 	lds	r24, 0x27F3
     a76:	8f 93       	push	r24
     a78:	80 91 f2 27 	lds	r24, 0x27F2
     a7c:	8f 93       	push	r24
     a7e:	8b e8       	ldi	r24, 0x8B	; 139
     a80:	91 e2       	ldi	r25, 0x21	; 33
     a82:	9f 93       	push	r25
     a84:	8f 93       	push	r24
     a86:	ff 92       	push	r15
     a88:	ef 92       	push	r14
     a8a:	0a c0       	rjmp	.+20     	; 0xaa0 <ScanDataInSlave+0x2f6>
		}
    }
    else{
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
     a8c:	4f 92       	push	r4
     a8e:	5f 92       	push	r5
     a90:	81 ea       	ldi	r24, 0xA1	; 161
     a92:	91 e2       	ldi	r25, 0x21	; 33
     a94:	9f 93       	push	r25
     a96:	8f 93       	push	r24
     a98:	86 e9       	ldi	r24, 0x96	; 150
     a9a:	97 e2       	ldi	r25, 0x27	; 39
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	0e 94 3c 39 	call	0x7278	; 0x7278 <sprintf>
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <ScanDataInSlave+0x30e>
                break;

      case 'G': HandleCmdG(responseSlave,dataFromMaster);
                break;

      case 'S': HandleCmdS(responseSlave,dataFromMaster);
     ab2:	c8 01       	movw	r24, r16
     ab4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <HandleCmdS.constprop.1>
     ab8:	e7 e9       	ldi	r30, 0x97	; 151
     aba:	f7 e2       	ldi	r31, 0x27	; 39
 *
 * \return checksum value
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
     abc:	80 e0       	ldi	r24, 0x00	; 0
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     abe:	91 91       	ld	r25, Z+
     ac0:	95 32       	cpi	r25, 0x25	; 37
     ac2:	09 f5       	brne	.+66     	; 0xb06 <ScanDataInSlave+0x35c>
                break;

      default:  break;
    }
    // add '%' and the checksum to the sentence and then send it through the line of the RS485
    snprintf(responseSlave+strlen(responseSlave),MAXCHARACTERSSENTENCE-strlen(responseSlave),"%%%02X",DataChecksum(responseSlave));
     ac4:	e6 e9       	ldi	r30, 0x96	; 150
     ac6:	f7 e2       	ldi	r31, 0x27	; 39
     ac8:	01 90       	ld	r0, Z+
     aca:	00 20       	and	r0, r0
     acc:	e9 f7       	brne	.-6      	; 0xac8 <ScanDataInSlave+0x31e>
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	e6 59       	subi	r30, 0x96	; 150
     ad2:	f7 42       	sbci	r31, 0x27	; 39
     ad4:	1f 92       	push	r1
     ad6:	8f 93       	push	r24
     ad8:	8b eb       	ldi	r24, 0xBB	; 187
     ada:	91 e2       	ldi	r25, 0x21	; 33
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24
     ae0:	83 e5       	ldi	r24, 0x53	; 83
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	8e 1b       	sub	r24, r30
     ae6:	9f 0b       	sbc	r25, r31
     ae8:	9f 93       	push	r25
     aea:	8f 93       	push	r24
     aec:	ea 56       	subi	r30, 0x6A	; 106
     aee:	f8 4d       	sbci	r31, 0xD8	; 216
     af0:	ff 93       	push	r31
     af2:	ef 93       	push	r30
     af4:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    SendLineRS485(responseSlave);
     af8:	86 e9       	ldi	r24, 0x96	; 150
     afa:	97 e2       	ldi	r25, 0x27	; 39
     afc:	0e 94 91 03 	call	0x722	; 0x722 <SendLineRS485>
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <ScanDataInSlave+0x364>
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     b06:	99 23       	and	r25, r25
     b08:	e9 f2       	breq	.-70     	; 0xac4 <ScanDataInSlave+0x31a>
		sChecksum^=*dataMaster++;
     b0a:	89 27       	eor	r24, r25
     b0c:	d8 cf       	rjmp	.-80     	; 0xabe <ScanDataInSlave+0x314>
    // add '%' and the checksum to the sentence and then send it through the line of the RS485
    snprintf(responseSlave+strlen(responseSlave),MAXCHARACTERSSENTENCE-strlen(responseSlave),"%%%02X",DataChecksum(responseSlave));
    SendLineRS485(responseSlave);
    err =1;
	}
	dataFromMaster[0] = '\0';
     b0e:	f8 01       	movw	r30, r16
     b10:	10 82       	st	Z, r1
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <ScanDataInSlave+0x36e>
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
       err = 0;
     b16:	80 e0       	ldi	r24, 0x00	; 0
    err =1;
	}
	dataFromMaster[0] = '\0';
	}
	return err;
}
     b18:	25 96       	adiw	r28, 0x05	; 5
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	de bf       	out	0x3e, r29	; 62
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	6f 90       	pop	r6
     b3a:	5f 90       	pop	r5
     b3c:	4f 90       	pop	r4
     b3e:	08 95       	ret

00000b40 <main>:
}


static void InitClocks(void)
{
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc, 0, OSC_XOSCSEL_XTAL_16KCLK_gc );
     b40:	4b e0       	ldi	r20, 0x0B	; 11
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	80 ec       	ldi	r24, 0xC0	; 192
     b46:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
     b4a:	80 91 50 00 	lds	r24, 0x0050
     b4e:	88 60       	ori	r24, 0x08	; 8
     b50:	80 93 50 00 	sts	0x0050, r24
// do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     b54:	80 91 51 00 	lds	r24, 0x0051
     b58:	83 ff       	sbrs	r24, 3
     b5a:	fc cf       	rjmp	.-8      	; 0xb54 <main+0x14>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	80 ec       	ldi	r24, 0xC0	; 192
     b60:	0e 94 f5 01 	call	0x3ea	; 0x3ea <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     b64:	80 91 50 00 	lds	r24, 0x0050
     b68:	80 61       	ori	r24, 0x10	; 16
     b6a:	80 93 50 00 	sts	0x0050, r24
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     b6e:	80 91 51 00 	lds	r24, 0x0051
     b72:	84 ff       	sbrs	r24, 4
     b74:	fc cf       	rjmp	.-8      	; 0xb6e <main+0x2e>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     b76:	84 e0       	ldi	r24, 0x04	; 4
     b78:	0e 94 05 02 	call	0x40a	; 0x40a <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <CLKSYS_Disable>
	CLKSYS_Disable( OSC_RC32MEN_bm );
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <CLKSYS_Disable>
	
} /* InitClocks */


static void InitIO(void) {
	PORTC.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm;
     b88:	8f e7       	ldi	r24, 0x7F	; 127
     b8a:	80 93 42 06 	sts	0x0642, r24
	PORTC.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     b8e:	80 e1       	ldi	r24, 0x10	; 16
     b90:	80 93 50 06 	sts	0x0650, r24
	
	PORTD.DIRCLR = PIN0_bm;
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	90 93 62 06 	sts	0x0662, r25
	PORTD.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     b9a:	80 93 70 06 	sts	0x0670, r24
		
	PORTE.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN6_bm | PIN7_bm;
     b9e:	8f ec       	ldi	r24, 0xCF	; 207
     ba0:	80 93 80 06 	sts	0x0680, r24
	PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     ba4:	8f e0       	ldi	r24, 0x0F	; 15
     ba6:	80 93 86 06 	sts	0x0686, r24
	
	PORTF.DIR = PIN0_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
     baa:	89 ef       	ldi	r24, 0xF9	; 249
     bac:	80 93 a0 06 	sts	0x06A0, r24
	PORTF.OUTCLR = PIN3_bm | PIN4_bm | PIN5_bm;
     bb0:	88 e3       	ldi	r24, 0x38	; 56
     bb2:	80 93 a6 06 	sts	0x06A6, r24
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
	static char slaveData[MAXCHARACTERSSENTENCE];
	
	InitClocks();
	InitIO();
	InitUtil();
     bb6:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <InitUtil>
	InitTimer();
     bba:	0e 94 4a 2c 	call	0x5894	; 0x5894 <InitTimer>
	InitSerial();
     bbe:	0e 94 ba 29 	call	0x5374	; 0x5374 <InitSerial>
	InitSlave(GetBusID());
     bc2:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <GetBusID>
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 94 18 02 	call	0x430	; 0x430 <InitSlave>
	InitCoreAnalog();
     bcc:	0e 94 9d 0c 	call	0x193a	; 0x193a <InitCoreAnalog>
	if(I_AM_H2A)
     bd0:	80 91 68 06 	lds	r24, 0x0668
     bd4:	80 73       	andi	r24, 0x30	; 48
     bd6:	11 f4       	brne	.+4      	; 0xbdc <main+0x9c>
		InitFCComm();
     bd8:	0e 94 1d 28 	call	0x503a	; 0x503a <InitFCComm>
	InitReadBussensors();
     bdc:	0e 94 84 29 	call	0x5308	; 0x5308 <InitReadBussensors>
	
	sei();
     be0:	78 94       	sei
	
	PrintResetHeader(&gCtrl_IO);
     be2:	86 e5       	ldi	r24, 0x56	; 86
     be4:	90 e2       	ldi	r25, 0x20	; 32
     be6:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <PrintResetHeader>
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
     bea:	10 e0       	ldi	r17, 0x00	; 0
     bec:	c0 e0       	ldi	r28, 0x00	; 0
#define ESC_TIMEOUT			(CYCLES_PER_SECOND)
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
     bee:	c1 2c       	mov	r12, r1
     bf0:	d1 2c       	mov	r13, r1
     bf2:	76 01       	movw	r14, r12
     bf4:	81 2c       	mov	r8, r1
     bf6:	91 2c       	mov	r9, r1
     bf8:	54 01       	movw	r10, r8

		/* Handle the slave code */
		if(CanRead_Comm485())
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     bfa:	d0 e3       	ldi	r29, 0x30	; 48
	
	sei();
	
	PrintResetHeader(&gCtrl_IO);
	while(1) {
		ProcessFCComm();
     bfc:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <ProcessFCComm>
		
		if(CanRead_Ctrl()) {
     c00:	0e 94 83 2a 	call	0x5506	; 0x5506 <CanRead_Ctrl>
     c04:	88 23       	and	r24, r24
     c06:	b9 f0       	breq	.+46     	; 0xc36 <main+0xf6>
			switch(ReadByte_Ctrl()) {
     c08:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
     c0c:	83 34       	cpi	r24, 0x43	; 67
     c0e:	51 f0       	breq	.+20     	; 0xc24 <main+0xe4>
     c10:	83 36       	cpi	r24, 0x63	; 99
     c12:	41 f0       	breq	.+16     	; 0xc24 <main+0xe4>
     c14:	8b 31       	cpi	r24, 0x1B	; 27
     c16:	51 f4       	brne	.+20     	; 0xc2c <main+0xec>
				case 0x1B:
					/* ESC -- sync character for avrdude. The programmer is trying to talk to us, so reset the chip */
					CCPWrite( &RST.CTRL, RST_SWRST_bm );
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	89 e7       	ldi	r24, 0x79	; 121
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <CCPWrite>
					break;
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <main+0xec>
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
     c24:	86 e5       	ldi	r24, 0x56	; 86
     c26:	90 e2       	ldi	r25, 0x20	; 32
     c28:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <CalibrateChannel>
					break;
			}
			escTimeoutActive = 1;
			prev = GetSessionCycleCount();
     c2c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <GetSessionCycleCount>
     c30:	4b 01       	movw	r8, r22
     c32:	5c 01       	movw	r10, r24
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
					break;
			}
			escTimeoutActive = 1;
     c34:	11 e0       	ldi	r17, 0x01	; 1
			prev = GetSessionCycleCount();
		}
		now = GetSessionCycleCount();
     c36:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <GetSessionCycleCount>
     c3a:	2b 01       	movw	r4, r22
     c3c:	3c 01       	movw	r6, r24
		if(escTimeoutActive) {
     c3e:	11 23       	and	r17, r17
     c40:	69 f0       	breq	.+26     	; 0xc5c <main+0x11c>
			if(now - prev >= ESC_TIMEOUT)
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	88 19       	sub	r24, r8
     c48:	99 09       	sbc	r25, r9
     c4a:	aa 09       	sbc	r26, r10
     c4c:	bb 09       	sbc	r27, r11
     c4e:	88 38       	cpi	r24, 0x88	; 136
     c50:	93 41       	sbci	r25, 0x13	; 19
     c52:	a1 05       	cpc	r26, r1
     c54:	b1 05       	cpc	r27, r1
     c56:	10 f4       	brcc	.+4      	; 0xc5c <main+0x11c>
     c58:	11 e0       	ldi	r17, 0x01	; 1
     c5a:	19 c0       	rjmp	.+50     	; 0xc8e <main+0x14e>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
     c5c:	0e 94 a1 2a 	call	0x5542	; 0x5542 <CanWrite_Ctrl>
     c60:	86 39       	cpi	r24, 0x96	; 150
     c62:	08 f4       	brcc	.+2      	; 0xc66 <main+0x126>
     c64:	74 c0       	rjmp	.+232    	; 0xd4e <main+0x20e>
			switch(debugPrintstate) {
     c66:	c2 30       	cpi	r28, 0x02	; 2
     c68:	09 f4       	brne	.+2      	; 0xc6c <main+0x12c>
     c6a:	64 c0       	rjmp	.+200    	; 0xd34 <main+0x1f4>
     c6c:	28 f5       	brcc	.+74     	; 0xcb8 <main+0x178>
     c6e:	cc 23       	and	r28, r28
     c70:	89 f1       	breq	.+98     	; 0xcd4 <main+0x194>
     c72:	c1 30       	cpi	r28, 0x01	; 1
     c74:	09 f0       	breq	.+2      	; 0xc78 <main+0x138>
     c76:	65 c0       	rjmp	.+202    	; 0xd42 <main+0x202>
 							FCTakeSnapshot();
						debugPrintstate = DEBUGPRINT_ANALOG;
					}
					break;
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
     c78:	80 91 68 06 	lds	r24, 0x0668
     c7c:	80 73       	andi	r24, 0x30	; 48
     c7e:	09 f0       	breq	.+2      	; 0xc82 <main+0x142>
     c80:	4a c0       	rjmp	.+148    	; 0xd16 <main+0x1d6>
						PrintCSV_H2A(&gCtrl_IO);
     c82:	86 e5       	ldi	r24, 0x56	; 86
     c84:	90 e2       	ldi	r25, 0x20	; 32
     c86:	0e 94 18 14 	call	0x2830	; 0x2830 <PrintCSV_H2A>
     c8a:	10 e0       	ldi	r17, 0x00	; 0
						debugPrintstate = DEBUGPRINT_FC;
     c8c:	c2 e0       	ldi	r28, 0x02	; 2
					debugPrintstate = DEBUGPRINT_START;
			}
		}

		/* Handle the slave code */
		if(CanRead_Comm485())
     c8e:	0e 94 18 2a 	call	0x5430	; 0x5430 <CanRead_Comm485>
     c92:	88 23       	and	r24, r24
     c94:	19 f0       	breq	.+6      	; 0xc9c <main+0x15c>
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
     c96:	d0 93 a6 06 	sts	0x06A6, r29
     c9a:	02 c0       	rjmp	.+4      	; 0xca0 <main+0x160>
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     c9c:	d0 93 a5 06 	sts	0x06A5, r29
		if ( ReadLineRS45( slaveData ) == 1 ){
     ca0:	84 ef       	ldi	r24, 0xF4	; 244
     ca2:	97 e2       	ldi	r25, 0x27	; 39
     ca4:	0e 94 a2 03 	call	0x744	; 0x744 <ReadLineRS45>
     ca8:	81 30       	cpi	r24, 0x01	; 1
     caa:	09 f0       	breq	.+2      	; 0xcae <main+0x16e>
     cac:	a7 cf       	rjmp	.-178    	; 0xbfc <main+0xbc>
			ScanDataInSlave(slaveData);
     cae:	84 ef       	ldi	r24, 0xF4	; 244
     cb0:	97 e2       	ldi	r25, 0x27	; 39
     cb2:	0e 94 d5 03 	call	0x7aa	; 0x7aa <ScanDataInSlave>
     cb6:	a2 cf       	rjmp	.-188    	; 0xbfc <main+0xbc>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     cb8:	c3 30       	cpi	r28, 0x03	; 3
     cba:	09 f0       	breq	.+2      	; 0xcbe <main+0x17e>
     cbc:	42 c0       	rjmp	.+132    	; 0xd42 <main+0x202>
				case DEBUGPRINT_FC:
					FCPrintDataCSV(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_BUS;
					break;
				case DEBUGPRINT_BUS:
					PrintBussensors(&gCtrl_IO);
     cbe:	86 e5       	ldi	r24, 0x56	; 86
     cc0:	90 e2       	ldi	r25, 0x20	; 32
     cc2:	0e 94 9c 29 	call	0x5338	; 0x5338 <PrintBussensors>
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
     cc6:	66 e5       	ldi	r22, 0x56	; 86
     cc8:	70 e2       	ldi	r23, 0x20	; 32
     cca:	82 ec       	ldi	r24, 0xC2	; 194
     ccc:	91 e2       	ldi	r25, 0x21	; 33
     cce:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
     cd2:	37 c0       	rjmp	.+110    	; 0xd42 <main+0x202>

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
				case DEBUGPRINT_START:
					if(now - prevIDPrint >= PRINT_ID_INTERVAL) {
     cd4:	4c 18       	sub	r4, r12
     cd6:	5d 08       	sbc	r5, r13
     cd8:	6e 08       	sbc	r6, r14
     cda:	7f 08       	sbc	r7, r15
     cdc:	80 ec       	ldi	r24, 0xC0	; 192
     cde:	48 16       	cp	r4, r24
     ce0:	86 ec       	ldi	r24, 0xC6	; 198
     ce2:	58 06       	cpc	r5, r24
     ce4:	8d e2       	ldi	r24, 0x2D	; 45
     ce6:	68 06       	cpc	r6, r24
     ce8:	71 04       	cpc	r7, r1
     cea:	60 f0       	brcs	.+24     	; 0xd04 <main+0x1c4>
						prevIDPrint += PRINT_ID_INTERVAL;
     cec:	20 ec       	ldi	r18, 0xC0	; 192
     cee:	c2 0e       	add	r12, r18
     cf0:	26 ec       	ldi	r18, 0xC6	; 198
     cf2:	d2 1e       	adc	r13, r18
     cf4:	2d e2       	ldi	r18, 0x2D	; 45
     cf6:	e2 1e       	adc	r14, r18
     cf8:	f1 1c       	adc	r15, r1
						PrintResetHeader(&gCtrl_IO);
     cfa:	86 e5       	ldi	r24, 0x56	; 86
     cfc:	90 e2       	ldi	r25, 0x20	; 32
     cfe:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <PrintResetHeader>
     d02:	25 c0       	rjmp	.+74     	; 0xd4e <main+0x20e>
					}
					else {
						TakeSnapshot();
     d04:	0e 94 f7 13 	call	0x27ee	; 0x27ee <TakeSnapshot>
 						if(I_AM_H2A)
     d08:	80 91 68 06 	lds	r24, 0x0668
     d0c:	80 73       	andi	r24, 0x30	; 48
     d0e:	e1 f4       	brne	.+56     	; 0xd48 <main+0x208>
 							FCTakeSnapshot();
     d10:	0e 94 27 28 	call	0x504e	; 0x504e <FCTakeSnapshot>
     d14:	19 c0       	rjmp	.+50     	; 0xd48 <main+0x208>
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
						PrintCSV_H2A(&gCtrl_IO);
						debugPrintstate = DEBUGPRINT_FC;
					}
					else if(I_AM_EVA_M) {
     d16:	80 91 68 06 	lds	r24, 0x0668
     d1a:	80 73       	andi	r24, 0x30	; 48
     d1c:	80 33       	cpi	r24, 0x30	; 48
     d1e:	29 f4       	brne	.+10     	; 0xd2a <main+0x1ea>
						PrintCSV_H2A(&gCtrl_IO);
     d20:	86 e5       	ldi	r24, 0x56	; 86
     d22:	90 e2       	ldi	r25, 0x20	; 32
     d24:	0e 94 18 14 	call	0x2830	; 0x2830 <PrintCSV_H2A>
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <main+0x1fc>
						debugPrintstate = DEBUGPRINT_BUS;
					}
					else {
						PrintCSV_EVA(&gCtrl_IO);
     d2a:	86 e5       	ldi	r24, 0x56	; 86
     d2c:	90 e2       	ldi	r25, 0x20	; 32
     d2e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <PrintCSV_EVA>
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <main+0x1fc>
						debugPrintstate = DEBUGPRINT_BUS;
					}
					break;
				case DEBUGPRINT_FC:
					FCPrintDataCSV(&gCtrl_IO);
     d34:	86 e5       	ldi	r24, 0x56	; 86
     d36:	90 e2       	ldi	r25, 0x20	; 32
     d38:	0e 94 31 28 	call	0x5062	; 0x5062 <FCPrintDataCSV>
					debugPrintstate = DEBUGPRINT_BUS;
					break;
     d3c:	10 e0       	ldi	r17, 0x00	; 0
						debugPrintstate = DEBUGPRINT_BUS;
					}
					break;
				case DEBUGPRINT_FC:
					FCPrintDataCSV(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_BUS;
     d3e:	c3 e0       	ldi	r28, 0x03	; 3
					break;
     d40:	a6 cf       	rjmp	.-180    	; 0xc8e <main+0x14e>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     d42:	10 e0       	ldi	r17, 0x00	; 0
					PrintBussensors(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
				default:
					debugPrintstate = DEBUGPRINT_START;
     d44:	c0 e0       	ldi	r28, 0x00	; 0
     d46:	a3 cf       	rjmp	.-186    	; 0xc8e <main+0x14e>
     d48:	10 e0       	ldi	r17, 0x00	; 0
					}
					else {
						TakeSnapshot();
 						if(I_AM_H2A)
 							FCTakeSnapshot();
						debugPrintstate = DEBUGPRINT_ANALOG;
     d4a:	c1 e0       	ldi	r28, 0x01	; 1
     d4c:	a0 cf       	rjmp	.-192    	; 0xc8e <main+0x14e>
     d4e:	10 e0       	ldi	r17, 0x00	; 0
     d50:	9e cf       	rjmp	.-196    	; 0xc8e <main+0x14e>

00000d52 <CoreAnalogTakeSnapshot485>:
} /* CalibrateChannel */


static int CoreAnalogTakeSnapshot485(const char *subadress) {
	
	sTakeSnapshot485 = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	80 93 cf 28 	sts	0x28CF, r24
	return 0;
	
} /* CoreAnalogTakeSnapshot485 */
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	08 95       	ret

00000d5e <GetCruiseControlButtonStatus>:
	
	return err;
} /* GetFullPowerButtonStatus */


static int GetCruiseControlButtonStatus(const char *subadress, char *printbuf, int maxChars) {
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	eb 01       	movw	r28, r22
     d6a:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%d,%.4f",
			!sSensorDataSnapshot485.selCCState, ((float) sSensorDataSnapshot485.selCCTimestamp / CYCLES_PER_SECOND)) >= maxChars)
     d6c:	60 91 3b 29 	lds	r22, 0x293B
     d70:	70 91 3c 29 	lds	r23, 0x293C
     d74:	80 91 3d 29 	lds	r24, 0x293D
     d78:	90 91 3e 29 	lds	r25, 0x293E
     d7c:	f0 90 36 29 	lds	r15, 0x2936
     d80:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e4       	ldi	r19, 0x40	; 64
     d88:	4c e9       	ldi	r20, 0x9C	; 156
     d8a:	55 e4       	ldi	r21, 0x45	; 69
     d8c:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>


static int GetCruiseControlButtonStatus(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;

	if(snprintf(printbuf, maxChars, "%d,%.4f",
     d90:	9f 93       	push	r25
     d92:	8f 93       	push	r24
     d94:	7f 93       	push	r23
     d96:	6f 93       	push	r22
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	f1 10       	cpse	r15, r1
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	1f 92       	push	r1
     da0:	8f 93       	push	r24
     da2:	86 ec       	ldi	r24, 0xC6	; 198
     da4:	91 e2       	ldi	r25, 0x21	; 33
     da6:	9f 93       	push	r25
     da8:	8f 93       	push	r24
     daa:	1f 93       	push	r17
     dac:	0f 93       	push	r16
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     db6:	2d b7       	in	r18, 0x3d	; 61
     db8:	3e b7       	in	r19, 0x3e	; 62
     dba:	24 5f       	subi	r18, 0xF4	; 244
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	2d bf       	out	0x3d, r18	; 61
     dc0:	3e bf       	out	0x3e, r19	; 62
     dc2:	80 17       	cp	r24, r16
     dc4:	91 07       	cpc	r25, r17
     dc6:	24 f0       	brlt	.+8      	; 0xdd0 <GetCruiseControlButtonStatus+0x72>
			!sSensorDataSnapshot485.selCCState, ((float) sSensorDataSnapshot485.selCCTimestamp / CYCLES_PER_SECOND)) >= maxChars)
	printbuf[0] = '\0';
     dc8:	18 82       	st	Y, r1
	return err;
} /* GetFullPowerButtonStatus */


static int GetCruiseControlButtonStatus(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <GetCruiseControlButtonStatus+0x76>

	if(snprintf(printbuf, maxChars, "%d,%.4f",
			!sSensorDataSnapshot485.selCCState, ((float) sSensorDataSnapshot485.selCCTimestamp / CYCLES_PER_SECOND)) >= maxChars)
	printbuf[0] = '\0';
	else
		err = 0;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetCruiseControlButtonStatus */
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	08 95       	ret

00000de0 <GetFullPowerButtonStatus>:
	
	return err;
} /* GetDiodeStatus */


static int GetFullPowerButtonStatus(const char *subadress, char *printbuf, int maxChars) {
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	eb 01       	movw	r28, r22
     dec:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%d,%.4f",
			!sSensorDataSnapshot485.selFPState, ((float) sSensorDataSnapshot485.selFPTimestamp / CYCLES_PER_SECOND)) >= maxChars)
     dee:	60 91 37 29 	lds	r22, 0x2937
     df2:	70 91 38 29 	lds	r23, 0x2938
     df6:	80 91 39 29 	lds	r24, 0x2939
     dfa:	90 91 3a 29 	lds	r25, 0x293A
     dfe:	f0 90 35 29 	lds	r15, 0x2935
     e02:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e4       	ldi	r19, 0x40	; 64
     e0a:	4c e9       	ldi	r20, 0x9C	; 156
     e0c:	55 e4       	ldi	r21, 0x45	; 69
     e0e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>


static int GetFullPowerButtonStatus(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;

	if(snprintf(printbuf, maxChars, "%d,%.4f",
     e12:	9f 93       	push	r25
     e14:	8f 93       	push	r24
     e16:	7f 93       	push	r23
     e18:	6f 93       	push	r22
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	f1 10       	cpse	r15, r1
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	1f 92       	push	r1
     e22:	8f 93       	push	r24
     e24:	86 ec       	ldi	r24, 0xC6	; 198
     e26:	91 e2       	ldi	r25, 0x21	; 33
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	1f 93       	push	r17
     e2e:	0f 93       	push	r16
     e30:	df 93       	push	r29
     e32:	cf 93       	push	r28
     e34:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     e38:	2d b7       	in	r18, 0x3d	; 61
     e3a:	3e b7       	in	r19, 0x3e	; 62
     e3c:	24 5f       	subi	r18, 0xF4	; 244
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	2d bf       	out	0x3d, r18	; 61
     e42:	3e bf       	out	0x3e, r19	; 62
     e44:	80 17       	cp	r24, r16
     e46:	91 07       	cpc	r25, r17
     e48:	24 f0       	brlt	.+8      	; 0xe52 <GetFullPowerButtonStatus+0x72>
			!sSensorDataSnapshot485.selFPState, ((float) sSensorDataSnapshot485.selFPTimestamp / CYCLES_PER_SECOND)) >= maxChars)
		printbuf[0] = '\0';
     e4a:	18 82       	st	Y, r1
	return err;
} /* GetDiodeStatus */


static int GetFullPowerButtonStatus(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <GetFullPowerButtonStatus+0x76>

	if(snprintf(printbuf, maxChars, "%d,%.4f",
			!sSensorDataSnapshot485.selFPState, ((float) sSensorDataSnapshot485.selFPTimestamp / CYCLES_PER_SECOND)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetFullPowerButtonStatus */
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	08 95       	ret

00000e62 <GetMotorDriverTemp>:
	
	return err;
} /* GetMotorCurrent */


static int GetMotorDriverTemp(const char *subadress, char *printbuf, int maxChars) {
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	eb 01       	movw	r28, r22
     e6c:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.driverTempFiltered / (65536.0f * 10.0f)) >= maxChars)
     e6e:	60 91 01 29 	lds	r22, 0x2901
     e72:	70 91 02 29 	lds	r23, 0x2902
     e76:	80 91 03 29 	lds	r24, 0x2903
     e7a:	90 91 04 29 	lds	r25, 0x2904
     e7e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	59 e4       	ldi	r21, 0x49	; 73
     e8a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	7f 93       	push	r23
     e94:	6f 93       	push	r22
     e96:	8e ec       	ldi	r24, 0xCE	; 206
     e98:	91 e2       	ldi	r25, 0x21	; 33
     e9a:	9f 93       	push	r25
     e9c:	8f 93       	push	r24
     e9e:	1f 93       	push	r17
     ea0:	0f 93       	push	r16
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     eaa:	2d b7       	in	r18, 0x3d	; 61
     eac:	3e b7       	in	r19, 0x3e	; 62
     eae:	26 5f       	subi	r18, 0xF6	; 246
     eb0:	3f 4f       	sbci	r19, 0xFF	; 255
     eb2:	2d bf       	out	0x3d, r18	; 61
     eb4:	3e bf       	out	0x3e, r19	; 62
     eb6:	80 17       	cp	r24, r16
     eb8:	91 07       	cpc	r25, r17
     eba:	24 f0       	brlt	.+8      	; 0xec4 <GetMotorDriverTemp+0x62>
		printbuf[0] = '\0';
     ebc:	18 82       	st	Y, r1
	return err;
} /* GetMotorCurrent */


static int GetMotorDriverTemp(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GetMotorDriverTemp+0x66>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.driverTempFiltered / (65536.0f * 10.0f)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetMotorDriverTemp */
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <GetDiodeStatus>:
	
	return err;
} /* GetTimeSnapshot */


static int GetDiodeStatus(const char *subadress, char *printbuf, int maxChars) {
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	eb 01       	movw	r28, r22
     ede:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%d,%.4f",
			!!sSensorDataSnapshot485.adc.h2a.idealDiodeState, ((float) sSensorDataSnapshot485.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND)) >= maxChars)
     ee0:	60 91 fd 28 	lds	r22, 0x28FD
     ee4:	70 91 fe 28 	lds	r23, 0x28FE
     ee8:	80 91 ff 28 	lds	r24, 0x28FF
     eec:	90 91 00 29 	lds	r25, 0x2900
     ef0:	f0 90 fc 28 	lds	r15, 0x28FC
     ef4:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e4       	ldi	r19, 0x40	; 64
     efc:	4c e9       	ldi	r20, 0x9C	; 156
     efe:	55 e4       	ldi	r21, 0x45	; 69
     f00:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>


static int GetDiodeStatus(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;

	if(snprintf(printbuf, maxChars, "%d,%.4f",
     f04:	9f 93       	push	r25
     f06:	8f 93       	push	r24
     f08:	7f 93       	push	r23
     f0a:	6f 93       	push	r22
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	f1 10       	cpse	r15, r1
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <GetDiodeStatus+0x42>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	1f 92       	push	r1
     f16:	8f 93       	push	r24
     f18:	86 ec       	ldi	r24, 0xC6	; 198
     f1a:	91 e2       	ldi	r25, 0x21	; 33
     f1c:	9f 93       	push	r25
     f1e:	8f 93       	push	r24
     f20:	1f 93       	push	r17
     f22:	0f 93       	push	r16
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     f2c:	2d b7       	in	r18, 0x3d	; 61
     f2e:	3e b7       	in	r19, 0x3e	; 62
     f30:	24 5f       	subi	r18, 0xF4	; 244
     f32:	3f 4f       	sbci	r19, 0xFF	; 255
     f34:	2d bf       	out	0x3d, r18	; 61
     f36:	3e bf       	out	0x3e, r19	; 62
     f38:	80 17       	cp	r24, r16
     f3a:	91 07       	cpc	r25, r17
     f3c:	24 f0       	brlt	.+8      	; 0xf46 <GetDiodeStatus+0x74>
			!!sSensorDataSnapshot485.adc.h2a.idealDiodeState, ((float) sSensorDataSnapshot485.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND)) >= maxChars)
		printbuf[0] = '\0';
     f3e:	18 82       	st	Y, r1
	return err;
} /* GetTimeSnapshot */


static int GetDiodeStatus(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <GetDiodeStatus+0x78>

	if(snprintf(printbuf, maxChars, "%d,%.4f",
			!!sSensorDataSnapshot485.adc.h2a.idealDiodeState, ((float) sSensorDataSnapshot485.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetDiodeStatus */
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	08 95       	ret

00000f56 <GetTimeSnapshot>:
	
	return err;
} /* GetMotorDriverTemp */


static int GetTimeSnapshot(const char *subadress, char *printbuf, int maxChars) {
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	eb 01       	movw	r28, r22
     f60:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.4f", (float) sSessionCycleCountSnapshot485 / CYCLES_PER_SECOND) >= maxChars)
     f62:	60 91 d0 28 	lds	r22, 0x28D0
     f66:	70 91 d1 28 	lds	r23, 0x28D1
     f6a:	80 91 d2 28 	lds	r24, 0x28D2
     f6e:	90 91 d3 28 	lds	r25, 0x28D3
     f72:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e4       	ldi	r19, 0x40	; 64
     f7a:	4c e9       	ldi	r20, 0x9C	; 156
     f7c:	55 e4       	ldi	r21, 0x45	; 69
     f7e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
     f82:	9f 93       	push	r25
     f84:	8f 93       	push	r24
     f86:	7f 93       	push	r23
     f88:	6f 93       	push	r22
     f8a:	89 ec       	ldi	r24, 0xC9	; 201
     f8c:	91 e2       	ldi	r25, 0x21	; 33
     f8e:	9f 93       	push	r25
     f90:	8f 93       	push	r24
     f92:	1f 93       	push	r17
     f94:	0f 93       	push	r16
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
     f9e:	2d b7       	in	r18, 0x3d	; 61
     fa0:	3e b7       	in	r19, 0x3e	; 62
     fa2:	26 5f       	subi	r18, 0xF6	; 246
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	2d bf       	out	0x3d, r18	; 61
     fa8:	3e bf       	out	0x3e, r19	; 62
     faa:	80 17       	cp	r24, r16
     fac:	91 07       	cpc	r25, r17
     fae:	24 f0       	brlt	.+8      	; 0xfb8 <GetTimeSnapshot+0x62>
		printbuf[0] = '\0';
     fb0:	18 82       	st	Y, r1
	return err;
} /* GetMotorDriverTemp */


static int GetTimeSnapshot(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GetTimeSnapshot+0x66>

	if(snprintf(printbuf, maxChars, "%.4f", (float) sSessionCycleCountSnapshot485 / CYCLES_PER_SECOND) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetTimeSnapshot */
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <GetSupercapEnergy>:
	
	return err;
} /* GetSupercapPower */


static int GetSupercapEnergy(const char *subadress, char *printbuf, int maxChars) {
     fc6:	4f 92       	push	r4
     fc8:	5f 92       	push	r5
     fca:	6f 92       	push	r6
     fcc:	7f 92       	push	r7
     fce:	8f 92       	push	r8
     fd0:	9f 92       	push	r9
     fd2:	af 92       	push	r10
     fd4:	bf 92       	push	r11
     fd6:	cf 92       	push	r12
     fd8:	df 92       	push	r13
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	8b 01       	movw	r16, r22
     fe8:	ea 01       	movw	r28, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale)) >= maxChars)
     fea:	20 91 f4 28 	lds	r18, 0x28F4
     fee:	30 91 f5 28 	lds	r19, 0x28F5
     ff2:	40 91 f6 28 	lds	r20, 0x28F6
     ff6:	50 91 f7 28 	lds	r21, 0x28F7
     ffa:	60 91 f8 28 	lds	r22, 0x28F8
     ffe:	70 91 f9 28 	lds	r23, 0x28F9
    1002:	80 91 fa 28 	lds	r24, 0x28FA
    1006:	90 91 fb 28 	lds	r25, 0x28FB
    100a:	40 90 d1 29 	lds	r4, 0x29D1
    100e:	50 90 d2 29 	lds	r5, 0x29D2
    1012:	60 90 d3 29 	lds	r6, 0x29D3
    1016:	70 90 d4 29 	lds	r7, 0x29D4
    101a:	80 90 d5 29 	lds	r8, 0x29D5
    101e:	90 90 d6 29 	lds	r9, 0x29D6
    1022:	a0 90 d7 29 	lds	r10, 0x29D7
    1026:	b0 90 d8 29 	lds	r11, 0x29D8
    102a:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__floatdisf>
    102e:	6b 01       	movw	r12, r22
    1030:	7c 01       	movw	r14, r24
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e4       	ldi	r19, 0x40	; 64
    1036:	4c e9       	ldi	r20, 0x9C	; 156
    1038:	55 e4       	ldi	r21, 0x45	; 69
    103a:	c3 01       	movw	r24, r6
    103c:	b2 01       	movw	r22, r4
    103e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    1042:	a5 01       	movw	r20, r10
    1044:	94 01       	movw	r18, r8
    1046:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    104a:	9b 01       	movw	r18, r22
    104c:	ac 01       	movw	r20, r24
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    1056:	9f 93       	push	r25
    1058:	8f 93       	push	r24
    105a:	7f 93       	push	r23
    105c:	6f 93       	push	r22
    105e:	8e ec       	ldi	r24, 0xCE	; 206
    1060:	91 e2       	ldi	r25, 0x21	; 33
    1062:	9f 93       	push	r25
    1064:	8f 93       	push	r24
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	1f 93       	push	r17
    106c:	0f 93       	push	r16
    106e:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    1072:	ed b7       	in	r30, 0x3d	; 61
    1074:	fe b7       	in	r31, 0x3e	; 62
    1076:	3a 96       	adiw	r30, 0x0a	; 10
    1078:	ed bf       	out	0x3d, r30	; 61
    107a:	fe bf       	out	0x3e, r31	; 62
    107c:	8c 17       	cp	r24, r28
    107e:	9d 07       	cpc	r25, r29
    1080:	2c f0       	brlt	.+10     	; 0x108c <GetSupercapEnergy+0xc6>
		printbuf[0] = '\0';
    1082:	f8 01       	movw	r30, r16
    1084:	10 82       	st	Z, r1
	return err;
} /* GetSupercapPower */


static int GetSupercapEnergy(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 c0       	rjmp	.+4      	; 0x1090 <GetSupercapEnergy+0xca>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetSupercapEnergy */
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	bf 90       	pop	r11
    10a2:	af 90       	pop	r10
    10a4:	9f 90       	pop	r9
    10a6:	8f 90       	pop	r8
    10a8:	7f 90       	pop	r7
    10aa:	6f 90       	pop	r6
    10ac:	5f 90       	pop	r5
    10ae:	4f 90       	pop	r4
    10b0:	08 95       	ret

000010b2 <GetSupercapPower>:
	
	return err;
} /* GetSupercapCurrent */


static int GetSupercapPower(const char *subadress, char *printbuf, int maxChars) {
    10b2:	4f 92       	push	r4
    10b4:	5f 92       	push	r5
    10b6:	6f 92       	push	r6
    10b8:	7f 92       	push	r7
    10ba:	8f 92       	push	r8
    10bc:	9f 92       	push	r9
    10be:	af 92       	push	r10
    10c0:	bf 92       	push	r11
    10c2:	cf 92       	push	r12
    10c4:	df 92       	push	r13
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	8b 01       	movw	r16, r22
    10d4:	ea 01       	movw	r28, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale)) >= maxChars)
    10d6:	60 91 e8 28 	lds	r22, 0x28E8
    10da:	70 91 e9 28 	lds	r23, 0x28E9
    10de:	80 91 ea 28 	lds	r24, 0x28EA
    10e2:	90 91 eb 28 	lds	r25, 0x28EB
    10e6:	40 90 d1 29 	lds	r4, 0x29D1
    10ea:	50 90 d2 29 	lds	r5, 0x29D2
    10ee:	60 90 d3 29 	lds	r6, 0x29D3
    10f2:	70 90 d4 29 	lds	r7, 0x29D4
    10f6:	80 90 d5 29 	lds	r8, 0x29D5
    10fa:	90 90 d6 29 	lds	r9, 0x29D6
    10fe:	a0 90 d7 29 	lds	r10, 0x29D7
    1102:	b0 90 d8 29 	lds	r11, 0x29D8
    1106:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    110a:	6b 01       	movw	r12, r22
    110c:	7c 01       	movw	r14, r24
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	53 e4       	ldi	r21, 0x43	; 67
    1116:	c3 01       	movw	r24, r6
    1118:	b2 01       	movw	r22, r4
    111a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    111e:	a5 01       	movw	r20, r10
    1120:	94 01       	movw	r18, r8
    1122:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	c7 01       	movw	r24, r14
    112c:	b6 01       	movw	r22, r12
    112e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    1132:	9f 93       	push	r25
    1134:	8f 93       	push	r24
    1136:	7f 93       	push	r23
    1138:	6f 93       	push	r22
    113a:	8e ec       	ldi	r24, 0xCE	; 206
    113c:	91 e2       	ldi	r25, 0x21	; 33
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	1f 93       	push	r17
    1148:	0f 93       	push	r16
    114a:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    114e:	ed b7       	in	r30, 0x3d	; 61
    1150:	fe b7       	in	r31, 0x3e	; 62
    1152:	3a 96       	adiw	r30, 0x0a	; 10
    1154:	ed bf       	out	0x3d, r30	; 61
    1156:	fe bf       	out	0x3e, r31	; 62
    1158:	8c 17       	cp	r24, r28
    115a:	9d 07       	cpc	r25, r29
    115c:	2c f0       	brlt	.+10     	; 0x1168 <GetSupercapPower+0xb6>
		printbuf[0] = '\0';
    115e:	f8 01       	movw	r30, r16
    1160:	10 82       	st	Z, r1
	return err;
} /* GetSupercapCurrent */


static int GetSupercapPower(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 c0       	rjmp	.+4      	; 0x116c <GetSupercapPower+0xba>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetSupercapPower */
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	ff 90       	pop	r15
    1176:	ef 90       	pop	r14
    1178:	df 90       	pop	r13
    117a:	cf 90       	pop	r12
    117c:	bf 90       	pop	r11
    117e:	af 90       	pop	r10
    1180:	9f 90       	pop	r9
    1182:	8f 90       	pop	r8
    1184:	7f 90       	pop	r7
    1186:	6f 90       	pop	r6
    1188:	5f 90       	pop	r5
    118a:	4f 90       	pop	r4
    118c:	08 95       	ret

0000118e <GetSupercapCurrent>:
	
	return err;
} /* GetSupercapVoltage */


static int GetSupercapCurrent(const char *subadress, char *printbuf, int maxChars) {
    118e:	8f 92       	push	r8
    1190:	9f 92       	push	r9
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	eb 01       	movw	r28, r22
    11a8:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale)) >= maxChars)
    11aa:	60 91 e0 28 	lds	r22, 0x28E0
    11ae:	70 91 e1 28 	lds	r23, 0x28E1
    11b2:	80 91 e2 28 	lds	r24, 0x28E2
    11b6:	90 91 e3 28 	lds	r25, 0x28E3
    11ba:	80 90 d5 29 	lds	r8, 0x29D5
    11be:	90 90 d6 29 	lds	r9, 0x29D6
    11c2:	a0 90 d7 29 	lds	r10, 0x29D7
    11c6:	b0 90 d8 29 	lds	r11, 0x29D8
    11ca:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    11ce:	6b 01       	movw	r12, r22
    11d0:	7c 01       	movw	r14, r24
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e8       	ldi	r20, 0x80	; 128
    11d8:	57 e4       	ldi	r21, 0x47	; 71
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    11e2:	9b 01       	movw	r18, r22
    11e4:	ac 01       	movw	r20, r24
    11e6:	c7 01       	movw	r24, r14
    11e8:	b6 01       	movw	r22, r12
    11ea:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    11ee:	9f 93       	push	r25
    11f0:	8f 93       	push	r24
    11f2:	7f 93       	push	r23
    11f4:	6f 93       	push	r22
    11f6:	8e ec       	ldi	r24, 0xCE	; 206
    11f8:	91 e2       	ldi	r25, 0x21	; 33
    11fa:	9f 93       	push	r25
    11fc:	8f 93       	push	r24
    11fe:	1f 93       	push	r17
    1200:	0f 93       	push	r16
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    120a:	2d b7       	in	r18, 0x3d	; 61
    120c:	3e b7       	in	r19, 0x3e	; 62
    120e:	26 5f       	subi	r18, 0xF6	; 246
    1210:	3f 4f       	sbci	r19, 0xFF	; 255
    1212:	2d bf       	out	0x3d, r18	; 61
    1214:	3e bf       	out	0x3e, r19	; 62
    1216:	80 17       	cp	r24, r16
    1218:	91 07       	cpc	r25, r17
    121a:	24 f0       	brlt	.+8      	; 0x1224 <GetSupercapCurrent+0x96>
		printbuf[0] = '\0';
    121c:	18 82       	st	Y, r1
	return err;
} /* GetSupercapVoltage */


static int GetSupercapCurrent(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <GetSupercapCurrent+0x9a>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetSupercapCurrent */
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	ff 90       	pop	r15
    1232:	ef 90       	pop	r14
    1234:	df 90       	pop	r13
    1236:	cf 90       	pop	r12
    1238:	bf 90       	pop	r11
    123a:	af 90       	pop	r10
    123c:	9f 90       	pop	r9
    123e:	8f 90       	pop	r8
    1240:	08 95       	ret

00001242 <GetSupercapVoltage>:
	
	return err;
} /* GetFuelCellCurrent */


static int GetSupercapVoltage(const char *subadress, char *printbuf, int maxChars) {
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	eb 01       	movw	r28, r22
    125c:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale)) >= maxChars)
    125e:	60 91 dc 28 	lds	r22, 0x28DC
    1262:	70 91 dd 28 	lds	r23, 0x28DD
    1266:	80 91 de 28 	lds	r24, 0x28DE
    126a:	90 91 df 28 	lds	r25, 0x28DF
    126e:	80 90 d1 29 	lds	r8, 0x29D1
    1272:	90 90 d2 29 	lds	r9, 0x29D2
    1276:	a0 90 d3 29 	lds	r10, 0x29D3
    127a:	b0 90 d4 29 	lds	r11, 0x29D4
    127e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    1282:	6b 01       	movw	r12, r22
    1284:	7c 01       	movw	r14, r24
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	57 e4       	ldi	r21, 0x47	; 71
    128e:	c5 01       	movw	r24, r10
    1290:	b4 01       	movw	r22, r8
    1292:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	c7 01       	movw	r24, r14
    129c:	b6 01       	movw	r22, r12
    129e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    12a2:	9f 93       	push	r25
    12a4:	8f 93       	push	r24
    12a6:	7f 93       	push	r23
    12a8:	6f 93       	push	r22
    12aa:	8e ec       	ldi	r24, 0xCE	; 206
    12ac:	91 e2       	ldi	r25, 0x21	; 33
    12ae:	9f 93       	push	r25
    12b0:	8f 93       	push	r24
    12b2:	1f 93       	push	r17
    12b4:	0f 93       	push	r16
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    12be:	2d b7       	in	r18, 0x3d	; 61
    12c0:	3e b7       	in	r19, 0x3e	; 62
    12c2:	26 5f       	subi	r18, 0xF6	; 246
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	2d bf       	out	0x3d, r18	; 61
    12c8:	3e bf       	out	0x3e, r19	; 62
    12ca:	80 17       	cp	r24, r16
    12cc:	91 07       	cpc	r25, r17
    12ce:	24 f0       	brlt	.+8      	; 0x12d8 <GetSupercapVoltage+0x96>
		printbuf[0] = '\0';
    12d0:	18 82       	st	Y, r1
	return err;
} /* GetFuelCellCurrent */


static int GetSupercapVoltage(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <GetSupercapVoltage+0x9a>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetSupercapVoltage */
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	ef 90       	pop	r14
    12e8:	df 90       	pop	r13
    12ea:	cf 90       	pop	r12
    12ec:	bf 90       	pop	r11
    12ee:	af 90       	pop	r10
    12f0:	9f 90       	pop	r9
    12f2:	8f 90       	pop	r8
    12f4:	08 95       	ret

000012f6 <GetFuelCellEnergy>:
	
	return err;
} /* GetFuelCellPower */


static int GetFuelCellEnergy(const char *subadress, char *printbuf, int maxChars) {
    12f6:	4f 92       	push	r4
    12f8:	5f 92       	push	r5
    12fa:	6f 92       	push	r6
    12fc:	7f 92       	push	r7
    12fe:	8f 92       	push	r8
    1300:	9f 92       	push	r9
    1302:	af 92       	push	r10
    1304:	bf 92       	push	r11
    1306:	cf 92       	push	r12
    1308:	df 92       	push	r13
    130a:	ef 92       	push	r14
    130c:	ff 92       	push	r15
    130e:	0f 93       	push	r16
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	8b 01       	movw	r16, r22
    1318:	ea 01       	movw	r28, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale)) >= maxChars)
    131a:	20 91 ec 28 	lds	r18, 0x28EC
    131e:	30 91 ed 28 	lds	r19, 0x28ED
    1322:	40 91 ee 28 	lds	r20, 0x28EE
    1326:	50 91 ef 28 	lds	r21, 0x28EF
    132a:	60 91 f0 28 	lds	r22, 0x28F0
    132e:	70 91 f1 28 	lds	r23, 0x28F1
    1332:	80 91 f2 28 	lds	r24, 0x28F2
    1336:	90 91 f3 28 	lds	r25, 0x28F3
    133a:	40 90 c9 29 	lds	r4, 0x29C9
    133e:	50 90 ca 29 	lds	r5, 0x29CA
    1342:	60 90 cb 29 	lds	r6, 0x29CB
    1346:	70 90 cc 29 	lds	r7, 0x29CC
    134a:	80 90 cd 29 	lds	r8, 0x29CD
    134e:	90 90 ce 29 	lds	r9, 0x29CE
    1352:	a0 90 cf 29 	lds	r10, 0x29CF
    1356:	b0 90 d0 29 	lds	r11, 0x29D0
    135a:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__floatdisf>
    135e:	6b 01       	movw	r12, r22
    1360:	7c 01       	movw	r14, r24
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e4       	ldi	r19, 0x40	; 64
    1366:	4c e9       	ldi	r20, 0x9C	; 156
    1368:	55 e4       	ldi	r21, 0x45	; 69
    136a:	c3 01       	movw	r24, r6
    136c:	b2 01       	movw	r22, r4
    136e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    1372:	a5 01       	movw	r20, r10
    1374:	94 01       	movw	r18, r8
    1376:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    137a:	9b 01       	movw	r18, r22
    137c:	ac 01       	movw	r20, r24
    137e:	c7 01       	movw	r24, r14
    1380:	b6 01       	movw	r22, r12
    1382:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    1386:	9f 93       	push	r25
    1388:	8f 93       	push	r24
    138a:	7f 93       	push	r23
    138c:	6f 93       	push	r22
    138e:	8e ec       	ldi	r24, 0xCE	; 206
    1390:	91 e2       	ldi	r25, 0x21	; 33
    1392:	9f 93       	push	r25
    1394:	8f 93       	push	r24
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	1f 93       	push	r17
    139c:	0f 93       	push	r16
    139e:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    13a2:	ed b7       	in	r30, 0x3d	; 61
    13a4:	fe b7       	in	r31, 0x3e	; 62
    13a6:	3a 96       	adiw	r30, 0x0a	; 10
    13a8:	ed bf       	out	0x3d, r30	; 61
    13aa:	fe bf       	out	0x3e, r31	; 62
    13ac:	8c 17       	cp	r24, r28
    13ae:	9d 07       	cpc	r25, r29
    13b0:	2c f0       	brlt	.+10     	; 0x13bc <GetFuelCellEnergy+0xc6>
		printbuf[0] = '\0';
    13b2:	f8 01       	movw	r30, r16
    13b4:	10 82       	st	Z, r1
	return err;
} /* GetFuelCellPower */


static int GetFuelCellEnergy(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GetFuelCellEnergy+0xca>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetFuelCellCurrent */
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	bf 90       	pop	r11
    13d2:	af 90       	pop	r10
    13d4:	9f 90       	pop	r9
    13d6:	8f 90       	pop	r8
    13d8:	7f 90       	pop	r7
    13da:	6f 90       	pop	r6
    13dc:	5f 90       	pop	r5
    13de:	4f 90       	pop	r4
    13e0:	08 95       	ret

000013e2 <GetFuelCellPower>:
	
	return err;
} /* GetFuelCellCurrent */


static int GetFuelCellPower(const char *subadress, char *printbuf, int maxChars) {
    13e2:	4f 92       	push	r4
    13e4:	5f 92       	push	r5
    13e6:	6f 92       	push	r6
    13e8:	7f 92       	push	r7
    13ea:	8f 92       	push	r8
    13ec:	9f 92       	push	r9
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	8b 01       	movw	r16, r22
    1404:	ea 01       	movw	r28, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale)) >= maxChars)
    1406:	60 91 e4 28 	lds	r22, 0x28E4
    140a:	70 91 e5 28 	lds	r23, 0x28E5
    140e:	80 91 e6 28 	lds	r24, 0x28E6
    1412:	90 91 e7 28 	lds	r25, 0x28E7
    1416:	40 90 c9 29 	lds	r4, 0x29C9
    141a:	50 90 ca 29 	lds	r5, 0x29CA
    141e:	60 90 cb 29 	lds	r6, 0x29CB
    1422:	70 90 cc 29 	lds	r7, 0x29CC
    1426:	80 90 cd 29 	lds	r8, 0x29CD
    142a:	90 90 ce 29 	lds	r9, 0x29CE
    142e:	a0 90 cf 29 	lds	r10, 0x29CF
    1432:	b0 90 d0 29 	lds	r11, 0x29D0
    1436:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    143a:	6b 01       	movw	r12, r22
    143c:	7c 01       	movw	r14, r24
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	53 e4       	ldi	r21, 0x43	; 67
    1446:	c3 01       	movw	r24, r6
    1448:	b2 01       	movw	r22, r4
    144a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    144e:	a5 01       	movw	r20, r10
    1450:	94 01       	movw	r18, r8
    1452:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    1456:	9b 01       	movw	r18, r22
    1458:	ac 01       	movw	r20, r24
    145a:	c7 01       	movw	r24, r14
    145c:	b6 01       	movw	r22, r12
    145e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    1462:	9f 93       	push	r25
    1464:	8f 93       	push	r24
    1466:	7f 93       	push	r23
    1468:	6f 93       	push	r22
    146a:	8e ec       	ldi	r24, 0xCE	; 206
    146c:	91 e2       	ldi	r25, 0x21	; 33
    146e:	9f 93       	push	r25
    1470:	8f 93       	push	r24
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	1f 93       	push	r17
    1478:	0f 93       	push	r16
    147a:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    147e:	ed b7       	in	r30, 0x3d	; 61
    1480:	fe b7       	in	r31, 0x3e	; 62
    1482:	3a 96       	adiw	r30, 0x0a	; 10
    1484:	ed bf       	out	0x3d, r30	; 61
    1486:	fe bf       	out	0x3e, r31	; 62
    1488:	8c 17       	cp	r24, r28
    148a:	9d 07       	cpc	r25, r29
    148c:	2c f0       	brlt	.+10     	; 0x1498 <GetFuelCellPower+0xb6>
		printbuf[0] = '\0';
    148e:	f8 01       	movw	r30, r16
    1490:	10 82       	st	Z, r1
	return err;
} /* GetFuelCellCurrent */


static int GetFuelCellPower(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GetFuelCellPower+0xba>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetFuelCellPower */
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	df 90       	pop	r13
    14aa:	cf 90       	pop	r12
    14ac:	bf 90       	pop	r11
    14ae:	af 90       	pop	r10
    14b0:	9f 90       	pop	r9
    14b2:	8f 90       	pop	r8
    14b4:	7f 90       	pop	r7
    14b6:	6f 90       	pop	r6
    14b8:	5f 90       	pop	r5
    14ba:	4f 90       	pop	r4
    14bc:	08 95       	ret

000014be <GetFuelCellCurrent>:
	
	return err;
} /* GetFuelCellVoltage */


static int GetFuelCellCurrent(const char *subadress, char *printbuf, int maxChars) {
    14be:	8f 92       	push	r8
    14c0:	9f 92       	push	r9
    14c2:	af 92       	push	r10
    14c4:	bf 92       	push	r11
    14c6:	cf 92       	push	r12
    14c8:	df 92       	push	r13
    14ca:	ef 92       	push	r14
    14cc:	ff 92       	push	r15
    14ce:	0f 93       	push	r16
    14d0:	1f 93       	push	r17
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	eb 01       	movw	r28, r22
    14d8:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale)) >= maxChars)
    14da:	60 91 d8 28 	lds	r22, 0x28D8
    14de:	70 91 d9 28 	lds	r23, 0x28D9
    14e2:	80 91 da 28 	lds	r24, 0x28DA
    14e6:	90 91 db 28 	lds	r25, 0x28DB
    14ea:	80 90 cd 29 	lds	r8, 0x29CD
    14ee:	90 90 ce 29 	lds	r9, 0x29CE
    14f2:	a0 90 cf 29 	lds	r10, 0x29CF
    14f6:	b0 90 d0 29 	lds	r11, 0x29D0
    14fa:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    14fe:	6b 01       	movw	r12, r22
    1500:	7c 01       	movw	r14, r24
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e8       	ldi	r20, 0x80	; 128
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	c5 01       	movw	r24, r10
    150c:	b4 01       	movw	r22, r8
    150e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    1512:	9b 01       	movw	r18, r22
    1514:	ac 01       	movw	r20, r24
    1516:	c7 01       	movw	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    151e:	9f 93       	push	r25
    1520:	8f 93       	push	r24
    1522:	7f 93       	push	r23
    1524:	6f 93       	push	r22
    1526:	8e ec       	ldi	r24, 0xCE	; 206
    1528:	91 e2       	ldi	r25, 0x21	; 33
    152a:	9f 93       	push	r25
    152c:	8f 93       	push	r24
    152e:	1f 93       	push	r17
    1530:	0f 93       	push	r16
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    153a:	2d b7       	in	r18, 0x3d	; 61
    153c:	3e b7       	in	r19, 0x3e	; 62
    153e:	26 5f       	subi	r18, 0xF6	; 246
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	2d bf       	out	0x3d, r18	; 61
    1544:	3e bf       	out	0x3e, r19	; 62
    1546:	80 17       	cp	r24, r16
    1548:	91 07       	cpc	r25, r17
    154a:	24 f0       	brlt	.+8      	; 0x1554 <GetFuelCellCurrent+0x96>
		printbuf[0] = '\0';
    154c:	18 82       	st	Y, r1
	return err;
} /* GetFuelCellVoltage */


static int GetFuelCellCurrent(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <GetFuelCellCurrent+0x9a>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetFuelCellCurrent */
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	9f 90       	pop	r9
    156e:	8f 90       	pop	r8
    1570:	08 95       	ret

00001572 <GetFuelCellVoltage>:
	
	return err;
} /* GetWheelDistance */


static int GetFuelCellVoltage(const char *subadress, char *printbuf, int maxChars) {
    1572:	8f 92       	push	r8
    1574:	9f 92       	push	r9
    1576:	af 92       	push	r10
    1578:	bf 92       	push	r11
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	eb 01       	movw	r28, r22
    158c:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale)) >= maxChars)
    158e:	60 91 d4 28 	lds	r22, 0x28D4
    1592:	70 91 d5 28 	lds	r23, 0x28D5
    1596:	80 91 d6 28 	lds	r24, 0x28D6
    159a:	90 91 d7 28 	lds	r25, 0x28D7
    159e:	80 90 c9 29 	lds	r8, 0x29C9
    15a2:	90 90 ca 29 	lds	r9, 0x29CA
    15a6:	a0 90 cb 29 	lds	r10, 0x29CB
    15aa:	b0 90 cc 29 	lds	r11, 0x29CC
    15ae:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    15b2:	6b 01       	movw	r12, r22
    15b4:	7c 01       	movw	r14, r24
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	57 e4       	ldi	r21, 0x47	; 71
    15be:	c5 01       	movw	r24, r10
    15c0:	b4 01       	movw	r22, r8
    15c2:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    15c6:	9b 01       	movw	r18, r22
    15c8:	ac 01       	movw	r20, r24
    15ca:	c7 01       	movw	r24, r14
    15cc:	b6 01       	movw	r22, r12
    15ce:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    15d2:	9f 93       	push	r25
    15d4:	8f 93       	push	r24
    15d6:	7f 93       	push	r23
    15d8:	6f 93       	push	r22
    15da:	8e ec       	ldi	r24, 0xCE	; 206
    15dc:	91 e2       	ldi	r25, 0x21	; 33
    15de:	9f 93       	push	r25
    15e0:	8f 93       	push	r24
    15e2:	1f 93       	push	r17
    15e4:	0f 93       	push	r16
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    15ee:	2d b7       	in	r18, 0x3d	; 61
    15f0:	3e b7       	in	r19, 0x3e	; 62
    15f2:	26 5f       	subi	r18, 0xF6	; 246
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	2d bf       	out	0x3d, r18	; 61
    15f8:	3e bf       	out	0x3e, r19	; 62
    15fa:	80 17       	cp	r24, r16
    15fc:	91 07       	cpc	r25, r17
    15fe:	24 f0       	brlt	.+8      	; 0x1608 <GetFuelCellVoltage+0x96>
		printbuf[0] = '\0';
    1600:	18 82       	st	Y, r1
	return err;
} /* GetWheelDistance */


static int GetFuelCellVoltage(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GetFuelCellVoltage+0x9a>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetFuelCellVoltage */
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	bf 90       	pop	r11
    161e:	af 90       	pop	r10
    1620:	9f 90       	pop	r9
    1622:	8f 90       	pop	r8
    1624:	08 95       	ret

00001626 <GetMotorCurrent>:
	
	return err;
} /* GetMotorVoltage */


static int GetMotorCurrent(const char *subadress, char *printbuf, int maxChars) {
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	eb 01       	movw	r28, r22
    1630:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", 
	   sSensorDataSnapshot485.motorCurrentFiltered / (65536.0f * 200.0f) 
    1632:	60 91 09 29 	lds	r22, 0x2909
    1636:	70 91 0a 29 	lds	r23, 0x290A
    163a:	80 91 0b 29 	lds	r24, 0x290B
    163e:	90 91 0c 29 	lds	r25, 0x290C
    1642:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	48 e4       	ldi	r20, 0x48	; 72
    164c:	5b e4       	ldi	r21, 0x4B	; 75
    164e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
	  /* + (0.22f / 28.4f) * sSensorDataSnapshot485.inVoltageFiltered * 22.0f */ / (65536.0f * 1000.0f)) >= maxChars)
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a e7       	ldi	r20, 0x7A	; 122
    1658:	5c e4       	ldi	r21, 0x4C	; 76
    165a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>


static int GetMotorCurrent(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", 
    165e:	9f 93       	push	r25
    1660:	8f 93       	push	r24
    1662:	7f 93       	push	r23
    1664:	6f 93       	push	r22
    1666:	8e ec       	ldi	r24, 0xCE	; 206
    1668:	91 e2       	ldi	r25, 0x21	; 33
    166a:	9f 93       	push	r25
    166c:	8f 93       	push	r24
    166e:	1f 93       	push	r17
    1670:	0f 93       	push	r16
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    167a:	2d b7       	in	r18, 0x3d	; 61
    167c:	3e b7       	in	r19, 0x3e	; 62
    167e:	26 5f       	subi	r18, 0xF6	; 246
    1680:	3f 4f       	sbci	r19, 0xFF	; 255
    1682:	2d bf       	out	0x3d, r18	; 61
    1684:	3e bf       	out	0x3e, r19	; 62
    1686:	80 17       	cp	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	24 f0       	brlt	.+8      	; 0x1694 <GetMotorCurrent+0x6e>
	   sSensorDataSnapshot485.motorCurrentFiltered / (65536.0f * 200.0f) 
	  /* + (0.22f / 28.4f) * sSensorDataSnapshot485.inVoltageFiltered * 22.0f */ / (65536.0f * 1000.0f)) >= maxChars)
		printbuf[0] = '\0';
    168c:	18 82       	st	Y, r1
	return err;
} /* GetMotorVoltage */


static int GetMotorCurrent(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GetMotorCurrent+0x72>
	if(snprintf(printbuf, maxChars, "%.3f", 
	   sSensorDataSnapshot485.motorCurrentFiltered / (65536.0f * 200.0f) 
	  /* + (0.22f / 28.4f) * sSensorDataSnapshot485.inVoltageFiltered * 22.0f */ / (65536.0f * 1000.0f)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetMotorCurrent */
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	08 95       	ret

000016a2 <GetMotorVoltage>:
	
	return err;
} /* GetSupercapEnergy */


static int GetMotorVoltage(const char *subadress, char *printbuf, int maxChars) {
    16a2:	8f 92       	push	r8
    16a4:	9f 92       	push	r9
    16a6:	af 92       	push	r10
    16a8:	bf 92       	push	r11
    16aa:	cf 92       	push	r12
    16ac:	df 92       	push	r13
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	eb 01       	movw	r28, r22
    16bc:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale)) >= maxChars)
    16be:	60 91 05 29 	lds	r22, 0x2905
    16c2:	70 91 06 29 	lds	r23, 0x2906
    16c6:	80 91 07 29 	lds	r24, 0x2907
    16ca:	90 91 08 29 	lds	r25, 0x2908
    16ce:	80 90 e1 29 	lds	r8, 0x29E1
    16d2:	90 90 e2 29 	lds	r9, 0x29E2
    16d6:	a0 90 e3 29 	lds	r10, 0x29E3
    16da:	b0 90 e4 29 	lds	r11, 0x29E4
    16de:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    16e2:	6b 01       	movw	r12, r22
    16e4:	7c 01       	movw	r14, r24
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e8       	ldi	r20, 0x80	; 128
    16ec:	57 e4       	ldi	r21, 0x47	; 71
    16ee:	c5 01       	movw	r24, r10
    16f0:	b4 01       	movw	r22, r8
    16f2:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    16f6:	9b 01       	movw	r18, r22
    16f8:	ac 01       	movw	r20, r24
    16fa:	c7 01       	movw	r24, r14
    16fc:	b6 01       	movw	r22, r12
    16fe:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    1702:	9f 93       	push	r25
    1704:	8f 93       	push	r24
    1706:	7f 93       	push	r23
    1708:	6f 93       	push	r22
    170a:	8e ec       	ldi	r24, 0xCE	; 206
    170c:	91 e2       	ldi	r25, 0x21	; 33
    170e:	9f 93       	push	r25
    1710:	8f 93       	push	r24
    1712:	1f 93       	push	r17
    1714:	0f 93       	push	r16
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    171e:	2d b7       	in	r18, 0x3d	; 61
    1720:	3e b7       	in	r19, 0x3e	; 62
    1722:	26 5f       	subi	r18, 0xF6	; 246
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	2d bf       	out	0x3d, r18	; 61
    1728:	3e bf       	out	0x3e, r19	; 62
    172a:	80 17       	cp	r24, r16
    172c:	91 07       	cpc	r25, r17
    172e:	24 f0       	brlt	.+8      	; 0x1738 <GetMotorVoltage+0x96>
		printbuf[0] = '\0';
    1730:	18 82       	st	Y, r1
	return err;
} /* GetSupercapEnergy */


static int GetMotorVoltage(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <GetMotorVoltage+0x9a>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetMotorVoltage */
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	bf 90       	pop	r11
    174e:	af 90       	pop	r10
    1750:	9f 90       	pop	r9
    1752:	8f 90       	pop	r8
    1754:	08 95       	ret

00001756 <GetWheelDistance>:
	
	return err;
} /* GetWheelSpeedEVA */


static int GetWheelDistance(const char *subadress, char *printbuf, int maxChars) {
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	eb 01       	movw	r28, r22
    1760:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE) >= maxChars)
    1762:	60 91 31 29 	lds	r22, 0x2931
    1766:	70 91 32 29 	lds	r23, 0x2932
    176a:	80 91 33 29 	lds	r24, 0x2933
    176e:	90 91 34 29 	lds	r25, 0x2934
    1772:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    1776:	2b ec       	ldi	r18, 0xCB	; 203
    1778:	37 e5       	ldi	r19, 0x57	; 87
    177a:	4f e6       	ldi	r20, 0x6F	; 111
    177c:	5d e3       	ldi	r21, 0x3D	; 61
    177e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    1782:	9f 93       	push	r25
    1784:	8f 93       	push	r24
    1786:	7f 93       	push	r23
    1788:	6f 93       	push	r22
    178a:	8e ec       	ldi	r24, 0xCE	; 206
    178c:	91 e2       	ldi	r25, 0x21	; 33
    178e:	9f 93       	push	r25
    1790:	8f 93       	push	r24
    1792:	1f 93       	push	r17
    1794:	0f 93       	push	r16
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    179e:	2d b7       	in	r18, 0x3d	; 61
    17a0:	3e b7       	in	r19, 0x3e	; 62
    17a2:	26 5f       	subi	r18, 0xF6	; 246
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	2d bf       	out	0x3d, r18	; 61
    17a8:	3e bf       	out	0x3e, r19	; 62
    17aa:	80 17       	cp	r24, r16
    17ac:	91 07       	cpc	r25, r17
    17ae:	24 f0       	brlt	.+8      	; 0x17b8 <GetWheelDistance+0x62>
		printbuf[0] = '\0';
    17b0:	18 82       	st	Y, r1
	return err;
} /* GetWheelSpeedEVA */


static int GetWheelDistance(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <GetWheelDistance+0x66>

	if(snprintf(printbuf, maxChars, "%.3f", sSensorDataSnapshot485.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetWheelDistance */
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	08 95       	ret

000017c6 <GetWheelSpeedEVA>:
	
	return err;
} /* GetWheelSpeed */


static int GetWheelSpeedEVA(const char *subadress, char *printbuf, int maxChars) {
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	eb 01       	movw	r28, r22
    17d8:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", GetProcessedSpeed(sSensorDataSnapshot485.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE)) >= maxChars)
    17da:	60 91 2d 29 	lds	r22, 0x292D
    17de:	70 91 2e 29 	lds	r23, 0x292E
    17e2:	80 91 2f 29 	lds	r24, 0x292F
    17e6:	90 91 30 29 	lds	r25, 0x2930

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    17ea:	61 15       	cp	r22, r1
    17ec:	71 05       	cpc	r23, r1
    17ee:	81 05       	cpc	r24, r1
    17f0:	91 05       	cpc	r25, r1
    17f2:	e1 f0       	breq	.+56     	; 0x182c <GetWheelSpeedEVA+0x66>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    17f4:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	57 e3       	ldi	r21, 0x37	; 55
    1800:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    1804:	9b 01       	movw	r18, r22
    1806:	ac 01       	movw	r20, r24
    1808:	6a e9       	ldi	r22, 0x9A	; 154
    180a:	79 e7       	ldi	r23, 0x79	; 121
    180c:	83 e8       	ldi	r24, 0x83	; 131
    180e:	94 e4       	ldi	r25, 0x44	; 68
    1810:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    1814:	f6 2e       	mov	r15, r22
    1816:	e7 2e       	mov	r14, r23
    1818:	d8 2e       	mov	r13, r24
    181a:	c9 2e       	mov	r12, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e8       	ldi	r20, 0x80	; 128
    1822:	5f e3       	ldi	r21, 0x3F	; 63
    1824:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__cmpsf2>
    1828:	87 ff       	sbrs	r24, 7
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <GetWheelSpeedEVA+0x6e>
		res = 0.0f;
	}
	else
	res = 0.0f;
    182c:	f1 2c       	mov	r15, r1
    182e:	e1 2c       	mov	r14, r1
    1830:	d1 2c       	mov	r13, r1
    1832:	c1 2c       	mov	r12, r1


static int GetWheelSpeedEVA(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", GetProcessedSpeed(sSensorDataSnapshot485.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE)) >= maxChars)
    1834:	cf 92       	push	r12
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	8e ec       	ldi	r24, 0xCE	; 206
    183e:	91 e2       	ldi	r25, 0x21	; 33
    1840:	9f 93       	push	r25
    1842:	8f 93       	push	r24
    1844:	1f 93       	push	r17
    1846:	0f 93       	push	r16
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    1850:	2d b7       	in	r18, 0x3d	; 61
    1852:	3e b7       	in	r19, 0x3e	; 62
    1854:	26 5f       	subi	r18, 0xF6	; 246
    1856:	3f 4f       	sbci	r19, 0xFF	; 255
    1858:	2d bf       	out	0x3d, r18	; 61
    185a:	3e bf       	out	0x3e, r19	; 62
    185c:	80 17       	cp	r24, r16
    185e:	91 07       	cpc	r25, r17
    1860:	24 f0       	brlt	.+8      	; 0x186a <GetWheelSpeedEVA+0xa4>
		printbuf[0] = '\0';
    1862:	18 82       	st	Y, r1
	return err;
} /* GetWheelSpeed */


static int GetWheelSpeedEVA(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <GetWheelSpeedEVA+0xa8>

	if(snprintf(printbuf, maxChars, "%.3f", GetProcessedSpeed(sSensorDataSnapshot485.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetWheelSpeedEVA */
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	ff 90       	pop	r15
    1878:	ef 90       	pop	r14
    187a:	df 90       	pop	r13
    187c:	cf 90       	pop	r12
    187e:	08 95       	ret

00001880 <GetWheelSpeedH2A>:
	return 0;
	
} /* CoreAnalogTakeSnapshot485 */


static int GetWheelSpeedH2A(const char *subadress, char *printbuf, int maxChars) {
    1880:	cf 92       	push	r12
    1882:	df 92       	push	r13
    1884:	ef 92       	push	r14
    1886:	ff 92       	push	r15
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	eb 01       	movw	r28, r22
    1892:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", GetProcessedSpeed(sSensorDataSnapshot485.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE)) >= maxChars)
    1894:	60 91 2d 29 	lds	r22, 0x292D
    1898:	70 91 2e 29 	lds	r23, 0x292E
    189c:	80 91 2f 29 	lds	r24, 0x292F
    18a0:	90 91 30 29 	lds	r25, 0x2930

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    18a4:	61 15       	cp	r22, r1
    18a6:	71 05       	cpc	r23, r1
    18a8:	81 05       	cpc	r24, r1
    18aa:	91 05       	cpc	r25, r1
    18ac:	e1 f0       	breq	.+56     	; 0x18e6 <GetWheelSpeedH2A+0x66>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    18ae:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	57 e3       	ldi	r21, 0x37	; 55
    18ba:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    18be:	9b 01       	movw	r18, r22
    18c0:	ac 01       	movw	r20, r24
    18c2:	63 e3       	ldi	r22, 0x33	; 51
    18c4:	73 e3       	ldi	r23, 0x33	; 51
    18c6:	8f e5       	ldi	r24, 0x5F	; 95
    18c8:	94 e4       	ldi	r25, 0x44	; 68
    18ca:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    18ce:	f6 2e       	mov	r15, r22
    18d0:	e7 2e       	mov	r14, r23
    18d2:	d8 2e       	mov	r13, r24
    18d4:	c9 2e       	mov	r12, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__cmpsf2>
    18e2:	87 ff       	sbrs	r24, 7
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <GetWheelSpeedH2A+0x6e>
		res = 0.0f;
	}
	else
	res = 0.0f;
    18e6:	f1 2c       	mov	r15, r1
    18e8:	e1 2c       	mov	r14, r1
    18ea:	d1 2c       	mov	r13, r1
    18ec:	c1 2c       	mov	r12, r1


static int GetWheelSpeedH2A(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.3f", GetProcessedSpeed(sSensorDataSnapshot485.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE)) >= maxChars)
    18ee:	cf 92       	push	r12
    18f0:	df 92       	push	r13
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	8e ec       	ldi	r24, 0xCE	; 206
    18f8:	91 e2       	ldi	r25, 0x21	; 33
    18fa:	9f 93       	push	r25
    18fc:	8f 93       	push	r24
    18fe:	1f 93       	push	r17
    1900:	0f 93       	push	r16
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    190a:	2d b7       	in	r18, 0x3d	; 61
    190c:	3e b7       	in	r19, 0x3e	; 62
    190e:	26 5f       	subi	r18, 0xF6	; 246
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	2d bf       	out	0x3d, r18	; 61
    1914:	3e bf       	out	0x3e, r19	; 62
    1916:	80 17       	cp	r24, r16
    1918:	91 07       	cpc	r25, r17
    191a:	24 f0       	brlt	.+8      	; 0x1924 <GetWheelSpeedH2A+0xa4>
		printbuf[0] = '\0';
    191c:	18 82       	st	Y, r1
	
} /* CoreAnalogTakeSnapshot485 */


static int GetWheelSpeedH2A(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GetWheelSpeedH2A+0xa8>

	if(snprintf(printbuf, maxChars, "%.3f", GetProcessedSpeed(sSensorDataSnapshot485.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE)) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetWheelSpeed */
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	ff 90       	pop	r15
    1932:	ef 90       	pop	r14
    1934:	df 90       	pop	r13
    1936:	cf 90       	pop	r12
    1938:	08 95       	ret

0000193a <InitCoreAnalog>:
static void InitCoreAnalogTimer(void);
static void InitCoreAnalogSensors(void);

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse);

void InitCoreAnalog(void) {
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
} /* InitCoreAnalog */


static void InitCoreAnalogADC(void) {

	ADCA.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0));
    1940:	80 e2       	ldi	r24, 0x20	; 32
    1942:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    1946:	80 93 0c 02 	sts	0x020C, r24
	ADCA.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1));
    194a:	81 e2       	ldi	r24, 0x21	; 33
    194c:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    1950:	80 93 0d 02 	sts	0x020D, r24
	ADCB.CALL = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL0));
    1954:	84 e2       	ldi	r24, 0x24	; 36
    1956:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    195a:	80 93 4c 02 	sts	0x024C, r24
	ADCB.CALH = ReadCalibrationByte(offsetof(NVM_PROD_SIGNATURES_t, ADCBCAL1));
    195e:	85 e2       	ldi	r24, 0x25	; 37
    1960:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    1964:	80 93 4d 02 	sts	0x024D, r24
	
	PORTA.OUT = 0x00;
    1968:	10 92 04 06 	sts	0x0604, r1
	PORTA.DIR = 0x00;
    196c:	10 92 00 06 	sts	0x0600, r1
	
	PORTB.OUT = 0x00;
    1970:	10 92 24 06 	sts	0x0624, r1
	PORTB.DIR = 0x00;
    1974:	10 92 20 06 	sts	0x0620, r1
	
	/* Disable input buffers on ADC ports to reduce leakage (I hope -- not verified) */
	PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1978:	87 e0       	ldi	r24, 0x07	; 7
    197a:	80 93 10 06 	sts	0x0610, r24
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    197e:	80 93 11 06 	sts	0x0611, r24
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1982:	80 93 12 06 	sts	0x0612, r24
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1986:	80 93 13 06 	sts	0x0613, r24
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    198a:	80 93 14 06 	sts	0x0614, r24
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    198e:	80 93 15 06 	sts	0x0615, r24
	PORTA.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1992:	80 93 16 06 	sts	0x0616, r24

	PORTB.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
    1996:	80 93 30 06 	sts	0x0630, r24
	PORTB.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
    199a:	80 93 31 06 	sts	0x0631, r24
	PORTB.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
    199e:	80 93 32 06 	sts	0x0632, r24
	PORTB.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
    19a2:	80 93 33 06 	sts	0x0633, r24
	PORTB.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;
    19a6:	80 93 34 06 	sts	0x0634, r24
	PORTB.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
    19aa:	80 93 35 06 	sts	0x0635, r24
	PORTB.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;
    19ae:	80 93 36 06 	sts	0x0636, r24
	PORTB.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;
    19b2:	80 93 37 06 	sts	0x0637, r24
	
	/* Pull-downs on remaining port pins */
	PORTA.PIN7CTRL = PORT_OPC_PULLDOWN_gc;
    19b6:	10 e1       	ldi	r17, 0x10	; 16
    19b8:	10 93 17 06 	sts	0x0617, r17
		
	/* Init the ADCs */
	ADCA.CTRLB = ADC_CURRLIMIT_NO_gc | ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; /* Enable signed mode, 12-bit conversion */
    19bc:	10 93 01 02 	sts	0x0201, r17
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc; /* REF = external on pin PA0; bandgap off, temp sensor off */
    19c0:	50 e2       	ldi	r21, 0x20	; 32
    19c2:	50 93 02 02 	sts	0x0202, r21
	ADCA.EVCTRL = ADC_SWEEP_0123_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SYNCSWEEP_gc; /* Sweep channels 0-3, trigger using event channel 0, sync sweep on event */
    19c6:	46 ec       	ldi	r20, 0xC6	; 198
    19c8:	40 93 03 02 	sts	0x0203, r20
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc; /* Divide peripheral clock by 32. */
    19cc:	33 e0       	ldi	r19, 0x03	; 3
    19ce:	30 93 04 02 	sts	0x0204, r19
	
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; /* Diff in, not using the gainblock */
    19d2:	c2 e0       	ldi	r28, 0x02	; 2
    19d4:	c0 93 20 02 	sts	0x0220, r28
	ADCA.CH1.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; /* Diff in, not using the gainblock */
    19d8:	c0 93 28 02 	sts	0x0228, r28
	ADCA.CH2.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; /* Diff in, not using the gainblock */
    19dc:	c0 93 30 02 	sts	0x0230, r28
	ADCA.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; /* Diff in, not using the gainblock */
    19e0:	c0 93 38 02 	sts	0x0238, r28

	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Measure ADC_FC1 on PA5 vs V33/2 on PA1 */
    19e4:	89 e2       	ldi	r24, 0x29	; 41
    19e6:	80 93 21 02 	sts	0x0221, r24
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc | ADC_CH_MUXNEG_PIN1_gc; /* Measure ADC_FC3 on PA3 vs V33/2 on PA1 */
    19ea:	99 e1       	ldi	r25, 0x19	; 25
    19ec:	90 93 29 02 	sts	0x0229, r25
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_PIN1_gc; /* Measure ADC_SP_RAW on PA6 vs V33/2 on PA1 */
    19f0:	91 e3       	ldi	r25, 0x31	; 49
    19f2:	90 93 31 02 	sts	0x0231, r25
	ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN12_gc | ADC_CH_MUXNEG_PIN1_gc; /* Measure ADC_VMOTOR on PB4 vs V33/2 on PA1 */
    19f6:	21 e6       	ldi	r18, 0x61	; 97
    19f8:	20 93 39 02 	sts	0x0239, r18
	
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc; /* Trigger a low-level interrupt on completion of the CH0 conversion */
    19fc:	d1 e0       	ldi	r29, 0x01	; 1
    19fe:	d0 93 22 02 	sts	0x0222, r29

	ADCA.CTRLA = ADC_ENABLE_bm; /* Enable ADC */
    1a02:	d0 93 00 02 	sts	0x0200, r29

	ADCB.CTRLB = ADC_CURRLIMIT_NO_gc | ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; /* Enable signed mode, 12-bit conversion */
    1a06:	10 93 41 02 	sts	0x0241, r17
	ADCB.REFCTRL = ADC_REFSEL_AREFA_gc; /* REF = external on pin PA0; bandgap off, temp sensor off */
    1a0a:	50 93 42 02 	sts	0x0242, r21
	ADCB.EVCTRL = ADC_SWEEP_0123_gc | ADC_EVSEL_0123_gc | ADC_EVACT_SYNCSWEEP_gc; /* Sweep channels 0-3, trigger using event channel 0, sync sweep on event */
    1a0e:	40 93 43 02 	sts	0x0243, r20
	ADCB.PRESCALER = ADC_PRESCALER_DIV32_gc; /* Divide peripheral clock by 32. */
    1a12:	30 93 44 02 	sts	0x0244, r19
	
	ADCB.CH0.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; /* Diff in, not using the gainblock */
    1a16:	c0 93 60 02 	sts	0x0260, r28
	ADCB.CH1.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; /* Diff in, not using the gainblock */
    1a1a:	c0 93 68 02 	sts	0x0268, r28
	ADCB.CH2.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; /* Diff in, not using the gainblock */
    1a1e:	c0 93 70 02 	sts	0x0270, r28
	ADCB.CH3.CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc; /* Diff in, not using the gainblock */
    1a22:	c0 93 78 02 	sts	0x0278, r28

	ADCB.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN12_gc | ADC_CH_MUXNEG_PIN1_gc; /* Measure ADC_FC2 on PA4 vs V33/2 on PB1 */
    1a26:	20 93 61 02 	sts	0x0261, r18
	ADCB.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN10_gc | ADC_CH_MUXNEG_PIN1_gc; /* Measure ADC_FC4 on PA2 vs V33/2 on PB1 */
    1a2a:	21 e5       	ldi	r18, 0x51	; 81
    1a2c:	20 93 69 02 	sts	0x0269, r18
	ADCB.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_PIN1_gc; /* Measure ADC_TEMP on PB6 vs V33/2 on PB1 */
    1a30:	90 93 71 02 	sts	0x0271, r25
	ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Measure ADC_IMOTOR on PB5 vs V33/2 on PB1 */
    1a34:	80 93 79 02 	sts	0x0279, r24

	ADCB.CTRLA = ADC_ENABLE_bm; /* Enable ADC */
    1a38:	d0 93 40 02 	sts	0x0240, r29

	PMIC.CTRL |= PMIC_LOLVLEN_bm; /* Enable lo-level interrupt (ADC completion) */
    1a3c:	80 91 a2 00 	lds	r24, 0x00A2
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	80 93 a2 00 	sts	0x00A2, r24
} /* InitCoreAnalogTimer */


static void InitCoreAnalogCalibration(void) {

	sCal.fcVoltageScale = (1000.0f / (2.4f * (20.0f / 2.0f)));
    1a46:	8b ea       	ldi	r24, 0xAB	; 171
    1a48:	9a ea       	ldi	r25, 0xAA	; 170
    1a4a:	a6 e2       	ldi	r26, 0x26	; 38
    1a4c:	b2 e4       	ldi	r27, 0x42	; 66
    1a4e:	80 93 c9 29 	sts	0x29C9, r24
    1a52:	90 93 ca 29 	sts	0x29CA, r25
    1a56:	a0 93 cb 29 	sts	0x29CB, r26
    1a5a:	b0 93 cc 29 	sts	0x29CC, r27
	sCal.fcCurrentScale = ((2.58f / 2.388f) * 1000.0f / (2.4f * (10.0f / 2.0f)));
    1a5e:	47 e2       	ldi	r20, 0x27	; 39
    1a60:	51 e1       	ldi	r21, 0x11	; 17
    1a62:	64 eb       	ldi	r22, 0xB4	; 180
    1a64:	72 e4       	ldi	r23, 0x42	; 66
    1a66:	40 93 cd 29 	sts	0x29CD, r20
    1a6a:	50 93 ce 29 	sts	0x29CE, r21
    1a6e:	60 93 cf 29 	sts	0x29CF, r22
    1a72:	70 93 d0 29 	sts	0x29D0, r23
	sCal.scVoltageScale = (1000.0f / (2.4f * (20.0f / 2.0f)));
    1a76:	80 93 d1 29 	sts	0x29D1, r24
    1a7a:	90 93 d2 29 	sts	0x29D2, r25
    1a7e:	a0 93 d3 29 	sts	0x29D3, r26
    1a82:	b0 93 d4 29 	sts	0x29D4, r27
	sCal.scCurrentScale = ((2.53f / 2.3883f) * 1000.0f / (2.4f * (10.0f / 2.0f)));
    1a86:	4f e1       	ldi	r20, 0x1F	; 31
    1a88:	5e e8       	ldi	r21, 0x8E	; 142
    1a8a:	60 eb       	ldi	r22, 0xB0	; 176
    1a8c:	72 e4       	ldi	r23, 0x42	; 66
    1a8e:	40 93 d5 29 	sts	0x29D5, r20
    1a92:	50 93 d6 29 	sts	0x29D6, r21
    1a96:	60 93 d7 29 	sts	0x29D7, r22
    1a9a:	70 93 d8 29 	sts	0x29D8, r23

	sCal.motorVoltageScale = (1000.0f / (24.0f));
    1a9e:	80 93 e1 29 	sts	0x29E1, r24
    1aa2:	90 93 e2 29 	sts	0x29E2, r25
    1aa6:	a0 93 e3 29 	sts	0x29E3, r26
    1aaa:	b0 93 e4 29 	sts	0x29E4, r27
	sCal.motorCurrentScale = (1000.0f / (16.7f));
    1aae:	4d e5       	ldi	r20, 0x5D	; 93
    1ab0:	55 e8       	ldi	r21, 0x85	; 133
    1ab2:	6f e6       	ldi	r22, 0x6F	; 111
    1ab4:	72 e4       	ldi	r23, 0x42	; 66
    1ab6:	40 93 e5 29 	sts	0x29E5, r20
    1aba:	50 93 e6 29 	sts	0x29E6, r21
    1abe:	60 93 e7 29 	sts	0x29E7, r22
    1ac2:	70 93 e8 29 	sts	0x29E8, r23
	sCal.inVoltageScale = (1000.0f / (24.0f));
    1ac6:	80 93 e9 29 	sts	0x29E9, r24
    1aca:	90 93 ea 29 	sts	0x29EA, r25
    1ace:	a0 93 eb 29 	sts	0x29EB, r26
    1ad2:	b0 93 ec 29 	sts	0x29EC, r27
	sCal.inCurrentScale = (1000.0f / (20.0f));
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	a8 e4       	ldi	r26, 0x48	; 72
    1adc:	b2 e4       	ldi	r27, 0x42	; 66
    1ade:	80 93 ed 29 	sts	0x29ED, r24
    1ae2:	90 93 ee 29 	sts	0x29EE, r25
    1ae6:	a0 93 ef 29 	sts	0x29EF, r26
    1aea:	b0 93 f0 29 	sts	0x29F0, r27
	
	TRYREADEEPROM(sCal.fcVoltageScale, EE_FC_VSCALE);
    1aee:	44 e0       	ldi	r20, 0x04	; 4
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	60 e0       	ldi	r22, 0x00	; 0
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	89 ec       	ldi	r24, 0xC9	; 201
    1af8:	99 e2       	ldi	r25, 0x29	; 41
    1afa:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.fcCurrentScale, EE_FC_ISCALE);
    1afe:	44 e0       	ldi	r20, 0x04	; 4
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	60 e1       	ldi	r22, 0x10	; 16
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	8d ec       	ldi	r24, 0xCD	; 205
    1b08:	99 e2       	ldi	r25, 0x29	; 41
    1b0a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.fcVoltageScale, EE_SC_VSCALE);
    1b0e:	44 e0       	ldi	r20, 0x04	; 4
    1b10:	50 e0       	ldi	r21, 0x00	; 0
    1b12:	60 e2       	ldi	r22, 0x20	; 32
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	89 ec       	ldi	r24, 0xC9	; 201
    1b18:	99 e2       	ldi	r25, 0x29	; 41
    1b1a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.fcCurrentScale, EE_SC_ISCALE);
    1b1e:	44 e0       	ldi	r20, 0x04	; 4
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	60 e3       	ldi	r22, 0x30	; 48
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	8d ec       	ldi	r24, 0xCD	; 205
    1b28:	99 e2       	ldi	r25, 0x29	; 41
    1b2a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>

	TRYREADEEPROM(sCal.fcVoltageOffset, EE_FC_VOFFSET);
    1b2e:	42 e0       	ldi	r20, 0x02	; 2
    1b30:	50 e0       	ldi	r21, 0x00	; 0
    1b32:	60 e4       	ldi	r22, 0x40	; 64
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	81 ec       	ldi	r24, 0xC1	; 193
    1b38:	99 e2       	ldi	r25, 0x29	; 41
    1b3a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.fcCurrentOffset, EE_FC_IOFFSET);
    1b3e:	42 e0       	ldi	r20, 0x02	; 2
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	64 e4       	ldi	r22, 0x44	; 68
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	83 ec       	ldi	r24, 0xC3	; 195
    1b48:	99 e2       	ldi	r25, 0x29	; 41
    1b4a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.scVoltageOffset, EE_SC_VOFFSET);
    1b4e:	42 e0       	ldi	r20, 0x02	; 2
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	68 e4       	ldi	r22, 0x48	; 72
    1b54:	70 e0       	ldi	r23, 0x00	; 0
    1b56:	85 ec       	ldi	r24, 0xC5	; 197
    1b58:	99 e2       	ldi	r25, 0x29	; 41
    1b5a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.scCurrentOffset, EE_SC_IOFFSET);
    1b5e:	42 e0       	ldi	r20, 0x02	; 2
    1b60:	50 e0       	ldi	r21, 0x00	; 0
    1b62:	6c e4       	ldi	r22, 0x4C	; 76
    1b64:	70 e0       	ldi	r23, 0x00	; 0
    1b66:	87 ec       	ldi	r24, 0xC7	; 199
    1b68:	99 e2       	ldi	r25, 0x29	; 41
    1b6a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>

	TRYREADEEPROM(sCal.motorVoltageScale, EE_M_VSCALE);
    1b6e:	44 e0       	ldi	r20, 0x04	; 4
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	60 e5       	ldi	r22, 0x50	; 80
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	81 ee       	ldi	r24, 0xE1	; 225
    1b78:	99 e2       	ldi	r25, 0x29	; 41
    1b7a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.motorCurrentScale, EE_M_ISCALE);
    1b7e:	44 e0       	ldi	r20, 0x04	; 4
    1b80:	50 e0       	ldi	r21, 0x00	; 0
    1b82:	60 e6       	ldi	r22, 0x60	; 96
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	85 ee       	ldi	r24, 0xE5	; 229
    1b88:	99 e2       	ldi	r25, 0x29	; 41
    1b8a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.inVoltageScale, EE_IN_VSCALE);
    1b8e:	44 e0       	ldi	r20, 0x04	; 4
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	60 e7       	ldi	r22, 0x70	; 112
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	89 ee       	ldi	r24, 0xE9	; 233
    1b98:	99 e2       	ldi	r25, 0x29	; 41
    1b9a:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.inCurrentScale, EE_IN_ISCALE);
    1b9e:	44 e0       	ldi	r20, 0x04	; 4
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	60 e8       	ldi	r22, 0x80	; 128
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	8d ee       	ldi	r24, 0xED	; 237
    1ba8:	99 e2       	ldi	r25, 0x29	; 41
    1baa:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>

	TRYREADEEPROM(sCal.motorVoltageOffset, EE_M_VOFFSET);
    1bae:	42 e0       	ldi	r20, 0x02	; 2
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	60 e9       	ldi	r22, 0x90	; 144
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	89 ed       	ldi	r24, 0xD9	; 217
    1bb8:	99 e2       	ldi	r25, 0x29	; 41
    1bba:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.motorCurrentOffset, EE_M_IOFFSET);
    1bbe:	42 e0       	ldi	r20, 0x02	; 2
    1bc0:	50 e0       	ldi	r21, 0x00	; 0
    1bc2:	64 e9       	ldi	r22, 0x94	; 148
    1bc4:	70 e0       	ldi	r23, 0x00	; 0
    1bc6:	8b ed       	ldi	r24, 0xDB	; 219
    1bc8:	99 e2       	ldi	r25, 0x29	; 41
    1bca:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.inVoltageOffset, EE_IN_VOFFSET);
    1bce:	42 e0       	ldi	r20, 0x02	; 2
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	68 e9       	ldi	r22, 0x98	; 152
    1bd4:	70 e0       	ldi	r23, 0x00	; 0
    1bd6:	8d ed       	ldi	r24, 0xDD	; 221
    1bd8:	99 e2       	ldi	r25, 0x29	; 41
    1bda:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
	TRYREADEEPROM(sCal.inCurrentOffset, EE_IN_IOFFSET);
    1bde:	42 e0       	ldi	r20, 0x02	; 2
    1be0:	50 e0       	ldi	r21, 0x00	; 0
    1be2:	6c e9       	ldi	r22, 0x9C	; 156
    1be4:	70 e0       	ldi	r23, 0x00	; 0
    1be6:	8f ed       	ldi	r24, 0xDF	; 223
    1be8:	99 e2       	ldi	r25, 0x29	; 41
    1bea:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>

	/* DAC for trimming */
	DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;
    1bee:	85 e0       	ldi	r24, 0x05	; 5
    1bf0:	80 93 20 03 	sts	0x0320, r24
	DACB.CTRLB = DAC_CHSEL_SINGLE_gc;
    1bf4:	10 92 21 03 	sts	0x0321, r1
	DACB.CTRLC = DAC_REFSEL_AREFA_gc;
    1bf8:	10 93 22 03 	sts	0x0322, r17

	DACB.CH0DATA = 2 * SPEEDSENSOR_MIDWAY_VAL; /* Calculated offset for a point halfway the expected sensor input extremes */
    1bfc:	8e ea       	ldi	r24, 0xAE	; 174
    1bfe:	95 e0       	ldi	r25, 0x05	; 5
    1c00:	80 93 38 03 	sts	0x0338, r24
    1c04:	90 93 39 03 	sts	0x0339, r25


static void InitCoreAnalogTimer(void) {

	/* Init the timer/PWM and associated I/Os */
	TCC0.CTRLB = 0x00; /* No input capture, no PWM, normal mode */
    1c08:	10 92 01 08 	sts	0x0801, r1
	/* CTRLC is of no interest to us */
	TCC0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc; /* No events */
    1c0c:	10 92 03 08 	sts	0x0803, r1
	TCC0.CTRLE = 0x00; /* No byte mode */
    1c10:	10 92 04 08 	sts	0x0804, r1
	TCC0.PER = TIMER_PERIOD;
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	99 e1       	ldi	r25, 0x19	; 25
    1c18:	80 93 26 08 	sts	0x0826, r24
    1c1c:	90 93 27 08 	sts	0x0827, r25
	TCC0.INTCTRLA = TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc; /* All timer interrupts off */
    1c20:	10 92 06 08 	sts	0x0806, r1
	TCC0.INTCTRLB = 0x00; /* Disable Compare/Capture interrupts */
    1c24:	10 92 07 08 	sts	0x0807, r1
	TCC0.CNT = 0;
    1c28:	10 92 20 08 	sts	0x0820, r1
    1c2c:	10 92 21 08 	sts	0x0821, r1
	TCC0.CTRLA = TC_CLKSEL_DIV1_gc; /* Start the timer with a clock divider of 1 */
    1c30:	d0 93 00 08 	sts	0x0800, r29
	
	EVSYS.CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc; /* Connect TCC0 overflow to event channel 0, thus triggering an ADC sweep on ADCs 0 and 1 */
    1c34:	80 ec       	ldi	r24, 0xC0	; 192
    1c36:	80 93 80 01 	sts	0x0180, r24
	
	/* Use TCC1 to count PWM cycles */
	TCC1.CTRLA = TC_CLKSEL_EVCH4_gc;
    1c3a:	8c e0       	ldi	r24, 0x0C	; 12
    1c3c:	80 93 40 08 	sts	0x0840, r24
	TCC1.CTRLB = TC_WGMODE_NORMAL_gc;
    1c40:	10 92 41 08 	sts	0x0841, r1
	/* No need to modify CTRLC */
	TCC1.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1c44:	10 92 43 08 	sts	0x0843, r1
	TCC1.CTRLE = TC_BYTEM_NORMAL_gc;
    1c48:	10 92 44 08 	sts	0x0844, r1
	TCC1.INTCTRLA = TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc;
    1c4c:	10 92 46 08 	sts	0x0846, r1
	TCC1.INTCTRLB = TC_CCAINTLVL_OFF_gc | TC_CCBINTLVL_OFF_gc | TC_CCCINTLVL_OFF_gc | TC_CCDINTLVL_OFF_gc;
    1c50:	10 92 47 08 	sts	0x0847, r1
	TCC1.CTRLFCLR = TC0_DIR_bm;
    1c54:	d0 93 48 08 	sts	0x0848, r29
	TCC1.PER = 0xFFFF;
    1c58:	8f ef       	ldi	r24, 0xFF	; 255
    1c5a:	9f ef       	ldi	r25, 0xFF	; 255
    1c5c:	80 93 66 08 	sts	0x0866, r24
    1c60:	90 93 67 08 	sts	0x0867, r25
	
	PORTC.DIRCLR = PIN6_bm;
    1c64:	80 e4       	ldi	r24, 0x40	; 64
    1c66:	80 93 42 06 	sts	0x0642, r24
	PORTC.PIN6CTRL = PORT_ISC_RISING_gc;
    1c6a:	d0 93 56 06 	sts	0x0656, r29
	
	EVSYS.CH4MUX = EVSYS_CHMUX_PORTC_PIN6_gc;
    1c6e:	86 e6       	ldi	r24, 0x66	; 102
    1c70:	80 93 84 01 	sts	0x0184, r24
	EVSYS.CH4CTRL = EVSYS_DIGFILT_3SAMPLES_gc;
    1c74:	c0 93 8c 01 	sts	0x018C, r28
} /* GetUnimplementedSensor */


static void InitCoreAnalogSensors(void) {
	
	if(I_AM_EVA_L | I_AM_EVA_R) {
    1c78:	90 91 68 06 	lds	r25, 0x0668
    1c7c:	80 91 68 06 	lds	r24, 0x0668
    1c80:	80 73       	andi	r24, 0x30	; 48
    1c82:	80 32       	cpi	r24, 0x20	; 32
    1c84:	29 f0       	breq	.+10     	; 0x1c90 <InitCoreAnalog+0x356>
    1c86:	89 2f       	mov	r24, r25
    1c88:	80 73       	andi	r24, 0x30	; 48
    1c8a:	80 31       	cpi	r24, 0x10	; 16
    1c8c:	09 f0       	breq	.+2      	; 0x1c90 <InitCoreAnalog+0x356>
    1c8e:	47 c0       	rjmp	.+142    	; 0x1d1e <InitCoreAnalog+0x3e4>
		AddSlaveOwnSensor(I_AM_EVA_L ? "SM01" : "SM02", GetWheelSpeedEVA, CoreAnalogTakeSnapshot485, 1);
    1c90:	80 91 68 06 	lds	r24, 0x0668
    1c94:	80 73       	andi	r24, 0x30	; 48
    1c96:	80 31       	cpi	r24, 0x10	; 16
    1c98:	19 f4       	brne	.+6      	; 0x1ca0 <InitCoreAnalog+0x366>
    1c9a:	83 ed       	ldi	r24, 0xD3	; 211
    1c9c:	91 e2       	ldi	r25, 0x21	; 33
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <InitCoreAnalog+0x36a>
    1ca0:	88 ed       	ldi	r24, 0xD8	; 216
    1ca2:	91 e2       	ldi	r25, 0x21	; 33
    1ca4:	21 e0       	ldi	r18, 0x01	; 1
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	49 ea       	ldi	r20, 0xA9	; 169
    1caa:	56 e0       	ldi	r21, 0x06	; 6
    1cac:	63 ee       	ldi	r22, 0xE3	; 227
    1cae:	7b e0       	ldi	r23, 0x0B	; 11
    1cb0:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		AddSlaveOwnSensor(I_AM_EVA_L ? "AF01" : "AF02", GetWheelDistance, NULL, 1);
    1cb4:	80 91 68 06 	lds	r24, 0x0668
    1cb8:	80 73       	andi	r24, 0x30	; 48
    1cba:	80 31       	cpi	r24, 0x10	; 16
    1cbc:	19 f4       	brne	.+6      	; 0x1cc4 <InitCoreAnalog+0x38a>
    1cbe:	8d ed       	ldi	r24, 0xDD	; 221
    1cc0:	91 e2       	ldi	r25, 0x21	; 33
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <InitCoreAnalog+0x38e>
    1cc4:	82 ee       	ldi	r24, 0xE2	; 226
    1cc6:	91 e2       	ldi	r25, 0x21	; 33
    1cc8:	21 e0       	ldi	r18, 0x01	; 1
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	6b ea       	ldi	r22, 0xAB	; 171
    1cd2:	7b e0       	ldi	r23, 0x0B	; 11
    1cd4:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
	
		AddSlaveOwnSensor(I_AM_EVA_L ? "VM01" : "VM02", GetMotorVoltage, NULL, 1);		
    1cd8:	80 91 68 06 	lds	r24, 0x0668
    1cdc:	80 73       	andi	r24, 0x30	; 48
    1cde:	80 31       	cpi	r24, 0x10	; 16
    1ce0:	19 f4       	brne	.+6      	; 0x1ce8 <InitCoreAnalog+0x3ae>
    1ce2:	87 ee       	ldi	r24, 0xE7	; 231
    1ce4:	91 e2       	ldi	r25, 0x21	; 33
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <InitCoreAnalog+0x3b2>
    1ce8:	8c ee       	ldi	r24, 0xEC	; 236
    1cea:	91 e2       	ldi	r25, 0x21	; 33
    1cec:	21 e0       	ldi	r18, 0x01	; 1
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	50 e0       	ldi	r21, 0x00	; 0
    1cf4:	61 e5       	ldi	r22, 0x51	; 81
    1cf6:	7b e0       	ldi	r23, 0x0B	; 11
    1cf8:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		AddSlaveOwnSensor(I_AM_EVA_L ? "CM01" : "CM02", GetMotorCurrent, NULL, 1);
    1cfc:	80 91 68 06 	lds	r24, 0x0668
    1d00:	80 73       	andi	r24, 0x30	; 48
    1d02:	80 31       	cpi	r24, 0x10	; 16
    1d04:	19 f4       	brne	.+6      	; 0x1d0c <InitCoreAnalog+0x3d2>
    1d06:	81 ef       	ldi	r24, 0xF1	; 241
    1d08:	91 e2       	ldi	r25, 0x21	; 33
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <InitCoreAnalog+0x3d6>
    1d0c:	86 ef       	ldi	r24, 0xF6	; 246
    1d0e:	91 e2       	ldi	r25, 0x21	; 33
    1d10:	21 e0       	ldi	r18, 0x01	; 1
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	63 e1       	ldi	r22, 0x13	; 19
    1d1a:	7b e0       	ldi	r23, 0x0B	; 11
    1d1c:	ad c0       	rjmp	.+346    	; 0x1e78 <InitCoreAnalog+0x53e>
//		AddSlaveOwnSensor(IS_EVA_LEFT ? "SG02" : "SG03", GetFullPowerButtonStatus, NULL, 5);
//		AddSlaveOwnSensor(IS_EVA_LEFT ? "SC01" : "SC02", GetCruiseControlButtonStatus, NULL, 5);
	}
	else { /* H2A */
		
		AddSlaveOwnSensor("VB01", GetFuelCellVoltage, NULL, 1);
    1d1e:	21 e0       	ldi	r18, 0x01	; 1
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	69 eb       	ldi	r22, 0xB9	; 185
    1d28:	7a e0       	ldi	r23, 0x0A	; 10
    1d2a:	8b ef       	ldi	r24, 0xFB	; 251
    1d2c:	91 e2       	ldi	r25, 0x21	; 33
    1d2e:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		AddSlaveOwnSensor("CB01", GetFuelCellCurrent, NULL, 1);
    1d32:	21 e0       	ldi	r18, 0x01	; 1
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	6f e5       	ldi	r22, 0x5F	; 95
    1d3c:	7a e0       	ldi	r23, 0x0A	; 10
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	92 e2       	ldi	r25, 0x22	; 34
    1d42:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		AddSlaveOwnSensor("PB01", GetFuelCellPower, NULL, 1);
    1d46:	21 e0       	ldi	r18, 0x01	; 1
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	61 ef       	ldi	r22, 0xF1	; 241
    1d50:	79 e0       	ldi	r23, 0x09	; 9
    1d52:	85 e0       	ldi	r24, 0x05	; 5
    1d54:	92 e2       	ldi	r25, 0x22	; 34
    1d56:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		AddSlaveOwnSensor("EB01", GetFuelCellEnergy, NULL, 5);
    1d5a:	25 e0       	ldi	r18, 0x05	; 5
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	50 e0       	ldi	r21, 0x00	; 0
    1d62:	6b e7       	ldi	r22, 0x7B	; 123
    1d64:	79 e0       	ldi	r23, 0x09	; 9
    1d66:	8a e0       	ldi	r24, 0x0A	; 10
    1d68:	92 e2       	ldi	r25, 0x22	; 34
    1d6a:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		
		AddSlaveOwnSensor("VS01", GetSupercapVoltage, NULL, 1);
    1d6e:	21 e0       	ldi	r18, 0x01	; 1
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	61 e2       	ldi	r22, 0x21	; 33
    1d78:	79 e0       	ldi	r23, 0x09	; 9
    1d7a:	8f e0       	ldi	r24, 0x0F	; 15
    1d7c:	92 e2       	ldi	r25, 0x22	; 34
    1d7e:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		AddSlaveOwnSensor("CS01", GetSupercapCurrent, NULL, 1);
    1d82:	21 e0       	ldi	r18, 0x01	; 1
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	67 ec       	ldi	r22, 0xC7	; 199
    1d8c:	78 e0       	ldi	r23, 0x08	; 8
    1d8e:	84 e1       	ldi	r24, 0x14	; 20
    1d90:	92 e2       	ldi	r25, 0x22	; 34
    1d92:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		AddSlaveOwnSensor("PS01", GetSupercapPower, NULL, 1);
    1d96:	21 e0       	ldi	r18, 0x01	; 1
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e0       	ldi	r20, 0x00	; 0
    1d9c:	50 e0       	ldi	r21, 0x00	; 0
    1d9e:	69 e5       	ldi	r22, 0x59	; 89
    1da0:	78 e0       	ldi	r23, 0x08	; 8
    1da2:	89 e1       	ldi	r24, 0x19	; 25
    1da4:	92 e2       	ldi	r25, 0x22	; 34
    1da6:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		AddSlaveOwnSensor("ES01", GetSupercapEnergy, NULL, 5);
    1daa:	25 e0       	ldi	r18, 0x05	; 5
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	63 ee       	ldi	r22, 0xE3	; 227
    1db4:	77 e0       	ldi	r23, 0x07	; 7
    1db6:	8e e1       	ldi	r24, 0x1E	; 30
    1db8:	92 e2       	ldi	r25, 0x22	; 34
    1dba:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		
		AddSlaveOwnSensor("TS01", GetTimeSnapshot, NULL, 1);
    1dbe:	21 e0       	ldi	r18, 0x01	; 1
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e0       	ldi	r20, 0x00	; 0
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	6b ea       	ldi	r22, 0xAB	; 171
    1dc8:	77 e0       	ldi	r23, 0x07	; 7
    1dca:	83 e2       	ldi	r24, 0x23	; 35
    1dcc:	92 e2       	ldi	r25, 0x22	; 34
    1dce:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		
		AddSlaveOwnSensor("SD01", GetDiodeStatus, NULL, 10);
    1dd2:	2a e0       	ldi	r18, 0x0A	; 10
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	69 e6       	ldi	r22, 0x69	; 105
    1ddc:	77 e0       	ldi	r23, 0x07	; 7
    1dde:	88 e2       	ldi	r24, 0x28	; 40
    1de0:	92 e2       	ldi	r25, 0x22	; 34
    1de2:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		if(I_AM_H2A) {
    1de6:	80 91 68 06 	lds	r24, 0x0668
    1dea:	80 73       	andi	r24, 0x30	; 48
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <InitCoreAnalog+0x4b6>
    1dee:	49 c0       	rjmp	.+146    	; 0x1e82 <InitCoreAnalog+0x548>
			AddSlaveOwnSensor("SM01", GetWheelSpeedH2A, CoreAnalogTakeSnapshot485, 1);
    1df0:	21 e0       	ldi	r18, 0x01	; 1
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	49 ea       	ldi	r20, 0xA9	; 169
    1df6:	56 e0       	ldi	r21, 0x06	; 6
    1df8:	60 e4       	ldi	r22, 0x40	; 64
    1dfa:	7c e0       	ldi	r23, 0x0C	; 12
    1dfc:	83 ed       	ldi	r24, 0xD3	; 211
    1dfe:	91 e2       	ldi	r25, 0x21	; 33
    1e00:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
			AddSlaveOwnSensor("AF01", GetWheelDistance, NULL, 1);
    1e04:	21 e0       	ldi	r18, 0x01	; 1
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	6b ea       	ldi	r22, 0xAB	; 171
    1e0e:	7b e0       	ldi	r23, 0x0B	; 11
    1e10:	8d ed       	ldi	r24, 0xDD	; 221
    1e12:	91 e2       	ldi	r25, 0x21	; 33
    1e14:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>

			AddSlaveOwnSensor("VM01", GetMotorVoltage, NULL, 1);
    1e18:	21 e0       	ldi	r18, 0x01	; 1
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	61 e5       	ldi	r22, 0x51	; 81
    1e22:	7b e0       	ldi	r23, 0x0B	; 11
    1e24:	87 ee       	ldi	r24, 0xE7	; 231
    1e26:	91 e2       	ldi	r25, 0x21	; 33
    1e28:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
			AddSlaveOwnSensor("CM01", GetMotorCurrent, NULL, 1);
    1e2c:	21 e0       	ldi	r18, 0x01	; 1
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	50 e0       	ldi	r21, 0x00	; 0
    1e34:	63 e1       	ldi	r22, 0x13	; 19
    1e36:	7b e0       	ldi	r23, 0x0B	; 11
    1e38:	81 ef       	ldi	r24, 0xF1	; 241
    1e3a:	91 e2       	ldi	r25, 0x21	; 33
    1e3c:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
			AddSlaveOwnSensor("TM01", GetMotorDriverTemp, NULL, 10);
    1e40:	2a e0       	ldi	r18, 0x0A	; 10
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	61 e3       	ldi	r22, 0x31	; 49
    1e4a:	77 e0       	ldi	r23, 0x07	; 7
    1e4c:	8d e2       	ldi	r24, 0x2D	; 45
    1e4e:	92 e2       	ldi	r25, 0x22	; 34
    1e50:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
		
			AddSlaveOwnSensor("SG02", GetFullPowerButtonStatus, NULL, 5);
    1e54:	25 e0       	ldi	r18, 0x05	; 5
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	60 ef       	ldi	r22, 0xF0	; 240
    1e5e:	76 e0       	ldi	r23, 0x06	; 6
    1e60:	82 e3       	ldi	r24, 0x32	; 50
    1e62:	92 e2       	ldi	r25, 0x22	; 34
    1e64:	0e 94 2d 02 	call	0x45a	; 0x45a <AddSlaveOwnSensor>
			AddSlaveOwnSensor("SC01", GetCruiseControlButtonStatus, NULL, 5);
    1e68:	25 e0       	ldi	r18, 0x05	; 5
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	50 e0       	ldi	r21, 0x00	; 0
    1e70:	6f ea       	ldi	r22, 0xAF	; 175
    1e72:	76 e0       	ldi	r23, 0x06	; 6
    1e74:	87 e3       	ldi	r24, 0x37	; 55
    1e76:	92 e2       	ldi	r25, 0x22	; 34
	InitCoreAnalogADC();
	InitCoreAnalogCalibration();
	InitCoreAnalogTimer();
	InitCoreAnalogSensors();
	
} /* InitCoreAnalog */
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
			AddSlaveOwnSensor("VM01", GetMotorVoltage, NULL, 1);
			AddSlaveOwnSensor("CM01", GetMotorCurrent, NULL, 1);
			AddSlaveOwnSensor("TM01", GetMotorDriverTemp, NULL, 10);
		
			AddSlaveOwnSensor("SG02", GetFullPowerButtonStatus, NULL, 5);
			AddSlaveOwnSensor("SC01", GetCruiseControlButtonStatus, NULL, 5);
    1e7e:	0c 94 2d 02 	jmp	0x45a	; 0x45a <AddSlaveOwnSensor>
	InitCoreAnalogADC();
	InitCoreAnalogCalibration();
	InitCoreAnalogTimer();
	InitCoreAnalogSensors();
	
} /* InitCoreAnalog */
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	1f 91       	pop	r17
    1e88:	08 95       	ret

00001e8a <CalibrateChannel>:
#define NUM_CAL_OPTS_H2A 8
#define NUM_CAL_OPTS_EVA 4
#define MAX_CAL_POINTS 5
#define MAX_WHEEL_PULSES_SEEN_BEFORE_CAL 100

void CalibrateChannel(FILE *fp) {
    1e8a:	2f 92       	push	r2
    1e8c:	3f 92       	push	r3
    1e8e:	4f 92       	push	r4
    1e90:	5f 92       	push	r5
    1e92:	6f 92       	push	r6
    1e94:	7f 92       	push	r7
    1e96:	8f 92       	push	r8
    1e98:	9f 92       	push	r9
    1e9a:	af 92       	push	r10
    1e9c:	bf 92       	push	r11
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	c4 5a       	subi	r28, 0xA4	; 164
    1eb4:	d1 09       	sbc	r29, r1
    1eb6:	cd bf       	out	0x3d, r28	; 61
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	1c 01       	movw	r2, r24
	
	tCal calChan[NUM_CAL_OPTS_H2A] = {
    1ebc:	80 e6       	ldi	r24, 0x60	; 96
    1ebe:	e4 e6       	ldi	r30, 0x64	; 100
    1ec0:	f0 e2       	ldi	r31, 0x20	; 32
    1ec2:	de 01       	movw	r26, r28
    1ec4:	11 96       	adiw	r26, 0x01	; 1
    1ec6:	01 90       	ld	r0, Z+
    1ec8:	0d 92       	st	X+, r0
    1eca:	8a 95       	dec	r24
    1ecc:	e1 f7       	brne	.-8      	; 0x1ec6 <CalibrateChannel+0x3c>
} /* InitCoreAnalogSensors */


void TakeSnapshot(void) {
	
	sTakeSnapshot = 1;
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	80 93 48 29 	sts	0x2948, r24
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    1ed4:	80 91 48 29 	lds	r24, 0x2948
	int16_t newOffset_ee;
	int8_t selectedCal = -1, numPoints, i, thisChar, done;
	double xavg, yavg, ss_xx, ss_xy, newOffset, newScale, newScale_ee;
	
	TakeSnapshot();
	while(!IsSnapshotDone());
    1ed8:	81 11       	cpse	r24, r1
    1eda:	fc cf       	rjmp	.-8      	; 0x1ed4 <CalibrateChannel+0x4a>
	if(sSensorDataSnapshot.speedSensorPositivePulsesSeen > MAX_WHEEL_PULSES_SEEN_BEFORE_CAL) {
    1edc:	80 91 aa 29 	lds	r24, 0x29AA
    1ee0:	90 91 ab 29 	lds	r25, 0x29AB
    1ee4:	a0 91 ac 29 	lds	r26, 0x29AC
    1ee8:	b0 91 ad 29 	lds	r27, 0x29AD
		fprintf(fp, "# *** Too many wheel revolutions seen for calibration -- aborted\r\n");
    1eec:	b1 01       	movw	r22, r2
	int8_t selectedCal = -1, numPoints, i, thisChar, done;
	double xavg, yavg, ss_xx, ss_xy, newOffset, newScale, newScale_ee;
	
	TakeSnapshot();
	while(!IsSnapshotDone());
	if(sSensorDataSnapshot.speedSensorPositivePulsesSeen > MAX_WHEEL_PULSES_SEEN_BEFORE_CAL) {
    1eee:	85 36       	cpi	r24, 0x65	; 101
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	a1 05       	cpc	r26, r1
    1ef4:	b1 05       	cpc	r27, r1
    1ef6:	18 f0       	brcs	.+6      	; 0x1efe <CalibrateChannel+0x74>
		fprintf(fp, "# *** Too many wheel revolutions seen for calibration -- aborted\r\n");
    1ef8:	82 e4       	ldi	r24, 0x42	; 66
    1efa:	92 e2       	ldi	r25, 0x22	; 34
    1efc:	19 c2       	rjmp	.+1074   	; 0x2330 <CalibrateChannel+0x4a6>
		return;
	}
	fprintf(fp, "# Calibration started.\r\n");
    1efe:	85 e8       	ldi	r24, 0x85	; 133
    1f00:	92 e2       	ldi	r25, 0x22	; 34
    1f02:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
	while(selectedCal < 0) {
		fprintf(fp, "# Please select channel to calibrate:\r\n");
		for(i = 0; i < ((I_AM_EVA_L | I_AM_EVA_R) ? NUM_CAL_OPTS_EVA : NUM_CAL_OPTS_H2A); i++)
			fprintf(fp, "#  %d) %s\r\n", i + 1, calChan[i].name);
    1f06:	4c e0       	ldi	r20, 0x0C	; 12
    1f08:	e4 2e       	mov	r14, r20
    1f0a:	06 ec       	ldi	r16, 0xC6	; 198
    1f0c:	12 e2       	ldi	r17, 0x22	; 34
		fprintf(fp, "# *** Too many wheel revolutions seen for calibration -- aborted\r\n");
		return;
	}
	fprintf(fp, "# Calibration started.\r\n");
	while(selectedCal < 0) {
		fprintf(fp, "# Please select channel to calibrate:\r\n");
    1f0e:	b1 01       	movw	r22, r2
    1f10:	8e e9       	ldi	r24, 0x9E	; 158
    1f12:	92 e2       	ldi	r25, 0x22	; 34
    1f14:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
		for(i = 0; i < ((I_AM_EVA_L | I_AM_EVA_R) ? NUM_CAL_OPTS_EVA : NUM_CAL_OPTS_H2A); i++)
    1f18:	f1 2c       	mov	r15, r1
    1f1a:	8f 2d       	mov	r24, r15
    1f1c:	99 27       	eor	r25, r25
    1f1e:	87 fd       	sbrc	r24, 7
    1f20:	90 95       	com	r25
    1f22:	30 91 68 06 	lds	r19, 0x0668
    1f26:	20 91 68 06 	lds	r18, 0x0668
    1f2a:	20 73       	andi	r18, 0x30	; 48
    1f2c:	20 32       	cpi	r18, 0x20	; 32
    1f2e:	21 f0       	breq	.+8      	; 0x1f38 <CalibrateChannel+0xae>
    1f30:	23 2f       	mov	r18, r19
    1f32:	20 73       	andi	r18, 0x30	; 48
    1f34:	20 31       	cpi	r18, 0x10	; 16
    1f36:	19 f4       	brne	.+6      	; 0x1f3e <CalibrateChannel+0xb4>
    1f38:	24 e0       	ldi	r18, 0x04	; 4
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <CalibrateChannel+0xb8>
    1f3e:	28 e0       	ldi	r18, 0x08	; 8
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	82 17       	cp	r24, r18
    1f44:	93 07       	cpc	r25, r19
    1f46:	e4 f4       	brge	.+56     	; 0x1f80 <CalibrateChannel+0xf6>
			fprintf(fp, "#  %d) %s\r\n", i + 1, calChan[i].name);
    1f48:	e8 9e       	mul	r14, r24
    1f4a:	f0 01       	movw	r30, r0
    1f4c:	e9 9e       	mul	r14, r25
    1f4e:	f0 0d       	add	r31, r0
    1f50:	11 24       	eor	r1, r1
    1f52:	21 e0       	ldi	r18, 0x01	; 1
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	2c 0f       	add	r18, r28
    1f58:	3d 1f       	adc	r19, r29
    1f5a:	e2 0f       	add	r30, r18
    1f5c:	f3 1f       	adc	r31, r19
    1f5e:	21 81       	ldd	r18, Z+1	; 0x01
    1f60:	2f 93       	push	r18
    1f62:	20 81       	ld	r18, Z
    1f64:	2f 93       	push	r18
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	9f 93       	push	r25
    1f6a:	8f 93       	push	r24
    1f6c:	1f 93       	push	r17
    1f6e:	0f 93       	push	r16
    1f70:	3f 92       	push	r3
    1f72:	2f 92       	push	r2
    1f74:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    1f78:	f3 94       	inc	r15
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	cd cf       	rjmp	.-102    	; 0x1f1a <CalibrateChannel+0x90>
		fprintf(fp, "# :");
    1f80:	b1 01       	movw	r22, r2
    1f82:	82 ed       	ldi	r24, 0xD2	; 210
    1f84:	92 e2       	ldi	r25, 0x22	; 34
    1f86:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
		while(CanRead_Ctrl())
    1f8a:	0e 94 83 2a 	call	0x5506	; 0x5506 <CanRead_Ctrl>
    1f8e:	88 23       	and	r24, r24
    1f90:	19 f0       	breq	.+6      	; 0x1f98 <CalibrateChannel+0x10e>
			ReadByte_Ctrl();
    1f92:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
    1f96:	f9 cf       	rjmp	.-14     	; 0x1f8a <CalibrateChannel+0x100>
		selectedCal = ReadByte_Ctrl() - '1';
    1f98:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
    1f9c:	3f ec       	ldi	r19, 0xCF	; 207
    1f9e:	63 2e       	mov	r6, r19
    1fa0:	68 0e       	add	r6, r24
		fprintf(fp, "\r\n");
    1fa2:	b1 01       	movw	r22, r2
    1fa4:	84 e4       	ldi	r24, 0x44	; 68
    1fa6:	94 e2       	ldi	r25, 0x24	; 36
    1fa8:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
		if(selectedCal >= i)
    1fac:	6f 14       	cp	r6, r15
    1fae:	0c f0       	brlt	.+2      	; 0x1fb2 <CalibrateChannel+0x128>
    1fb0:	57 c0       	rjmp	.+174    	; 0x2060 <CalibrateChannel+0x1d6>
			selectedCal = -1;
		if(selectedCal < 0)
    1fb2:	67 fc       	sbrc	r6, 7
    1fb4:	55 c0       	rjmp	.+170    	; 0x2060 <CalibrateChannel+0x1d6>
			fprintf(fp, "# *** Invalid channel selected\r\n");
	}
	fprintf(fp, "# Channel %s selected.\r\n", calChan[selectedCal].name);
    1fb6:	a6 2d       	mov	r26, r6
    1fb8:	bb 27       	eor	r27, r27
    1fba:	a7 fd       	sbrc	r26, 7
    1fbc:	b0 95       	com	r27
    1fbe:	c3 56       	subi	r28, 0x63	; 99
    1fc0:	df 4f       	sbci	r29, 0xFF	; 255
    1fc2:	a8 83       	st	Y, r26
    1fc4:	b9 83       	std	Y+1, r27	; 0x01
    1fc6:	cd 59       	subi	r28, 0x9D	; 157
    1fc8:	d0 40       	sbci	r29, 0x00	; 0
    1fca:	b6 2d       	mov	r27, r6
    1fcc:	ec e0       	ldi	r30, 0x0C	; 12
    1fce:	be 02       	muls	r27, r30
    1fd0:	70 01       	movw	r14, r0
    1fd2:	11 24       	eor	r1, r1
    1fd4:	e1 e0       	ldi	r30, 0x01	; 1
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	ec 0f       	add	r30, r28
    1fda:	fd 1f       	adc	r31, r29
    1fdc:	ee 0d       	add	r30, r14
    1fde:	ff 1d       	adc	r31, r15
    1fe0:	20 81       	ld	r18, Z
    1fe2:	c1 56       	subi	r28, 0x61	; 97
    1fe4:	df 4f       	sbci	r29, 0xFF	; 255
    1fe6:	28 83       	st	Y, r18
    1fe8:	cf 59       	subi	r28, 0x9F	; 159
    1fea:	d0 40       	sbci	r29, 0x00	; 0
    1fec:	31 81       	ldd	r19, Z+1	; 0x01
    1fee:	c0 56       	subi	r28, 0x60	; 96
    1ff0:	df 4f       	sbci	r29, 0xFF	; 255
    1ff2:	38 83       	st	Y, r19
    1ff4:	c0 5a       	subi	r28, 0xA0	; 160
    1ff6:	d0 40       	sbci	r29, 0x00	; 0
    1ff8:	3f 93       	push	r19
    1ffa:	2f 93       	push	r18
    1ffc:	26 ed       	ldi	r18, 0xD6	; 214
    1ffe:	32 e2       	ldi	r19, 0x22	; 34
    2000:	3f 93       	push	r19
    2002:	2f 93       	push	r18
    2004:	3f 92       	push	r3
    2006:	2f 92       	push	r2
    2008:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
	fprintf(fp, "# Please enter up to %d calibration points.\r\n", MAX_CAL_POINTS);
    200c:	1f 92       	push	r1
    200e:	85 e0       	ldi	r24, 0x05	; 5
    2010:	8f 93       	push	r24
    2012:	2f ee       	ldi	r18, 0xEF	; 239
    2014:	32 e2       	ldi	r19, 0x22	; 34
    2016:	3f 93       	push	r19
    2018:	2f 93       	push	r18
    201a:	3f 92       	push	r3
    201c:	2f 92       	push	r2
    201e:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	de bf       	out	0x3e, r29	; 62
	numPoints = 0;
    2026:	10 e0       	ldi	r17, 0x00	; 0
	done = 0;
	do {
		while(CanRead_Ctrl())
			ReadByte_Ctrl();
		fprintf(fp, "# Calibration point #%d, in %s (no decimal point!): ", numPoints + 1, selectedCal & 1 ? "mA" : "mV");
    2028:	96 2d       	mov	r25, r6
    202a:	91 70       	andi	r25, 0x01	; 1
    202c:	69 2e       	mov	r6, r25
			}
		} while(isdigit(thisChar));
		cal[numPoints] = curCal / 1000.0f;
		TakeSnapshot();
		while(!IsSnapshotDone()) ;
		meas[numPoints] = *(calChan[selectedCal].valFiltered) / 65536.0f;
    202e:	ce 01       	movw	r24, r28
    2030:	01 96       	adiw	r24, 0x01	; 1
    2032:	8e 0d       	add	r24, r14
    2034:	9f 1d       	adc	r25, r15
    2036:	dc 01       	movw	r26, r24
    2038:	12 96       	adiw	r26, 0x02	; 2
    203a:	c7 56       	subi	r28, 0x67	; 103
    203c:	df 4f       	sbci	r29, 0xFF	; 255
    203e:	a8 83       	st	Y, r26
    2040:	b9 83       	std	Y+1, r27	; 0x01
    2042:	c9 59       	subi	r28, 0x99	; 153
    2044:	d0 40       	sbci	r29, 0x00	; 0
		fprintf(fp, "\r\n# Calibration value %.3f; measured %.3f (raw ADC: %.3fV). Is this correct (y/n)? ", 
			        cal[numPoints], meas[numPoints] / *(calChan[selectedCal].scale), meas[numPoints] / 1000.0f);
    2046:	fc 01       	movw	r30, r24
    2048:	34 96       	adiw	r30, 0x04	; 4
    204a:	c5 56       	subi	r28, 0x65	; 101
    204c:	df 4f       	sbci	r29, 0xFF	; 255
    204e:	e8 83       	st	Y, r30
    2050:	f9 83       	std	Y+1, r31	; 0x01
    2052:	cb 59       	subi	r28, 0x9B	; 155
    2054:	d0 40       	sbci	r29, 0x00	; 0
		do {
			thisChar = ReadByte_Ctrl();
		} while(thisChar != 'y' && thisChar != 'Y' && thisChar != 'n' && thisChar != 'N' && thisChar != 0x1B);
		fprintf(fp, "%c\r\n", thisChar);
    2056:	27 ec       	ldi	r18, 0xC7	; 199
    2058:	42 2e       	mov	r4, r18
    205a:	23 e2       	ldi	r18, 0x23	; 35
    205c:	52 2e       	mov	r5, r18
    205e:	d9 c0       	rjmp	.+434    	; 0x2212 <CalibrateChannel+0x388>
		selectedCal = ReadByte_Ctrl() - '1';
		fprintf(fp, "\r\n");
		if(selectedCal >= i)
			selectedCal = -1;
		if(selectedCal < 0)
			fprintf(fp, "# *** Invalid channel selected\r\n");
    2060:	b1 01       	movw	r22, r2
    2062:	8d e1       	ldi	r24, 0x1D	; 29
    2064:	93 e2       	ldi	r25, 0x23	; 35
    2066:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
    206a:	51 cf       	rjmp	.-350    	; 0x1f0e <CalibrateChannel+0x84>
			if(isdigit(thisChar)) {
				fprintf(fp, "%c", thisChar);
				curCal = 10 * curCal + thisChar - '0';
			}
		} while(isdigit(thisChar));
		cal[numPoints] = curCal / 1000.0f;
    206c:	ca 01       	movw	r24, r20
    206e:	b9 01       	movw	r22, r18
    2070:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a e7       	ldi	r20, 0x7A	; 122
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    2080:	76 2e       	mov	r7, r22
    2082:	c1 57       	subi	r28, 0x71	; 113
    2084:	df 4f       	sbci	r29, 0xFF	; 255
    2086:	78 83       	st	Y, r23
    2088:	cf 58       	subi	r28, 0x8F	; 143
    208a:	d0 40       	sbci	r29, 0x00	; 0
    208c:	cb 56       	subi	r28, 0x6B	; 107
    208e:	df 4f       	sbci	r29, 0xFF	; 255
    2090:	88 83       	st	Y, r24
    2092:	c5 59       	subi	r28, 0x95	; 149
    2094:	d0 40       	sbci	r29, 0x00	; 0
    2096:	09 2f       	mov	r16, r25
    2098:	aa 0c       	add	r10, r10
    209a:	bb 1c       	adc	r11, r11
    209c:	aa 0c       	add	r10, r10
    209e:	bb 1c       	adc	r11, r11
    20a0:	e1 e6       	ldi	r30, 0x61	; 97
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	ec 0f       	add	r30, r28
    20a6:	fd 1f       	adc	r31, r29
    20a8:	ea 0d       	add	r30, r10
    20aa:	fb 1d       	adc	r31, r11
    20ac:	38 2f       	mov	r19, r24
    20ae:	87 2d       	mov	r24, r7
    20b0:	97 2f       	mov	r25, r23
    20b2:	a3 2f       	mov	r26, r19
    20b4:	b0 2f       	mov	r27, r16
    20b6:	80 83       	st	Z, r24
    20b8:	91 83       	std	Z+1, r25	; 0x01
    20ba:	a2 83       	std	Z+2, r26	; 0x02
    20bc:	b3 83       	std	Z+3, r27	; 0x03
} /* InitCoreAnalogSensors */


void TakeSnapshot(void) {
	
	sTakeSnapshot = 1;
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	80 93 48 29 	sts	0x2948, r24
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    20c4:	80 91 48 29 	lds	r24, 0x2948
				curCal = 10 * curCal + thisChar - '0';
			}
		} while(isdigit(thisChar));
		cal[numPoints] = curCal / 1000.0f;
		TakeSnapshot();
		while(!IsSnapshotDone()) ;
    20c8:	81 11       	cpse	r24, r1
    20ca:	fc cf       	rjmp	.-8      	; 0x20c4 <CalibrateChannel+0x23a>
		meas[numPoints] = *(calChan[selectedCal].valFiltered) / 65536.0f;
    20cc:	c7 56       	subi	r28, 0x67	; 103
    20ce:	df 4f       	sbci	r29, 0xFF	; 255
    20d0:	a8 81       	ld	r26, Y
    20d2:	b9 81       	ldd	r27, Y+1	; 0x01
    20d4:	c9 59       	subi	r28, 0x99	; 153
    20d6:	d0 40       	sbci	r29, 0x00	; 0
    20d8:	ed 91       	ld	r30, X+
    20da:	fc 91       	ld	r31, X
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	57 e3       	ldi	r21, 0x37	; 55
    20f0:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    20f4:	6b 01       	movw	r12, r22
    20f6:	7c 01       	movw	r14, r24
    20f8:	e5 e7       	ldi	r30, 0x75	; 117
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	ec 0f       	add	r30, r28
    20fe:	fd 1f       	adc	r31, r29
    2100:	ea 0d       	add	r30, r10
    2102:	fb 1d       	adc	r31, r11
    2104:	60 83       	st	Z, r22
    2106:	71 83       	std	Z+1, r23	; 0x01
    2108:	82 83       	std	Z+2, r24	; 0x02
    210a:	93 83       	std	Z+3, r25	; 0x03
		fprintf(fp, "\r\n# Calibration value %.3f; measured %.3f (raw ADC: %.3fV). Is this correct (y/n)? ", 
			        cal[numPoints], meas[numPoints] / *(calChan[selectedCal].scale), meas[numPoints] / 1000.0f);
    210c:	c5 56       	subi	r28, 0x65	; 101
    210e:	df 4f       	sbci	r29, 0xFF	; 255
    2110:	e8 81       	ld	r30, Y
    2112:	f9 81       	ldd	r31, Y+1	; 0x01
    2114:	cb 59       	subi	r28, 0x9B	; 155
    2116:	d0 40       	sbci	r29, 0x00	; 0
    2118:	01 90       	ld	r0, Z+
    211a:	f0 81       	ld	r31, Z
    211c:	e0 2d       	mov	r30, r0
    211e:	cd 56       	subi	r28, 0x6D	; 109
    2120:	df 4f       	sbci	r29, 0xFF	; 255
    2122:	e8 83       	st	Y, r30
    2124:	f9 83       	std	Y+1, r31	; 0x01
    2126:	c3 59       	subi	r28, 0x93	; 147
    2128:	d0 40       	sbci	r29, 0x00	; 0
    212a:	80 80       	ld	r8, Z
    212c:	91 80       	ldd	r9, Z+1	; 0x01
    212e:	a2 80       	ldd	r10, Z+2	; 0x02
    2130:	b3 80       	ldd	r11, Z+3	; 0x03
		} while(isdigit(thisChar));
		cal[numPoints] = curCal / 1000.0f;
		TakeSnapshot();
		while(!IsSnapshotDone()) ;
		meas[numPoints] = *(calChan[selectedCal].valFiltered) / 65536.0f;
		fprintf(fp, "\r\n# Calibration value %.3f; measured %.3f (raw ADC: %.3fV). Is this correct (y/n)? ", 
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4a e7       	ldi	r20, 0x7A	; 122
    2138:	54 e4       	ldi	r21, 0x44	; 68
    213a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    213e:	9f 93       	push	r25
    2140:	8f 93       	push	r24
    2142:	7f 93       	push	r23
    2144:	6f 93       	push	r22
    2146:	a5 01       	movw	r20, r10
    2148:	94 01       	movw	r18, r8
    214a:	c7 01       	movw	r24, r14
    214c:	b6 01       	movw	r22, r12
    214e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    2152:	9f 93       	push	r25
    2154:	8f 93       	push	r24
    2156:	7f 93       	push	r23
    2158:	6f 93       	push	r22
    215a:	0f 93       	push	r16
    215c:	cb 56       	subi	r28, 0x6B	; 107
    215e:	df 4f       	sbci	r29, 0xFF	; 255
    2160:	f8 81       	ld	r31, Y
    2162:	c5 59       	subi	r28, 0x95	; 149
    2164:	d0 40       	sbci	r29, 0x00	; 0
    2166:	ff 93       	push	r31
    2168:	c1 57       	subi	r28, 0x71	; 113
    216a:	df 4f       	sbci	r29, 0xFF	; 255
    216c:	28 81       	ld	r18, Y
    216e:	cf 58       	subi	r28, 0x8F	; 143
    2170:	d0 40       	sbci	r29, 0x00	; 0
    2172:	2f 93       	push	r18
    2174:	7f 92       	push	r7
    2176:	a3 e7       	ldi	r26, 0x73	; 115
    2178:	b3 e2       	ldi	r27, 0x23	; 35
    217a:	bf 93       	push	r27
    217c:	af 93       	push	r26
    217e:	3f 92       	push	r3
    2180:	2f 92       	push	r2
    2182:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    2186:	cd bf       	out	0x3d, r28	; 61
    2188:	de bf       	out	0x3e, r29	; 62
			        cal[numPoints], meas[numPoints] / *(calChan[selectedCal].scale), meas[numPoints] / 1000.0f);
		do {
			thisChar = ReadByte_Ctrl();
    218a:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
    218e:	08 2f       	mov	r16, r24
		} while(thisChar != 'y' && thisChar != 'Y' && thisChar != 'n' && thisChar != 'N' && thisChar != 0x1B);
    2190:	89 37       	cpi	r24, 0x79	; 121
    2192:	09 f0       	breq	.+2      	; 0x2196 <CalibrateChannel+0x30c>
    2194:	d0 c0       	rjmp	.+416    	; 0x2336 <CalibrateChannel+0x4ac>
		fprintf(fp, "%c\r\n", thisChar);
    2196:	20 2f       	mov	r18, r16
    2198:	33 27       	eor	r19, r19
    219a:	27 fd       	sbrc	r18, 7
    219c:	30 95       	com	r19
    219e:	3f 93       	push	r19
    21a0:	0f 93       	push	r16
    21a2:	5f 92       	push	r5
    21a4:	4f 92       	push	r4
    21a6:	3f 92       	push	r3
    21a8:	2f 92       	push	r2
    21aa:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
		if(thisChar == 0x1B)
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0b 31       	cpi	r16, 0x1B	; 27
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <CalibrateChannel+0x336>
    21be:	ad c0       	rjmp	.+346    	; 0x231a <CalibrateChannel+0x490>
			done = 1;
		else if(thisChar == 'y' || thisChar == 'Y') {
    21c0:	0f 7d       	andi	r16, 0xDF	; 223
    21c2:	09 35       	cpi	r16, 0x59	; 89
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <CalibrateChannel+0x33e>
    21c6:	d1 c0       	rjmp	.+418    	; 0x236a <CalibrateChannel+0x4e0>
			numPoints++;
    21c8:	1f 5f       	subi	r17, 0xFF	; 255
			if(numPoints < MAX_CAL_POINTS) {
    21ca:	15 30       	cpi	r17, 0x05	; 5
    21cc:	0c f0       	brlt	.+2      	; 0x21d0 <CalibrateChannel+0x346>
    21ce:	cf c0       	rjmp	.+414    	; 0x236e <CalibrateChannel+0x4e4>
				fprintf(fp, "# Add another calibration point (y/n)? ");
    21d0:	b1 01       	movw	r22, r2
    21d2:	8c ec       	ldi	r24, 0xCC	; 204
    21d4:	93 e2       	ldi	r25, 0x23	; 35
    21d6:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
				do {
					thisChar = ReadByte_Ctrl();
    21da:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
    21de:	08 2f       	mov	r16, r24
				} while(thisChar != 'y' && thisChar != 'Y' && thisChar != 'n' && thisChar != 'N' && thisChar != 0x1B);
    21e0:	89 37       	cpi	r24, 0x79	; 121
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <CalibrateChannel+0x35c>
    21e4:	b5 c0       	rjmp	.+362    	; 0x2350 <CalibrateChannel+0x4c6>
				fprintf(fp, "%c\r\n", thisChar);
    21e6:	20 2f       	mov	r18, r16
    21e8:	33 27       	eor	r19, r19
    21ea:	27 fd       	sbrc	r18, 7
    21ec:	30 95       	com	r19
    21ee:	3f 93       	push	r19
    21f0:	0f 93       	push	r16
    21f2:	5f 92       	push	r5
    21f4:	4f 92       	push	r4
    21f6:	3f 92       	push	r3
    21f8:	2f 92       	push	r2
    21fa:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
				if(thisChar != 'y' && thisChar != 'Y')
    21fe:	0f 7d       	andi	r16, 0xDF	; 223
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	09 35       	cpi	r16, 0x59	; 89
    220e:	09 f0       	breq	.+2      	; 0x2212 <CalibrateChannel+0x388>
    2210:	8a c0       	rjmp	.+276    	; 0x2326 <CalibrateChannel+0x49c>
	fprintf(fp, "# Channel %s selected.\r\n", calChan[selectedCal].name);
	fprintf(fp, "# Please enter up to %d calibration points.\r\n", MAX_CAL_POINTS);
	numPoints = 0;
	done = 0;
	do {
		while(CanRead_Ctrl())
    2212:	0e 94 83 2a 	call	0x5506	; 0x5506 <CanRead_Ctrl>
    2216:	88 23       	and	r24, r24
    2218:	19 f0       	breq	.+6      	; 0x2220 <CalibrateChannel+0x396>
			ReadByte_Ctrl();
    221a:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
    221e:	f9 cf       	rjmp	.-14     	; 0x2212 <CalibrateChannel+0x388>
		fprintf(fp, "# Calibration point #%d, in %s (no decimal point!): ", numPoints + 1, selectedCal & 1 ? "mA" : "mV");
    2220:	66 20       	and	r6, r6
    2222:	19 f0       	breq	.+6      	; 0x222a <CalibrateChannel+0x3a0>
    2224:	8c e3       	ldi	r24, 0x3C	; 60
    2226:	92 e2       	ldi	r25, 0x22	; 34
    2228:	02 c0       	rjmp	.+4      	; 0x222e <CalibrateChannel+0x3a4>
    222a:	8f e3       	ldi	r24, 0x3F	; 63
    222c:	92 e2       	ldi	r25, 0x22	; 34
    222e:	a1 2e       	mov	r10, r17
    2230:	bb 24       	eor	r11, r11
    2232:	a7 fc       	sbrc	r10, 7
    2234:	b0 94       	com	r11
    2236:	9f 93       	push	r25
    2238:	8f 93       	push	r24
    223a:	c5 01       	movw	r24, r10
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	ae e3       	ldi	r26, 0x3E	; 62
    2244:	b3 e2       	ldi	r27, 0x23	; 35
    2246:	bf 93       	push	r27
    2248:	af 93       	push	r26
    224a:	3f 92       	push	r3
    224c:	2f 92       	push	r2
    224e:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	de bf       	out	0x3e, r29	; 62
		curCal = 0;
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	a9 01       	movw	r20, r18
		do {
			thisChar = ReadByte_Ctrl();
    225c:	cf 55       	subi	r28, 0x5F	; 95
    225e:	df 4f       	sbci	r29, 0xFF	; 255
    2260:	28 83       	st	Y, r18
    2262:	c1 5a       	subi	r28, 0xA1	; 161
    2264:	d0 40       	sbci	r29, 0x00	; 0
    2266:	ce 55       	subi	r28, 0x5E	; 94
    2268:	df 4f       	sbci	r29, 0xFF	; 255
    226a:	38 83       	st	Y, r19
    226c:	c2 5a       	subi	r28, 0xA2	; 162
    226e:	d0 40       	sbci	r29, 0x00	; 0
    2270:	cd 55       	subi	r28, 0x5D	; 93
    2272:	df 4f       	sbci	r29, 0xFF	; 255
    2274:	48 83       	st	Y, r20
    2276:	c3 5a       	subi	r28, 0xA3	; 163
    2278:	d0 40       	sbci	r29, 0x00	; 0
    227a:	cc 55       	subi	r28, 0x5C	; 92
    227c:	df 4f       	sbci	r29, 0xFF	; 255
    227e:	58 83       	st	Y, r21
    2280:	c4 5a       	subi	r28, 0xA4	; 164
    2282:	d0 40       	sbci	r29, 0x00	; 0
    2284:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
    2288:	08 2f       	mov	r16, r24
			if(isdigit(thisChar)) {
    228a:	99 27       	eor	r25, r25
    228c:	87 fd       	sbrc	r24, 7
    228e:	90 95       	com	r25
    2290:	fc 01       	movw	r30, r24
    2292:	f0 97       	sbiw	r30, 0x30	; 48
    2294:	cf 55       	subi	r28, 0x5F	; 95
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	28 81       	ld	r18, Y
    229a:	c1 5a       	subi	r28, 0xA1	; 161
    229c:	d0 40       	sbci	r29, 0x00	; 0
    229e:	ce 55       	subi	r28, 0x5E	; 94
    22a0:	df 4f       	sbci	r29, 0xFF	; 255
    22a2:	38 81       	ld	r19, Y
    22a4:	c2 5a       	subi	r28, 0xA2	; 162
    22a6:	d0 40       	sbci	r29, 0x00	; 0
    22a8:	cd 55       	subi	r28, 0x5D	; 93
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	48 81       	ld	r20, Y
    22ae:	c3 5a       	subi	r28, 0xA3	; 163
    22b0:	d0 40       	sbci	r29, 0x00	; 0
    22b2:	cc 55       	subi	r28, 0x5C	; 92
    22b4:	df 4f       	sbci	r29, 0xFF	; 255
    22b6:	58 81       	ld	r21, Y
    22b8:	c4 5a       	subi	r28, 0xA4	; 164
    22ba:	d0 40       	sbci	r29, 0x00	; 0
    22bc:	3a 97       	sbiw	r30, 0x0a	; 10
    22be:	08 f0       	brcs	.+2      	; 0x22c2 <CalibrateChannel+0x438>
    22c0:	d5 ce       	rjmp	.-598    	; 0x206c <CalibrateChannel+0x1e2>
				fprintf(fp, "%c", thisChar);
    22c2:	b1 01       	movw	r22, r2
    22c4:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
				curCal = 10 * curCal + thisChar - '0';
    22c8:	aa e0       	ldi	r26, 0x0A	; 10
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	cf 55       	subi	r28, 0x5F	; 95
    22ce:	df 4f       	sbci	r29, 0xFF	; 255
    22d0:	28 81       	ld	r18, Y
    22d2:	c1 5a       	subi	r28, 0xA1	; 161
    22d4:	d0 40       	sbci	r29, 0x00	; 0
    22d6:	ce 55       	subi	r28, 0x5E	; 94
    22d8:	df 4f       	sbci	r29, 0xFF	; 255
    22da:	38 81       	ld	r19, Y
    22dc:	c2 5a       	subi	r28, 0xA2	; 162
    22de:	d0 40       	sbci	r29, 0x00	; 0
    22e0:	cd 55       	subi	r28, 0x5D	; 93
    22e2:	df 4f       	sbci	r29, 0xFF	; 255
    22e4:	48 81       	ld	r20, Y
    22e6:	c3 5a       	subi	r28, 0xA3	; 163
    22e8:	d0 40       	sbci	r29, 0x00	; 0
    22ea:	cc 55       	subi	r28, 0x5C	; 92
    22ec:	df 4f       	sbci	r29, 0xFF	; 255
    22ee:	58 81       	ld	r21, Y
    22f0:	c4 5a       	subi	r28, 0xA4	; 164
    22f2:	d0 40       	sbci	r29, 0x00	; 0
    22f4:	0e 94 24 34 	call	0x6848	; 0x6848 <__muluhisi3>
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	80 2f       	mov	r24, r16
    22fe:	99 27       	eor	r25, r25
    2300:	87 fd       	sbrc	r24, 7
    2302:	90 95       	com	r25
    2304:	a9 2f       	mov	r26, r25
    2306:	b9 2f       	mov	r27, r25
    2308:	28 0f       	add	r18, r24
    230a:	39 1f       	adc	r19, r25
    230c:	4a 1f       	adc	r20, r26
    230e:	5b 1f       	adc	r21, r27
    2310:	20 53       	subi	r18, 0x30	; 48
    2312:	31 09       	sbc	r19, r1
    2314:	41 09       	sbc	r20, r1
    2316:	51 09       	sbc	r21, r1
    2318:	a1 cf       	rjmp	.-190    	; 0x225c <CalibrateChannel+0x3d2>
		do {
			thisChar = ReadByte_Ctrl();
		} while(thisChar != 'y' && thisChar != 'Y' && thisChar != 'n' && thisChar != 'N' && thisChar != 0x1B);
		fprintf(fp, "%c\r\n", thisChar);
		if(thisChar == 0x1B)
			done = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
				fprintf(fp, "%c\r\n", thisChar);
				if(thisChar != 'y' && thisChar != 'Y')
					done = 1;
			}
		}
	} while(numPoints < MAX_CAL_POINTS && !done);
    231c:	15 30       	cpi	r17, 0x05	; 5
    231e:	3c f5       	brge	.+78     	; 0x236e <CalibrateChannel+0x4e4>
    2320:	88 23       	and	r24, r24
    2322:	09 f4       	brne	.+2      	; 0x2326 <CalibrateChannel+0x49c>
    2324:	76 cf       	rjmp	.-276    	; 0x2212 <CalibrateChannel+0x388>
	
	if(numPoints < 2) {
    2326:	12 30       	cpi	r17, 0x02	; 2
    2328:	14 f5       	brge	.+68     	; 0x236e <CalibrateChannel+0x4e4>
		fprintf(fp, "# *** At least two calibration points are required to determine offset and gain!\r\n");
    232a:	b1 01       	movw	r22, r2
    232c:	84 ef       	ldi	r24, 0xF4	; 244
    232e:	93 e2       	ldi	r25, 0x23	; 35
    2330:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
		return;
    2334:	45 c2       	rjmp	.+1162   	; 0x27c0 <CalibrateChannel+0x936>
		meas[numPoints] = *(calChan[selectedCal].valFiltered) / 65536.0f;
		fprintf(fp, "\r\n# Calibration value %.3f; measured %.3f (raw ADC: %.3fV). Is this correct (y/n)? ", 
			        cal[numPoints], meas[numPoints] / *(calChan[selectedCal].scale), meas[numPoints] / 1000.0f);
		do {
			thisChar = ReadByte_Ctrl();
		} while(thisChar != 'y' && thisChar != 'Y' && thisChar != 'n' && thisChar != 'N' && thisChar != 0x1B);
    2336:	89 35       	cpi	r24, 0x59	; 89
    2338:	09 f4       	brne	.+2      	; 0x233c <CalibrateChannel+0x4b2>
    233a:	2d cf       	rjmp	.-422    	; 0x2196 <CalibrateChannel+0x30c>
    233c:	8e 36       	cpi	r24, 0x6E	; 110
    233e:	09 f4       	brne	.+2      	; 0x2342 <CalibrateChannel+0x4b8>
    2340:	2a cf       	rjmp	.-428    	; 0x2196 <CalibrateChannel+0x30c>
    2342:	8e 34       	cpi	r24, 0x4E	; 78
    2344:	09 f4       	brne	.+2      	; 0x2348 <CalibrateChannel+0x4be>
    2346:	27 cf       	rjmp	.-434    	; 0x2196 <CalibrateChannel+0x30c>
    2348:	8b 31       	cpi	r24, 0x1B	; 27
    234a:	09 f0       	breq	.+2      	; 0x234e <CalibrateChannel+0x4c4>
    234c:	1e cf       	rjmp	.-452    	; 0x218a <CalibrateChannel+0x300>
    234e:	23 cf       	rjmp	.-442    	; 0x2196 <CalibrateChannel+0x30c>
			numPoints++;
			if(numPoints < MAX_CAL_POINTS) {
				fprintf(fp, "# Add another calibration point (y/n)? ");
				do {
					thisChar = ReadByte_Ctrl();
				} while(thisChar != 'y' && thisChar != 'Y' && thisChar != 'n' && thisChar != 'N' && thisChar != 0x1B);
    2350:	89 35       	cpi	r24, 0x59	; 89
    2352:	09 f4       	brne	.+2      	; 0x2356 <CalibrateChannel+0x4cc>
    2354:	48 cf       	rjmp	.-368    	; 0x21e6 <CalibrateChannel+0x35c>
    2356:	8e 36       	cpi	r24, 0x6E	; 110
    2358:	09 f4       	brne	.+2      	; 0x235c <CalibrateChannel+0x4d2>
    235a:	45 cf       	rjmp	.-374    	; 0x21e6 <CalibrateChannel+0x35c>
    235c:	8e 34       	cpi	r24, 0x4E	; 78
    235e:	09 f4       	brne	.+2      	; 0x2362 <CalibrateChannel+0x4d8>
    2360:	42 cf       	rjmp	.-380    	; 0x21e6 <CalibrateChannel+0x35c>
    2362:	8b 31       	cpi	r24, 0x1B	; 27
    2364:	09 f0       	breq	.+2      	; 0x2368 <CalibrateChannel+0x4de>
    2366:	39 cf       	rjmp	.-398    	; 0x21da <CalibrateChannel+0x350>
    2368:	3e cf       	rjmp	.-388    	; 0x21e6 <CalibrateChannel+0x35c>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	d7 cf       	rjmp	.-82     	; 0x231c <CalibrateChannel+0x492>
    236e:	ce 01       	movw	r24, r28
    2370:	8b 58       	subi	r24, 0x8B	; 139
    2372:	9f 4f       	sbci	r25, 0xFF	; 255
    2374:	4c 01       	movw	r8, r24
    2376:	de 01       	movw	r26, r28
    2378:	af 59       	subi	r26, 0x9F	; 159
    237a:	bf 4f       	sbci	r27, 0xFF	; 255
    237c:	5d 01       	movw	r10, r26
    237e:	c1 2c       	mov	r12, r1
    2380:	d1 2c       	mov	r13, r1
    2382:	76 01       	movw	r14, r12
    2384:	26 01       	movw	r4, r12
    2386:	37 01       	movw	r6, r14
    2388:	00 e0       	ldi	r16, 0x00	; 0
		return;
	}
	
	xavg = yavg = 0.0f;
	for(i = 0; i < numPoints; i++) {
		xavg += cal[i];
    238a:	f5 01       	movw	r30, r10
    238c:	21 91       	ld	r18, Z+
    238e:	31 91       	ld	r19, Z+
    2390:	41 91       	ld	r20, Z+
    2392:	51 91       	ld	r21, Z+
    2394:	5f 01       	movw	r10, r30
    2396:	c3 01       	movw	r24, r6
    2398:	b2 01       	movw	r22, r4
    239a:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__addsf3>
    239e:	2b 01       	movw	r4, r22
    23a0:	3c 01       	movw	r6, r24
		yavg += meas[i];
    23a2:	d4 01       	movw	r26, r8
    23a4:	2d 91       	ld	r18, X+
    23a6:	3d 91       	ld	r19, X+
    23a8:	4d 91       	ld	r20, X+
    23aa:	5d 91       	ld	r21, X+
    23ac:	4d 01       	movw	r8, r26
    23ae:	c7 01       	movw	r24, r14
    23b0:	b6 01       	movw	r22, r12
    23b2:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__addsf3>
    23b6:	6b 01       	movw	r12, r22
    23b8:	7c 01       	movw	r14, r24
    23ba:	0f 5f       	subi	r16, 0xFF	; 255
		fprintf(fp, "# *** At least two calibration points are required to determine offset and gain!\r\n");
		return;
	}
	
	xavg = yavg = 0.0f;
	for(i = 0; i < numPoints; i++) {
    23bc:	01 17       	cp	r16, r17
    23be:	2c f3       	brlt	.-54     	; 0x238a <CalibrateChannel+0x500>
		xavg += cal[i];
		yavg += meas[i];
	}
	xavg /= numPoints;
    23c0:	61 2f       	mov	r22, r17
    23c2:	77 27       	eor	r23, r23
    23c4:	67 fd       	sbrc	r22, 7
    23c6:	70 95       	com	r23
    23c8:	87 2f       	mov	r24, r23
    23ca:	97 2f       	mov	r25, r23
    23cc:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    23d0:	4b 01       	movw	r8, r22
    23d2:	5c 01       	movw	r10, r24
    23d4:	9b 01       	movw	r18, r22
    23d6:	ac 01       	movw	r20, r24
    23d8:	c3 01       	movw	r24, r6
    23da:	b2 01       	movw	r22, r4
    23dc:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    23e0:	c1 57       	subi	r28, 0x71	; 113
    23e2:	df 4f       	sbci	r29, 0xFF	; 255
    23e4:	68 83       	st	Y, r22
    23e6:	79 83       	std	Y+1, r23	; 0x01
    23e8:	8a 83       	std	Y+2, r24	; 0x02
    23ea:	9b 83       	std	Y+3, r25	; 0x03
    23ec:	cf 58       	subi	r28, 0x8F	; 143
    23ee:	d0 40       	sbci	r29, 0x00	; 0
	yavg /= numPoints;
    23f0:	a5 01       	movw	r20, r10
    23f2:	94 01       	movw	r18, r8
    23f4:	c7 01       	movw	r24, r14
    23f6:	b6 01       	movw	r22, r12
    23f8:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    23fc:	cb 56       	subi	r28, 0x6B	; 107
    23fe:	df 4f       	sbci	r29, 0xFF	; 255
    2400:	68 83       	st	Y, r22
    2402:	79 83       	std	Y+1, r23	; 0x01
    2404:	8a 83       	std	Y+2, r24	; 0x02
    2406:	9b 83       	std	Y+3, r25	; 0x03
    2408:	c5 59       	subi	r28, 0x95	; 149
    240a:	d0 40       	sbci	r29, 0x00	; 0
    240c:	fe 01       	movw	r30, r28
    240e:	eb 58       	subi	r30, 0x8B	; 139
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	c7 56       	subi	r28, 0x67	; 103
    2414:	df 4f       	sbci	r29, 0xFF	; 255
    2416:	e8 83       	st	Y, r30
    2418:	f9 83       	std	Y+1, r31	; 0x01
    241a:	c9 59       	subi	r28, 0x99	; 153
    241c:	d0 40       	sbci	r29, 0x00	; 0
    241e:	9e 01       	movw	r18, r28
    2420:	2f 59       	subi	r18, 0x9F	; 159
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	c5 56       	subi	r28, 0x65	; 101
    2426:	df 4f       	sbci	r29, 0xFF	; 255
    2428:	28 83       	st	Y, r18
    242a:	39 83       	std	Y+1, r19	; 0x01
    242c:	cb 59       	subi	r28, 0x9B	; 155
    242e:	d0 40       	sbci	r29, 0x00	; 0
	
	ss_xx = ss_xy = 0.0f;
    2430:	c1 2c       	mov	r12, r1
    2432:	d1 2c       	mov	r13, r1
    2434:	76 01       	movw	r14, r12
    2436:	46 01       	movw	r8, r12
    2438:	57 01       	movw	r10, r14
	for(i = 0; i < numPoints; i++) {
    243a:	00 e0       	ldi	r16, 0x00	; 0
		ss_xx += (cal[i] - xavg) * (cal[i] - xavg);
    243c:	c5 56       	subi	r28, 0x65	; 101
    243e:	df 4f       	sbci	r29, 0xFF	; 255
    2440:	a8 81       	ld	r26, Y
    2442:	b9 81       	ldd	r27, Y+1	; 0x01
    2444:	cb 59       	subi	r28, 0x9B	; 155
    2446:	d0 40       	sbci	r29, 0x00	; 0
    2448:	6d 91       	ld	r22, X+
    244a:	7d 91       	ld	r23, X+
    244c:	8d 91       	ld	r24, X+
    244e:	9d 91       	ld	r25, X+
    2450:	c5 56       	subi	r28, 0x65	; 101
    2452:	df 4f       	sbci	r29, 0xFF	; 255
    2454:	a8 83       	st	Y, r26
    2456:	b9 83       	std	Y+1, r27	; 0x01
    2458:	cb 59       	subi	r28, 0x9B	; 155
    245a:	d0 40       	sbci	r29, 0x00	; 0
    245c:	c1 57       	subi	r28, 0x71	; 113
    245e:	df 4f       	sbci	r29, 0xFF	; 255
    2460:	28 81       	ld	r18, Y
    2462:	39 81       	ldd	r19, Y+1	; 0x01
    2464:	4a 81       	ldd	r20, Y+2	; 0x02
    2466:	5b 81       	ldd	r21, Y+3	; 0x03
    2468:	cf 58       	subi	r28, 0x8F	; 143
    246a:	d0 40       	sbci	r29, 0x00	; 0
    246c:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__subsf3>
    2470:	2b 01       	movw	r4, r22
    2472:	3c 01       	movw	r6, r24
    2474:	9b 01       	movw	r18, r22
    2476:	ac 01       	movw	r20, r24
    2478:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    247c:	9b 01       	movw	r18, r22
    247e:	ac 01       	movw	r20, r24
    2480:	c5 01       	movw	r24, r10
    2482:	b4 01       	movw	r22, r8
    2484:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__addsf3>
    2488:	4b 01       	movw	r8, r22
    248a:	5c 01       	movw	r10, r24
		ss_xy += (cal[i] - xavg) * (meas[i] - yavg);
    248c:	c7 56       	subi	r28, 0x67	; 103
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	e8 81       	ld	r30, Y
    2492:	f9 81       	ldd	r31, Y+1	; 0x01
    2494:	c9 59       	subi	r28, 0x99	; 153
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	61 91       	ld	r22, Z+
    249a:	71 91       	ld	r23, Z+
    249c:	81 91       	ld	r24, Z+
    249e:	91 91       	ld	r25, Z+
    24a0:	c7 56       	subi	r28, 0x67	; 103
    24a2:	df 4f       	sbci	r29, 0xFF	; 255
    24a4:	e8 83       	st	Y, r30
    24a6:	f9 83       	std	Y+1, r31	; 0x01
    24a8:	c9 59       	subi	r28, 0x99	; 153
    24aa:	d0 40       	sbci	r29, 0x00	; 0
    24ac:	cb 56       	subi	r28, 0x6B	; 107
    24ae:	df 4f       	sbci	r29, 0xFF	; 255
    24b0:	28 81       	ld	r18, Y
    24b2:	39 81       	ldd	r19, Y+1	; 0x01
    24b4:	4a 81       	ldd	r20, Y+2	; 0x02
    24b6:	5b 81       	ldd	r21, Y+3	; 0x03
    24b8:	c5 59       	subi	r28, 0x95	; 149
    24ba:	d0 40       	sbci	r29, 0x00	; 0
    24bc:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__subsf3>
    24c0:	9b 01       	movw	r18, r22
    24c2:	ac 01       	movw	r20, r24
    24c4:	c3 01       	movw	r24, r6
    24c6:	b2 01       	movw	r22, r4
    24c8:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    24cc:	9b 01       	movw	r18, r22
    24ce:	ac 01       	movw	r20, r24
    24d0:	c7 01       	movw	r24, r14
    24d2:	b6 01       	movw	r22, r12
    24d4:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__addsf3>
    24d8:	6b 01       	movw	r12, r22
    24da:	7c 01       	movw	r14, r24
    24dc:	0f 5f       	subi	r16, 0xFF	; 255
	}
	xavg /= numPoints;
	yavg /= numPoints;
	
	ss_xx = ss_xy = 0.0f;
	for(i = 0; i < numPoints; i++) {
    24de:	01 17       	cp	r16, r17
    24e0:	0c f4       	brge	.+2      	; 0x24e4 <CalibrateChannel+0x65a>
    24e2:	ac cf       	rjmp	.-168    	; 0x243c <CalibrateChannel+0x5b2>
		ss_xx += (cal[i] - xavg) * (cal[i] - xavg);
		ss_xy += (cal[i] - xavg) * (meas[i] - yavg);
	}
	
	newScale = ss_xy / ss_xx;
    24e4:	a5 01       	movw	r20, r10
    24e6:	94 01       	movw	r18, r8
    24e8:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    24ec:	6b 01       	movw	r12, r22
    24ee:	7c 01       	movw	r14, r24
	newOffset = yavg - newScale * xavg;
    24f0:	c1 57       	subi	r28, 0x71	; 113
    24f2:	df 4f       	sbci	r29, 0xFF	; 255
    24f4:	28 81       	ld	r18, Y
    24f6:	39 81       	ldd	r19, Y+1	; 0x01
    24f8:	4a 81       	ldd	r20, Y+2	; 0x02
    24fa:	5b 81       	ldd	r21, Y+3	; 0x03
    24fc:	cf 58       	subi	r28, 0x8F	; 143
    24fe:	d0 40       	sbci	r29, 0x00	; 0
    2500:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    2504:	9b 01       	movw	r18, r22
    2506:	ac 01       	movw	r20, r24
    2508:	cb 56       	subi	r28, 0x6B	; 107
    250a:	df 4f       	sbci	r29, 0xFF	; 255
    250c:	68 81       	ld	r22, Y
    250e:	79 81       	ldd	r23, Y+1	; 0x01
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	9b 81       	ldd	r25, Y+3	; 0x03
    2514:	c5 59       	subi	r28, 0x95	; 149
    2516:	d0 40       	sbci	r29, 0x00	; 0
    2518:	0e 94 b6 2d 	call	0x5b6c	; 0x5b6c <__subsf3>
    251c:	2b 01       	movw	r4, r22
    251e:	3c 01       	movw	r6, r24
	
	while(CanRead_Ctrl())
    2520:	0e 94 83 2a 	call	0x5506	; 0x5506 <CanRead_Ctrl>
    2524:	88 23       	and	r24, r24
    2526:	19 f0       	breq	.+6      	; 0x252e <CalibrateChannel+0x6a4>
		ReadByte_Ctrl();
    2528:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
    252c:	f9 cf       	rjmp	.-14     	; 0x2520 <CalibrateChannel+0x696>
	fprintf(fp, "# New calibration for channel %s:\r\n", calChan[selectedCal].name);
    252e:	c0 56       	subi	r28, 0x60	; 96
    2530:	df 4f       	sbci	r29, 0xFF	; 255
    2532:	f8 81       	ld	r31, Y
    2534:	c0 5a       	subi	r28, 0xA0	; 160
    2536:	d0 40       	sbci	r29, 0x00	; 0
    2538:	ff 93       	push	r31
    253a:	c1 56       	subi	r28, 0x61	; 97
    253c:	df 4f       	sbci	r29, 0xFF	; 255
    253e:	28 81       	ld	r18, Y
    2540:	cf 59       	subi	r28, 0x9F	; 159
    2542:	d0 40       	sbci	r29, 0x00	; 0
    2544:	2f 93       	push	r18
    2546:	87 e4       	ldi	r24, 0x47	; 71
    2548:	94 e2       	ldi	r25, 0x24	; 36
    254a:	9f 93       	push	r25
    254c:	8f 93       	push	r24
    254e:	3f 92       	push	r3
    2550:	2f 92       	push	r2
    2552:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
	fprintf(fp, "# offset %.0f (was %d), scale %.4f (was %.4f). Apply new values (y/n)?",
    2556:	cd 56       	subi	r28, 0x6D	; 109
    2558:	df 4f       	sbci	r29, 0xFF	; 255
    255a:	a8 81       	ld	r26, Y
    255c:	b9 81       	ldd	r27, Y+1	; 0x01
    255e:	c3 59       	subi	r28, 0x93	; 147
    2560:	d0 40       	sbci	r29, 0x00	; 0
    2562:	8d 91       	ld	r24, X+
    2564:	9d 91       	ld	r25, X+
    2566:	0d 90       	ld	r0, X+
    2568:	bc 91       	ld	r27, X
    256a:	a0 2d       	mov	r26, r0
    256c:	c1 57       	subi	r28, 0x71	; 113
    256e:	df 4f       	sbci	r29, 0xFF	; 255
    2570:	88 83       	st	Y, r24
    2572:	99 83       	std	Y+1, r25	; 0x01
    2574:	aa 83       	std	Y+2, r26	; 0x02
    2576:	bb 83       	std	Y+3, r27	; 0x03
    2578:	cf 58       	subi	r28, 0x8F	; 143
    257a:	d0 40       	sbci	r29, 0x00	; 0
		*calChan[selectedCal].offset + round(newOffset), *calChan[selectedCal].offset, newScale, *calChan[selectedCal].scale);
    257c:	8c e0       	ldi	r24, 0x0C	; 12
    257e:	c3 56       	subi	r28, 0x63	; 99
    2580:	df 4f       	sbci	r29, 0xFF	; 255
    2582:	28 81       	ld	r18, Y
    2584:	39 81       	ldd	r19, Y+1	; 0x01
    2586:	cd 59       	subi	r28, 0x9D	; 157
    2588:	d0 40       	sbci	r29, 0x00	; 0
    258a:	82 9f       	mul	r24, r18
    258c:	f0 01       	movw	r30, r0
    258e:	83 9f       	mul	r24, r19
    2590:	f0 0d       	add	r31, r0
    2592:	11 24       	eor	r1, r1
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	8c 0f       	add	r24, r28
    259a:	9d 1f       	adc	r25, r29
    259c:	e8 0f       	add	r30, r24
    259e:	f9 1f       	adc	r31, r25
    25a0:	a6 80       	ldd	r10, Z+6	; 0x06
    25a2:	b7 80       	ldd	r11, Z+7	; 0x07
	newOffset = yavg - newScale * xavg;
	
	while(CanRead_Ctrl())
		ReadByte_Ctrl();
	fprintf(fp, "# New calibration for channel %s:\r\n", calChan[selectedCal].name);
	fprintf(fp, "# offset %.0f (was %d), scale %.4f (was %.4f). Apply new values (y/n)?",
    25a4:	d5 01       	movw	r26, r10
    25a6:	8d 90       	ld	r8, X+
    25a8:	9c 90       	ld	r9, X
    25aa:	11 97       	sbiw	r26, 0x01	; 1
		*calChan[selectedCal].offset + round(newOffset), *calChan[selectedCal].offset, newScale, *calChan[selectedCal].scale);
    25ac:	0d 91       	ld	r16, X+
    25ae:	1c 91       	ld	r17, X
    25b0:	c3 01       	movw	r24, r6
    25b2:	b2 01       	movw	r22, r4
    25b4:	0e 94 1f 30 	call	0x603e	; 0x603e <round>
    25b8:	2b 01       	movw	r4, r22
    25ba:	3c 01       	movw	r6, r24
	newOffset = yavg - newScale * xavg;
	
	while(CanRead_Ctrl())
		ReadByte_Ctrl();
	fprintf(fp, "# New calibration for channel %s:\r\n", calChan[selectedCal].name);
	fprintf(fp, "# offset %.0f (was %d), scale %.4f (was %.4f). Apply new values (y/n)?",
    25bc:	ce 56       	subi	r28, 0x6E	; 110
    25be:	df 4f       	sbci	r29, 0xFF	; 255
    25c0:	b8 81       	ld	r27, Y
    25c2:	c2 59       	subi	r28, 0x92	; 146
    25c4:	d0 40       	sbci	r29, 0x00	; 0
    25c6:	bf 93       	push	r27
    25c8:	cf 56       	subi	r28, 0x6F	; 111
    25ca:	df 4f       	sbci	r29, 0xFF	; 255
    25cc:	e8 81       	ld	r30, Y
    25ce:	c1 59       	subi	r28, 0x91	; 145
    25d0:	d0 40       	sbci	r29, 0x00	; 0
    25d2:	ef 93       	push	r30
    25d4:	c0 57       	subi	r28, 0x70	; 112
    25d6:	df 4f       	sbci	r29, 0xFF	; 255
    25d8:	f8 81       	ld	r31, Y
    25da:	c0 59       	subi	r28, 0x90	; 144
    25dc:	d0 40       	sbci	r29, 0x00	; 0
    25de:	ff 93       	push	r31
    25e0:	c1 57       	subi	r28, 0x71	; 113
    25e2:	df 4f       	sbci	r29, 0xFF	; 255
    25e4:	28 81       	ld	r18, Y
    25e6:	cf 58       	subi	r28, 0x8F	; 143
    25e8:	d0 40       	sbci	r29, 0x00	; 0
    25ea:	2f 93       	push	r18
    25ec:	ff 92       	push	r15
    25ee:	ef 92       	push	r14
    25f0:	df 92       	push	r13
    25f2:	cf 92       	push	r12
    25f4:	9f 92       	push	r9
    25f6:	8f 92       	push	r8
    25f8:	b8 01       	movw	r22, r16
    25fa:	88 27       	eor	r24, r24
    25fc:	77 fd       	sbrc	r23, 7
    25fe:	80 95       	com	r24
    2600:	98 2f       	mov	r25, r24
    2602:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    2606:	a3 01       	movw	r20, r6
    2608:	92 01       	movw	r18, r4
    260a:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__addsf3>
    260e:	9f 93       	push	r25
    2610:	8f 93       	push	r24
    2612:	7f 93       	push	r23
    2614:	6f 93       	push	r22
    2616:	8b e6       	ldi	r24, 0x6B	; 107
    2618:	94 e2       	ldi	r25, 0x24	; 36
    261a:	9f 93       	push	r25
    261c:	8f 93       	push	r24
    261e:	3f 92       	push	r3
    2620:	2f 92       	push	r2
    2622:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    2626:	cd bf       	out	0x3d, r28	; 61
    2628:	de bf       	out	0x3e, r29	; 62
		*calChan[selectedCal].offset + round(newOffset), *calChan[selectedCal].offset, newScale, *calChan[selectedCal].scale);
	do {
		thisChar = ReadByte_Ctrl();
    262a:	0e 94 8c 2a 	call	0x5518	; 0x5518 <ReadByte_Ctrl>
    262e:	18 2f       	mov	r17, r24
	} while(thisChar != 'y' && thisChar != 'Y' && thisChar != 'n' && thisChar != 'N' && thisChar != 0x1B);
    2630:	89 37       	cpi	r24, 0x79	; 121
    2632:	41 f0       	breq	.+16     	; 0x2644 <CalibrateChannel+0x7ba>
    2634:	89 35       	cpi	r24, 0x59	; 89
    2636:	31 f0       	breq	.+12     	; 0x2644 <CalibrateChannel+0x7ba>
    2638:	8e 36       	cpi	r24, 0x6E	; 110
    263a:	21 f0       	breq	.+8      	; 0x2644 <CalibrateChannel+0x7ba>
    263c:	8e 34       	cpi	r24, 0x4E	; 78
    263e:	11 f0       	breq	.+4      	; 0x2644 <CalibrateChannel+0x7ba>
    2640:	8b 31       	cpi	r24, 0x1B	; 27
    2642:	99 f7       	brne	.-26     	; 0x262a <CalibrateChannel+0x7a0>
	fprintf(fp, "%c\r\n", thisChar);
    2644:	21 2f       	mov	r18, r17
    2646:	33 27       	eor	r19, r19
    2648:	27 fd       	sbrc	r18, 7
    264a:	30 95       	com	r19
    264c:	3f 93       	push	r19
    264e:	1f 93       	push	r17
    2650:	27 ec       	ldi	r18, 0xC7	; 199
    2652:	33 e2       	ldi	r19, 0x23	; 35
    2654:	3f 93       	push	r19
    2656:	2f 93       	push	r18
    2658:	3f 92       	push	r3
    265a:	2f 92       	push	r2
    265c:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
	if(thisChar == 'y' || thisChar == 'Y') {
    2660:	1f 7d       	andi	r17, 0xDF	; 223
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	19 35       	cpi	r17, 0x59	; 89
    2670:	09 f0       	breq	.+2      	; 0x2674 <CalibrateChannel+0x7ea>
    2672:	a6 c0       	rjmp	.+332    	; 0x27c0 <CalibrateChannel+0x936>
		*calChan[selectedCal].offset += round(newOffset);
    2674:	d5 01       	movw	r26, r10
    2676:	6d 91       	ld	r22, X+
    2678:	7c 91       	ld	r23, X
    267a:	88 27       	eor	r24, r24
    267c:	77 fd       	sbrc	r23, 7
    267e:	80 95       	com	r24
    2680:	98 2f       	mov	r25, r24
    2682:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    2686:	a3 01       	movw	r20, r6
    2688:	92 01       	movw	r18, r4
    268a:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <__addsf3>
    268e:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__fixsfsi>
    2692:	f5 01       	movw	r30, r10
    2694:	60 83       	st	Z, r22
    2696:	71 83       	std	Z+1, r23	; 0x01
		*calChan[selectedCal].scale = newScale;
    2698:	cd 56       	subi	r28, 0x6D	; 109
    269a:	df 4f       	sbci	r29, 0xFF	; 255
    269c:	a8 81       	ld	r26, Y
    269e:	b9 81       	ldd	r27, Y+1	; 0x01
    26a0:	c3 59       	subi	r28, 0x93	; 147
    26a2:	d0 40       	sbci	r29, 0x00	; 0
    26a4:	cd 92       	st	X+, r12
    26a6:	dd 92       	st	X+, r13
    26a8:	ed 92       	st	X+, r14
    26aa:	fc 92       	st	X, r15
    26ac:	13 97       	sbiw	r26, 0x03	; 3
		UPDATEEEPROM(*calChan[selectedCal].offset, calChan[selectedCal].ee_offset_addr);
    26ae:	8c e0       	ldi	r24, 0x0C	; 12
    26b0:	c3 56       	subi	r28, 0x63	; 99
    26b2:	df 4f       	sbci	r29, 0xFF	; 255
    26b4:	e8 81       	ld	r30, Y
    26b6:	f9 81       	ldd	r31, Y+1	; 0x01
    26b8:	cd 59       	subi	r28, 0x9D	; 157
    26ba:	d0 40       	sbci	r29, 0x00	; 0
    26bc:	8e 9f       	mul	r24, r30
    26be:	80 01       	movw	r16, r0
    26c0:	8f 9f       	mul	r24, r31
    26c2:	10 0d       	add	r17, r0
    26c4:	11 24       	eor	r1, r1
    26c6:	21 e0       	ldi	r18, 0x01	; 1
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	2c 0f       	add	r18, r28
    26cc:	3d 1f       	adc	r19, r29
    26ce:	02 0f       	add	r16, r18
    26d0:	13 1f       	adc	r17, r19
    26d2:	d8 01       	movw	r26, r16
    26d4:	1a 96       	adiw	r26, 0x0a	; 10
    26d6:	ed 90       	ld	r14, X+
    26d8:	fc 90       	ld	r15, X
    26da:	1b 97       	sbiw	r26, 0x0b	; 11
    26dc:	42 e0       	ldi	r20, 0x02	; 2
    26de:	50 e0       	ldi	r21, 0x00	; 0
    26e0:	b7 01       	movw	r22, r14
    26e2:	c5 01       	movw	r24, r10
    26e4:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <UpdateEEPROM>
		UPDATEEEPROM(*calChan[selectedCal].scale, calChan[selectedCal].ee_scale_addr);
    26e8:	f8 01       	movw	r30, r16
    26ea:	00 85       	ldd	r16, Z+8	; 0x08
    26ec:	11 85       	ldd	r17, Z+9	; 0x09
    26ee:	44 e0       	ldi	r20, 0x04	; 4
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	b8 01       	movw	r22, r16
    26f4:	cd 56       	subi	r28, 0x6D	; 109
    26f6:	df 4f       	sbci	r29, 0xFF	; 255
    26f8:	88 81       	ld	r24, Y
    26fa:	99 81       	ldd	r25, Y+1	; 0x01
    26fc:	c3 59       	subi	r28, 0x93	; 147
    26fe:	d0 40       	sbci	r29, 0x00	; 0
    2700:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <UpdateEEPROM>
		fprintf(fp, "# New cal value (struct): %d / %.4f\r\n", *calChan[selectedCal].offset, *calChan[selectedCal].scale);
    2704:	cd 56       	subi	r28, 0x6D	; 109
    2706:	df 4f       	sbci	r29, 0xFF	; 255
    2708:	e8 81       	ld	r30, Y
    270a:	f9 81       	ldd	r31, Y+1	; 0x01
    270c:	c3 59       	subi	r28, 0x93	; 147
    270e:	d0 40       	sbci	r29, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	a2 81       	ldd	r26, Z+2	; 0x02
    2716:	b3 81       	ldd	r27, Z+3	; 0x03
    2718:	f5 01       	movw	r30, r10
    271a:	20 81       	ld	r18, Z
    271c:	31 81       	ldd	r19, Z+1	; 0x01
    271e:	bf 93       	push	r27
    2720:	af 93       	push	r26
    2722:	9f 93       	push	r25
    2724:	8f 93       	push	r24
    2726:	3f 93       	push	r19
    2728:	2f 93       	push	r18
    272a:	82 eb       	ldi	r24, 0xB2	; 178
    272c:	94 e2       	ldi	r25, 0x24	; 36
    272e:	9f 93       	push	r25
    2730:	8f 93       	push	r24
    2732:	3f 92       	push	r3
    2734:	2f 92       	push	r2
    2736:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
		TRYREADEEPROM(newOffset_ee, calChan[selectedCal].ee_offset_addr);
    273a:	42 e0       	ldi	r20, 0x02	; 2
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	b7 01       	movw	r22, r14
    2740:	ce 01       	movw	r24, r28
    2742:	83 57       	subi	r24, 0x73	; 115
    2744:	9f 4f       	sbci	r25, 0xFF	; 255
    2746:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
		TRYREADEEPROM(newScale_ee, calChan[selectedCal].ee_scale_addr);
    274a:	44 e0       	ldi	r20, 0x04	; 4
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	b8 01       	movw	r22, r16
    2750:	ce 01       	movw	r24, r28
    2752:	87 57       	subi	r24, 0x77	; 119
    2754:	9f 4f       	sbci	r25, 0xFF	; 255
    2756:	0e 94 e4 2c 	call	0x59c8	; 0x59c8 <TryReadEEPROM>
		fprintf(fp, "# New cal value (eeprom): %d / %.4f\r\n",newOffset_ee, newScale_ee);
    275a:	c4 57       	subi	r28, 0x74	; 116
    275c:	df 4f       	sbci	r29, 0xFF	; 255
    275e:	88 81       	ld	r24, Y
    2760:	cc 58       	subi	r28, 0x8C	; 140
    2762:	d0 40       	sbci	r29, 0x00	; 0
    2764:	8f 93       	push	r24
    2766:	c5 57       	subi	r28, 0x75	; 117
    2768:	df 4f       	sbci	r29, 0xFF	; 255
    276a:	88 81       	ld	r24, Y
    276c:	cb 58       	subi	r28, 0x8B	; 139
    276e:	d0 40       	sbci	r29, 0x00	; 0
    2770:	8f 93       	push	r24
    2772:	c6 57       	subi	r28, 0x76	; 118
    2774:	df 4f       	sbci	r29, 0xFF	; 255
    2776:	88 81       	ld	r24, Y
    2778:	ca 58       	subi	r28, 0x8A	; 138
    277a:	d0 40       	sbci	r29, 0x00	; 0
    277c:	8f 93       	push	r24
    277e:	c7 57       	subi	r28, 0x77	; 119
    2780:	df 4f       	sbci	r29, 0xFF	; 255
    2782:	88 81       	ld	r24, Y
    2784:	c9 58       	subi	r28, 0x89	; 137
    2786:	d0 40       	sbci	r29, 0x00	; 0
    2788:	8f 93       	push	r24
    278a:	c2 57       	subi	r28, 0x72	; 114
    278c:	df 4f       	sbci	r29, 0xFF	; 255
    278e:	88 81       	ld	r24, Y
    2790:	ce 58       	subi	r28, 0x8E	; 142
    2792:	d0 40       	sbci	r29, 0x00	; 0
    2794:	8f 93       	push	r24
    2796:	c3 57       	subi	r28, 0x73	; 115
    2798:	df 4f       	sbci	r29, 0xFF	; 255
    279a:	88 81       	ld	r24, Y
    279c:	cd 58       	subi	r28, 0x8D	; 141
    279e:	d0 40       	sbci	r29, 0x00	; 0
    27a0:	8f 93       	push	r24
    27a2:	88 ed       	ldi	r24, 0xD8	; 216
    27a4:	94 e2       	ldi	r25, 0x24	; 36
    27a6:	9f 93       	push	r25
    27a8:	8f 93       	push	r24
    27aa:	3f 92       	push	r3
    27ac:	2f 92       	push	r2
    27ae:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
		fprintf(fp, "# Calibration applied and saved to EEPROM.\r\n");
    27b2:	b1 01       	movw	r22, r2
    27b4:	8e ef       	ldi	r24, 0xFE	; 254
    27b6:	94 e2       	ldi	r25, 0x24	; 36
    27b8:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
    27bc:	cd bf       	out	0x3d, r28	; 61
    27be:	de bf       	out	0x3e, r29	; 62
	}
	
} /* CalibrateChannel */
    27c0:	cc 55       	subi	r28, 0x5C	; 92
    27c2:	df 4f       	sbci	r29, 0xFF	; 255
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	ff 90       	pop	r15
    27d2:	ef 90       	pop	r14
    27d4:	df 90       	pop	r13
    27d6:	cf 90       	pop	r12
    27d8:	bf 90       	pop	r11
    27da:	af 90       	pop	r10
    27dc:	9f 90       	pop	r9
    27de:	8f 90       	pop	r8
    27e0:	7f 90       	pop	r7
    27e2:	6f 90       	pop	r6
    27e4:	5f 90       	pop	r5
    27e6:	4f 90       	pop	r4
    27e8:	3f 90       	pop	r3
    27ea:	2f 90       	pop	r2
    27ec:	08 95       	ret

000027ee <TakeSnapshot>:
} /* InitCoreAnalogSensors */


void TakeSnapshot(void) {
	
	sTakeSnapshot = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	80 93 48 29 	sts	0x2948, r24
    27f4:	08 95       	ret

000027f6 <GetSessionCycleCount>:
	return !sTakeSnapshot;
	
} /* IsSnapshotCoreAnalogDone */


uint32_t GetSessionCycleCount(void) {
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
	
	uint32_t res, prev;
	
	res = sSessionCycleCount;
    27fa:	60 91 cb 28 	lds	r22, 0x28CB
    27fe:	70 91 cc 28 	lds	r23, 0x28CC
    2802:	80 91 cd 28 	lds	r24, 0x28CD
    2806:	90 91 ce 28 	lds	r25, 0x28CE
	
	do {
		prev = res;
		res = sSessionCycleCount;
    280a:	00 91 cb 28 	lds	r16, 0x28CB
    280e:	10 91 cc 28 	lds	r17, 0x28CC
    2812:	20 91 cd 28 	lds	r18, 0x28CD
    2816:	30 91 ce 28 	lds	r19, 0x28CE
	} while (res != prev);
    281a:	06 17       	cp	r16, r22
    281c:	17 07       	cpc	r17, r23
    281e:	28 07       	cpc	r18, r24
    2820:	39 07       	cpc	r19, r25
    2822:	19 f0       	breq	.+6      	; 0x282a <GetSessionCycleCount+0x34>
	
	res = sSessionCycleCount;
	
	do {
		prev = res;
		res = sSessionCycleCount;
    2824:	c9 01       	movw	r24, r18
    2826:	b8 01       	movw	r22, r16
    2828:	f0 cf       	rjmp	.-32     	; 0x280a <GetSessionCycleCount+0x14>
	} while (res != prev);
	
	return res;
	
} /* GetSessionCycleCount */
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	08 95       	ret

00002830 <PrintCSV_H2A>:

	return res;
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
    2830:	2f 92       	push	r2
    2832:	3f 92       	push	r3
    2834:	4f 92       	push	r4
    2836:	5f 92       	push	r5
    2838:	6f 92       	push	r6
    283a:	7f 92       	push	r7
    283c:	8f 92       	push	r8
    283e:	9f 92       	push	r9
    2840:	af 92       	push	r10
    2842:	bf 92       	push	r11
    2844:	cf 92       	push	r12
    2846:	df 92       	push	r13
    2848:	ef 92       	push	r14
    284a:	ff 92       	push	r15
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	cb 5c       	subi	r28, 0xCB	; 203
    285a:	d1 09       	sbc	r29, r1
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	c8 54       	subi	r28, 0x48	; 72
    2862:	df 4f       	sbci	r29, 0xFF	; 255
    2864:	88 83       	st	Y, r24
    2866:	c8 5b       	subi	r28, 0xB8	; 184
    2868:	d0 40       	sbci	r29, 0x00	; 0
    286a:	c7 54       	subi	r28, 0x47	; 71
    286c:	df 4f       	sbci	r29, 0xFF	; 255
    286e:	98 83       	st	Y, r25
    2870:	c9 5b       	subi	r28, 0xB9	; 185
    2872:	d0 40       	sbci	r29, 0x00	; 0
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    2874:	80 91 48 29 	lds	r24, 0x2948
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    2878:	81 11       	cpse	r24, r1
    287a:	fc cf       	rjmp	.-8      	; 0x2874 <PrintCSV_H2A+0x44>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f);
    287c:	80 91 bc 29 	lds	r24, 0x29BC
    2880:	90 91 bd 29 	lds	r25, 0x29BD
    2884:	a0 91 be 29 	lds	r26, 0x29BE
    2888:	b0 91 bf 29 	lds	r27, 0x29BF

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    288c:	89 2b       	or	r24, r25
    288e:	8a 2b       	or	r24, r26
    2890:	8b 2b       	or	r24, r27
    2892:	e9 f0       	breq	.+58     	; 0x28ce <PrintCSV_H2A+0x9e>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f);
    2894:	60 91 bc 29 	lds	r22, 0x29BC
    2898:	70 91 bd 29 	lds	r23, 0x29BD
    289c:	80 91 be 29 	lds	r24, 0x29BE
    28a0:	90 91 bf 29 	lds	r25, 0x29BF
    28a4:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	57 e3       	ldi	r21, 0x37	; 55
    28b0:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    28b4:	9b 01       	movw	r18, r22
    28b6:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    28b8:	63 e3       	ldi	r22, 0x33	; 51
    28ba:	73 e3       	ldi	r23, 0x33	; 51
    28bc:	8f e5       	ldi	r24, 0x5F	; 95
    28be:	94 e4       	ldi	r25, 0x44	; 68
    28c0:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    28c4:	06 2f       	mov	r16, r22
    28c6:	27 2e       	mov	r2, r23
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	9a 83       	std	Y+2, r25	; 0x02
    28cc:	04 c0       	rjmp	.+8      	; 0x28d6 <PrintCSV_H2A+0xa6>
    28ce:	00 e0       	ldi	r16, 0x00	; 0
    28d0:	21 2c       	mov	r2, r1
    28d2:	19 82       	std	Y+1, r1	; 0x01
    28d4:	1a 82       	std	Y+2, r1	; 0x02
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    28d6:	20 91 c0 29 	lds	r18, 0x29C0
    28da:	2b 83       	std	Y+3, r18	; 0x03
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    28dc:	60 91 b4 29 	lds	r22, 0x29B4
    28e0:	70 91 b5 29 	lds	r23, 0x29B5
    28e4:	80 91 b6 29 	lds	r24, 0x29B6
    28e8:	90 91 b7 29 	lds	r25, 0x29B7
    28ec:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e4       	ldi	r19, 0x40	; 64
    28f4:	4c e9       	ldi	r20, 0x9C	; 156
    28f6:	55 e4       	ldi	r21, 0x45	; 69
    28f8:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    28fc:	c6 54       	subi	r28, 0x46	; 70
    28fe:	df 4f       	sbci	r29, 0xFF	; 255
    2900:	68 83       	st	Y, r22
    2902:	ca 5b       	subi	r28, 0xBA	; 186
    2904:	d0 40       	sbci	r29, 0x00	; 0
    2906:	c5 54       	subi	r28, 0x45	; 69
    2908:	df 4f       	sbci	r29, 0xFF	; 255
    290a:	78 83       	st	Y, r23
    290c:	cb 5b       	subi	r28, 0xBB	; 187
    290e:	d0 40       	sbci	r29, 0x00	; 0
    2910:	c4 54       	subi	r28, 0x44	; 68
    2912:	df 4f       	sbci	r29, 0xFF	; 255
    2914:	88 83       	st	Y, r24
    2916:	cc 5b       	subi	r28, 0xBC	; 188
    2918:	d0 40       	sbci	r29, 0x00	; 0
    291a:	c3 54       	subi	r28, 0x43	; 67
    291c:	df 4f       	sbci	r29, 0xFF	; 255
    291e:	98 83       	st	Y, r25
    2920:	cd 5b       	subi	r28, 0xBD	; 189
    2922:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    2924:	20 91 af 29 	lds	r18, 0x29AF

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	21 11       	cpse	r18, r1
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	ce 56       	subi	r28, 0x6E	; 110
    2932:	df 4f       	sbci	r29, 0xFF	; 255
    2934:	98 83       	st	Y, r25
    2936:	c2 59       	subi	r28, 0x92	; 146
    2938:	d0 40       	sbci	r29, 0x00	; 0
    293a:	cd 56       	subi	r28, 0x6D	; 109
    293c:	df 4f       	sbci	r29, 0xFF	; 255
    293e:	88 83       	st	Y, r24
    2940:	c3 59       	subi	r28, 0x93	; 147
    2942:	d0 40       	sbci	r29, 0x00	; 0
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    2944:	60 91 b0 29 	lds	r22, 0x29B0
    2948:	70 91 b1 29 	lds	r23, 0x29B1
    294c:	80 91 b2 29 	lds	r24, 0x29B2
    2950:	90 91 b3 29 	lds	r25, 0x29B3
    2954:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e4       	ldi	r19, 0x40	; 64
    295c:	4c e9       	ldi	r20, 0x9C	; 156
    295e:	55 e4       	ldi	r21, 0x45	; 69
    2960:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    2964:	c2 54       	subi	r28, 0x42	; 66
    2966:	df 4f       	sbci	r29, 0xFF	; 255
    2968:	68 83       	st	Y, r22
    296a:	ce 5b       	subi	r28, 0xBE	; 190
    296c:	d0 40       	sbci	r29, 0x00	; 0
    296e:	c1 54       	subi	r28, 0x41	; 65
    2970:	df 4f       	sbci	r29, 0xFF	; 255
    2972:	78 83       	st	Y, r23
    2974:	cf 5b       	subi	r28, 0xBF	; 191
    2976:	d0 40       	sbci	r29, 0x00	; 0
    2978:	c0 54       	subi	r28, 0x40	; 64
    297a:	df 4f       	sbci	r29, 0xFF	; 255
    297c:	88 83       	st	Y, r24
    297e:	c0 5c       	subi	r28, 0xC0	; 192
    2980:	d0 40       	sbci	r29, 0x00	; 0
    2982:	cf 53       	subi	r28, 0x3F	; 63
    2984:	df 4f       	sbci	r29, 0xFF	; 255
    2986:	98 83       	st	Y, r25
    2988:	c1 5c       	subi	r28, 0xC1	; 193
    298a:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
    298c:	20 91 ae 29 	lds	r18, 0x29AE

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2990:	91 e0       	ldi	r25, 0x01	; 1
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	21 11       	cpse	r18, r1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	cc 56       	subi	r28, 0x6C	; 108
    299a:	df 4f       	sbci	r29, 0xFF	; 255
    299c:	98 83       	st	Y, r25
    299e:	c4 59       	subi	r28, 0x94	; 148
    29a0:	d0 40       	sbci	r29, 0x00	; 0
    29a2:	cb 56       	subi	r28, 0x6B	; 107
    29a4:	df 4f       	sbci	r29, 0xFF	; 255
    29a6:	88 83       	st	Y, r24
    29a8:	c5 59       	subi	r28, 0x95	; 149
    29aa:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
    29ac:	60 91 76 29 	lds	r22, 0x2976
    29b0:	70 91 77 29 	lds	r23, 0x2977
    29b4:	80 91 78 29 	lds	r24, 0x2978
    29b8:	90 91 79 29 	lds	r25, 0x2979
    29bc:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e4       	ldi	r19, 0x40	; 64
    29c4:	4c e9       	ldi	r20, 0x9C	; 156
    29c6:	55 e4       	ldi	r21, 0x45	; 69
    29c8:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    29cc:	ce 53       	subi	r28, 0x3E	; 62
    29ce:	df 4f       	sbci	r29, 0xFF	; 255
    29d0:	68 83       	st	Y, r22
    29d2:	c2 5c       	subi	r28, 0xC2	; 194
    29d4:	d0 40       	sbci	r29, 0x00	; 0
    29d6:	cd 53       	subi	r28, 0x3D	; 61
    29d8:	df 4f       	sbci	r29, 0xFF	; 255
    29da:	78 83       	st	Y, r23
    29dc:	c3 5c       	subi	r28, 0xC3	; 195
    29de:	d0 40       	sbci	r29, 0x00	; 0
    29e0:	cc 53       	subi	r28, 0x3C	; 60
    29e2:	df 4f       	sbci	r29, 0xFF	; 255
    29e4:	88 83       	st	Y, r24
    29e6:	c4 5c       	subi	r28, 0xC4	; 196
    29e8:	d0 40       	sbci	r29, 0x00	; 0
    29ea:	cb 53       	subi	r28, 0x3B	; 59
    29ec:	df 4f       	sbci	r29, 0xFF	; 255
    29ee:	98 83       	st	Y, r25
    29f0:	c5 5c       	subi	r28, 0xC5	; 197
    29f2:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
    29f4:	20 91 75 29 	lds	r18, 0x2975

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    29f8:	91 e0       	ldi	r25, 0x01	; 1
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	21 11       	cpse	r18, r1
    29fe:	01 c0       	rjmp	.+2      	; 0x2a02 <PrintCSV_H2A+0x1d2>
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	ca 56       	subi	r28, 0x6A	; 106
    2a04:	df 4f       	sbci	r29, 0xFF	; 255
    2a06:	98 83       	st	Y, r25
    2a08:	c6 59       	subi	r28, 0x96	; 150
    2a0a:	d0 40       	sbci	r29, 0x00	; 0
    2a0c:	c9 56       	subi	r28, 0x69	; 105
    2a0e:	df 4f       	sbci	r29, 0xFF	; 255
    2a10:	88 83       	st	Y, r24
    2a12:	c7 59       	subi	r28, 0x97	; 151
    2a14:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
    2a16:	60 91 aa 29 	lds	r22, 0x29AA
    2a1a:	70 91 ab 29 	lds	r23, 0x29AB
    2a1e:	80 91 ac 29 	lds	r24, 0x29AC
    2a22:	90 91 ad 29 	lds	r25, 0x29AD

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2a26:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
    2a2a:	2f e5       	ldi	r18, 0x5F	; 95
    2a2c:	39 e2       	ldi	r19, 0x29	; 41
    2a2e:	4b e4       	ldi	r20, 0x4B	; 75
    2a30:	5d e3       	ldi	r21, 0x3D	; 61
    2a32:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    2a36:	ca 53       	subi	r28, 0x3A	; 58
    2a38:	df 4f       	sbci	r29, 0xFF	; 255
    2a3a:	68 83       	st	Y, r22
    2a3c:	c6 5c       	subi	r28, 0xC6	; 198
    2a3e:	d0 40       	sbci	r29, 0x00	; 0
    2a40:	c9 53       	subi	r28, 0x39	; 57
    2a42:	df 4f       	sbci	r29, 0xFF	; 255
    2a44:	78 83       	st	Y, r23
    2a46:	c7 5c       	subi	r28, 0xC7	; 199
    2a48:	d0 40       	sbci	r29, 0x00	; 0
    2a4a:	c8 53       	subi	r28, 0x38	; 56
    2a4c:	df 4f       	sbci	r29, 0xFF	; 255
    2a4e:	88 83       	st	Y, r24
    2a50:	c8 5c       	subi	r28, 0xC8	; 200
    2a52:	d0 40       	sbci	r29, 0x00	; 0
    2a54:	c7 53       	subi	r28, 0x37	; 55
    2a56:	df 4f       	sbci	r29, 0xFF	; 255
    2a58:	98 83       	st	Y, r25
    2a5a:	c9 5c       	subi	r28, 0xC9	; 201
    2a5c:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
    2a5e:	60 91 a6 29 	lds	r22, 0x29A6
    2a62:	70 91 a7 29 	lds	r23, 0x29A7
    2a66:	80 91 a8 29 	lds	r24, 0x29A8
    2a6a:	90 91 a9 29 	lds	r25, 0x29A9

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    2a6e:	61 15       	cp	r22, r1
    2a70:	71 05       	cpc	r23, r1
    2a72:	81 05       	cpc	r24, r1
    2a74:	91 05       	cpc	r25, r1
    2a76:	21 f1       	breq	.+72     	; 0x2ac0 <PrintCSV_H2A+0x290>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    2a78:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	57 e3       	ldi	r21, 0x37	; 55
    2a84:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    2a88:	9b 01       	movw	r18, r22
    2a8a:	ac 01       	movw	r20, r24
    2a8c:	63 e3       	ldi	r22, 0x33	; 51
    2a8e:	73 e3       	ldi	r23, 0x33	; 51
    2a90:	8f e5       	ldi	r24, 0x5F	; 95
    2a92:	94 e4       	ldi	r25, 0x44	; 68
    2a94:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    2a98:	c5 53       	subi	r28, 0x35	; 53
    2a9a:	df 4f       	sbci	r29, 0xFF	; 255
    2a9c:	68 83       	st	Y, r22
    2a9e:	cb 5c       	subi	r28, 0xCB	; 203
    2aa0:	d0 40       	sbci	r29, 0x00	; 0
    2aa2:	17 2f       	mov	r17, r23
    2aa4:	38 2e       	mov	r3, r24
    2aa6:	c6 53       	subi	r28, 0x36	; 54
    2aa8:	df 4f       	sbci	r29, 0xFF	; 255
    2aaa:	98 83       	st	Y, r25
    2aac:	ca 5c       	subi	r28, 0xCA	; 202
    2aae:	d0 40       	sbci	r29, 0x00	; 0
		if(res < SPEEDSENSOR_MIN_SPEED)
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__cmpsf2>
    2abc:	87 ff       	sbrs	r24, 7
    2abe:	0c c0       	rjmp	.+24     	; 0x2ad8 <PrintCSV_H2A+0x2a8>
		res = 0.0f;
	}
	else
	res = 0.0f;
    2ac0:	c5 53       	subi	r28, 0x35	; 53
    2ac2:	df 4f       	sbci	r29, 0xFF	; 255
    2ac4:	18 82       	st	Y, r1
    2ac6:	cb 5c       	subi	r28, 0xCB	; 203
    2ac8:	d0 40       	sbci	r29, 0x00	; 0
    2aca:	10 e0       	ldi	r17, 0x00	; 0
    2acc:	31 2c       	mov	r3, r1
    2ace:	c6 53       	subi	r28, 0x36	; 54
    2ad0:	df 4f       	sbci	r29, 0xFF	; 255
    2ad2:	18 82       	st	Y, r1
    2ad4:	ca 5c       	subi	r28, 0xCA	; 202
    2ad6:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    2ad8:	80 91 ba 29 	lds	r24, 0x29BA
    2adc:	90 91 bb 29 	lds	r25, 0x29BB
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    2ae0:	40 91 b8 29 	lds	r20, 0x29B8
    2ae4:	50 91 b9 29 	lds	r21, 0x29B9
    2ae8:	4c 83       	std	Y+4, r20	; 0x04
    2aea:	5d 83       	std	Y+5, r21	; 0x05
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    2aec:	c0 90 7a 29 	lds	r12, 0x297A
    2af0:	d0 90 7b 29 	lds	r13, 0x297B
    2af4:	e0 90 7c 29 	lds	r14, 0x297C
    2af8:	f0 90 7d 29 	lds	r15, 0x297D
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    2afc:	50 91 9e 29 	lds	r21, 0x299E
    2b00:	c8 56       	subi	r28, 0x68	; 104
    2b02:	df 4f       	sbci	r29, 0xFF	; 255
    2b04:	58 83       	st	Y, r21
    2b06:	c8 59       	subi	r28, 0x98	; 152
    2b08:	d0 40       	sbci	r29, 0x00	; 0
    2b0a:	e0 91 9f 29 	lds	r30, 0x299F
    2b0e:	c7 56       	subi	r28, 0x67	; 103
    2b10:	df 4f       	sbci	r29, 0xFF	; 255
    2b12:	e8 83       	st	Y, r30
    2b14:	c9 59       	subi	r28, 0x99	; 153
    2b16:	d0 40       	sbci	r29, 0x00	; 0
    2b18:	f0 91 a0 29 	lds	r31, 0x29A0
    2b1c:	c6 56       	subi	r28, 0x66	; 102
    2b1e:	df 4f       	sbci	r29, 0xFF	; 255
    2b20:	f8 83       	st	Y, r31
    2b22:	ca 59       	subi	r28, 0x9A	; 154
    2b24:	d0 40       	sbci	r29, 0x00	; 0
    2b26:	20 91 a1 29 	lds	r18, 0x29A1
    2b2a:	c5 56       	subi	r28, 0x65	; 101
    2b2c:	df 4f       	sbci	r29, 0xFF	; 255
    2b2e:	28 83       	st	Y, r18
    2b30:	cb 59       	subi	r28, 0x9B	; 155
    2b32:	d0 40       	sbci	r29, 0x00	; 0
    2b34:	30 91 a2 29 	lds	r19, 0x29A2
    2b38:	c4 56       	subi	r28, 0x64	; 100
    2b3a:	df 4f       	sbci	r29, 0xFF	; 255
    2b3c:	38 83       	st	Y, r19
    2b3e:	cc 59       	subi	r28, 0x9C	; 156
    2b40:	d0 40       	sbci	r29, 0x00	; 0
    2b42:	40 91 a3 29 	lds	r20, 0x29A3
    2b46:	c3 56       	subi	r28, 0x63	; 99
    2b48:	df 4f       	sbci	r29, 0xFF	; 255
    2b4a:	48 83       	st	Y, r20
    2b4c:	cd 59       	subi	r28, 0x9D	; 157
    2b4e:	d0 40       	sbci	r29, 0x00	; 0
    2b50:	50 91 a4 29 	lds	r21, 0x29A4
    2b54:	c2 56       	subi	r28, 0x62	; 98
    2b56:	df 4f       	sbci	r29, 0xFF	; 255
    2b58:	58 83       	st	Y, r21
    2b5a:	ce 59       	subi	r28, 0x9E	; 158
    2b5c:	d0 40       	sbci	r29, 0x00	; 0
    2b5e:	e0 91 a5 29 	lds	r30, 0x29A5
    2b62:	c1 56       	subi	r28, 0x61	; 97
    2b64:	df 4f       	sbci	r29, 0xFF	; 255
    2b66:	e8 83       	st	Y, r30
    2b68:	cf 59       	subi	r28, 0x9F	; 159
    2b6a:	d0 40       	sbci	r29, 0x00	; 0
    2b6c:	40 90 e9 29 	lds	r4, 0x29E9
    2b70:	50 90 ea 29 	lds	r5, 0x29EA
    2b74:	60 90 eb 29 	lds	r6, 0x29EB
    2b78:	70 90 ec 29 	lds	r7, 0x29EC
    2b7c:	80 90 ed 29 	lds	r8, 0x29ED
    2b80:	90 90 ee 29 	lds	r9, 0x29EE
    2b84:	a0 90 ef 29 	lds	r10, 0x29EF
    2b88:	b0 90 f0 29 	lds	r11, 0x29F0
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    2b8c:	20 91 92 29 	lds	r18, 0x2992
    2b90:	30 91 93 29 	lds	r19, 0x2993
    2b94:	40 91 94 29 	lds	r20, 0x2994
    2b98:	50 91 95 29 	lds	r21, 0x2995
    2b9c:	2e 83       	std	Y+6, r18	; 0x06
    2b9e:	3f 83       	std	Y+7, r19	; 0x07
    2ba0:	48 87       	std	Y+8, r20	; 0x08
    2ba2:	59 87       	std	Y+9, r21	; 0x09
    2ba4:	20 91 e9 29 	lds	r18, 0x29E9
    2ba8:	30 91 ea 29 	lds	r19, 0x29EA
    2bac:	40 91 eb 29 	lds	r20, 0x29EB
    2bb0:	50 91 ec 29 	lds	r21, 0x29EC
    2bb4:	2a 87       	std	Y+10, r18	; 0x0a
    2bb6:	3b 87       	std	Y+11, r19	; 0x0b
    2bb8:	4c 87       	std	Y+12, r20	; 0x0c
    2bba:	5d 87       	std	Y+13, r21	; 0x0d
    2bbc:	20 91 ed 29 	lds	r18, 0x29ED
    2bc0:	30 91 ee 29 	lds	r19, 0x29EE
    2bc4:	40 91 ef 29 	lds	r20, 0x29EF
    2bc8:	50 91 f0 29 	lds	r21, 0x29F0
    2bcc:	2e 87       	std	Y+14, r18	; 0x0e
    2bce:	3f 87       	std	Y+15, r19	; 0x0f
    2bd0:	48 8b       	std	Y+16, r20	; 0x10
    2bd2:	59 8b       	std	Y+17, r21	; 0x11
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    2bd4:	20 91 8a 29 	lds	r18, 0x298A
    2bd8:	30 91 8b 29 	lds	r19, 0x298B
    2bdc:	40 91 8c 29 	lds	r20, 0x298C
    2be0:	50 91 8d 29 	lds	r21, 0x298D
    2be4:	2a 8b       	std	Y+18, r18	; 0x12
    2be6:	3b 8b       	std	Y+19, r19	; 0x13
    2be8:	4c 8b       	std	Y+20, r20	; 0x14
    2bea:	5d 8b       	std	Y+21, r21	; 0x15
    2bec:	20 91 ed 29 	lds	r18, 0x29ED
    2bf0:	30 91 ee 29 	lds	r19, 0x29EE
    2bf4:	40 91 ef 29 	lds	r20, 0x29EF
    2bf8:	50 91 f0 29 	lds	r21, 0x29F0
    2bfc:	2e 8b       	std	Y+22, r18	; 0x16
    2bfe:	3f 8b       	std	Y+23, r19	; 0x17
    2c00:	48 8f       	std	Y+24, r20	; 0x18
    2c02:	59 8f       	std	Y+25, r21	; 0x19
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    2c04:	20 91 86 29 	lds	r18, 0x2986
    2c08:	30 91 87 29 	lds	r19, 0x2987
    2c0c:	40 91 88 29 	lds	r20, 0x2988
    2c10:	50 91 89 29 	lds	r21, 0x2989
    2c14:	2a 8f       	std	Y+26, r18	; 0x1a
    2c16:	3b 8f       	std	Y+27, r19	; 0x1b
    2c18:	4c 8f       	std	Y+28, r20	; 0x1c
    2c1a:	5d 8f       	std	Y+29, r21	; 0x1d
    2c1c:	20 91 e9 29 	lds	r18, 0x29E9
    2c20:	30 91 ea 29 	lds	r19, 0x29EA
    2c24:	40 91 eb 29 	lds	r20, 0x29EB
    2c28:	50 91 ec 29 	lds	r21, 0x29EC
    2c2c:	2e 8f       	std	Y+30, r18	; 0x1e
    2c2e:	3f 8f       	std	Y+31, r19	; 0x1f
    2c30:	48 a3       	std	Y+32, r20	; 0x20
    2c32:	59 a3       	std	Y+33, r21	; 0x21
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    2c34:	30 91 96 29 	lds	r19, 0x2996
    2c38:	c0 56       	subi	r28, 0x60	; 96
    2c3a:	df 4f       	sbci	r29, 0xFF	; 255
    2c3c:	38 83       	st	Y, r19
    2c3e:	c0 5a       	subi	r28, 0xA0	; 160
    2c40:	d0 40       	sbci	r29, 0x00	; 0
    2c42:	40 91 97 29 	lds	r20, 0x2997
    2c46:	cf 55       	subi	r28, 0x5F	; 95
    2c48:	df 4f       	sbci	r29, 0xFF	; 255
    2c4a:	48 83       	st	Y, r20
    2c4c:	c1 5a       	subi	r28, 0xA1	; 161
    2c4e:	d0 40       	sbci	r29, 0x00	; 0
    2c50:	50 91 98 29 	lds	r21, 0x2998
    2c54:	ce 55       	subi	r28, 0x5E	; 94
    2c56:	df 4f       	sbci	r29, 0xFF	; 255
    2c58:	58 83       	st	Y, r21
    2c5a:	c2 5a       	subi	r28, 0xA2	; 162
    2c5c:	d0 40       	sbci	r29, 0x00	; 0
    2c5e:	e0 91 99 29 	lds	r30, 0x2999
    2c62:	cd 55       	subi	r28, 0x5D	; 93
    2c64:	df 4f       	sbci	r29, 0xFF	; 255
    2c66:	e8 83       	st	Y, r30
    2c68:	c3 5a       	subi	r28, 0xA3	; 163
    2c6a:	d0 40       	sbci	r29, 0x00	; 0
    2c6c:	f0 91 9a 29 	lds	r31, 0x299A
    2c70:	cc 55       	subi	r28, 0x5C	; 92
    2c72:	df 4f       	sbci	r29, 0xFF	; 255
    2c74:	f8 83       	st	Y, r31
    2c76:	c4 5a       	subi	r28, 0xA4	; 164
    2c78:	d0 40       	sbci	r29, 0x00	; 0
    2c7a:	20 91 9b 29 	lds	r18, 0x299B
    2c7e:	cb 55       	subi	r28, 0x5B	; 91
    2c80:	df 4f       	sbci	r29, 0xFF	; 255
    2c82:	28 83       	st	Y, r18
    2c84:	c5 5a       	subi	r28, 0xA5	; 165
    2c86:	d0 40       	sbci	r29, 0x00	; 0
    2c88:	30 91 9c 29 	lds	r19, 0x299C
    2c8c:	ca 55       	subi	r28, 0x5A	; 90
    2c8e:	df 4f       	sbci	r29, 0xFF	; 255
    2c90:	38 83       	st	Y, r19
    2c92:	c6 5a       	subi	r28, 0xA6	; 166
    2c94:	d0 40       	sbci	r29, 0x00	; 0
    2c96:	40 91 9d 29 	lds	r20, 0x299D
    2c9a:	c9 55       	subi	r28, 0x59	; 89
    2c9c:	df 4f       	sbci	r29, 0xFF	; 255
    2c9e:	48 83       	st	Y, r20
    2ca0:	c7 5a       	subi	r28, 0xA7	; 167
    2ca2:	d0 40       	sbci	r29, 0x00	; 0
    2ca4:	20 91 e1 29 	lds	r18, 0x29E1
    2ca8:	30 91 e2 29 	lds	r19, 0x29E2
    2cac:	40 91 e3 29 	lds	r20, 0x29E3
    2cb0:	50 91 e4 29 	lds	r21, 0x29E4
    2cb4:	2a a3       	std	Y+34, r18	; 0x22
    2cb6:	3b a3       	std	Y+35, r19	; 0x23
    2cb8:	4c a3       	std	Y+36, r20	; 0x24
    2cba:	5d a3       	std	Y+37, r21	; 0x25
    2cbc:	20 91 e5 29 	lds	r18, 0x29E5
    2cc0:	30 91 e6 29 	lds	r19, 0x29E6
    2cc4:	40 91 e7 29 	lds	r20, 0x29E7
    2cc8:	50 91 e8 29 	lds	r21, 0x29E8
    2ccc:	2e a3       	std	Y+38, r18	; 0x26
    2cce:	3f a3       	std	Y+39, r19	; 0x27
    2cd0:	48 a7       	std	Y+40, r20	; 0x28
    2cd2:	59 a7       	std	Y+41, r21	; 0x29
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    2cd4:	20 91 8e 29 	lds	r18, 0x298E
    2cd8:	30 91 8f 29 	lds	r19, 0x298F
    2cdc:	40 91 90 29 	lds	r20, 0x2990
    2ce0:	50 91 91 29 	lds	r21, 0x2991
    2ce4:	2a a7       	std	Y+42, r18	; 0x2a
    2ce6:	3b a7       	std	Y+43, r19	; 0x2b
    2ce8:	4c a7       	std	Y+44, r20	; 0x2c
    2cea:	5d a7       	std	Y+45, r21	; 0x2d
    2cec:	20 91 e1 29 	lds	r18, 0x29E1
    2cf0:	30 91 e2 29 	lds	r19, 0x29E2
    2cf4:	40 91 e3 29 	lds	r20, 0x29E3
    2cf8:	50 91 e4 29 	lds	r21, 0x29E4
    2cfc:	2e a7       	std	Y+46, r18	; 0x2e
    2cfe:	3f a7       	std	Y+47, r19	; 0x2f
    2d00:	48 ab       	std	Y+48, r20	; 0x30
    2d02:	59 ab       	std	Y+49, r21	; 0x31
    2d04:	20 91 e5 29 	lds	r18, 0x29E5
    2d08:	30 91 e6 29 	lds	r19, 0x29E6
    2d0c:	40 91 e7 29 	lds	r20, 0x29E7
    2d10:	50 91 e8 29 	lds	r21, 0x29E8
    2d14:	2a ab       	std	Y+50, r18	; 0x32
    2d16:	3b ab       	std	Y+51, r19	; 0x33
    2d18:	4c ab       	std	Y+52, r20	; 0x34
    2d1a:	5d ab       	std	Y+53, r21	; 0x35
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    2d1c:	20 91 82 29 	lds	r18, 0x2982
    2d20:	30 91 83 29 	lds	r19, 0x2983
    2d24:	40 91 84 29 	lds	r20, 0x2984
    2d28:	50 91 85 29 	lds	r21, 0x2985
    2d2c:	2e ab       	std	Y+54, r18	; 0x36
    2d2e:	3f ab       	std	Y+55, r19	; 0x37
    2d30:	48 af       	std	Y+56, r20	; 0x38
    2d32:	59 af       	std	Y+57, r21	; 0x39
    2d34:	20 91 e5 29 	lds	r18, 0x29E5
    2d38:	30 91 e6 29 	lds	r19, 0x29E6
    2d3c:	40 91 e7 29 	lds	r20, 0x29E7
    2d40:	50 91 e8 29 	lds	r21, 0x29E8
    2d44:	2a af       	std	Y+58, r18	; 0x3a
    2d46:	3b af       	std	Y+59, r19	; 0x3b
    2d48:	4c af       	std	Y+60, r20	; 0x3c
    2d4a:	5d af       	std	Y+61, r21	; 0x3d
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    2d4c:	20 91 7e 29 	lds	r18, 0x297E
    2d50:	30 91 7f 29 	lds	r19, 0x297F
    2d54:	40 91 80 29 	lds	r20, 0x2980
    2d58:	50 91 81 29 	lds	r21, 0x2981
    2d5c:	22 96       	adiw	r28, 0x02	; 2
    2d5e:	2c af       	std	Y+60, r18	; 0x3c
    2d60:	3d af       	std	Y+61, r19	; 0x3d
    2d62:	4e af       	std	Y+62, r20	; 0x3e
    2d64:	5f af       	std	Y+63, r21	; 0x3f
    2d66:	22 97       	sbiw	r28, 0x02	; 2
    2d68:	20 91 e1 29 	lds	r18, 0x29E1
    2d6c:	30 91 e2 29 	lds	r19, 0x29E2
    2d70:	40 91 e3 29 	lds	r20, 0x29E3
    2d74:	50 91 e4 29 	lds	r21, 0x29E4
    2d78:	26 96       	adiw	r28, 0x06	; 6
    2d7a:	2c af       	std	Y+60, r18	; 0x3c
    2d7c:	3d af       	std	Y+61, r19	; 0x3d
    2d7e:	4e af       	std	Y+62, r20	; 0x3e
    2d80:	5f af       	std	Y+63, r21	; 0x3f
    2d82:	26 97       	sbiw	r28, 0x06	; 6
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
    2d84:	30 91 6d 29 	lds	r19, 0x296D
    2d88:	c8 55       	subi	r28, 0x58	; 88
    2d8a:	df 4f       	sbci	r29, 0xFF	; 255
    2d8c:	38 83       	st	Y, r19
    2d8e:	c8 5a       	subi	r28, 0xA8	; 168
    2d90:	d0 40       	sbci	r29, 0x00	; 0
    2d92:	40 91 6e 29 	lds	r20, 0x296E
    2d96:	c7 55       	subi	r28, 0x57	; 87
    2d98:	df 4f       	sbci	r29, 0xFF	; 255
    2d9a:	48 83       	st	Y, r20
    2d9c:	c9 5a       	subi	r28, 0xA9	; 169
    2d9e:	d0 40       	sbci	r29, 0x00	; 0
    2da0:	50 91 6f 29 	lds	r21, 0x296F
    2da4:	c6 55       	subi	r28, 0x56	; 86
    2da6:	df 4f       	sbci	r29, 0xFF	; 255
    2da8:	58 83       	st	Y, r21
    2daa:	ca 5a       	subi	r28, 0xAA	; 170
    2dac:	d0 40       	sbci	r29, 0x00	; 0
    2dae:	e0 91 70 29 	lds	r30, 0x2970
    2db2:	c5 55       	subi	r28, 0x55	; 85
    2db4:	df 4f       	sbci	r29, 0xFF	; 255
    2db6:	e8 83       	st	Y, r30
    2db8:	cb 5a       	subi	r28, 0xAB	; 171
    2dba:	d0 40       	sbci	r29, 0x00	; 0
    2dbc:	f0 91 71 29 	lds	r31, 0x2971
    2dc0:	c4 55       	subi	r28, 0x54	; 84
    2dc2:	df 4f       	sbci	r29, 0xFF	; 255
    2dc4:	f8 83       	st	Y, r31
    2dc6:	cc 5a       	subi	r28, 0xAC	; 172
    2dc8:	d0 40       	sbci	r29, 0x00	; 0
    2dca:	20 91 72 29 	lds	r18, 0x2972
    2dce:	c3 55       	subi	r28, 0x53	; 83
    2dd0:	df 4f       	sbci	r29, 0xFF	; 255
    2dd2:	28 83       	st	Y, r18
    2dd4:	cd 5a       	subi	r28, 0xAD	; 173
    2dd6:	d0 40       	sbci	r29, 0x00	; 0
    2dd8:	30 91 73 29 	lds	r19, 0x2973
    2ddc:	c2 55       	subi	r28, 0x52	; 82
    2dde:	df 4f       	sbci	r29, 0xFF	; 255
    2de0:	38 83       	st	Y, r19
    2de2:	ce 5a       	subi	r28, 0xAE	; 174
    2de4:	d0 40       	sbci	r29, 0x00	; 0
    2de6:	40 91 74 29 	lds	r20, 0x2974
    2dea:	c1 55       	subi	r28, 0x51	; 81
    2dec:	df 4f       	sbci	r29, 0xFF	; 255
    2dee:	48 83       	st	Y, r20
    2df0:	cf 5a       	subi	r28, 0xAF	; 175
    2df2:	d0 40       	sbci	r29, 0x00	; 0
    2df4:	20 91 d1 29 	lds	r18, 0x29D1
    2df8:	30 91 d2 29 	lds	r19, 0x29D2
    2dfc:	40 91 d3 29 	lds	r20, 0x29D3
    2e00:	50 91 d4 29 	lds	r21, 0x29D4
    2e04:	2a 96       	adiw	r28, 0x0a	; 10
    2e06:	2c af       	std	Y+60, r18	; 0x3c
    2e08:	3d af       	std	Y+61, r19	; 0x3d
    2e0a:	4e af       	std	Y+62, r20	; 0x3e
    2e0c:	5f af       	std	Y+63, r21	; 0x3f
    2e0e:	2a 97       	sbiw	r28, 0x0a	; 10
    2e10:	20 91 d5 29 	lds	r18, 0x29D5
    2e14:	30 91 d6 29 	lds	r19, 0x29D6
    2e18:	40 91 d7 29 	lds	r20, 0x29D7
    2e1c:	50 91 d8 29 	lds	r21, 0x29D8
    2e20:	2e 96       	adiw	r28, 0x0e	; 14
    2e22:	2c af       	std	Y+60, r18	; 0x3c
    2e24:	3d af       	std	Y+61, r19	; 0x3d
    2e26:	4e af       	std	Y+62, r20	; 0x3e
    2e28:	5f af       	std	Y+63, r21	; 0x3f
    2e2a:	2e 97       	sbiw	r28, 0x0e	; 14
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
    2e2c:	20 91 61 29 	lds	r18, 0x2961
    2e30:	30 91 62 29 	lds	r19, 0x2962
    2e34:	40 91 63 29 	lds	r20, 0x2963
    2e38:	50 91 64 29 	lds	r21, 0x2964
    2e3c:	62 96       	adiw	r28, 0x12	; 18
    2e3e:	2c af       	std	Y+60, r18	; 0x3c
    2e40:	3d af       	std	Y+61, r19	; 0x3d
    2e42:	4e af       	std	Y+62, r20	; 0x3e
    2e44:	5f af       	std	Y+63, r21	; 0x3f
    2e46:	62 97       	sbiw	r28, 0x12	; 18
    2e48:	20 91 d1 29 	lds	r18, 0x29D1
    2e4c:	30 91 d2 29 	lds	r19, 0x29D2
    2e50:	40 91 d3 29 	lds	r20, 0x29D3
    2e54:	50 91 d4 29 	lds	r21, 0x29D4
    2e58:	66 96       	adiw	r28, 0x16	; 22
    2e5a:	2c af       	std	Y+60, r18	; 0x3c
    2e5c:	3d af       	std	Y+61, r19	; 0x3d
    2e5e:	4e af       	std	Y+62, r20	; 0x3e
    2e60:	5f af       	std	Y+63, r21	; 0x3f
    2e62:	66 97       	sbiw	r28, 0x16	; 22
    2e64:	20 91 d5 29 	lds	r18, 0x29D5
    2e68:	30 91 d6 29 	lds	r19, 0x29D6
    2e6c:	40 91 d7 29 	lds	r20, 0x29D7
    2e70:	50 91 d8 29 	lds	r21, 0x29D8
    2e74:	6a 96       	adiw	r28, 0x1a	; 26
    2e76:	2c af       	std	Y+60, r18	; 0x3c
    2e78:	3d af       	std	Y+61, r19	; 0x3d
    2e7a:	4e af       	std	Y+62, r20	; 0x3e
    2e7c:	5f af       	std	Y+63, r21	; 0x3f
    2e7e:	6a 97       	sbiw	r28, 0x1a	; 26
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
    2e80:	20 91 59 29 	lds	r18, 0x2959
    2e84:	30 91 5a 29 	lds	r19, 0x295A
    2e88:	40 91 5b 29 	lds	r20, 0x295B
    2e8c:	50 91 5c 29 	lds	r21, 0x295C
    2e90:	6e 96       	adiw	r28, 0x1e	; 30
    2e92:	2c af       	std	Y+60, r18	; 0x3c
    2e94:	3d af       	std	Y+61, r19	; 0x3d
    2e96:	4e af       	std	Y+62, r20	; 0x3e
    2e98:	5f af       	std	Y+63, r21	; 0x3f
    2e9a:	6e 97       	sbiw	r28, 0x1e	; 30
    2e9c:	20 91 d5 29 	lds	r18, 0x29D5
    2ea0:	30 91 d6 29 	lds	r19, 0x29D6
    2ea4:	40 91 d7 29 	lds	r20, 0x29D7
    2ea8:	50 91 d8 29 	lds	r21, 0x29D8
    2eac:	a2 96       	adiw	r28, 0x22	; 34
    2eae:	2c af       	std	Y+60, r18	; 0x3c
    2eb0:	3d af       	std	Y+61, r19	; 0x3d
    2eb2:	4e af       	std	Y+62, r20	; 0x3e
    2eb4:	5f af       	std	Y+63, r21	; 0x3f
    2eb6:	a2 97       	sbiw	r28, 0x22	; 34
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
    2eb8:	20 91 55 29 	lds	r18, 0x2955
    2ebc:	30 91 56 29 	lds	r19, 0x2956
    2ec0:	40 91 57 29 	lds	r20, 0x2957
    2ec4:	50 91 58 29 	lds	r21, 0x2958
    2ec8:	a6 96       	adiw	r28, 0x26	; 38
    2eca:	2c af       	std	Y+60, r18	; 0x3c
    2ecc:	3d af       	std	Y+61, r19	; 0x3d
    2ece:	4e af       	std	Y+62, r20	; 0x3e
    2ed0:	5f af       	std	Y+63, r21	; 0x3f
    2ed2:	a6 97       	sbiw	r28, 0x26	; 38
    2ed4:	20 91 d1 29 	lds	r18, 0x29D1
    2ed8:	30 91 d2 29 	lds	r19, 0x29D2
    2edc:	40 91 d3 29 	lds	r20, 0x29D3
    2ee0:	50 91 d4 29 	lds	r21, 0x29D4
    2ee4:	aa 96       	adiw	r28, 0x2a	; 42
    2ee6:	2c af       	std	Y+60, r18	; 0x3c
    2ee8:	3d af       	std	Y+61, r19	; 0x3d
    2eea:	4e af       	std	Y+62, r20	; 0x3e
    2eec:	5f af       	std	Y+63, r21	; 0x3f
    2eee:	aa 97       	sbiw	r28, 0x2a	; 42
	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
    2ef0:	30 91 65 29 	lds	r19, 0x2965
    2ef4:	c0 55       	subi	r28, 0x50	; 80
    2ef6:	df 4f       	sbci	r29, 0xFF	; 255
    2ef8:	38 83       	st	Y, r19
    2efa:	c0 5b       	subi	r28, 0xB0	; 176
    2efc:	d0 40       	sbci	r29, 0x00	; 0
    2efe:	40 91 66 29 	lds	r20, 0x2966
    2f02:	cf 54       	subi	r28, 0x4F	; 79
    2f04:	df 4f       	sbci	r29, 0xFF	; 255
    2f06:	48 83       	st	Y, r20
    2f08:	c1 5b       	subi	r28, 0xB1	; 177
    2f0a:	d0 40       	sbci	r29, 0x00	; 0
    2f0c:	50 91 67 29 	lds	r21, 0x2967
    2f10:	ce 54       	subi	r28, 0x4E	; 78
    2f12:	df 4f       	sbci	r29, 0xFF	; 255
    2f14:	58 83       	st	Y, r21
    2f16:	c2 5b       	subi	r28, 0xB2	; 178
    2f18:	d0 40       	sbci	r29, 0x00	; 0
    2f1a:	e0 91 68 29 	lds	r30, 0x2968
    2f1e:	cd 54       	subi	r28, 0x4D	; 77
    2f20:	df 4f       	sbci	r29, 0xFF	; 255
    2f22:	e8 83       	st	Y, r30
    2f24:	c3 5b       	subi	r28, 0xB3	; 179
    2f26:	d0 40       	sbci	r29, 0x00	; 0
    2f28:	f0 91 69 29 	lds	r31, 0x2969
    2f2c:	cc 54       	subi	r28, 0x4C	; 76
    2f2e:	df 4f       	sbci	r29, 0xFF	; 255
    2f30:	f8 83       	st	Y, r31
    2f32:	c4 5b       	subi	r28, 0xB4	; 180
    2f34:	d0 40       	sbci	r29, 0x00	; 0
    2f36:	20 91 6a 29 	lds	r18, 0x296A
    2f3a:	cb 54       	subi	r28, 0x4B	; 75
    2f3c:	df 4f       	sbci	r29, 0xFF	; 255
    2f3e:	28 83       	st	Y, r18
    2f40:	c5 5b       	subi	r28, 0xB5	; 181
    2f42:	d0 40       	sbci	r29, 0x00	; 0
    2f44:	30 91 6b 29 	lds	r19, 0x296B
    2f48:	ca 54       	subi	r28, 0x4A	; 74
    2f4a:	df 4f       	sbci	r29, 0xFF	; 255
    2f4c:	38 83       	st	Y, r19
    2f4e:	c6 5b       	subi	r28, 0xB6	; 182
    2f50:	d0 40       	sbci	r29, 0x00	; 0
    2f52:	40 91 6c 29 	lds	r20, 0x296C
    2f56:	c9 54       	subi	r28, 0x49	; 73
    2f58:	df 4f       	sbci	r29, 0xFF	; 255
    2f5a:	48 83       	st	Y, r20
    2f5c:	c7 5b       	subi	r28, 0xB7	; 183
    2f5e:	d0 40       	sbci	r29, 0x00	; 0
    2f60:	20 91 c9 29 	lds	r18, 0x29C9
    2f64:	30 91 ca 29 	lds	r19, 0x29CA
    2f68:	40 91 cb 29 	lds	r20, 0x29CB
    2f6c:	50 91 cc 29 	lds	r21, 0x29CC
    2f70:	ae 96       	adiw	r28, 0x2e	; 46
    2f72:	2c af       	std	Y+60, r18	; 0x3c
    2f74:	3d af       	std	Y+61, r19	; 0x3d
    2f76:	4e af       	std	Y+62, r20	; 0x3e
    2f78:	5f af       	std	Y+63, r21	; 0x3f
    2f7a:	ae 97       	sbiw	r28, 0x2e	; 46
    2f7c:	20 91 cd 29 	lds	r18, 0x29CD
    2f80:	30 91 ce 29 	lds	r19, 0x29CE
    2f84:	40 91 cf 29 	lds	r20, 0x29CF
    2f88:	50 91 d0 29 	lds	r21, 0x29D0
    2f8c:	e2 96       	adiw	r28, 0x32	; 50
    2f8e:	2c af       	std	Y+60, r18	; 0x3c
    2f90:	3d af       	std	Y+61, r19	; 0x3d
    2f92:	4e af       	std	Y+62, r20	; 0x3e
    2f94:	5f af       	std	Y+63, r21	; 0x3f
    2f96:	e2 97       	sbiw	r28, 0x32	; 50

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
    2f98:	20 91 5d 29 	lds	r18, 0x295D
    2f9c:	30 91 5e 29 	lds	r19, 0x295E
    2fa0:	40 91 5f 29 	lds	r20, 0x295F
    2fa4:	50 91 60 29 	lds	r21, 0x2960
    2fa8:	e6 96       	adiw	r28, 0x36	; 54
    2faa:	2c af       	std	Y+60, r18	; 0x3c
    2fac:	3d af       	std	Y+61, r19	; 0x3d
    2fae:	4e af       	std	Y+62, r20	; 0x3e
    2fb0:	5f af       	std	Y+63, r21	; 0x3f
    2fb2:	e6 97       	sbiw	r28, 0x36	; 54
    2fb4:	20 91 c9 29 	lds	r18, 0x29C9
    2fb8:	30 91 ca 29 	lds	r19, 0x29CA
    2fbc:	40 91 cb 29 	lds	r20, 0x29CB
    2fc0:	50 91 cc 29 	lds	r21, 0x29CC
    2fc4:	ea 96       	adiw	r28, 0x3a	; 58
    2fc6:	2c af       	std	Y+60, r18	; 0x3c
    2fc8:	3d af       	std	Y+61, r19	; 0x3d
    2fca:	4e af       	std	Y+62, r20	; 0x3e
    2fcc:	5f af       	std	Y+63, r21	; 0x3f
    2fce:	ea 97       	sbiw	r28, 0x3a	; 58
    2fd0:	20 91 cd 29 	lds	r18, 0x29CD
    2fd4:	30 91 ce 29 	lds	r19, 0x29CE
    2fd8:	40 91 cf 29 	lds	r20, 0x29CF
    2fdc:	50 91 d0 29 	lds	r21, 0x29D0
    2fe0:	ee 96       	adiw	r28, 0x3e	; 62
    2fe2:	2c af       	std	Y+60, r18	; 0x3c
    2fe4:	3d af       	std	Y+61, r19	; 0x3d
    2fe6:	4e af       	std	Y+62, r20	; 0x3e
    2fe8:	5f af       	std	Y+63, r21	; 0x3f
    2fea:	ee 97       	sbiw	r28, 0x3e	; 62
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
    2fec:	20 91 51 29 	lds	r18, 0x2951
    2ff0:	30 91 52 29 	lds	r19, 0x2952
    2ff4:	40 91 53 29 	lds	r20, 0x2953
    2ff8:	50 91 54 29 	lds	r21, 0x2954
    2ffc:	c2 58       	subi	r28, 0x82	; 130
    2ffe:	df 4f       	sbci	r29, 0xFF	; 255
    3000:	28 83       	st	Y, r18
    3002:	39 83       	std	Y+1, r19	; 0x01
    3004:	4a 83       	std	Y+2, r20	; 0x02
    3006:	5b 83       	std	Y+3, r21	; 0x03
    3008:	ce 57       	subi	r28, 0x7E	; 126
    300a:	d0 40       	sbci	r29, 0x00	; 0
    300c:	20 91 cd 29 	lds	r18, 0x29CD
    3010:	30 91 ce 29 	lds	r19, 0x29CE
    3014:	40 91 cf 29 	lds	r20, 0x29CF
    3018:	50 91 d0 29 	lds	r21, 0x29D0
    301c:	ce 57       	subi	r28, 0x7E	; 126
    301e:	df 4f       	sbci	r29, 0xFF	; 255
    3020:	28 83       	st	Y, r18
    3022:	39 83       	std	Y+1, r19	; 0x01
    3024:	4a 83       	std	Y+2, r20	; 0x02
    3026:	5b 83       	std	Y+3, r21	; 0x03
    3028:	c2 58       	subi	r28, 0x82	; 130
    302a:	d0 40       	sbci	r29, 0x00	; 0
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
    302c:	20 91 4d 29 	lds	r18, 0x294D
    3030:	30 91 4e 29 	lds	r19, 0x294E
    3034:	40 91 4f 29 	lds	r20, 0x294F
    3038:	50 91 50 29 	lds	r21, 0x2950
    303c:	ca 57       	subi	r28, 0x7A	; 122
    303e:	df 4f       	sbci	r29, 0xFF	; 255
    3040:	28 83       	st	Y, r18
    3042:	39 83       	std	Y+1, r19	; 0x01
    3044:	4a 83       	std	Y+2, r20	; 0x02
    3046:	5b 83       	std	Y+3, r21	; 0x03
    3048:	c6 58       	subi	r28, 0x86	; 134
    304a:	d0 40       	sbci	r29, 0x00	; 0
    304c:	20 91 c9 29 	lds	r18, 0x29C9
    3050:	30 91 ca 29 	lds	r19, 0x29CA
    3054:	40 91 cb 29 	lds	r20, 0x29CB
    3058:	50 91 cc 29 	lds	r21, 0x29CC
    305c:	c6 57       	subi	r28, 0x76	; 118
    305e:	df 4f       	sbci	r29, 0xFF	; 255
    3060:	28 83       	st	Y, r18
    3062:	39 83       	std	Y+1, r19	; 0x01
    3064:	4a 83       	std	Y+2, r20	; 0x02
    3066:	5b 83       	std	Y+3, r21	; 0x03
    3068:	ca 58       	subi	r28, 0x8A	; 138
    306a:	d0 40       	sbci	r29, 0x00	; 0
void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    306c:	20 91 49 29 	lds	r18, 0x2949
    3070:	30 91 4a 29 	lds	r19, 0x294A
    3074:	40 91 4b 29 	lds	r20, 0x294B
    3078:	50 91 4c 29 	lds	r21, 0x294C
    307c:	c2 57       	subi	r28, 0x72	; 114
    307e:	df 4f       	sbci	r29, 0xFF	; 255
    3080:	28 83       	st	Y, r18
    3082:	39 83       	std	Y+1, r19	; 0x01
    3084:	4a 83       	std	Y+2, r20	; 0x02
    3086:	5b 83       	std	Y+3, r21	; 0x03
    3088:	ce 58       	subi	r28, 0x8E	; 142
    308a:	d0 40       	sbci	r29, 0x00	; 0

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    308c:	3a 81       	ldd	r19, Y+2	; 0x02
    308e:	3f 93       	push	r19
    3090:	49 81       	ldd	r20, Y+1	; 0x01
    3092:	4f 93       	push	r20
    3094:	2f 92       	push	r2
    3096:	0f 93       	push	r16
    3098:	1f 92       	push	r1
    309a:	5b 81       	ldd	r21, Y+3	; 0x03
    309c:	5f 93       	push	r21
    309e:	c3 54       	subi	r28, 0x43	; 67
    30a0:	df 4f       	sbci	r29, 0xFF	; 255
    30a2:	e8 81       	ld	r30, Y
    30a4:	cd 5b       	subi	r28, 0xBD	; 189
    30a6:	d0 40       	sbci	r29, 0x00	; 0
    30a8:	ef 93       	push	r30
    30aa:	c4 54       	subi	r28, 0x44	; 68
    30ac:	df 4f       	sbci	r29, 0xFF	; 255
    30ae:	f8 81       	ld	r31, Y
    30b0:	cc 5b       	subi	r28, 0xBC	; 188
    30b2:	d0 40       	sbci	r29, 0x00	; 0
    30b4:	ff 93       	push	r31
    30b6:	c5 54       	subi	r28, 0x45	; 69
    30b8:	df 4f       	sbci	r29, 0xFF	; 255
    30ba:	28 81       	ld	r18, Y
    30bc:	cb 5b       	subi	r28, 0xBB	; 187
    30be:	d0 40       	sbci	r29, 0x00	; 0
    30c0:	2f 93       	push	r18
    30c2:	c6 54       	subi	r28, 0x46	; 70
    30c4:	df 4f       	sbci	r29, 0xFF	; 255
    30c6:	38 81       	ld	r19, Y
    30c8:	ca 5b       	subi	r28, 0xBA	; 186
    30ca:	d0 40       	sbci	r29, 0x00	; 0
    30cc:	3f 93       	push	r19
    30ce:	cd 56       	subi	r28, 0x6D	; 109
    30d0:	df 4f       	sbci	r29, 0xFF	; 255
    30d2:	48 81       	ld	r20, Y
    30d4:	c3 59       	subi	r28, 0x93	; 147
    30d6:	d0 40       	sbci	r29, 0x00	; 0
    30d8:	4f 93       	push	r20
    30da:	ce 56       	subi	r28, 0x6E	; 110
    30dc:	df 4f       	sbci	r29, 0xFF	; 255
    30de:	58 81       	ld	r21, Y
    30e0:	c2 59       	subi	r28, 0x92	; 146
    30e2:	d0 40       	sbci	r29, 0x00	; 0
    30e4:	5f 93       	push	r21
    30e6:	cf 53       	subi	r28, 0x3F	; 63
    30e8:	df 4f       	sbci	r29, 0xFF	; 255
    30ea:	e8 81       	ld	r30, Y
    30ec:	c1 5c       	subi	r28, 0xC1	; 193
    30ee:	d0 40       	sbci	r29, 0x00	; 0
    30f0:	ef 93       	push	r30
    30f2:	c0 54       	subi	r28, 0x40	; 64
    30f4:	df 4f       	sbci	r29, 0xFF	; 255
    30f6:	f8 81       	ld	r31, Y
    30f8:	c0 5c       	subi	r28, 0xC0	; 192
    30fa:	d0 40       	sbci	r29, 0x00	; 0
    30fc:	ff 93       	push	r31
    30fe:	c1 54       	subi	r28, 0x41	; 65
    3100:	df 4f       	sbci	r29, 0xFF	; 255
    3102:	28 81       	ld	r18, Y
    3104:	cf 5b       	subi	r28, 0xBF	; 191
    3106:	d0 40       	sbci	r29, 0x00	; 0
    3108:	2f 93       	push	r18
    310a:	c2 54       	subi	r28, 0x42	; 66
    310c:	df 4f       	sbci	r29, 0xFF	; 255
    310e:	38 81       	ld	r19, Y
    3110:	ce 5b       	subi	r28, 0xBE	; 190
    3112:	d0 40       	sbci	r29, 0x00	; 0
    3114:	3f 93       	push	r19
    3116:	cb 56       	subi	r28, 0x6B	; 107
    3118:	df 4f       	sbci	r29, 0xFF	; 255
    311a:	48 81       	ld	r20, Y
    311c:	c5 59       	subi	r28, 0x95	; 149
    311e:	d0 40       	sbci	r29, 0x00	; 0
    3120:	4f 93       	push	r20
    3122:	cc 56       	subi	r28, 0x6C	; 108
    3124:	df 4f       	sbci	r29, 0xFF	; 255
    3126:	58 81       	ld	r21, Y
    3128:	c4 59       	subi	r28, 0x94	; 148
    312a:	d0 40       	sbci	r29, 0x00	; 0
    312c:	5f 93       	push	r21
    312e:	cb 53       	subi	r28, 0x3B	; 59
    3130:	df 4f       	sbci	r29, 0xFF	; 255
    3132:	e8 81       	ld	r30, Y
    3134:	c5 5c       	subi	r28, 0xC5	; 197
    3136:	d0 40       	sbci	r29, 0x00	; 0
    3138:	ef 93       	push	r30
    313a:	cc 53       	subi	r28, 0x3C	; 60
    313c:	df 4f       	sbci	r29, 0xFF	; 255
    313e:	f8 81       	ld	r31, Y
    3140:	c4 5c       	subi	r28, 0xC4	; 196
    3142:	d0 40       	sbci	r29, 0x00	; 0
    3144:	ff 93       	push	r31
    3146:	cd 53       	subi	r28, 0x3D	; 61
    3148:	df 4f       	sbci	r29, 0xFF	; 255
    314a:	28 81       	ld	r18, Y
    314c:	c3 5c       	subi	r28, 0xC3	; 195
    314e:	d0 40       	sbci	r29, 0x00	; 0
    3150:	2f 93       	push	r18
    3152:	ce 53       	subi	r28, 0x3E	; 62
    3154:	df 4f       	sbci	r29, 0xFF	; 255
    3156:	38 81       	ld	r19, Y
    3158:	c2 5c       	subi	r28, 0xC2	; 194
    315a:	d0 40       	sbci	r29, 0x00	; 0
    315c:	3f 93       	push	r19
    315e:	c9 56       	subi	r28, 0x69	; 105
    3160:	df 4f       	sbci	r29, 0xFF	; 255
    3162:	48 81       	ld	r20, Y
    3164:	c7 59       	subi	r28, 0x97	; 151
    3166:	d0 40       	sbci	r29, 0x00	; 0
    3168:	4f 93       	push	r20
    316a:	ca 56       	subi	r28, 0x6A	; 106
    316c:	df 4f       	sbci	r29, 0xFF	; 255
    316e:	58 81       	ld	r21, Y
    3170:	c6 59       	subi	r28, 0x96	; 150
    3172:	d0 40       	sbci	r29, 0x00	; 0
    3174:	5f 93       	push	r21
    3176:	c7 53       	subi	r28, 0x37	; 55
    3178:	df 4f       	sbci	r29, 0xFF	; 255
    317a:	e8 81       	ld	r30, Y
    317c:	c9 5c       	subi	r28, 0xC9	; 201
    317e:	d0 40       	sbci	r29, 0x00	; 0
    3180:	ef 93       	push	r30
    3182:	c8 53       	subi	r28, 0x38	; 56
    3184:	df 4f       	sbci	r29, 0xFF	; 255
    3186:	f8 81       	ld	r31, Y
    3188:	c8 5c       	subi	r28, 0xC8	; 200
    318a:	d0 40       	sbci	r29, 0x00	; 0
    318c:	ff 93       	push	r31
    318e:	c9 53       	subi	r28, 0x39	; 57
    3190:	df 4f       	sbci	r29, 0xFF	; 255
    3192:	28 81       	ld	r18, Y
    3194:	c7 5c       	subi	r28, 0xC7	; 199
    3196:	d0 40       	sbci	r29, 0x00	; 0
    3198:	2f 93       	push	r18
    319a:	ca 53       	subi	r28, 0x3A	; 58
    319c:	df 4f       	sbci	r29, 0xFF	; 255
    319e:	38 81       	ld	r19, Y
    31a0:	c6 5c       	subi	r28, 0xC6	; 198
    31a2:	d0 40       	sbci	r29, 0x00	; 0
    31a4:	3f 93       	push	r19
    31a6:	c6 53       	subi	r28, 0x36	; 54
    31a8:	df 4f       	sbci	r29, 0xFF	; 255
    31aa:	48 81       	ld	r20, Y
    31ac:	ca 5c       	subi	r28, 0xCA	; 202
    31ae:	d0 40       	sbci	r29, 0x00	; 0
    31b0:	4f 93       	push	r20
    31b2:	3f 92       	push	r3
    31b4:	1f 93       	push	r17
    31b6:	c5 53       	subi	r28, 0x35	; 53
    31b8:	df 4f       	sbci	r29, 0xFF	; 255
    31ba:	58 81       	ld	r21, Y
    31bc:	cb 5c       	subi	r28, 0xCB	; 203
    31be:	d0 40       	sbci	r29, 0x00	; 0
    31c0:	5f 93       	push	r21
    31c2:	bc 01       	movw	r22, r24
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    31cc:	23 e3       	ldi	r18, 0x33	; 51
    31ce:	33 e3       	ldi	r19, 0x33	; 51
    31d0:	43 e2       	ldi	r20, 0x23	; 35
    31d2:	54 e4       	ldi	r21, 0x44	; 68
    31d4:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    31d8:	9f 93       	push	r25
    31da:	8f 93       	push	r24
    31dc:	7f 93       	push	r23
    31de:	6f 93       	push	r22
    31e0:	ec 81       	ldd	r30, Y+4	; 0x04
    31e2:	fd 81       	ldd	r31, Y+5	; 0x05
    31e4:	bf 01       	movw	r22, r30
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    31ee:	27 e1       	ldi	r18, 0x17	; 23
    31f0:	37 eb       	ldi	r19, 0xB7	; 183
    31f2:	41 ed       	ldi	r20, 0xD1	; 209
    31f4:	5e e3       	ldi	r21, 0x3E	; 62
    31f6:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    31fa:	9f 93       	push	r25
    31fc:	8f 93       	push	r24
    31fe:	7f 93       	push	r23
    3200:	6f 93       	push	r22
    3202:	c7 01       	movw	r24, r14
    3204:	b6 01       	movw	r22, r12
    3206:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e2       	ldi	r20, 0x20	; 32
    3210:	59 e4       	ldi	r21, 0x49	; 73
    3212:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3216:	9f 93       	push	r25
    3218:	8f 93       	push	r24
    321a:	7f 93       	push	r23
    321c:	6f 93       	push	r22
    321e:	c8 56       	subi	r28, 0x68	; 104
    3220:	df 4f       	sbci	r29, 0xFF	; 255
    3222:	28 81       	ld	r18, Y
    3224:	c8 59       	subi	r28, 0x98	; 152
    3226:	d0 40       	sbci	r29, 0x00	; 0
    3228:	c7 56       	subi	r28, 0x67	; 103
    322a:	df 4f       	sbci	r29, 0xFF	; 255
    322c:	38 81       	ld	r19, Y
    322e:	c9 59       	subi	r28, 0x99	; 153
    3230:	d0 40       	sbci	r29, 0x00	; 0
    3232:	c6 56       	subi	r28, 0x66	; 102
    3234:	df 4f       	sbci	r29, 0xFF	; 255
    3236:	48 81       	ld	r20, Y
    3238:	ca 59       	subi	r28, 0x9A	; 154
    323a:	d0 40       	sbci	r29, 0x00	; 0
    323c:	c5 56       	subi	r28, 0x65	; 101
    323e:	df 4f       	sbci	r29, 0xFF	; 255
    3240:	58 81       	ld	r21, Y
    3242:	cb 59       	subi	r28, 0x9B	; 155
    3244:	d0 40       	sbci	r29, 0x00	; 0
    3246:	c4 56       	subi	r28, 0x64	; 100
    3248:	df 4f       	sbci	r29, 0xFF	; 255
    324a:	68 81       	ld	r22, Y
    324c:	cc 59       	subi	r28, 0x9C	; 156
    324e:	d0 40       	sbci	r29, 0x00	; 0
    3250:	c3 56       	subi	r28, 0x63	; 99
    3252:	df 4f       	sbci	r29, 0xFF	; 255
    3254:	78 81       	ld	r23, Y
    3256:	cd 59       	subi	r28, 0x9D	; 157
    3258:	d0 40       	sbci	r29, 0x00	; 0
    325a:	c2 56       	subi	r28, 0x62	; 98
    325c:	df 4f       	sbci	r29, 0xFF	; 255
    325e:	88 81       	ld	r24, Y
    3260:	ce 59       	subi	r28, 0x9E	; 158
    3262:	d0 40       	sbci	r29, 0x00	; 0
    3264:	c1 56       	subi	r28, 0x61	; 97
    3266:	df 4f       	sbci	r29, 0xFF	; 255
    3268:	98 81       	ld	r25, Y
    326a:	cf 59       	subi	r28, 0x9F	; 159
    326c:	d0 40       	sbci	r29, 0x00	; 0
    326e:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__floatdisf>
    3272:	6b 01       	movw	r12, r22
    3274:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e4       	ldi	r19, 0x40	; 64
    327a:	4c e9       	ldi	r20, 0x9C	; 156
    327c:	55 e4       	ldi	r21, 0x45	; 69
    327e:	c3 01       	movw	r24, r6
    3280:	b2 01       	movw	r22, r4
    3282:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3286:	a5 01       	movw	r20, r10
    3288:	94 01       	movw	r18, r8
    328a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    328e:	9b 01       	movw	r18, r22
    3290:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3292:	c7 01       	movw	r24, r14
    3294:	b6 01       	movw	r22, r12
    3296:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    329a:	9f 93       	push	r25
    329c:	8f 93       	push	r24
    329e:	7f 93       	push	r23
    32a0:	6f 93       	push	r22
    32a2:	6e 81       	ldd	r22, Y+6	; 0x06
    32a4:	7f 81       	ldd	r23, Y+7	; 0x07
    32a6:	88 85       	ldd	r24, Y+8	; 0x08
    32a8:	99 85       	ldd	r25, Y+9	; 0x09
    32aa:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    32ae:	6b 01       	movw	r12, r22
    32b0:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	40 e8       	ldi	r20, 0x80	; 128
    32b8:	53 e4       	ldi	r21, 0x43	; 67
    32ba:	6a 85       	ldd	r22, Y+10	; 0x0a
    32bc:	7b 85       	ldd	r23, Y+11	; 0x0b
    32be:	8c 85       	ldd	r24, Y+12	; 0x0c
    32c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    32c2:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    32c6:	2e 85       	ldd	r18, Y+14	; 0x0e
    32c8:	3f 85       	ldd	r19, Y+15	; 0x0f
    32ca:	48 89       	ldd	r20, Y+16	; 0x10
    32cc:	59 89       	ldd	r21, Y+17	; 0x11
    32ce:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    32d2:	9b 01       	movw	r18, r22
    32d4:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    32d6:	c7 01       	movw	r24, r14
    32d8:	b6 01       	movw	r22, r12
    32da:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    32de:	9f 93       	push	r25
    32e0:	8f 93       	push	r24
    32e2:	7f 93       	push	r23
    32e4:	6f 93       	push	r22
    32e6:	6a 89       	ldd	r22, Y+18	; 0x12
    32e8:	7b 89       	ldd	r23, Y+19	; 0x13
    32ea:	8c 89       	ldd	r24, Y+20	; 0x14
    32ec:	9d 89       	ldd	r25, Y+21	; 0x15
    32ee:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    32f2:	6b 01       	movw	r12, r22
    32f4:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e8       	ldi	r20, 0x80	; 128
    32fc:	57 e4       	ldi	r21, 0x47	; 71
    32fe:	6e 89       	ldd	r22, Y+22	; 0x16
    3300:	7f 89       	ldd	r23, Y+23	; 0x17
    3302:	88 8d       	ldd	r24, Y+24	; 0x18
    3304:	99 8d       	ldd	r25, Y+25	; 0x19
    3306:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    330a:	9b 01       	movw	r18, r22
    330c:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    330e:	c7 01       	movw	r24, r14
    3310:	b6 01       	movw	r22, r12
    3312:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3316:	9f 93       	push	r25
    3318:	8f 93       	push	r24
    331a:	7f 93       	push	r23
    331c:	6f 93       	push	r22
    331e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3320:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3322:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3324:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3326:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    332a:	6b 01       	movw	r12, r22
    332c:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e8       	ldi	r20, 0x80	; 128
    3334:	57 e4       	ldi	r21, 0x47	; 71
    3336:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3338:	7f 8d       	ldd	r23, Y+31	; 0x1f
    333a:	88 a1       	ldd	r24, Y+32	; 0x20
    333c:	99 a1       	ldd	r25, Y+33	; 0x21
    333e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3342:	9b 01       	movw	r18, r22
    3344:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3346:	c7 01       	movw	r24, r14
    3348:	b6 01       	movw	r22, r12
    334a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    334e:	9f 93       	push	r25
    3350:	8f 93       	push	r24
    3352:	7f 93       	push	r23
    3354:	6f 93       	push	r22
    3356:	c0 56       	subi	r28, 0x60	; 96
    3358:	df 4f       	sbci	r29, 0xFF	; 255
    335a:	28 81       	ld	r18, Y
    335c:	c0 5a       	subi	r28, 0xA0	; 160
    335e:	d0 40       	sbci	r29, 0x00	; 0
    3360:	cf 55       	subi	r28, 0x5F	; 95
    3362:	df 4f       	sbci	r29, 0xFF	; 255
    3364:	38 81       	ld	r19, Y
    3366:	c1 5a       	subi	r28, 0xA1	; 161
    3368:	d0 40       	sbci	r29, 0x00	; 0
    336a:	ce 55       	subi	r28, 0x5E	; 94
    336c:	df 4f       	sbci	r29, 0xFF	; 255
    336e:	48 81       	ld	r20, Y
    3370:	c2 5a       	subi	r28, 0xA2	; 162
    3372:	d0 40       	sbci	r29, 0x00	; 0
    3374:	cd 55       	subi	r28, 0x5D	; 93
    3376:	df 4f       	sbci	r29, 0xFF	; 255
    3378:	58 81       	ld	r21, Y
    337a:	c3 5a       	subi	r28, 0xA3	; 163
    337c:	d0 40       	sbci	r29, 0x00	; 0
    337e:	cc 55       	subi	r28, 0x5C	; 92
    3380:	df 4f       	sbci	r29, 0xFF	; 255
    3382:	68 81       	ld	r22, Y
    3384:	c4 5a       	subi	r28, 0xA4	; 164
    3386:	d0 40       	sbci	r29, 0x00	; 0
    3388:	cb 55       	subi	r28, 0x5B	; 91
    338a:	df 4f       	sbci	r29, 0xFF	; 255
    338c:	78 81       	ld	r23, Y
    338e:	c5 5a       	subi	r28, 0xA5	; 165
    3390:	d0 40       	sbci	r29, 0x00	; 0
    3392:	ca 55       	subi	r28, 0x5A	; 90
    3394:	df 4f       	sbci	r29, 0xFF	; 255
    3396:	88 81       	ld	r24, Y
    3398:	c6 5a       	subi	r28, 0xA6	; 166
    339a:	d0 40       	sbci	r29, 0x00	; 0
    339c:	c9 55       	subi	r28, 0x59	; 89
    339e:	df 4f       	sbci	r29, 0xFF	; 255
    33a0:	98 81       	ld	r25, Y
    33a2:	c7 5a       	subi	r28, 0xA7	; 167
    33a4:	d0 40       	sbci	r29, 0x00	; 0
    33a6:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__floatdisf>
    33aa:	6b 01       	movw	r12, r22
    33ac:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    33ae:	20 e0       	ldi	r18, 0x00	; 0
    33b0:	30 e4       	ldi	r19, 0x40	; 64
    33b2:	4c e9       	ldi	r20, 0x9C	; 156
    33b4:	55 e4       	ldi	r21, 0x45	; 69
    33b6:	6a a1       	ldd	r22, Y+34	; 0x22
    33b8:	7b a1       	ldd	r23, Y+35	; 0x23
    33ba:	8c a1       	ldd	r24, Y+36	; 0x24
    33bc:	9d a1       	ldd	r25, Y+37	; 0x25
    33be:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    33c2:	2e a1       	ldd	r18, Y+38	; 0x26
    33c4:	3f a1       	ldd	r19, Y+39	; 0x27
    33c6:	48 a5       	ldd	r20, Y+40	; 0x28
    33c8:	59 a5       	ldd	r21, Y+41	; 0x29
    33ca:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    33ce:	9b 01       	movw	r18, r22
    33d0:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    33d2:	c7 01       	movw	r24, r14
    33d4:	b6 01       	movw	r22, r12
    33d6:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    33da:	9f 93       	push	r25
    33dc:	8f 93       	push	r24
    33de:	7f 93       	push	r23
    33e0:	6f 93       	push	r22
    33e2:	6a a5       	ldd	r22, Y+42	; 0x2a
    33e4:	7b a5       	ldd	r23, Y+43	; 0x2b
    33e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    33e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    33ea:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    33ee:	6b 01       	movw	r12, r22
    33f0:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	40 e8       	ldi	r20, 0x80	; 128
    33f8:	53 e4       	ldi	r21, 0x43	; 67
    33fa:	6e a5       	ldd	r22, Y+46	; 0x2e
    33fc:	7f a5       	ldd	r23, Y+47	; 0x2f
    33fe:	88 a9       	ldd	r24, Y+48	; 0x30
    3400:	99 a9       	ldd	r25, Y+49	; 0x31
    3402:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3406:	2a a9       	ldd	r18, Y+50	; 0x32
    3408:	3b a9       	ldd	r19, Y+51	; 0x33
    340a:	4c a9       	ldd	r20, Y+52	; 0x34
    340c:	5d a9       	ldd	r21, Y+53	; 0x35
    340e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3412:	9b 01       	movw	r18, r22
    3414:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3416:	c7 01       	movw	r24, r14
    3418:	b6 01       	movw	r22, r12
    341a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    341e:	9f 93       	push	r25
    3420:	8f 93       	push	r24
    3422:	7f 93       	push	r23
    3424:	6f 93       	push	r22
    3426:	6e a9       	ldd	r22, Y+54	; 0x36
    3428:	7f a9       	ldd	r23, Y+55	; 0x37
    342a:	88 ad       	ldd	r24, Y+56	; 0x38
    342c:	99 ad       	ldd	r25, Y+57	; 0x39
    342e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    3432:	6b 01       	movw	r12, r22
    3434:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e8       	ldi	r20, 0x80	; 128
    343c:	57 e4       	ldi	r21, 0x47	; 71
    343e:	6a ad       	ldd	r22, Y+58	; 0x3a
    3440:	7b ad       	ldd	r23, Y+59	; 0x3b
    3442:	8c ad       	ldd	r24, Y+60	; 0x3c
    3444:	9d ad       	ldd	r25, Y+61	; 0x3d
    3446:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    344a:	9b 01       	movw	r18, r22
    344c:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    344e:	c7 01       	movw	r24, r14
    3450:	b6 01       	movw	r22, r12
    3452:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3456:	9f 93       	push	r25
    3458:	8f 93       	push	r24
    345a:	7f 93       	push	r23
    345c:	6f 93       	push	r22
    345e:	22 96       	adiw	r28, 0x02	; 2
    3460:	6c ad       	ldd	r22, Y+60	; 0x3c
    3462:	7d ad       	ldd	r23, Y+61	; 0x3d
    3464:	8e ad       	ldd	r24, Y+62	; 0x3e
    3466:	9f ad       	ldd	r25, Y+63	; 0x3f
    3468:	22 97       	sbiw	r28, 0x02	; 2
    346a:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    346e:	6b 01       	movw	r12, r22
    3470:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e8       	ldi	r20, 0x80	; 128
    3478:	57 e4       	ldi	r21, 0x47	; 71
    347a:	26 96       	adiw	r28, 0x06	; 6
    347c:	6c ad       	ldd	r22, Y+60	; 0x3c
    347e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3480:	8e ad       	ldd	r24, Y+62	; 0x3e
    3482:	9f ad       	ldd	r25, Y+63	; 0x3f
    3484:	26 97       	sbiw	r28, 0x06	; 6
    3486:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    348a:	9b 01       	movw	r18, r22
    348c:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    348e:	c7 01       	movw	r24, r14
    3490:	b6 01       	movw	r22, r12
    3492:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3496:	9f 93       	push	r25
    3498:	8f 93       	push	r24
    349a:	7f 93       	push	r23
    349c:	6f 93       	push	r22
    349e:	c8 55       	subi	r28, 0x58	; 88
    34a0:	df 4f       	sbci	r29, 0xFF	; 255
    34a2:	28 81       	ld	r18, Y
    34a4:	c8 5a       	subi	r28, 0xA8	; 168
    34a6:	d0 40       	sbci	r29, 0x00	; 0
    34a8:	c7 55       	subi	r28, 0x57	; 87
    34aa:	df 4f       	sbci	r29, 0xFF	; 255
    34ac:	38 81       	ld	r19, Y
    34ae:	c9 5a       	subi	r28, 0xA9	; 169
    34b0:	d0 40       	sbci	r29, 0x00	; 0
    34b2:	c6 55       	subi	r28, 0x56	; 86
    34b4:	df 4f       	sbci	r29, 0xFF	; 255
    34b6:	48 81       	ld	r20, Y
    34b8:	ca 5a       	subi	r28, 0xAA	; 170
    34ba:	d0 40       	sbci	r29, 0x00	; 0
    34bc:	c5 55       	subi	r28, 0x55	; 85
    34be:	df 4f       	sbci	r29, 0xFF	; 255
    34c0:	58 81       	ld	r21, Y
    34c2:	cb 5a       	subi	r28, 0xAB	; 171
    34c4:	d0 40       	sbci	r29, 0x00	; 0
    34c6:	c4 55       	subi	r28, 0x54	; 84
    34c8:	df 4f       	sbci	r29, 0xFF	; 255
    34ca:	68 81       	ld	r22, Y
    34cc:	cc 5a       	subi	r28, 0xAC	; 172
    34ce:	d0 40       	sbci	r29, 0x00	; 0
    34d0:	c3 55       	subi	r28, 0x53	; 83
    34d2:	df 4f       	sbci	r29, 0xFF	; 255
    34d4:	78 81       	ld	r23, Y
    34d6:	cd 5a       	subi	r28, 0xAD	; 173
    34d8:	d0 40       	sbci	r29, 0x00	; 0
    34da:	c2 55       	subi	r28, 0x52	; 82
    34dc:	df 4f       	sbci	r29, 0xFF	; 255
    34de:	88 81       	ld	r24, Y
    34e0:	ce 5a       	subi	r28, 0xAE	; 174
    34e2:	d0 40       	sbci	r29, 0x00	; 0
    34e4:	c1 55       	subi	r28, 0x51	; 81
    34e6:	df 4f       	sbci	r29, 0xFF	; 255
    34e8:	98 81       	ld	r25, Y
    34ea:	cf 5a       	subi	r28, 0xAF	; 175
    34ec:	d0 40       	sbci	r29, 0x00	; 0
    34ee:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__floatdisf>
    34f2:	6b 01       	movw	r12, r22
    34f4:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e4       	ldi	r19, 0x40	; 64
    34fa:	4c e9       	ldi	r20, 0x9C	; 156
    34fc:	55 e4       	ldi	r21, 0x45	; 69
    34fe:	2a 96       	adiw	r28, 0x0a	; 10
    3500:	6c ad       	ldd	r22, Y+60	; 0x3c
    3502:	7d ad       	ldd	r23, Y+61	; 0x3d
    3504:	8e ad       	ldd	r24, Y+62	; 0x3e
    3506:	9f ad       	ldd	r25, Y+63	; 0x3f
    3508:	2a 97       	sbiw	r28, 0x0a	; 10
    350a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    350e:	2e 96       	adiw	r28, 0x0e	; 14
    3510:	2c ad       	ldd	r18, Y+60	; 0x3c
    3512:	3d ad       	ldd	r19, Y+61	; 0x3d
    3514:	4e ad       	ldd	r20, Y+62	; 0x3e
    3516:	5f ad       	ldd	r21, Y+63	; 0x3f
    3518:	2e 97       	sbiw	r28, 0x0e	; 14
    351a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    351e:	9b 01       	movw	r18, r22
    3520:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3522:	c7 01       	movw	r24, r14
    3524:	b6 01       	movw	r22, r12
    3526:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    352a:	9f 93       	push	r25
    352c:	8f 93       	push	r24
    352e:	7f 93       	push	r23
    3530:	6f 93       	push	r22
    3532:	62 96       	adiw	r28, 0x12	; 18
    3534:	6c ad       	ldd	r22, Y+60	; 0x3c
    3536:	7d ad       	ldd	r23, Y+61	; 0x3d
    3538:	8e ad       	ldd	r24, Y+62	; 0x3e
    353a:	9f ad       	ldd	r25, Y+63	; 0x3f
    353c:	62 97       	sbiw	r28, 0x12	; 18
    353e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    3542:	6b 01       	movw	r12, r22
    3544:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e8       	ldi	r20, 0x80	; 128
    354c:	53 e4       	ldi	r21, 0x43	; 67
    354e:	66 96       	adiw	r28, 0x16	; 22
    3550:	6c ad       	ldd	r22, Y+60	; 0x3c
    3552:	7d ad       	ldd	r23, Y+61	; 0x3d
    3554:	8e ad       	ldd	r24, Y+62	; 0x3e
    3556:	9f ad       	ldd	r25, Y+63	; 0x3f
    3558:	66 97       	sbiw	r28, 0x16	; 22
    355a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    355e:	6a 96       	adiw	r28, 0x1a	; 26
    3560:	2c ad       	ldd	r18, Y+60	; 0x3c
    3562:	3d ad       	ldd	r19, Y+61	; 0x3d
    3564:	4e ad       	ldd	r20, Y+62	; 0x3e
    3566:	5f ad       	ldd	r21, Y+63	; 0x3f
    3568:	6a 97       	sbiw	r28, 0x1a	; 26
    356a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    356e:	9b 01       	movw	r18, r22
    3570:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3572:	c7 01       	movw	r24, r14
    3574:	b6 01       	movw	r22, r12
    3576:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    357a:	9f 93       	push	r25
    357c:	8f 93       	push	r24
    357e:	7f 93       	push	r23
    3580:	6f 93       	push	r22
    3582:	6e 96       	adiw	r28, 0x1e	; 30
    3584:	6c ad       	ldd	r22, Y+60	; 0x3c
    3586:	7d ad       	ldd	r23, Y+61	; 0x3d
    3588:	8e ad       	ldd	r24, Y+62	; 0x3e
    358a:	9f ad       	ldd	r25, Y+63	; 0x3f
    358c:	6e 97       	sbiw	r28, 0x1e	; 30
    358e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    3592:	6b 01       	movw	r12, r22
    3594:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	40 e8       	ldi	r20, 0x80	; 128
    359c:	57 e4       	ldi	r21, 0x47	; 71
    359e:	a2 96       	adiw	r28, 0x22	; 34
    35a0:	6c ad       	ldd	r22, Y+60	; 0x3c
    35a2:	7d ad       	ldd	r23, Y+61	; 0x3d
    35a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    35a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    35a8:	a2 97       	sbiw	r28, 0x22	; 34
    35aa:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    35ae:	9b 01       	movw	r18, r22
    35b0:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    35b2:	c7 01       	movw	r24, r14
    35b4:	b6 01       	movw	r22, r12
    35b6:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    35ba:	9f 93       	push	r25
    35bc:	8f 93       	push	r24
    35be:	7f 93       	push	r23
    35c0:	6f 93       	push	r22
    35c2:	a6 96       	adiw	r28, 0x26	; 38
    35c4:	6c ad       	ldd	r22, Y+60	; 0x3c
    35c6:	7d ad       	ldd	r23, Y+61	; 0x3d
    35c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    35ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    35cc:	a6 97       	sbiw	r28, 0x26	; 38
    35ce:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    35d2:	6b 01       	movw	r12, r22
    35d4:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
    35d6:	20 e0       	ldi	r18, 0x00	; 0
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	40 e8       	ldi	r20, 0x80	; 128
    35dc:	57 e4       	ldi	r21, 0x47	; 71
    35de:	aa 96       	adiw	r28, 0x2a	; 42
    35e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    35e2:	7d ad       	ldd	r23, Y+61	; 0x3d
    35e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    35e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    35e8:	aa 97       	sbiw	r28, 0x2a	; 42
    35ea:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    35ee:	9b 01       	movw	r18, r22
    35f0:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    35f2:	c7 01       	movw	r24, r14
    35f4:	b6 01       	movw	r22, r12
    35f6:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    35fa:	9f 93       	push	r25
    35fc:	8f 93       	push	r24
    35fe:	7f 93       	push	r23
    3600:	6f 93       	push	r22
    3602:	c0 55       	subi	r28, 0x50	; 80
    3604:	df 4f       	sbci	r29, 0xFF	; 255
    3606:	28 81       	ld	r18, Y
    3608:	c0 5b       	subi	r28, 0xB0	; 176
    360a:	d0 40       	sbci	r29, 0x00	; 0
    360c:	cf 54       	subi	r28, 0x4F	; 79
    360e:	df 4f       	sbci	r29, 0xFF	; 255
    3610:	38 81       	ld	r19, Y
    3612:	c1 5b       	subi	r28, 0xB1	; 177
    3614:	d0 40       	sbci	r29, 0x00	; 0
    3616:	ce 54       	subi	r28, 0x4E	; 78
    3618:	df 4f       	sbci	r29, 0xFF	; 255
    361a:	48 81       	ld	r20, Y
    361c:	c2 5b       	subi	r28, 0xB2	; 178
    361e:	d0 40       	sbci	r29, 0x00	; 0
    3620:	cd 54       	subi	r28, 0x4D	; 77
    3622:	df 4f       	sbci	r29, 0xFF	; 255
    3624:	58 81       	ld	r21, Y
    3626:	c3 5b       	subi	r28, 0xB3	; 179
    3628:	d0 40       	sbci	r29, 0x00	; 0
    362a:	cc 54       	subi	r28, 0x4C	; 76
    362c:	df 4f       	sbci	r29, 0xFF	; 255
    362e:	68 81       	ld	r22, Y
    3630:	c4 5b       	subi	r28, 0xB4	; 180
    3632:	d0 40       	sbci	r29, 0x00	; 0
    3634:	cb 54       	subi	r28, 0x4B	; 75
    3636:	df 4f       	sbci	r29, 0xFF	; 255
    3638:	78 81       	ld	r23, Y
    363a:	c5 5b       	subi	r28, 0xB5	; 181
    363c:	d0 40       	sbci	r29, 0x00	; 0
    363e:	ca 54       	subi	r28, 0x4A	; 74
    3640:	df 4f       	sbci	r29, 0xFF	; 255
    3642:	88 81       	ld	r24, Y
    3644:	c6 5b       	subi	r28, 0xB6	; 182
    3646:	d0 40       	sbci	r29, 0x00	; 0
    3648:	c9 54       	subi	r28, 0x49	; 73
    364a:	df 4f       	sbci	r29, 0xFF	; 255
    364c:	98 81       	ld	r25, Y
    364e:	c7 5b       	subi	r28, 0xB7	; 183
    3650:	d0 40       	sbci	r29, 0x00	; 0
    3652:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__floatdisf>
    3656:	6b 01       	movw	r12, r22
    3658:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e4       	ldi	r19, 0x40	; 64
    365e:	4c e9       	ldi	r20, 0x9C	; 156
    3660:	55 e4       	ldi	r21, 0x45	; 69
    3662:	ae 96       	adiw	r28, 0x2e	; 46
    3664:	6c ad       	ldd	r22, Y+60	; 0x3c
    3666:	7d ad       	ldd	r23, Y+61	; 0x3d
    3668:	8e ad       	ldd	r24, Y+62	; 0x3e
    366a:	9f ad       	ldd	r25, Y+63	; 0x3f
    366c:	ae 97       	sbiw	r28, 0x2e	; 46
    366e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3672:	e2 96       	adiw	r28, 0x32	; 50
    3674:	2c ad       	ldd	r18, Y+60	; 0x3c
    3676:	3d ad       	ldd	r19, Y+61	; 0x3d
    3678:	4e ad       	ldd	r20, Y+62	; 0x3e
    367a:	5f ad       	ldd	r21, Y+63	; 0x3f
    367c:	e2 97       	sbiw	r28, 0x32	; 50
    367e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3682:	9b 01       	movw	r18, r22
    3684:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3686:	c7 01       	movw	r24, r14
    3688:	b6 01       	movw	r22, r12
    368a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    368e:	9f 93       	push	r25
    3690:	8f 93       	push	r24
    3692:	7f 93       	push	r23
    3694:	6f 93       	push	r22
    3696:	e6 96       	adiw	r28, 0x36	; 54
    3698:	6c ad       	ldd	r22, Y+60	; 0x3c
    369a:	7d ad       	ldd	r23, Y+61	; 0x3d
    369c:	8e ad       	ldd	r24, Y+62	; 0x3e
    369e:	9f ad       	ldd	r25, Y+63	; 0x3f
    36a0:	e6 97       	sbiw	r28, 0x36	; 54
    36a2:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    36a6:	6b 01       	movw	r12, r22
    36a8:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	40 e8       	ldi	r20, 0x80	; 128
    36b0:	53 e4       	ldi	r21, 0x43	; 67
    36b2:	ea 96       	adiw	r28, 0x3a	; 58
    36b4:	6c ad       	ldd	r22, Y+60	; 0x3c
    36b6:	7d ad       	ldd	r23, Y+61	; 0x3d
    36b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    36ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    36bc:	ea 97       	sbiw	r28, 0x3a	; 58
    36be:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    36c2:	ee 96       	adiw	r28, 0x3e	; 62
    36c4:	2c ad       	ldd	r18, Y+60	; 0x3c
    36c6:	3d ad       	ldd	r19, Y+61	; 0x3d
    36c8:	4e ad       	ldd	r20, Y+62	; 0x3e
    36ca:	5f ad       	ldd	r21, Y+63	; 0x3f
    36cc:	ee 97       	sbiw	r28, 0x3e	; 62
    36ce:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    36d2:	9b 01       	movw	r18, r22
    36d4:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    36d6:	c7 01       	movw	r24, r14
    36d8:	b6 01       	movw	r22, r12
    36da:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    36de:	9f 93       	push	r25
    36e0:	8f 93       	push	r24
    36e2:	7f 93       	push	r23
    36e4:	6f 93       	push	r22
    36e6:	c2 58       	subi	r28, 0x82	; 130
    36e8:	df 4f       	sbci	r29, 0xFF	; 255
    36ea:	68 81       	ld	r22, Y
    36ec:	79 81       	ldd	r23, Y+1	; 0x01
    36ee:	8a 81       	ldd	r24, Y+2	; 0x02
    36f0:	9b 81       	ldd	r25, Y+3	; 0x03
    36f2:	ce 57       	subi	r28, 0x7E	; 126
    36f4:	d0 40       	sbci	r29, 0x00	; 0
    36f6:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    36fa:	6b 01       	movw	r12, r22
    36fc:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	40 e8       	ldi	r20, 0x80	; 128
    3704:	57 e4       	ldi	r21, 0x47	; 71
    3706:	ce 57       	subi	r28, 0x7E	; 126
    3708:	df 4f       	sbci	r29, 0xFF	; 255
    370a:	68 81       	ld	r22, Y
    370c:	79 81       	ldd	r23, Y+1	; 0x01
    370e:	8a 81       	ldd	r24, Y+2	; 0x02
    3710:	9b 81       	ldd	r25, Y+3	; 0x03
    3712:	c2 58       	subi	r28, 0x82	; 130
    3714:	d0 40       	sbci	r29, 0x00	; 0
    3716:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    371a:	9b 01       	movw	r18, r22
    371c:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    371e:	c7 01       	movw	r24, r14
    3720:	b6 01       	movw	r22, r12
    3722:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3726:	9f 93       	push	r25
    3728:	8f 93       	push	r24
    372a:	7f 93       	push	r23
    372c:	6f 93       	push	r22
    372e:	ca 57       	subi	r28, 0x7A	; 122
    3730:	df 4f       	sbci	r29, 0xFF	; 255
    3732:	68 81       	ld	r22, Y
    3734:	79 81       	ldd	r23, Y+1	; 0x01
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	9b 81       	ldd	r25, Y+3	; 0x03
    373a:	c6 58       	subi	r28, 0x86	; 134
    373c:	d0 40       	sbci	r29, 0x00	; 0
    373e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    3742:	6b 01       	movw	r12, r22
    3744:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e8       	ldi	r20, 0x80	; 128
    374c:	57 e4       	ldi	r21, 0x47	; 71
    374e:	c6 57       	subi	r28, 0x76	; 118
    3750:	df 4f       	sbci	r29, 0xFF	; 255
    3752:	68 81       	ld	r22, Y
    3754:	79 81       	ldd	r23, Y+1	; 0x01
    3756:	8a 81       	ldd	r24, Y+2	; 0x02
    3758:	9b 81       	ldd	r25, Y+3	; 0x03
    375a:	ca 58       	subi	r28, 0x8A	; 138
    375c:	d0 40       	sbci	r29, 0x00	; 0
    375e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3762:	9b 01       	movw	r18, r22
    3764:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3766:	c7 01       	movw	r24, r14
    3768:	b6 01       	movw	r22, r12
    376a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    376e:	9f 93       	push	r25
    3770:	8f 93       	push	r24
    3772:	7f 93       	push	r23
    3774:	6f 93       	push	r22
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    3776:	c2 57       	subi	r28, 0x72	; 114
    3778:	df 4f       	sbci	r29, 0xFF	; 255
    377a:	68 81       	ld	r22, Y
    377c:	79 81       	ldd	r23, Y+1	; 0x01
    377e:	8a 81       	ldd	r24, Y+2	; 0x02
    3780:	9b 81       	ldd	r25, Y+3	; 0x03
    3782:	ce 58       	subi	r28, 0x8E	; 142
    3784:	d0 40       	sbci	r29, 0x00	; 0
    3786:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e4       	ldi	r19, 0x40	; 64
    378e:	4c e9       	ldi	r20, 0x9C	; 156
    3790:	55 e4       	ldi	r21, 0x45	; 69
    3792:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|01:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3796:	9f 93       	push	r25
    3798:	8f 93       	push	r24
    379a:	7f 93       	push	r23
    379c:	6f 93       	push	r22
    379e:	8b e9       	ldi	r24, 0x9B	; 155
    37a0:	95 e2       	ldi	r25, 0x25	; 37
    37a2:	9f 93       	push	r25
    37a4:	8f 93       	push	r24
    37a6:	c7 54       	subi	r28, 0x47	; 71
    37a8:	df 4f       	sbci	r29, 0xFF	; 255
    37aa:	f8 81       	ld	r31, Y
    37ac:	c9 5b       	subi	r28, 0xB9	; 185
    37ae:	d0 40       	sbci	r29, 0x00	; 0
    37b0:	ff 93       	push	r31
    37b2:	c8 54       	subi	r28, 0x48	; 72
    37b4:	df 4f       	sbci	r29, 0xFF	; 255
    37b6:	28 81       	ld	r18, Y
    37b8:	c8 5b       	subi	r28, 0xB8	; 184
    37ba:	d0 40       	sbci	r29, 0x00	; 0
    37bc:	2f 93       	push	r18
    37be:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    37c2:	cd bf       	out	0x3d, r28	; 61
    37c4:	de bf       	out	0x3e, r29	; 62
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f);
	
} /* PrintCSV_H2A */
    37c6:	c5 53       	subi	r28, 0x35	; 53
    37c8:	df 4f       	sbci	r29, 0xFF	; 255
    37ca:	cd bf       	out	0x3d, r28	; 61
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	ff 90       	pop	r15
    37d8:	ef 90       	pop	r14
    37da:	df 90       	pop	r13
    37dc:	cf 90       	pop	r12
    37de:	bf 90       	pop	r11
    37e0:	af 90       	pop	r10
    37e2:	9f 90       	pop	r9
    37e4:	8f 90       	pop	r8
    37e6:	7f 90       	pop	r7
    37e8:	6f 90       	pop	r6
    37ea:	5f 90       	pop	r5
    37ec:	4f 90       	pop	r4
    37ee:	3f 90       	pop	r3
    37f0:	2f 90       	pop	r2
    37f2:	08 95       	ret

000037f4 <PrintCSV_EVA>:




void PrintCSV_EVA(FILE *fp) {
    37f4:	2f 92       	push	r2
    37f6:	3f 92       	push	r3
    37f8:	4f 92       	push	r4
    37fa:	5f 92       	push	r5
    37fc:	6f 92       	push	r6
    37fe:	7f 92       	push	r7
    3800:	8f 92       	push	r8
    3802:	9f 92       	push	r9
    3804:	af 92       	push	r10
    3806:	bf 92       	push	r11
    3808:	cf 92       	push	r12
    380a:	df 92       	push	r13
    380c:	ef 92       	push	r14
    380e:	ff 92       	push	r15
    3810:	0f 93       	push	r16
    3812:	1f 93       	push	r17
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	c3 58       	subi	r28, 0x83	; 131
    381e:	d1 09       	sbc	r29, r1
    3820:	cd bf       	out	0x3d, r28	; 61
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	e1 96       	adiw	r28, 0x31	; 49
    3826:	8f af       	std	Y+63, r24	; 0x3f
    3828:	e1 97       	sbiw	r28, 0x31	; 49
    382a:	e2 96       	adiw	r28, 0x32	; 50
    382c:	9f af       	std	Y+63, r25	; 0x3f
    382e:	e2 97       	sbiw	r28, 0x32	; 50
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    3830:	80 91 48 29 	lds	r24, 0x2948



void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    3834:	81 11       	cpse	r24, r1
    3836:	fc cf       	rjmp	.-8      	; 0x3830 <PrintCSV_EVA+0x3c>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!!sSensorDataSnapshot.adc.eva.regBrakeState,
		((float) sSensorDataSnapshot.adc.eva.regBrakeTimestamp / CYCLES_PER_SECOND));
    3838:	60 91 5e 29 	lds	r22, 0x295E
    383c:	70 91 5f 29 	lds	r23, 0x295F
    3840:	80 91 60 29 	lds	r24, 0x2960
    3844:	90 91 61 29 	lds	r25, 0x2961
    3848:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e4       	ldi	r19, 0x40	; 64
    3850:	4c e9       	ldi	r20, 0x9C	; 156
    3852:	55 e4       	ldi	r21, 0x45	; 69
    3854:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3858:	e3 96       	adiw	r28, 0x33	; 51
    385a:	6f af       	std	Y+63, r22	; 0x3f
    385c:	e3 97       	sbiw	r28, 0x33	; 51
    385e:	e4 96       	adiw	r28, 0x34	; 52
    3860:	7f af       	std	Y+63, r23	; 0x3f
    3862:	e4 97       	sbiw	r28, 0x34	; 52
    3864:	e5 96       	adiw	r28, 0x35	; 53
    3866:	8f af       	std	Y+63, r24	; 0x3f
    3868:	e5 97       	sbiw	r28, 0x35	; 53
    386a:	e6 96       	adiw	r28, 0x36	; 54
    386c:	9f af       	std	Y+63, r25	; 0x3f
    386e:	e6 97       	sbiw	r28, 0x36	; 54
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!!sSensorDataSnapshot.adc.eva.regBrakeState,
    3870:	20 91 5d 29 	lds	r18, 0x295D

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3874:	91 e0       	ldi	r25, 0x01	; 1
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	21 11       	cpse	r18, r1
    387a:	01 c0       	rjmp	.+2      	; 0x387e <PrintCSV_EVA+0x8a>
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	6b 96       	adiw	r28, 0x1b	; 27
    3880:	9f af       	std	Y+63, r25	; 0x3f
    3882:	6b 97       	sbiw	r28, 0x1b	; 27
    3884:	6c 96       	adiw	r28, 0x1c	; 28
    3886:	8f af       	std	Y+63, r24	; 0x3f
    3888:	6c 97       	sbiw	r28, 0x1c	; 28
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    388a:	80 91 bc 29 	lds	r24, 0x29BC
    388e:	90 91 bd 29 	lds	r25, 0x29BD
    3892:	a0 91 be 29 	lds	r26, 0x29BE
    3896:	b0 91 bf 29 	lds	r27, 0x29BF

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    389a:	89 2b       	or	r24, r25
    389c:	8a 2b       	or	r24, r26
    389e:	8b 2b       	or	r24, r27
    38a0:	e9 f0       	breq	.+58     	; 0x38dc <PrintCSV_EVA+0xe8>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    38a2:	60 91 bc 29 	lds	r22, 0x29BC
    38a6:	70 91 bd 29 	lds	r23, 0x29BD
    38aa:	80 91 be 29 	lds	r24, 0x29BE
    38ae:	90 91 bf 29 	lds	r25, 0x29BF
    38b2:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e8       	ldi	r20, 0x80	; 128
    38bc:	57 e3       	ldi	r21, 0x37	; 55
    38be:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    38c2:	9b 01       	movw	r18, r22
    38c4:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    38c6:	6a e9       	ldi	r22, 0x9A	; 154
    38c8:	79 e7       	ldi	r23, 0x79	; 121
    38ca:	83 e8       	ldi	r24, 0x83	; 131
    38cc:	94 e4       	ldi	r25, 0x44	; 68
    38ce:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    38d2:	16 2f       	mov	r17, r22
    38d4:	37 2e       	mov	r3, r23
    38d6:	89 83       	std	Y+1, r24	; 0x01
    38d8:	9a 83       	std	Y+2, r25	; 0x02
    38da:	04 c0       	rjmp	.+8      	; 0x38e4 <PrintCSV_EVA+0xf0>
    38dc:	10 e0       	ldi	r17, 0x00	; 0
    38de:	31 2c       	mov	r3, r1
    38e0:	19 82       	std	Y+1, r1	; 0x01
    38e2:	1a 82       	std	Y+2, r1	; 0x02
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    38e4:	20 91 c0 29 	lds	r18, 0x29C0
    38e8:	2b 83       	std	Y+3, r18	; 0x03
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    38ea:	60 91 b4 29 	lds	r22, 0x29B4
    38ee:	70 91 b5 29 	lds	r23, 0x29B5
    38f2:	80 91 b6 29 	lds	r24, 0x29B6
    38f6:	90 91 b7 29 	lds	r25, 0x29B7
    38fa:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    38fe:	20 e0       	ldi	r18, 0x00	; 0
    3900:	30 e4       	ldi	r19, 0x40	; 64
    3902:	4c e9       	ldi	r20, 0x9C	; 156
    3904:	55 e4       	ldi	r21, 0x45	; 69
    3906:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    390a:	e7 96       	adiw	r28, 0x37	; 55
    390c:	6f af       	std	Y+63, r22	; 0x3f
    390e:	e7 97       	sbiw	r28, 0x37	; 55
    3910:	e8 96       	adiw	r28, 0x38	; 56
    3912:	7f af       	std	Y+63, r23	; 0x3f
    3914:	e8 97       	sbiw	r28, 0x38	; 56
    3916:	e9 96       	adiw	r28, 0x39	; 57
    3918:	8f af       	std	Y+63, r24	; 0x3f
    391a:	e9 97       	sbiw	r28, 0x39	; 57
    391c:	ea 96       	adiw	r28, 0x3a	; 58
    391e:	9f af       	std	Y+63, r25	; 0x3f
    3920:	ea 97       	sbiw	r28, 0x3a	; 58
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    3922:	20 91 af 29 	lds	r18, 0x29AF

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3926:	91 e0       	ldi	r25, 0x01	; 1
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	21 11       	cpse	r18, r1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	6d 96       	adiw	r28, 0x1d	; 29
    3930:	9f af       	std	Y+63, r25	; 0x3f
    3932:	6d 97       	sbiw	r28, 0x1d	; 29
    3934:	6e 96       	adiw	r28, 0x1e	; 30
    3936:	8f af       	std	Y+63, r24	; 0x3f
    3938:	6e 97       	sbiw	r28, 0x1e	; 30
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    393a:	60 91 b0 29 	lds	r22, 0x29B0
    393e:	70 91 b1 29 	lds	r23, 0x29B1
    3942:	80 91 b2 29 	lds	r24, 0x29B2
    3946:	90 91 b3 29 	lds	r25, 0x29B3
    394a:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    394e:	20 e0       	ldi	r18, 0x00	; 0
    3950:	30 e4       	ldi	r19, 0x40	; 64
    3952:	4c e9       	ldi	r20, 0x9C	; 156
    3954:	55 e4       	ldi	r21, 0x45	; 69
    3956:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    395a:	eb 96       	adiw	r28, 0x3b	; 59
    395c:	6f af       	std	Y+63, r22	; 0x3f
    395e:	eb 97       	sbiw	r28, 0x3b	; 59
    3960:	ec 96       	adiw	r28, 0x3c	; 60
    3962:	7f af       	std	Y+63, r23	; 0x3f
    3964:	ec 97       	sbiw	r28, 0x3c	; 60
    3966:	ed 96       	adiw	r28, 0x3d	; 61
    3968:	8f af       	std	Y+63, r24	; 0x3f
    396a:	ed 97       	sbiw	r28, 0x3d	; 61
    396c:	ee 96       	adiw	r28, 0x3e	; 62
    396e:	9f af       	std	Y+63, r25	; 0x3f
    3970:	ee 97       	sbiw	r28, 0x3e	; 62
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
    3972:	20 91 ae 29 	lds	r18, 0x29AE

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3976:	91 e0       	ldi	r25, 0x01	; 1
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	21 11       	cpse	r18, r1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	6f 96       	adiw	r28, 0x1f	; 31
    3980:	9f af       	std	Y+63, r25	; 0x3f
    3982:	6f 97       	sbiw	r28, 0x1f	; 31
    3984:	a0 96       	adiw	r28, 0x20	; 32
    3986:	8f af       	std	Y+63, r24	; 0x3f
    3988:	a0 97       	sbiw	r28, 0x20	; 32
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
    398a:	60 91 aa 29 	lds	r22, 0x29AA
    398e:	70 91 ab 29 	lds	r23, 0x29AB
    3992:	80 91 ac 29 	lds	r24, 0x29AC
    3996:	90 91 ad 29 	lds	r25, 0x29AD

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    399a:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
    399e:	2b ec       	ldi	r18, 0xCB	; 203
    39a0:	37 e5       	ldi	r19, 0x57	; 87
    39a2:	4f e6       	ldi	r20, 0x6F	; 111
    39a4:	5d e3       	ldi	r21, 0x3D	; 61
    39a6:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    39aa:	ef 96       	adiw	r28, 0x3f	; 63
    39ac:	6f af       	std	Y+63, r22	; 0x3f
    39ae:	ef 97       	sbiw	r28, 0x3f	; 63
    39b0:	c1 58       	subi	r28, 0x81	; 129
    39b2:	df 4f       	sbci	r29, 0xFF	; 255
    39b4:	78 83       	st	Y, r23
    39b6:	cf 57       	subi	r28, 0x7F	; 127
    39b8:	d0 40       	sbci	r29, 0x00	; 0
    39ba:	c0 58       	subi	r28, 0x80	; 128
    39bc:	df 4f       	sbci	r29, 0xFF	; 255
    39be:	88 83       	st	Y, r24
    39c0:	c0 58       	subi	r28, 0x80	; 128
    39c2:	d0 40       	sbci	r29, 0x00	; 0
    39c4:	cf 57       	subi	r28, 0x7F	; 127
    39c6:	df 4f       	sbci	r29, 0xFF	; 255
    39c8:	98 83       	st	Y, r25
    39ca:	c1 58       	subi	r28, 0x81	; 129
    39cc:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
    39ce:	60 91 a6 29 	lds	r22, 0x29A6
    39d2:	70 91 a7 29 	lds	r23, 0x29A7
    39d6:	80 91 a8 29 	lds	r24, 0x29A8
    39da:	90 91 a9 29 	lds	r25, 0x29A9

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    39de:	61 15       	cp	r22, r1
    39e0:	71 05       	cpc	r23, r1
    39e2:	81 05       	cpc	r24, r1
    39e4:	91 05       	cpc	r25, r1
    39e6:	21 f1       	breq	.+72     	; 0x3a30 <PrintCSV_EVA+0x23c>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    39e8:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e8       	ldi	r20, 0x80	; 128
    39f2:	57 e3       	ldi	r21, 0x37	; 55
    39f4:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    39f8:	9b 01       	movw	r18, r22
    39fa:	ac 01       	movw	r20, r24
    39fc:	6a e9       	ldi	r22, 0x9A	; 154
    39fe:	79 e7       	ldi	r23, 0x79	; 121
    3a00:	83 e8       	ldi	r24, 0x83	; 131
    3a02:	94 e4       	ldi	r25, 0x44	; 68
    3a04:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3a08:	ce 57       	subi	r28, 0x7E	; 126
    3a0a:	df 4f       	sbci	r29, 0xFF	; 255
    3a0c:	68 83       	st	Y, r22
    3a0e:	c2 58       	subi	r28, 0x82	; 130
    3a10:	d0 40       	sbci	r29, 0x00	; 0
    3a12:	cd 57       	subi	r28, 0x7D	; 125
    3a14:	df 4f       	sbci	r29, 0xFF	; 255
    3a16:	78 83       	st	Y, r23
    3a18:	c3 58       	subi	r28, 0x83	; 131
    3a1a:	d0 40       	sbci	r29, 0x00	; 0
    3a1c:	28 2e       	mov	r2, r24
    3a1e:	09 2f       	mov	r16, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	40 e8       	ldi	r20, 0x80	; 128
    3a26:	5f e3       	ldi	r21, 0x3F	; 63
    3a28:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__cmpsf2>
    3a2c:	87 ff       	sbrs	r24, 7
    3a2e:	0c c0       	rjmp	.+24     	; 0x3a48 <PrintCSV_EVA+0x254>
		res = 0.0f;
	}
	else
	res = 0.0f;
    3a30:	ce 57       	subi	r28, 0x7E	; 126
    3a32:	df 4f       	sbci	r29, 0xFF	; 255
    3a34:	18 82       	st	Y, r1
    3a36:	c2 58       	subi	r28, 0x82	; 130
    3a38:	d0 40       	sbci	r29, 0x00	; 0
    3a3a:	cd 57       	subi	r28, 0x7D	; 125
    3a3c:	df 4f       	sbci	r29, 0xFF	; 255
    3a3e:	18 82       	st	Y, r1
    3a40:	c3 58       	subi	r28, 0x83	; 131
    3a42:	d0 40       	sbci	r29, 0x00	; 0
    3a44:	21 2c       	mov	r2, r1
    3a46:	00 e0       	ldi	r16, 0x00	; 0
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    3a48:	80 91 ba 29 	lds	r24, 0x29BA
    3a4c:	90 91 bb 29 	lds	r25, 0x29BB
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    3a50:	40 91 b8 29 	lds	r20, 0x29B8
    3a54:	50 91 b9 29 	lds	r21, 0x29B9
    3a58:	4c 83       	std	Y+4, r20	; 0x04
    3a5a:	5d 83       	std	Y+5, r21	; 0x05
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    3a5c:	c0 90 7a 29 	lds	r12, 0x297A
    3a60:	d0 90 7b 29 	lds	r13, 0x297B
    3a64:	e0 90 7c 29 	lds	r14, 0x297C
    3a68:	f0 90 7d 29 	lds	r15, 0x297D
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    3a6c:	50 91 9e 29 	lds	r21, 0x299E
    3a70:	a1 96       	adiw	r28, 0x21	; 33
    3a72:	5f af       	std	Y+63, r21	; 0x3f
    3a74:	a1 97       	sbiw	r28, 0x21	; 33
    3a76:	e0 91 9f 29 	lds	r30, 0x299F
    3a7a:	a2 96       	adiw	r28, 0x22	; 34
    3a7c:	ef af       	std	Y+63, r30	; 0x3f
    3a7e:	a2 97       	sbiw	r28, 0x22	; 34
    3a80:	f0 91 a0 29 	lds	r31, 0x29A0
    3a84:	a3 96       	adiw	r28, 0x23	; 35
    3a86:	ff af       	std	Y+63, r31	; 0x3f
    3a88:	a3 97       	sbiw	r28, 0x23	; 35
    3a8a:	20 91 a1 29 	lds	r18, 0x29A1
    3a8e:	a4 96       	adiw	r28, 0x24	; 36
    3a90:	2f af       	std	Y+63, r18	; 0x3f
    3a92:	a4 97       	sbiw	r28, 0x24	; 36
    3a94:	30 91 a2 29 	lds	r19, 0x29A2
    3a98:	a5 96       	adiw	r28, 0x25	; 37
    3a9a:	3f af       	std	Y+63, r19	; 0x3f
    3a9c:	a5 97       	sbiw	r28, 0x25	; 37
    3a9e:	40 91 a3 29 	lds	r20, 0x29A3
    3aa2:	a6 96       	adiw	r28, 0x26	; 38
    3aa4:	4f af       	std	Y+63, r20	; 0x3f
    3aa6:	a6 97       	sbiw	r28, 0x26	; 38
    3aa8:	50 91 a4 29 	lds	r21, 0x29A4
    3aac:	a7 96       	adiw	r28, 0x27	; 39
    3aae:	5f af       	std	Y+63, r21	; 0x3f
    3ab0:	a7 97       	sbiw	r28, 0x27	; 39
    3ab2:	e0 91 a5 29 	lds	r30, 0x29A5
    3ab6:	a8 96       	adiw	r28, 0x28	; 40
    3ab8:	ef af       	std	Y+63, r30	; 0x3f
    3aba:	a8 97       	sbiw	r28, 0x28	; 40
    3abc:	40 90 e9 29 	lds	r4, 0x29E9
    3ac0:	50 90 ea 29 	lds	r5, 0x29EA
    3ac4:	60 90 eb 29 	lds	r6, 0x29EB
    3ac8:	70 90 ec 29 	lds	r7, 0x29EC
    3acc:	80 90 ed 29 	lds	r8, 0x29ED
    3ad0:	90 90 ee 29 	lds	r9, 0x29EE
    3ad4:	a0 90 ef 29 	lds	r10, 0x29EF
    3ad8:	b0 90 f0 29 	lds	r11, 0x29F0
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    3adc:	20 91 92 29 	lds	r18, 0x2992
    3ae0:	30 91 93 29 	lds	r19, 0x2993
    3ae4:	40 91 94 29 	lds	r20, 0x2994
    3ae8:	50 91 95 29 	lds	r21, 0x2995
    3aec:	2e 83       	std	Y+6, r18	; 0x06
    3aee:	3f 83       	std	Y+7, r19	; 0x07
    3af0:	48 87       	std	Y+8, r20	; 0x08
    3af2:	59 87       	std	Y+9, r21	; 0x09
    3af4:	20 91 e9 29 	lds	r18, 0x29E9
    3af8:	30 91 ea 29 	lds	r19, 0x29EA
    3afc:	40 91 eb 29 	lds	r20, 0x29EB
    3b00:	50 91 ec 29 	lds	r21, 0x29EC
    3b04:	2a 87       	std	Y+10, r18	; 0x0a
    3b06:	3b 87       	std	Y+11, r19	; 0x0b
    3b08:	4c 87       	std	Y+12, r20	; 0x0c
    3b0a:	5d 87       	std	Y+13, r21	; 0x0d
    3b0c:	20 91 ed 29 	lds	r18, 0x29ED
    3b10:	30 91 ee 29 	lds	r19, 0x29EE
    3b14:	40 91 ef 29 	lds	r20, 0x29EF
    3b18:	50 91 f0 29 	lds	r21, 0x29F0
    3b1c:	2e 87       	std	Y+14, r18	; 0x0e
    3b1e:	3f 87       	std	Y+15, r19	; 0x0f
    3b20:	48 8b       	std	Y+16, r20	; 0x10
    3b22:	59 8b       	std	Y+17, r21	; 0x11
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    3b24:	20 91 8a 29 	lds	r18, 0x298A
    3b28:	30 91 8b 29 	lds	r19, 0x298B
    3b2c:	40 91 8c 29 	lds	r20, 0x298C
    3b30:	50 91 8d 29 	lds	r21, 0x298D
    3b34:	2a 8b       	std	Y+18, r18	; 0x12
    3b36:	3b 8b       	std	Y+19, r19	; 0x13
    3b38:	4c 8b       	std	Y+20, r20	; 0x14
    3b3a:	5d 8b       	std	Y+21, r21	; 0x15
    3b3c:	20 91 ed 29 	lds	r18, 0x29ED
    3b40:	30 91 ee 29 	lds	r19, 0x29EE
    3b44:	40 91 ef 29 	lds	r20, 0x29EF
    3b48:	50 91 f0 29 	lds	r21, 0x29F0
    3b4c:	2e 8b       	std	Y+22, r18	; 0x16
    3b4e:	3f 8b       	std	Y+23, r19	; 0x17
    3b50:	48 8f       	std	Y+24, r20	; 0x18
    3b52:	59 8f       	std	Y+25, r21	; 0x19
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    3b54:	20 91 86 29 	lds	r18, 0x2986
    3b58:	30 91 87 29 	lds	r19, 0x2987
    3b5c:	40 91 88 29 	lds	r20, 0x2988
    3b60:	50 91 89 29 	lds	r21, 0x2989
    3b64:	2a 8f       	std	Y+26, r18	; 0x1a
    3b66:	3b 8f       	std	Y+27, r19	; 0x1b
    3b68:	4c 8f       	std	Y+28, r20	; 0x1c
    3b6a:	5d 8f       	std	Y+29, r21	; 0x1d
    3b6c:	20 91 e9 29 	lds	r18, 0x29E9
    3b70:	30 91 ea 29 	lds	r19, 0x29EA
    3b74:	40 91 eb 29 	lds	r20, 0x29EB
    3b78:	50 91 ec 29 	lds	r21, 0x29EC
    3b7c:	2e 8f       	std	Y+30, r18	; 0x1e
    3b7e:	3f 8f       	std	Y+31, r19	; 0x1f
    3b80:	48 a3       	std	Y+32, r20	; 0x20
    3b82:	59 a3       	std	Y+33, r21	; 0x21
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3b84:	30 91 96 29 	lds	r19, 0x2996
    3b88:	a9 96       	adiw	r28, 0x29	; 41
    3b8a:	3f af       	std	Y+63, r19	; 0x3f
    3b8c:	a9 97       	sbiw	r28, 0x29	; 41
    3b8e:	40 91 97 29 	lds	r20, 0x2997
    3b92:	aa 96       	adiw	r28, 0x2a	; 42
    3b94:	4f af       	std	Y+63, r20	; 0x3f
    3b96:	aa 97       	sbiw	r28, 0x2a	; 42
    3b98:	50 91 98 29 	lds	r21, 0x2998
    3b9c:	ab 96       	adiw	r28, 0x2b	; 43
    3b9e:	5f af       	std	Y+63, r21	; 0x3f
    3ba0:	ab 97       	sbiw	r28, 0x2b	; 43
    3ba2:	e0 91 99 29 	lds	r30, 0x2999
    3ba6:	ac 96       	adiw	r28, 0x2c	; 44
    3ba8:	ef af       	std	Y+63, r30	; 0x3f
    3baa:	ac 97       	sbiw	r28, 0x2c	; 44
    3bac:	f0 91 9a 29 	lds	r31, 0x299A
    3bb0:	ad 96       	adiw	r28, 0x2d	; 45
    3bb2:	ff af       	std	Y+63, r31	; 0x3f
    3bb4:	ad 97       	sbiw	r28, 0x2d	; 45
    3bb6:	20 91 9b 29 	lds	r18, 0x299B
    3bba:	ae 96       	adiw	r28, 0x2e	; 46
    3bbc:	2f af       	std	Y+63, r18	; 0x3f
    3bbe:	ae 97       	sbiw	r28, 0x2e	; 46
    3bc0:	30 91 9c 29 	lds	r19, 0x299C
    3bc4:	af 96       	adiw	r28, 0x2f	; 47
    3bc6:	3f af       	std	Y+63, r19	; 0x3f
    3bc8:	af 97       	sbiw	r28, 0x2f	; 47
    3bca:	40 91 9d 29 	lds	r20, 0x299D
    3bce:	e0 96       	adiw	r28, 0x30	; 48
    3bd0:	4f af       	std	Y+63, r20	; 0x3f
    3bd2:	e0 97       	sbiw	r28, 0x30	; 48
    3bd4:	20 91 e1 29 	lds	r18, 0x29E1
    3bd8:	30 91 e2 29 	lds	r19, 0x29E2
    3bdc:	40 91 e3 29 	lds	r20, 0x29E3
    3be0:	50 91 e4 29 	lds	r21, 0x29E4
    3be4:	2a a3       	std	Y+34, r18	; 0x22
    3be6:	3b a3       	std	Y+35, r19	; 0x23
    3be8:	4c a3       	std	Y+36, r20	; 0x24
    3bea:	5d a3       	std	Y+37, r21	; 0x25
    3bec:	20 91 e5 29 	lds	r18, 0x29E5
    3bf0:	30 91 e6 29 	lds	r19, 0x29E6
    3bf4:	40 91 e7 29 	lds	r20, 0x29E7
    3bf8:	50 91 e8 29 	lds	r21, 0x29E8
    3bfc:	2e a3       	std	Y+38, r18	; 0x26
    3bfe:	3f a3       	std	Y+39, r19	; 0x27
    3c00:	48 a7       	std	Y+40, r20	; 0x28
    3c02:	59 a7       	std	Y+41, r21	; 0x29
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3c04:	20 91 8e 29 	lds	r18, 0x298E
    3c08:	30 91 8f 29 	lds	r19, 0x298F
    3c0c:	40 91 90 29 	lds	r20, 0x2990
    3c10:	50 91 91 29 	lds	r21, 0x2991
    3c14:	2a a7       	std	Y+42, r18	; 0x2a
    3c16:	3b a7       	std	Y+43, r19	; 0x2b
    3c18:	4c a7       	std	Y+44, r20	; 0x2c
    3c1a:	5d a7       	std	Y+45, r21	; 0x2d
    3c1c:	20 91 e1 29 	lds	r18, 0x29E1
    3c20:	30 91 e2 29 	lds	r19, 0x29E2
    3c24:	40 91 e3 29 	lds	r20, 0x29E3
    3c28:	50 91 e4 29 	lds	r21, 0x29E4
    3c2c:	2e a7       	std	Y+46, r18	; 0x2e
    3c2e:	3f a7       	std	Y+47, r19	; 0x2f
    3c30:	48 ab       	std	Y+48, r20	; 0x30
    3c32:	59 ab       	std	Y+49, r21	; 0x31
    3c34:	20 91 e5 29 	lds	r18, 0x29E5
    3c38:	30 91 e6 29 	lds	r19, 0x29E6
    3c3c:	40 91 e7 29 	lds	r20, 0x29E7
    3c40:	50 91 e8 29 	lds	r21, 0x29E8
    3c44:	2a ab       	std	Y+50, r18	; 0x32
    3c46:	3b ab       	std	Y+51, r19	; 0x33
    3c48:	4c ab       	std	Y+52, r20	; 0x34
    3c4a:	5d ab       	std	Y+53, r21	; 0x35
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    3c4c:	20 91 82 29 	lds	r18, 0x2982
    3c50:	30 91 83 29 	lds	r19, 0x2983
    3c54:	40 91 84 29 	lds	r20, 0x2984
    3c58:	50 91 85 29 	lds	r21, 0x2985
    3c5c:	2e ab       	std	Y+54, r18	; 0x36
    3c5e:	3f ab       	std	Y+55, r19	; 0x37
    3c60:	48 af       	std	Y+56, r20	; 0x38
    3c62:	59 af       	std	Y+57, r21	; 0x39
    3c64:	20 91 e5 29 	lds	r18, 0x29E5
    3c68:	30 91 e6 29 	lds	r19, 0x29E6
    3c6c:	40 91 e7 29 	lds	r20, 0x29E7
    3c70:	50 91 e8 29 	lds	r21, 0x29E8
    3c74:	2a af       	std	Y+58, r18	; 0x3a
    3c76:	3b af       	std	Y+59, r19	; 0x3b
    3c78:	4c af       	std	Y+60, r20	; 0x3c
    3c7a:	5d af       	std	Y+61, r21	; 0x3d
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    3c7c:	20 91 7e 29 	lds	r18, 0x297E
    3c80:	30 91 7f 29 	lds	r19, 0x297F
    3c84:	40 91 80 29 	lds	r20, 0x2980
    3c88:	50 91 81 29 	lds	r21, 0x2981
    3c8c:	22 96       	adiw	r28, 0x02	; 2
    3c8e:	2c af       	std	Y+60, r18	; 0x3c
    3c90:	3d af       	std	Y+61, r19	; 0x3d
    3c92:	4e af       	std	Y+62, r20	; 0x3e
    3c94:	5f af       	std	Y+63, r21	; 0x3f
    3c96:	22 97       	sbiw	r28, 0x02	; 2
    3c98:	20 91 e1 29 	lds	r18, 0x29E1
    3c9c:	30 91 e2 29 	lds	r19, 0x29E2
    3ca0:	40 91 e3 29 	lds	r20, 0x29E3
    3ca4:	50 91 e4 29 	lds	r21, 0x29E4
    3ca8:	26 96       	adiw	r28, 0x06	; 6
    3caa:	2c af       	std	Y+60, r18	; 0x3c
    3cac:	3d af       	std	Y+61, r19	; 0x3d
    3cae:	4e af       	std	Y+62, r20	; 0x3e
    3cb0:	5f af       	std	Y+63, r21	; 0x3f
    3cb2:	26 97       	sbiw	r28, 0x06	; 6
	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
    3cb4:	20 91 51 29 	lds	r18, 0x2951
    3cb8:	30 91 52 29 	lds	r19, 0x2952
    3cbc:	40 91 53 29 	lds	r20, 0x2953
    3cc0:	50 91 54 29 	lds	r21, 0x2954
    3cc4:	2a 96       	adiw	r28, 0x0a	; 10
    3cc6:	2c af       	std	Y+60, r18	; 0x3c
    3cc8:	3d af       	std	Y+61, r19	; 0x3d
    3cca:	4e af       	std	Y+62, r20	; 0x3e
    3ccc:	5f af       	std	Y+63, r21	; 0x3f
    3cce:	2a 97       	sbiw	r28, 0x0a	; 10

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
    3cd0:	20 91 4d 29 	lds	r18, 0x294D
    3cd4:	30 91 4e 29 	lds	r19, 0x294E
    3cd8:	40 91 4f 29 	lds	r20, 0x294F
    3cdc:	50 91 50 29 	lds	r21, 0x2950
    3ce0:	2e 96       	adiw	r28, 0x0e	; 14
    3ce2:	2c af       	std	Y+60, r18	; 0x3c
    3ce4:	3d af       	std	Y+61, r19	; 0x3d
    3ce6:	4e af       	std	Y+62, r20	; 0x3e
    3ce8:	5f af       	std	Y+63, r21	; 0x3f
    3cea:	2e 97       	sbiw	r28, 0x0e	; 14
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
    3cec:	20 91 59 29 	lds	r18, 0x2959
    3cf0:	30 91 5a 29 	lds	r19, 0x295A
    3cf4:	40 91 5b 29 	lds	r20, 0x295B
    3cf8:	50 91 5c 29 	lds	r21, 0x295C
    3cfc:	62 96       	adiw	r28, 0x12	; 18
    3cfe:	2c af       	std	Y+60, r18	; 0x3c
    3d00:	3d af       	std	Y+61, r19	; 0x3d
    3d02:	4e af       	std	Y+62, r20	; 0x3e
    3d04:	5f af       	std	Y+63, r21	; 0x3f
    3d06:	62 97       	sbiw	r28, 0x12	; 18
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
    3d08:	20 91 55 29 	lds	r18, 0x2955
    3d0c:	30 91 56 29 	lds	r19, 0x2956
    3d10:	40 91 57 29 	lds	r20, 0x2957
    3d14:	50 91 58 29 	lds	r21, 0x2958
    3d18:	66 96       	adiw	r28, 0x16	; 22
    3d1a:	2c af       	std	Y+60, r18	; 0x3c
    3d1c:	3d af       	std	Y+61, r19	; 0x3d
    3d1e:	4e af       	std	Y+62, r20	; 0x3e
    3d20:	5f af       	std	Y+63, r21	; 0x3f
    3d22:	66 97       	sbiw	r28, 0x16	; 22
void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    3d24:	20 91 49 29 	lds	r18, 0x2949
    3d28:	30 91 4a 29 	lds	r19, 0x294A
    3d2c:	40 91 4b 29 	lds	r20, 0x294B
    3d30:	50 91 4c 29 	lds	r21, 0x294C
    3d34:	6a 96       	adiw	r28, 0x1a	; 26
    3d36:	2c af       	std	Y+60, r18	; 0x3c
    3d38:	3d af       	std	Y+61, r19	; 0x3d
    3d3a:	4e af       	std	Y+62, r20	; 0x3e
    3d3c:	5f af       	std	Y+63, r21	; 0x3f
    3d3e:	6a 97       	sbiw	r28, 0x1a	; 26

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3d40:	e6 96       	adiw	r28, 0x36	; 54
    3d42:	3f ad       	ldd	r19, Y+63	; 0x3f
    3d44:	e6 97       	sbiw	r28, 0x36	; 54
    3d46:	3f 93       	push	r19
    3d48:	e5 96       	adiw	r28, 0x35	; 53
    3d4a:	4f ad       	ldd	r20, Y+63	; 0x3f
    3d4c:	e5 97       	sbiw	r28, 0x35	; 53
    3d4e:	4f 93       	push	r20
    3d50:	e4 96       	adiw	r28, 0x34	; 52
    3d52:	5f ad       	ldd	r21, Y+63	; 0x3f
    3d54:	e4 97       	sbiw	r28, 0x34	; 52
    3d56:	5f 93       	push	r21
    3d58:	e3 96       	adiw	r28, 0x33	; 51
    3d5a:	ef ad       	ldd	r30, Y+63	; 0x3f
    3d5c:	e3 97       	sbiw	r28, 0x33	; 51
    3d5e:	ef 93       	push	r30
    3d60:	6c 96       	adiw	r28, 0x1c	; 28
    3d62:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d64:	6c 97       	sbiw	r28, 0x1c	; 28
    3d66:	ff 93       	push	r31
    3d68:	6b 96       	adiw	r28, 0x1b	; 27
    3d6a:	2f ad       	ldd	r18, Y+63	; 0x3f
    3d6c:	6b 97       	sbiw	r28, 0x1b	; 27
    3d6e:	2f 93       	push	r18
    3d70:	3a 81       	ldd	r19, Y+2	; 0x02
    3d72:	3f 93       	push	r19
    3d74:	49 81       	ldd	r20, Y+1	; 0x01
    3d76:	4f 93       	push	r20
    3d78:	3f 92       	push	r3
    3d7a:	1f 93       	push	r17
    3d7c:	1f 92       	push	r1
    3d7e:	5b 81       	ldd	r21, Y+3	; 0x03
    3d80:	5f 93       	push	r21
    3d82:	ea 96       	adiw	r28, 0x3a	; 58
    3d84:	ef ad       	ldd	r30, Y+63	; 0x3f
    3d86:	ea 97       	sbiw	r28, 0x3a	; 58
    3d88:	ef 93       	push	r30
    3d8a:	e9 96       	adiw	r28, 0x39	; 57
    3d8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    3d8e:	e9 97       	sbiw	r28, 0x39	; 57
    3d90:	ff 93       	push	r31
    3d92:	e8 96       	adiw	r28, 0x38	; 56
    3d94:	2f ad       	ldd	r18, Y+63	; 0x3f
    3d96:	e8 97       	sbiw	r28, 0x38	; 56
    3d98:	2f 93       	push	r18
    3d9a:	e7 96       	adiw	r28, 0x37	; 55
    3d9c:	3f ad       	ldd	r19, Y+63	; 0x3f
    3d9e:	e7 97       	sbiw	r28, 0x37	; 55
    3da0:	3f 93       	push	r19
    3da2:	6e 96       	adiw	r28, 0x1e	; 30
    3da4:	4f ad       	ldd	r20, Y+63	; 0x3f
    3da6:	6e 97       	sbiw	r28, 0x1e	; 30
    3da8:	4f 93       	push	r20
    3daa:	6d 96       	adiw	r28, 0x1d	; 29
    3dac:	5f ad       	ldd	r21, Y+63	; 0x3f
    3dae:	6d 97       	sbiw	r28, 0x1d	; 29
    3db0:	5f 93       	push	r21
    3db2:	ee 96       	adiw	r28, 0x3e	; 62
    3db4:	ef ad       	ldd	r30, Y+63	; 0x3f
    3db6:	ee 97       	sbiw	r28, 0x3e	; 62
    3db8:	ef 93       	push	r30
    3dba:	ed 96       	adiw	r28, 0x3d	; 61
    3dbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    3dbe:	ed 97       	sbiw	r28, 0x3d	; 61
    3dc0:	ff 93       	push	r31
    3dc2:	ec 96       	adiw	r28, 0x3c	; 60
    3dc4:	2f ad       	ldd	r18, Y+63	; 0x3f
    3dc6:	ec 97       	sbiw	r28, 0x3c	; 60
    3dc8:	2f 93       	push	r18
    3dca:	eb 96       	adiw	r28, 0x3b	; 59
    3dcc:	3f ad       	ldd	r19, Y+63	; 0x3f
    3dce:	eb 97       	sbiw	r28, 0x3b	; 59
    3dd0:	3f 93       	push	r19
    3dd2:	a0 96       	adiw	r28, 0x20	; 32
    3dd4:	4f ad       	ldd	r20, Y+63	; 0x3f
    3dd6:	a0 97       	sbiw	r28, 0x20	; 32
    3dd8:	4f 93       	push	r20
    3dda:	6f 96       	adiw	r28, 0x1f	; 31
    3ddc:	5f ad       	ldd	r21, Y+63	; 0x3f
    3dde:	6f 97       	sbiw	r28, 0x1f	; 31
    3de0:	5f 93       	push	r21
    3de2:	cf 57       	subi	r28, 0x7F	; 127
    3de4:	df 4f       	sbci	r29, 0xFF	; 255
    3de6:	e8 81       	ld	r30, Y
    3de8:	c1 58       	subi	r28, 0x81	; 129
    3dea:	d0 40       	sbci	r29, 0x00	; 0
    3dec:	ef 93       	push	r30
    3dee:	c0 58       	subi	r28, 0x80	; 128
    3df0:	df 4f       	sbci	r29, 0xFF	; 255
    3df2:	f8 81       	ld	r31, Y
    3df4:	c0 58       	subi	r28, 0x80	; 128
    3df6:	d0 40       	sbci	r29, 0x00	; 0
    3df8:	ff 93       	push	r31
    3dfa:	c1 58       	subi	r28, 0x81	; 129
    3dfc:	df 4f       	sbci	r29, 0xFF	; 255
    3dfe:	28 81       	ld	r18, Y
    3e00:	cf 57       	subi	r28, 0x7F	; 127
    3e02:	d0 40       	sbci	r29, 0x00	; 0
    3e04:	2f 93       	push	r18
    3e06:	ef 96       	adiw	r28, 0x3f	; 63
    3e08:	3f ad       	ldd	r19, Y+63	; 0x3f
    3e0a:	ef 97       	sbiw	r28, 0x3f	; 63
    3e0c:	3f 93       	push	r19
    3e0e:	0f 93       	push	r16
    3e10:	2f 92       	push	r2
    3e12:	cd 57       	subi	r28, 0x7D	; 125
    3e14:	df 4f       	sbci	r29, 0xFF	; 255
    3e16:	48 81       	ld	r20, Y
    3e18:	c3 58       	subi	r28, 0x83	; 131
    3e1a:	d0 40       	sbci	r29, 0x00	; 0
    3e1c:	4f 93       	push	r20
    3e1e:	ce 57       	subi	r28, 0x7E	; 126
    3e20:	df 4f       	sbci	r29, 0xFF	; 255
    3e22:	58 81       	ld	r21, Y
    3e24:	c2 58       	subi	r28, 0x82	; 130
    3e26:	d0 40       	sbci	r29, 0x00	; 0
    3e28:	5f 93       	push	r21
    3e2a:	bc 01       	movw	r22, r24
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	90 e0       	ldi	r25, 0x00	; 0
    3e30:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    3e34:	23 e3       	ldi	r18, 0x33	; 51
    3e36:	33 e3       	ldi	r19, 0x33	; 51
    3e38:	43 e2       	ldi	r20, 0x23	; 35
    3e3a:	54 e4       	ldi	r21, 0x44	; 68
    3e3c:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e40:	9f 93       	push	r25
    3e42:	8f 93       	push	r24
    3e44:	7f 93       	push	r23
    3e46:	6f 93       	push	r22
    3e48:	ec 81       	ldd	r30, Y+4	; 0x04
    3e4a:	fd 81       	ldd	r31, Y+5	; 0x05
    3e4c:	bf 01       	movw	r22, r30
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    3e56:	27 e1       	ldi	r18, 0x17	; 23
    3e58:	37 eb       	ldi	r19, 0xB7	; 183
    3e5a:	41 ed       	ldi	r20, 0xD1	; 209
    3e5c:	5e e3       	ldi	r21, 0x3E	; 62
    3e5e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e62:	9f 93       	push	r25
    3e64:	8f 93       	push	r24
    3e66:	7f 93       	push	r23
    3e68:	6f 93       	push	r22
    3e6a:	c7 01       	movw	r24, r14
    3e6c:	b6 01       	movw	r22, r12
    3e6e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	30 e0       	ldi	r19, 0x00	; 0
    3e76:	40 e2       	ldi	r20, 0x20	; 32
    3e78:	59 e4       	ldi	r21, 0x49	; 73
    3e7a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e7e:	9f 93       	push	r25
    3e80:	8f 93       	push	r24
    3e82:	7f 93       	push	r23
    3e84:	6f 93       	push	r22
    3e86:	a1 96       	adiw	r28, 0x21	; 33
    3e88:	2f ad       	ldd	r18, Y+63	; 0x3f
    3e8a:	a1 97       	sbiw	r28, 0x21	; 33
    3e8c:	a2 96       	adiw	r28, 0x22	; 34
    3e8e:	3f ad       	ldd	r19, Y+63	; 0x3f
    3e90:	a2 97       	sbiw	r28, 0x22	; 34
    3e92:	a3 96       	adiw	r28, 0x23	; 35
    3e94:	4f ad       	ldd	r20, Y+63	; 0x3f
    3e96:	a3 97       	sbiw	r28, 0x23	; 35
    3e98:	a4 96       	adiw	r28, 0x24	; 36
    3e9a:	5f ad       	ldd	r21, Y+63	; 0x3f
    3e9c:	a4 97       	sbiw	r28, 0x24	; 36
    3e9e:	a5 96       	adiw	r28, 0x25	; 37
    3ea0:	6f ad       	ldd	r22, Y+63	; 0x3f
    3ea2:	a5 97       	sbiw	r28, 0x25	; 37
    3ea4:	a6 96       	adiw	r28, 0x26	; 38
    3ea6:	7f ad       	ldd	r23, Y+63	; 0x3f
    3ea8:	a6 97       	sbiw	r28, 0x26	; 38
    3eaa:	a7 96       	adiw	r28, 0x27	; 39
    3eac:	8f ad       	ldd	r24, Y+63	; 0x3f
    3eae:	a7 97       	sbiw	r28, 0x27	; 39
    3eb0:	a8 96       	adiw	r28, 0x28	; 40
    3eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eb4:	a8 97       	sbiw	r28, 0x28	; 40
    3eb6:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__floatdisf>
    3eba:	6b 01       	movw	r12, r22
    3ebc:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e4       	ldi	r19, 0x40	; 64
    3ec2:	4c e9       	ldi	r20, 0x9C	; 156
    3ec4:	55 e4       	ldi	r21, 0x45	; 69
    3ec6:	c3 01       	movw	r24, r6
    3ec8:	b2 01       	movw	r22, r4
    3eca:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3ece:	a5 01       	movw	r20, r10
    3ed0:	94 01       	movw	r18, r8
    3ed2:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3ed6:	9b 01       	movw	r18, r22
    3ed8:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3eda:	c7 01       	movw	r24, r14
    3edc:	b6 01       	movw	r22, r12
    3ede:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3ee2:	9f 93       	push	r25
    3ee4:	8f 93       	push	r24
    3ee6:	7f 93       	push	r23
    3ee8:	6f 93       	push	r22
    3eea:	6e 81       	ldd	r22, Y+6	; 0x06
    3eec:	7f 81       	ldd	r23, Y+7	; 0x07
    3eee:	88 85       	ldd	r24, Y+8	; 0x08
    3ef0:	99 85       	ldd	r25, Y+9	; 0x09
    3ef2:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    3ef6:	6b 01       	movw	r12, r22
    3ef8:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    3efa:	20 e0       	ldi	r18, 0x00	; 0
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	40 e8       	ldi	r20, 0x80	; 128
    3f00:	53 e4       	ldi	r21, 0x43	; 67
    3f02:	6a 85       	ldd	r22, Y+10	; 0x0a
    3f04:	7b 85       	ldd	r23, Y+11	; 0x0b
    3f06:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f08:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f0a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3f0e:	2e 85       	ldd	r18, Y+14	; 0x0e
    3f10:	3f 85       	ldd	r19, Y+15	; 0x0f
    3f12:	48 89       	ldd	r20, Y+16	; 0x10
    3f14:	59 89       	ldd	r21, Y+17	; 0x11
    3f16:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3f1a:	9b 01       	movw	r18, r22
    3f1c:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3f1e:	c7 01       	movw	r24, r14
    3f20:	b6 01       	movw	r22, r12
    3f22:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3f26:	9f 93       	push	r25
    3f28:	8f 93       	push	r24
    3f2a:	7f 93       	push	r23
    3f2c:	6f 93       	push	r22
    3f2e:	6a 89       	ldd	r22, Y+18	; 0x12
    3f30:	7b 89       	ldd	r23, Y+19	; 0x13
    3f32:	8c 89       	ldd	r24, Y+20	; 0x14
    3f34:	9d 89       	ldd	r25, Y+21	; 0x15
    3f36:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    3f3a:	6b 01       	movw	r12, r22
    3f3c:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	30 e0       	ldi	r19, 0x00	; 0
    3f42:	40 e8       	ldi	r20, 0x80	; 128
    3f44:	57 e4       	ldi	r21, 0x47	; 71
    3f46:	6e 89       	ldd	r22, Y+22	; 0x16
    3f48:	7f 89       	ldd	r23, Y+23	; 0x17
    3f4a:	88 8d       	ldd	r24, Y+24	; 0x18
    3f4c:	99 8d       	ldd	r25, Y+25	; 0x19
    3f4e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3f52:	9b 01       	movw	r18, r22
    3f54:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3f56:	c7 01       	movw	r24, r14
    3f58:	b6 01       	movw	r22, r12
    3f5a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3f5e:	9f 93       	push	r25
    3f60:	8f 93       	push	r24
    3f62:	7f 93       	push	r23
    3f64:	6f 93       	push	r22
    3f66:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3f68:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3f6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f6e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    3f72:	6b 01       	movw	r12, r22
    3f74:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    3f76:	20 e0       	ldi	r18, 0x00	; 0
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	40 e8       	ldi	r20, 0x80	; 128
    3f7c:	57 e4       	ldi	r21, 0x47	; 71
    3f7e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3f80:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3f82:	88 a1       	ldd	r24, Y+32	; 0x20
    3f84:	99 a1       	ldd	r25, Y+33	; 0x21
    3f86:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3f8a:	9b 01       	movw	r18, r22
    3f8c:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3f8e:	c7 01       	movw	r24, r14
    3f90:	b6 01       	movw	r22, r12
    3f92:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    3f96:	9f 93       	push	r25
    3f98:	8f 93       	push	r24
    3f9a:	7f 93       	push	r23
    3f9c:	6f 93       	push	r22
    3f9e:	a9 96       	adiw	r28, 0x29	; 41
    3fa0:	2f ad       	ldd	r18, Y+63	; 0x3f
    3fa2:	a9 97       	sbiw	r28, 0x29	; 41
    3fa4:	aa 96       	adiw	r28, 0x2a	; 42
    3fa6:	3f ad       	ldd	r19, Y+63	; 0x3f
    3fa8:	aa 97       	sbiw	r28, 0x2a	; 42
    3faa:	ab 96       	adiw	r28, 0x2b	; 43
    3fac:	4f ad       	ldd	r20, Y+63	; 0x3f
    3fae:	ab 97       	sbiw	r28, 0x2b	; 43
    3fb0:	ac 96       	adiw	r28, 0x2c	; 44
    3fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
    3fb4:	ac 97       	sbiw	r28, 0x2c	; 44
    3fb6:	ad 96       	adiw	r28, 0x2d	; 45
    3fb8:	6f ad       	ldd	r22, Y+63	; 0x3f
    3fba:	ad 97       	sbiw	r28, 0x2d	; 45
    3fbc:	ae 96       	adiw	r28, 0x2e	; 46
    3fbe:	7f ad       	ldd	r23, Y+63	; 0x3f
    3fc0:	ae 97       	sbiw	r28, 0x2e	; 46
    3fc2:	af 96       	adiw	r28, 0x2f	; 47
    3fc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    3fc6:	af 97       	sbiw	r28, 0x2f	; 47
    3fc8:	e0 96       	adiw	r28, 0x30	; 48
    3fca:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fcc:	e0 97       	sbiw	r28, 0x30	; 48
    3fce:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <__floatdisf>
    3fd2:	6b 01       	movw	r12, r22
    3fd4:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e4       	ldi	r19, 0x40	; 64
    3fda:	4c e9       	ldi	r20, 0x9C	; 156
    3fdc:	55 e4       	ldi	r21, 0x45	; 69
    3fde:	6a a1       	ldd	r22, Y+34	; 0x22
    3fe0:	7b a1       	ldd	r23, Y+35	; 0x23
    3fe2:	8c a1       	ldd	r24, Y+36	; 0x24
    3fe4:	9d a1       	ldd	r25, Y+37	; 0x25
    3fe6:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3fea:	2e a1       	ldd	r18, Y+38	; 0x26
    3fec:	3f a1       	ldd	r19, Y+39	; 0x27
    3fee:	48 a5       	ldd	r20, Y+40	; 0x28
    3ff0:	59 a5       	ldd	r21, Y+41	; 0x29
    3ff2:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    3ff6:	9b 01       	movw	r18, r22
    3ff8:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3ffa:	c7 01       	movw	r24, r14
    3ffc:	b6 01       	movw	r22, r12
    3ffe:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    4002:	9f 93       	push	r25
    4004:	8f 93       	push	r24
    4006:	7f 93       	push	r23
    4008:	6f 93       	push	r22
    400a:	6a a5       	ldd	r22, Y+42	; 0x2a
    400c:	7b a5       	ldd	r23, Y+43	; 0x2b
    400e:	8c a5       	ldd	r24, Y+44	; 0x2c
    4010:	9d a5       	ldd	r25, Y+45	; 0x2d
    4012:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    4016:	6b 01       	movw	r12, r22
    4018:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	40 e8       	ldi	r20, 0x80	; 128
    4020:	53 e4       	ldi	r21, 0x43	; 67
    4022:	6e a5       	ldd	r22, Y+46	; 0x2e
    4024:	7f a5       	ldd	r23, Y+47	; 0x2f
    4026:	88 a9       	ldd	r24, Y+48	; 0x30
    4028:	99 a9       	ldd	r25, Y+49	; 0x31
    402a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    402e:	2a a9       	ldd	r18, Y+50	; 0x32
    4030:	3b a9       	ldd	r19, Y+51	; 0x33
    4032:	4c a9       	ldd	r20, Y+52	; 0x34
    4034:	5d a9       	ldd	r21, Y+53	; 0x35
    4036:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    403a:	9b 01       	movw	r18, r22
    403c:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    403e:	c7 01       	movw	r24, r14
    4040:	b6 01       	movw	r22, r12
    4042:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    4046:	9f 93       	push	r25
    4048:	8f 93       	push	r24
    404a:	7f 93       	push	r23
    404c:	6f 93       	push	r22
    404e:	6e a9       	ldd	r22, Y+54	; 0x36
    4050:	7f a9       	ldd	r23, Y+55	; 0x37
    4052:	88 ad       	ldd	r24, Y+56	; 0x38
    4054:	99 ad       	ldd	r25, Y+57	; 0x39
    4056:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    405a:	6b 01       	movw	r12, r22
    405c:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e8       	ldi	r20, 0x80	; 128
    4064:	57 e4       	ldi	r21, 0x47	; 71
    4066:	6a ad       	ldd	r22, Y+58	; 0x3a
    4068:	7b ad       	ldd	r23, Y+59	; 0x3b
    406a:	8c ad       	ldd	r24, Y+60	; 0x3c
    406c:	9d ad       	ldd	r25, Y+61	; 0x3d
    406e:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    4072:	9b 01       	movw	r18, r22
    4074:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4076:	c7 01       	movw	r24, r14
    4078:	b6 01       	movw	r22, r12
    407a:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    407e:	9f 93       	push	r25
    4080:	8f 93       	push	r24
    4082:	7f 93       	push	r23
    4084:	6f 93       	push	r22
    4086:	22 96       	adiw	r28, 0x02	; 2
    4088:	6c ad       	ldd	r22, Y+60	; 0x3c
    408a:	7d ad       	ldd	r23, Y+61	; 0x3d
    408c:	8e ad       	ldd	r24, Y+62	; 0x3e
    408e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4090:	22 97       	sbiw	r28, 0x02	; 2
    4092:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
    4096:	6b 01       	movw	r12, r22
    4098:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	40 e8       	ldi	r20, 0x80	; 128
    40a0:	57 e4       	ldi	r21, 0x47	; 71
    40a2:	26 96       	adiw	r28, 0x06	; 6
    40a4:	6c ad       	ldd	r22, Y+60	; 0x3c
    40a6:	7d ad       	ldd	r23, Y+61	; 0x3d
    40a8:	8e ad       	ldd	r24, Y+62	; 0x3e
    40aa:	9f ad       	ldd	r25, Y+63	; 0x3f
    40ac:	26 97       	sbiw	r28, 0x06	; 6
    40ae:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>
    40b2:	9b 01       	movw	r18, r22
    40b4:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    40b6:	c7 01       	movw	r24, r14
    40b8:	b6 01       	movw	r22, r12
    40ba:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    40be:	9f 93       	push	r25
    40c0:	8f 93       	push	r24
    40c2:	7f 93       	push	r23
    40c4:	6f 93       	push	r22
    40c6:	2a 96       	adiw	r28, 0x0a	; 10
    40c8:	6c ad       	ldd	r22, Y+60	; 0x3c
    40ca:	7d ad       	ldd	r23, Y+61	; 0x3d
    40cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    40ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    40d0:	2a 97       	sbiw	r28, 0x0a	; 10
    40d2:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
    40d6:	25 e5       	ldi	r18, 0x55	; 85
    40d8:	35 e5       	ldi	r19, 0x55	; 85
    40da:	45 e8       	ldi	r20, 0x85	; 133
    40dc:	59 e4       	ldi	r21, 0x49	; 73
    40de:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    40e2:	9f 93       	push	r25
    40e4:	8f 93       	push	r24
    40e6:	7f 93       	push	r23
    40e8:	6f 93       	push	r22
    40ea:	2e 96       	adiw	r28, 0x0e	; 14
    40ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    40ee:	7d ad       	ldd	r23, Y+61	; 0x3d
    40f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    40f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    40f4:	2e 97       	sbiw	r28, 0x0e	; 14
    40f6:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
    40fa:	25 e5       	ldi	r18, 0x55	; 85
    40fc:	35 e5       	ldi	r19, 0x55	; 85
    40fe:	45 e8       	ldi	r20, 0x85	; 133
    4100:	59 e4       	ldi	r21, 0x49	; 73
    4102:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4106:	9f 93       	push	r25
    4108:	8f 93       	push	r24
    410a:	7f 93       	push	r23
    410c:	6f 93       	push	r22
    410e:	62 96       	adiw	r28, 0x12	; 18
    4110:	6c ad       	ldd	r22, Y+60	; 0x3c
    4112:	7d ad       	ldd	r23, Y+61	; 0x3d
    4114:	8e ad       	ldd	r24, Y+62	; 0x3e
    4116:	9f ad       	ldd	r25, Y+63	; 0x3f
    4118:	62 97       	sbiw	r28, 0x12	; 18
    411a:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
    411e:	20 e0       	ldi	r18, 0x00	; 0
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	40 e8       	ldi	r20, 0x80	; 128
    4124:	57 e3       	ldi	r21, 0x37	; 55
    4126:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    412a:	9f 93       	push	r25
    412c:	8f 93       	push	r24
    412e:	7f 93       	push	r23
    4130:	6f 93       	push	r22
    4132:	66 96       	adiw	r28, 0x16	; 22
    4134:	6c ad       	ldd	r22, Y+60	; 0x3c
    4136:	7d ad       	ldd	r23, Y+61	; 0x3d
    4138:	8e ad       	ldd	r24, Y+62	; 0x3e
    413a:	9f ad       	ldd	r25, Y+63	; 0x3f
    413c:	66 97       	sbiw	r28, 0x16	; 22
    413e:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
    4142:	20 e0       	ldi	r18, 0x00	; 0
    4144:	30 e0       	ldi	r19, 0x00	; 0
    4146:	40 e8       	ldi	r20, 0x80	; 128
    4148:	57 e3       	ldi	r21, 0x37	; 55
    414a:	0e 94 bc 2f 	call	0x5f78	; 0x5f78 <__mulsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    414e:	9f 93       	push	r25
    4150:	8f 93       	push	r24
    4152:	7f 93       	push	r23
    4154:	6f 93       	push	r22
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    4156:	6a 96       	adiw	r28, 0x1a	; 26
    4158:	6c ad       	ldd	r22, Y+60	; 0x3c
    415a:	7d ad       	ldd	r23, Y+61	; 0x3d
    415c:	8e ad       	ldd	r24, Y+62	; 0x3e
    415e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4160:	6a 97       	sbiw	r28, 0x1a	; 26
    4162:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e4       	ldi	r19, 0x40	; 64
    416a:	4c e9       	ldi	r20, 0x9C	; 156
    416c:	55 e4       	ldi	r21, 0x45	; 69
    416e:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|03:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4172:	9f 93       	push	r25
    4174:	8f 93       	push	r24
    4176:	7f 93       	push	r23
    4178:	6f 93       	push	r22
    417a:	81 e3       	ldi	r24, 0x31	; 49
    417c:	96 e2       	ldi	r25, 0x26	; 38
    417e:	9f 93       	push	r25
    4180:	8f 93       	push	r24
    4182:	e2 96       	adiw	r28, 0x32	; 50
    4184:	ff ad       	ldd	r31, Y+63	; 0x3f
    4186:	e2 97       	sbiw	r28, 0x32	; 50
    4188:	ff 93       	push	r31
    418a:	e1 96       	adiw	r28, 0x31	; 49
    418c:	2f ad       	ldd	r18, Y+63	; 0x3f
    418e:	e1 97       	sbiw	r28, 0x31	; 49
    4190:	2f 93       	push	r18
    4192:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	de bf       	out	0x3e, r29	; 62
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!!sSensorDataSnapshot.adc.eva.regBrakeState,
		((float) sSensorDataSnapshot.adc.eva.regBrakeTimestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_EVA */
    419a:	cd 57       	subi	r28, 0x7D	; 125
    419c:	df 4f       	sbci	r29, 0xFF	; 255
    419e:	cd bf       	out	0x3d, r28	; 61
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	df 91       	pop	r29
    41a4:	cf 91       	pop	r28
    41a6:	1f 91       	pop	r17
    41a8:	0f 91       	pop	r16
    41aa:	ff 90       	pop	r15
    41ac:	ef 90       	pop	r14
    41ae:	df 90       	pop	r13
    41b0:	cf 90       	pop	r12
    41b2:	bf 90       	pop	r11
    41b4:	af 90       	pop	r10
    41b6:	9f 90       	pop	r9
    41b8:	8f 90       	pop	r8
    41ba:	7f 90       	pop	r7
    41bc:	6f 90       	pop	r6
    41be:	5f 90       	pop	r5
    41c0:	4f 90       	pop	r4
    41c2:	3f 90       	pop	r3
    41c4:	2f 90       	pop	r2
    41c6:	08 95       	ret

000041c8 <PrintResetHeader>:


void PrintResetHeader(FILE *fp) {
    41c8:	cf 93       	push	r28
    41ca:	df 93       	push	r29
    41cc:	d8 2f       	mov	r29, r24
    41ce:	c9 2f       	mov	r28, r25
	
	fprintf(fp, "# HvA SECOM Motor driver board ");
    41d0:	68 2f       	mov	r22, r24
    41d2:	79 2f       	mov	r23, r25
    41d4:	83 eb       	ldi	r24, 0xB3	; 179
    41d6:	96 e2       	ldi	r25, 0x26	; 38
    41d8:	0e 94 da 38 	call	0x71b4	; 0x71b4 <fputs>
	PrintBoardType(fp);
    41dc:	8d 2f       	mov	r24, r29
    41de:	9c 2f       	mov	r25, r28
    41e0:	0e 94 84 2c 	call	0x5908	; 0x5908 <PrintBoardType>
	fprintf(fp, "busID %d cpu ", GetBusID());
    41e4:	0e 94 73 2c 	call	0x58e6	; 0x58e6 <GetBusID>
    41e8:	1f 92       	push	r1
    41ea:	8f 93       	push	r24
    41ec:	23 ed       	ldi	r18, 0xD3	; 211
    41ee:	36 e2       	ldi	r19, 0x26	; 38
    41f0:	3f 93       	push	r19
    41f2:	2f 93       	push	r18
    41f4:	cf 93       	push	r28
    41f6:	df 93       	push	r29
    41f8:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
	PrintProcessorID(fp);
    41fc:	8d 2f       	mov	r24, r29
    41fe:	9c 2f       	mov	r25, r28
    4200:	0e 94 a1 2c 	call	0x5942	; 0x5942 <PrintProcessorID>
	fprintf(fp, "# code " __DATE__ " " __TIME__ "\r\n");
    4204:	0f 90       	pop	r0
    4206:	0f 90       	pop	r0
    4208:	0f 90       	pop	r0
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	6d 2f       	mov	r22, r29
    4212:	7c 2f       	mov	r23, r28
    4214:	81 ee       	ldi	r24, 0xE1	; 225
    4216:	96 e2       	ldi	r25, 0x26	; 38
	
} /* PrintResetHeader */
    4218:	df 91       	pop	r29
    421a:	cf 91       	pop	r28
	
	fprintf(fp, "# HvA SECOM Motor driver board ");
	PrintBoardType(fp);
	fprintf(fp, "busID %d cpu ", GetBusID());
	PrintProcessorID(fp);
	fprintf(fp, "# code " __DATE__ " " __TIME__ "\r\n");
    421c:	0c 94 da 38 	jmp	0x71b4	; 0x71b4 <fputs>

00004220 <__vector_71>:
	}
	
} /* ISRReadADC_EVA */


ISR(ADCA_CH0_vect) {
    4220:	1f 92       	push	r1
    4222:	0f 92       	push	r0
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	0f 92       	push	r0
    4228:	11 24       	eor	r1, r1
    422a:	0b b6       	in	r0, 0x3b	; 59
    422c:	0f 92       	push	r0
    422e:	8f 92       	push	r8
    4230:	9f 92       	push	r9
    4232:	af 92       	push	r10
    4234:	bf 92       	push	r11
    4236:	cf 92       	push	r12
    4238:	df 92       	push	r13
    423a:	ef 92       	push	r14
    423c:	ff 92       	push	r15
    423e:	0f 93       	push	r16
    4240:	1f 93       	push	r17
    4242:	2f 93       	push	r18
    4244:	3f 93       	push	r19
    4246:	4f 93       	push	r20
    4248:	5f 93       	push	r21
    424a:	6f 93       	push	r22
    424c:	7f 93       	push	r23
    424e:	8f 93       	push	r24
    4250:	9f 93       	push	r25
    4252:	af 93       	push	r26
    4254:	bf 93       	push	r27
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	ef 93       	push	r30
    425c:	ff 93       	push	r31

	static int32_t sCCPrevPulseInterval;

	int16_t spRawSample, driverTempSample, motorVoltageSample, motorCurrentSample, inVoltageSample, inCurrentSample;
	int32_t inPower, motorPower;
	uint8_t selCCPin = PORTC.IN & PIN2_bm, selFPPin = PORTC.IN & PIN4_bm, pwmEn = !(PORTC.IN & PIN1_bm), pwm = PORTC.IN & PIN6_bm;
    425e:	e0 91 48 06 	lds	r30, 0x0648
    4262:	e4 70       	andi	r30, 0x04	; 4
    4264:	f0 91 48 06 	lds	r31, 0x0648
    4268:	f0 71       	andi	r31, 0x10	; 16
    426a:	d0 91 48 06 	lds	r29, 0x0648
    426e:	d2 70       	andi	r29, 0x02	; 2
    4270:	80 90 48 06 	lds	r8, 0x0648
	uint8_t curPWMCycles = TCC1.CNTL;
    4274:	90 90 60 08 	lds	r9, 0x0860
	
	if(I_AM_EVA_L || I_AM_EVA_R)
    4278:	80 91 68 06 	lds	r24, 0x0668
    427c:	80 73       	andi	r24, 0x30	; 48
    427e:	80 31       	cpi	r24, 0x10	; 16
    4280:	31 f0       	breq	.+12     	; 0x428e <__vector_71+0x6e>
    4282:	80 91 68 06 	lds	r24, 0x0668
    4286:	80 73       	andi	r24, 0x30	; 48
    4288:	80 32       	cpi	r24, 0x20	; 32
    428a:	09 f0       	breq	.+2      	; 0x428e <__vector_71+0x6e>
    428c:	e2 c0       	rjmp	.+452    	; 0x4452 <__vector_71+0x232>
} /* ISRReadADC_H2A */


static inline void ISRReadADC_EVA(void) {
	
	int16_t motorTempFront = ADCA.CH0RES, motorTempRear, angSample, angFSSample;
    428e:	40 91 10 02 	lds	r20, 0x0210
    4292:	50 91 11 02 	lds	r21, 0x0211

	uint8_t selRegenPin = !(PORTC.IN & PIN5_bm);
    4296:	20 91 48 06 	lds	r18, 0x0648
    429a:	25 fb       	bst	r18, 5
    429c:	22 27       	eor	r18, r18
    429e:	20 f9       	bld	r18, 0
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	28 27       	eor	r18, r24
	
	FILTER32(motorTempFront, sSensorData.adc.eva.motorTempFrontFiltered);
    42a4:	80 91 57 28 	lds	r24, 0x2857
    42a8:	90 91 58 28 	lds	r25, 0x2858
    42ac:	a0 91 59 28 	lds	r26, 0x2859
    42b0:	b0 91 5a 28 	lds	r27, 0x285A
    42b4:	c9 2e       	mov	r12, r25
    42b6:	da 2e       	mov	r13, r26
    42b8:	eb 2e       	mov	r14, r27
    42ba:	ff 24       	eor	r15, r15
    42bc:	e7 fc       	sbrc	r14, 7
    42be:	fa 94       	dec	r15
    42c0:	8c 19       	sub	r24, r12
    42c2:	9d 09       	sbc	r25, r13
    42c4:	ae 09       	sbc	r26, r14
    42c6:	bf 09       	sbc	r27, r15
    42c8:	66 27       	eor	r22, r22
    42ca:	57 fd       	sbrc	r21, 7
    42cc:	60 95       	com	r22
    42ce:	76 2f       	mov	r23, r22
    42d0:	76 2f       	mov	r23, r22
    42d2:	65 2f       	mov	r22, r21
    42d4:	54 2f       	mov	r21, r20
    42d6:	44 27       	eor	r20, r20
    42d8:	84 0f       	add	r24, r20
    42da:	95 1f       	adc	r25, r21
    42dc:	a6 1f       	adc	r26, r22
    42de:	b7 1f       	adc	r27, r23
    42e0:	80 93 57 28 	sts	0x2857, r24
    42e4:	90 93 58 28 	sts	0x2858, r25
    42e8:	a0 93 59 28 	sts	0x2859, r26
    42ec:	b0 93 5a 28 	sts	0x285A, r27
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    42f0:	80 91 63 02 	lds	r24, 0x0263
    42f4:	80 ff       	sbrs	r24, 0
    42f6:	fc cf       	rjmp	.-8      	; 0x42f0 <__vector_71+0xd0>
	ADCB.CH0.INTFLAGS = 0x01;
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	80 93 63 02 	sts	0x0263, r24
	motorTempRear = ADCB.CH0RES;
    42fe:	40 91 50 02 	lds	r20, 0x0250
    4302:	50 91 51 02 	lds	r21, 0x0251
	FILTER32(motorTempRear, sSensorData.adc.eva.motorTempRearFiltered);
    4306:	80 91 5b 28 	lds	r24, 0x285B
    430a:	90 91 5c 28 	lds	r25, 0x285C
    430e:	a0 91 5d 28 	lds	r26, 0x285D
    4312:	b0 91 5e 28 	lds	r27, 0x285E
    4316:	c9 2e       	mov	r12, r25
    4318:	da 2e       	mov	r13, r26
    431a:	eb 2e       	mov	r14, r27
    431c:	ff 24       	eor	r15, r15
    431e:	e7 fc       	sbrc	r14, 7
    4320:	fa 94       	dec	r15
    4322:	8c 19       	sub	r24, r12
    4324:	9d 09       	sbc	r25, r13
    4326:	ae 09       	sbc	r26, r14
    4328:	bf 09       	sbc	r27, r15
    432a:	66 27       	eor	r22, r22
    432c:	57 fd       	sbrc	r21, 7
    432e:	60 95       	com	r22
    4330:	76 2f       	mov	r23, r22
    4332:	76 2f       	mov	r23, r22
    4334:	65 2f       	mov	r22, r21
    4336:	54 2f       	mov	r21, r20
    4338:	44 27       	eor	r20, r20
    433a:	84 0f       	add	r24, r20
    433c:	95 1f       	adc	r25, r21
    433e:	a6 1f       	adc	r26, r22
    4340:	b7 1f       	adc	r27, r23
    4342:	80 93 5b 28 	sts	0x285B, r24
    4346:	90 93 5c 28 	sts	0x285C, r25
    434a:	a0 93 5d 28 	sts	0x285D, r26
    434e:	b0 93 5e 28 	sts	0x285E, r27
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ;
    4352:	80 91 2b 02 	lds	r24, 0x022B
    4356:	80 ff       	sbrs	r24, 0
    4358:	fc cf       	rjmp	.-8      	; 0x4352 <__vector_71+0x132>
	ADCA.CH1.INTFLAGS = 0x01;
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	80 93 2b 02 	sts	0x022B, r24
	angSample = ADCA.CH1RES;
    4360:	40 91 12 02 	lds	r20, 0x0212
    4364:	50 91 13 02 	lds	r21, 0x0213
	FILTER32(angSample, sSensorData.adc.eva.angSenseFiltered);
    4368:	80 91 5f 28 	lds	r24, 0x285F
    436c:	90 91 60 28 	lds	r25, 0x2860
    4370:	a0 91 61 28 	lds	r26, 0x2861
    4374:	b0 91 62 28 	lds	r27, 0x2862
    4378:	c9 2e       	mov	r12, r25
    437a:	da 2e       	mov	r13, r26
    437c:	eb 2e       	mov	r14, r27
    437e:	ff 24       	eor	r15, r15
    4380:	e7 fc       	sbrc	r14, 7
    4382:	fa 94       	dec	r15
    4384:	8c 19       	sub	r24, r12
    4386:	9d 09       	sbc	r25, r13
    4388:	ae 09       	sbc	r26, r14
    438a:	bf 09       	sbc	r27, r15
    438c:	66 27       	eor	r22, r22
    438e:	57 fd       	sbrc	r21, 7
    4390:	60 95       	com	r22
    4392:	76 2f       	mov	r23, r22
    4394:	76 2f       	mov	r23, r22
    4396:	65 2f       	mov	r22, r21
    4398:	54 2f       	mov	r21, r20
    439a:	44 27       	eor	r20, r20
    439c:	84 0f       	add	r24, r20
    439e:	95 1f       	adc	r25, r21
    43a0:	a6 1f       	adc	r26, r22
    43a2:	b7 1f       	adc	r27, r23
    43a4:	80 93 5f 28 	sts	0x285F, r24
    43a8:	90 93 60 28 	sts	0x2860, r25
    43ac:	a0 93 61 28 	sts	0x2861, r26
    43b0:	b0 93 62 28 	sts	0x2862, r27
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    43b4:	80 91 6b 02 	lds	r24, 0x026B
    43b8:	80 ff       	sbrs	r24, 0
    43ba:	fc cf       	rjmp	.-8      	; 0x43b4 <__vector_71+0x194>
	ADCB.CH1.INTFLAGS = 0x01;
    43bc:	81 e0       	ldi	r24, 0x01	; 1
    43be:	80 93 6b 02 	sts	0x026B, r24
	angFSSample = ADCB.CH1RES;
    43c2:	40 91 52 02 	lds	r20, 0x0252
    43c6:	50 91 53 02 	lds	r21, 0x0253
	FILTER32(angFSSample, sSensorData.adc.eva.angFSFiltered);
    43ca:	80 91 63 28 	lds	r24, 0x2863
    43ce:	90 91 64 28 	lds	r25, 0x2864
    43d2:	a0 91 65 28 	lds	r26, 0x2865
    43d6:	b0 91 66 28 	lds	r27, 0x2866
    43da:	c9 2e       	mov	r12, r25
    43dc:	da 2e       	mov	r13, r26
    43de:	eb 2e       	mov	r14, r27
    43e0:	ff 24       	eor	r15, r15
    43e2:	e7 fc       	sbrc	r14, 7
    43e4:	fa 94       	dec	r15
    43e6:	8c 19       	sub	r24, r12
    43e8:	9d 09       	sbc	r25, r13
    43ea:	ae 09       	sbc	r26, r14
    43ec:	bf 09       	sbc	r27, r15
    43ee:	66 27       	eor	r22, r22
    43f0:	57 fd       	sbrc	r21, 7
    43f2:	60 95       	com	r22
    43f4:	76 2f       	mov	r23, r22
    43f6:	76 2f       	mov	r23, r22
    43f8:	65 2f       	mov	r22, r21
    43fa:	54 2f       	mov	r21, r20
    43fc:	44 27       	eor	r20, r20
    43fe:	84 0f       	add	r24, r20
    4400:	95 1f       	adc	r25, r21
    4402:	a6 1f       	adc	r26, r22
    4404:	b7 1f       	adc	r27, r23
    4406:	80 93 63 28 	sts	0x2863, r24
    440a:	90 93 64 28 	sts	0x2864, r25
    440e:	a0 93 65 28 	sts	0x2865, r26
    4412:	b0 93 66 28 	sts	0x2866, r27

	if(sSensorData.adc.eva.regBrakeState != selRegenPin) {
    4416:	80 91 67 28 	lds	r24, 0x2867
    441a:	82 17       	cp	r24, r18
    441c:	09 f4       	brne	.+2      	; 0x4420 <__vector_71+0x200>
    441e:	a9 c1       	rjmp	.+850    	; 0x4772 <__vector_71+0x552>
		SET_CC_DRIVE(REGBRAKE_LEVEL);
    4420:	87 e0       	ldi	r24, 0x07	; 7
    4422:	80 93 85 06 	sts	0x0685, r24
		PORTE.OUTSET = PIN3_bm;
    4426:	88 e0       	ldi	r24, 0x08	; 8
    4428:	80 93 85 06 	sts	0x0685, r24
		sSensorData.adc.eva.regBrakeState = selRegenPin;
    442c:	20 93 67 28 	sts	0x2867, r18
		sSensorData.adc.eva.regBrakeTimestamp = sSessionCycleCount;
    4430:	80 91 cb 28 	lds	r24, 0x28CB
    4434:	90 91 cc 28 	lds	r25, 0x28CC
    4438:	a0 91 cd 28 	lds	r26, 0x28CD
    443c:	b0 91 ce 28 	lds	r27, 0x28CE
    4440:	80 93 68 28 	sts	0x2868, r24
    4444:	90 93 69 28 	sts	0x2869, r25
    4448:	a0 93 6a 28 	sts	0x286A, r26
    444c:	b0 93 6b 28 	sts	0x286B, r27
    4450:	90 c1       	rjmp	.+800    	; 0x4772 <__vector_71+0x552>
	else { PORTE.OUTSET = ~(x) & CC_PINS;  PORTE.OUTCLR = (x) & CC_PINS; } \
} while(0)

static inline void ISRReadADC_H2A(void) {

	int16_t fcVoltageSample = ADCA.CH0RES - sCal.fcVoltageOffset, fcCurrentSample, scVoltageSample, scCurrentSample;
    4452:	20 91 10 02 	lds	r18, 0x0210
    4456:	30 91 11 02 	lds	r19, 0x0211
    445a:	80 91 c1 29 	lds	r24, 0x29C1
    445e:	90 91 c2 29 	lds	r25, 0x29C2
    4462:	28 1b       	sub	r18, r24
    4464:	39 0b       	sbc	r19, r25
	int32_t fcPower, scPower;

	uint8_t idealDiodePin = PORTE.IN & PIN4_bm;
    4466:	c0 91 88 06 	lds	r28, 0x0688
    446a:	c0 71       	andi	r28, 0x10	; 16
	
	FILTER32(fcVoltageSample, sSensorData.adc.h2a.fcVoltageFiltered);
    446c:	80 91 57 28 	lds	r24, 0x2857
    4470:	90 91 58 28 	lds	r25, 0x2858
    4474:	a0 91 59 28 	lds	r26, 0x2859
    4478:	b0 91 5a 28 	lds	r27, 0x285A
    447c:	49 2f       	mov	r20, r25
    447e:	5a 2f       	mov	r21, r26
    4480:	6b 2f       	mov	r22, r27
    4482:	77 27       	eor	r23, r23
    4484:	67 fd       	sbrc	r22, 7
    4486:	7a 95       	dec	r23
    4488:	84 1b       	sub	r24, r20
    448a:	95 0b       	sbc	r25, r21
    448c:	a6 0b       	sbc	r26, r22
    448e:	b7 0b       	sbc	r27, r23
    4490:	a9 01       	movw	r20, r18
    4492:	66 27       	eor	r22, r22
    4494:	57 fd       	sbrc	r21, 7
    4496:	60 95       	com	r22
    4498:	76 2f       	mov	r23, r22
    449a:	76 2f       	mov	r23, r22
    449c:	65 2f       	mov	r22, r21
    449e:	54 2f       	mov	r21, r20
    44a0:	44 27       	eor	r20, r20
    44a2:	84 0f       	add	r24, r20
    44a4:	95 1f       	adc	r25, r21
    44a6:	a6 1f       	adc	r26, r22
    44a8:	b7 1f       	adc	r27, r23
    44aa:	80 93 57 28 	sts	0x2857, r24
    44ae:	90 93 58 28 	sts	0x2858, r25
    44b2:	a0 93 59 28 	sts	0x2859, r26
    44b6:	b0 93 5a 28 	sts	0x285A, r27
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    44ba:	80 91 63 02 	lds	r24, 0x0263
    44be:	80 ff       	sbrs	r24, 0
    44c0:	fc cf       	rjmp	.-8      	; 0x44ba <__vector_71+0x29a>
	ADCB.CH0.INTFLAGS = 0x01;
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	80 93 63 02 	sts	0x0263, r24
	fcCurrentSample = ADCB.CH0RES - sCal.fcCurrentOffset;
    44c8:	40 91 50 02 	lds	r20, 0x0250
    44cc:	50 91 51 02 	lds	r21, 0x0251
    44d0:	80 91 c3 29 	lds	r24, 0x29C3
    44d4:	90 91 c4 29 	lds	r25, 0x29C4
    44d8:	48 1b       	sub	r20, r24
    44da:	59 0b       	sbc	r21, r25
	FILTER32(fcCurrentSample, sSensorData.adc.h2a.fcCurrentFiltered);
    44dc:	80 91 5b 28 	lds	r24, 0x285B
    44e0:	90 91 5c 28 	lds	r25, 0x285C
    44e4:	a0 91 5d 28 	lds	r26, 0x285D
    44e8:	b0 91 5e 28 	lds	r27, 0x285E
    44ec:	c9 2e       	mov	r12, r25
    44ee:	da 2e       	mov	r13, r26
    44f0:	eb 2e       	mov	r14, r27
    44f2:	ff 24       	eor	r15, r15
    44f4:	e7 fc       	sbrc	r14, 7
    44f6:	fa 94       	dec	r15
    44f8:	8c 19       	sub	r24, r12
    44fa:	9d 09       	sbc	r25, r13
    44fc:	ae 09       	sbc	r26, r14
    44fe:	bf 09       	sbc	r27, r15
    4500:	6a 01       	movw	r12, r20
    4502:	ee 24       	eor	r14, r14
    4504:	d7 fc       	sbrc	r13, 7
    4506:	e0 94       	com	r14
    4508:	fe 2c       	mov	r15, r14
    450a:	fe 2c       	mov	r15, r14
    450c:	ed 2c       	mov	r14, r13
    450e:	dc 2c       	mov	r13, r12
    4510:	cc 24       	eor	r12, r12
    4512:	8c 0d       	add	r24, r12
    4514:	9d 1d       	adc	r25, r13
    4516:	ae 1d       	adc	r26, r14
    4518:	bf 1d       	adc	r27, r15
    451a:	80 93 5b 28 	sts	0x285B, r24
    451e:	90 93 5c 28 	sts	0x285C, r25
    4522:	a0 93 5d 28 	sts	0x285D, r26
    4526:	b0 93 5e 28 	sts	0x285E, r27
	
	fcPower = ((int32_t) fcVoltageSample) * ((int32_t) fcCurrentSample);
    452a:	da 01       	movw	r26, r20
    452c:	0e 94 06 34 	call	0x680c	; 0x680c <__mulhisi3>
	FILTER32PWR(fcPower, sSensorData.adc.h2a.fcPowerFiltered);
    4530:	c0 90 67 28 	lds	r12, 0x2867
    4534:	d0 90 68 28 	lds	r13, 0x2868
    4538:	e0 90 69 28 	lds	r14, 0x2869
    453c:	f0 90 6a 28 	lds	r15, 0x286A
    4540:	33 27       	eor	r19, r19
    4542:	f7 fc       	sbrc	r15, 7
    4544:	3a 95       	dec	r19
    4546:	2f 2d       	mov	r18, r15
    4548:	1e 2d       	mov	r17, r14
    454a:	0d 2d       	mov	r16, r13
    454c:	c0 1a       	sub	r12, r16
    454e:	d1 0a       	sbc	r13, r17
    4550:	e2 0a       	sbc	r14, r18
    4552:	f3 0a       	sbc	r15, r19
    4554:	c6 0e       	add	r12, r22
    4556:	d7 1e       	adc	r13, r23
    4558:	e8 1e       	adc	r14, r24
    455a:	f9 1e       	adc	r15, r25
    455c:	c0 92 67 28 	sts	0x2867, r12
    4560:	d0 92 68 28 	sts	0x2868, r13
    4564:	e0 92 69 28 	sts	0x2869, r14
    4568:	f0 92 6a 28 	sts	0x286A, r15
	sSensorData.adc.h2a.fcEnergy += fcPower;
    456c:	6b 01       	movw	r12, r22
    456e:	7c 01       	movw	r14, r24
    4570:	ff 0c       	add	r15, r15
    4572:	cc 08       	sbc	r12, r12
    4574:	dc 2c       	mov	r13, r12
    4576:	76 01       	movw	r14, r12
    4578:	9b 01       	movw	r18, r22
    457a:	ac 01       	movw	r20, r24
    457c:	6c 2d       	mov	r22, r12
    457e:	7c 2d       	mov	r23, r12
    4580:	8c 2d       	mov	r24, r12
    4582:	9c 2d       	mov	r25, r12
    4584:	a0 90 6f 28 	lds	r10, 0x286F
    4588:	b0 90 70 28 	lds	r11, 0x2870
    458c:	c0 90 71 28 	lds	r12, 0x2871
    4590:	d0 90 72 28 	lds	r13, 0x2872
    4594:	e0 90 73 28 	lds	r14, 0x2873
    4598:	f0 90 74 28 	lds	r15, 0x2874
    459c:	00 91 75 28 	lds	r16, 0x2875
    45a0:	10 91 76 28 	lds	r17, 0x2876
    45a4:	0e 94 2f 34 	call	0x685e	; 0x685e <__adddi3>
    45a8:	20 93 6f 28 	sts	0x286F, r18
    45ac:	30 93 70 28 	sts	0x2870, r19
    45b0:	40 93 71 28 	sts	0x2871, r20
    45b4:	50 93 72 28 	sts	0x2872, r21
    45b8:	60 93 73 28 	sts	0x2873, r22
    45bc:	70 93 74 28 	sts	0x2874, r23
    45c0:	80 93 75 28 	sts	0x2875, r24
    45c4:	90 93 76 28 	sts	0x2876, r25
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ; /* Should also not be necessary, by this time the conversion should be long over */
    45c8:	80 91 2b 02 	lds	r24, 0x022B
    45cc:	80 ff       	sbrs	r24, 0
    45ce:	fc cf       	rjmp	.-8      	; 0x45c8 <__vector_71+0x3a8>
	ADCA.CH1.INTFLAGS = 0x01;
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	80 93 2b 02 	sts	0x022B, r24
	scVoltageSample = ADCA.CH1RES - sCal.scVoltageOffset;
    45d6:	20 91 12 02 	lds	r18, 0x0212
    45da:	30 91 13 02 	lds	r19, 0x0213
    45de:	80 91 c5 29 	lds	r24, 0x29C5
    45e2:	90 91 c6 29 	lds	r25, 0x29C6
    45e6:	28 1b       	sub	r18, r24
    45e8:	39 0b       	sbc	r19, r25
	FILTER32(scVoltageSample, sSensorData.adc.h2a.scVoltageFiltered);
    45ea:	80 91 5f 28 	lds	r24, 0x285F
    45ee:	90 91 60 28 	lds	r25, 0x2860
    45f2:	a0 91 61 28 	lds	r26, 0x2861
    45f6:	b0 91 62 28 	lds	r27, 0x2862
    45fa:	49 2f       	mov	r20, r25
    45fc:	5a 2f       	mov	r21, r26
    45fe:	6b 2f       	mov	r22, r27
    4600:	77 27       	eor	r23, r23
    4602:	67 fd       	sbrc	r22, 7
    4604:	7a 95       	dec	r23
    4606:	84 1b       	sub	r24, r20
    4608:	95 0b       	sbc	r25, r21
    460a:	a6 0b       	sbc	r26, r22
    460c:	b7 0b       	sbc	r27, r23
    460e:	a9 01       	movw	r20, r18
    4610:	66 27       	eor	r22, r22
    4612:	57 fd       	sbrc	r21, 7
    4614:	60 95       	com	r22
    4616:	76 2f       	mov	r23, r22
    4618:	76 2f       	mov	r23, r22
    461a:	65 2f       	mov	r22, r21
    461c:	54 2f       	mov	r21, r20
    461e:	44 27       	eor	r20, r20
    4620:	84 0f       	add	r24, r20
    4622:	95 1f       	adc	r25, r21
    4624:	a6 1f       	adc	r26, r22
    4626:	b7 1f       	adc	r27, r23
    4628:	80 93 5f 28 	sts	0x285F, r24
    462c:	90 93 60 28 	sts	0x2860, r25
    4630:	a0 93 61 28 	sts	0x2861, r26
    4634:	b0 93 62 28 	sts	0x2862, r27
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4638:	80 91 6b 02 	lds	r24, 0x026B
    463c:	80 ff       	sbrs	r24, 0
    463e:	fc cf       	rjmp	.-8      	; 0x4638 <__vector_71+0x418>
	ADCB.CH1.INTFLAGS = 0x01;
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	80 93 6b 02 	sts	0x026B, r24
	scCurrentSample = ADCB.CH1RES - sCal.scCurrentOffset;
    4646:	40 91 52 02 	lds	r20, 0x0252
    464a:	50 91 53 02 	lds	r21, 0x0253
    464e:	80 91 c7 29 	lds	r24, 0x29C7
    4652:	90 91 c8 29 	lds	r25, 0x29C8
    4656:	48 1b       	sub	r20, r24
    4658:	59 0b       	sbc	r21, r25
	FILTER32(scCurrentSample, sSensorData.adc.h2a.scCurrentFiltered);
    465a:	80 91 63 28 	lds	r24, 0x2863
    465e:	90 91 64 28 	lds	r25, 0x2864
    4662:	a0 91 65 28 	lds	r26, 0x2865
    4666:	b0 91 66 28 	lds	r27, 0x2866
    466a:	c9 2e       	mov	r12, r25
    466c:	da 2e       	mov	r13, r26
    466e:	eb 2e       	mov	r14, r27
    4670:	ff 24       	eor	r15, r15
    4672:	e7 fc       	sbrc	r14, 7
    4674:	fa 94       	dec	r15
    4676:	8c 19       	sub	r24, r12
    4678:	9d 09       	sbc	r25, r13
    467a:	ae 09       	sbc	r26, r14
    467c:	bf 09       	sbc	r27, r15
    467e:	6a 01       	movw	r12, r20
    4680:	ee 24       	eor	r14, r14
    4682:	d7 fc       	sbrc	r13, 7
    4684:	e0 94       	com	r14
    4686:	fe 2c       	mov	r15, r14
    4688:	fe 2c       	mov	r15, r14
    468a:	ed 2c       	mov	r14, r13
    468c:	dc 2c       	mov	r13, r12
    468e:	cc 24       	eor	r12, r12
    4690:	8c 0d       	add	r24, r12
    4692:	9d 1d       	adc	r25, r13
    4694:	ae 1d       	adc	r26, r14
    4696:	bf 1d       	adc	r27, r15
    4698:	80 93 63 28 	sts	0x2863, r24
    469c:	90 93 64 28 	sts	0x2864, r25
    46a0:	a0 93 65 28 	sts	0x2865, r26
    46a4:	b0 93 66 28 	sts	0x2866, r27

	scPower = ((int32_t) scVoltageSample) * ((int32_t) scCurrentSample);
    46a8:	da 01       	movw	r26, r20
    46aa:	0e 94 06 34 	call	0x680c	; 0x680c <__mulhisi3>
	FILTER32PWR(scPower, sSensorData.adc.h2a.scPowerFiltered);
    46ae:	c0 90 6b 28 	lds	r12, 0x286B
    46b2:	d0 90 6c 28 	lds	r13, 0x286C
    46b6:	e0 90 6d 28 	lds	r14, 0x286D
    46ba:	f0 90 6e 28 	lds	r15, 0x286E
    46be:	33 27       	eor	r19, r19
    46c0:	f7 fc       	sbrc	r15, 7
    46c2:	3a 95       	dec	r19
    46c4:	2f 2d       	mov	r18, r15
    46c6:	1e 2d       	mov	r17, r14
    46c8:	0d 2d       	mov	r16, r13
    46ca:	c0 1a       	sub	r12, r16
    46cc:	d1 0a       	sbc	r13, r17
    46ce:	e2 0a       	sbc	r14, r18
    46d0:	f3 0a       	sbc	r15, r19
    46d2:	c6 0e       	add	r12, r22
    46d4:	d7 1e       	adc	r13, r23
    46d6:	e8 1e       	adc	r14, r24
    46d8:	f9 1e       	adc	r15, r25
    46da:	c0 92 6b 28 	sts	0x286B, r12
    46de:	d0 92 6c 28 	sts	0x286C, r13
    46e2:	e0 92 6d 28 	sts	0x286D, r14
    46e6:	f0 92 6e 28 	sts	0x286E, r15
	sSensorData.adc.h2a.scEnergy += scPower;
    46ea:	6b 01       	movw	r12, r22
    46ec:	7c 01       	movw	r14, r24
    46ee:	ff 0c       	add	r15, r15
    46f0:	cc 08       	sbc	r12, r12
    46f2:	dc 2c       	mov	r13, r12
    46f4:	76 01       	movw	r14, r12
    46f6:	9b 01       	movw	r18, r22
    46f8:	ac 01       	movw	r20, r24
    46fa:	6c 2d       	mov	r22, r12
    46fc:	7c 2d       	mov	r23, r12
    46fe:	8c 2d       	mov	r24, r12
    4700:	9c 2d       	mov	r25, r12
    4702:	a0 90 77 28 	lds	r10, 0x2877
    4706:	b0 90 78 28 	lds	r11, 0x2878
    470a:	c0 90 79 28 	lds	r12, 0x2879
    470e:	d0 90 7a 28 	lds	r13, 0x287A
    4712:	e0 90 7b 28 	lds	r14, 0x287B
    4716:	f0 90 7c 28 	lds	r15, 0x287C
    471a:	00 91 7d 28 	lds	r16, 0x287D
    471e:	10 91 7e 28 	lds	r17, 0x287E
    4722:	0e 94 2f 34 	call	0x685e	; 0x685e <__adddi3>
    4726:	20 93 77 28 	sts	0x2877, r18
    472a:	30 93 78 28 	sts	0x2878, r19
    472e:	40 93 79 28 	sts	0x2879, r20
    4732:	50 93 7a 28 	sts	0x287A, r21
    4736:	60 93 7b 28 	sts	0x287B, r22
    473a:	70 93 7c 28 	sts	0x287C, r23
    473e:	80 93 7d 28 	sts	0x287D, r24
    4742:	90 93 7e 28 	sts	0x287E, r25
	
	if(sSensorData.adc.h2a.idealDiodeState != idealDiodePin) {
    4746:	80 91 7f 28 	lds	r24, 0x287F
    474a:	8c 17       	cp	r24, r28
    474c:	91 f0       	breq	.+36     	; 0x4772 <__vector_71+0x552>
		sSensorData.adc.h2a.idealDiodeState = idealDiodePin;
    474e:	c0 93 7f 28 	sts	0x287F, r28
		sSensorData.adc.h2a.idealDiodeTimestamp = sSessionCycleCount;
    4752:	80 91 cb 28 	lds	r24, 0x28CB
    4756:	90 91 cc 28 	lds	r25, 0x28CC
    475a:	a0 91 cd 28 	lds	r26, 0x28CD
    475e:	b0 91 ce 28 	lds	r27, 0x28CE
    4762:	80 93 80 28 	sts	0x2880, r24
    4766:	90 93 81 28 	sts	0x2881, r25
    476a:	a0 93 82 28 	sts	0x2882, r26
    476e:	b0 93 83 28 	sts	0x2883, r27
	if(I_AM_EVA_L || I_AM_EVA_R)
		ISRReadADC_EVA();
	else
		ISRReadADC_H2A();
	
	while(!(ADCA.CH2.INTFLAGS & 0x01)) ;
    4772:	80 91 33 02 	lds	r24, 0x0233
    4776:	80 ff       	sbrs	r24, 0
    4778:	fc cf       	rjmp	.-8      	; 0x4772 <__vector_71+0x552>
	ADCA.CH2.INTFLAGS = 0x01;
    477a:	21 e0       	ldi	r18, 0x01	; 1
    477c:	20 93 33 02 	sts	0x0233, r18
	spRawSample = ADCA.CH2RES;
    4780:	80 91 14 02 	lds	r24, 0x0214
    4784:	90 91 15 02 	lds	r25, 0x0215
    4788:	30 91 55 28 	lds	r19, 0x2855
	if(spRawSample < SPEEDSENSOR_MIDWAY_VAL) {
    478c:	87 3d       	cpi	r24, 0xD7	; 215
    478e:	92 40       	sbci	r25, 0x02	; 2
    4790:	84 f4       	brge	.+32     	; 0x47b2 <__vector_71+0x592>
		sSpeedSensorPosDeglitchCounter = 0;
    4792:	10 92 56 28 	sts	0x2856, r1
		if(sSpeedSensorPreviousState && ++sSpeedSensorNegDeglitchCounter >= SPEEDSENSOR_DEGLITCH)
    4796:	33 23       	and	r19, r19
    4798:	09 f4       	brne	.+2      	; 0x479c <__vector_71+0x57c>
    479a:	66 c0       	rjmp	.+204    	; 0x4868 <__vector_71+0x648>
    479c:	80 91 54 28 	lds	r24, 0x2854
    47a0:	8f 5f       	subi	r24, 0xFF	; 255
    47a2:	80 93 54 28 	sts	0x2854, r24
    47a6:	85 30       	cpi	r24, 0x05	; 5
    47a8:	08 f4       	brcc	.+2      	; 0x47ac <__vector_71+0x58c>
    47aa:	5e c0       	rjmp	.+188    	; 0x4868 <__vector_71+0x648>
			sSpeedSensorPreviousState = 0;
    47ac:	10 92 55 28 	sts	0x2855, r1
    47b0:	5b c0       	rjmp	.+182    	; 0x4868 <__vector_71+0x648>
	}
	else {
		sSpeedSensorNegDeglitchCounter = 0;
    47b2:	10 92 54 28 	sts	0x2854, r1
		if(!sSpeedSensorPreviousState && ++sSpeedSensorPosDeglitchCounter >= SPEEDSENSOR_DEGLITCH) {
    47b6:	31 11       	cpse	r19, r1
    47b8:	57 c0       	rjmp	.+174    	; 0x4868 <__vector_71+0x648>
    47ba:	80 91 56 28 	lds	r24, 0x2856
    47be:	8f 5f       	subi	r24, 0xFF	; 255
    47c0:	80 93 56 28 	sts	0x2856, r24
    47c4:	85 30       	cpi	r24, 0x05	; 5
    47c6:	08 f4       	brcc	.+2      	; 0x47ca <__vector_71+0x5aa>
    47c8:	4f c0       	rjmp	.+158    	; 0x4868 <__vector_71+0x648>
			sSpeedSensorPreviousState = 1;
    47ca:	20 93 55 28 	sts	0x2855, r18
			sSensorData.speedSensorPositivePulsesSeen++;
    47ce:	80 91 b4 28 	lds	r24, 0x28B4
    47d2:	90 91 b5 28 	lds	r25, 0x28B5
    47d6:	a0 91 b6 28 	lds	r26, 0x28B6
    47da:	b0 91 b7 28 	lds	r27, 0x28B7
    47de:	01 96       	adiw	r24, 0x01	; 1
    47e0:	a1 1d       	adc	r26, r1
    47e2:	b1 1d       	adc	r27, r1
    47e4:	80 93 b4 28 	sts	0x28B4, r24
    47e8:	90 93 b5 28 	sts	0x28B5, r25
    47ec:	a0 93 b6 28 	sts	0x28B6, r26
    47f0:	b0 93 b7 28 	sts	0x28B7, r27
			if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp < SPEEDSENSOR_MAX_INTERVAL)
    47f4:	80 91 cb 28 	lds	r24, 0x28CB
    47f8:	90 91 cc 28 	lds	r25, 0x28CC
    47fc:	a0 91 cd 28 	lds	r26, 0x28CD
    4800:	b0 91 ce 28 	lds	r27, 0x28CE
    4804:	40 91 50 28 	lds	r20, 0x2850
    4808:	50 91 51 28 	lds	r21, 0x2851
    480c:	60 91 52 28 	lds	r22, 0x2852
    4810:	70 91 53 28 	lds	r23, 0x2853
    4814:	84 1b       	sub	r24, r20
    4816:	95 0b       	sbc	r25, r21
    4818:	a6 0b       	sbc	r26, r22
    481a:	b7 0b       	sbc	r27, r23
    481c:	82 38       	cpi	r24, 0x82	; 130
    481e:	96 40       	sbci	r25, 0x06	; 6
    4820:	a1 05       	cpc	r26, r1
    4822:	b1 05       	cpc	r27, r1
    4824:	58 f4       	brcc	.+22     	; 0x483c <__vector_71+0x61c>
				sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    4826:	80 91 cb 28 	lds	r24, 0x28CB
    482a:	90 91 cc 28 	lds	r25, 0x28CC
    482e:	a0 91 cd 28 	lds	r26, 0x28CD
    4832:	b0 91 ce 28 	lds	r27, 0x28CE
    4836:	84 1b       	sub	r24, r20
    4838:	95 0b       	sbc	r25, r21
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <__vector_71+0x620>
			else
				sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    483c:	82 e8       	ldi	r24, 0x82	; 130
    483e:	96 e0       	ldi	r25, 0x06	; 6
    4840:	80 93 06 20 	sts	0x2006, r24
    4844:	90 93 07 20 	sts	0x2007, r25
			sSpeedSensorPreviousValidEdgeTimestamp = sSessionCycleCount;
    4848:	80 91 cb 28 	lds	r24, 0x28CB
    484c:	90 91 cc 28 	lds	r25, 0x28CC
    4850:	a0 91 cd 28 	lds	r26, 0x28CD
    4854:	b0 91 ce 28 	lds	r27, 0x28CE
    4858:	80 93 50 28 	sts	0x2850, r24
    485c:	90 93 51 28 	sts	0x2851, r25
    4860:	a0 93 52 28 	sts	0x2852, r26
    4864:	b0 93 53 28 	sts	0x2853, r27
		}
	}
	
	if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) SPEEDSENSOR_MAX_INTERVAL)
    4868:	40 91 cb 28 	lds	r20, 0x28CB
    486c:	50 91 cc 28 	lds	r21, 0x28CC
    4870:	60 91 cd 28 	lds	r22, 0x28CD
    4874:	70 91 ce 28 	lds	r23, 0x28CE
    4878:	80 91 50 28 	lds	r24, 0x2850
    487c:	90 91 51 28 	lds	r25, 0x2851
    4880:	a0 91 52 28 	lds	r26, 0x2852
    4884:	b0 91 53 28 	lds	r27, 0x2853
    4888:	48 1b       	sub	r20, r24
    488a:	59 0b       	sbc	r21, r25
    488c:	6a 0b       	sbc	r22, r26
    488e:	7b 0b       	sbc	r23, r27
    4890:	43 38       	cpi	r20, 0x83	; 131
    4892:	56 40       	sbci	r21, 0x06	; 6
    4894:	61 05       	cpc	r22, r1
    4896:	71 05       	cpc	r23, r1
    4898:	38 f0       	brcs	.+14     	; 0x48a8 <__vector_71+0x688>
		sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    489a:	82 e8       	ldi	r24, 0x82	; 130
    489c:	96 e0       	ldi	r25, 0x06	; 6
    489e:	80 93 06 20 	sts	0x2006, r24
    48a2:	90 93 07 20 	sts	0x2007, r25
    48a6:	27 c0       	rjmp	.+78     	; 0x48f6 <__vector_71+0x6d6>
	else if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) sSpeedSensorLastValidInterval)
    48a8:	40 91 cb 28 	lds	r20, 0x28CB
    48ac:	50 91 cc 28 	lds	r21, 0x28CC
    48b0:	60 91 cd 28 	lds	r22, 0x28CD
    48b4:	70 91 ce 28 	lds	r23, 0x28CE
    48b8:	48 1b       	sub	r20, r24
    48ba:	59 0b       	sbc	r21, r25
    48bc:	6a 0b       	sbc	r22, r26
    48be:	7b 0b       	sbc	r23, r27
    48c0:	c0 90 06 20 	lds	r12, 0x2006
    48c4:	d0 90 07 20 	lds	r13, 0x2007
    48c8:	ee 24       	eor	r14, r14
    48ca:	d7 fc       	sbrc	r13, 7
    48cc:	e0 94       	com	r14
    48ce:	fe 2c       	mov	r15, r14
    48d0:	c4 16       	cp	r12, r20
    48d2:	d5 06       	cpc	r13, r21
    48d4:	e6 06       	cpc	r14, r22
    48d6:	f7 06       	cpc	r15, r23
    48d8:	70 f4       	brcc	.+28     	; 0x48f6 <__vector_71+0x6d6>
		sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    48da:	40 91 cb 28 	lds	r20, 0x28CB
    48de:	50 91 cc 28 	lds	r21, 0x28CC
    48e2:	60 91 cd 28 	lds	r22, 0x28CD
    48e6:	70 91 ce 28 	lds	r23, 0x28CE
    48ea:	48 1b       	sub	r20, r24
    48ec:	59 0b       	sbc	r21, r25
    48ee:	40 93 06 20 	sts	0x2006, r20
    48f2:	50 93 07 20 	sts	0x2007, r21
		
	FILTER32(sSpeedSensorLastValidInterval, sSensorData.speedSensorPulseInterval);
    48f6:	80 91 b0 28 	lds	r24, 0x28B0
    48fa:	90 91 b1 28 	lds	r25, 0x28B1
    48fe:	a0 91 b2 28 	lds	r26, 0x28B2
    4902:	b0 91 b3 28 	lds	r27, 0x28B3
    4906:	49 2f       	mov	r20, r25
    4908:	5a 2f       	mov	r21, r26
    490a:	6b 2f       	mov	r22, r27
    490c:	77 27       	eor	r23, r23
    490e:	67 fd       	sbrc	r22, 7
    4910:	7a 95       	dec	r23
    4912:	84 1b       	sub	r24, r20
    4914:	95 0b       	sbc	r25, r21
    4916:	a6 0b       	sbc	r26, r22
    4918:	b7 0b       	sbc	r27, r23
    491a:	40 91 06 20 	lds	r20, 0x2006
    491e:	50 91 07 20 	lds	r21, 0x2007
    4922:	66 27       	eor	r22, r22
    4924:	57 fd       	sbrc	r21, 7
    4926:	60 95       	com	r22
    4928:	76 2f       	mov	r23, r22
    492a:	76 2f       	mov	r23, r22
    492c:	65 2f       	mov	r22, r21
    492e:	54 2f       	mov	r21, r20
    4930:	44 27       	eor	r20, r20
    4932:	84 0f       	add	r24, r20
    4934:	95 1f       	adc	r25, r21
    4936:	a6 1f       	adc	r26, r22
    4938:	b7 1f       	adc	r27, r23
    493a:	80 93 b0 28 	sts	0x28B0, r24
    493e:	90 93 b1 28 	sts	0x28B1, r25
    4942:	a0 93 b2 28 	sts	0x28B2, r26
    4946:	b0 93 b3 28 	sts	0x28B3, r27

	while(!(ADCB.CH2.INTFLAGS & 0x01)) ;
    494a:	80 91 73 02 	lds	r24, 0x0273
    494e:	80 ff       	sbrs	r24, 0
    4950:	fc cf       	rjmp	.-8      	; 0x494a <__vector_71+0x72a>
	ADCB.CH2.INTFLAGS = 0x01;
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	80 93 73 02 	sts	0x0273, r24
	driverTempSample = ADCB.CH2RES;
    4958:	40 91 54 02 	lds	r20, 0x0254
    495c:	50 91 55 02 	lds	r21, 0x0255
	FILTER32(driverTempSample, sSensorData.driverTempFiltered);
    4960:	80 91 84 28 	lds	r24, 0x2884
    4964:	90 91 85 28 	lds	r25, 0x2885
    4968:	a0 91 86 28 	lds	r26, 0x2886
    496c:	b0 91 87 28 	lds	r27, 0x2887
    4970:	c9 2e       	mov	r12, r25
    4972:	da 2e       	mov	r13, r26
    4974:	eb 2e       	mov	r14, r27
    4976:	ff 24       	eor	r15, r15
    4978:	e7 fc       	sbrc	r14, 7
    497a:	fa 94       	dec	r15
    497c:	8c 19       	sub	r24, r12
    497e:	9d 09       	sbc	r25, r13
    4980:	ae 09       	sbc	r26, r14
    4982:	bf 09       	sbc	r27, r15
    4984:	66 27       	eor	r22, r22
    4986:	57 fd       	sbrc	r21, 7
    4988:	60 95       	com	r22
    498a:	76 2f       	mov	r23, r22
    498c:	76 2f       	mov	r23, r22
    498e:	65 2f       	mov	r22, r21
    4990:	54 2f       	mov	r21, r20
    4992:	44 27       	eor	r20, r20
    4994:	84 0f       	add	r24, r20
    4996:	95 1f       	adc	r25, r21
    4998:	a6 1f       	adc	r26, r22
    499a:	b7 1f       	adc	r27, r23
    499c:	80 93 84 28 	sts	0x2884, r24
    49a0:	90 93 85 28 	sts	0x2885, r25
    49a4:	a0 93 86 28 	sts	0x2886, r26
    49a8:	b0 93 87 28 	sts	0x2887, r27
	
	while(!(ADCA.CH3.INTFLAGS & 0x01)) ;
    49ac:	80 91 3b 02 	lds	r24, 0x023B
    49b0:	80 ff       	sbrs	r24, 0
    49b2:	fc cf       	rjmp	.-8      	; 0x49ac <__vector_71+0x78c>
	ADCA.CH3.INTFLAGS = 0x01;
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	80 93 3b 02 	sts	0x023B, r24
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
    49ba:	80 91 7b 02 	lds	r24, 0x027B
    49be:	80 ff       	sbrs	r24, 0
    49c0:	fc cf       	rjmp	.-8      	; 0x49ba <__vector_71+0x79a>
	ADCB.CH3.INTFLAGS = 0x01;
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	80 93 7b 02 	sts	0x027B, r24
	if(sSamplingVin) {
    49c8:	c0 91 4f 28 	lds	r28, 0x284F
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
    49cc:	20 91 16 02 	lds	r18, 0x0216
    49d0:	30 91 17 02 	lds	r19, 0x0217
	
	while(!(ADCA.CH3.INTFLAGS & 0x01)) ;
	ADCA.CH3.INTFLAGS = 0x01;
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
	ADCB.CH3.INTFLAGS = 0x01;
	if(sSamplingVin) {
    49d4:	cc 23       	and	r28, r28
    49d6:	09 f4       	brne	.+2      	; 0x49da <__vector_71+0x7ba>
    49d8:	b8 c0       	rjmp	.+368    	; 0x4b4a <__vector_71+0x92a>
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
    49da:	80 91 dd 29 	lds	r24, 0x29DD
    49de:	90 91 de 29 	lds	r25, 0x29DE
    49e2:	28 1b       	sub	r18, r24
    49e4:	39 0b       	sbc	r19, r25
		FILTER32(inVoltageSample, sSensorData.inVoltageFiltered);
    49e6:	80 91 90 28 	lds	r24, 0x2890
    49ea:	90 91 91 28 	lds	r25, 0x2891
    49ee:	a0 91 92 28 	lds	r26, 0x2892
    49f2:	b0 91 93 28 	lds	r27, 0x2893
    49f6:	49 2f       	mov	r20, r25
    49f8:	5a 2f       	mov	r21, r26
    49fa:	6b 2f       	mov	r22, r27
    49fc:	77 27       	eor	r23, r23
    49fe:	67 fd       	sbrc	r22, 7
    4a00:	7a 95       	dec	r23
    4a02:	84 1b       	sub	r24, r20
    4a04:	95 0b       	sbc	r25, r21
    4a06:	a6 0b       	sbc	r26, r22
    4a08:	b7 0b       	sbc	r27, r23
    4a0a:	a9 01       	movw	r20, r18
    4a0c:	66 27       	eor	r22, r22
    4a0e:	57 fd       	sbrc	r21, 7
    4a10:	60 95       	com	r22
    4a12:	76 2f       	mov	r23, r22
    4a14:	76 2f       	mov	r23, r22
    4a16:	65 2f       	mov	r22, r21
    4a18:	54 2f       	mov	r21, r20
    4a1a:	44 27       	eor	r20, r20
    4a1c:	84 0f       	add	r24, r20
    4a1e:	95 1f       	adc	r25, r21
    4a20:	a6 1f       	adc	r26, r22
    4a22:	b7 1f       	adc	r27, r23
    4a24:	80 93 90 28 	sts	0x2890, r24
    4a28:	90 93 91 28 	sts	0x2891, r25
    4a2c:	a0 93 92 28 	sts	0x2892, r26
    4a30:	b0 93 93 28 	sts	0x2893, r27
		inCurrentSample = ADCB.CH3RES - sCal.inCurrentOffset;
    4a34:	40 91 56 02 	lds	r20, 0x0256
    4a38:	50 91 57 02 	lds	r21, 0x0257
    4a3c:	80 91 df 29 	lds	r24, 0x29DF
    4a40:	90 91 e0 29 	lds	r25, 0x29E0
    4a44:	48 1b       	sub	r20, r24
    4a46:	59 0b       	sbc	r21, r25
		FILTER32(inCurrentSample, sSensorData.inCurrentFiltered);
    4a48:	80 91 94 28 	lds	r24, 0x2894
    4a4c:	90 91 95 28 	lds	r25, 0x2895
    4a50:	a0 91 96 28 	lds	r26, 0x2896
    4a54:	b0 91 97 28 	lds	r27, 0x2897
    4a58:	c9 2e       	mov	r12, r25
    4a5a:	da 2e       	mov	r13, r26
    4a5c:	eb 2e       	mov	r14, r27
    4a5e:	ff 24       	eor	r15, r15
    4a60:	e7 fc       	sbrc	r14, 7
    4a62:	fa 94       	dec	r15
    4a64:	8c 19       	sub	r24, r12
    4a66:	9d 09       	sbc	r25, r13
    4a68:	ae 09       	sbc	r26, r14
    4a6a:	bf 09       	sbc	r27, r15
    4a6c:	6a 01       	movw	r12, r20
    4a6e:	ee 24       	eor	r14, r14
    4a70:	d7 fc       	sbrc	r13, 7
    4a72:	e0 94       	com	r14
    4a74:	fe 2c       	mov	r15, r14
    4a76:	fe 2c       	mov	r15, r14
    4a78:	ed 2c       	mov	r14, r13
    4a7a:	dc 2c       	mov	r13, r12
    4a7c:	cc 24       	eor	r12, r12
    4a7e:	8c 0d       	add	r24, r12
    4a80:	9d 1d       	adc	r25, r13
    4a82:	ae 1d       	adc	r26, r14
    4a84:	bf 1d       	adc	r27, r15
    4a86:	80 93 94 28 	sts	0x2894, r24
    4a8a:	90 93 95 28 	sts	0x2895, r25
    4a8e:	a0 93 96 28 	sts	0x2896, r26
    4a92:	b0 93 97 28 	sts	0x2897, r27
		inPower = ((int32_t) inVoltageSample) * ((int32_t) inCurrentSample);
    4a96:	da 01       	movw	r26, r20
    4a98:	0e 94 06 34 	call	0x680c	; 0x680c <__mulhisi3>
		FILTER32PWR(inPower, sSensorData.inPowerFiltered);
    4a9c:	00 91 9c 28 	lds	r16, 0x289C
    4aa0:	10 91 9d 28 	lds	r17, 0x289D
    4aa4:	20 91 9e 28 	lds	r18, 0x289E
    4aa8:	30 91 9f 28 	lds	r19, 0x289F
    4aac:	c1 2e       	mov	r12, r17
    4aae:	d2 2e       	mov	r13, r18
    4ab0:	e3 2e       	mov	r14, r19
    4ab2:	ff 24       	eor	r15, r15
    4ab4:	e7 fc       	sbrc	r14, 7
    4ab6:	fa 94       	dec	r15
    4ab8:	0c 19       	sub	r16, r12
    4aba:	1d 09       	sbc	r17, r13
    4abc:	2e 09       	sbc	r18, r14
    4abe:	3f 09       	sbc	r19, r15
    4ac0:	06 0f       	add	r16, r22
    4ac2:	17 1f       	adc	r17, r23
    4ac4:	28 1f       	adc	r18, r24
    4ac6:	39 1f       	adc	r19, r25
    4ac8:	00 93 9c 28 	sts	0x289C, r16
    4acc:	10 93 9d 28 	sts	0x289D, r17
    4ad0:	20 93 9e 28 	sts	0x289E, r18
    4ad4:	30 93 9f 28 	sts	0x289F, r19
		sSensorData.inEnergy +=  2 * inPower;
    4ad8:	dc 01       	movw	r26, r24
    4ada:	cb 01       	movw	r24, r22
    4adc:	88 0f       	add	r24, r24
    4ade:	99 1f       	adc	r25, r25
    4ae0:	aa 1f       	adc	r26, r26
    4ae2:	bb 1f       	adc	r27, r27
    4ae4:	6c 01       	movw	r12, r24
    4ae6:	7d 01       	movw	r14, r26
    4ae8:	ff 0c       	add	r15, r15
    4aea:	cc 08       	sbc	r12, r12
    4aec:	dc 2c       	mov	r13, r12
    4aee:	76 01       	movw	r14, r12
    4af0:	9c 01       	movw	r18, r24
    4af2:	ad 01       	movw	r20, r26
    4af4:	6c 2d       	mov	r22, r12
    4af6:	7c 2d       	mov	r23, r12
    4af8:	8c 2d       	mov	r24, r12
    4afa:	9c 2d       	mov	r25, r12
    4afc:	a0 90 a8 28 	lds	r10, 0x28A8
    4b00:	b0 90 a9 28 	lds	r11, 0x28A9
    4b04:	c0 90 aa 28 	lds	r12, 0x28AA
    4b08:	d0 90 ab 28 	lds	r13, 0x28AB
    4b0c:	e0 90 ac 28 	lds	r14, 0x28AC
    4b10:	f0 90 ad 28 	lds	r15, 0x28AD
    4b14:	00 91 ae 28 	lds	r16, 0x28AE
    4b18:	10 91 af 28 	lds	r17, 0x28AF
    4b1c:	0e 94 2f 34 	call	0x685e	; 0x685e <__adddi3>
    4b20:	20 93 a8 28 	sts	0x28A8, r18
    4b24:	30 93 a9 28 	sts	0x28A9, r19
    4b28:	40 93 aa 28 	sts	0x28AA, r20
    4b2c:	50 93 ab 28 	sts	0x28AB, r21
    4b30:	60 93 ac 28 	sts	0x28AC, r22
    4b34:	70 93 ad 28 	sts	0x28AD, r23
    4b38:	80 93 ae 28 	sts	0x28AE, r24
    4b3c:	90 93 af 28 	sts	0x28AF, r25
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN12_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_VMOTOR on PB4 vs V33/2 on PA1 */
    4b40:	81 e6       	ldi	r24, 0x61	; 97
    4b42:	80 93 39 02 	sts	0x0239, r24
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_IMOTOR on PB5 vs V33/2 on PB1 */
    4b46:	89 e2       	ldi	r24, 0x29	; 41
    4b48:	b7 c0       	rjmp	.+366    	; 0x4cb8 <__vector_71+0xa98>
	}
	else {
		motorVoltageSample = ADCA.CH3RES - sCal.motorVoltageOffset;
    4b4a:	80 91 d9 29 	lds	r24, 0x29D9
    4b4e:	90 91 da 29 	lds	r25, 0x29DA
    4b52:	28 1b       	sub	r18, r24
    4b54:	39 0b       	sbc	r19, r25
		FILTER32(motorVoltageSample, sSensorData.motorVoltageFiltered);	
    4b56:	80 91 88 28 	lds	r24, 0x2888
    4b5a:	90 91 89 28 	lds	r25, 0x2889
    4b5e:	a0 91 8a 28 	lds	r26, 0x288A
    4b62:	b0 91 8b 28 	lds	r27, 0x288B
    4b66:	49 2f       	mov	r20, r25
    4b68:	5a 2f       	mov	r21, r26
    4b6a:	6b 2f       	mov	r22, r27
    4b6c:	77 27       	eor	r23, r23
    4b6e:	67 fd       	sbrc	r22, 7
    4b70:	7a 95       	dec	r23
    4b72:	84 1b       	sub	r24, r20
    4b74:	95 0b       	sbc	r25, r21
    4b76:	a6 0b       	sbc	r26, r22
    4b78:	b7 0b       	sbc	r27, r23
    4b7a:	a9 01       	movw	r20, r18
    4b7c:	66 27       	eor	r22, r22
    4b7e:	57 fd       	sbrc	r21, 7
    4b80:	60 95       	com	r22
    4b82:	76 2f       	mov	r23, r22
    4b84:	76 2f       	mov	r23, r22
    4b86:	65 2f       	mov	r22, r21
    4b88:	54 2f       	mov	r21, r20
    4b8a:	44 27       	eor	r20, r20
    4b8c:	84 0f       	add	r24, r20
    4b8e:	95 1f       	adc	r25, r21
    4b90:	a6 1f       	adc	r26, r22
    4b92:	b7 1f       	adc	r27, r23
    4b94:	80 93 88 28 	sts	0x2888, r24
    4b98:	90 93 89 28 	sts	0x2889, r25
    4b9c:	a0 93 8a 28 	sts	0x288A, r26
    4ba0:	b0 93 8b 28 	sts	0x288B, r27
		motorCurrentSample = ADCB.CH3RES - sCal.motorCurrentOffset;
    4ba4:	40 91 56 02 	lds	r20, 0x0256
    4ba8:	50 91 57 02 	lds	r21, 0x0257
    4bac:	80 91 db 29 	lds	r24, 0x29DB
    4bb0:	90 91 dc 29 	lds	r25, 0x29DC
    4bb4:	48 1b       	sub	r20, r24
    4bb6:	59 0b       	sbc	r21, r25
		FILTER32(motorCurrentSample, sSensorData.motorCurrentFiltered);
    4bb8:	80 91 8c 28 	lds	r24, 0x288C
    4bbc:	90 91 8d 28 	lds	r25, 0x288D
    4bc0:	a0 91 8e 28 	lds	r26, 0x288E
    4bc4:	b0 91 8f 28 	lds	r27, 0x288F
    4bc8:	c9 2e       	mov	r12, r25
    4bca:	da 2e       	mov	r13, r26
    4bcc:	eb 2e       	mov	r14, r27
    4bce:	ff 24       	eor	r15, r15
    4bd0:	e7 fc       	sbrc	r14, 7
    4bd2:	fa 94       	dec	r15
    4bd4:	8c 19       	sub	r24, r12
    4bd6:	9d 09       	sbc	r25, r13
    4bd8:	ae 09       	sbc	r26, r14
    4bda:	bf 09       	sbc	r27, r15
    4bdc:	6a 01       	movw	r12, r20
    4bde:	ee 24       	eor	r14, r14
    4be0:	d7 fc       	sbrc	r13, 7
    4be2:	e0 94       	com	r14
    4be4:	fe 2c       	mov	r15, r14
    4be6:	fe 2c       	mov	r15, r14
    4be8:	ed 2c       	mov	r14, r13
    4bea:	dc 2c       	mov	r13, r12
    4bec:	cc 24       	eor	r12, r12
    4bee:	8c 0d       	add	r24, r12
    4bf0:	9d 1d       	adc	r25, r13
    4bf2:	ae 1d       	adc	r26, r14
    4bf4:	bf 1d       	adc	r27, r15
    4bf6:	80 93 8c 28 	sts	0x288C, r24
    4bfa:	90 93 8d 28 	sts	0x288D, r25
    4bfe:	a0 93 8e 28 	sts	0x288E, r26
    4c02:	b0 93 8f 28 	sts	0x288F, r27
		motorPower = ((int32_t) motorVoltageSample) * ((int32_t) motorCurrentSample);
    4c06:	da 01       	movw	r26, r20
    4c08:	0e 94 06 34 	call	0x680c	; 0x680c <__mulhisi3>
		FILTER32PWR(motorPower, sSensorData.motorPowerFiltered);
    4c0c:	00 91 98 28 	lds	r16, 0x2898
    4c10:	10 91 99 28 	lds	r17, 0x2899
    4c14:	20 91 9a 28 	lds	r18, 0x289A
    4c18:	30 91 9b 28 	lds	r19, 0x289B
    4c1c:	c1 2e       	mov	r12, r17
    4c1e:	d2 2e       	mov	r13, r18
    4c20:	e3 2e       	mov	r14, r19
    4c22:	ff 24       	eor	r15, r15
    4c24:	e7 fc       	sbrc	r14, 7
    4c26:	fa 94       	dec	r15
    4c28:	0c 19       	sub	r16, r12
    4c2a:	1d 09       	sbc	r17, r13
    4c2c:	2e 09       	sbc	r18, r14
    4c2e:	3f 09       	sbc	r19, r15
    4c30:	06 0f       	add	r16, r22
    4c32:	17 1f       	adc	r17, r23
    4c34:	28 1f       	adc	r18, r24
    4c36:	39 1f       	adc	r19, r25
    4c38:	00 93 98 28 	sts	0x2898, r16
    4c3c:	10 93 99 28 	sts	0x2899, r17
    4c40:	20 93 9a 28 	sts	0x289A, r18
    4c44:	30 93 9b 28 	sts	0x289B, r19
		sSensorData.motorEnergy += 2 * motorPower;
    4c48:	dc 01       	movw	r26, r24
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	88 0f       	add	r24, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	aa 1f       	adc	r26, r26
    4c52:	bb 1f       	adc	r27, r27
    4c54:	6c 01       	movw	r12, r24
    4c56:	7d 01       	movw	r14, r26
    4c58:	ff 0c       	add	r15, r15
    4c5a:	cc 08       	sbc	r12, r12
    4c5c:	dc 2c       	mov	r13, r12
    4c5e:	76 01       	movw	r14, r12
    4c60:	9c 01       	movw	r18, r24
    4c62:	ad 01       	movw	r20, r26
    4c64:	6c 2d       	mov	r22, r12
    4c66:	7c 2d       	mov	r23, r12
    4c68:	8c 2d       	mov	r24, r12
    4c6a:	9c 2d       	mov	r25, r12
    4c6c:	a0 90 a0 28 	lds	r10, 0x28A0
    4c70:	b0 90 a1 28 	lds	r11, 0x28A1
    4c74:	c0 90 a2 28 	lds	r12, 0x28A2
    4c78:	d0 90 a3 28 	lds	r13, 0x28A3
    4c7c:	e0 90 a4 28 	lds	r14, 0x28A4
    4c80:	f0 90 a5 28 	lds	r15, 0x28A5
    4c84:	00 91 a6 28 	lds	r16, 0x28A6
    4c88:	10 91 a7 28 	lds	r17, 0x28A7
    4c8c:	0e 94 2f 34 	call	0x685e	; 0x685e <__adddi3>
    4c90:	20 93 a0 28 	sts	0x28A0, r18
    4c94:	30 93 a1 28 	sts	0x28A1, r19
    4c98:	40 93 a2 28 	sts	0x28A2, r20
    4c9c:	50 93 a3 28 	sts	0x28A3, r21
    4ca0:	60 93 a4 28 	sts	0x28A4, r22
    4ca4:	70 93 a5 28 	sts	0x28A5, r23
    4ca8:	80 93 a6 28 	sts	0x28A6, r24
    4cac:	90 93 a7 28 	sts	0x28A7, r25
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN11_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_Vin on PB3 vs V33/2 on PA1 */
    4cb0:	89 e5       	ldi	r24, 0x59	; 89
    4cb2:	80 93 39 02 	sts	0x0239, r24
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure Iin on PB7 vs V33/2 on PB1 */
    4cb6:	89 e3       	ldi	r24, 0x39	; 57
    4cb8:	80 93 79 02 	sts	0x0279, r24
	}
	sSamplingVin = !sSamplingVin;
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	c1 11       	cpse	r28, r1
    4cc0:	80 e0       	ldi	r24, 0x00	; 0
    4cc2:	80 93 4f 28 	sts	0x284F, r24

	/* PWM frequency and duty cycle */
	if(pwmEn) {
    4cc6:	d1 11       	cpse	r29, r1
    4cc8:	2a c0       	rjmp	.+84     	; 0x4d1e <__vector_71+0xafe>
		sSensorData.pwmDutyCycle -= sSensorData.pwmDutyCycle >> 8;
    4cca:	80 91 c4 28 	lds	r24, 0x28C4
    4cce:	90 91 c5 28 	lds	r25, 0x28C5
    4cd2:	29 2f       	mov	r18, r25
    4cd4:	33 27       	eor	r19, r19
    4cd6:	82 1b       	sub	r24, r18
    4cd8:	93 0b       	sbc	r25, r19
		if(pwm)
    4cda:	86 fe       	sbrs	r8, 6
    4cdc:	02 c0       	rjmp	.+4      	; 0x4ce2 <__vector_71+0xac2>
			sSensorData.pwmDutyCycle += PWM_DC_FS;
    4cde:	81 50       	subi	r24, 0x01	; 1
    4ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce2:	80 93 c4 28 	sts	0x28C4, r24
    4ce6:	90 93 c5 28 	sts	0x28C5, r25
		sSensorData.pwmFrequency -= sSensorData.pwmFrequency >> 8;
    4cea:	20 91 c2 28 	lds	r18, 0x28C2
    4cee:	30 91 c3 28 	lds	r19, 0x28C3
    4cf2:	83 2f       	mov	r24, r19
    4cf4:	99 27       	eor	r25, r25
    4cf6:	28 1b       	sub	r18, r24
    4cf8:	39 0b       	sbc	r19, r25
		sSensorData.pwmFrequency += (curPWMCycles - sPrevPWMCycles) << PWM_FREQ_FILTER_SHIFT;
    4cfa:	89 2d       	mov	r24, r9
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	40 91 4e 28 	lds	r20, 0x284E
    4d02:	84 1b       	sub	r24, r20
    4d04:	91 09       	sbc	r25, r1
    4d06:	63 e0       	ldi	r22, 0x03	; 3
    4d08:	88 0f       	add	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	6a 95       	dec	r22
    4d0e:	e1 f7       	brne	.-8      	; 0x4d08 <__vector_71+0xae8>
    4d10:	28 0f       	add	r18, r24
    4d12:	39 1f       	adc	r19, r25
    4d14:	20 93 c2 28 	sts	0x28C2, r18
    4d18:	30 93 c3 28 	sts	0x28C3, r19
    4d1c:	08 c0       	rjmp	.+16     	; 0x4d2e <__vector_71+0xb0e>
	}
	else {
		sSensorData.pwmDutyCycle = 0;
    4d1e:	10 92 c4 28 	sts	0x28C4, r1
    4d22:	10 92 c5 28 	sts	0x28C5, r1
		sSensorData.pwmFrequency = 0;
    4d26:	10 92 c2 28 	sts	0x28C2, r1
    4d2a:	10 92 c3 28 	sts	0x28C3, r1
	}
	sPrevPWMCycles = curPWMCycles;
    4d2e:	90 92 4e 28 	sts	0x284E, r9
	
	/* Pin states */
	if(sSensorData.selFPState != selFPPin) {
    4d32:	80 91 b8 28 	lds	r24, 0x28B8
    4d36:	8f 17       	cp	r24, r31
    4d38:	91 f0       	breq	.+36     	; 0x4d5e <__vector_71+0xb3e>
		sSensorData.selFPState = selFPPin;
    4d3a:	f0 93 b8 28 	sts	0x28B8, r31
		sSensorData.selFPTimestamp = sSessionCycleCount;
    4d3e:	80 91 cb 28 	lds	r24, 0x28CB
    4d42:	90 91 cc 28 	lds	r25, 0x28CC
    4d46:	a0 91 cd 28 	lds	r26, 0x28CD
    4d4a:	b0 91 ce 28 	lds	r27, 0x28CE
    4d4e:	80 93 ba 28 	sts	0x28BA, r24
    4d52:	90 93 bb 28 	sts	0x28BB, r25
    4d56:	a0 93 bc 28 	sts	0x28BC, r26
    4d5a:	b0 93 bd 28 	sts	0x28BD, r27
	}
	
	if(sSensorData.selCCState != selCCPin) {
    4d5e:	80 91 b9 28 	lds	r24, 0x28B9
    4d62:	8e 17       	cp	r24, r30
    4d64:	09 f4       	brne	.+2      	; 0x4d68 <__vector_71+0xb48>
    4d66:	45 c0       	rjmp	.+138    	; 0x4df2 <__vector_71+0xbd2>
		sSensorData.selCCState = selCCPin;
    4d68:	e0 93 b9 28 	sts	0x28B9, r30
		sSensorData.selCCTimestamp = sSessionCycleCount;
    4d6c:	80 91 cb 28 	lds	r24, 0x28CB
    4d70:	90 91 cc 28 	lds	r25, 0x28CC
    4d74:	a0 91 cd 28 	lds	r26, 0x28CD
    4d78:	b0 91 ce 28 	lds	r27, 0x28CE
    4d7c:	80 93 be 28 	sts	0x28BE, r24
    4d80:	90 93 bf 28 	sts	0x28BF, r25
    4d84:	a0 93 c0 28 	sts	0x28C0, r26
    4d88:	b0 93 c1 28 	sts	0x28C1, r27
		/* Did CC just get enabled? */
		if(!selCCPin && sSensorData.speedSensorPulseInterval < (((int32_t) CC_MAX_INTERVAL) << 16)) {
    4d8c:	e1 11       	cpse	r30, r1
    4d8e:	2f c0       	rjmp	.+94     	; 0x4dee <__vector_71+0xbce>
    4d90:	80 91 b0 28 	lds	r24, 0x28B0
    4d94:	90 91 b1 28 	lds	r25, 0x28B1
    4d98:	a0 91 b2 28 	lds	r26, 0x28B2
    4d9c:	b0 91 b3 28 	lds	r27, 0x28B3
    4da0:	00 97       	sbiw	r24, 0x00	; 0
    4da2:	46 ea       	ldi	r20, 0xA6	; 166
    4da4:	a4 07       	cpc	r26, r20
    4da6:	b1 05       	cpc	r27, r1
    4da8:	14 f5       	brge	.+68     	; 0x4dee <__vector_71+0xbce>
			sCCIsOn = 1;
    4daa:	21 e0       	ldi	r18, 0x01	; 1
    4dac:	20 93 4d 28 	sts	0x284D, r18
			sSensorData.ccPower = CC_DEFAULT_POWER;
    4db0:	22 e0       	ldi	r18, 0x02	; 2
    4db2:	20 93 ca 28 	sts	0x28CA, r18
			sCCPrevPulseInterval = sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    4db6:	80 93 c6 28 	sts	0x28C6, r24
    4dba:	90 93 c7 28 	sts	0x28C7, r25
    4dbe:	a0 93 c8 28 	sts	0x28C8, r26
    4dc2:	b0 93 c9 28 	sts	0x28C9, r27
    4dc6:	80 93 49 28 	sts	0x2849, r24
    4dca:	90 93 4a 28 	sts	0x284A, r25
    4dce:	a0 93 4b 28 	sts	0x284B, r26
    4dd2:	b0 93 4c 28 	sts	0x284C, r27
			sCCRunTimer = CC_REG_CYCLES;
    4dd6:	88 e8       	ldi	r24, 0x88	; 136
    4dd8:	93 e1       	ldi	r25, 0x13	; 19
    4dda:	80 93 47 28 	sts	0x2847, r24
    4dde:	90 93 48 28 	sts	0x2848, r25
			SET_CC_DRIVE(sSensorData.ccPower);
    4de2:	85 e0       	ldi	r24, 0x05	; 5
    4de4:	80 93 85 06 	sts	0x0685, r24
    4de8:	20 93 86 06 	sts	0x0686, r18
    4dec:	02 c0       	rjmp	.+4      	; 0x4df2 <__vector_71+0xbd2>
		}
		else
			sCCIsOn = 0;
    4dee:	10 92 4d 28 	sts	0x284D, r1
	}
	
	if(sCCIsOn && !--sCCRunTimer) {
    4df2:	80 91 4d 28 	lds	r24, 0x284D
    4df6:	88 23       	and	r24, r24
    4df8:	09 f4       	brne	.+2      	; 0x4dfc <__vector_71+0xbdc>
    4dfa:	6c c0       	rjmp	.+216    	; 0x4ed4 <__vector_71+0xcb4>
    4dfc:	80 91 47 28 	lds	r24, 0x2847
    4e00:	90 91 48 28 	lds	r25, 0x2848
    4e04:	01 97       	sbiw	r24, 0x01	; 1
    4e06:	80 93 47 28 	sts	0x2847, r24
    4e0a:	90 93 48 28 	sts	0x2848, r25
    4e0e:	89 2b       	or	r24, r25
    4e10:	09 f0       	breq	.+2      	; 0x4e14 <__vector_71+0xbf4>
    4e12:	60 c0       	rjmp	.+192    	; 0x4ed4 <__vector_71+0xcb4>
		if((sSensorData.speedSensorPulseInterval > sSensorData.ccTargetSpeed)
    4e14:	80 91 b0 28 	lds	r24, 0x28B0
    4e18:	90 91 b1 28 	lds	r25, 0x28B1
    4e1c:	a0 91 b2 28 	lds	r26, 0x28B2
    4e20:	b0 91 b3 28 	lds	r27, 0x28B3
    4e24:	40 91 c6 28 	lds	r20, 0x28C6
    4e28:	50 91 c7 28 	lds	r21, 0x28C7
    4e2c:	60 91 c8 28 	lds	r22, 0x28C8
    4e30:	70 91 c9 28 	lds	r23, 0x28C9
    4e34:	20 91 ca 28 	lds	r18, 0x28CA
    4e38:	48 17       	cp	r20, r24
    4e3a:	59 07       	cpc	r21, r25
    4e3c:	6a 07       	cpc	r22, r26
    4e3e:	7b 07       	cpc	r23, r27
    4e40:	8c f4       	brge	.+34     	; 0x4e64 <__vector_71+0xc44>
			&& (sSensorData.speedSensorPulseInterval > sCCPrevPulseInterval) 
    4e42:	40 91 49 28 	lds	r20, 0x2849
    4e46:	50 91 4a 28 	lds	r21, 0x284A
    4e4a:	60 91 4b 28 	lds	r22, 0x284B
    4e4e:	70 91 4c 28 	lds	r23, 0x284C
    4e52:	48 17       	cp	r20, r24
    4e54:	59 07       	cpc	r21, r25
    4e56:	6a 07       	cpc	r22, r26
    4e58:	7b 07       	cpc	r23, r27
    4e5a:	dc f4       	brge	.+54     	; 0x4e92 <__vector_71+0xc72>
			&& (sSensorData.ccPower < CC_MAX_POWER))
    4e5c:	27 30       	cpi	r18, 0x07	; 7
    4e5e:	c8 f4       	brcc	.+50     	; 0x4e92 <__vector_71+0xc72>
				sSensorData.ccPower++;
    4e60:	2f 5f       	subi	r18, 0xFF	; 255
    4e62:	15 c0       	rjmp	.+42     	; 0x4e8e <__vector_71+0xc6e>
		else if((sSensorData.speedSensorPulseInterval < sSensorData.ccTargetSpeed)
    4e64:	84 17       	cp	r24, r20
    4e66:	95 07       	cpc	r25, r21
    4e68:	a6 07       	cpc	r26, r22
    4e6a:	b7 07       	cpc	r27, r23
    4e6c:	94 f4       	brge	.+36     	; 0x4e92 <__vector_71+0xc72>
			&& (sSensorData.speedSensorPulseInterval < sCCPrevPulseInterval)
    4e6e:	40 91 49 28 	lds	r20, 0x2849
    4e72:	50 91 4a 28 	lds	r21, 0x284A
    4e76:	60 91 4b 28 	lds	r22, 0x284B
    4e7a:	70 91 4c 28 	lds	r23, 0x284C
    4e7e:	84 17       	cp	r24, r20
    4e80:	95 07       	cpc	r25, r21
    4e82:	a6 07       	cpc	r26, r22
    4e84:	b7 07       	cpc	r27, r23
    4e86:	2c f4       	brge	.+10     	; 0x4e92 <__vector_71+0xc72>
			&& (sSensorData.ccPower > 0))
    4e88:	22 23       	and	r18, r18
    4e8a:	19 f0       	breq	.+6      	; 0x4e92 <__vector_71+0xc72>
				sSensorData.ccPower--;
    4e8c:	21 50       	subi	r18, 0x01	; 1
    4e8e:	20 93 ca 28 	sts	0x28CA, r18
		SET_CC_DRIVE(sSensorData.ccPower);
    4e92:	20 91 ca 28 	lds	r18, 0x28CA
    4e96:	21 11       	cpse	r18, r1
    4e98:	02 c0       	rjmp	.+4      	; 0x4e9e <__vector_71+0xc7e>
    4e9a:	27 e0       	ldi	r18, 0x07	; 7
    4e9c:	0b c0       	rjmp	.+22     	; 0x4eb4 <__vector_71+0xc94>
    4e9e:	27 30       	cpi	r18, 0x07	; 7
    4ea0:	19 f4       	brne	.+6      	; 0x4ea8 <__vector_71+0xc88>
    4ea2:	20 93 85 06 	sts	0x0685, r18
    4ea6:	08 c0       	rjmp	.+16     	; 0x4eb8 <__vector_71+0xc98>
    4ea8:	32 2f       	mov	r19, r18
    4eaa:	30 95       	com	r19
    4eac:	37 70       	andi	r19, 0x07	; 7
    4eae:	30 93 85 06 	sts	0x0685, r19
    4eb2:	27 70       	andi	r18, 0x07	; 7
    4eb4:	20 93 86 06 	sts	0x0686, r18
		sCCRunTimer = CC_REG_CYCLES;
    4eb8:	28 e8       	ldi	r18, 0x88	; 136
    4eba:	33 e1       	ldi	r19, 0x13	; 19
    4ebc:	20 93 47 28 	sts	0x2847, r18
    4ec0:	30 93 48 28 	sts	0x2848, r19
		sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    4ec4:	80 93 49 28 	sts	0x2849, r24
    4ec8:	90 93 4a 28 	sts	0x284A, r25
    4ecc:	a0 93 4b 28 	sts	0x284B, r26
    4ed0:	b0 93 4c 28 	sts	0x284C, r27
	}
	
	if(sTakeSnapshot485) {
    4ed4:	80 91 cf 28 	lds	r24, 0x28CF
    4ed8:	88 23       	and	r24, r24
    4eda:	e1 f0       	breq	.+56     	; 0x4f14 <__vector_71+0xcf4>
		sSensorDataSnapshot485 = sSensorData;
    4edc:	84 e7       	ldi	r24, 0x74	; 116
    4ede:	e7 e5       	ldi	r30, 0x57	; 87
    4ee0:	f8 e2       	ldi	r31, 0x28	; 40
    4ee2:	a4 ed       	ldi	r26, 0xD4	; 212
    4ee4:	b8 e2       	ldi	r27, 0x28	; 40
    4ee6:	01 90       	ld	r0, Z+
    4ee8:	0d 92       	st	X+, r0
    4eea:	8a 95       	dec	r24
    4eec:	e1 f7       	brne	.-8      	; 0x4ee6 <__vector_71+0xcc6>
		sSessionCycleCountSnapshot485 = sSessionCycleCount;
    4eee:	80 91 cb 28 	lds	r24, 0x28CB
    4ef2:	90 91 cc 28 	lds	r25, 0x28CC
    4ef6:	a0 91 cd 28 	lds	r26, 0x28CD
    4efa:	b0 91 ce 28 	lds	r27, 0x28CE
    4efe:	80 93 d0 28 	sts	0x28D0, r24
    4f02:	90 93 d1 28 	sts	0x28D1, r25
    4f06:	a0 93 d2 28 	sts	0x28D2, r26
    4f0a:	b0 93 d3 28 	sts	0x28D3, r27
		
		sTakeSnapshot485 = 0;
    4f0e:	10 92 cf 28 	sts	0x28CF, r1
    4f12:	1f c0       	rjmp	.+62     	; 0x4f52 <__vector_71+0xd32>
	}
	else if(sTakeSnapshot) { 
    4f14:	80 91 48 29 	lds	r24, 0x2948
    4f18:	88 23       	and	r24, r24
    4f1a:	d9 f0       	breq	.+54     	; 0x4f52 <__vector_71+0xd32>
		sSensorDataSnapshot = sSensorData;
    4f1c:	84 e7       	ldi	r24, 0x74	; 116
    4f1e:	e7 e5       	ldi	r30, 0x57	; 87
    4f20:	f8 e2       	ldi	r31, 0x28	; 40
    4f22:	ad e4       	ldi	r26, 0x4D	; 77
    4f24:	b9 e2       	ldi	r27, 0x29	; 41
    4f26:	01 90       	ld	r0, Z+
    4f28:	0d 92       	st	X+, r0
    4f2a:	8a 95       	dec	r24
    4f2c:	e1 f7       	brne	.-8      	; 0x4f26 <__vector_71+0xd06>
		sSessionCycleCountSnapshot = sSessionCycleCount;
    4f2e:	80 91 cb 28 	lds	r24, 0x28CB
    4f32:	90 91 cc 28 	lds	r25, 0x28CC
    4f36:	a0 91 cd 28 	lds	r26, 0x28CD
    4f3a:	b0 91 ce 28 	lds	r27, 0x28CE
    4f3e:	80 93 49 29 	sts	0x2949, r24
    4f42:	90 93 4a 29 	sts	0x294A, r25
    4f46:	a0 93 4b 29 	sts	0x294B, r26
    4f4a:	b0 93 4c 29 	sts	0x294C, r27
		
		sTakeSnapshot = 0;
    4f4e:	10 92 48 29 	sts	0x2948, r1
	}

	sSessionCycleCount++;
    4f52:	80 91 cb 28 	lds	r24, 0x28CB
    4f56:	90 91 cc 28 	lds	r25, 0x28CC
    4f5a:	a0 91 cd 28 	lds	r26, 0x28CD
    4f5e:	b0 91 ce 28 	lds	r27, 0x28CE
    4f62:	01 96       	adiw	r24, 0x01	; 1
    4f64:	a1 1d       	adc	r26, r1
    4f66:	b1 1d       	adc	r27, r1
    4f68:	80 93 cb 28 	sts	0x28CB, r24
    4f6c:	90 93 cc 28 	sts	0x28CC, r25
    4f70:	a0 93 cd 28 	sts	0x28CD, r26
    4f74:	b0 93 ce 28 	sts	0x28CE, r27
		
} /* ISR(ADCA_CH0_vect) */
    4f78:	ff 91       	pop	r31
    4f7a:	ef 91       	pop	r30
    4f7c:	df 91       	pop	r29
    4f7e:	cf 91       	pop	r28
    4f80:	bf 91       	pop	r27
    4f82:	af 91       	pop	r26
    4f84:	9f 91       	pop	r25
    4f86:	8f 91       	pop	r24
    4f88:	7f 91       	pop	r23
    4f8a:	6f 91       	pop	r22
    4f8c:	5f 91       	pop	r21
    4f8e:	4f 91       	pop	r20
    4f90:	3f 91       	pop	r19
    4f92:	2f 91       	pop	r18
    4f94:	1f 91       	pop	r17
    4f96:	0f 91       	pop	r16
    4f98:	ff 90       	pop	r15
    4f9a:	ef 90       	pop	r14
    4f9c:	df 90       	pop	r13
    4f9e:	cf 90       	pop	r12
    4fa0:	bf 90       	pop	r11
    4fa2:	af 90       	pop	r10
    4fa4:	9f 90       	pop	r9
    4fa6:	8f 90       	pop	r8
    4fa8:	0f 90       	pop	r0
    4faa:	0b be       	out	0x3b, r0	; 59
    4fac:	0f 90       	pop	r0
    4fae:	0f be       	out	0x3f, r0	; 63
    4fb0:	0f 90       	pop	r0
    4fb2:	1f 90       	pop	r1
    4fb4:	18 95       	reti

00004fb6 <FCTakeSnapshot485>:
} /* FCPrintDataCSV */


static int FCTakeSnapshot485(const char *subadress) {

	sFCDecodedDataSnapshot485 = sFCDecodedData;
    4fb6:	89 e1       	ldi	r24, 0x19	; 25
    4fb8:	e3 e2       	ldi	r30, 0x23	; 35
    4fba:	fa e2       	ldi	r31, 0x2A	; 42
    4fbc:	a1 ef       	ldi	r26, 0xF1	; 241
    4fbe:	b9 e2       	ldi	r27, 0x29	; 41
    4fc0:	01 90       	ld	r0, Z+
    4fc2:	0d 92       	st	X+, r0
    4fc4:	8a 95       	dec	r24
    4fc6:	e1 f7       	brne	.-8      	; 0x4fc0 <FCTakeSnapshot485+0xa>
	return 0;

} /* FCTakeSnapshot485 */
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	08 95       	ret

00004fce <GetFCTemperature>:


static int GetFCTemperature(const char *subadress, char *printbuf, int maxChars) {
    4fce:	0f 93       	push	r16
    4fd0:	1f 93       	push	r17
    4fd2:	cf 93       	push	r28
    4fd4:	df 93       	push	r29
    4fd6:	eb 01       	movw	r28, r22
    4fd8:	8a 01       	movw	r16, r20
	int err = 1;

	if(snprintf(printbuf, maxChars, "%.2f", sFCDecodedDataSnapshot.temp / 100.0) >= maxChars)
    4fda:	60 91 0d 2a 	lds	r22, 0x2A0D
    4fde:	70 91 0e 2a 	lds	r23, 0x2A0E
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <__floatunsisf>
    4fea:	20 e0       	ldi	r18, 0x00	; 0
    4fec:	30 e0       	ldi	r19, 0x00	; 0
    4fee:	48 ec       	ldi	r20, 0xC8	; 200
    4ff0:	52 e4       	ldi	r21, 0x42	; 66
    4ff2:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <__divsf3>
    4ff6:	9f 93       	push	r25
    4ff8:	8f 93       	push	r24
    4ffa:	7f 93       	push	r23
    4ffc:	6f 93       	push	r22
    4ffe:	8f ef       	ldi	r24, 0xFF	; 255
    5000:	96 e2       	ldi	r25, 0x26	; 38
    5002:	9f 93       	push	r25
    5004:	8f 93       	push	r24
    5006:	1f 93       	push	r17
    5008:	0f 93       	push	r16
    500a:	df 93       	push	r29
    500c:	cf 93       	push	r28
    500e:	0e 94 05 39 	call	0x720a	; 0x720a <snprintf>
    5012:	2d b7       	in	r18, 0x3d	; 61
    5014:	3e b7       	in	r19, 0x3e	; 62
    5016:	26 5f       	subi	r18, 0xF6	; 246
    5018:	3f 4f       	sbci	r19, 0xFF	; 255
    501a:	2d bf       	out	0x3d, r18	; 61
    501c:	3e bf       	out	0x3e, r19	; 62
    501e:	80 17       	cp	r24, r16
    5020:	91 07       	cpc	r25, r17
    5022:	24 f0       	brlt	.+8      	; 0x502c <GetFCTemperature+0x5e>
		printbuf[0] = '\0';
    5024:	18 82       	st	Y, r1

} /* FCTakeSnapshot485 */


static int GetFCTemperature(const char *subadress, char *printbuf, int maxChars) {
	int err = 1;
    5026:	81 e0       	ldi	r24, 0x01	; 1
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	02 c0       	rjmp	.+4      	; 0x5030 <GetFCTemperature+0x62>

	if(snprintf(printbuf, maxChars, "%.2f", sFCDecodedDataSnapshot.temp / 100.0) >= maxChars)
		printbuf[0] = '\0';
	else
		err = 0;
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
	
	return err;
} /* GetFCTemperature */
    5030:	df 91       	pop	r29
    5032:	cf 91       	pop	r28
    5034:	1f 91       	pop	r17
    5036:	0f 91       	pop	r16
    5038:	08 95       	ret

0000503a <InitFCComm>:
void DecodeZBTMessage(uint8_t *raw, tZBTData *decoded);


void InitFCComm(void) {
	
	AddSlaveOwnSensor("TB01", GetFCTemperature, FCTakeSnapshot485, 1);
    503a:	21 e0       	ldi	r18, 0x01	; 1
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	4b ed       	ldi	r20, 0xDB	; 219
    5040:	57 e2       	ldi	r21, 0x27	; 39
    5042:	67 ee       	ldi	r22, 0xE7	; 231
    5044:	77 e2       	ldi	r23, 0x27	; 39
    5046:	84 e0       	ldi	r24, 0x04	; 4
    5048:	97 e2       	ldi	r25, 0x27	; 39
    504a:	0c 94 2d 02 	jmp	0x45a	; 0x45a <AddSlaveOwnSensor>

0000504e <FCTakeSnapshot>:
} /* ProcessFCComm */


void FCTakeSnapshot(void) {

	sFCDecodedDataSnapshot = sFCDecodedData;
    504e:	89 e1       	ldi	r24, 0x19	; 25
    5050:	e3 e2       	ldi	r30, 0x23	; 35
    5052:	fa e2       	ldi	r31, 0x2A	; 42
    5054:	aa e0       	ldi	r26, 0x0A	; 10
    5056:	ba e2       	ldi	r27, 0x2A	; 42
    5058:	01 90       	ld	r0, Z+
    505a:	0d 92       	st	X+, r0
    505c:	8a 95       	dec	r24
    505e:	e1 f7       	brne	.-8      	; 0x5058 <FCTakeSnapshot+0xa>
    5060:	08 95       	ret

00005062 <FCPrintDataCSV>:
} /* FCTakeSnapshot */


void FCPrintDataCSV(FILE *fp) {
	
	fprintf(fp,"%u,%u,%u,%u,%u,%u,%u,%u,%lu,%lu,%lu,",
    5062:	ef e1       	ldi	r30, 0x1F	; 31
    5064:	fa e2       	ldi	r31, 0x2A	; 42
    5066:	23 81       	ldd	r18, Z+3	; 0x03
    5068:	2f 93       	push	r18
    506a:	22 81       	ldd	r18, Z+2	; 0x02
    506c:	2f 93       	push	r18
    506e:	21 81       	ldd	r18, Z+1	; 0x01
    5070:	2f 93       	push	r18
    5072:	20 81       	ld	r18, Z
    5074:	2f 93       	push	r18
    5076:	eb e1       	ldi	r30, 0x1B	; 27
    5078:	fa e2       	ldi	r31, 0x2A	; 42
    507a:	23 81       	ldd	r18, Z+3	; 0x03
    507c:	2f 93       	push	r18
    507e:	22 81       	ldd	r18, Z+2	; 0x02
    5080:	2f 93       	push	r18
    5082:	21 81       	ldd	r18, Z+1	; 0x01
    5084:	2f 93       	push	r18
    5086:	20 81       	ld	r18, Z
    5088:	2f 93       	push	r18
    508a:	e7 e1       	ldi	r30, 0x17	; 23
    508c:	fa e2       	ldi	r31, 0x2A	; 42
    508e:	23 81       	ldd	r18, Z+3	; 0x03
    5090:	2f 93       	push	r18
    5092:	22 81       	ldd	r18, Z+2	; 0x02
    5094:	2f 93       	push	r18
    5096:	21 81       	ldd	r18, Z+1	; 0x01
    5098:	2f 93       	push	r18
    509a:	20 81       	ld	r18, Z
    509c:	2f 93       	push	r18
    509e:	e5 e1       	ldi	r30, 0x15	; 21
    50a0:	fa e2       	ldi	r31, 0x2A	; 42
    50a2:	21 81       	ldd	r18, Z+1	; 0x01
    50a4:	2f 93       	push	r18
    50a6:	20 81       	ld	r18, Z
    50a8:	2f 93       	push	r18
    50aa:	e3 e1       	ldi	r30, 0x13	; 19
    50ac:	fa e2       	ldi	r31, 0x2A	; 42
    50ae:	21 81       	ldd	r18, Z+1	; 0x01
    50b0:	2f 93       	push	r18
    50b2:	20 81       	ld	r18, Z
    50b4:	2f 93       	push	r18
    50b6:	e1 e1       	ldi	r30, 0x11	; 17
    50b8:	fa e2       	ldi	r31, 0x2A	; 42
    50ba:	21 81       	ldd	r18, Z+1	; 0x01
    50bc:	2f 93       	push	r18
    50be:	20 81       	ld	r18, Z
    50c0:	2f 93       	push	r18
    50c2:	ef e0       	ldi	r30, 0x0F	; 15
    50c4:	fa e2       	ldi	r31, 0x2A	; 42
    50c6:	21 81       	ldd	r18, Z+1	; 0x01
    50c8:	2f 93       	push	r18
    50ca:	20 81       	ld	r18, Z
    50cc:	2f 93       	push	r18
    50ce:	ed e0       	ldi	r30, 0x0D	; 13
    50d0:	fa e2       	ldi	r31, 0x2A	; 42
    50d2:	21 81       	ldd	r18, Z+1	; 0x01
    50d4:	2f 93       	push	r18
    50d6:	20 81       	ld	r18, Z
    50d8:	2f 93       	push	r18
    50da:	20 91 0c 2a 	lds	r18, 0x2A0C
    50de:	1f 92       	push	r1
    50e0:	2f 93       	push	r18
    50e2:	20 91 0b 2a 	lds	r18, 0x2A0B
    50e6:	1f 92       	push	r1
    50e8:	2f 93       	push	r18
    50ea:	20 91 0a 2a 	lds	r18, 0x2A0A
    50ee:	1f 92       	push	r1
    50f0:	2f 93       	push	r18
    50f2:	29 e0       	ldi	r18, 0x09	; 9
    50f4:	37 e2       	ldi	r19, 0x27	; 39
    50f6:	3f 93       	push	r19
    50f8:	2f 93       	push	r18
    50fa:	9f 93       	push	r25
    50fc:	8f 93       	push	r24
    50fe:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    5102:	8d b7       	in	r24, 0x3d	; 61
    5104:	9e b7       	in	r25, 0x3e	; 62
    5106:	80 96       	adiw	r24, 0x20	; 32
    5108:	8d bf       	out	0x3d, r24	; 61
    510a:	9e bf       	out	0x3e, r25	; 62
    510c:	08 95       	ret

0000510e <DecodeZBTMessage>:
	/* maybe a checksum check here too? */

} /* IsValidZBTMessage */


void DecodeZBTMessage(uint8_t *raw, tZBTData *decoded) {
    510e:	fc 01       	movw	r30, r24
    5110:	db 01       	movw	r26, r22
	
	decoded->wd = raw[5];
    5112:	85 81       	ldd	r24, Z+5	; 0x05
    5114:	8c 93       	st	X, r24
	decoded->st = raw[6];
    5116:	86 81       	ldd	r24, Z+6	; 0x06
    5118:	11 96       	adiw	r26, 0x01	; 1
    511a:	8c 93       	st	X, r24
    511c:	11 97       	sbiw	r26, 0x01	; 1
	decoded->err = raw[7];
    511e:	87 81       	ldd	r24, Z+7	; 0x07
    5120:	12 96       	adiw	r26, 0x02	; 2
    5122:	8c 93       	st	X, r24
    5124:	12 97       	sbiw	r26, 0x02	; 2
	
	decoded->temp = ((uint16_t) raw[10]) * 256 | ((uint16_t) raw[11]);
    5126:	82 85       	ldd	r24, Z+10	; 0x0a
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	98 2f       	mov	r25, r24
    512c:	88 27       	eor	r24, r24
    512e:	23 85       	ldd	r18, Z+11	; 0x0b
    5130:	82 2b       	or	r24, r18
    5132:	13 96       	adiw	r26, 0x03	; 3
    5134:	8d 93       	st	X+, r24
    5136:	9c 93       	st	X, r25
    5138:	14 97       	sbiw	r26, 0x04	; 4
	decoded->v = ((uint16_t) raw[12]) * 256 | ((uint16_t) raw[13]);
    513a:	84 85       	ldd	r24, Z+12	; 0x0c
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	98 2f       	mov	r25, r24
    5140:	88 27       	eor	r24, r24
    5142:	25 85       	ldd	r18, Z+13	; 0x0d
    5144:	82 2b       	or	r24, r18
    5146:	15 96       	adiw	r26, 0x05	; 5
    5148:	8d 93       	st	X+, r24
    514a:	9c 93       	st	X, r25
    514c:	16 97       	sbiw	r26, 0x06	; 6
	decoded->i = ((uint16_t) raw[14]) * 256 | ((uint16_t) raw[15]);
    514e:	86 85       	ldd	r24, Z+14	; 0x0e
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	98 2f       	mov	r25, r24
    5154:	88 27       	eor	r24, r24
    5156:	27 85       	ldd	r18, Z+15	; 0x0f
    5158:	82 2b       	or	r24, r18
    515a:	17 96       	adiw	r26, 0x07	; 7
    515c:	8d 93       	st	X+, r24
    515e:	9c 93       	st	X, r25
    5160:	18 97       	sbiw	r26, 0x08	; 8
	decoded->p = ((uint16_t) raw[16]) * 256 | ((uint16_t) raw[17]);
    5162:	80 89       	ldd	r24, Z+16	; 0x10
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	98 2f       	mov	r25, r24
    5168:	88 27       	eor	r24, r24
    516a:	21 89       	ldd	r18, Z+17	; 0x11
    516c:	82 2b       	or	r24, r18
    516e:	19 96       	adiw	r26, 0x09	; 9
    5170:	8d 93       	st	X+, r24
    5172:	9c 93       	st	X, r25
    5174:	1a 97       	sbiw	r26, 0x0a	; 10
	decoded->flow = ((uint16_t) raw[18]) * 256 | ((uint16_t) raw[19]);
    5176:	82 89       	ldd	r24, Z+18	; 0x12
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	98 2f       	mov	r25, r24
    517c:	88 27       	eor	r24, r24
    517e:	23 89       	ldd	r18, Z+19	; 0x13
    5180:	82 2b       	or	r24, r18
    5182:	1b 96       	adiw	r26, 0x0b	; 11
    5184:	8d 93       	st	X+, r24
    5186:	9c 93       	st	X, r25
    5188:	1c 97       	sbiw	r26, 0x0c	; 12
	
	decoded->time = ((uint32_t) raw[20]) << 24u | ((uint32_t) raw[21]) << 16u | ((uint32_t) raw[22]) << 8u | raw[23];
    518a:	84 89       	ldd	r24, Z+20	; 0x14
    518c:	45 89       	ldd	r20, Z+21	; 0x15
    518e:	50 e0       	ldi	r21, 0x00	; 0
    5190:	60 e0       	ldi	r22, 0x00	; 0
    5192:	70 e0       	ldi	r23, 0x00	; 0
    5194:	ba 01       	movw	r22, r20
    5196:	55 27       	eor	r21, r21
    5198:	44 27       	eor	r20, r20
    519a:	78 2b       	or	r23, r24
    519c:	87 89       	ldd	r24, Z+23	; 0x17
    519e:	48 2b       	or	r20, r24
    51a0:	86 89       	ldd	r24, Z+22	; 0x16
    51a2:	58 2b       	or	r21, r24
    51a4:	1d 96       	adiw	r26, 0x0d	; 13
    51a6:	4d 93       	st	X+, r20
    51a8:	5d 93       	st	X+, r21
    51aa:	6d 93       	st	X+, r22
    51ac:	7c 93       	st	X, r23
    51ae:	50 97       	sbiw	r26, 0x10	; 16
    51b0:	08 95       	ret

000051b2 <ProcessFCComm>:
	AddSlaveOwnSensor("TB01", GetFCTemperature, FCTakeSnapshot485, 1);
	
} /* InitFCComm */


void ProcessFCComm(void) {
    51b2:	cf 93       	push	r28
	uint8_t i;
	
	while(CanRead_FC()) {
    51b4:	0e 94 07 2b 	call	0x560e	; 0x560e <CanRead_FC>
    51b8:	88 23       	and	r24, r24
    51ba:	09 f4       	brne	.+2      	; 0x51be <ProcessFCComm+0xc>
    51bc:	6c c0       	rjmp	.+216    	; 0x5296 <ProcessFCComm+0xe4>
		sFCDataBuffer[sFCDataCount++] = ReadByte_FC();
    51be:	c0 91 3c 2a 	lds	r28, 0x2A3C
    51c2:	81 e0       	ldi	r24, 0x01	; 1
    51c4:	8c 0f       	add	r24, r28
    51c6:	80 93 3c 2a 	sts	0x2A3C, r24
    51ca:	0e 94 10 2b 	call	0x5620	; 0x5620 <ReadByte_FC>
    51ce:	ec 2f       	mov	r30, r28
    51d0:	f0 e0       	ldi	r31, 0x00	; 0
    51d2:	e3 5c       	subi	r30, 0xC3	; 195
    51d4:	f5 4d       	sbci	r31, 0xD5	; 213
    51d6:	80 83       	st	Z, r24
		if(sFCDataCount >= ZBT_MESSAGESIZE) {
    51d8:	20 91 3c 2a 	lds	r18, 0x2A3C
    51dc:	2a 31       	cpi	r18, 0x1A	; 26
    51de:	50 f3       	brcs	.-44     	; 0x51b4 <ProcessFCComm+0x2>
	return (buffer[0] == 104)
	&& (buffer[1] == 19)
	&& (buffer[2] == 19)
	&& (buffer[3] == 104)
	&& (buffer[4] == 19)
	&& (buffer[ZBT_MESSAGESIZE - 1] == 22);
    51e0:	80 91 3d 2a 	lds	r24, 0x2A3D
    51e4:	88 36       	cpi	r24, 0x68	; 104
    51e6:	b1 f5       	brne	.+108    	; 0x5254 <ProcessFCComm+0xa2>


static uint8_t IsValidZBTMessage(uint8_t *buffer) {

	return (buffer[0] == 104)
	&& (buffer[1] == 19)
    51e8:	80 91 3e 2a 	lds	r24, 0x2A3E
    51ec:	83 31       	cpi	r24, 0x13	; 19
    51ee:	91 f5       	brne	.+100    	; 0x5254 <ProcessFCComm+0xa2>
	&& (buffer[2] == 19)
    51f0:	80 91 3f 2a 	lds	r24, 0x2A3F
    51f4:	83 31       	cpi	r24, 0x13	; 19
    51f6:	71 f5       	brne	.+92     	; 0x5254 <ProcessFCComm+0xa2>
	&& (buffer[3] == 104)
    51f8:	80 91 40 2a 	lds	r24, 0x2A40
    51fc:	88 36       	cpi	r24, 0x68	; 104
    51fe:	51 f5       	brne	.+84     	; 0x5254 <ProcessFCComm+0xa2>
	&& (buffer[4] == 19)
    5200:	80 91 41 2a 	lds	r24, 0x2A41
    5204:	83 31       	cpi	r24, 0x13	; 19
    5206:	31 f5       	brne	.+76     	; 0x5254 <ProcessFCComm+0xa2>
	&& (buffer[ZBT_MESSAGESIZE - 1] == 22);
    5208:	81 e0       	ldi	r24, 0x01	; 1
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	30 91 56 2a 	lds	r19, 0x2A56
    5210:	36 31       	cpi	r19, 0x16	; 22
    5212:	11 f0       	breq	.+4      	; 0x5218 <ProcessFCComm+0x66>
    5214:	80 e0       	ldi	r24, 0x00	; 0
    5216:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t i;
	
	while(CanRead_FC()) {
		sFCDataBuffer[sFCDataCount++] = ReadByte_FC();
		if(sFCDataCount >= ZBT_MESSAGESIZE) {
			if(IsValidZBTMessage(sFCDataBuffer)) {
    5218:	89 2b       	or	r24, r25
    521a:	e1 f0       	breq	.+56     	; 0x5254 <ProcessFCComm+0xa2>
				DecodeZBTMessage(sFCDataBuffer, &sFCDecodedData);
    521c:	63 e2       	ldi	r22, 0x23	; 35
    521e:	7a e2       	ldi	r23, 0x2A	; 42
    5220:	8d e3       	ldi	r24, 0x3D	; 61
    5222:	9a e2       	ldi	r25, 0x2A	; 42
    5224:	0e 94 87 28 	call	0x510e	; 0x510e <DecodeZBTMessage>
				sFCDecodedData.zbtValidMessages++;
    5228:	80 91 38 2a 	lds	r24, 0x2A38
    522c:	90 91 39 2a 	lds	r25, 0x2A39
    5230:	a0 91 3a 2a 	lds	r26, 0x2A3A
    5234:	b0 91 3b 2a 	lds	r27, 0x2A3B
    5238:	01 96       	adiw	r24, 0x01	; 1
    523a:	a1 1d       	adc	r26, r1
    523c:	b1 1d       	adc	r27, r1
    523e:	80 93 38 2a 	sts	0x2A38, r24
    5242:	90 93 39 2a 	sts	0x2A39, r25
    5246:	a0 93 3a 2a 	sts	0x2A3A, r26
    524a:	b0 93 3b 2a 	sts	0x2A3B, r27
				sFCDataCount = 0;
    524e:	10 92 3c 2a 	sts	0x2A3C, r1
    5252:	b0 cf       	rjmp	.-160    	; 0x51b4 <ProcessFCComm+0x2>
    5254:	ee e3       	ldi	r30, 0x3E	; 62
    5256:	fa e2       	ldi	r31, 0x2A	; 42
    5258:	ad e3       	ldi	r26, 0x3D	; 61
    525a:	ba e2       	ldi	r27, 0x2A	; 42
			}
			else {
				for(i = 1; i < ZBT_MESSAGESIZE; i++) {
					sFCDataBuffer[i-1] = sFCDataBuffer[i];
    525c:	81 91       	ld	r24, Z+
    525e:	8d 93       	st	X+, r24
				DecodeZBTMessage(sFCDataBuffer, &sFCDecodedData);
				sFCDecodedData.zbtValidMessages++;
				sFCDataCount = 0;
			}
			else {
				for(i = 1; i < ZBT_MESSAGESIZE; i++) {
    5260:	8a e2       	ldi	r24, 0x2A	; 42
    5262:	e7 35       	cpi	r30, 0x57	; 87
    5264:	f8 07       	cpc	r31, r24
    5266:	d1 f7       	brne	.-12     	; 0x525c <ProcessFCComm+0xaa>
					sFCDataBuffer[i-1] = sFCDataBuffer[i];
				}
				sFCDecodedData.zbtBytesSkipped++;
    5268:	80 91 34 2a 	lds	r24, 0x2A34
    526c:	90 91 35 2a 	lds	r25, 0x2A35
    5270:	a0 91 36 2a 	lds	r26, 0x2A36
    5274:	b0 91 37 2a 	lds	r27, 0x2A37
    5278:	01 96       	adiw	r24, 0x01	; 1
    527a:	a1 1d       	adc	r26, r1
    527c:	b1 1d       	adc	r27, r1
    527e:	80 93 34 2a 	sts	0x2A34, r24
    5282:	90 93 35 2a 	sts	0x2A35, r25
    5286:	a0 93 36 2a 	sts	0x2A36, r26
    528a:	b0 93 37 2a 	sts	0x2A37, r27
				sFCDataCount--;
    528e:	21 50       	subi	r18, 0x01	; 1
    5290:	20 93 3c 2a 	sts	0x2A3C, r18
    5294:	8f cf       	rjmp	.-226    	; 0x51b4 <ProcessFCComm+0x2>
			}
		}		
	}
} /* ProcessFCComm */
    5296:	cf 91       	pop	r28
    5298:	08 95       	ret

0000529a <CopySensorData>:
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
    529a:	fc 01       	movw	r30, r24
    529c:	20 e0       	ldi	r18, 0x00	; 0
    529e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    52a0:	db 01       	movw	r26, r22
    52a2:	4d 91       	ld	r20, X+
    52a4:	bd 01       	movw	r22, r26
    52a6:	54 2f       	mov	r21, r20
    52a8:	5d 7f       	andi	r21, 0xFD	; 253
    52aa:	55 32       	cpi	r21, 0x25	; 37
    52ac:	61 f0       	breq	.+24     	; 0x52c6 <CopySensorData+0x2c>
    52ae:	44 23       	and	r20, r20
    52b0:	51 f0       	breq	.+20     	; 0x52c6 <CopySensorData+0x2c>
		dest[i] = src[i];
    52b2:	41 93       	st	Z+, r20
    52b4:	2f 5f       	subi	r18, 0xFF	; 255
    52b6:	3f 4f       	sbci	r19, 0xFF	; 255


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    52b8:	2e 34       	cpi	r18, 0x4E	; 78
    52ba:	31 05       	cpc	r19, r1
    52bc:	89 f7       	brne	.-30     	; 0x52a0 <CopySensorData+0x6>
	}		
	
	if(i < MAXDATA)
		dest[i] = '\0';
	else
		dest[MAXDATA - 1] = '\0';
    52be:	fc 01       	movw	r30, r24
    52c0:	e3 5b       	subi	r30, 0xB3	; 179
    52c2:	ff 4f       	sbci	r31, 0xFF	; 255
    52c4:	03 c0       	rjmp	.+6      	; 0x52cc <CopySensorData+0x32>
		dest[i] = src[i];
		i++;
	}		
	
	if(i < MAXDATA)
		dest[i] = '\0';
    52c6:	fc 01       	movw	r30, r24
    52c8:	e2 0f       	add	r30, r18
    52ca:	f3 1f       	adc	r31, r19
	else
		dest[MAXDATA - 1] = '\0';
    52cc:	10 82       	st	Z, r1
    52ce:	08 95       	ret

000052d0 <AcceptDataGPSPosition>:
} /* CopySensorData */


static int AcceptDataGPSPosition(const char *adr, char *inData) {
	
	CopySensorData(sGPSPos, inData);
    52d0:	88 e0       	ldi	r24, 0x08	; 8
    52d2:	90 e2       	ldi	r25, 0x20	; 32
    52d4:	0e 94 4d 29 	call	0x529a	; 0x529a <CopySensorData>
	return 0;
	
} /* AcceptDataGPSPosition */
    52d8:	80 e0       	ldi	r24, 0x00	; 0
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	08 95       	ret

000052de <AcceptDataGPSDirection>:


static int AcceptDataGPSDirection(const char *adr, char *inData) {
	
	CopySensorData(sGPSDirection, inData);
    52de:	83 ef       	ldi	r24, 0xF3	; 243
    52e0:	9a e2       	ldi	r25, 0x2A	; 42
    52e2:	0e 94 4d 29 	call	0x529a	; 0x529a <CopySensorData>
	return 0;
	
} /* AcceptDataGPSDirection */
    52e6:	80 e0       	ldi	r24, 0x00	; 0
    52e8:	90 e0       	ldi	r25, 0x00	; 0
    52ea:	08 95       	ret

000052ec <AcceptDataGPSSpeed>:


static int AcceptDataGPSSpeed(const char *adr, char *inData) {
	
	CopySensorData(sGPSSpeed, inData);
    52ec:	85 ea       	ldi	r24, 0xA5	; 165
    52ee:	9a e2       	ldi	r25, 0x2A	; 42
    52f0:	0e 94 4d 29 	call	0x529a	; 0x529a <CopySensorData>
	return 0;
	
} /* AcceptDataGPSSpeed */
    52f4:	80 e0       	ldi	r24, 0x00	; 0
    52f6:	90 e0       	ldi	r25, 0x00	; 0
    52f8:	08 95       	ret

000052fa <AcceptDataGPSTime>:


static int AcceptDataGPSTime(const char *adr, char *inData) {
	
	CopySensorData(sGPSTime, inData);
    52fa:	87 e5       	ldi	r24, 0x57	; 87
    52fc:	9a e2       	ldi	r25, 0x2A	; 42
    52fe:	0e 94 4d 29 	call	0x529a	; 0x529a <CopySensorData>
	return 0;
		
} /* AcceptDataGPSTime */
    5302:	80 e0       	ldi	r24, 0x00	; 0
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	08 95       	ret

00005308 <InitReadBussensors>:
static int AcceptDataGPSTime(const char *adr, char *inData);


void InitReadBussensors(void) {
	
	AddWantedSensor("LL01", AcceptDataGPSPosition);
    5308:	68 e6       	ldi	r22, 0x68	; 104
    530a:	79 e2       	ldi	r23, 0x29	; 41
    530c:	8e e2       	ldi	r24, 0x2E	; 46
    530e:	97 e2       	ldi	r25, 0x27	; 39
    5310:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <AddWantedSensor>
	AddWantedSensor("GR01", AcceptDataGPSDirection);
    5314:	6f e6       	ldi	r22, 0x6F	; 111
    5316:	79 e2       	ldi	r23, 0x29	; 41
    5318:	83 e3       	ldi	r24, 0x33	; 51
    531a:	97 e2       	ldi	r25, 0x27	; 39
    531c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <AddWantedSensor>
	AddWantedSensor("SG01", AcceptDataGPSSpeed);
    5320:	66 e7       	ldi	r22, 0x76	; 118
    5322:	79 e2       	ldi	r23, 0x29	; 41
    5324:	88 e3       	ldi	r24, 0x38	; 56
    5326:	97 e2       	ldi	r25, 0x27	; 39
    5328:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <AddWantedSensor>
	AddWantedSensor("GT01", AcceptDataGPSTime);
    532c:	6d e7       	ldi	r22, 0x7D	; 125
    532e:	79 e2       	ldi	r23, 0x29	; 41
    5330:	8d e3       	ldi	r24, 0x3D	; 61
    5332:	97 e2       	ldi	r25, 0x27	; 39
    5334:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <AddWantedSensor>

00005338 <PrintBussensors>:
} /* InitReadBussensors */


void PrintBussensors(FILE *fp) {
	
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
    5338:	27 e5       	ldi	r18, 0x57	; 87
    533a:	3a e2       	ldi	r19, 0x2A	; 42
    533c:	3f 93       	push	r19
    533e:	2f 93       	push	r18
    5340:	25 ea       	ldi	r18, 0xA5	; 165
    5342:	3a e2       	ldi	r19, 0x2A	; 42
    5344:	3f 93       	push	r19
    5346:	2f 93       	push	r18
    5348:	23 ef       	ldi	r18, 0xF3	; 243
    534a:	3a e2       	ldi	r19, 0x2A	; 42
    534c:	3f 93       	push	r19
    534e:	2f 93       	push	r18
    5350:	28 e0       	ldi	r18, 0x08	; 8
    5352:	30 e2       	ldi	r19, 0x20	; 32
    5354:	3f 93       	push	r19
    5356:	2f 93       	push	r18
    5358:	22 e4       	ldi	r18, 0x42	; 66
    535a:	37 e2       	ldi	r19, 0x27	; 39
    535c:	3f 93       	push	r19
    535e:	2f 93       	push	r18
    5360:	9f 93       	push	r25
    5362:	8f 93       	push	r24
    5364:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    5368:	8d b7       	in	r24, 0x3d	; 61
    536a:	9e b7       	in	r25, 0x3e	; 62
    536c:	0c 96       	adiw	r24, 0x0c	; 12
    536e:	8d bf       	out	0x3d, r24	; 61
    5370:	9e bf       	out	0x3e, r25	; 62
    5372:	08 95       	ret

00005374 <InitSerial>:
static volatile uint8_t tx_fc_wridx, tx_fc_rdidx, tx_fc_buf[TXBUF_DEPTH_FC];
static volatile uint8_t rx_fc_wridx, rx_fc_rdidx, rx_fc_buf[RXBUF_DEPTH_FC];


void InitSerial(void)
{
    5374:	cf 93       	push	r28
    5376:	df 93       	push	r29
	/* Shut down UARTs which might be left running by the bootloader */
	
	cli();
    5378:	f8 94       	cli
	
	USARTC0.CTRLB = 0;
    537a:	e0 ea       	ldi	r30, 0xA0	; 160
    537c:	f8 e0       	ldi	r31, 0x08	; 8
    537e:	14 82       	std	Z+4, r1	; 0x04
 	USARTC1.CTRLB = 0;
    5380:	e0 eb       	ldi	r30, 0xB0	; 176
    5382:	f8 e0       	ldi	r31, 0x08	; 8
    5384:	14 82       	std	Z+4, r1	; 0x04
 	USARTD0.CTRLB = 0;
    5386:	80 ea       	ldi	r24, 0xA0	; 160
    5388:	99 e0       	ldi	r25, 0x09	; 9
    538a:	dc 01       	movw	r26, r24
    538c:	14 96       	adiw	r26, 0x04	; 4
    538e:	1c 92       	st	X, r1
 	USARTD1.CTRLB = 0;
    5390:	c0 eb       	ldi	r28, 0xB0	; 176
    5392:	d9 e0       	ldi	r29, 0x09	; 9
    5394:	1c 82       	std	Y+4, r1	; 0x04
 	USARTE0.CTRLB = 0;
    5396:	e0 ea       	ldi	r30, 0xA0	; 160
    5398:	fa e0       	ldi	r31, 0x0A	; 10
    539a:	14 82       	std	Z+4, r1	; 0x04
 	USARTE1.CTRLB = 0;
    539c:	e0 eb       	ldi	r30, 0xB0	; 176
    539e:	fa e0       	ldi	r31, 0x0A	; 10
    53a0:	14 82       	std	Z+4, r1	; 0x04
 	USARTF0.CTRLB = 0;
    53a2:	60 ea       	ldi	r22, 0xA0	; 160
    53a4:	7b e0       	ldi	r23, 0x0B	; 11
    53a6:	fb 01       	movw	r30, r22
    53a8:	14 82       	std	Z+4, r1	; 0x04
	
	/* Pull-up on RX ports */
	PORTD.PIN2CTRL = PORT_OPC_PULLUP_gc;
    53aa:	e0 e6       	ldi	r30, 0x60	; 96
    53ac:	f6 e0       	ldi	r31, 0x06	; 6
    53ae:	48 e1       	ldi	r20, 0x18	; 24
    53b0:	42 8b       	std	Z+18, r20	; 0x12
	PORTD.PIN6CTRL = PORT_OPC_PULLUP_gc;
    53b2:	46 8b       	std	Z+22, r20	; 0x16
	PORTF.PIN2CTRL = PORT_OPC_PULLUP_gc;
    53b4:	20 ea       	ldi	r18, 0xA0	; 160
    53b6:	36 e0       	ldi	r19, 0x06	; 6
    53b8:	d9 01       	movw	r26, r18
    53ba:	52 96       	adiw	r26, 0x12	; 18
    53bc:	4c 93       	st	X, r20
    53be:	52 97       	sbiw	r26, 0x12	; 18
	
	/* Activate ports for RS485 (USARTD0), serial comms (USARTD1) and FC comms (USARTF0), disable RS485 TX driver */
	PORTD.OUTSET = PD_UART_D0_TXD_COMM485 | PD_UART_D1_TXD_CTRL; 
    53c0:	58 e8       	ldi	r21, 0x88	; 136
    53c2:	55 83       	std	Z+5, r21	; 0x05
	PORTD.OUTCLR = PD_DRIVER_ENABLE_COMM485;
    53c4:	52 e0       	ldi	r21, 0x02	; 2
    53c6:	56 83       	std	Z+6, r21	; 0x06
	PORTD.DIRSET = PD_UART_D0_TXD_COMM485 | PD_DRIVER_ENABLE_COMM485 | PD_UART_D1_TXD_CTRL;
    53c8:	5a e8       	ldi	r21, 0x8A	; 138
    53ca:	51 83       	std	Z+1, r21	; 0x01
	PORTD.DIRCLR = PD_UART_D0_RXD_COMM485 | PD_UART_D1_RXD_CTRL; 
    53cc:	54 e4       	ldi	r21, 0x44	; 68
    53ce:	52 83       	std	Z+2, r21	; 0x02
	PORTF.OUTSET = PF_UART_F0_TXD_FC;
    53d0:	58 e0       	ldi	r21, 0x08	; 8
    53d2:	15 96       	adiw	r26, 0x05	; 5
    53d4:	5c 93       	st	X, r21
    53d6:	15 97       	sbiw	r26, 0x05	; 5
	PORTF.DIRSET = PF_UART_F0_TXD_FC;
    53d8:	11 96       	adiw	r26, 0x01	; 1
    53da:	5c 93       	st	X, r21
    53dc:	11 97       	sbiw	r26, 0x01	; 1
	PORTF.DIRCLR = PF_UART_F0_RXD_FC;
    53de:	54 e0       	ldi	r21, 0x04	; 4
    53e0:	12 96       	adiw	r26, 0x02	; 2
    53e2:	5c 93       	st	X, r21

	PORTD.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
    53e4:	20 e1       	ldi	r18, 0x10	; 16
    53e6:	20 8b       	std	Z+16, r18	; 0x10
	PORTD.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    53e8:	24 8b       	std	Z+20, r18	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    53ea:	25 8b       	std	Z+21, r18	; 0x15
		
	USARTD0.BAUDCTRLA = (UART_230K4_BSEL_VALUE & USART_BSEL_gm);
    53ec:	35 ef       	ldi	r19, 0xF5	; 245
    53ee:	fc 01       	movw	r30, r24
    53f0:	36 83       	std	Z+6, r19	; 0x06
	USARTD0.BAUDCTRLB = ((UART_230K4_BSCALE_VALUE << USART_BSCALE_gp) & USART_BSCALE_gm) | ((UART_230K4_BSEL_VALUE >> 8) & ~USART_BSCALE_gm);
    53f2:	20 eb       	ldi	r18, 0xB0	; 176
    53f4:	27 83       	std	Z+7, r18	; 0x07
		
	USARTD1.BAUDCTRLA = (UART_230K4_BSEL_VALUE & USART_BSEL_gm);
    53f6:	3e 83       	std	Y+6, r19	; 0x06
	USARTD1.BAUDCTRLB = ((UART_230K4_BSCALE_VALUE << USART_BSCALE_gp) & USART_BSCALE_gm) | ((UART_230K4_BSEL_VALUE >> 8) & ~USART_BSCALE_gm);
    53f8:	2f 83       	std	Y+7, r18	; 0x07

	USARTF0.BAUDCTRLA = (UART_115K2_BSEL_VALUE & USART_BSEL_gm);
    53fa:	2c e0       	ldi	r18, 0x0C	; 12
    53fc:	db 01       	movw	r26, r22
    53fe:	16 96       	adiw	r26, 0x06	; 6
    5400:	2c 93       	st	X, r18
    5402:	16 97       	sbiw	r26, 0x06	; 6
	USARTF0.BAUDCTRLB = ((UART_115K2_BSCALE_VALUE << USART_BSCALE_gp) & USART_BSCALE_gm) | ((UART_115K2_BSEL_VALUE >> 8) & ~USART_BSCALE_gm);
    5404:	22 eb       	ldi	r18, 0xB2	; 178
    5406:	17 96       	adiw	r26, 0x07	; 7
    5408:	2c 93       	st	X, r18
    540a:	17 97       	sbiw	r26, 0x07	; 7
	
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    540c:	44 83       	std	Z+4, r20	; 0x04
 	USARTD1.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    540e:	4c 83       	std	Y+4, r20	; 0x04
 	USARTF0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
    5410:	14 96       	adiw	r26, 0x04	; 4
    5412:	4c 93       	st	X, r20
    5414:	14 97       	sbiw	r26, 0x04	; 4

	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5416:	20 e2       	ldi	r18, 0x20	; 32
    5418:	23 83       	std	Z+3, r18	; 0x03
	USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    541a:	2b 83       	std	Y+3, r18	; 0x03
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    541c:	13 96       	adiw	r26, 0x03	; 3
    541e:	2c 93       	st	X, r18
	
	PMIC.CTRL |= PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    5420:	e0 ea       	ldi	r30, 0xA0	; 160
    5422:	f0 e0       	ldi	r31, 0x00	; 0
    5424:	82 81       	ldd	r24, Z+2	; 0x02
    5426:	83 60       	ori	r24, 0x03	; 3
    5428:	82 83       	std	Z+2, r24	; 0x02
	
} /* InitSerial */
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	08 95       	ret

00005430 <CanRead_Comm485>:


uint8_t CanRead_Comm485(void) {
	uint8_t wridx = rx_485_wridx, rdidx = rx_485_rdidx;
    5430:	80 91 11 2e 	lds	r24, 0x2E11
    5434:	90 91 10 2e 	lds	r25, 0x2E10
	
	if(wridx >= rdidx)
    5438:	89 17       	cp	r24, r25
    543a:	08 f4       	brcc	.+2      	; 0x543e <CanRead_Comm485+0xe>
		return wridx - rdidx;
	else
		return wridx - rdidx + RXBUF_DEPTH_COMM485;
    543c:	8c 54       	subi	r24, 0x4C	; 76
    543e:	89 1b       	sub	r24, r25

} /* CanRead_Comm485 */
    5440:	08 95       	ret

00005442 <ReadByte_Comm485>:


uint8_t ReadByte_Comm485(void) {
    5442:	cf 93       	push	r28
	uint8_t res, curSlot, nextSlot;
	
	curSlot = rx_485_rdidx;
    5444:	c0 91 10 2e 	lds	r28, 0x2E10
	/* Busy-wait for a byte to be available. Should not be necessary if the caller calls CanRead_xxx() first */
	while(!CanRead_Comm485()) ;
    5448:	0e 94 18 2a 	call	0x5430	; 0x5430 <CanRead_Comm485>
    544c:	88 23       	and	r24, r24
    544e:	e1 f3       	breq	.-8      	; 0x5448 <ReadByte_Comm485+0x6>
	
	res = rx_485_buf[curSlot];
    5450:	ec 2f       	mov	r30, r28
    5452:	f0 e0       	ldi	r31, 0x00	; 0
    5454:	e4 5a       	subi	r30, 0xA4	; 164
    5456:	f2 4d       	sbci	r31, 0xD2	; 210
    5458:	80 81       	ld	r24, Z

	nextSlot = curSlot + 1;
    545a:	91 e0       	ldi	r25, 0x01	; 1
    545c:	9c 0f       	add	r25, r28
	if(nextSlot >= RXBUF_DEPTH_COMM485)
    545e:	94 3b       	cpi	r25, 0xB4	; 180
    5460:	08 f0       	brcs	.+2      	; 0x5464 <ReadByte_Comm485+0x22>
		nextSlot = 0;
    5462:	90 e0       	ldi	r25, 0x00	; 0
	rx_485_rdidx = nextSlot;
    5464:	90 93 10 2e 	sts	0x2E10, r25
	
	return res;
} /* ReadByte_Comm485 */
    5468:	cf 91       	pop	r28
    546a:	08 95       	ret

0000546c <CanWrite_Comm485>:


uint8_t CanWrite_Comm485(void) {
	uint8_t wridx1 = tx_485_wridx + 1, rdidx = tx_485_rdidx;
    546c:	20 91 c8 2e 	lds	r18, 0x2EC8
    5470:	91 e0       	ldi	r25, 0x01	; 1
    5472:	92 0f       	add	r25, r18
    5474:	80 91 c7 2e 	lds	r24, 0x2EC7
	
	if(wridx1 >= TXBUF_DEPTH_COMM485)
    5478:	94 3b       	cpi	r25, 0xB4	; 180
    547a:	10 f0       	brcs	.+4      	; 0x5480 <CanWrite_Comm485+0x14>
		wridx1 -= TXBUF_DEPTH_COMM485;
    547c:	9d e4       	ldi	r25, 0x4D	; 77
    547e:	92 0f       	add	r25, r18
	if(rdidx >= wridx1)
    5480:	89 17       	cp	r24, r25
    5482:	08 f4       	brcc	.+2      	; 0x5486 <CanWrite_Comm485+0x1a>
		return rdidx - wridx1;
	else
		return rdidx - wridx1 + TXBUF_DEPTH_COMM485;
    5484:	8c 54       	subi	r24, 0x4C	; 76
    5486:	89 1b       	sub	r24, r25
	
} /* CanWrite_Comm485 */
    5488:	08 95       	ret

0000548a <WriteByte_Comm485>:


void WriteByte_Comm485(uint8_t data) {
    548a:	cf 93       	push	r28
    548c:	df 93       	push	r29
    548e:	d8 2f       	mov	r29, r24
	uint8_t curSlot, nextSlot, savePMIC;
	timetick_t now;
	
	/* Busy-wait for a byte to be available. Should not be necessary if the caller calls CanWrite_xxx() first */
	while(!CanWrite_Comm485()) 
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    5490:	c1 e2       	ldi	r28, 0x21	; 33
void WriteByte_Comm485(uint8_t data) {
	uint8_t curSlot, nextSlot, savePMIC;
	timetick_t now;
	
	/* Busy-wait for a byte to be available. Should not be necessary if the caller calls CanWrite_xxx() first */
	while(!CanWrite_Comm485()) 
    5492:	0e 94 36 2a 	call	0x546c	; 0x546c <CanWrite_Comm485>
    5496:	81 11       	cpse	r24, r1
    5498:	03 c0       	rjmp	.+6      	; 0x54a0 <WriteByte_Comm485+0x16>
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    549a:	c0 93 a3 09 	sts	0x09A3, r28
    549e:	f9 cf       	rjmp	.-14     	; 0x5492 <WriteByte_Comm485+0x8>
	
	curSlot = tx_485_wridx;
    54a0:	c0 91 c8 2e 	lds	r28, 0x2EC8
	tx_485_buf[curSlot] = data;
    54a4:	ec 2f       	mov	r30, r28
    54a6:	f0 e0       	ldi	r31, 0x00	; 0
    54a8:	ed 5e       	subi	r30, 0xED	; 237
    54aa:	f1 4d       	sbci	r31, 0xD1	; 209
    54ac:	d0 83       	st	Z, r29
	
	nextSlot = curSlot + 1;
    54ae:	cf 5f       	subi	r28, 0xFF	; 255
	if(nextSlot >= TXBUF_DEPTH_COMM485)
    54b0:	c4 3b       	cpi	r28, 0xB4	; 180
    54b2:	08 f0       	brcs	.+2      	; 0x54b6 <WriteByte_Comm485+0x2c>
		nextSlot = 0;
    54b4:	c0 e0       	ldi	r28, 0x00	; 0

	savePMIC = PMIC.CTRL;
    54b6:	d0 91 a2 00 	lds	r29, 0x00A2
	PMIC.CTRL = savePMIC & ~PMIC_LOLVLEN_bm;
    54ba:	8d 2f       	mov	r24, r29
    54bc:	8e 7f       	andi	r24, 0xFE	; 254
    54be:	80 93 a2 00 	sts	0x00A2, r24
	if(tx_485_busy) { /* We still have characters buffered, so safe to just update the write index */ 
    54c2:	80 91 12 2e 	lds	r24, 0x2E12
    54c6:	88 23       	and	r24, r24
    54c8:	29 f0       	breq	.+10     	; 0x54d4 <WriteByte_Comm485+0x4a>
		tx_485_wridx = nextSlot;
    54ca:	c0 93 c8 2e 	sts	0x2EC8, r28
		PMIC.CTRL = savePMIC;
    54ce:	d0 93 a2 00 	sts	0x00A2, r29
    54d2:	16 c0       	rjmp	.+44     	; 0x5500 <WriteByte_Comm485+0x76>
	}
	else {
		PORTD.OUTSET = PD_DRIVER_ENABLE_COMM485;
    54d4:	82 e0       	ldi	r24, 0x02	; 2
    54d6:	80 93 65 06 	sts	0x0665, r24
		now = GetTicks();
    54da:	0e 94 5a 2c 	call	0x58b4	; 0x58b4 <GetTicks>
		tx_485_busy = 1;
    54de:	21 e0       	ldi	r18, 0x01	; 1
    54e0:	20 93 12 2e 	sts	0x2E12, r18
		tx_485_wridx = nextSlot;
    54e4:	c0 93 c8 2e 	sts	0x2EC8, r28
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    54e8:	20 e2       	ldi	r18, 0x20	; 32
    54ea:	20 93 a3 09 	sts	0x09A3, r18
		PMIC.CTRL = savePMIC;
    54ee:	d0 93 a2 00 	sts	0x00A2, r29
		/* Busy-wait for the output enable time of the RS485 driver to pass */
		BusyWaitTillAfter(now, 3);
    54f2:	63 e0       	ldi	r22, 0x03	; 3
    54f4:	70 e0       	ldi	r23, 0x00	; 0
    54f6:	0e 94 5f 2c 	call	0x58be	; 0x58be <BusyWaitTillAfter>
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    54fa:	81 e2       	ldi	r24, 0x21	; 33
    54fc:	80 93 a3 09 	sts	0x09A3, r24
	}

} /* WriteByte_Comm485 */
    5500:	df 91       	pop	r29
    5502:	cf 91       	pop	r28
    5504:	08 95       	ret

00005506 <CanRead_Ctrl>:


uint8_t CanRead_Ctrl(void) {
	uint8_t wridx = rx_ctrl_wridx, rdidx = rx_ctrl_rdidx;
    5506:	80 91 5f 2c 	lds	r24, 0x2C5F
    550a:	90 91 5e 2c 	lds	r25, 0x2C5E
	
	if(wridx >= rdidx)
    550e:	89 17       	cp	r24, r25
    5510:	08 f4       	brcc	.+2      	; 0x5514 <CanRead_Ctrl+0xe>
		return wridx - rdidx;
	else
		return wridx - rdidx + RXBUF_DEPTH_CTRL;
    5512:	80 5b       	subi	r24, 0xB0	; 176
    5514:	89 1b       	sub	r24, r25
	
} /* CanRead_Ctrl */
    5516:	08 95       	ret

00005518 <ReadByte_Ctrl>:


uint8_t ReadByte_Ctrl(void) {
    5518:	cf 93       	push	r28
	uint8_t res, curSlot, nextSlot;
	
	curSlot = rx_ctrl_rdidx;
    551a:	c0 91 5e 2c 	lds	r28, 0x2C5E
	/* Busy-wait for a byte to be available. Should not be necessary if the caller calls CanRead_xxx() first */
	while(!CanRead_Ctrl()) ;
    551e:	0e 94 83 2a 	call	0x5506	; 0x5506 <CanRead_Ctrl>
    5522:	88 23       	and	r24, r24
    5524:	e1 f3       	breq	.-8      	; 0x551e <ReadByte_Ctrl+0x6>
	
	res = rx_ctrl_buf[curSlot];
    5526:	ec 2f       	mov	r30, r28
    5528:	f0 e0       	ldi	r31, 0x00	; 0
    552a:	e2 5f       	subi	r30, 0xF2	; 242
    552c:	f3 4d       	sbci	r31, 0xD3	; 211
    552e:	80 81       	ld	r24, Z

	nextSlot = curSlot + 1;
    5530:	91 e0       	ldi	r25, 0x01	; 1
    5532:	9c 0f       	add	r25, r28
	if(nextSlot >= RXBUF_DEPTH_CTRL)
    5534:	90 35       	cpi	r25, 0x50	; 80
    5536:	08 f0       	brcs	.+2      	; 0x553a <ReadByte_Ctrl+0x22>
		nextSlot = 0;
    5538:	90 e0       	ldi	r25, 0x00	; 0
	rx_ctrl_rdidx = nextSlot;
    553a:	90 93 5e 2c 	sts	0x2C5E, r25
	
	return res;
} /* ReadByte_Ctrl */
    553e:	cf 91       	pop	r28
    5540:	08 95       	ret

00005542 <CanWrite_Ctrl>:


uint8_t CanWrite_Ctrl(void) {
	uint8_t wridx1 = tx_ctrl_wridx + 1, rdidx = tx_ctrl_rdidx;
    5542:	20 91 5b 2d 	lds	r18, 0x2D5B
    5546:	91 e0       	ldi	r25, 0x01	; 1
    5548:	92 0f       	add	r25, r18
    554a:	80 91 5a 2d 	lds	r24, 0x2D5A
	
	if(wridx1 >= TXBUF_DEPTH_CTRL)
    554e:	9a 3f       	cpi	r25, 0xFA	; 250
    5550:	10 f0       	brcs	.+4      	; 0x5556 <CanWrite_Ctrl+0x14>
		wridx1 -= TXBUF_DEPTH_CTRL;
    5552:	97 e0       	ldi	r25, 0x07	; 7
    5554:	92 0f       	add	r25, r18
	if(rdidx >= wridx1)
    5556:	89 17       	cp	r24, r25
    5558:	08 f4       	brcc	.+2      	; 0x555c <CanWrite_Ctrl+0x1a>
		return rdidx - wridx1;
	else
		return rdidx - wridx1 + TXBUF_DEPTH_CTRL;
    555a:	86 50       	subi	r24, 0x06	; 6
    555c:	89 1b       	sub	r24, r25
	
} /* CanWrite_Ctrl */
    555e:	08 95       	ret

00005560 <WriteByte_Ctrl>:


void WriteByte_Ctrl(uint8_t data) {
    5560:	cf 93       	push	r28
    5562:	df 93       	push	r29
    5564:	c8 2f       	mov	r28, r24
	uint8_t curSlot, nextSlot, savePMIC;
	
	/* Busy-wait for a byte to be available. Should not be necessary if the caller calls CanWrite_xxx() first */
	while(!CanWrite_Ctrl()) 
		USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    5566:	d1 e2       	ldi	r29, 0x21	; 33

void WriteByte_Ctrl(uint8_t data) {
	uint8_t curSlot, nextSlot, savePMIC;
	
	/* Busy-wait for a byte to be available. Should not be necessary if the caller calls CanWrite_xxx() first */
	while(!CanWrite_Ctrl()) 
    5568:	0e 94 a1 2a 	call	0x5542	; 0x5542 <CanWrite_Ctrl>
    556c:	81 11       	cpse	r24, r1
    556e:	03 c0       	rjmp	.+6      	; 0x5576 <WriteByte_Ctrl+0x16>
		USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    5570:	d0 93 b3 09 	sts	0x09B3, r29
    5574:	f9 cf       	rjmp	.-14     	; 0x5568 <WriteByte_Ctrl+0x8>
	
	curSlot = tx_ctrl_wridx;
    5576:	90 91 5b 2d 	lds	r25, 0x2D5B
	tx_ctrl_buf[curSlot] = data;
    557a:	e9 2f       	mov	r30, r25
    557c:	f0 e0       	ldi	r31, 0x00	; 0
    557e:	e0 5a       	subi	r30, 0xA0	; 160
    5580:	f3 4d       	sbci	r31, 0xD3	; 211
    5582:	c0 83       	st	Z, r28
	
	nextSlot = curSlot + 1;
    5584:	81 e0       	ldi	r24, 0x01	; 1
    5586:	89 0f       	add	r24, r25
	if(nextSlot >= TXBUF_DEPTH_CTRL)
    5588:	8a 3f       	cpi	r24, 0xFA	; 250
    558a:	08 f0       	brcs	.+2      	; 0x558e <WriteByte_Ctrl+0x2e>
		nextSlot = 0;
    558c:	80 e0       	ldi	r24, 0x00	; 0

	savePMIC = PMIC.CTRL;
    558e:	90 91 a2 00 	lds	r25, 0x00A2
	PMIC.CTRL = savePMIC & ~PMIC_LOLVLEN_bm;
    5592:	29 2f       	mov	r18, r25
    5594:	2e 7f       	andi	r18, 0xFE	; 254
    5596:	20 93 a2 00 	sts	0x00A2, r18
	tx_ctrl_wridx = nextSlot;
    559a:	80 93 5b 2d 	sts	0x2D5B, r24
	USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    559e:	81 e2       	ldi	r24, 0x21	; 33
    55a0:	80 93 b3 09 	sts	0x09B3, r24
	PMIC.CTRL = savePMIC;
    55a4:	90 93 a2 00 	sts	0x00A2, r25

} /* WriteByte_Ctrl */
    55a8:	df 91       	pop	r29
    55aa:	cf 91       	pop	r28
    55ac:	08 95       	ret

000055ae <Ctrl_putchar>:
} /* Comm485_putchar */


#define TOHEX(x) (((x) & 0x0F) <= 9 ? ('0' + ((x) & 0x0F)) : ('A' + ((x) & 0x0F) - 10))

static int Ctrl_putchar(char c, FILE *stream) {
    55ae:	cf 93       	push	r28
    55b0:	df 93       	push	r29
    55b2:	c8 2f       	mov	r28, r24
	
	static uint8_t checksum;
	
	WriteByte_Ctrl((uint8_t) c);
    55b4:	0e 94 b0 2a 	call	0x5560	; 0x5560 <WriteByte_Ctrl>
	
	if(c == '>') {
    55b8:	ce 33       	cpi	r28, 0x3E	; 62
    55ba:	19 f4       	brne	.+6      	; 0x55c2 <Ctrl_putchar+0x14>
		checksum = 0;
    55bc:	10 92 41 2b 	sts	0x2B41, r1
    55c0:	21 c0       	rjmp	.+66     	; 0x5604 <Ctrl_putchar+0x56>
    55c2:	d0 91 41 2b 	lds	r29, 0x2B41
	}
	else if(c == '<') {
    55c6:	cc 33       	cpi	r28, 0x3C	; 60
    55c8:	d1 f4       	brne	.+52     	; 0x55fe <Ctrl_putchar+0x50>
		WriteByte_Ctrl(TOHEX((uint8_t) checksum >> 4));
    55ca:	8d 2f       	mov	r24, r29
    55cc:	82 95       	swap	r24
    55ce:	8f 70       	andi	r24, 0x0F	; 15
    55d0:	28 2f       	mov	r18, r24
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	2a 30       	cpi	r18, 0x0A	; 10
    55d6:	31 05       	cpc	r19, r1
    55d8:	14 f4       	brge	.+4      	; 0x55de <Ctrl_putchar+0x30>
    55da:	80 5d       	subi	r24, 0xD0	; 208
    55dc:	01 c0       	rjmp	.+2      	; 0x55e0 <Ctrl_putchar+0x32>
    55de:	89 5c       	subi	r24, 0xC9	; 201
    55e0:	0e 94 b0 2a 	call	0x5560	; 0x5560 <WriteByte_Ctrl>
		WriteByte_Ctrl(TOHEX((uint8_t) checksum));
    55e4:	df 70       	andi	r29, 0x0F	; 15
    55e6:	2d 2f       	mov	r18, r29
    55e8:	30 e0       	ldi	r19, 0x00	; 0
    55ea:	2a 30       	cpi	r18, 0x0A	; 10
    55ec:	31 05       	cpc	r19, r1
    55ee:	14 f4       	brge	.+4      	; 0x55f4 <Ctrl_putchar+0x46>
    55f0:	80 e3       	ldi	r24, 0x30	; 48
    55f2:	01 c0       	rjmp	.+2      	; 0x55f6 <Ctrl_putchar+0x48>
    55f4:	87 e3       	ldi	r24, 0x37	; 55
    55f6:	8d 0f       	add	r24, r29
    55f8:	0e 94 b0 2a 	call	0x5560	; 0x5560 <WriteByte_Ctrl>
    55fc:	03 c0       	rjmp	.+6      	; 0x5604 <Ctrl_putchar+0x56>
	}
	else {
		checksum ^= (uint8_t) c;
    55fe:	cd 27       	eor	r28, r29
    5600:	c0 93 41 2b 	sts	0x2B41, r28
	}
	
	return 0;
	
} /* Ctrl_putchar */
    5604:	80 e0       	ldi	r24, 0x00	; 0
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	df 91       	pop	r29
    560a:	cf 91       	pop	r28
    560c:	08 95       	ret

0000560e <CanRead_FC>:


uint8_t CanRead_FC(void) {
	uint8_t wridx = rx_fc_wridx, rdidx = rx_fc_rdidx;
    560e:	80 91 a7 2b 	lds	r24, 0x2BA7
    5612:	90 91 a6 2b 	lds	r25, 0x2BA6
	
	if(wridx >= rdidx)
    5616:	89 17       	cp	r24, r25
    5618:	08 f4       	brcc	.+2      	; 0x561c <CanRead_FC+0xe>
		return wridx - rdidx;
	else
		return wridx - rdidx + RXBUF_DEPTH_FC;
    561a:	8c 59       	subi	r24, 0x9C	; 156
    561c:	89 1b       	sub	r24, r25
	
} /* CanRead_FC */
    561e:	08 95       	ret

00005620 <ReadByte_FC>:


uint8_t ReadByte_FC(void) {
    5620:	cf 93       	push	r28
	uint8_t res, curSlot, nextSlot;
	
	curSlot = rx_fc_rdidx;
    5622:	c0 91 a6 2b 	lds	r28, 0x2BA6
	/* Busy-wait for a byte to be available. Should not be necessary if the caller calls CanRead_xxx() first */
	while(!CanRead_FC()) ;
    5626:	0e 94 07 2b 	call	0x560e	; 0x560e <CanRead_FC>
    562a:	88 23       	and	r24, r24
    562c:	e1 f3       	breq	.-8      	; 0x5626 <ReadByte_FC+0x6>
	
	res = rx_fc_buf[curSlot];
    562e:	ec 2f       	mov	r30, r28
    5630:	f0 e0       	ldi	r31, 0x00	; 0
    5632:	ee 5b       	subi	r30, 0xBE	; 190
    5634:	f4 4d       	sbci	r31, 0xD4	; 212
    5636:	80 81       	ld	r24, Z

	nextSlot = curSlot + 1;
    5638:	91 e0       	ldi	r25, 0x01	; 1
    563a:	9c 0f       	add	r25, r28
	if(nextSlot >= RXBUF_DEPTH_FC)
    563c:	94 36       	cpi	r25, 0x64	; 100
    563e:	08 f0       	brcs	.+2      	; 0x5642 <ReadByte_FC+0x22>
		nextSlot = 0;
    5640:	90 e0       	ldi	r25, 0x00	; 0
	rx_fc_rdidx = nextSlot;
    5642:	90 93 a6 2b 	sts	0x2BA6, r25
	
	return res;
} /* ReadByte_FC */
    5646:	cf 91       	pop	r28
    5648:	08 95       	ret

0000564a <__vector_88>:
	PMIC.CTRL = savePMIC;

} /* WriteByte_FC */


ISR(USARTD0_RXC_vect) {
    564a:	1f 92       	push	r1
    564c:	0f 92       	push	r0
    564e:	0f b6       	in	r0, 0x3f	; 63
    5650:	0f 92       	push	r0
    5652:	11 24       	eor	r1, r1
    5654:	0b b6       	in	r0, 0x3b	; 59
    5656:	0f 92       	push	r0
    5658:	8f 93       	push	r24
    565a:	9f 93       	push	r25
    565c:	ef 93       	push	r30
    565e:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_485_wridx;
    5660:	80 91 11 2e 	lds	r24, 0x2E11
	rx_485_buf[curSlot] = USARTD0.DATA;
    5664:	e8 2f       	mov	r30, r24
    5666:	f0 e0       	ldi	r31, 0x00	; 0
    5668:	90 91 a0 09 	lds	r25, 0x09A0
    566c:	e4 5a       	subi	r30, 0xA4	; 164
    566e:	f2 4d       	sbci	r31, 0xD2	; 210
    5670:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5672:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_COMM485)
    5674:	84 3b       	cpi	r24, 0xB4	; 180
    5676:	08 f0       	brcs	.+2      	; 0x567a <__vector_88+0x30>
	nextSlot = 0;
    5678:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_485_rdidx)
    567a:	90 91 10 2e 	lds	r25, 0x2E10
    567e:	89 13       	cpse	r24, r25
	rx_485_wridx = nextSlot;
    5680:	80 93 11 2e 	sts	0x2E11, r24
	
} /* ISR(USARTD0_RXC_vect) */
    5684:	ff 91       	pop	r31
    5686:	ef 91       	pop	r30
    5688:	9f 91       	pop	r25
    568a:	8f 91       	pop	r24
    568c:	0f 90       	pop	r0
    568e:	0b be       	out	0x3b, r0	; 59
    5690:	0f 90       	pop	r0
    5692:	0f be       	out	0x3f, r0	; 63
    5694:	0f 90       	pop	r0
    5696:	1f 90       	pop	r1
    5698:	18 95       	reti

0000569a <__vector_89>:


ISR(USARTD0_DRE_vect) {
    569a:	1f 92       	push	r1
    569c:	0f 92       	push	r0
    569e:	0f b6       	in	r0, 0x3f	; 63
    56a0:	0f 92       	push	r0
    56a2:	11 24       	eor	r1, r1
    56a4:	0b b6       	in	r0, 0x3b	; 59
    56a6:	0f 92       	push	r0
    56a8:	2f 93       	push	r18
    56aa:	8f 93       	push	r24
    56ac:	9f 93       	push	r25
    56ae:	ef 93       	push	r30
    56b0:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_485_rdidx;
    56b2:	80 91 c7 2e 	lds	r24, 0x2EC7
	lastSlot = tx_485_wridx;
    56b6:	90 91 c8 2e 	lds	r25, 0x2EC8
	
	if(curSlot != lastSlot) {
    56ba:	89 17       	cp	r24, r25
    56bc:	69 f0       	breq	.+26     	; 0x56d8 <__vector_89+0x3e>
		USARTD0.DATA = tx_485_buf[curSlot];
    56be:	e8 2f       	mov	r30, r24
    56c0:	f0 e0       	ldi	r31, 0x00	; 0
    56c2:	ed 5e       	subi	r30, 0xED	; 237
    56c4:	f1 4d       	sbci	r31, 0xD1	; 209
    56c6:	20 81       	ld	r18, Z
    56c8:	20 93 a0 09 	sts	0x09A0, r18
		if(++nextSlot >= TXBUF_DEPTH_COMM485)
    56cc:	8f 5f       	subi	r24, 0xFF	; 255
    56ce:	84 3b       	cpi	r24, 0xB4	; 180
    56d0:	08 f0       	brcs	.+2      	; 0x56d4 <__vector_89+0x3a>
		nextSlot = 0;
    56d2:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    56d4:	89 13       	cpse	r24, r25
    56d6:	03 c0       	rjmp	.+6      	; 0x56de <__vector_89+0x44>
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_LO_gc | USART_DREINTLVL_OFF_gc;
    56d8:	94 e2       	ldi	r25, 0x24	; 36
    56da:	90 93 a3 09 	sts	0x09A3, r25
	
	tx_485_rdidx = nextSlot;
    56de:	80 93 c7 2e 	sts	0x2EC7, r24
	
} /* ISR(USARTD0_DRE_vect) */
    56e2:	ff 91       	pop	r31
    56e4:	ef 91       	pop	r30
    56e6:	9f 91       	pop	r25
    56e8:	8f 91       	pop	r24
    56ea:	2f 91       	pop	r18
    56ec:	0f 90       	pop	r0
    56ee:	0b be       	out	0x3b, r0	; 59
    56f0:	0f 90       	pop	r0
    56f2:	0f be       	out	0x3f, r0	; 63
    56f4:	0f 90       	pop	r0
    56f6:	1f 90       	pop	r1
    56f8:	18 95       	reti

000056fa <__vector_90>:


ISR(USARTD0_TXC_vect) {
    56fa:	1f 92       	push	r1
    56fc:	0f 92       	push	r0
    56fe:	0f b6       	in	r0, 0x3f	; 63
    5700:	0f 92       	push	r0
    5702:	11 24       	eor	r1, r1
    5704:	8f 93       	push	r24
    5706:	9f 93       	push	r25
	
	if(tx_485_rdidx == tx_485_wridx) {/* Still no bytes to tx ? */
    5708:	90 91 c7 2e 	lds	r25, 0x2EC7
    570c:	80 91 c8 2e 	lds	r24, 0x2EC8
    5710:	98 13       	cpse	r25, r24
    5712:	06 c0       	rjmp	.+12     	; 0x5720 <__vector_90+0x26>
		PORTD.OUTCLR = PD_DRIVER_ENABLE_COMM485; /* Transmission complete; we can turn off the driver enable line */
    5714:	82 e0       	ldi	r24, 0x02	; 2
    5716:	80 93 66 06 	sts	0x0666, r24
		tx_485_busy = 0;
    571a:	10 92 12 2e 	sts	0x2E12, r1
    571e:	03 c0       	rjmp	.+6      	; 0x5726 <__vector_90+0x2c>
	}	
	else /* Re-enable TX ISR */
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    5720:	81 e2       	ldi	r24, 0x21	; 33
    5722:	80 93 a3 09 	sts	0x09A3, r24
	
} /* ISR(USARTD0_TXC_vect) */
    5726:	9f 91       	pop	r25
    5728:	8f 91       	pop	r24
    572a:	0f 90       	pop	r0
    572c:	0f be       	out	0x3f, r0	; 63
    572e:	0f 90       	pop	r0
    5730:	1f 90       	pop	r1
    5732:	18 95       	reti

00005734 <__vector_91>:


ISR(USARTD1_RXC_vect) {
    5734:	1f 92       	push	r1
    5736:	0f 92       	push	r0
    5738:	0f b6       	in	r0, 0x3f	; 63
    573a:	0f 92       	push	r0
    573c:	11 24       	eor	r1, r1
    573e:	0b b6       	in	r0, 0x3b	; 59
    5740:	0f 92       	push	r0
    5742:	8f 93       	push	r24
    5744:	9f 93       	push	r25
    5746:	ef 93       	push	r30
    5748:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_ctrl_wridx;
    574a:	80 91 5f 2c 	lds	r24, 0x2C5F
	rx_ctrl_buf[curSlot] = USARTD1.DATA;
    574e:	e8 2f       	mov	r30, r24
    5750:	f0 e0       	ldi	r31, 0x00	; 0
    5752:	90 91 b0 09 	lds	r25, 0x09B0
    5756:	e2 5f       	subi	r30, 0xF2	; 242
    5758:	f3 4d       	sbci	r31, 0xD3	; 211
    575a:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    575c:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_CTRL)
    575e:	80 35       	cpi	r24, 0x50	; 80
    5760:	08 f0       	brcs	.+2      	; 0x5764 <__vector_91+0x30>
		nextSlot = 0;
    5762:	80 e0       	ldi	r24, 0x00	; 0
		
	if(nextSlot != rx_ctrl_rdidx)
    5764:	90 91 5e 2c 	lds	r25, 0x2C5E
    5768:	89 13       	cpse	r24, r25
		rx_ctrl_wridx = nextSlot;
    576a:	80 93 5f 2c 	sts	0x2C5F, r24
	
} /* ISR(USARTD1_RXC_vect) */
    576e:	ff 91       	pop	r31
    5770:	ef 91       	pop	r30
    5772:	9f 91       	pop	r25
    5774:	8f 91       	pop	r24
    5776:	0f 90       	pop	r0
    5778:	0b be       	out	0x3b, r0	; 59
    577a:	0f 90       	pop	r0
    577c:	0f be       	out	0x3f, r0	; 63
    577e:	0f 90       	pop	r0
    5780:	1f 90       	pop	r1
    5782:	18 95       	reti

00005784 <__vector_92>:


ISR(USARTD1_DRE_vect) {
    5784:	1f 92       	push	r1
    5786:	0f 92       	push	r0
    5788:	0f b6       	in	r0, 0x3f	; 63
    578a:	0f 92       	push	r0
    578c:	11 24       	eor	r1, r1
    578e:	0b b6       	in	r0, 0x3b	; 59
    5790:	0f 92       	push	r0
    5792:	2f 93       	push	r18
    5794:	8f 93       	push	r24
    5796:	9f 93       	push	r25
    5798:	ef 93       	push	r30
    579a:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_ctrl_rdidx;
    579c:	80 91 5a 2d 	lds	r24, 0x2D5A
	lastSlot = tx_ctrl_wridx;
    57a0:	90 91 5b 2d 	lds	r25, 0x2D5B
	
	if(curSlot != lastSlot) {
    57a4:	89 17       	cp	r24, r25
    57a6:	69 f0       	breq	.+26     	; 0x57c2 <__vector_92+0x3e>
		USARTD1.DATA = tx_ctrl_buf[curSlot];
    57a8:	e8 2f       	mov	r30, r24
    57aa:	f0 e0       	ldi	r31, 0x00	; 0
    57ac:	e0 5a       	subi	r30, 0xA0	; 160
    57ae:	f3 4d       	sbci	r31, 0xD3	; 211
    57b0:	20 81       	ld	r18, Z
    57b2:	20 93 b0 09 	sts	0x09B0, r18
		nextSlot = curSlot + 1;
    57b6:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_CTRL)
    57b8:	8a 3f       	cpi	r24, 0xFA	; 250
    57ba:	08 f0       	brcs	.+2      	; 0x57be <__vector_92+0x3a>
			nextSlot = 0;
    57bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    57be:	89 13       	cpse	r24, r25
    57c0:	03 c0       	rjmp	.+6      	; 0x57c8 <__vector_92+0x44>
		USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    57c2:	90 e2       	ldi	r25, 0x20	; 32
    57c4:	90 93 b3 09 	sts	0x09B3, r25
	
	tx_ctrl_rdidx = nextSlot;
    57c8:	80 93 5a 2d 	sts	0x2D5A, r24
	
} /* ISR(USARTD1_DRE_vect) */
    57cc:	ff 91       	pop	r31
    57ce:	ef 91       	pop	r30
    57d0:	9f 91       	pop	r25
    57d2:	8f 91       	pop	r24
    57d4:	2f 91       	pop	r18
    57d6:	0f 90       	pop	r0
    57d8:	0b be       	out	0x3b, r0	; 59
    57da:	0f 90       	pop	r0
    57dc:	0f be       	out	0x3f, r0	; 63
    57de:	0f 90       	pop	r0
    57e0:	1f 90       	pop	r1
    57e2:	18 95       	reti

000057e4 <__vector_119>:


ISR(USARTF0_RXC_vect) {
    57e4:	1f 92       	push	r1
    57e6:	0f 92       	push	r0
    57e8:	0f b6       	in	r0, 0x3f	; 63
    57ea:	0f 92       	push	r0
    57ec:	11 24       	eor	r1, r1
    57ee:	0b b6       	in	r0, 0x3b	; 59
    57f0:	0f 92       	push	r0
    57f2:	8f 93       	push	r24
    57f4:	9f 93       	push	r25
    57f6:	ef 93       	push	r30
    57f8:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_fc_wridx;
    57fa:	80 91 a7 2b 	lds	r24, 0x2BA7
	rx_fc_buf[curSlot] = USARTF0.DATA;
    57fe:	e8 2f       	mov	r30, r24
    5800:	f0 e0       	ldi	r31, 0x00	; 0
    5802:	90 91 a0 0b 	lds	r25, 0x0BA0
    5806:	ee 5b       	subi	r30, 0xBE	; 190
    5808:	f4 4d       	sbci	r31, 0xD4	; 212
    580a:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    580c:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_FC)
    580e:	84 36       	cpi	r24, 0x64	; 100
    5810:	08 f0       	brcs	.+2      	; 0x5814 <__vector_119+0x30>
	nextSlot = 0;
    5812:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_fc_rdidx)
    5814:	90 91 a6 2b 	lds	r25, 0x2BA6
    5818:	89 13       	cpse	r24, r25
	rx_fc_wridx = nextSlot;
    581a:	80 93 a7 2b 	sts	0x2BA7, r24
	
} /* ISR(USARTF0_RXC_vect) */
    581e:	ff 91       	pop	r31
    5820:	ef 91       	pop	r30
    5822:	9f 91       	pop	r25
    5824:	8f 91       	pop	r24
    5826:	0f 90       	pop	r0
    5828:	0b be       	out	0x3b, r0	; 59
    582a:	0f 90       	pop	r0
    582c:	0f be       	out	0x3f, r0	; 63
    582e:	0f 90       	pop	r0
    5830:	1f 90       	pop	r1
    5832:	18 95       	reti

00005834 <__vector_120>:


ISR(USARTF0_DRE_vect) {
    5834:	1f 92       	push	r1
    5836:	0f 92       	push	r0
    5838:	0f b6       	in	r0, 0x3f	; 63
    583a:	0f 92       	push	r0
    583c:	11 24       	eor	r1, r1
    583e:	0b b6       	in	r0, 0x3b	; 59
    5840:	0f 92       	push	r0
    5842:	2f 93       	push	r18
    5844:	8f 93       	push	r24
    5846:	9f 93       	push	r25
    5848:	ef 93       	push	r30
    584a:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_fc_rdidx;
    584c:	80 91 0c 2c 	lds	r24, 0x2C0C
	lastSlot = tx_fc_wridx;
    5850:	90 91 0d 2c 	lds	r25, 0x2C0D
	
	if(curSlot != lastSlot) {
    5854:	89 17       	cp	r24, r25
    5856:	69 f0       	breq	.+26     	; 0x5872 <__vector_120+0x3e>
		USARTF0.DATA = tx_fc_buf[curSlot];
    5858:	e8 2f       	mov	r30, r24
    585a:	f0 e0       	ldi	r31, 0x00	; 0
    585c:	e8 55       	subi	r30, 0x58	; 88
    585e:	f4 4d       	sbci	r31, 0xD4	; 212
    5860:	20 81       	ld	r18, Z
    5862:	20 93 a0 0b 	sts	0x0BA0, r18
		nextSlot = curSlot + 1;
    5866:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_FC)
    5868:	84 36       	cpi	r24, 0x64	; 100
    586a:	08 f0       	brcs	.+2      	; 0x586e <__vector_120+0x3a>
		nextSlot = 0;
    586c:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    586e:	89 13       	cpse	r24, r25
    5870:	03 c0       	rjmp	.+6      	; 0x5878 <__vector_120+0x44>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5872:	90 e2       	ldi	r25, 0x20	; 32
    5874:	90 93 a3 0b 	sts	0x0BA3, r25
	
	tx_fc_rdidx = nextSlot;
    5878:	80 93 0c 2c 	sts	0x2C0C, r24
	
} /* ISR(USARTF0_DRE_vect) */
    587c:	ff 91       	pop	r31
    587e:	ef 91       	pop	r30
    5880:	9f 91       	pop	r25
    5882:	8f 91       	pop	r24
    5884:	2f 91       	pop	r18
    5886:	0f 90       	pop	r0
    5888:	0b be       	out	0x3b, r0	; 59
    588a:	0f 90       	pop	r0
    588c:	0f be       	out	0x3f, r0	; 63
    588e:	0f 90       	pop	r0
    5890:	1f 90       	pop	r1
    5892:	18 95       	reti

00005894 <InitTimer>:
#include "md_ticktimer.h"


void InitTimer(void) {

	TCE0.CTRLA = TC_CLKSEL_DIV8_gc;
    5894:	e0 e0       	ldi	r30, 0x00	; 0
    5896:	fa e0       	ldi	r31, 0x0A	; 10
    5898:	84 e0       	ldi	r24, 0x04	; 4
    589a:	80 83       	st	Z, r24
	TCE0.CTRLB = 0x00; /* No input capture, normal mode */
    589c:	11 82       	std	Z+1, r1	; 0x01
	/* CTRLC is of no interest to us */
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc; /* No events */
    589e:	13 82       	std	Z+3, r1	; 0x03
	TCE0.CTRLE = 0x00; /* No byte mode */
    58a0:	14 82       	std	Z+4, r1	; 0x04
	TCE0.PER = TICKTIMER_PERIOD;
    58a2:	8f ef       	ldi	r24, 0xFF	; 255
    58a4:	9f ef       	ldi	r25, 0xFF	; 255
    58a6:	86 a3       	std	Z+38, r24	; 0x26
    58a8:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc; /* No interrupts (for now) */
    58aa:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = 0x00; /* Disable Compare/Capture interrupts */
    58ac:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    58ae:	10 a2       	std	Z+32, r1	; 0x20
    58b0:	11 a2       	std	Z+33, r1	; 0x21
    58b2:	08 95       	ret

000058b4 <GetTicks>:

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    58b4:	e0 e0       	ldi	r30, 0x00	; 0
    58b6:	fa e0       	ldi	r31, 0x0A	; 10
    58b8:	80 a1       	ldd	r24, Z+32	; 0x20
    58ba:	91 a1       	ldd	r25, Z+33	; 0x21
} /* GetTicks */
    58bc:	08 95       	ret

000058be <BusyWaitTillAfter>:


timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
    58be:	9c 01       	movw	r18, r24
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
    58c0:	66 0f       	add	r22, r22
    58c2:	77 1f       	adc	r23, r23
    58c4:	66 0f       	add	r22, r22
    58c6:	77 1f       	adc	r23, r23
	TCE0.CNT = 0;

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    58c8:	80 91 20 0a 	lds	r24, 0x0A20
    58cc:	90 91 21 0a 	lds	r25, 0x0A21
timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
	
	do {
		now = GetTicks();
		if(now < then) // Fix wraparound
    58d0:	82 17       	cp	r24, r18
    58d2:	93 07       	cpc	r25, r19
    58d4:	08 f4       	brcc	.+2      	; 0x58d8 <BusyWaitTillAfter+0x1a>
		now += TICKTIMER_PERIOD;
    58d6:	01 97       	sbiw	r24, 0x01	; 1
		delta = now - then;
    58d8:	ac 01       	movw	r20, r24
    58da:	42 1b       	sub	r20, r18
    58dc:	53 0b       	sbc	r21, r19
	} while(delta < tickWait);
    58de:	46 17       	cp	r20, r22
    58e0:	57 07       	cpc	r21, r23
    58e2:	90 f3       	brcs	.-28     	; 0x58c8 <BusyWaitTillAfter+0xa>
	
	return now;
	
} /* BusyWaitTillAfter */
    58e4:	08 95       	ret

000058e6 <GetBusID>:
} /* InitUtil */


uint8_t GetBusID(void) {

	switch(BOARDID) {
    58e6:	80 91 68 06 	lds	r24, 0x0668
    58ea:	80 73       	andi	r24, 0x30	; 48
    58ec:	80 31       	cpi	r24, 0x10	; 16
    58ee:	51 f0       	breq	.+20     	; 0x5904 <GetBusID+0x1e>
    58f0:	80 32       	cpi	r24, 0x20	; 32
    58f2:	21 f0       	breq	.+8      	; 0x58fc <GetBusID+0x16>
    58f4:	81 11       	cpse	r24, r1
    58f6:	04 c0       	rjmp	.+8      	; 0x5900 <GetBusID+0x1a>
		case BOARDID_H2A:
			return SLAVE_ADDRESS_H2A;
    58f8:	83 e0       	ldi	r24, 0x03	; 3
    58fa:	08 95       	ret
			break;
		case BOARDID_EVA_L:
			return SLAVE_ADDRESS_EVA_L;
			break;
		case BOARDID_EVA_R:
			return SLAVE_ADDRESS_EVA_R;
    58fc:	86 e0       	ldi	r24, 0x06	; 6
    58fe:	08 95       	ret
			break;
		case BOARDID_EVA_M:
		default:
			return SLAVE_ADDRESS_EVA_M;
    5900:	87 e0       	ldi	r24, 0x07	; 7
    5902:	08 95       	ret
	switch(BOARDID) {
		case BOARDID_H2A:
			return SLAVE_ADDRESS_H2A;
			break;
		case BOARDID_EVA_L:
			return SLAVE_ADDRESS_EVA_L;
    5904:	85 e0       	ldi	r24, 0x05	; 5
		default:
			return SLAVE_ADDRESS_EVA_M;
			break;
	}
	
} /* GetBusID */
    5906:	08 95       	ret

00005908 <PrintBoardType>:


void PrintBoardType(FILE *fp) {
    5908:	bc 01       	movw	r22, r24
	
	switch(BOARDID) {
    590a:	80 91 68 06 	lds	r24, 0x0668
    590e:	80 73       	andi	r24, 0x30	; 48
    5910:	80 31       	cpi	r24, 0x10	; 16
    5912:	69 f0       	breq	.+26     	; 0x592e <PrintBoardType+0x26>
    5914:	28 f4       	brcc	.+10     	; 0x5920 <PrintBoardType+0x18>
    5916:	81 11       	cpse	r24, r1
    5918:	10 c0       	rjmp	.+32     	; 0x593a <PrintBoardType+0x32>
		case BOARDID_H2A:
			fprintf(fp, "H2A");
    591a:	8f e4       	ldi	r24, 0x4F	; 79
    591c:	97 e2       	ldi	r25, 0x27	; 39
    591e:	0f c0       	rjmp	.+30     	; 0x593e <PrintBoardType+0x36>
} /* GetBusID */


void PrintBoardType(FILE *fp) {
	
	switch(BOARDID) {
    5920:	80 32       	cpi	r24, 0x20	; 32
    5922:	41 f0       	breq	.+16     	; 0x5934 <PrintBoardType+0x2c>
    5924:	80 33       	cpi	r24, 0x30	; 48
    5926:	49 f4       	brne	.+18     	; 0x593a <PrintBoardType+0x32>
			break;
		case BOARDID_EVA_R:
			fprintf(fp, "EVA Right");
			break;
		case BOARDID_EVA_M:
			fprintf(fp, "EVA Measurement");
    5928:	86 e6       	ldi	r24, 0x66	; 102
    592a:	97 e2       	ldi	r25, 0x27	; 39
    592c:	08 c0       	rjmp	.+16     	; 0x593e <PrintBoardType+0x36>
	switch(BOARDID) {
		case BOARDID_H2A:
			fprintf(fp, "H2A");
			break;
		case BOARDID_EVA_L:
			fprintf(fp, "EVA Left");
    592e:	83 e5       	ldi	r24, 0x53	; 83
    5930:	97 e2       	ldi	r25, 0x27	; 39
    5932:	05 c0       	rjmp	.+10     	; 0x593e <PrintBoardType+0x36>
			break;
		case BOARDID_EVA_R:
			fprintf(fp, "EVA Right");
    5934:	8c e5       	ldi	r24, 0x5C	; 92
    5936:	97 e2       	ldi	r25, 0x27	; 39
    5938:	02 c0       	rjmp	.+4      	; 0x593e <PrintBoardType+0x36>
			break;
		case BOARDID_EVA_M:
			fprintf(fp, "EVA Measurement");
			break;
		default:
			fprintf(fp, "unknown");
    593a:	86 e7       	ldi	r24, 0x76	; 118
    593c:	97 e2       	ldi	r25, 0x27	; 39
    593e:	0c 94 da 38 	jmp	0x71b4	; 0x71b4 <fputs>

00005942 <PrintProcessorID>:
	}
	
} /* PrintBoardType */


void PrintProcessorID(FILE *fp) {
    5942:	ef 92       	push	r14
    5944:	ff 92       	push	r15
    5946:	0f 93       	push	r16
    5948:	1f 93       	push	r17
    594a:	cf 93       	push	r28
    594c:	df 93       	push	r29
    594e:	f8 2e       	mov	r15, r24
    5950:	e9 2e       	mov	r14, r25
	
	int8_t i;
	
	fprintf(fp, "cpu %02X%02X%02X%02X", MCU.DEVID0, MCU.DEVID1, MCU.DEVID2, MCU.REVID);
    5952:	30 91 93 00 	lds	r19, 0x0093
    5956:	20 91 92 00 	lds	r18, 0x0092
    595a:	90 91 91 00 	lds	r25, 0x0091
    595e:	80 91 90 00 	lds	r24, 0x0090
    5962:	1f 92       	push	r1
    5964:	3f 93       	push	r19
    5966:	1f 92       	push	r1
    5968:	2f 93       	push	r18
    596a:	1f 92       	push	r1
    596c:	9f 93       	push	r25
    596e:	1f 92       	push	r1
    5970:	8f 93       	push	r24
    5972:	2e e7       	ldi	r18, 0x7E	; 126
    5974:	37 e2       	ldi	r19, 0x27	; 39
    5976:	3f 93       	push	r19
    5978:	2f 93       	push	r18
    597a:	ef 92       	push	r14
    597c:	ff 92       	push	r15
    597e:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
    5982:	c9 ec       	ldi	r28, 0xC9	; 201
    5984:	de e2       	ldi	r29, 0x2E	; 46
    5986:	8d b7       	in	r24, 0x3d	; 61
    5988:	9e b7       	in	r25, 0x3e	; 62
    598a:	0c 96       	adiw	r24, 0x0c	; 12
    598c:	8d bf       	out	0x3d, r24	; 61
    598e:	9e bf       	out	0x3e, r25	; 62
	for(i = 0; i < PROCID_LEN; i++)
		fprintf(fp, "%02X", sProcID[i]);
    5990:	0d eb       	ldi	r16, 0xBD	; 189
    5992:	11 e2       	ldi	r17, 0x21	; 33
    5994:	89 91       	ld	r24, Y+
    5996:	1f 92       	push	r1
    5998:	8f 93       	push	r24
    599a:	1f 93       	push	r17
    599c:	0f 93       	push	r16
    599e:	ef 92       	push	r14
    59a0:	ff 92       	push	r15
    59a2:	0e 94 98 38 	call	0x7130	; 0x7130 <fprintf>
void PrintProcessorID(FILE *fp) {
	
	int8_t i;
	
	fprintf(fp, "cpu %02X%02X%02X%02X", MCU.DEVID0, MCU.DEVID1, MCU.DEVID2, MCU.REVID);
	for(i = 0; i < PROCID_LEN; i++)
    59a6:	0f 90       	pop	r0
    59a8:	0f 90       	pop	r0
    59aa:	0f 90       	pop	r0
    59ac:	0f 90       	pop	r0
    59ae:	0f 90       	pop	r0
    59b0:	0f 90       	pop	r0
    59b2:	9e e2       	ldi	r25, 0x2E	; 46
    59b4:	c4 3d       	cpi	r28, 0xD4	; 212
    59b6:	d9 07       	cpc	r29, r25
    59b8:	69 f7       	brne	.-38     	; 0x5994 <PrintProcessorID+0x52>
		fprintf(fp, "%02X", sProcID[i]);
	
} /* PrintProcessorID */
    59ba:	df 91       	pop	r29
    59bc:	cf 91       	pop	r28
    59be:	1f 91       	pop	r17
    59c0:	0f 91       	pop	r16
    59c2:	ff 90       	pop	r15
    59c4:	ef 90       	pop	r14
    59c6:	08 95       	ret

000059c8 <TryReadEEPROM>:


uint8_t TryReadEEPROM(void *dest, const void *eesrc, size_t sz) {
    59c8:	ef 92       	push	r14
    59ca:	ff 92       	push	r15
    59cc:	0f 93       	push	r16
    59ce:	1f 93       	push	r17
    59d0:	cf 93       	push	r28
    59d2:	df 93       	push	r29
    59d4:	cd b7       	in	r28, 0x3d	; 61
    59d6:	de b7       	in	r29, 0x3e	; 62
    59d8:	28 97       	sbiw	r28, 0x08	; 8
    59da:	cd bf       	out	0x3d, r28	; 61
    59dc:	de bf       	out	0x3e, r29	; 62
    59de:	7c 01       	movw	r14, r24
    59e0:	8a 01       	movw	r16, r20
	
	uint8_t buf[EE_MAX_ELEMENT_SIZE];
	int8_t i, err = 0;
	
	eeprom_read_block((void *) buf, eesrc, 2 * sz);
    59e2:	44 0f       	add	r20, r20
    59e4:	55 1f       	adc	r21, r21
    59e6:	ce 01       	movw	r24, r28
    59e8:	01 96       	adiw	r24, 0x01	; 1
    59ea:	0e 94 c3 39 	call	0x7386	; 0x7386 <__eerd_block_x256a3u>


uint8_t TryReadEEPROM(void *dest, const void *eesrc, size_t sz) {
	
	uint8_t buf[EE_MAX_ELEMENT_SIZE];
	int8_t i, err = 0;
    59ee:	80 e0       	ldi	r24, 0x00	; 0
	
	eeprom_read_block((void *) buf, eesrc, 2 * sz);
	for(i = 0; i < sz && !err; i++)
    59f0:	90 e0       	ldi	r25, 0x00	; 0
    59f2:	29 2f       	mov	r18, r25
    59f4:	33 27       	eor	r19, r19
    59f6:	27 fd       	sbrc	r18, 7
    59f8:	30 95       	com	r19
    59fa:	20 17       	cp	r18, r16
    59fc:	31 07       	cpc	r19, r17
    59fe:	a0 f4       	brcc	.+40     	; 0x5a28 <TryReadEEPROM+0x60>
    5a00:	81 11       	cpse	r24, r1
    5a02:	29 c0       	rjmp	.+82     	; 0x5a56 <TryReadEEPROM+0x8e>
		if(buf[i] != (uint8_t) ~buf[sz + i]) {
    5a04:	a1 e0       	ldi	r26, 0x01	; 1
    5a06:	b0 e0       	ldi	r27, 0x00	; 0
    5a08:	ac 0f       	add	r26, r28
    5a0a:	bd 1f       	adc	r27, r29
    5a0c:	a2 0f       	add	r26, r18
    5a0e:	b3 1f       	adc	r27, r19
    5a10:	fd 01       	movw	r30, r26
    5a12:	e0 0f       	add	r30, r16
    5a14:	f1 1f       	adc	r31, r17
    5a16:	40 81       	ld	r20, Z
    5a18:	40 95       	com	r20
    5a1a:	81 e0       	ldi	r24, 0x01	; 1
    5a1c:	2c 91       	ld	r18, X
    5a1e:	24 13       	cpse	r18, r20
    5a20:	01 c0       	rjmp	.+2      	; 0x5a24 <TryReadEEPROM+0x5c>
    5a22:	80 e0       	ldi	r24, 0x00	; 0
    5a24:	9f 5f       	subi	r25, 0xFF	; 255
    5a26:	e5 cf       	rjmp	.-54     	; 0x59f2 <TryReadEEPROM+0x2a>
			err = 1;
		}
	
	if(!err) {
    5a28:	81 11       	cpse	r24, r1
    5a2a:	15 c0       	rjmp	.+42     	; 0x5a56 <TryReadEEPROM+0x8e>
    5a2c:	90 e0       	ldi	r25, 0x00	; 0
		for(i = 0; i < sz; i++)
    5a2e:	29 2f       	mov	r18, r25
    5a30:	33 27       	eor	r19, r19
    5a32:	27 fd       	sbrc	r18, 7
    5a34:	30 95       	com	r19
    5a36:	20 17       	cp	r18, r16
    5a38:	31 07       	cpc	r19, r17
    5a3a:	70 f4       	brcc	.+28     	; 0x5a58 <TryReadEEPROM+0x90>
			((uint8_t *) dest)[i] = buf[i];
    5a3c:	f7 01       	movw	r30, r14
    5a3e:	e2 0f       	add	r30, r18
    5a40:	f3 1f       	adc	r31, r19
    5a42:	a1 e0       	ldi	r26, 0x01	; 1
    5a44:	b0 e0       	ldi	r27, 0x00	; 0
    5a46:	ac 0f       	add	r26, r28
    5a48:	bd 1f       	adc	r27, r29
    5a4a:	a2 0f       	add	r26, r18
    5a4c:	b3 1f       	adc	r27, r19
    5a4e:	2c 91       	ld	r18, X
    5a50:	20 83       	st	Z, r18
    5a52:	9f 5f       	subi	r25, 0xFF	; 255
    5a54:	ec cf       	rjmp	.-40     	; 0x5a2e <TryReadEEPROM+0x66>
    5a56:	81 e0       	ldi	r24, 0x01	; 1
	}
			
	return err;
	
} /* TryReadEEPROM */
    5a58:	28 96       	adiw	r28, 0x08	; 8
    5a5a:	cd bf       	out	0x3d, r28	; 61
    5a5c:	de bf       	out	0x3e, r29	; 62
    5a5e:	df 91       	pop	r29
    5a60:	cf 91       	pop	r28
    5a62:	1f 91       	pop	r17
    5a64:	0f 91       	pop	r16
    5a66:	ff 90       	pop	r15
    5a68:	ef 90       	pop	r14
    5a6a:	08 95       	ret

00005a6c <UpdateEEPROM>:


void UpdateEEPROM(const void *src, void *eedest, size_t sz) {
    5a6c:	0f 93       	push	r16
    5a6e:	1f 93       	push	r17
    5a70:	cf 93       	push	r28
    5a72:	df 93       	push	r29
    5a74:	cd b7       	in	r28, 0x3d	; 61
    5a76:	de b7       	in	r29, 0x3e	; 62
    5a78:	28 97       	sbiw	r28, 0x08	; 8
    5a7a:	cd bf       	out	0x3d, r28	; 61
    5a7c:	de bf       	out	0x3e, r29	; 62

	uint8_t buf[EE_MAX_ELEMENT_SIZE];
	int8_t i;
	
	for(i = 0; i < sz; i++) {
    5a7e:	a0 e0       	ldi	r26, 0x00	; 0
    5a80:	2a 2f       	mov	r18, r26
    5a82:	33 27       	eor	r19, r19
    5a84:	27 fd       	sbrc	r18, 7
    5a86:	30 95       	com	r19
    5a88:	24 17       	cp	r18, r20
    5a8a:	35 07       	cpc	r19, r21
    5a8c:	98 f4       	brcc	.+38     	; 0x5ab4 <UpdateEEPROM+0x48>
		buf[i] = ((const uint8_t *) src)[i];
    5a8e:	fc 01       	movw	r30, r24
    5a90:	e2 0f       	add	r30, r18
    5a92:	f3 1f       	adc	r31, r19
    5a94:	b0 81       	ld	r27, Z
    5a96:	01 e0       	ldi	r16, 0x01	; 1
    5a98:	10 e0       	ldi	r17, 0x00	; 0
    5a9a:	0c 0f       	add	r16, r28
    5a9c:	1d 1f       	adc	r17, r29
    5a9e:	20 0f       	add	r18, r16
    5aa0:	31 1f       	adc	r19, r17
    5aa2:	f9 01       	movw	r30, r18
    5aa4:	b0 83       	st	Z, r27
		buf[i + sz] = ~((const uint8_t *) src)[i];
    5aa6:	24 0f       	add	r18, r20
    5aa8:	35 1f       	adc	r19, r21
    5aaa:	b0 95       	com	r27
    5aac:	f9 01       	movw	r30, r18
    5aae:	b0 83       	st	Z, r27
    5ab0:	af 5f       	subi	r26, 0xFF	; 255
    5ab2:	e6 cf       	rjmp	.-52     	; 0x5a80 <UpdateEEPROM+0x14>
	}
	eeprom_update_block((const void *) buf, eedest, sz * 2);
    5ab4:	44 0f       	add	r20, r20
    5ab6:	55 1f       	adc	r21, r21
    5ab8:	ce 01       	movw	r24, r28
    5aba:	01 96       	adiw	r24, 0x01	; 1
    5abc:	0e 94 cf 39 	call	0x739e	; 0x739e <__eeupd_block_x256a3u>

} /* UpdateEEPROM */
    5ac0:	28 96       	adiw	r28, 0x08	; 8
    5ac2:	cd bf       	out	0x3d, r28	; 61
    5ac4:	de bf       	out	0x3e, r29	; 62
    5ac6:	df 91       	pop	r29
    5ac8:	cf 91       	pop	r28
    5aca:	1f 91       	pop	r17
    5acc:	0f 91       	pop	r16
    5ace:	08 95       	ret

00005ad0 <ReadCalibrationByte>:


uint8_t ReadCalibrationByte(uint8_t index) {
	uint8_t result;
	
	NVM.CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5ad0:	92 e0       	ldi	r25, 0x02	; 2
    5ad2:	a0 ec       	ldi	r26, 0xC0	; 192
    5ad4:	b1 e0       	ldi	r27, 0x01	; 1
    5ad6:	1a 96       	adiw	r26, 0x0a	; 10
    5ad8:	9c 93       	st	X, r25
    5ada:	1a 97       	sbiw	r26, 0x0a	; 10
	result = pgm_read_byte(index);
    5adc:	e8 2f       	mov	r30, r24
    5ade:	f0 e0       	ldi	r31, 0x00	; 0
    5ae0:	84 91       	lpm	r24, Z
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    5ae2:	1a 96       	adiw	r26, 0x0a	; 10
    5ae4:	1c 92       	st	X, r1
	
	return result;
} /* ReadCalibrationByte */
    5ae6:	08 95       	ret

00005ae8 <InitUtil>:

static uint8_t sProcID[PROCID_LEN];

void InitUtil(void) {

	PORTD.DIRCLR = BOARDID_BIT1 | BOARDID_BIT0;
    5ae8:	e0 e6       	ldi	r30, 0x60	; 96
    5aea:	f6 e0       	ldi	r31, 0x06	; 6
    5aec:	80 e3       	ldi	r24, 0x30	; 48
    5aee:	82 83       	std	Z+2, r24	; 0x02

	PORTD.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    5af0:	80 e1       	ldi	r24, 0x10	; 16
    5af2:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    5af4:	85 8b       	std	Z+21, r24	; 0x15

	/* Read and save processor serial #. Source: http://www.avrfreaks.net/forum/tutc-introduction-offsetof-reading-xmega-sn */
	(void) ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ); 
    5af6:	88 e0       	ldi	r24, 0x08	; 8
    5af8:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
	/* First read after reset or possibly Power Up returns zero, so read then toss this value */ 

	sProcID[0] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ) ;
    5afc:	88 e0       	ldi	r24, 0x08	; 8
    5afe:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b02:	80 93 c9 2e 	sts	0x2EC9, r24
	sProcID[1] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM1 ) ) ;
    5b06:	89 e0       	ldi	r24, 0x09	; 9
    5b08:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b0c:	80 93 ca 2e 	sts	0x2ECA, r24
	sProcID[2] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM2 ) ) ;
    5b10:	8a e0       	ldi	r24, 0x0A	; 10
    5b12:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b16:	80 93 cb 2e 	sts	0x2ECB, r24
	sProcID[3] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM3 ) ) ;
    5b1a:	8b e0       	ldi	r24, 0x0B	; 11
    5b1c:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b20:	80 93 cc 2e 	sts	0x2ECC, r24
	sProcID[4] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM4 ) ) ;
    5b24:	8c e0       	ldi	r24, 0x0C	; 12
    5b26:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b2a:	80 93 cd 2e 	sts	0x2ECD, r24
	sProcID[5] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM5 ) ) ;
    5b2e:	8d e0       	ldi	r24, 0x0D	; 13
    5b30:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b34:	80 93 ce 2e 	sts	0x2ECE, r24
	sProcID[6] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, WAFNUM ) ); 
    5b38:	80 e1       	ldi	r24, 0x10	; 16
    5b3a:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b3e:	80 93 cf 2e 	sts	0x2ECF, r24
	sProcID[7] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX0 ) ); 
    5b42:	82 e1       	ldi	r24, 0x12	; 18
    5b44:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b48:	80 93 d0 2e 	sts	0x2ED0, r24
	sProcID[8] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX1 ) ); 
    5b4c:	83 e1       	ldi	r24, 0x13	; 19
    5b4e:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b52:	80 93 d1 2e 	sts	0x2ED1, r24
	sProcID[9] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY0 ) ); 
    5b56:	84 e1       	ldi	r24, 0x14	; 20
    5b58:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b5c:	80 93 d2 2e 	sts	0x2ED2, r24
	sProcID[10] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY1 ) );	
    5b60:	85 e1       	ldi	r24, 0x15	; 21
    5b62:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <ReadCalibrationByte>
    5b66:	80 93 d3 2e 	sts	0x2ED3, r24
    5b6a:	08 95       	ret

00005b6c <__subsf3>:
    5b6c:	50 58       	subi	r21, 0x80	; 128

00005b6e <__addsf3>:
    5b6e:	bb 27       	eor	r27, r27
    5b70:	aa 27       	eor	r26, r26
    5b72:	0e d0       	rcall	.+28     	; 0x5b90 <__addsf3x>
    5b74:	c7 c1       	rjmp	.+910    	; 0x5f04 <__fp_round>
    5b76:	b8 d1       	rcall	.+880    	; 0x5ee8 <__fp_pscA>
    5b78:	30 f0       	brcs	.+12     	; 0x5b86 <__addsf3+0x18>
    5b7a:	bd d1       	rcall	.+890    	; 0x5ef6 <__fp_pscB>
    5b7c:	20 f0       	brcs	.+8      	; 0x5b86 <__addsf3+0x18>
    5b7e:	31 f4       	brne	.+12     	; 0x5b8c <__addsf3+0x1e>
    5b80:	9f 3f       	cpi	r25, 0xFF	; 255
    5b82:	11 f4       	brne	.+4      	; 0x5b88 <__addsf3+0x1a>
    5b84:	1e f4       	brtc	.+6      	; 0x5b8c <__addsf3+0x1e>
    5b86:	9d c1       	rjmp	.+826    	; 0x5ec2 <__fp_nan>
    5b88:	0e f4       	brtc	.+2      	; 0x5b8c <__addsf3+0x1e>
    5b8a:	e0 95       	com	r30
    5b8c:	e7 fb       	bst	r30, 7
    5b8e:	93 c1       	rjmp	.+806    	; 0x5eb6 <__fp_inf>

00005b90 <__addsf3x>:
    5b90:	e9 2f       	mov	r30, r25
    5b92:	c9 d1       	rcall	.+914    	; 0x5f26 <__fp_split3>
    5b94:	80 f3       	brcs	.-32     	; 0x5b76 <__addsf3+0x8>
    5b96:	ba 17       	cp	r27, r26
    5b98:	62 07       	cpc	r22, r18
    5b9a:	73 07       	cpc	r23, r19
    5b9c:	84 07       	cpc	r24, r20
    5b9e:	95 07       	cpc	r25, r21
    5ba0:	18 f0       	brcs	.+6      	; 0x5ba8 <__addsf3x+0x18>
    5ba2:	71 f4       	brne	.+28     	; 0x5bc0 <__addsf3x+0x30>
    5ba4:	9e f5       	brtc	.+102    	; 0x5c0c <__addsf3x+0x7c>
    5ba6:	e1 c1       	rjmp	.+962    	; 0x5f6a <__fp_zero>
    5ba8:	0e f4       	brtc	.+2      	; 0x5bac <__addsf3x+0x1c>
    5baa:	e0 95       	com	r30
    5bac:	0b 2e       	mov	r0, r27
    5bae:	ba 2f       	mov	r27, r26
    5bb0:	a0 2d       	mov	r26, r0
    5bb2:	0b 01       	movw	r0, r22
    5bb4:	b9 01       	movw	r22, r18
    5bb6:	90 01       	movw	r18, r0
    5bb8:	0c 01       	movw	r0, r24
    5bba:	ca 01       	movw	r24, r20
    5bbc:	a0 01       	movw	r20, r0
    5bbe:	11 24       	eor	r1, r1
    5bc0:	ff 27       	eor	r31, r31
    5bc2:	59 1b       	sub	r21, r25
    5bc4:	99 f0       	breq	.+38     	; 0x5bec <__addsf3x+0x5c>
    5bc6:	59 3f       	cpi	r21, 0xF9	; 249
    5bc8:	50 f4       	brcc	.+20     	; 0x5bde <__addsf3x+0x4e>
    5bca:	50 3e       	cpi	r21, 0xE0	; 224
    5bcc:	68 f1       	brcs	.+90     	; 0x5c28 <__addsf3x+0x98>
    5bce:	1a 16       	cp	r1, r26
    5bd0:	f0 40       	sbci	r31, 0x00	; 0
    5bd2:	a2 2f       	mov	r26, r18
    5bd4:	23 2f       	mov	r18, r19
    5bd6:	34 2f       	mov	r19, r20
    5bd8:	44 27       	eor	r20, r20
    5bda:	58 5f       	subi	r21, 0xF8	; 248
    5bdc:	f3 cf       	rjmp	.-26     	; 0x5bc4 <__addsf3x+0x34>
    5bde:	46 95       	lsr	r20
    5be0:	37 95       	ror	r19
    5be2:	27 95       	ror	r18
    5be4:	a7 95       	ror	r26
    5be6:	f0 40       	sbci	r31, 0x00	; 0
    5be8:	53 95       	inc	r21
    5bea:	c9 f7       	brne	.-14     	; 0x5bde <__addsf3x+0x4e>
    5bec:	7e f4       	brtc	.+30     	; 0x5c0c <__addsf3x+0x7c>
    5bee:	1f 16       	cp	r1, r31
    5bf0:	ba 0b       	sbc	r27, r26
    5bf2:	62 0b       	sbc	r22, r18
    5bf4:	73 0b       	sbc	r23, r19
    5bf6:	84 0b       	sbc	r24, r20
    5bf8:	ba f0       	brmi	.+46     	; 0x5c28 <__addsf3x+0x98>
    5bfa:	91 50       	subi	r25, 0x01	; 1
    5bfc:	a1 f0       	breq	.+40     	; 0x5c26 <__addsf3x+0x96>
    5bfe:	ff 0f       	add	r31, r31
    5c00:	bb 1f       	adc	r27, r27
    5c02:	66 1f       	adc	r22, r22
    5c04:	77 1f       	adc	r23, r23
    5c06:	88 1f       	adc	r24, r24
    5c08:	c2 f7       	brpl	.-16     	; 0x5bfa <__addsf3x+0x6a>
    5c0a:	0e c0       	rjmp	.+28     	; 0x5c28 <__addsf3x+0x98>
    5c0c:	ba 0f       	add	r27, r26
    5c0e:	62 1f       	adc	r22, r18
    5c10:	73 1f       	adc	r23, r19
    5c12:	84 1f       	adc	r24, r20
    5c14:	48 f4       	brcc	.+18     	; 0x5c28 <__addsf3x+0x98>
    5c16:	87 95       	ror	r24
    5c18:	77 95       	ror	r23
    5c1a:	67 95       	ror	r22
    5c1c:	b7 95       	ror	r27
    5c1e:	f7 95       	ror	r31
    5c20:	9e 3f       	cpi	r25, 0xFE	; 254
    5c22:	08 f0       	brcs	.+2      	; 0x5c26 <__addsf3x+0x96>
    5c24:	b3 cf       	rjmp	.-154    	; 0x5b8c <__addsf3+0x1e>
    5c26:	93 95       	inc	r25
    5c28:	88 0f       	add	r24, r24
    5c2a:	08 f0       	brcs	.+2      	; 0x5c2e <__addsf3x+0x9e>
    5c2c:	99 27       	eor	r25, r25
    5c2e:	ee 0f       	add	r30, r30
    5c30:	97 95       	ror	r25
    5c32:	87 95       	ror	r24
    5c34:	08 95       	ret

00005c36 <__cmpsf2>:
    5c36:	1b d1       	rcall	.+566    	; 0x5e6e <__fp_cmp>
    5c38:	08 f4       	brcc	.+2      	; 0x5c3c <__cmpsf2+0x6>
    5c3a:	81 e0       	ldi	r24, 0x01	; 1
    5c3c:	08 95       	ret

00005c3e <__divsf3>:
    5c3e:	0c d0       	rcall	.+24     	; 0x5c58 <__divsf3x>
    5c40:	61 c1       	rjmp	.+706    	; 0x5f04 <__fp_round>
    5c42:	59 d1       	rcall	.+690    	; 0x5ef6 <__fp_pscB>
    5c44:	40 f0       	brcs	.+16     	; 0x5c56 <__divsf3+0x18>
    5c46:	50 d1       	rcall	.+672    	; 0x5ee8 <__fp_pscA>
    5c48:	30 f0       	brcs	.+12     	; 0x5c56 <__divsf3+0x18>
    5c4a:	21 f4       	brne	.+8      	; 0x5c54 <__divsf3+0x16>
    5c4c:	5f 3f       	cpi	r21, 0xFF	; 255
    5c4e:	19 f0       	breq	.+6      	; 0x5c56 <__divsf3+0x18>
    5c50:	32 c1       	rjmp	.+612    	; 0x5eb6 <__fp_inf>
    5c52:	51 11       	cpse	r21, r1
    5c54:	8b c1       	rjmp	.+790    	; 0x5f6c <__fp_szero>
    5c56:	35 c1       	rjmp	.+618    	; 0x5ec2 <__fp_nan>

00005c58 <__divsf3x>:
    5c58:	66 d1       	rcall	.+716    	; 0x5f26 <__fp_split3>
    5c5a:	98 f3       	brcs	.-26     	; 0x5c42 <__divsf3+0x4>

00005c5c <__divsf3_pse>:
    5c5c:	99 23       	and	r25, r25
    5c5e:	c9 f3       	breq	.-14     	; 0x5c52 <__divsf3+0x14>
    5c60:	55 23       	and	r21, r21
    5c62:	b1 f3       	breq	.-20     	; 0x5c50 <__divsf3+0x12>
    5c64:	95 1b       	sub	r25, r21
    5c66:	55 0b       	sbc	r21, r21
    5c68:	bb 27       	eor	r27, r27
    5c6a:	aa 27       	eor	r26, r26
    5c6c:	62 17       	cp	r22, r18
    5c6e:	73 07       	cpc	r23, r19
    5c70:	84 07       	cpc	r24, r20
    5c72:	38 f0       	brcs	.+14     	; 0x5c82 <__divsf3_pse+0x26>
    5c74:	9f 5f       	subi	r25, 0xFF	; 255
    5c76:	5f 4f       	sbci	r21, 0xFF	; 255
    5c78:	22 0f       	add	r18, r18
    5c7a:	33 1f       	adc	r19, r19
    5c7c:	44 1f       	adc	r20, r20
    5c7e:	aa 1f       	adc	r26, r26
    5c80:	a9 f3       	breq	.-22     	; 0x5c6c <__divsf3_pse+0x10>
    5c82:	33 d0       	rcall	.+102    	; 0x5cea <__divsf3_pse+0x8e>
    5c84:	0e 2e       	mov	r0, r30
    5c86:	3a f0       	brmi	.+14     	; 0x5c96 <__divsf3_pse+0x3a>
    5c88:	e0 e8       	ldi	r30, 0x80	; 128
    5c8a:	30 d0       	rcall	.+96     	; 0x5cec <__divsf3_pse+0x90>
    5c8c:	91 50       	subi	r25, 0x01	; 1
    5c8e:	50 40       	sbci	r21, 0x00	; 0
    5c90:	e6 95       	lsr	r30
    5c92:	00 1c       	adc	r0, r0
    5c94:	ca f7       	brpl	.-14     	; 0x5c88 <__divsf3_pse+0x2c>
    5c96:	29 d0       	rcall	.+82     	; 0x5cea <__divsf3_pse+0x8e>
    5c98:	fe 2f       	mov	r31, r30
    5c9a:	27 d0       	rcall	.+78     	; 0x5cea <__divsf3_pse+0x8e>
    5c9c:	66 0f       	add	r22, r22
    5c9e:	77 1f       	adc	r23, r23
    5ca0:	88 1f       	adc	r24, r24
    5ca2:	bb 1f       	adc	r27, r27
    5ca4:	26 17       	cp	r18, r22
    5ca6:	37 07       	cpc	r19, r23
    5ca8:	48 07       	cpc	r20, r24
    5caa:	ab 07       	cpc	r26, r27
    5cac:	b0 e8       	ldi	r27, 0x80	; 128
    5cae:	09 f0       	breq	.+2      	; 0x5cb2 <__divsf3_pse+0x56>
    5cb0:	bb 0b       	sbc	r27, r27
    5cb2:	80 2d       	mov	r24, r0
    5cb4:	bf 01       	movw	r22, r30
    5cb6:	ff 27       	eor	r31, r31
    5cb8:	93 58       	subi	r25, 0x83	; 131
    5cba:	5f 4f       	sbci	r21, 0xFF	; 255
    5cbc:	2a f0       	brmi	.+10     	; 0x5cc8 <__divsf3_pse+0x6c>
    5cbe:	9e 3f       	cpi	r25, 0xFE	; 254
    5cc0:	51 05       	cpc	r21, r1
    5cc2:	68 f0       	brcs	.+26     	; 0x5cde <__divsf3_pse+0x82>
    5cc4:	f8 c0       	rjmp	.+496    	; 0x5eb6 <__fp_inf>
    5cc6:	52 c1       	rjmp	.+676    	; 0x5f6c <__fp_szero>
    5cc8:	5f 3f       	cpi	r21, 0xFF	; 255
    5cca:	ec f3       	brlt	.-6      	; 0x5cc6 <__divsf3_pse+0x6a>
    5ccc:	98 3e       	cpi	r25, 0xE8	; 232
    5cce:	dc f3       	brlt	.-10     	; 0x5cc6 <__divsf3_pse+0x6a>
    5cd0:	86 95       	lsr	r24
    5cd2:	77 95       	ror	r23
    5cd4:	67 95       	ror	r22
    5cd6:	b7 95       	ror	r27
    5cd8:	f7 95       	ror	r31
    5cda:	9f 5f       	subi	r25, 0xFF	; 255
    5cdc:	c9 f7       	brne	.-14     	; 0x5cd0 <__divsf3_pse+0x74>
    5cde:	88 0f       	add	r24, r24
    5ce0:	91 1d       	adc	r25, r1
    5ce2:	96 95       	lsr	r25
    5ce4:	87 95       	ror	r24
    5ce6:	97 f9       	bld	r25, 7
    5ce8:	08 95       	ret
    5cea:	e1 e0       	ldi	r30, 0x01	; 1
    5cec:	66 0f       	add	r22, r22
    5cee:	77 1f       	adc	r23, r23
    5cf0:	88 1f       	adc	r24, r24
    5cf2:	bb 1f       	adc	r27, r27
    5cf4:	62 17       	cp	r22, r18
    5cf6:	73 07       	cpc	r23, r19
    5cf8:	84 07       	cpc	r24, r20
    5cfa:	ba 07       	cpc	r27, r26
    5cfc:	20 f0       	brcs	.+8      	; 0x5d06 <__divsf3_pse+0xaa>
    5cfe:	62 1b       	sub	r22, r18
    5d00:	73 0b       	sbc	r23, r19
    5d02:	84 0b       	sbc	r24, r20
    5d04:	ba 0b       	sbc	r27, r26
    5d06:	ee 1f       	adc	r30, r30
    5d08:	88 f7       	brcc	.-30     	; 0x5cec <__divsf3_pse+0x90>
    5d0a:	e0 95       	com	r30
    5d0c:	08 95       	ret

00005d0e <__fixsfsi>:
    5d0e:	04 d0       	rcall	.+8      	; 0x5d18 <__fixunssfsi>
    5d10:	68 94       	set
    5d12:	b1 11       	cpse	r27, r1
    5d14:	2b c1       	rjmp	.+598    	; 0x5f6c <__fp_szero>
    5d16:	08 95       	ret

00005d18 <__fixunssfsi>:
    5d18:	0e d1       	rcall	.+540    	; 0x5f36 <__fp_splitA>
    5d1a:	88 f0       	brcs	.+34     	; 0x5d3e <__fixunssfsi+0x26>
    5d1c:	9f 57       	subi	r25, 0x7F	; 127
    5d1e:	90 f0       	brcs	.+36     	; 0x5d44 <__fixunssfsi+0x2c>
    5d20:	b9 2f       	mov	r27, r25
    5d22:	99 27       	eor	r25, r25
    5d24:	b7 51       	subi	r27, 0x17	; 23
    5d26:	a0 f0       	brcs	.+40     	; 0x5d50 <__fixunssfsi+0x38>
    5d28:	d1 f0       	breq	.+52     	; 0x5d5e <__fixunssfsi+0x46>
    5d2a:	66 0f       	add	r22, r22
    5d2c:	77 1f       	adc	r23, r23
    5d2e:	88 1f       	adc	r24, r24
    5d30:	99 1f       	adc	r25, r25
    5d32:	1a f0       	brmi	.+6      	; 0x5d3a <__fixunssfsi+0x22>
    5d34:	ba 95       	dec	r27
    5d36:	c9 f7       	brne	.-14     	; 0x5d2a <__fixunssfsi+0x12>
    5d38:	12 c0       	rjmp	.+36     	; 0x5d5e <__fixunssfsi+0x46>
    5d3a:	b1 30       	cpi	r27, 0x01	; 1
    5d3c:	81 f0       	breq	.+32     	; 0x5d5e <__fixunssfsi+0x46>
    5d3e:	15 d1       	rcall	.+554    	; 0x5f6a <__fp_zero>
    5d40:	b1 e0       	ldi	r27, 0x01	; 1
    5d42:	08 95       	ret
    5d44:	12 c1       	rjmp	.+548    	; 0x5f6a <__fp_zero>
    5d46:	67 2f       	mov	r22, r23
    5d48:	78 2f       	mov	r23, r24
    5d4a:	88 27       	eor	r24, r24
    5d4c:	b8 5f       	subi	r27, 0xF8	; 248
    5d4e:	39 f0       	breq	.+14     	; 0x5d5e <__fixunssfsi+0x46>
    5d50:	b9 3f       	cpi	r27, 0xF9	; 249
    5d52:	cc f3       	brlt	.-14     	; 0x5d46 <__fixunssfsi+0x2e>
    5d54:	86 95       	lsr	r24
    5d56:	77 95       	ror	r23
    5d58:	67 95       	ror	r22
    5d5a:	b3 95       	inc	r27
    5d5c:	d9 f7       	brne	.-10     	; 0x5d54 <__fixunssfsi+0x3c>
    5d5e:	3e f4       	brtc	.+14     	; 0x5d6e <__fixunssfsi+0x56>
    5d60:	90 95       	com	r25
    5d62:	80 95       	com	r24
    5d64:	70 95       	com	r23
    5d66:	61 95       	neg	r22
    5d68:	7f 4f       	sbci	r23, 0xFF	; 255
    5d6a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d6e:	08 95       	ret

00005d70 <__floatdisf>:
    5d70:	97 fb       	bst	r25, 7
    5d72:	0e f4       	brtc	.+2      	; 0x5d76 <__floatdisf+0x6>
    5d74:	a9 d0       	rcall	.+338    	; 0x5ec8 <__fp_negdi>
    5d76:	3e c0       	rjmp	.+124    	; 0x5df4 <__fp_di2sf>

00005d78 <__floatunsisf>:
    5d78:	e8 94       	clt
    5d7a:	09 c0       	rjmp	.+18     	; 0x5d8e <__floatsisf+0x12>

00005d7c <__floatsisf>:
    5d7c:	97 fb       	bst	r25, 7
    5d7e:	3e f4       	brtc	.+14     	; 0x5d8e <__floatsisf+0x12>
    5d80:	90 95       	com	r25
    5d82:	80 95       	com	r24
    5d84:	70 95       	com	r23
    5d86:	61 95       	neg	r22
    5d88:	7f 4f       	sbci	r23, 0xFF	; 255
    5d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8e:	99 23       	and	r25, r25
    5d90:	a9 f0       	breq	.+42     	; 0x5dbc <__floatsisf+0x40>
    5d92:	f9 2f       	mov	r31, r25
    5d94:	96 e9       	ldi	r25, 0x96	; 150
    5d96:	bb 27       	eor	r27, r27
    5d98:	93 95       	inc	r25
    5d9a:	f6 95       	lsr	r31
    5d9c:	87 95       	ror	r24
    5d9e:	77 95       	ror	r23
    5da0:	67 95       	ror	r22
    5da2:	b7 95       	ror	r27
    5da4:	f1 11       	cpse	r31, r1
    5da6:	f8 cf       	rjmp	.-16     	; 0x5d98 <__floatsisf+0x1c>
    5da8:	fa f4       	brpl	.+62     	; 0x5de8 <__floatsisf+0x6c>
    5daa:	bb 0f       	add	r27, r27
    5dac:	11 f4       	brne	.+4      	; 0x5db2 <__floatsisf+0x36>
    5dae:	60 ff       	sbrs	r22, 0
    5db0:	1b c0       	rjmp	.+54     	; 0x5de8 <__floatsisf+0x6c>
    5db2:	6f 5f       	subi	r22, 0xFF	; 255
    5db4:	7f 4f       	sbci	r23, 0xFF	; 255
    5db6:	8f 4f       	sbci	r24, 0xFF	; 255
    5db8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dba:	16 c0       	rjmp	.+44     	; 0x5de8 <__floatsisf+0x6c>
    5dbc:	88 23       	and	r24, r24
    5dbe:	11 f0       	breq	.+4      	; 0x5dc4 <__floatsisf+0x48>
    5dc0:	96 e9       	ldi	r25, 0x96	; 150
    5dc2:	11 c0       	rjmp	.+34     	; 0x5de6 <__floatsisf+0x6a>
    5dc4:	77 23       	and	r23, r23
    5dc6:	21 f0       	breq	.+8      	; 0x5dd0 <__floatsisf+0x54>
    5dc8:	9e e8       	ldi	r25, 0x8E	; 142
    5dca:	87 2f       	mov	r24, r23
    5dcc:	76 2f       	mov	r23, r22
    5dce:	05 c0       	rjmp	.+10     	; 0x5dda <__floatsisf+0x5e>
    5dd0:	66 23       	and	r22, r22
    5dd2:	71 f0       	breq	.+28     	; 0x5df0 <__floatsisf+0x74>
    5dd4:	96 e8       	ldi	r25, 0x86	; 134
    5dd6:	86 2f       	mov	r24, r22
    5dd8:	70 e0       	ldi	r23, 0x00	; 0
    5dda:	60 e0       	ldi	r22, 0x00	; 0
    5ddc:	2a f0       	brmi	.+10     	; 0x5de8 <__floatsisf+0x6c>
    5dde:	9a 95       	dec	r25
    5de0:	66 0f       	add	r22, r22
    5de2:	77 1f       	adc	r23, r23
    5de4:	88 1f       	adc	r24, r24
    5de6:	da f7       	brpl	.-10     	; 0x5dde <__floatsisf+0x62>
    5de8:	88 0f       	add	r24, r24
    5dea:	96 95       	lsr	r25
    5dec:	87 95       	ror	r24
    5dee:	97 f9       	bld	r25, 7
    5df0:	08 95       	ret

00005df2 <__floatundisf>:
    5df2:	e8 94       	clt

00005df4 <__fp_di2sf>:
    5df4:	f9 2f       	mov	r31, r25
    5df6:	96 eb       	ldi	r25, 0xB6	; 182
    5df8:	ff 23       	and	r31, r31
    5dfa:	81 f0       	breq	.+32     	; 0x5e1c <__fp_di2sf+0x28>
    5dfc:	12 16       	cp	r1, r18
    5dfe:	13 06       	cpc	r1, r19
    5e00:	14 06       	cpc	r1, r20
    5e02:	44 0b       	sbc	r20, r20
    5e04:	93 95       	inc	r25
    5e06:	f6 95       	lsr	r31
    5e08:	87 95       	ror	r24
    5e0a:	77 95       	ror	r23
    5e0c:	67 95       	ror	r22
    5e0e:	57 95       	ror	r21
    5e10:	40 40       	sbci	r20, 0x00	; 0
    5e12:	ff 23       	and	r31, r31
    5e14:	b9 f7       	brne	.-18     	; 0x5e04 <__fp_di2sf+0x10>
    5e16:	1b c0       	rjmp	.+54     	; 0x5e4e <__fp_di2sf+0x5a>
    5e18:	99 27       	eor	r25, r25
    5e1a:	08 95       	ret
    5e1c:	88 23       	and	r24, r24
    5e1e:	51 f4       	brne	.+20     	; 0x5e34 <__fp_di2sf+0x40>
    5e20:	98 50       	subi	r25, 0x08	; 8
    5e22:	d2 f7       	brpl	.-12     	; 0x5e18 <__fp_di2sf+0x24>
    5e24:	87 2b       	or	r24, r23
    5e26:	76 2f       	mov	r23, r22
    5e28:	65 2f       	mov	r22, r21
    5e2a:	54 2f       	mov	r21, r20
    5e2c:	43 2f       	mov	r20, r19
    5e2e:	32 2f       	mov	r19, r18
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	b1 f3       	breq	.-20     	; 0x5e20 <__fp_di2sf+0x2c>
    5e34:	12 16       	cp	r1, r18
    5e36:	13 06       	cpc	r1, r19
    5e38:	14 06       	cpc	r1, r20
    5e3a:	44 0b       	sbc	r20, r20
    5e3c:	88 23       	and	r24, r24
    5e3e:	3a f0       	brmi	.+14     	; 0x5e4e <__fp_di2sf+0x5a>
    5e40:	9a 95       	dec	r25
    5e42:	44 0f       	add	r20, r20
    5e44:	55 1f       	adc	r21, r21
    5e46:	66 1f       	adc	r22, r22
    5e48:	77 1f       	adc	r23, r23
    5e4a:	88 1f       	adc	r24, r24
    5e4c:	ca f7       	brpl	.-14     	; 0x5e40 <__fp_di2sf+0x4c>
    5e4e:	55 23       	and	r21, r21
    5e50:	4a f4       	brpl	.+18     	; 0x5e64 <__fp_di2sf+0x70>
    5e52:	44 0f       	add	r20, r20
    5e54:	55 1f       	adc	r21, r21
    5e56:	11 f4       	brne	.+4      	; 0x5e5c <__fp_di2sf+0x68>
    5e58:	60 ff       	sbrs	r22, 0
    5e5a:	04 c0       	rjmp	.+8      	; 0x5e64 <__fp_di2sf+0x70>
    5e5c:	6f 5f       	subi	r22, 0xFF	; 255
    5e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e60:	8f 4f       	sbci	r24, 0xFF	; 255
    5e62:	9f 4f       	sbci	r25, 0xFF	; 255
    5e64:	88 0f       	add	r24, r24
    5e66:	96 95       	lsr	r25
    5e68:	87 95       	ror	r24
    5e6a:	97 f9       	bld	r25, 7
    5e6c:	08 95       	ret

00005e6e <__fp_cmp>:
    5e6e:	99 0f       	add	r25, r25
    5e70:	00 08       	sbc	r0, r0
    5e72:	55 0f       	add	r21, r21
    5e74:	aa 0b       	sbc	r26, r26
    5e76:	e0 e8       	ldi	r30, 0x80	; 128
    5e78:	fe ef       	ldi	r31, 0xFE	; 254
    5e7a:	16 16       	cp	r1, r22
    5e7c:	17 06       	cpc	r1, r23
    5e7e:	e8 07       	cpc	r30, r24
    5e80:	f9 07       	cpc	r31, r25
    5e82:	c0 f0       	brcs	.+48     	; 0x5eb4 <__fp_cmp+0x46>
    5e84:	12 16       	cp	r1, r18
    5e86:	13 06       	cpc	r1, r19
    5e88:	e4 07       	cpc	r30, r20
    5e8a:	f5 07       	cpc	r31, r21
    5e8c:	98 f0       	brcs	.+38     	; 0x5eb4 <__fp_cmp+0x46>
    5e8e:	62 1b       	sub	r22, r18
    5e90:	73 0b       	sbc	r23, r19
    5e92:	84 0b       	sbc	r24, r20
    5e94:	95 0b       	sbc	r25, r21
    5e96:	39 f4       	brne	.+14     	; 0x5ea6 <__fp_cmp+0x38>
    5e98:	0a 26       	eor	r0, r26
    5e9a:	61 f0       	breq	.+24     	; 0x5eb4 <__fp_cmp+0x46>
    5e9c:	23 2b       	or	r18, r19
    5e9e:	24 2b       	or	r18, r20
    5ea0:	25 2b       	or	r18, r21
    5ea2:	21 f4       	brne	.+8      	; 0x5eac <__fp_cmp+0x3e>
    5ea4:	08 95       	ret
    5ea6:	0a 26       	eor	r0, r26
    5ea8:	09 f4       	brne	.+2      	; 0x5eac <__fp_cmp+0x3e>
    5eaa:	a1 40       	sbci	r26, 0x01	; 1
    5eac:	a6 95       	lsr	r26
    5eae:	8f ef       	ldi	r24, 0xFF	; 255
    5eb0:	81 1d       	adc	r24, r1
    5eb2:	81 1d       	adc	r24, r1
    5eb4:	08 95       	ret

00005eb6 <__fp_inf>:
    5eb6:	97 f9       	bld	r25, 7
    5eb8:	9f 67       	ori	r25, 0x7F	; 127
    5eba:	80 e8       	ldi	r24, 0x80	; 128
    5ebc:	70 e0       	ldi	r23, 0x00	; 0
    5ebe:	60 e0       	ldi	r22, 0x00	; 0
    5ec0:	08 95       	ret

00005ec2 <__fp_nan>:
    5ec2:	9f ef       	ldi	r25, 0xFF	; 255
    5ec4:	80 ec       	ldi	r24, 0xC0	; 192
    5ec6:	08 95       	ret

00005ec8 <__fp_negdi>:
    5ec8:	90 95       	com	r25
    5eca:	80 95       	com	r24
    5ecc:	70 95       	com	r23
    5ece:	60 95       	com	r22
    5ed0:	50 95       	com	r21
    5ed2:	40 95       	com	r20
    5ed4:	30 95       	com	r19
    5ed6:	21 95       	neg	r18
    5ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eda:	4f 4f       	sbci	r20, 0xFF	; 255
    5edc:	5f 4f       	sbci	r21, 0xFF	; 255
    5ede:	6f 4f       	sbci	r22, 0xFF	; 255
    5ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    5ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    5ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    5ee6:	08 95       	ret

00005ee8 <__fp_pscA>:
    5ee8:	00 24       	eor	r0, r0
    5eea:	0a 94       	dec	r0
    5eec:	16 16       	cp	r1, r22
    5eee:	17 06       	cpc	r1, r23
    5ef0:	18 06       	cpc	r1, r24
    5ef2:	09 06       	cpc	r0, r25
    5ef4:	08 95       	ret

00005ef6 <__fp_pscB>:
    5ef6:	00 24       	eor	r0, r0
    5ef8:	0a 94       	dec	r0
    5efa:	12 16       	cp	r1, r18
    5efc:	13 06       	cpc	r1, r19
    5efe:	14 06       	cpc	r1, r20
    5f00:	05 06       	cpc	r0, r21
    5f02:	08 95       	ret

00005f04 <__fp_round>:
    5f04:	09 2e       	mov	r0, r25
    5f06:	03 94       	inc	r0
    5f08:	00 0c       	add	r0, r0
    5f0a:	11 f4       	brne	.+4      	; 0x5f10 <__fp_round+0xc>
    5f0c:	88 23       	and	r24, r24
    5f0e:	52 f0       	brmi	.+20     	; 0x5f24 <__fp_round+0x20>
    5f10:	bb 0f       	add	r27, r27
    5f12:	40 f4       	brcc	.+16     	; 0x5f24 <__fp_round+0x20>
    5f14:	bf 2b       	or	r27, r31
    5f16:	11 f4       	brne	.+4      	; 0x5f1c <__fp_round+0x18>
    5f18:	60 ff       	sbrs	r22, 0
    5f1a:	04 c0       	rjmp	.+8      	; 0x5f24 <__fp_round+0x20>
    5f1c:	6f 5f       	subi	r22, 0xFF	; 255
    5f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f20:	8f 4f       	sbci	r24, 0xFF	; 255
    5f22:	9f 4f       	sbci	r25, 0xFF	; 255
    5f24:	08 95       	ret

00005f26 <__fp_split3>:
    5f26:	57 fd       	sbrc	r21, 7
    5f28:	90 58       	subi	r25, 0x80	; 128
    5f2a:	44 0f       	add	r20, r20
    5f2c:	55 1f       	adc	r21, r21
    5f2e:	59 f0       	breq	.+22     	; 0x5f46 <__fp_splitA+0x10>
    5f30:	5f 3f       	cpi	r21, 0xFF	; 255
    5f32:	71 f0       	breq	.+28     	; 0x5f50 <__fp_splitA+0x1a>
    5f34:	47 95       	ror	r20

00005f36 <__fp_splitA>:
    5f36:	88 0f       	add	r24, r24
    5f38:	97 fb       	bst	r25, 7
    5f3a:	99 1f       	adc	r25, r25
    5f3c:	61 f0       	breq	.+24     	; 0x5f56 <__fp_splitA+0x20>
    5f3e:	9f 3f       	cpi	r25, 0xFF	; 255
    5f40:	79 f0       	breq	.+30     	; 0x5f60 <__fp_splitA+0x2a>
    5f42:	87 95       	ror	r24
    5f44:	08 95       	ret
    5f46:	12 16       	cp	r1, r18
    5f48:	13 06       	cpc	r1, r19
    5f4a:	14 06       	cpc	r1, r20
    5f4c:	55 1f       	adc	r21, r21
    5f4e:	f2 cf       	rjmp	.-28     	; 0x5f34 <__fp_split3+0xe>
    5f50:	46 95       	lsr	r20
    5f52:	f1 df       	rcall	.-30     	; 0x5f36 <__fp_splitA>
    5f54:	08 c0       	rjmp	.+16     	; 0x5f66 <__fp_splitA+0x30>
    5f56:	16 16       	cp	r1, r22
    5f58:	17 06       	cpc	r1, r23
    5f5a:	18 06       	cpc	r1, r24
    5f5c:	99 1f       	adc	r25, r25
    5f5e:	f1 cf       	rjmp	.-30     	; 0x5f42 <__fp_splitA+0xc>
    5f60:	86 95       	lsr	r24
    5f62:	71 05       	cpc	r23, r1
    5f64:	61 05       	cpc	r22, r1
    5f66:	08 94       	sec
    5f68:	08 95       	ret

00005f6a <__fp_zero>:
    5f6a:	e8 94       	clt

00005f6c <__fp_szero>:
    5f6c:	bb 27       	eor	r27, r27
    5f6e:	66 27       	eor	r22, r22
    5f70:	77 27       	eor	r23, r23
    5f72:	cb 01       	movw	r24, r22
    5f74:	97 f9       	bld	r25, 7
    5f76:	08 95       	ret

00005f78 <__mulsf3>:
    5f78:	0b d0       	rcall	.+22     	; 0x5f90 <__mulsf3x>
    5f7a:	c4 cf       	rjmp	.-120    	; 0x5f04 <__fp_round>
    5f7c:	b5 df       	rcall	.-150    	; 0x5ee8 <__fp_pscA>
    5f7e:	28 f0       	brcs	.+10     	; 0x5f8a <__mulsf3+0x12>
    5f80:	ba df       	rcall	.-140    	; 0x5ef6 <__fp_pscB>
    5f82:	18 f0       	brcs	.+6      	; 0x5f8a <__mulsf3+0x12>
    5f84:	95 23       	and	r25, r21
    5f86:	09 f0       	breq	.+2      	; 0x5f8a <__mulsf3+0x12>
    5f88:	96 cf       	rjmp	.-212    	; 0x5eb6 <__fp_inf>
    5f8a:	9b cf       	rjmp	.-202    	; 0x5ec2 <__fp_nan>
    5f8c:	11 24       	eor	r1, r1
    5f8e:	ee cf       	rjmp	.-36     	; 0x5f6c <__fp_szero>

00005f90 <__mulsf3x>:
    5f90:	ca df       	rcall	.-108    	; 0x5f26 <__fp_split3>
    5f92:	a0 f3       	brcs	.-24     	; 0x5f7c <__mulsf3+0x4>

00005f94 <__mulsf3_pse>:
    5f94:	95 9f       	mul	r25, r21
    5f96:	d1 f3       	breq	.-12     	; 0x5f8c <__mulsf3+0x14>
    5f98:	95 0f       	add	r25, r21
    5f9a:	50 e0       	ldi	r21, 0x00	; 0
    5f9c:	55 1f       	adc	r21, r21
    5f9e:	62 9f       	mul	r22, r18
    5fa0:	f0 01       	movw	r30, r0
    5fa2:	72 9f       	mul	r23, r18
    5fa4:	bb 27       	eor	r27, r27
    5fa6:	f0 0d       	add	r31, r0
    5fa8:	b1 1d       	adc	r27, r1
    5faa:	63 9f       	mul	r22, r19
    5fac:	aa 27       	eor	r26, r26
    5fae:	f0 0d       	add	r31, r0
    5fb0:	b1 1d       	adc	r27, r1
    5fb2:	aa 1f       	adc	r26, r26
    5fb4:	64 9f       	mul	r22, r20
    5fb6:	66 27       	eor	r22, r22
    5fb8:	b0 0d       	add	r27, r0
    5fba:	a1 1d       	adc	r26, r1
    5fbc:	66 1f       	adc	r22, r22
    5fbe:	82 9f       	mul	r24, r18
    5fc0:	22 27       	eor	r18, r18
    5fc2:	b0 0d       	add	r27, r0
    5fc4:	a1 1d       	adc	r26, r1
    5fc6:	62 1f       	adc	r22, r18
    5fc8:	73 9f       	mul	r23, r19
    5fca:	b0 0d       	add	r27, r0
    5fcc:	a1 1d       	adc	r26, r1
    5fce:	62 1f       	adc	r22, r18
    5fd0:	83 9f       	mul	r24, r19
    5fd2:	a0 0d       	add	r26, r0
    5fd4:	61 1d       	adc	r22, r1
    5fd6:	22 1f       	adc	r18, r18
    5fd8:	74 9f       	mul	r23, r20
    5fda:	33 27       	eor	r19, r19
    5fdc:	a0 0d       	add	r26, r0
    5fde:	61 1d       	adc	r22, r1
    5fe0:	23 1f       	adc	r18, r19
    5fe2:	84 9f       	mul	r24, r20
    5fe4:	60 0d       	add	r22, r0
    5fe6:	21 1d       	adc	r18, r1
    5fe8:	82 2f       	mov	r24, r18
    5fea:	76 2f       	mov	r23, r22
    5fec:	6a 2f       	mov	r22, r26
    5fee:	11 24       	eor	r1, r1
    5ff0:	9f 57       	subi	r25, 0x7F	; 127
    5ff2:	50 40       	sbci	r21, 0x00	; 0
    5ff4:	8a f0       	brmi	.+34     	; 0x6018 <__stack+0x19>
    5ff6:	e1 f0       	breq	.+56     	; 0x6030 <__stack+0x31>
    5ff8:	88 23       	and	r24, r24
    5ffa:	4a f0       	brmi	.+18     	; 0x600e <__stack+0xf>
    5ffc:	ee 0f       	add	r30, r30
    5ffe:	ff 1f       	adc	r31, r31
    6000:	bb 1f       	adc	r27, r27
    6002:	66 1f       	adc	r22, r22
    6004:	77 1f       	adc	r23, r23
    6006:	88 1f       	adc	r24, r24
    6008:	91 50       	subi	r25, 0x01	; 1
    600a:	50 40       	sbci	r21, 0x00	; 0
    600c:	a9 f7       	brne	.-22     	; 0x5ff8 <__mulsf3_pse+0x64>
    600e:	9e 3f       	cpi	r25, 0xFE	; 254
    6010:	51 05       	cpc	r21, r1
    6012:	70 f0       	brcs	.+28     	; 0x6030 <__stack+0x31>
    6014:	50 cf       	rjmp	.-352    	; 0x5eb6 <__fp_inf>
    6016:	aa cf       	rjmp	.-172    	; 0x5f6c <__fp_szero>
    6018:	5f 3f       	cpi	r21, 0xFF	; 255
    601a:	ec f3       	brlt	.-6      	; 0x6016 <__stack+0x17>
    601c:	98 3e       	cpi	r25, 0xE8	; 232
    601e:	dc f3       	brlt	.-10     	; 0x6016 <__stack+0x17>
    6020:	86 95       	lsr	r24
    6022:	77 95       	ror	r23
    6024:	67 95       	ror	r22
    6026:	b7 95       	ror	r27
    6028:	f7 95       	ror	r31
    602a:	e7 95       	ror	r30
    602c:	9f 5f       	subi	r25, 0xFF	; 255
    602e:	c1 f7       	brne	.-16     	; 0x6020 <__stack+0x21>
    6030:	fe 2b       	or	r31, r30
    6032:	88 0f       	add	r24, r24
    6034:	91 1d       	adc	r25, r1
    6036:	96 95       	lsr	r25
    6038:	87 95       	ror	r24
    603a:	97 f9       	bld	r25, 7
    603c:	08 95       	ret

0000603e <round>:
    603e:	7b df       	rcall	.-266    	; 0x5f36 <__fp_splitA>
    6040:	e0 f0       	brcs	.+56     	; 0x607a <round+0x3c>
    6042:	9e 37       	cpi	r25, 0x7E	; 126
    6044:	d8 f0       	brcs	.+54     	; 0x607c <round+0x3e>
    6046:	96 39       	cpi	r25, 0x96	; 150
    6048:	b8 f4       	brcc	.+46     	; 0x6078 <round+0x3a>
    604a:	9e 38       	cpi	r25, 0x8E	; 142
    604c:	48 f4       	brcc	.+18     	; 0x6060 <round+0x22>
    604e:	67 2f       	mov	r22, r23
    6050:	78 2f       	mov	r23, r24
    6052:	88 27       	eor	r24, r24
    6054:	98 5f       	subi	r25, 0xF8	; 248
    6056:	f9 cf       	rjmp	.-14     	; 0x604a <round+0xc>
    6058:	86 95       	lsr	r24
    605a:	77 95       	ror	r23
    605c:	67 95       	ror	r22
    605e:	93 95       	inc	r25
    6060:	95 39       	cpi	r25, 0x95	; 149
    6062:	d0 f3       	brcs	.-12     	; 0x6058 <round+0x1a>
    6064:	b6 2f       	mov	r27, r22
    6066:	b1 70       	andi	r27, 0x01	; 1
    6068:	6b 0f       	add	r22, r27
    606a:	71 1d       	adc	r23, r1
    606c:	81 1d       	adc	r24, r1
    606e:	20 f4       	brcc	.+8      	; 0x6078 <round+0x3a>
    6070:	87 95       	ror	r24
    6072:	77 95       	ror	r23
    6074:	67 95       	ror	r22
    6076:	93 95       	inc	r25
    6078:	02 c0       	rjmp	.+4      	; 0x607e <__fp_mintl>
    607a:	1c c0       	rjmp	.+56     	; 0x60b4 <__fp_mpack>
    607c:	77 cf       	rjmp	.-274    	; 0x5f6c <__fp_szero>

0000607e <__fp_mintl>:
    607e:	88 23       	and	r24, r24
    6080:	71 f4       	brne	.+28     	; 0x609e <__fp_mintl+0x20>
    6082:	77 23       	and	r23, r23
    6084:	21 f0       	breq	.+8      	; 0x608e <__fp_mintl+0x10>
    6086:	98 50       	subi	r25, 0x08	; 8
    6088:	87 2b       	or	r24, r23
    608a:	76 2f       	mov	r23, r22
    608c:	07 c0       	rjmp	.+14     	; 0x609c <__fp_mintl+0x1e>
    608e:	66 23       	and	r22, r22
    6090:	11 f4       	brne	.+4      	; 0x6096 <__fp_mintl+0x18>
    6092:	99 27       	eor	r25, r25
    6094:	0d c0       	rjmp	.+26     	; 0x60b0 <__fp_mintl+0x32>
    6096:	90 51       	subi	r25, 0x10	; 16
    6098:	86 2b       	or	r24, r22
    609a:	70 e0       	ldi	r23, 0x00	; 0
    609c:	60 e0       	ldi	r22, 0x00	; 0
    609e:	2a f0       	brmi	.+10     	; 0x60aa <__fp_mintl+0x2c>
    60a0:	9a 95       	dec	r25
    60a2:	66 0f       	add	r22, r22
    60a4:	77 1f       	adc	r23, r23
    60a6:	88 1f       	adc	r24, r24
    60a8:	da f7       	brpl	.-10     	; 0x60a0 <__fp_mintl+0x22>
    60aa:	88 0f       	add	r24, r24
    60ac:	96 95       	lsr	r25
    60ae:	87 95       	ror	r24
    60b0:	97 f9       	bld	r25, 7
    60b2:	08 95       	ret

000060b4 <__fp_mpack>:
    60b4:	9f 3f       	cpi	r25, 0xFF	; 255
    60b6:	31 f0       	breq	.+12     	; 0x60c4 <__fp_mpack_finite+0xc>

000060b8 <__fp_mpack_finite>:
    60b8:	91 50       	subi	r25, 0x01	; 1
    60ba:	20 f4       	brcc	.+8      	; 0x60c4 <__fp_mpack_finite+0xc>
    60bc:	87 95       	ror	r24
    60be:	77 95       	ror	r23
    60c0:	67 95       	ror	r22
    60c2:	b7 95       	ror	r27
    60c4:	88 0f       	add	r24, r24
    60c6:	91 1d       	adc	r25, r1
    60c8:	96 95       	lsr	r25
    60ca:	87 95       	ror	r24
    60cc:	97 f9       	bld	r25, 7
    60ce:	08 95       	ret

000060d0 <vfprintf>:
    60d0:	2f 92       	push	r2
    60d2:	3f 92       	push	r3
    60d4:	4f 92       	push	r4
    60d6:	5f 92       	push	r5
    60d8:	6f 92       	push	r6
    60da:	7f 92       	push	r7
    60dc:	8f 92       	push	r8
    60de:	9f 92       	push	r9
    60e0:	af 92       	push	r10
    60e2:	bf 92       	push	r11
    60e4:	cf 92       	push	r12
    60e6:	df 92       	push	r13
    60e8:	ef 92       	push	r14
    60ea:	ff 92       	push	r15
    60ec:	0f 93       	push	r16
    60ee:	1f 93       	push	r17
    60f0:	cf 93       	push	r28
    60f2:	df 93       	push	r29
    60f4:	cd b7       	in	r28, 0x3d	; 61
    60f6:	de b7       	in	r29, 0x3e	; 62
    60f8:	63 97       	sbiw	r28, 0x13	; 19
    60fa:	cd bf       	out	0x3d, r28	; 61
    60fc:	de bf       	out	0x3e, r29	; 62
    60fe:	7c 01       	movw	r14, r24
    6100:	1b 01       	movw	r2, r22
    6102:	6a 01       	movw	r12, r20
    6104:	fc 01       	movw	r30, r24
    6106:	16 82       	std	Z+6, r1	; 0x06
    6108:	17 82       	std	Z+7, r1	; 0x07
    610a:	83 81       	ldd	r24, Z+3	; 0x03
    610c:	81 ff       	sbrs	r24, 1
    610e:	66 c3       	rjmp	.+1740   	; 0x67dc <vfprintf+0x70c>
    6110:	be 01       	movw	r22, r28
    6112:	6f 5f       	subi	r22, 0xFF	; 255
    6114:	7f 4f       	sbci	r23, 0xFF	; 255
    6116:	4b 01       	movw	r8, r22
    6118:	f7 01       	movw	r30, r14
    611a:	93 81       	ldd	r25, Z+3	; 0x03
    611c:	f1 01       	movw	r30, r2
    611e:	93 fd       	sbrc	r25, 3
    6120:	85 91       	lpm	r24, Z+
    6122:	93 ff       	sbrs	r25, 3
    6124:	81 91       	ld	r24, Z+
    6126:	1f 01       	movw	r2, r30
    6128:	88 23       	and	r24, r24
    612a:	09 f4       	brne	.+2      	; 0x612e <vfprintf+0x5e>
    612c:	53 c3       	rjmp	.+1702   	; 0x67d4 <vfprintf+0x704>
    612e:	85 32       	cpi	r24, 0x25	; 37
    6130:	39 f4       	brne	.+14     	; 0x6140 <vfprintf+0x70>
    6132:	93 fd       	sbrc	r25, 3
    6134:	85 91       	lpm	r24, Z+
    6136:	93 ff       	sbrs	r25, 3
    6138:	81 91       	ld	r24, Z+
    613a:	1f 01       	movw	r2, r30
    613c:	85 32       	cpi	r24, 0x25	; 37
    613e:	39 f4       	brne	.+14     	; 0x614e <vfprintf+0x7e>
    6140:	b7 01       	movw	r22, r14
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    6148:	56 01       	movw	r10, r12
    614a:	65 01       	movw	r12, r10
    614c:	e5 cf       	rjmp	.-54     	; 0x6118 <vfprintf+0x48>
    614e:	10 e0       	ldi	r17, 0x00	; 0
    6150:	51 2c       	mov	r5, r1
    6152:	20 e0       	ldi	r18, 0x00	; 0
    6154:	20 32       	cpi	r18, 0x20	; 32
    6156:	a0 f4       	brcc	.+40     	; 0x6180 <vfprintf+0xb0>
    6158:	8b 32       	cpi	r24, 0x2B	; 43
    615a:	69 f0       	breq	.+26     	; 0x6176 <vfprintf+0xa6>
    615c:	30 f4       	brcc	.+12     	; 0x616a <vfprintf+0x9a>
    615e:	80 32       	cpi	r24, 0x20	; 32
    6160:	59 f0       	breq	.+22     	; 0x6178 <vfprintf+0xa8>
    6162:	83 32       	cpi	r24, 0x23	; 35
    6164:	69 f4       	brne	.+26     	; 0x6180 <vfprintf+0xb0>
    6166:	20 61       	ori	r18, 0x10	; 16
    6168:	2c c0       	rjmp	.+88     	; 0x61c2 <vfprintf+0xf2>
    616a:	8d 32       	cpi	r24, 0x2D	; 45
    616c:	39 f0       	breq	.+14     	; 0x617c <vfprintf+0xac>
    616e:	80 33       	cpi	r24, 0x30	; 48
    6170:	39 f4       	brne	.+14     	; 0x6180 <vfprintf+0xb0>
    6172:	21 60       	ori	r18, 0x01	; 1
    6174:	26 c0       	rjmp	.+76     	; 0x61c2 <vfprintf+0xf2>
    6176:	22 60       	ori	r18, 0x02	; 2
    6178:	24 60       	ori	r18, 0x04	; 4
    617a:	23 c0       	rjmp	.+70     	; 0x61c2 <vfprintf+0xf2>
    617c:	28 60       	ori	r18, 0x08	; 8
    617e:	21 c0       	rjmp	.+66     	; 0x61c2 <vfprintf+0xf2>
    6180:	27 fd       	sbrc	r18, 7
    6182:	27 c0       	rjmp	.+78     	; 0x61d2 <vfprintf+0x102>
    6184:	30 ed       	ldi	r19, 0xD0	; 208
    6186:	38 0f       	add	r19, r24
    6188:	3a 30       	cpi	r19, 0x0A	; 10
    618a:	78 f4       	brcc	.+30     	; 0x61aa <vfprintf+0xda>
    618c:	26 ff       	sbrs	r18, 6
    618e:	06 c0       	rjmp	.+12     	; 0x619c <vfprintf+0xcc>
    6190:	fa e0       	ldi	r31, 0x0A	; 10
    6192:	1f 9f       	mul	r17, r31
    6194:	30 0d       	add	r19, r0
    6196:	11 24       	eor	r1, r1
    6198:	13 2f       	mov	r17, r19
    619a:	13 c0       	rjmp	.+38     	; 0x61c2 <vfprintf+0xf2>
    619c:	6a e0       	ldi	r22, 0x0A	; 10
    619e:	56 9e       	mul	r5, r22
    61a0:	30 0d       	add	r19, r0
    61a2:	11 24       	eor	r1, r1
    61a4:	53 2e       	mov	r5, r19
    61a6:	20 62       	ori	r18, 0x20	; 32
    61a8:	0c c0       	rjmp	.+24     	; 0x61c2 <vfprintf+0xf2>
    61aa:	8e 32       	cpi	r24, 0x2E	; 46
    61ac:	21 f4       	brne	.+8      	; 0x61b6 <vfprintf+0xe6>
    61ae:	26 fd       	sbrc	r18, 6
    61b0:	11 c3       	rjmp	.+1570   	; 0x67d4 <vfprintf+0x704>
    61b2:	20 64       	ori	r18, 0x40	; 64
    61b4:	06 c0       	rjmp	.+12     	; 0x61c2 <vfprintf+0xf2>
    61b6:	8c 36       	cpi	r24, 0x6C	; 108
    61b8:	11 f4       	brne	.+4      	; 0x61be <vfprintf+0xee>
    61ba:	20 68       	ori	r18, 0x80	; 128
    61bc:	02 c0       	rjmp	.+4      	; 0x61c2 <vfprintf+0xf2>
    61be:	88 36       	cpi	r24, 0x68	; 104
    61c0:	41 f4       	brne	.+16     	; 0x61d2 <vfprintf+0x102>
    61c2:	f1 01       	movw	r30, r2
    61c4:	93 fd       	sbrc	r25, 3
    61c6:	85 91       	lpm	r24, Z+
    61c8:	93 ff       	sbrs	r25, 3
    61ca:	81 91       	ld	r24, Z+
    61cc:	1f 01       	movw	r2, r30
    61ce:	81 11       	cpse	r24, r1
    61d0:	c1 cf       	rjmp	.-126    	; 0x6154 <vfprintf+0x84>
    61d2:	9b eb       	ldi	r25, 0xBB	; 187
    61d4:	98 0f       	add	r25, r24
    61d6:	93 30       	cpi	r25, 0x03	; 3
    61d8:	18 f4       	brcc	.+6      	; 0x61e0 <vfprintf+0x110>
    61da:	20 61       	ori	r18, 0x10	; 16
    61dc:	80 5e       	subi	r24, 0xE0	; 224
    61de:	06 c0       	rjmp	.+12     	; 0x61ec <vfprintf+0x11c>
    61e0:	9b e9       	ldi	r25, 0x9B	; 155
    61e2:	98 0f       	add	r25, r24
    61e4:	93 30       	cpi	r25, 0x03	; 3
    61e6:	08 f0       	brcs	.+2      	; 0x61ea <vfprintf+0x11a>
    61e8:	aa c1       	rjmp	.+852    	; 0x653e <vfprintf+0x46e>
    61ea:	2f 7e       	andi	r18, 0xEF	; 239
    61ec:	26 ff       	sbrs	r18, 6
    61ee:	16 e0       	ldi	r17, 0x06	; 6
    61f0:	2f 73       	andi	r18, 0x3F	; 63
    61f2:	72 2e       	mov	r7, r18
    61f4:	85 36       	cpi	r24, 0x65	; 101
    61f6:	21 f4       	brne	.+8      	; 0x6200 <vfprintf+0x130>
    61f8:	f2 2f       	mov	r31, r18
    61fa:	f0 64       	ori	r31, 0x40	; 64
    61fc:	7f 2e       	mov	r7, r31
    61fe:	08 c0       	rjmp	.+16     	; 0x6210 <vfprintf+0x140>
    6200:	86 36       	cpi	r24, 0x66	; 102
    6202:	21 f4       	brne	.+8      	; 0x620c <vfprintf+0x13c>
    6204:	62 2f       	mov	r22, r18
    6206:	60 68       	ori	r22, 0x80	; 128
    6208:	76 2e       	mov	r7, r22
    620a:	02 c0       	rjmp	.+4      	; 0x6210 <vfprintf+0x140>
    620c:	11 11       	cpse	r17, r1
    620e:	11 50       	subi	r17, 0x01	; 1
    6210:	77 fe       	sbrs	r7, 7
    6212:	07 c0       	rjmp	.+14     	; 0x6222 <vfprintf+0x152>
    6214:	1c 33       	cpi	r17, 0x3C	; 60
    6216:	48 f4       	brcc	.+18     	; 0x622a <vfprintf+0x15a>
    6218:	44 24       	eor	r4, r4
    621a:	43 94       	inc	r4
    621c:	41 0e       	add	r4, r17
    621e:	27 e0       	ldi	r18, 0x07	; 7
    6220:	0b c0       	rjmp	.+22     	; 0x6238 <vfprintf+0x168>
    6222:	18 30       	cpi	r17, 0x08	; 8
    6224:	30 f4       	brcc	.+12     	; 0x6232 <vfprintf+0x162>
    6226:	21 2f       	mov	r18, r17
    6228:	06 c0       	rjmp	.+12     	; 0x6236 <vfprintf+0x166>
    622a:	27 e0       	ldi	r18, 0x07	; 7
    622c:	4c e3       	ldi	r20, 0x3C	; 60
    622e:	44 2e       	mov	r4, r20
    6230:	03 c0       	rjmp	.+6      	; 0x6238 <vfprintf+0x168>
    6232:	27 e0       	ldi	r18, 0x07	; 7
    6234:	17 e0       	ldi	r17, 0x07	; 7
    6236:	41 2c       	mov	r4, r1
    6238:	56 01       	movw	r10, r12
    623a:	74 e0       	ldi	r23, 0x04	; 4
    623c:	a7 0e       	add	r10, r23
    623e:	b1 1c       	adc	r11, r1
    6240:	f6 01       	movw	r30, r12
    6242:	60 81       	ld	r22, Z
    6244:	71 81       	ldd	r23, Z+1	; 0x01
    6246:	82 81       	ldd	r24, Z+2	; 0x02
    6248:	93 81       	ldd	r25, Z+3	; 0x03
    624a:	04 2d       	mov	r16, r4
    624c:	a4 01       	movw	r20, r8
    624e:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <__ftoa_engine>
    6252:	6c 01       	movw	r12, r24
    6254:	09 81       	ldd	r16, Y+1	; 0x01
    6256:	00 ff       	sbrs	r16, 0
    6258:	02 c0       	rjmp	.+4      	; 0x625e <vfprintf+0x18e>
    625a:	03 ff       	sbrs	r16, 3
    625c:	06 c0       	rjmp	.+12     	; 0x626a <vfprintf+0x19a>
    625e:	71 fc       	sbrc	r7, 1
    6260:	07 c0       	rjmp	.+14     	; 0x6270 <vfprintf+0x1a0>
    6262:	72 fc       	sbrc	r7, 2
    6264:	08 c0       	rjmp	.+16     	; 0x6276 <vfprintf+0x1a6>
    6266:	61 2c       	mov	r6, r1
    6268:	08 c0       	rjmp	.+16     	; 0x627a <vfprintf+0x1aa>
    626a:	3d e2       	ldi	r19, 0x2D	; 45
    626c:	63 2e       	mov	r6, r19
    626e:	05 c0       	rjmp	.+10     	; 0x627a <vfprintf+0x1aa>
    6270:	2b e2       	ldi	r18, 0x2B	; 43
    6272:	62 2e       	mov	r6, r18
    6274:	02 c0       	rjmp	.+4      	; 0x627a <vfprintf+0x1aa>
    6276:	90 e2       	ldi	r25, 0x20	; 32
    6278:	69 2e       	mov	r6, r25
    627a:	80 2f       	mov	r24, r16
    627c:	8c 70       	andi	r24, 0x0C	; 12
    627e:	99 f1       	breq	.+102    	; 0x62e6 <vfprintf+0x216>
    6280:	66 20       	and	r6, r6
    6282:	11 f0       	breq	.+4      	; 0x6288 <vfprintf+0x1b8>
    6284:	84 e0       	ldi	r24, 0x04	; 4
    6286:	01 c0       	rjmp	.+2      	; 0x628a <vfprintf+0x1ba>
    6288:	83 e0       	ldi	r24, 0x03	; 3
    628a:	85 15       	cp	r24, r5
    628c:	10 f0       	brcs	.+4      	; 0x6292 <vfprintf+0x1c2>
    628e:	51 2c       	mov	r5, r1
    6290:	0b c0       	rjmp	.+22     	; 0x62a8 <vfprintf+0x1d8>
    6292:	58 1a       	sub	r5, r24
    6294:	73 fc       	sbrc	r7, 3
    6296:	08 c0       	rjmp	.+16     	; 0x62a8 <vfprintf+0x1d8>
    6298:	b7 01       	movw	r22, r14
    629a:	80 e2       	ldi	r24, 0x20	; 32
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    62a2:	5a 94       	dec	r5
    62a4:	c9 f7       	brne	.-14     	; 0x6298 <vfprintf+0x1c8>
    62a6:	f3 cf       	rjmp	.-26     	; 0x628e <vfprintf+0x1be>
    62a8:	66 20       	and	r6, r6
    62aa:	29 f0       	breq	.+10     	; 0x62b6 <vfprintf+0x1e6>
    62ac:	b7 01       	movw	r22, r14
    62ae:	86 2d       	mov	r24, r6
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    62b6:	03 fd       	sbrc	r16, 3
    62b8:	03 c0       	rjmp	.+6      	; 0x62c0 <vfprintf+0x1f0>
    62ba:	08 e6       	ldi	r16, 0x68	; 104
    62bc:	12 e0       	ldi	r17, 0x02	; 2
    62be:	02 c0       	rjmp	.+4      	; 0x62c4 <vfprintf+0x1f4>
    62c0:	04 e6       	ldi	r16, 0x64	; 100
    62c2:	12 e0       	ldi	r17, 0x02	; 2
    62c4:	f7 2d       	mov	r31, r7
    62c6:	f0 71       	andi	r31, 0x10	; 16
    62c8:	7f 2e       	mov	r7, r31
    62ca:	f8 01       	movw	r30, r16
    62cc:	84 91       	lpm	r24, Z
    62ce:	88 23       	and	r24, r24
    62d0:	09 f4       	brne	.+2      	; 0x62d4 <vfprintf+0x204>
    62d2:	76 c2       	rjmp	.+1260   	; 0x67c0 <vfprintf+0x6f0>
    62d4:	71 10       	cpse	r7, r1
    62d6:	80 52       	subi	r24, 0x20	; 32
    62d8:	b7 01       	movw	r22, r14
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    62e0:	0f 5f       	subi	r16, 0xFF	; 255
    62e2:	1f 4f       	sbci	r17, 0xFF	; 255
    62e4:	f2 cf       	rjmp	.-28     	; 0x62ca <vfprintf+0x1fa>
    62e6:	77 fe       	sbrs	r7, 7
    62e8:	0f c0       	rjmp	.+30     	; 0x6308 <vfprintf+0x238>
    62ea:	4c 0c       	add	r4, r12
    62ec:	04 ff       	sbrs	r16, 4
    62ee:	04 c0       	rjmp	.+8      	; 0x62f8 <vfprintf+0x228>
    62f0:	8a 81       	ldd	r24, Y+2	; 0x02
    62f2:	81 33       	cpi	r24, 0x31	; 49
    62f4:	09 f4       	brne	.+2      	; 0x62f8 <vfprintf+0x228>
    62f6:	4a 94       	dec	r4
    62f8:	14 14       	cp	r1, r4
    62fa:	74 f5       	brge	.+92     	; 0x6358 <vfprintf+0x288>
    62fc:	f8 e0       	ldi	r31, 0x08	; 8
    62fe:	f4 15       	cp	r31, r4
    6300:	78 f5       	brcc	.+94     	; 0x6360 <vfprintf+0x290>
    6302:	88 e0       	ldi	r24, 0x08	; 8
    6304:	48 2e       	mov	r4, r24
    6306:	2c c0       	rjmp	.+88     	; 0x6360 <vfprintf+0x290>
    6308:	76 fc       	sbrc	r7, 6
    630a:	2a c0       	rjmp	.+84     	; 0x6360 <vfprintf+0x290>
    630c:	81 2f       	mov	r24, r17
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	8c 15       	cp	r24, r12
    6312:	9d 05       	cpc	r25, r13
    6314:	9c f0       	brlt	.+38     	; 0x633c <vfprintf+0x26c>
    6316:	6c ef       	ldi	r22, 0xFC	; 252
    6318:	c6 16       	cp	r12, r22
    631a:	6f ef       	ldi	r22, 0xFF	; 255
    631c:	d6 06       	cpc	r13, r22
    631e:	74 f0       	brlt	.+28     	; 0x633c <vfprintf+0x26c>
    6320:	77 2d       	mov	r23, r7
    6322:	70 68       	ori	r23, 0x80	; 128
    6324:	77 2e       	mov	r7, r23
    6326:	0a c0       	rjmp	.+20     	; 0x633c <vfprintf+0x26c>
    6328:	e2 e0       	ldi	r30, 0x02	; 2
    632a:	f0 e0       	ldi	r31, 0x00	; 0
    632c:	ec 0f       	add	r30, r28
    632e:	fd 1f       	adc	r31, r29
    6330:	e1 0f       	add	r30, r17
    6332:	f1 1d       	adc	r31, r1
    6334:	80 81       	ld	r24, Z
    6336:	80 33       	cpi	r24, 0x30	; 48
    6338:	19 f4       	brne	.+6      	; 0x6340 <vfprintf+0x270>
    633a:	11 50       	subi	r17, 0x01	; 1
    633c:	11 11       	cpse	r17, r1
    633e:	f4 cf       	rjmp	.-24     	; 0x6328 <vfprintf+0x258>
    6340:	77 fe       	sbrs	r7, 7
    6342:	0e c0       	rjmp	.+28     	; 0x6360 <vfprintf+0x290>
    6344:	44 24       	eor	r4, r4
    6346:	43 94       	inc	r4
    6348:	41 0e       	add	r4, r17
    634a:	81 2f       	mov	r24, r17
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	c8 16       	cp	r12, r24
    6350:	d9 06       	cpc	r13, r25
    6352:	2c f4       	brge	.+10     	; 0x635e <vfprintf+0x28e>
    6354:	1c 19       	sub	r17, r12
    6356:	04 c0       	rjmp	.+8      	; 0x6360 <vfprintf+0x290>
    6358:	44 24       	eor	r4, r4
    635a:	43 94       	inc	r4
    635c:	01 c0       	rjmp	.+2      	; 0x6360 <vfprintf+0x290>
    635e:	10 e0       	ldi	r17, 0x00	; 0
    6360:	77 fe       	sbrs	r7, 7
    6362:	07 c0       	rjmp	.+14     	; 0x6372 <vfprintf+0x2a2>
    6364:	1c 14       	cp	r1, r12
    6366:	1d 04       	cpc	r1, r13
    6368:	3c f4       	brge	.+14     	; 0x6378 <vfprintf+0x2a8>
    636a:	96 01       	movw	r18, r12
    636c:	2f 5f       	subi	r18, 0xFF	; 255
    636e:	3f 4f       	sbci	r19, 0xFF	; 255
    6370:	05 c0       	rjmp	.+10     	; 0x637c <vfprintf+0x2ac>
    6372:	25 e0       	ldi	r18, 0x05	; 5
    6374:	30 e0       	ldi	r19, 0x00	; 0
    6376:	02 c0       	rjmp	.+4      	; 0x637c <vfprintf+0x2ac>
    6378:	21 e0       	ldi	r18, 0x01	; 1
    637a:	30 e0       	ldi	r19, 0x00	; 0
    637c:	66 20       	and	r6, r6
    637e:	11 f0       	breq	.+4      	; 0x6384 <vfprintf+0x2b4>
    6380:	2f 5f       	subi	r18, 0xFF	; 255
    6382:	3f 4f       	sbci	r19, 0xFF	; 255
    6384:	11 23       	and	r17, r17
    6386:	31 f0       	breq	.+12     	; 0x6394 <vfprintf+0x2c4>
    6388:	41 2f       	mov	r20, r17
    638a:	50 e0       	ldi	r21, 0x00	; 0
    638c:	4f 5f       	subi	r20, 0xFF	; 255
    638e:	5f 4f       	sbci	r21, 0xFF	; 255
    6390:	24 0f       	add	r18, r20
    6392:	35 1f       	adc	r19, r21
    6394:	45 2d       	mov	r20, r5
    6396:	50 e0       	ldi	r21, 0x00	; 0
    6398:	24 17       	cp	r18, r20
    639a:	35 07       	cpc	r19, r21
    639c:	14 f4       	brge	.+4      	; 0x63a2 <vfprintf+0x2d2>
    639e:	52 1a       	sub	r5, r18
    63a0:	01 c0       	rjmp	.+2      	; 0x63a4 <vfprintf+0x2d4>
    63a2:	51 2c       	mov	r5, r1
    63a4:	87 2d       	mov	r24, r7
    63a6:	89 70       	andi	r24, 0x09	; 9
    63a8:	49 f4       	brne	.+18     	; 0x63bc <vfprintf+0x2ec>
    63aa:	55 20       	and	r5, r5
    63ac:	39 f0       	breq	.+14     	; 0x63bc <vfprintf+0x2ec>
    63ae:	b7 01       	movw	r22, r14
    63b0:	80 e2       	ldi	r24, 0x20	; 32
    63b2:	90 e0       	ldi	r25, 0x00	; 0
    63b4:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    63b8:	5a 94       	dec	r5
    63ba:	f7 cf       	rjmp	.-18     	; 0x63aa <vfprintf+0x2da>
    63bc:	66 20       	and	r6, r6
    63be:	29 f0       	breq	.+10     	; 0x63ca <vfprintf+0x2fa>
    63c0:	b7 01       	movw	r22, r14
    63c2:	86 2d       	mov	r24, r6
    63c4:	90 e0       	ldi	r25, 0x00	; 0
    63c6:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    63ca:	73 fc       	sbrc	r7, 3
    63cc:	09 c0       	rjmp	.+18     	; 0x63e0 <vfprintf+0x310>
    63ce:	55 20       	and	r5, r5
    63d0:	39 f0       	breq	.+14     	; 0x63e0 <vfprintf+0x310>
    63d2:	b7 01       	movw	r22, r14
    63d4:	80 e3       	ldi	r24, 0x30	; 48
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    63dc:	5a 94       	dec	r5
    63de:	f7 cf       	rjmp	.-18     	; 0x63ce <vfprintf+0x2fe>
    63e0:	77 fe       	sbrs	r7, 7
    63e2:	5f c0       	rjmp	.+190    	; 0x64a2 <vfprintf+0x3d2>
    63e4:	9c 2d       	mov	r25, r12
    63e6:	8d 2d       	mov	r24, r13
    63e8:	d7 fe       	sbrs	r13, 7
    63ea:	02 c0       	rjmp	.+4      	; 0x63f0 <vfprintf+0x320>
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	80 e0       	ldi	r24, 0x00	; 0
    63f0:	69 2e       	mov	r6, r25
    63f2:	78 2e       	mov	r7, r24
    63f4:	40 e0       	ldi	r20, 0x00	; 0
    63f6:	50 e0       	ldi	r21, 0x00	; 0
    63f8:	c6 01       	movw	r24, r12
    63fa:	84 19       	sub	r24, r4
    63fc:	91 09       	sbc	r25, r1
    63fe:	8c 87       	std	Y+12, r24	; 0x0c
    6400:	9d 87       	std	Y+13, r25	; 0x0d
    6402:	96 01       	movw	r18, r12
    6404:	26 19       	sub	r18, r6
    6406:	37 09       	sbc	r19, r7
    6408:	28 0d       	add	r18, r8
    640a:	39 1d       	adc	r19, r9
    640c:	81 2f       	mov	r24, r17
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	ee 27       	eor	r30, r30
    6412:	ff 27       	eor	r31, r31
    6414:	e8 1b       	sub	r30, r24
    6416:	f9 0b       	sbc	r31, r25
    6418:	ee 87       	std	Y+14, r30	; 0x0e
    641a:	ff 87       	std	Y+15, r31	; 0x0f
    641c:	ff ef       	ldi	r31, 0xFF	; 255
    641e:	6f 16       	cp	r6, r31
    6420:	7f 06       	cpc	r7, r31
    6422:	69 f4       	brne	.+26     	; 0x643e <vfprintf+0x36e>
    6424:	b7 01       	movw	r22, r14
    6426:	8e e2       	ldi	r24, 0x2E	; 46
    6428:	90 e0       	ldi	r25, 0x00	; 0
    642a:	2b 8b       	std	Y+19, r18	; 0x13
    642c:	3a 8b       	std	Y+18, r19	; 0x12
    642e:	48 8b       	std	Y+16, r20	; 0x10
    6430:	59 8b       	std	Y+17, r21	; 0x11
    6432:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    6436:	59 89       	ldd	r21, Y+17	; 0x11
    6438:	48 89       	ldd	r20, Y+16	; 0x10
    643a:	3a 89       	ldd	r19, Y+18	; 0x12
    643c:	2b 89       	ldd	r18, Y+19	; 0x13
    643e:	c6 14       	cp	r12, r6
    6440:	d7 04       	cpc	r13, r7
    6442:	54 f0       	brlt	.+20     	; 0x6458 <vfprintf+0x388>
    6444:	6c 85       	ldd	r22, Y+12	; 0x0c
    6446:	7d 85       	ldd	r23, Y+13	; 0x0d
    6448:	66 15       	cp	r22, r6
    644a:	77 05       	cpc	r23, r7
    644c:	2c f4       	brge	.+10     	; 0x6458 <vfprintf+0x388>
    644e:	f9 01       	movw	r30, r18
    6450:	e4 0f       	add	r30, r20
    6452:	f5 1f       	adc	r31, r21
    6454:	81 81       	ldd	r24, Z+1	; 0x01
    6456:	01 c0       	rjmp	.+2      	; 0x645a <vfprintf+0x38a>
    6458:	80 e3       	ldi	r24, 0x30	; 48
    645a:	71 e0       	ldi	r23, 0x01	; 1
    645c:	67 1a       	sub	r6, r23
    645e:	71 08       	sbc	r7, r1
    6460:	4f 5f       	subi	r20, 0xFF	; 255
    6462:	5f 4f       	sbci	r21, 0xFF	; 255
    6464:	ee 85       	ldd	r30, Y+14	; 0x0e
    6466:	ff 85       	ldd	r31, Y+15	; 0x0f
    6468:	6e 16       	cp	r6, r30
    646a:	7f 06       	cpc	r7, r31
    646c:	6c f0       	brlt	.+26     	; 0x6488 <vfprintf+0x3b8>
    646e:	b7 01       	movw	r22, r14
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	2b 8b       	std	Y+19, r18	; 0x13
    6474:	3a 8b       	std	Y+18, r19	; 0x12
    6476:	48 8b       	std	Y+16, r20	; 0x10
    6478:	59 8b       	std	Y+17, r21	; 0x11
    647a:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    647e:	2b 89       	ldd	r18, Y+19	; 0x13
    6480:	3a 89       	ldd	r19, Y+18	; 0x12
    6482:	48 89       	ldd	r20, Y+16	; 0x10
    6484:	59 89       	ldd	r21, Y+17	; 0x11
    6486:	ca cf       	rjmp	.-108    	; 0x641c <vfprintf+0x34c>
    6488:	6c 14       	cp	r6, r12
    648a:	7d 04       	cpc	r7, r13
    648c:	39 f4       	brne	.+14     	; 0x649c <vfprintf+0x3cc>
    648e:	9a 81       	ldd	r25, Y+2	; 0x02
    6490:	96 33       	cpi	r25, 0x36	; 54
    6492:	18 f4       	brcc	.+6      	; 0x649a <vfprintf+0x3ca>
    6494:	95 33       	cpi	r25, 0x35	; 53
    6496:	11 f4       	brne	.+4      	; 0x649c <vfprintf+0x3cc>
    6498:	04 ff       	sbrs	r16, 4
    649a:	81 e3       	ldi	r24, 0x31	; 49
    649c:	b7 01       	movw	r22, r14
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	4b c0       	rjmp	.+150    	; 0x6538 <vfprintf+0x468>
    64a2:	8a 81       	ldd	r24, Y+2	; 0x02
    64a4:	81 33       	cpi	r24, 0x31	; 49
    64a6:	09 f0       	breq	.+2      	; 0x64aa <vfprintf+0x3da>
    64a8:	0f 7e       	andi	r16, 0xEF	; 239
    64aa:	b7 01       	movw	r22, r14
    64ac:	90 e0       	ldi	r25, 0x00	; 0
    64ae:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    64b2:	11 11       	cpse	r17, r1
    64b4:	05 c0       	rjmp	.+10     	; 0x64c0 <vfprintf+0x3f0>
    64b6:	74 fe       	sbrs	r7, 4
    64b8:	18 c0       	rjmp	.+48     	; 0x64ea <vfprintf+0x41a>
    64ba:	85 e4       	ldi	r24, 0x45	; 69
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	17 c0       	rjmp	.+46     	; 0x64ee <vfprintf+0x41e>
    64c0:	b7 01       	movw	r22, r14
    64c2:	8e e2       	ldi	r24, 0x2E	; 46
    64c4:	90 e0       	ldi	r25, 0x00	; 0
    64c6:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    64ca:	82 e0       	ldi	r24, 0x02	; 2
    64cc:	66 24       	eor	r6, r6
    64ce:	63 94       	inc	r6
    64d0:	68 0e       	add	r6, r24
    64d2:	f4 01       	movw	r30, r8
    64d4:	e8 0f       	add	r30, r24
    64d6:	f1 1d       	adc	r31, r1
    64d8:	80 81       	ld	r24, Z
    64da:	b7 01       	movw	r22, r14
    64dc:	90 e0       	ldi	r25, 0x00	; 0
    64de:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    64e2:	11 50       	subi	r17, 0x01	; 1
    64e4:	41 f3       	breq	.-48     	; 0x64b6 <vfprintf+0x3e6>
    64e6:	86 2d       	mov	r24, r6
    64e8:	f1 cf       	rjmp	.-30     	; 0x64cc <vfprintf+0x3fc>
    64ea:	85 e6       	ldi	r24, 0x65	; 101
    64ec:	90 e0       	ldi	r25, 0x00	; 0
    64ee:	b7 01       	movw	r22, r14
    64f0:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    64f4:	d7 fc       	sbrc	r13, 7
    64f6:	05 c0       	rjmp	.+10     	; 0x6502 <vfprintf+0x432>
    64f8:	c1 14       	cp	r12, r1
    64fa:	d1 04       	cpc	r13, r1
    64fc:	39 f4       	brne	.+14     	; 0x650c <vfprintf+0x43c>
    64fe:	04 ff       	sbrs	r16, 4
    6500:	05 c0       	rjmp	.+10     	; 0x650c <vfprintf+0x43c>
    6502:	d1 94       	neg	r13
    6504:	c1 94       	neg	r12
    6506:	d1 08       	sbc	r13, r1
    6508:	8d e2       	ldi	r24, 0x2D	; 45
    650a:	01 c0       	rjmp	.+2      	; 0x650e <vfprintf+0x43e>
    650c:	8b e2       	ldi	r24, 0x2B	; 43
    650e:	b7 01       	movw	r22, r14
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    6516:	80 e3       	ldi	r24, 0x30	; 48
    6518:	6a e0       	ldi	r22, 0x0A	; 10
    651a:	c6 16       	cp	r12, r22
    651c:	d1 04       	cpc	r13, r1
    651e:	2c f0       	brlt	.+10     	; 0x652a <vfprintf+0x45a>
    6520:	8f 5f       	subi	r24, 0xFF	; 255
    6522:	fa e0       	ldi	r31, 0x0A	; 10
    6524:	cf 1a       	sub	r12, r31
    6526:	d1 08       	sbc	r13, r1
    6528:	f7 cf       	rjmp	.-18     	; 0x6518 <vfprintf+0x448>
    652a:	b7 01       	movw	r22, r14
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    6532:	b7 01       	movw	r22, r14
    6534:	c6 01       	movw	r24, r12
    6536:	c0 96       	adiw	r24, 0x30	; 48
    6538:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    653c:	41 c1       	rjmp	.+642    	; 0x67c0 <vfprintf+0x6f0>
    653e:	83 36       	cpi	r24, 0x63	; 99
    6540:	31 f0       	breq	.+12     	; 0x654e <vfprintf+0x47e>
    6542:	83 37       	cpi	r24, 0x73	; 115
    6544:	79 f0       	breq	.+30     	; 0x6564 <vfprintf+0x494>
    6546:	83 35       	cpi	r24, 0x53	; 83
    6548:	09 f0       	breq	.+2      	; 0x654c <vfprintf+0x47c>
    654a:	58 c0       	rjmp	.+176    	; 0x65fc <vfprintf+0x52c>
    654c:	21 c0       	rjmp	.+66     	; 0x6590 <vfprintf+0x4c0>
    654e:	56 01       	movw	r10, r12
    6550:	72 e0       	ldi	r23, 0x02	; 2
    6552:	a7 0e       	add	r10, r23
    6554:	b1 1c       	adc	r11, r1
    6556:	f6 01       	movw	r30, r12
    6558:	80 81       	ld	r24, Z
    655a:	89 83       	std	Y+1, r24	; 0x01
    655c:	01 e0       	ldi	r16, 0x01	; 1
    655e:	10 e0       	ldi	r17, 0x00	; 0
    6560:	64 01       	movw	r12, r8
    6562:	14 c0       	rjmp	.+40     	; 0x658c <vfprintf+0x4bc>
    6564:	56 01       	movw	r10, r12
    6566:	f2 e0       	ldi	r31, 0x02	; 2
    6568:	af 0e       	add	r10, r31
    656a:	b1 1c       	adc	r11, r1
    656c:	f6 01       	movw	r30, r12
    656e:	c0 80       	ld	r12, Z
    6570:	d1 80       	ldd	r13, Z+1	; 0x01
    6572:	26 ff       	sbrs	r18, 6
    6574:	03 c0       	rjmp	.+6      	; 0x657c <vfprintf+0x4ac>
    6576:	61 2f       	mov	r22, r17
    6578:	70 e0       	ldi	r23, 0x00	; 0
    657a:	02 c0       	rjmp	.+4      	; 0x6580 <vfprintf+0x4b0>
    657c:	6f ef       	ldi	r22, 0xFF	; 255
    657e:	7f ef       	ldi	r23, 0xFF	; 255
    6580:	c6 01       	movw	r24, r12
    6582:	2b 8b       	std	Y+19, r18	; 0x13
    6584:	0e 94 8d 38 	call	0x711a	; 0x711a <strnlen>
    6588:	8c 01       	movw	r16, r24
    658a:	2b 89       	ldd	r18, Y+19	; 0x13
    658c:	2f 77       	andi	r18, 0x7F	; 127
    658e:	15 c0       	rjmp	.+42     	; 0x65ba <vfprintf+0x4ea>
    6590:	56 01       	movw	r10, r12
    6592:	f2 e0       	ldi	r31, 0x02	; 2
    6594:	af 0e       	add	r10, r31
    6596:	b1 1c       	adc	r11, r1
    6598:	f6 01       	movw	r30, r12
    659a:	c0 80       	ld	r12, Z
    659c:	d1 80       	ldd	r13, Z+1	; 0x01
    659e:	26 ff       	sbrs	r18, 6
    65a0:	03 c0       	rjmp	.+6      	; 0x65a8 <vfprintf+0x4d8>
    65a2:	61 2f       	mov	r22, r17
    65a4:	70 e0       	ldi	r23, 0x00	; 0
    65a6:	02 c0       	rjmp	.+4      	; 0x65ac <vfprintf+0x4dc>
    65a8:	6f ef       	ldi	r22, 0xFF	; 255
    65aa:	7f ef       	ldi	r23, 0xFF	; 255
    65ac:	c6 01       	movw	r24, r12
    65ae:	2b 8b       	std	Y+19, r18	; 0x13
    65b0:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <strnlen_P>
    65b4:	8c 01       	movw	r16, r24
    65b6:	2b 89       	ldd	r18, Y+19	; 0x13
    65b8:	20 68       	ori	r18, 0x80	; 128
    65ba:	72 2e       	mov	r7, r18
    65bc:	23 fd       	sbrc	r18, 3
    65be:	1a c0       	rjmp	.+52     	; 0x65f4 <vfprintf+0x524>
    65c0:	85 2d       	mov	r24, r5
    65c2:	90 e0       	ldi	r25, 0x00	; 0
    65c4:	08 17       	cp	r16, r24
    65c6:	19 07       	cpc	r17, r25
    65c8:	a8 f4       	brcc	.+42     	; 0x65f4 <vfprintf+0x524>
    65ca:	b7 01       	movw	r22, r14
    65cc:	80 e2       	ldi	r24, 0x20	; 32
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    65d4:	5a 94       	dec	r5
    65d6:	f4 cf       	rjmp	.-24     	; 0x65c0 <vfprintf+0x4f0>
    65d8:	f6 01       	movw	r30, r12
    65da:	77 fc       	sbrc	r7, 7
    65dc:	85 91       	lpm	r24, Z+
    65de:	77 fe       	sbrs	r7, 7
    65e0:	81 91       	ld	r24, Z+
    65e2:	6f 01       	movw	r12, r30
    65e4:	b7 01       	movw	r22, r14
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    65ec:	51 10       	cpse	r5, r1
    65ee:	5a 94       	dec	r5
    65f0:	01 50       	subi	r16, 0x01	; 1
    65f2:	11 09       	sbc	r17, r1
    65f4:	01 15       	cp	r16, r1
    65f6:	11 05       	cpc	r17, r1
    65f8:	79 f7       	brne	.-34     	; 0x65d8 <vfprintf+0x508>
    65fa:	e2 c0       	rjmp	.+452    	; 0x67c0 <vfprintf+0x6f0>
    65fc:	84 36       	cpi	r24, 0x64	; 100
    65fe:	11 f0       	breq	.+4      	; 0x6604 <vfprintf+0x534>
    6600:	89 36       	cpi	r24, 0x69	; 105
    6602:	51 f5       	brne	.+84     	; 0x6658 <vfprintf+0x588>
    6604:	56 01       	movw	r10, r12
    6606:	27 ff       	sbrs	r18, 7
    6608:	09 c0       	rjmp	.+18     	; 0x661c <vfprintf+0x54c>
    660a:	f4 e0       	ldi	r31, 0x04	; 4
    660c:	af 0e       	add	r10, r31
    660e:	b1 1c       	adc	r11, r1
    6610:	f6 01       	movw	r30, r12
    6612:	60 81       	ld	r22, Z
    6614:	71 81       	ldd	r23, Z+1	; 0x01
    6616:	82 81       	ldd	r24, Z+2	; 0x02
    6618:	93 81       	ldd	r25, Z+3	; 0x03
    661a:	0a c0       	rjmp	.+20     	; 0x6630 <vfprintf+0x560>
    661c:	f2 e0       	ldi	r31, 0x02	; 2
    661e:	af 0e       	add	r10, r31
    6620:	b1 1c       	adc	r11, r1
    6622:	f6 01       	movw	r30, r12
    6624:	60 81       	ld	r22, Z
    6626:	71 81       	ldd	r23, Z+1	; 0x01
    6628:	88 27       	eor	r24, r24
    662a:	77 fd       	sbrc	r23, 7
    662c:	80 95       	com	r24
    662e:	98 2f       	mov	r25, r24
    6630:	02 2f       	mov	r16, r18
    6632:	0f 76       	andi	r16, 0x6F	; 111
    6634:	97 ff       	sbrs	r25, 7
    6636:	08 c0       	rjmp	.+16     	; 0x6648 <vfprintf+0x578>
    6638:	90 95       	com	r25
    663a:	80 95       	com	r24
    663c:	70 95       	com	r23
    663e:	61 95       	neg	r22
    6640:	7f 4f       	sbci	r23, 0xFF	; 255
    6642:	8f 4f       	sbci	r24, 0xFF	; 255
    6644:	9f 4f       	sbci	r25, 0xFF	; 255
    6646:	00 68       	ori	r16, 0x80	; 128
    6648:	2a e0       	ldi	r18, 0x0A	; 10
    664a:	30 e0       	ldi	r19, 0x00	; 0
    664c:	a4 01       	movw	r20, r8
    664e:	0e 94 65 39 	call	0x72ca	; 0x72ca <__ultoa_invert>
    6652:	c8 2e       	mov	r12, r24
    6654:	c8 18       	sub	r12, r8
    6656:	3e c0       	rjmp	.+124    	; 0x66d4 <vfprintf+0x604>
    6658:	02 2f       	mov	r16, r18
    665a:	85 37       	cpi	r24, 0x75	; 117
    665c:	21 f4       	brne	.+8      	; 0x6666 <vfprintf+0x596>
    665e:	0f 7e       	andi	r16, 0xEF	; 239
    6660:	2a e0       	ldi	r18, 0x0A	; 10
    6662:	30 e0       	ldi	r19, 0x00	; 0
    6664:	1d c0       	rjmp	.+58     	; 0x66a0 <vfprintf+0x5d0>
    6666:	09 7f       	andi	r16, 0xF9	; 249
    6668:	8f 36       	cpi	r24, 0x6F	; 111
    666a:	91 f0       	breq	.+36     	; 0x6690 <vfprintf+0x5c0>
    666c:	18 f4       	brcc	.+6      	; 0x6674 <vfprintf+0x5a4>
    666e:	88 35       	cpi	r24, 0x58	; 88
    6670:	59 f0       	breq	.+22     	; 0x6688 <vfprintf+0x5b8>
    6672:	b0 c0       	rjmp	.+352    	; 0x67d4 <vfprintf+0x704>
    6674:	80 37       	cpi	r24, 0x70	; 112
    6676:	19 f0       	breq	.+6      	; 0x667e <vfprintf+0x5ae>
    6678:	88 37       	cpi	r24, 0x78	; 120
    667a:	11 f0       	breq	.+4      	; 0x6680 <vfprintf+0x5b0>
    667c:	ab c0       	rjmp	.+342    	; 0x67d4 <vfprintf+0x704>
    667e:	00 61       	ori	r16, 0x10	; 16
    6680:	04 ff       	sbrs	r16, 4
    6682:	09 c0       	rjmp	.+18     	; 0x6696 <vfprintf+0x5c6>
    6684:	04 60       	ori	r16, 0x04	; 4
    6686:	07 c0       	rjmp	.+14     	; 0x6696 <vfprintf+0x5c6>
    6688:	24 ff       	sbrs	r18, 4
    668a:	08 c0       	rjmp	.+16     	; 0x669c <vfprintf+0x5cc>
    668c:	06 60       	ori	r16, 0x06	; 6
    668e:	06 c0       	rjmp	.+12     	; 0x669c <vfprintf+0x5cc>
    6690:	28 e0       	ldi	r18, 0x08	; 8
    6692:	30 e0       	ldi	r19, 0x00	; 0
    6694:	05 c0       	rjmp	.+10     	; 0x66a0 <vfprintf+0x5d0>
    6696:	20 e1       	ldi	r18, 0x10	; 16
    6698:	30 e0       	ldi	r19, 0x00	; 0
    669a:	02 c0       	rjmp	.+4      	; 0x66a0 <vfprintf+0x5d0>
    669c:	20 e1       	ldi	r18, 0x10	; 16
    669e:	32 e0       	ldi	r19, 0x02	; 2
    66a0:	56 01       	movw	r10, r12
    66a2:	07 ff       	sbrs	r16, 7
    66a4:	09 c0       	rjmp	.+18     	; 0x66b8 <vfprintf+0x5e8>
    66a6:	f4 e0       	ldi	r31, 0x04	; 4
    66a8:	af 0e       	add	r10, r31
    66aa:	b1 1c       	adc	r11, r1
    66ac:	f6 01       	movw	r30, r12
    66ae:	60 81       	ld	r22, Z
    66b0:	71 81       	ldd	r23, Z+1	; 0x01
    66b2:	82 81       	ldd	r24, Z+2	; 0x02
    66b4:	93 81       	ldd	r25, Z+3	; 0x03
    66b6:	08 c0       	rjmp	.+16     	; 0x66c8 <vfprintf+0x5f8>
    66b8:	f2 e0       	ldi	r31, 0x02	; 2
    66ba:	af 0e       	add	r10, r31
    66bc:	b1 1c       	adc	r11, r1
    66be:	f6 01       	movw	r30, r12
    66c0:	60 81       	ld	r22, Z
    66c2:	71 81       	ldd	r23, Z+1	; 0x01
    66c4:	80 e0       	ldi	r24, 0x00	; 0
    66c6:	90 e0       	ldi	r25, 0x00	; 0
    66c8:	a4 01       	movw	r20, r8
    66ca:	0e 94 65 39 	call	0x72ca	; 0x72ca <__ultoa_invert>
    66ce:	c8 2e       	mov	r12, r24
    66d0:	c8 18       	sub	r12, r8
    66d2:	0f 77       	andi	r16, 0x7F	; 127
    66d4:	06 ff       	sbrs	r16, 6
    66d6:	0b c0       	rjmp	.+22     	; 0x66ee <vfprintf+0x61e>
    66d8:	20 2f       	mov	r18, r16
    66da:	2e 7f       	andi	r18, 0xFE	; 254
    66dc:	c1 16       	cp	r12, r17
    66de:	50 f4       	brcc	.+20     	; 0x66f4 <vfprintf+0x624>
    66e0:	04 ff       	sbrs	r16, 4
    66e2:	0a c0       	rjmp	.+20     	; 0x66f8 <vfprintf+0x628>
    66e4:	02 fd       	sbrc	r16, 2
    66e6:	08 c0       	rjmp	.+16     	; 0x66f8 <vfprintf+0x628>
    66e8:	20 2f       	mov	r18, r16
    66ea:	2e 7e       	andi	r18, 0xEE	; 238
    66ec:	05 c0       	rjmp	.+10     	; 0x66f8 <vfprintf+0x628>
    66ee:	dc 2c       	mov	r13, r12
    66f0:	20 2f       	mov	r18, r16
    66f2:	03 c0       	rjmp	.+6      	; 0x66fa <vfprintf+0x62a>
    66f4:	dc 2c       	mov	r13, r12
    66f6:	01 c0       	rjmp	.+2      	; 0x66fa <vfprintf+0x62a>
    66f8:	d1 2e       	mov	r13, r17
    66fa:	24 ff       	sbrs	r18, 4
    66fc:	0d c0       	rjmp	.+26     	; 0x6718 <vfprintf+0x648>
    66fe:	fe 01       	movw	r30, r28
    6700:	ec 0d       	add	r30, r12
    6702:	f1 1d       	adc	r31, r1
    6704:	80 81       	ld	r24, Z
    6706:	80 33       	cpi	r24, 0x30	; 48
    6708:	11 f4       	brne	.+4      	; 0x670e <vfprintf+0x63e>
    670a:	29 7e       	andi	r18, 0xE9	; 233
    670c:	09 c0       	rjmp	.+18     	; 0x6720 <vfprintf+0x650>
    670e:	22 ff       	sbrs	r18, 2
    6710:	06 c0       	rjmp	.+12     	; 0x671e <vfprintf+0x64e>
    6712:	d3 94       	inc	r13
    6714:	d3 94       	inc	r13
    6716:	04 c0       	rjmp	.+8      	; 0x6720 <vfprintf+0x650>
    6718:	82 2f       	mov	r24, r18
    671a:	86 78       	andi	r24, 0x86	; 134
    671c:	09 f0       	breq	.+2      	; 0x6720 <vfprintf+0x650>
    671e:	d3 94       	inc	r13
    6720:	23 fd       	sbrc	r18, 3
    6722:	13 c0       	rjmp	.+38     	; 0x674a <vfprintf+0x67a>
    6724:	20 ff       	sbrs	r18, 0
    6726:	06 c0       	rjmp	.+12     	; 0x6734 <vfprintf+0x664>
    6728:	1c 2d       	mov	r17, r12
    672a:	d5 14       	cp	r13, r5
    672c:	18 f4       	brcc	.+6      	; 0x6734 <vfprintf+0x664>
    672e:	15 0d       	add	r17, r5
    6730:	1d 19       	sub	r17, r13
    6732:	d5 2c       	mov	r13, r5
    6734:	d5 14       	cp	r13, r5
    6736:	68 f4       	brcc	.+26     	; 0x6752 <vfprintf+0x682>
    6738:	b7 01       	movw	r22, r14
    673a:	80 e2       	ldi	r24, 0x20	; 32
    673c:	90 e0       	ldi	r25, 0x00	; 0
    673e:	2b 8b       	std	Y+19, r18	; 0x13
    6740:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    6744:	d3 94       	inc	r13
    6746:	2b 89       	ldd	r18, Y+19	; 0x13
    6748:	f5 cf       	rjmp	.-22     	; 0x6734 <vfprintf+0x664>
    674a:	d5 14       	cp	r13, r5
    674c:	10 f4       	brcc	.+4      	; 0x6752 <vfprintf+0x682>
    674e:	5d 18       	sub	r5, r13
    6750:	01 c0       	rjmp	.+2      	; 0x6754 <vfprintf+0x684>
    6752:	51 2c       	mov	r5, r1
    6754:	24 ff       	sbrs	r18, 4
    6756:	12 c0       	rjmp	.+36     	; 0x677c <vfprintf+0x6ac>
    6758:	b7 01       	movw	r22, r14
    675a:	80 e3       	ldi	r24, 0x30	; 48
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	2b 8b       	std	Y+19, r18	; 0x13
    6760:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    6764:	2b 89       	ldd	r18, Y+19	; 0x13
    6766:	22 ff       	sbrs	r18, 2
    6768:	17 c0       	rjmp	.+46     	; 0x6798 <vfprintf+0x6c8>
    676a:	21 ff       	sbrs	r18, 1
    676c:	03 c0       	rjmp	.+6      	; 0x6774 <vfprintf+0x6a4>
    676e:	88 e5       	ldi	r24, 0x58	; 88
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	02 c0       	rjmp	.+4      	; 0x6778 <vfprintf+0x6a8>
    6774:	88 e7       	ldi	r24, 0x78	; 120
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	b7 01       	movw	r22, r14
    677a:	0c c0       	rjmp	.+24     	; 0x6794 <vfprintf+0x6c4>
    677c:	82 2f       	mov	r24, r18
    677e:	86 78       	andi	r24, 0x86	; 134
    6780:	59 f0       	breq	.+22     	; 0x6798 <vfprintf+0x6c8>
    6782:	21 fd       	sbrc	r18, 1
    6784:	02 c0       	rjmp	.+4      	; 0x678a <vfprintf+0x6ba>
    6786:	80 e2       	ldi	r24, 0x20	; 32
    6788:	01 c0       	rjmp	.+2      	; 0x678c <vfprintf+0x6bc>
    678a:	8b e2       	ldi	r24, 0x2B	; 43
    678c:	27 fd       	sbrc	r18, 7
    678e:	8d e2       	ldi	r24, 0x2D	; 45
    6790:	b7 01       	movw	r22, r14
    6792:	90 e0       	ldi	r25, 0x00	; 0
    6794:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    6798:	c1 16       	cp	r12, r17
    679a:	38 f4       	brcc	.+14     	; 0x67aa <vfprintf+0x6da>
    679c:	b7 01       	movw	r22, r14
    679e:	80 e3       	ldi	r24, 0x30	; 48
    67a0:	90 e0       	ldi	r25, 0x00	; 0
    67a2:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    67a6:	11 50       	subi	r17, 0x01	; 1
    67a8:	f7 cf       	rjmp	.-18     	; 0x6798 <vfprintf+0x6c8>
    67aa:	ca 94       	dec	r12
    67ac:	f4 01       	movw	r30, r8
    67ae:	ec 0d       	add	r30, r12
    67b0:	f1 1d       	adc	r31, r1
    67b2:	80 81       	ld	r24, Z
    67b4:	b7 01       	movw	r22, r14
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    67bc:	c1 10       	cpse	r12, r1
    67be:	f5 cf       	rjmp	.-22     	; 0x67aa <vfprintf+0x6da>
    67c0:	55 20       	and	r5, r5
    67c2:	09 f4       	brne	.+2      	; 0x67c6 <vfprintf+0x6f6>
    67c4:	c2 cc       	rjmp	.-1660   	; 0x614a <vfprintf+0x7a>
    67c6:	b7 01       	movw	r22, r14
    67c8:	80 e2       	ldi	r24, 0x20	; 32
    67ca:	90 e0       	ldi	r25, 0x00	; 0
    67cc:	0e 94 a8 38 	call	0x7150	; 0x7150 <fputc>
    67d0:	5a 94       	dec	r5
    67d2:	f6 cf       	rjmp	.-20     	; 0x67c0 <vfprintf+0x6f0>
    67d4:	f7 01       	movw	r30, r14
    67d6:	86 81       	ldd	r24, Z+6	; 0x06
    67d8:	97 81       	ldd	r25, Z+7	; 0x07
    67da:	02 c0       	rjmp	.+4      	; 0x67e0 <vfprintf+0x710>
    67dc:	8f ef       	ldi	r24, 0xFF	; 255
    67de:	9f ef       	ldi	r25, 0xFF	; 255
    67e0:	63 96       	adiw	r28, 0x13	; 19
    67e2:	cd bf       	out	0x3d, r28	; 61
    67e4:	de bf       	out	0x3e, r29	; 62
    67e6:	df 91       	pop	r29
    67e8:	cf 91       	pop	r28
    67ea:	1f 91       	pop	r17
    67ec:	0f 91       	pop	r16
    67ee:	ff 90       	pop	r15
    67f0:	ef 90       	pop	r14
    67f2:	df 90       	pop	r13
    67f4:	cf 90       	pop	r12
    67f6:	bf 90       	pop	r11
    67f8:	af 90       	pop	r10
    67fa:	9f 90       	pop	r9
    67fc:	8f 90       	pop	r8
    67fe:	7f 90       	pop	r7
    6800:	6f 90       	pop	r6
    6802:	5f 90       	pop	r5
    6804:	4f 90       	pop	r4
    6806:	3f 90       	pop	r3
    6808:	2f 90       	pop	r2
    680a:	08 95       	ret

0000680c <__mulhisi3>:
    680c:	0e 94 0e 34 	call	0x681c	; 0x681c <__umulhisi3>
    6810:	33 23       	and	r19, r19
    6812:	12 f4       	brpl	.+4      	; 0x6818 <__mulhisi3+0xc>
    6814:	8a 1b       	sub	r24, r26
    6816:	9b 0b       	sbc	r25, r27
    6818:	0c 94 1f 34 	jmp	0x683e	; 0x683e <__usmulhisi3_tail>

0000681c <__umulhisi3>:
    681c:	a2 9f       	mul	r26, r18
    681e:	b0 01       	movw	r22, r0
    6820:	b3 9f       	mul	r27, r19
    6822:	c0 01       	movw	r24, r0
    6824:	a3 9f       	mul	r26, r19
    6826:	70 0d       	add	r23, r0
    6828:	81 1d       	adc	r24, r1
    682a:	11 24       	eor	r1, r1
    682c:	91 1d       	adc	r25, r1
    682e:	b2 9f       	mul	r27, r18
    6830:	70 0d       	add	r23, r0
    6832:	81 1d       	adc	r24, r1
    6834:	11 24       	eor	r1, r1
    6836:	91 1d       	adc	r25, r1
    6838:	08 95       	ret

0000683a <__usmulhisi3>:
    683a:	0e 94 0e 34 	call	0x681c	; 0x681c <__umulhisi3>

0000683e <__usmulhisi3_tail>:
    683e:	b7 ff       	sbrs	r27, 7
    6840:	08 95       	ret
    6842:	82 1b       	sub	r24, r18
    6844:	93 0b       	sbc	r25, r19
    6846:	08 95       	ret

00006848 <__muluhisi3>:
    6848:	0e 94 0e 34 	call	0x681c	; 0x681c <__umulhisi3>
    684c:	a5 9f       	mul	r26, r21
    684e:	90 0d       	add	r25, r0
    6850:	b4 9f       	mul	r27, r20
    6852:	90 0d       	add	r25, r0
    6854:	a4 9f       	mul	r26, r20
    6856:	80 0d       	add	r24, r0
    6858:	91 1d       	adc	r25, r1
    685a:	11 24       	eor	r1, r1
    685c:	08 95       	ret

0000685e <__adddi3>:
    685e:	2a 0d       	add	r18, r10
    6860:	3b 1d       	adc	r19, r11
    6862:	4c 1d       	adc	r20, r12
    6864:	5d 1d       	adc	r21, r13
    6866:	6e 1d       	adc	r22, r14
    6868:	7f 1d       	adc	r23, r15
    686a:	80 1f       	adc	r24, r16
    686c:	91 1f       	adc	r25, r17
    686e:	08 95       	ret

00006870 <malloc>:
    6870:	cf 93       	push	r28
    6872:	df 93       	push	r29
    6874:	82 30       	cpi	r24, 0x02	; 2
    6876:	91 05       	cpc	r25, r1
    6878:	10 f4       	brcc	.+4      	; 0x687e <malloc+0xe>
    687a:	82 e0       	ldi	r24, 0x02	; 2
    687c:	90 e0       	ldi	r25, 0x00	; 0
    687e:	e0 91 d6 2e 	lds	r30, 0x2ED6
    6882:	f0 91 d7 2e 	lds	r31, 0x2ED7
    6886:	20 e0       	ldi	r18, 0x00	; 0
    6888:	30 e0       	ldi	r19, 0x00	; 0
    688a:	a0 e0       	ldi	r26, 0x00	; 0
    688c:	b0 e0       	ldi	r27, 0x00	; 0
    688e:	30 97       	sbiw	r30, 0x00	; 0
    6890:	39 f1       	breq	.+78     	; 0x68e0 <malloc+0x70>
    6892:	40 81       	ld	r20, Z
    6894:	51 81       	ldd	r21, Z+1	; 0x01
    6896:	48 17       	cp	r20, r24
    6898:	59 07       	cpc	r21, r25
    689a:	b8 f0       	brcs	.+46     	; 0x68ca <malloc+0x5a>
    689c:	48 17       	cp	r20, r24
    689e:	59 07       	cpc	r21, r25
    68a0:	71 f4       	brne	.+28     	; 0x68be <malloc+0x4e>
    68a2:	82 81       	ldd	r24, Z+2	; 0x02
    68a4:	93 81       	ldd	r25, Z+3	; 0x03
    68a6:	10 97       	sbiw	r26, 0x00	; 0
    68a8:	29 f0       	breq	.+10     	; 0x68b4 <malloc+0x44>
    68aa:	12 96       	adiw	r26, 0x02	; 2
    68ac:	8d 93       	st	X+, r24
    68ae:	9c 93       	st	X, r25
    68b0:	13 97       	sbiw	r26, 0x03	; 3
    68b2:	2c c0       	rjmp	.+88     	; 0x690c <malloc+0x9c>
    68b4:	80 93 d6 2e 	sts	0x2ED6, r24
    68b8:	90 93 d7 2e 	sts	0x2ED7, r25
    68bc:	27 c0       	rjmp	.+78     	; 0x690c <malloc+0x9c>
    68be:	21 15       	cp	r18, r1
    68c0:	31 05       	cpc	r19, r1
    68c2:	31 f0       	breq	.+12     	; 0x68d0 <malloc+0x60>
    68c4:	42 17       	cp	r20, r18
    68c6:	53 07       	cpc	r21, r19
    68c8:	18 f0       	brcs	.+6      	; 0x68d0 <malloc+0x60>
    68ca:	a9 01       	movw	r20, r18
    68cc:	db 01       	movw	r26, r22
    68ce:	01 c0       	rjmp	.+2      	; 0x68d2 <malloc+0x62>
    68d0:	ef 01       	movw	r28, r30
    68d2:	9a 01       	movw	r18, r20
    68d4:	bd 01       	movw	r22, r26
    68d6:	df 01       	movw	r26, r30
    68d8:	02 80       	ldd	r0, Z+2	; 0x02
    68da:	f3 81       	ldd	r31, Z+3	; 0x03
    68dc:	e0 2d       	mov	r30, r0
    68de:	d7 cf       	rjmp	.-82     	; 0x688e <malloc+0x1e>
    68e0:	21 15       	cp	r18, r1
    68e2:	31 05       	cpc	r19, r1
    68e4:	f9 f0       	breq	.+62     	; 0x6924 <malloc+0xb4>
    68e6:	28 1b       	sub	r18, r24
    68e8:	39 0b       	sbc	r19, r25
    68ea:	24 30       	cpi	r18, 0x04	; 4
    68ec:	31 05       	cpc	r19, r1
    68ee:	80 f4       	brcc	.+32     	; 0x6910 <malloc+0xa0>
    68f0:	8a 81       	ldd	r24, Y+2	; 0x02
    68f2:	9b 81       	ldd	r25, Y+3	; 0x03
    68f4:	61 15       	cp	r22, r1
    68f6:	71 05       	cpc	r23, r1
    68f8:	21 f0       	breq	.+8      	; 0x6902 <malloc+0x92>
    68fa:	fb 01       	movw	r30, r22
    68fc:	82 83       	std	Z+2, r24	; 0x02
    68fe:	93 83       	std	Z+3, r25	; 0x03
    6900:	04 c0       	rjmp	.+8      	; 0x690a <malloc+0x9a>
    6902:	80 93 d6 2e 	sts	0x2ED6, r24
    6906:	90 93 d7 2e 	sts	0x2ED7, r25
    690a:	fe 01       	movw	r30, r28
    690c:	32 96       	adiw	r30, 0x02	; 2
    690e:	44 c0       	rjmp	.+136    	; 0x6998 <malloc+0x128>
    6910:	fe 01       	movw	r30, r28
    6912:	e2 0f       	add	r30, r18
    6914:	f3 1f       	adc	r31, r19
    6916:	81 93       	st	Z+, r24
    6918:	91 93       	st	Z+, r25
    691a:	22 50       	subi	r18, 0x02	; 2
    691c:	31 09       	sbc	r19, r1
    691e:	28 83       	st	Y, r18
    6920:	39 83       	std	Y+1, r19	; 0x01
    6922:	3a c0       	rjmp	.+116    	; 0x6998 <malloc+0x128>
    6924:	20 91 d4 2e 	lds	r18, 0x2ED4
    6928:	30 91 d5 2e 	lds	r19, 0x2ED5
    692c:	23 2b       	or	r18, r19
    692e:	41 f4       	brne	.+16     	; 0x6940 <malloc+0xd0>
    6930:	20 91 02 20 	lds	r18, 0x2002
    6934:	30 91 03 20 	lds	r19, 0x2003
    6938:	20 93 d4 2e 	sts	0x2ED4, r18
    693c:	30 93 d5 2e 	sts	0x2ED5, r19
    6940:	20 91 00 20 	lds	r18, 0x2000
    6944:	30 91 01 20 	lds	r19, 0x2001
    6948:	21 15       	cp	r18, r1
    694a:	31 05       	cpc	r19, r1
    694c:	41 f4       	brne	.+16     	; 0x695e <malloc+0xee>
    694e:	2d b7       	in	r18, 0x3d	; 61
    6950:	3e b7       	in	r19, 0x3e	; 62
    6952:	40 91 04 20 	lds	r20, 0x2004
    6956:	50 91 05 20 	lds	r21, 0x2005
    695a:	24 1b       	sub	r18, r20
    695c:	35 0b       	sbc	r19, r21
    695e:	e0 91 d4 2e 	lds	r30, 0x2ED4
    6962:	f0 91 d5 2e 	lds	r31, 0x2ED5
    6966:	e2 17       	cp	r30, r18
    6968:	f3 07       	cpc	r31, r19
    696a:	a0 f4       	brcc	.+40     	; 0x6994 <malloc+0x124>
    696c:	2e 1b       	sub	r18, r30
    696e:	3f 0b       	sbc	r19, r31
    6970:	28 17       	cp	r18, r24
    6972:	39 07       	cpc	r19, r25
    6974:	78 f0       	brcs	.+30     	; 0x6994 <malloc+0x124>
    6976:	ac 01       	movw	r20, r24
    6978:	4e 5f       	subi	r20, 0xFE	; 254
    697a:	5f 4f       	sbci	r21, 0xFF	; 255
    697c:	24 17       	cp	r18, r20
    697e:	35 07       	cpc	r19, r21
    6980:	48 f0       	brcs	.+18     	; 0x6994 <malloc+0x124>
    6982:	4e 0f       	add	r20, r30
    6984:	5f 1f       	adc	r21, r31
    6986:	40 93 d4 2e 	sts	0x2ED4, r20
    698a:	50 93 d5 2e 	sts	0x2ED5, r21
    698e:	81 93       	st	Z+, r24
    6990:	91 93       	st	Z+, r25
    6992:	02 c0       	rjmp	.+4      	; 0x6998 <malloc+0x128>
    6994:	e0 e0       	ldi	r30, 0x00	; 0
    6996:	f0 e0       	ldi	r31, 0x00	; 0
    6998:	cf 01       	movw	r24, r30
    699a:	df 91       	pop	r29
    699c:	cf 91       	pop	r28
    699e:	08 95       	ret

000069a0 <free>:
    69a0:	cf 93       	push	r28
    69a2:	df 93       	push	r29
    69a4:	00 97       	sbiw	r24, 0x00	; 0
    69a6:	09 f4       	brne	.+2      	; 0x69aa <free+0xa>
    69a8:	87 c0       	rjmp	.+270    	; 0x6ab8 <free+0x118>
    69aa:	fc 01       	movw	r30, r24
    69ac:	32 97       	sbiw	r30, 0x02	; 2
    69ae:	12 82       	std	Z+2, r1	; 0x02
    69b0:	13 82       	std	Z+3, r1	; 0x03
    69b2:	c0 91 d6 2e 	lds	r28, 0x2ED6
    69b6:	d0 91 d7 2e 	lds	r29, 0x2ED7
    69ba:	20 97       	sbiw	r28, 0x00	; 0
    69bc:	81 f4       	brne	.+32     	; 0x69de <free+0x3e>
    69be:	20 81       	ld	r18, Z
    69c0:	31 81       	ldd	r19, Z+1	; 0x01
    69c2:	28 0f       	add	r18, r24
    69c4:	39 1f       	adc	r19, r25
    69c6:	80 91 d4 2e 	lds	r24, 0x2ED4
    69ca:	90 91 d5 2e 	lds	r25, 0x2ED5
    69ce:	82 17       	cp	r24, r18
    69d0:	93 07       	cpc	r25, r19
    69d2:	79 f5       	brne	.+94     	; 0x6a32 <free+0x92>
    69d4:	e0 93 d4 2e 	sts	0x2ED4, r30
    69d8:	f0 93 d5 2e 	sts	0x2ED5, r31
    69dc:	6d c0       	rjmp	.+218    	; 0x6ab8 <free+0x118>
    69de:	de 01       	movw	r26, r28
    69e0:	20 e0       	ldi	r18, 0x00	; 0
    69e2:	30 e0       	ldi	r19, 0x00	; 0
    69e4:	ae 17       	cp	r26, r30
    69e6:	bf 07       	cpc	r27, r31
    69e8:	50 f4       	brcc	.+20     	; 0x69fe <free+0x5e>
    69ea:	12 96       	adiw	r26, 0x02	; 2
    69ec:	4d 91       	ld	r20, X+
    69ee:	5c 91       	ld	r21, X
    69f0:	13 97       	sbiw	r26, 0x03	; 3
    69f2:	9d 01       	movw	r18, r26
    69f4:	41 15       	cp	r20, r1
    69f6:	51 05       	cpc	r21, r1
    69f8:	09 f1       	breq	.+66     	; 0x6a3c <free+0x9c>
    69fa:	da 01       	movw	r26, r20
    69fc:	f3 cf       	rjmp	.-26     	; 0x69e4 <free+0x44>
    69fe:	a2 83       	std	Z+2, r26	; 0x02
    6a00:	b3 83       	std	Z+3, r27	; 0x03
    6a02:	40 81       	ld	r20, Z
    6a04:	51 81       	ldd	r21, Z+1	; 0x01
    6a06:	84 0f       	add	r24, r20
    6a08:	95 1f       	adc	r25, r21
    6a0a:	8a 17       	cp	r24, r26
    6a0c:	9b 07       	cpc	r25, r27
    6a0e:	71 f4       	brne	.+28     	; 0x6a2c <free+0x8c>
    6a10:	8d 91       	ld	r24, X+
    6a12:	9c 91       	ld	r25, X
    6a14:	11 97       	sbiw	r26, 0x01	; 1
    6a16:	84 0f       	add	r24, r20
    6a18:	95 1f       	adc	r25, r21
    6a1a:	02 96       	adiw	r24, 0x02	; 2
    6a1c:	80 83       	st	Z, r24
    6a1e:	91 83       	std	Z+1, r25	; 0x01
    6a20:	12 96       	adiw	r26, 0x02	; 2
    6a22:	8d 91       	ld	r24, X+
    6a24:	9c 91       	ld	r25, X
    6a26:	13 97       	sbiw	r26, 0x03	; 3
    6a28:	82 83       	std	Z+2, r24	; 0x02
    6a2a:	93 83       	std	Z+3, r25	; 0x03
    6a2c:	21 15       	cp	r18, r1
    6a2e:	31 05       	cpc	r19, r1
    6a30:	29 f4       	brne	.+10     	; 0x6a3c <free+0x9c>
    6a32:	e0 93 d6 2e 	sts	0x2ED6, r30
    6a36:	f0 93 d7 2e 	sts	0x2ED7, r31
    6a3a:	3e c0       	rjmp	.+124    	; 0x6ab8 <free+0x118>
    6a3c:	d9 01       	movw	r26, r18
    6a3e:	12 96       	adiw	r26, 0x02	; 2
    6a40:	ed 93       	st	X+, r30
    6a42:	fc 93       	st	X, r31
    6a44:	13 97       	sbiw	r26, 0x03	; 3
    6a46:	4d 91       	ld	r20, X+
    6a48:	5d 91       	ld	r21, X+
    6a4a:	a4 0f       	add	r26, r20
    6a4c:	b5 1f       	adc	r27, r21
    6a4e:	ea 17       	cp	r30, r26
    6a50:	fb 07       	cpc	r31, r27
    6a52:	79 f4       	brne	.+30     	; 0x6a72 <free+0xd2>
    6a54:	80 81       	ld	r24, Z
    6a56:	91 81       	ldd	r25, Z+1	; 0x01
    6a58:	84 0f       	add	r24, r20
    6a5a:	95 1f       	adc	r25, r21
    6a5c:	02 96       	adiw	r24, 0x02	; 2
    6a5e:	d9 01       	movw	r26, r18
    6a60:	8d 93       	st	X+, r24
    6a62:	9c 93       	st	X, r25
    6a64:	11 97       	sbiw	r26, 0x01	; 1
    6a66:	82 81       	ldd	r24, Z+2	; 0x02
    6a68:	93 81       	ldd	r25, Z+3	; 0x03
    6a6a:	12 96       	adiw	r26, 0x02	; 2
    6a6c:	8d 93       	st	X+, r24
    6a6e:	9c 93       	st	X, r25
    6a70:	13 97       	sbiw	r26, 0x03	; 3
    6a72:	e0 e0       	ldi	r30, 0x00	; 0
    6a74:	f0 e0       	ldi	r31, 0x00	; 0
    6a76:	8a 81       	ldd	r24, Y+2	; 0x02
    6a78:	9b 81       	ldd	r25, Y+3	; 0x03
    6a7a:	00 97       	sbiw	r24, 0x00	; 0
    6a7c:	19 f0       	breq	.+6      	; 0x6a84 <free+0xe4>
    6a7e:	fe 01       	movw	r30, r28
    6a80:	ec 01       	movw	r28, r24
    6a82:	f9 cf       	rjmp	.-14     	; 0x6a76 <free+0xd6>
    6a84:	ce 01       	movw	r24, r28
    6a86:	02 96       	adiw	r24, 0x02	; 2
    6a88:	28 81       	ld	r18, Y
    6a8a:	39 81       	ldd	r19, Y+1	; 0x01
    6a8c:	82 0f       	add	r24, r18
    6a8e:	93 1f       	adc	r25, r19
    6a90:	20 91 d4 2e 	lds	r18, 0x2ED4
    6a94:	30 91 d5 2e 	lds	r19, 0x2ED5
    6a98:	28 17       	cp	r18, r24
    6a9a:	39 07       	cpc	r19, r25
    6a9c:	69 f4       	brne	.+26     	; 0x6ab8 <free+0x118>
    6a9e:	30 97       	sbiw	r30, 0x00	; 0
    6aa0:	29 f4       	brne	.+10     	; 0x6aac <free+0x10c>
    6aa2:	10 92 d6 2e 	sts	0x2ED6, r1
    6aa6:	10 92 d7 2e 	sts	0x2ED7, r1
    6aaa:	02 c0       	rjmp	.+4      	; 0x6ab0 <free+0x110>
    6aac:	12 82       	std	Z+2, r1	; 0x02
    6aae:	13 82       	std	Z+3, r1	; 0x03
    6ab0:	c0 93 d4 2e 	sts	0x2ED4, r28
    6ab4:	d0 93 d5 2e 	sts	0x2ED5, r29
    6ab8:	df 91       	pop	r29
    6aba:	cf 91       	pop	r28
    6abc:	08 95       	ret

00006abe <realloc>:
    6abe:	6f 92       	push	r6
    6ac0:	7f 92       	push	r7
    6ac2:	8f 92       	push	r8
    6ac4:	9f 92       	push	r9
    6ac6:	af 92       	push	r10
    6ac8:	bf 92       	push	r11
    6aca:	cf 92       	push	r12
    6acc:	df 92       	push	r13
    6ace:	ef 92       	push	r14
    6ad0:	ff 92       	push	r15
    6ad2:	0f 93       	push	r16
    6ad4:	1f 93       	push	r17
    6ad6:	cf 93       	push	r28
    6ad8:	df 93       	push	r29
    6ada:	ec 01       	movw	r28, r24
    6adc:	cb 01       	movw	r24, r22
    6ade:	20 97       	sbiw	r28, 0x00	; 0
    6ae0:	81 f4       	brne	.+32     	; 0x6b02 <realloc+0x44>
    6ae2:	df 91       	pop	r29
    6ae4:	cf 91       	pop	r28
    6ae6:	1f 91       	pop	r17
    6ae8:	0f 91       	pop	r16
    6aea:	ff 90       	pop	r15
    6aec:	ef 90       	pop	r14
    6aee:	df 90       	pop	r13
    6af0:	cf 90       	pop	r12
    6af2:	bf 90       	pop	r11
    6af4:	af 90       	pop	r10
    6af6:	9f 90       	pop	r9
    6af8:	8f 90       	pop	r8
    6afa:	7f 90       	pop	r7
    6afc:	6f 90       	pop	r6
    6afe:	0c 94 38 34 	jmp	0x6870	; 0x6870 <malloc>
    6b02:	fe 01       	movw	r30, r28
    6b04:	e6 0f       	add	r30, r22
    6b06:	f7 1f       	adc	r31, r23
    6b08:	9e 01       	movw	r18, r28
    6b0a:	22 50       	subi	r18, 0x02	; 2
    6b0c:	31 09       	sbc	r19, r1
    6b0e:	e2 17       	cp	r30, r18
    6b10:	f3 07       	cpc	r31, r19
    6b12:	08 f4       	brcc	.+2      	; 0x6b16 <realloc+0x58>
    6b14:	ac c0       	rjmp	.+344    	; 0x6c6e <realloc+0x1b0>
    6b16:	d9 01       	movw	r26, r18
    6b18:	0d 91       	ld	r16, X+
    6b1a:	1c 91       	ld	r17, X
    6b1c:	11 97       	sbiw	r26, 0x01	; 1
    6b1e:	06 17       	cp	r16, r22
    6b20:	17 07       	cpc	r17, r23
    6b22:	b8 f0       	brcs	.+46     	; 0x6b52 <realloc+0x94>
    6b24:	05 30       	cpi	r16, 0x05	; 5
    6b26:	11 05       	cpc	r17, r1
    6b28:	08 f4       	brcc	.+2      	; 0x6b2c <realloc+0x6e>
    6b2a:	9f c0       	rjmp	.+318    	; 0x6c6a <realloc+0x1ac>
    6b2c:	a8 01       	movw	r20, r16
    6b2e:	44 50       	subi	r20, 0x04	; 4
    6b30:	51 09       	sbc	r21, r1
    6b32:	46 17       	cp	r20, r22
    6b34:	57 07       	cpc	r21, r23
    6b36:	08 f4       	brcc	.+2      	; 0x6b3a <realloc+0x7c>
    6b38:	98 c0       	rjmp	.+304    	; 0x6c6a <realloc+0x1ac>
    6b3a:	02 50       	subi	r16, 0x02	; 2
    6b3c:	11 09       	sbc	r17, r1
    6b3e:	06 1b       	sub	r16, r22
    6b40:	17 0b       	sbc	r17, r23
    6b42:	01 93       	st	Z+, r16
    6b44:	11 93       	st	Z+, r17
    6b46:	6d 93       	st	X+, r22
    6b48:	7c 93       	st	X, r23
    6b4a:	cf 01       	movw	r24, r30
    6b4c:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <free>
    6b50:	8c c0       	rjmp	.+280    	; 0x6c6a <realloc+0x1ac>
    6b52:	5b 01       	movw	r10, r22
    6b54:	a0 1a       	sub	r10, r16
    6b56:	b1 0a       	sbc	r11, r17
    6b58:	4e 01       	movw	r8, r28
    6b5a:	80 0e       	add	r8, r16
    6b5c:	91 1e       	adc	r9, r17
    6b5e:	a0 91 d6 2e 	lds	r26, 0x2ED6
    6b62:	b0 91 d7 2e 	lds	r27, 0x2ED7
    6b66:	61 2c       	mov	r6, r1
    6b68:	71 2c       	mov	r7, r1
    6b6a:	60 e0       	ldi	r22, 0x00	; 0
    6b6c:	70 e0       	ldi	r23, 0x00	; 0
    6b6e:	10 97       	sbiw	r26, 0x00	; 0
    6b70:	09 f4       	brne	.+2      	; 0x6b74 <realloc+0xb6>
    6b72:	49 c0       	rjmp	.+146    	; 0x6c06 <realloc+0x148>
    6b74:	a8 15       	cp	r26, r8
    6b76:	b9 05       	cpc	r27, r9
    6b78:	c9 f5       	brne	.+114    	; 0x6bec <realloc+0x12e>
    6b7a:	ed 90       	ld	r14, X+
    6b7c:	fc 90       	ld	r15, X
    6b7e:	11 97       	sbiw	r26, 0x01	; 1
    6b80:	67 01       	movw	r12, r14
    6b82:	42 e0       	ldi	r20, 0x02	; 2
    6b84:	c4 0e       	add	r12, r20
    6b86:	d1 1c       	adc	r13, r1
    6b88:	ca 14       	cp	r12, r10
    6b8a:	db 04       	cpc	r13, r11
    6b8c:	78 f1       	brcs	.+94     	; 0x6bec <realloc+0x12e>
    6b8e:	47 01       	movw	r8, r14
    6b90:	8a 18       	sub	r8, r10
    6b92:	9b 08       	sbc	r9, r11
    6b94:	64 01       	movw	r12, r8
    6b96:	42 e0       	ldi	r20, 0x02	; 2
    6b98:	c4 0e       	add	r12, r20
    6b9a:	d1 1c       	adc	r13, r1
    6b9c:	12 96       	adiw	r26, 0x02	; 2
    6b9e:	bc 90       	ld	r11, X
    6ba0:	12 97       	sbiw	r26, 0x02	; 2
    6ba2:	13 96       	adiw	r26, 0x03	; 3
    6ba4:	ac 91       	ld	r26, X
    6ba6:	b5 e0       	ldi	r27, 0x05	; 5
    6ba8:	cb 16       	cp	r12, r27
    6baa:	d1 04       	cpc	r13, r1
    6bac:	40 f0       	brcs	.+16     	; 0x6bbe <realloc+0x100>
    6bae:	b2 82       	std	Z+2, r11	; 0x02
    6bb0:	a3 83       	std	Z+3, r26	; 0x03
    6bb2:	80 82       	st	Z, r8
    6bb4:	91 82       	std	Z+1, r9	; 0x01
    6bb6:	d9 01       	movw	r26, r18
    6bb8:	8d 93       	st	X+, r24
    6bba:	9c 93       	st	X, r25
    6bbc:	09 c0       	rjmp	.+18     	; 0x6bd0 <realloc+0x112>
    6bbe:	0e 5f       	subi	r16, 0xFE	; 254
    6bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    6bc2:	0e 0d       	add	r16, r14
    6bc4:	1f 1d       	adc	r17, r15
    6bc6:	f9 01       	movw	r30, r18
    6bc8:	00 83       	st	Z, r16
    6bca:	11 83       	std	Z+1, r17	; 0x01
    6bcc:	eb 2d       	mov	r30, r11
    6bce:	fa 2f       	mov	r31, r26
    6bd0:	61 15       	cp	r22, r1
    6bd2:	71 05       	cpc	r23, r1
    6bd4:	31 f0       	breq	.+12     	; 0x6be2 <realloc+0x124>
    6bd6:	db 01       	movw	r26, r22
    6bd8:	12 96       	adiw	r26, 0x02	; 2
    6bda:	ed 93       	st	X+, r30
    6bdc:	fc 93       	st	X, r31
    6bde:	13 97       	sbiw	r26, 0x03	; 3
    6be0:	44 c0       	rjmp	.+136    	; 0x6c6a <realloc+0x1ac>
    6be2:	e0 93 d6 2e 	sts	0x2ED6, r30
    6be6:	f0 93 d7 2e 	sts	0x2ED7, r31
    6bea:	3f c0       	rjmp	.+126    	; 0x6c6a <realloc+0x1ac>
    6bec:	6d 91       	ld	r22, X+
    6bee:	7c 91       	ld	r23, X
    6bf0:	11 97       	sbiw	r26, 0x01	; 1
    6bf2:	66 16       	cp	r6, r22
    6bf4:	77 06       	cpc	r7, r23
    6bf6:	08 f4       	brcc	.+2      	; 0x6bfa <realloc+0x13c>
    6bf8:	3b 01       	movw	r6, r22
    6bfa:	bd 01       	movw	r22, r26
    6bfc:	12 96       	adiw	r26, 0x02	; 2
    6bfe:	0d 90       	ld	r0, X+
    6c00:	bc 91       	ld	r27, X
    6c02:	a0 2d       	mov	r26, r0
    6c04:	b4 cf       	rjmp	.-152    	; 0x6b6e <realloc+0xb0>
    6c06:	60 91 d4 2e 	lds	r22, 0x2ED4
    6c0a:	70 91 d5 2e 	lds	r23, 0x2ED5
    6c0e:	68 15       	cp	r22, r8
    6c10:	79 05       	cpc	r23, r9
    6c12:	e9 f4       	brne	.+58     	; 0x6c4e <realloc+0x190>
    6c14:	68 16       	cp	r6, r24
    6c16:	79 06       	cpc	r7, r25
    6c18:	d0 f4       	brcc	.+52     	; 0x6c4e <realloc+0x190>
    6c1a:	40 91 00 20 	lds	r20, 0x2000
    6c1e:	50 91 01 20 	lds	r21, 0x2001
    6c22:	41 15       	cp	r20, r1
    6c24:	51 05       	cpc	r21, r1
    6c26:	41 f4       	brne	.+16     	; 0x6c38 <realloc+0x17a>
    6c28:	4d b7       	in	r20, 0x3d	; 61
    6c2a:	5e b7       	in	r21, 0x3e	; 62
    6c2c:	60 91 04 20 	lds	r22, 0x2004
    6c30:	70 91 05 20 	lds	r23, 0x2005
    6c34:	46 1b       	sub	r20, r22
    6c36:	57 0b       	sbc	r21, r23
    6c38:	e4 17       	cp	r30, r20
    6c3a:	f5 07       	cpc	r31, r21
    6c3c:	c0 f4       	brcc	.+48     	; 0x6c6e <realloc+0x1b0>
    6c3e:	e0 93 d4 2e 	sts	0x2ED4, r30
    6c42:	f0 93 d5 2e 	sts	0x2ED5, r31
    6c46:	f9 01       	movw	r30, r18
    6c48:	80 83       	st	Z, r24
    6c4a:	91 83       	std	Z+1, r25	; 0x01
    6c4c:	0e c0       	rjmp	.+28     	; 0x6c6a <realloc+0x1ac>
    6c4e:	0e 94 38 34 	call	0x6870	; 0x6870 <malloc>
    6c52:	7c 01       	movw	r14, r24
    6c54:	00 97       	sbiw	r24, 0x00	; 0
    6c56:	59 f0       	breq	.+22     	; 0x6c6e <realloc+0x1b0>
    6c58:	a8 01       	movw	r20, r16
    6c5a:	be 01       	movw	r22, r28
    6c5c:	0e 94 67 38 	call	0x70ce	; 0x70ce <memcpy>
    6c60:	ce 01       	movw	r24, r28
    6c62:	0e 94 d0 34 	call	0x69a0	; 0x69a0 <free>
    6c66:	c7 01       	movw	r24, r14
    6c68:	04 c0       	rjmp	.+8      	; 0x6c72 <realloc+0x1b4>
    6c6a:	ce 01       	movw	r24, r28
    6c6c:	02 c0       	rjmp	.+4      	; 0x6c72 <realloc+0x1b4>
    6c6e:	80 e0       	ldi	r24, 0x00	; 0
    6c70:	90 e0       	ldi	r25, 0x00	; 0
    6c72:	df 91       	pop	r29
    6c74:	cf 91       	pop	r28
    6c76:	1f 91       	pop	r17
    6c78:	0f 91       	pop	r16
    6c7a:	ff 90       	pop	r15
    6c7c:	ef 90       	pop	r14
    6c7e:	df 90       	pop	r13
    6c80:	cf 90       	pop	r12
    6c82:	bf 90       	pop	r11
    6c84:	af 90       	pop	r10
    6c86:	9f 90       	pop	r9
    6c88:	8f 90       	pop	r8
    6c8a:	7f 90       	pop	r7
    6c8c:	6f 90       	pop	r6
    6c8e:	08 95       	ret

00006c90 <strtol>:
    6c90:	2f 92       	push	r2
    6c92:	3f 92       	push	r3
    6c94:	5f 92       	push	r5
    6c96:	6f 92       	push	r6
    6c98:	7f 92       	push	r7
    6c9a:	8f 92       	push	r8
    6c9c:	9f 92       	push	r9
    6c9e:	af 92       	push	r10
    6ca0:	bf 92       	push	r11
    6ca2:	cf 92       	push	r12
    6ca4:	df 92       	push	r13
    6ca6:	ef 92       	push	r14
    6ca8:	ff 92       	push	r15
    6caa:	0f 93       	push	r16
    6cac:	1f 93       	push	r17
    6cae:	cf 93       	push	r28
    6cb0:	df 93       	push	r29
    6cb2:	8b 01       	movw	r16, r22
    6cb4:	ea 01       	movw	r28, r20
    6cb6:	61 15       	cp	r22, r1
    6cb8:	71 05       	cpc	r23, r1
    6cba:	21 f0       	breq	.+8      	; 0x6cc4 <strtol+0x34>
    6cbc:	db 01       	movw	r26, r22
    6cbe:	8c 93       	st	X, r24
    6cc0:	11 96       	adiw	r26, 0x01	; 1
    6cc2:	9c 93       	st	X, r25
    6cc4:	20 97       	sbiw	r28, 0x00	; 0
    6cc6:	39 f0       	breq	.+14     	; 0x6cd6 <strtol+0x46>
    6cc8:	9e 01       	movw	r18, r28
    6cca:	22 50       	subi	r18, 0x02	; 2
    6ccc:	31 09       	sbc	r19, r1
    6cce:	23 32       	cpi	r18, 0x23	; 35
    6cd0:	31 05       	cpc	r19, r1
    6cd2:	08 f0       	brcs	.+2      	; 0x6cd6 <strtol+0x46>
    6cd4:	fb c0       	rjmp	.+502    	; 0x6ecc <strtol+0x23c>
    6cd6:	7c 01       	movw	r14, r24
    6cd8:	67 01       	movw	r12, r14
    6cda:	bf ef       	ldi	r27, 0xFF	; 255
    6cdc:	cb 1a       	sub	r12, r27
    6cde:	db 0a       	sbc	r13, r27
    6ce0:	56 01       	movw	r10, r12
    6ce2:	f7 01       	movw	r30, r14
    6ce4:	60 80       	ld	r6, Z
    6ce6:	86 2d       	mov	r24, r6
    6ce8:	90 e0       	ldi	r25, 0x00	; 0
    6cea:	0e 94 54 38 	call	0x70a8	; 0x70a8 <isspace>
    6cee:	89 2b       	or	r24, r25
    6cf0:	11 f0       	breq	.+4      	; 0x6cf6 <strtol+0x66>
    6cf2:	76 01       	movw	r14, r12
    6cf4:	f1 cf       	rjmp	.-30     	; 0x6cd8 <strtol+0x48>
    6cf6:	fd e2       	ldi	r31, 0x2D	; 45
    6cf8:	6f 12       	cpse	r6, r31
    6cfa:	0a c0       	rjmp	.+20     	; 0x6d10 <strtol+0x80>
    6cfc:	57 01       	movw	r10, r14
    6cfe:	82 e0       	ldi	r24, 0x02	; 2
    6d00:	a8 0e       	add	r10, r24
    6d02:	b1 1c       	adc	r11, r1
    6d04:	d7 01       	movw	r26, r14
    6d06:	11 96       	adiw	r26, 0x01	; 1
    6d08:	6c 90       	ld	r6, X
    6d0a:	77 24       	eor	r7, r7
    6d0c:	73 94       	inc	r7
    6d0e:	0b c0       	rjmp	.+22     	; 0x6d26 <strtol+0x96>
    6d10:	bb e2       	ldi	r27, 0x2B	; 43
    6d12:	6b 12       	cpse	r6, r27
    6d14:	07 c0       	rjmp	.+14     	; 0x6d24 <strtol+0x94>
    6d16:	57 01       	movw	r10, r14
    6d18:	e2 e0       	ldi	r30, 0x02	; 2
    6d1a:	ae 0e       	add	r10, r30
    6d1c:	b1 1c       	adc	r11, r1
    6d1e:	d7 01       	movw	r26, r14
    6d20:	11 96       	adiw	r26, 0x01	; 1
    6d22:	6c 90       	ld	r6, X
    6d24:	71 2c       	mov	r7, r1
    6d26:	ce 01       	movw	r24, r28
    6d28:	8f 7e       	andi	r24, 0xEF	; 239
    6d2a:	89 2b       	or	r24, r25
    6d2c:	89 f4       	brne	.+34     	; 0x6d50 <strtol+0xc0>
    6d2e:	b0 e3       	ldi	r27, 0x30	; 48
    6d30:	6b 12       	cpse	r6, r27
    6d32:	22 c0       	rjmp	.+68     	; 0x6d78 <strtol+0xe8>
    6d34:	f5 01       	movw	r30, r10
    6d36:	80 81       	ld	r24, Z
    6d38:	8f 7d       	andi	r24, 0xDF	; 223
    6d3a:	88 35       	cpi	r24, 0x58	; 88
    6d3c:	41 f5       	brne	.+80     	; 0x6d8e <strtol+0xfe>
    6d3e:	61 80       	ldd	r6, Z+1	; 0x01
    6d40:	f2 e0       	ldi	r31, 0x02	; 2
    6d42:	af 0e       	add	r10, r31
    6d44:	b1 1c       	adc	r11, r1
    6d46:	87 2d       	mov	r24, r7
    6d48:	82 60       	ori	r24, 0x02	; 2
    6d4a:	78 2e       	mov	r7, r24
    6d4c:	c0 e1       	ldi	r28, 0x10	; 16
    6d4e:	d0 e0       	ldi	r29, 0x00	; 0
    6d50:	c8 30       	cpi	r28, 0x08	; 8
    6d52:	d1 05       	cpc	r29, r1
    6d54:	f1 f0       	breq	.+60     	; 0x6d92 <strtol+0x102>
    6d56:	4c f4       	brge	.+18     	; 0x6d6a <strtol+0xda>
    6d58:	c2 30       	cpi	r28, 0x02	; 2
    6d5a:	d1 05       	cpc	r29, r1
    6d5c:	11 f5       	brne	.+68     	; 0x6da2 <strtol+0x112>
    6d5e:	c1 2c       	mov	r12, r1
    6d60:	d1 2c       	mov	r13, r1
    6d62:	e1 2c       	mov	r14, r1
    6d64:	b0 e4       	ldi	r27, 0x40	; 64
    6d66:	fb 2e       	mov	r15, r27
    6d68:	2f c0       	rjmp	.+94     	; 0x6dc8 <strtol+0x138>
    6d6a:	ca 30       	cpi	r28, 0x0A	; 10
    6d6c:	d1 05       	cpc	r29, r1
    6d6e:	31 f0       	breq	.+12     	; 0x6d7c <strtol+0xec>
    6d70:	c0 31       	cpi	r28, 0x10	; 16
    6d72:	d1 05       	cpc	r29, r1
    6d74:	21 f1       	breq	.+72     	; 0x6dbe <strtol+0x12e>
    6d76:	15 c0       	rjmp	.+42     	; 0x6da2 <strtol+0x112>
    6d78:	20 97       	sbiw	r28, 0x00	; 0
    6d7a:	51 f7       	brne	.-44     	; 0x6d50 <strtol+0xc0>
    6d7c:	ca e0       	ldi	r28, 0x0A	; 10
    6d7e:	d0 e0       	ldi	r29, 0x00	; 0
    6d80:	ac ec       	ldi	r26, 0xCC	; 204
    6d82:	ca 2e       	mov	r12, r26
    6d84:	dc 2c       	mov	r13, r12
    6d86:	ec 2c       	mov	r14, r12
    6d88:	ac e0       	ldi	r26, 0x0C	; 12
    6d8a:	fa 2e       	mov	r15, r26
    6d8c:	1d c0       	rjmp	.+58     	; 0x6dc8 <strtol+0x138>
    6d8e:	20 97       	sbiw	r28, 0x00	; 0
    6d90:	f9 f6       	brne	.-66     	; 0x6d50 <strtol+0xc0>
    6d92:	c8 e0       	ldi	r28, 0x08	; 8
    6d94:	d0 e0       	ldi	r29, 0x00	; 0
    6d96:	c1 2c       	mov	r12, r1
    6d98:	d1 2c       	mov	r13, r1
    6d9a:	e1 2c       	mov	r14, r1
    6d9c:	f0 e1       	ldi	r31, 0x10	; 16
    6d9e:	ff 2e       	mov	r15, r31
    6da0:	13 c0       	rjmp	.+38     	; 0x6dc8 <strtol+0x138>
    6da2:	60 e0       	ldi	r22, 0x00	; 0
    6da4:	70 e0       	ldi	r23, 0x00	; 0
    6da6:	80 e0       	ldi	r24, 0x00	; 0
    6da8:	90 e8       	ldi	r25, 0x80	; 128
    6daa:	9e 01       	movw	r18, r28
    6dac:	44 27       	eor	r20, r20
    6dae:	37 fd       	sbrc	r19, 7
    6db0:	40 95       	com	r20
    6db2:	54 2f       	mov	r21, r20
    6db4:	0e 94 30 3a 	call	0x7460	; 0x7460 <__udivmodsi4>
    6db8:	69 01       	movw	r12, r18
    6dba:	7a 01       	movw	r14, r20
    6dbc:	05 c0       	rjmp	.+10     	; 0x6dc8 <strtol+0x138>
    6dbe:	c1 2c       	mov	r12, r1
    6dc0:	d1 2c       	mov	r13, r1
    6dc2:	e1 2c       	mov	r14, r1
    6dc4:	e8 e0       	ldi	r30, 0x08	; 8
    6dc6:	fe 2e       	mov	r15, r30
    6dc8:	f5 01       	movw	r30, r10
    6dca:	60 e0       	ldi	r22, 0x00	; 0
    6dcc:	20 e0       	ldi	r18, 0x00	; 0
    6dce:	30 e0       	ldi	r19, 0x00	; 0
    6dd0:	a9 01       	movw	r20, r18
    6dd2:	4e 01       	movw	r8, r28
    6dd4:	aa 24       	eor	r10, r10
    6dd6:	97 fc       	sbrc	r9, 7
    6dd8:	a0 94       	com	r10
    6dda:	ba 2c       	mov	r11, r10
    6ddc:	1f 01       	movw	r2, r30
    6dde:	70 ed       	ldi	r23, 0xD0	; 208
    6de0:	57 2e       	mov	r5, r23
    6de2:	56 0c       	add	r5, r6
    6de4:	a9 e0       	ldi	r26, 0x09	; 9
    6de6:	a5 15       	cp	r26, r5
    6de8:	70 f4       	brcc	.+28     	; 0x6e06 <strtol+0x176>
    6dea:	8f eb       	ldi	r24, 0xBF	; 191
    6dec:	86 0d       	add	r24, r6
    6dee:	8a 31       	cpi	r24, 0x1A	; 26
    6df0:	18 f4       	brcc	.+6      	; 0x6df8 <strtol+0x168>
    6df2:	99 ec       	ldi	r25, 0xC9	; 201
    6df4:	59 2e       	mov	r5, r25
    6df6:	06 c0       	rjmp	.+12     	; 0x6e04 <strtol+0x174>
    6df8:	8f e9       	ldi	r24, 0x9F	; 159
    6dfa:	86 0d       	add	r24, r6
    6dfc:	8a 31       	cpi	r24, 0x1A	; 26
    6dfe:	30 f5       	brcc	.+76     	; 0x6e4c <strtol+0x1bc>
    6e00:	89 ea       	ldi	r24, 0xA9	; 169
    6e02:	58 2e       	mov	r5, r24
    6e04:	56 0c       	add	r5, r6
    6e06:	85 2d       	mov	r24, r5
    6e08:	90 e0       	ldi	r25, 0x00	; 0
    6e0a:	8c 17       	cp	r24, r28
    6e0c:	9d 07       	cpc	r25, r29
    6e0e:	f4 f4       	brge	.+60     	; 0x6e4c <strtol+0x1bc>
    6e10:	67 fd       	sbrc	r22, 7
    6e12:	18 c0       	rjmp	.+48     	; 0x6e44 <strtol+0x1b4>
    6e14:	c2 16       	cp	r12, r18
    6e16:	d3 06       	cpc	r13, r19
    6e18:	e4 06       	cpc	r14, r20
    6e1a:	f5 06       	cpc	r15, r21
    6e1c:	80 f0       	brcs	.+32     	; 0x6e3e <strtol+0x1ae>
    6e1e:	c5 01       	movw	r24, r10
    6e20:	b4 01       	movw	r22, r8
    6e22:	0e 94 20 3a 	call	0x7440	; 0x7440 <__mulsi3>
    6e26:	9b 01       	movw	r18, r22
    6e28:	ac 01       	movw	r20, r24
    6e2a:	25 0d       	add	r18, r5
    6e2c:	31 1d       	adc	r19, r1
    6e2e:	41 1d       	adc	r20, r1
    6e30:	51 1d       	adc	r21, r1
    6e32:	21 30       	cpi	r18, 0x01	; 1
    6e34:	31 05       	cpc	r19, r1
    6e36:	41 05       	cpc	r20, r1
    6e38:	b0 e8       	ldi	r27, 0x80	; 128
    6e3a:	5b 07       	cpc	r21, r27
    6e3c:	10 f0       	brcs	.+4      	; 0x6e42 <strtol+0x1b2>
    6e3e:	6f ef       	ldi	r22, 0xFF	; 255
    6e40:	01 c0       	rjmp	.+2      	; 0x6e44 <strtol+0x1b4>
    6e42:	61 e0       	ldi	r22, 0x01	; 1
    6e44:	31 96       	adiw	r30, 0x01	; 1
    6e46:	d1 01       	movw	r26, r2
    6e48:	6c 90       	ld	r6, X
    6e4a:	c8 cf       	rjmp	.-112    	; 0x6ddc <strtol+0x14c>
    6e4c:	87 2d       	mov	r24, r7
    6e4e:	81 70       	andi	r24, 0x01	; 1
    6e50:	01 15       	cp	r16, r1
    6e52:	11 05       	cpc	r17, r1
    6e54:	71 f0       	breq	.+28     	; 0x6e72 <strtol+0x1e2>
    6e56:	66 23       	and	r22, r22
    6e58:	29 f0       	breq	.+10     	; 0x6e64 <strtol+0x1d4>
    6e5a:	31 97       	sbiw	r30, 0x01	; 1
    6e5c:	d8 01       	movw	r26, r16
    6e5e:	ed 93       	st	X+, r30
    6e60:	fc 93       	st	X, r31
    6e62:	07 c0       	rjmp	.+14     	; 0x6e72 <strtol+0x1e2>
    6e64:	71 fe       	sbrs	r7, 1
    6e66:	19 c0       	rjmp	.+50     	; 0x6e9a <strtol+0x20a>
    6e68:	32 97       	sbiw	r30, 0x02	; 2
    6e6a:	d8 01       	movw	r26, r16
    6e6c:	ed 93       	st	X+, r30
    6e6e:	fc 93       	st	X, r31
    6e70:	14 c0       	rjmp	.+40     	; 0x6e9a <strtol+0x20a>
    6e72:	67 ff       	sbrs	r22, 7
    6e74:	12 c0       	rjmp	.+36     	; 0x6e9a <strtol+0x20a>
    6e76:	88 23       	and	r24, r24
    6e78:	29 f0       	breq	.+10     	; 0x6e84 <strtol+0x1f4>
    6e7a:	20 e0       	ldi	r18, 0x00	; 0
    6e7c:	30 e0       	ldi	r19, 0x00	; 0
    6e7e:	40 e0       	ldi	r20, 0x00	; 0
    6e80:	50 e8       	ldi	r21, 0x80	; 128
    6e82:	04 c0       	rjmp	.+8      	; 0x6e8c <strtol+0x1fc>
    6e84:	2f ef       	ldi	r18, 0xFF	; 255
    6e86:	3f ef       	ldi	r19, 0xFF	; 255
    6e88:	4f ef       	ldi	r20, 0xFF	; 255
    6e8a:	5f e7       	ldi	r21, 0x7F	; 127
    6e8c:	82 e2       	ldi	r24, 0x22	; 34
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	80 93 d8 2e 	sts	0x2ED8, r24
    6e94:	90 93 d9 2e 	sts	0x2ED9, r25
    6e98:	16 c0       	rjmp	.+44     	; 0x6ec6 <strtol+0x236>
    6e9a:	88 23       	and	r24, r24
    6e9c:	41 f0       	breq	.+16     	; 0x6eae <strtol+0x21e>
    6e9e:	50 95       	com	r21
    6ea0:	40 95       	com	r20
    6ea2:	30 95       	com	r19
    6ea4:	21 95       	neg	r18
    6ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ea8:	4f 4f       	sbci	r20, 0xFF	; 255
    6eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    6eac:	0c c0       	rjmp	.+24     	; 0x6ec6 <strtol+0x236>
    6eae:	57 ff       	sbrs	r21, 7
    6eb0:	0a c0       	rjmp	.+20     	; 0x6ec6 <strtol+0x236>
    6eb2:	82 e2       	ldi	r24, 0x22	; 34
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	80 93 d8 2e 	sts	0x2ED8, r24
    6eba:	90 93 d9 2e 	sts	0x2ED9, r25
    6ebe:	2f ef       	ldi	r18, 0xFF	; 255
    6ec0:	3f ef       	ldi	r19, 0xFF	; 255
    6ec2:	4f ef       	ldi	r20, 0xFF	; 255
    6ec4:	5f e7       	ldi	r21, 0x7F	; 127
    6ec6:	b9 01       	movw	r22, r18
    6ec8:	ca 01       	movw	r24, r20
    6eca:	04 c0       	rjmp	.+8      	; 0x6ed4 <strtol+0x244>
    6ecc:	60 e0       	ldi	r22, 0x00	; 0
    6ece:	70 e0       	ldi	r23, 0x00	; 0
    6ed0:	80 e0       	ldi	r24, 0x00	; 0
    6ed2:	90 e0       	ldi	r25, 0x00	; 0
    6ed4:	df 91       	pop	r29
    6ed6:	cf 91       	pop	r28
    6ed8:	1f 91       	pop	r17
    6eda:	0f 91       	pop	r16
    6edc:	ff 90       	pop	r15
    6ede:	ef 90       	pop	r14
    6ee0:	df 90       	pop	r13
    6ee2:	cf 90       	pop	r12
    6ee4:	bf 90       	pop	r11
    6ee6:	af 90       	pop	r10
    6ee8:	9f 90       	pop	r9
    6eea:	8f 90       	pop	r8
    6eec:	7f 90       	pop	r7
    6eee:	6f 90       	pop	r6
    6ef0:	5f 90       	pop	r5
    6ef2:	3f 90       	pop	r3
    6ef4:	2f 90       	pop	r2
    6ef6:	08 95       	ret

00006ef8 <__ftoa_engine>:
    6ef8:	28 30       	cpi	r18, 0x08	; 8
    6efa:	08 f0       	brcs	.+2      	; 0x6efe <__ftoa_engine+0x6>
    6efc:	27 e0       	ldi	r18, 0x07	; 7
    6efe:	33 27       	eor	r19, r19
    6f00:	da 01       	movw	r26, r20
    6f02:	99 0f       	add	r25, r25
    6f04:	31 1d       	adc	r19, r1
    6f06:	87 fd       	sbrc	r24, 7
    6f08:	91 60       	ori	r25, 0x01	; 1
    6f0a:	00 96       	adiw	r24, 0x00	; 0
    6f0c:	61 05       	cpc	r22, r1
    6f0e:	71 05       	cpc	r23, r1
    6f10:	39 f4       	brne	.+14     	; 0x6f20 <__ftoa_engine+0x28>
    6f12:	32 60       	ori	r19, 0x02	; 2
    6f14:	2e 5f       	subi	r18, 0xFE	; 254
    6f16:	3d 93       	st	X+, r19
    6f18:	30 e3       	ldi	r19, 0x30	; 48
    6f1a:	2a 95       	dec	r18
    6f1c:	e1 f7       	brne	.-8      	; 0x6f16 <__ftoa_engine+0x1e>
    6f1e:	08 95       	ret
    6f20:	9f 3f       	cpi	r25, 0xFF	; 255
    6f22:	30 f0       	brcs	.+12     	; 0x6f30 <__ftoa_engine+0x38>
    6f24:	80 38       	cpi	r24, 0x80	; 128
    6f26:	71 05       	cpc	r23, r1
    6f28:	61 05       	cpc	r22, r1
    6f2a:	09 f0       	breq	.+2      	; 0x6f2e <__ftoa_engine+0x36>
    6f2c:	3c 5f       	subi	r19, 0xFC	; 252
    6f2e:	3c 5f       	subi	r19, 0xFC	; 252
    6f30:	3d 93       	st	X+, r19
    6f32:	91 30       	cpi	r25, 0x01	; 1
    6f34:	08 f0       	brcs	.+2      	; 0x6f38 <__ftoa_engine+0x40>
    6f36:	80 68       	ori	r24, 0x80	; 128
    6f38:	91 1d       	adc	r25, r1
    6f3a:	df 93       	push	r29
    6f3c:	cf 93       	push	r28
    6f3e:	1f 93       	push	r17
    6f40:	0f 93       	push	r16
    6f42:	ff 92       	push	r15
    6f44:	ef 92       	push	r14
    6f46:	19 2f       	mov	r17, r25
    6f48:	98 7f       	andi	r25, 0xF8	; 248
    6f4a:	96 95       	lsr	r25
    6f4c:	e9 2f       	mov	r30, r25
    6f4e:	96 95       	lsr	r25
    6f50:	96 95       	lsr	r25
    6f52:	e9 0f       	add	r30, r25
    6f54:	ff 27       	eor	r31, r31
    6f56:	ea 53       	subi	r30, 0x3A	; 58
    6f58:	fd 4f       	sbci	r31, 0xFD	; 253
    6f5a:	99 27       	eor	r25, r25
    6f5c:	33 27       	eor	r19, r19
    6f5e:	ee 24       	eor	r14, r14
    6f60:	ff 24       	eor	r15, r15
    6f62:	a7 01       	movw	r20, r14
    6f64:	e7 01       	movw	r28, r14
    6f66:	05 90       	lpm	r0, Z+
    6f68:	08 94       	sec
    6f6a:	07 94       	ror	r0
    6f6c:	28 f4       	brcc	.+10     	; 0x6f78 <__ftoa_engine+0x80>
    6f6e:	36 0f       	add	r19, r22
    6f70:	e7 1e       	adc	r14, r23
    6f72:	f8 1e       	adc	r15, r24
    6f74:	49 1f       	adc	r20, r25
    6f76:	51 1d       	adc	r21, r1
    6f78:	66 0f       	add	r22, r22
    6f7a:	77 1f       	adc	r23, r23
    6f7c:	88 1f       	adc	r24, r24
    6f7e:	99 1f       	adc	r25, r25
    6f80:	06 94       	lsr	r0
    6f82:	a1 f7       	brne	.-24     	; 0x6f6c <__ftoa_engine+0x74>
    6f84:	05 90       	lpm	r0, Z+
    6f86:	07 94       	ror	r0
    6f88:	28 f4       	brcc	.+10     	; 0x6f94 <__ftoa_engine+0x9c>
    6f8a:	e7 0e       	add	r14, r23
    6f8c:	f8 1e       	adc	r15, r24
    6f8e:	49 1f       	adc	r20, r25
    6f90:	56 1f       	adc	r21, r22
    6f92:	c1 1d       	adc	r28, r1
    6f94:	77 0f       	add	r23, r23
    6f96:	88 1f       	adc	r24, r24
    6f98:	99 1f       	adc	r25, r25
    6f9a:	66 1f       	adc	r22, r22
    6f9c:	06 94       	lsr	r0
    6f9e:	a1 f7       	brne	.-24     	; 0x6f88 <__ftoa_engine+0x90>
    6fa0:	05 90       	lpm	r0, Z+
    6fa2:	07 94       	ror	r0
    6fa4:	28 f4       	brcc	.+10     	; 0x6fb0 <__ftoa_engine+0xb8>
    6fa6:	f8 0e       	add	r15, r24
    6fa8:	49 1f       	adc	r20, r25
    6faa:	56 1f       	adc	r21, r22
    6fac:	c7 1f       	adc	r28, r23
    6fae:	d1 1d       	adc	r29, r1
    6fb0:	88 0f       	add	r24, r24
    6fb2:	99 1f       	adc	r25, r25
    6fb4:	66 1f       	adc	r22, r22
    6fb6:	77 1f       	adc	r23, r23
    6fb8:	06 94       	lsr	r0
    6fba:	a1 f7       	brne	.-24     	; 0x6fa4 <__ftoa_engine+0xac>
    6fbc:	05 90       	lpm	r0, Z+
    6fbe:	07 94       	ror	r0
    6fc0:	20 f4       	brcc	.+8      	; 0x6fca <__ftoa_engine+0xd2>
    6fc2:	49 0f       	add	r20, r25
    6fc4:	56 1f       	adc	r21, r22
    6fc6:	c7 1f       	adc	r28, r23
    6fc8:	d8 1f       	adc	r29, r24
    6fca:	99 0f       	add	r25, r25
    6fcc:	66 1f       	adc	r22, r22
    6fce:	77 1f       	adc	r23, r23
    6fd0:	88 1f       	adc	r24, r24
    6fd2:	06 94       	lsr	r0
    6fd4:	a9 f7       	brne	.-22     	; 0x6fc0 <__ftoa_engine+0xc8>
    6fd6:	84 91       	lpm	r24, Z
    6fd8:	10 95       	com	r17
    6fda:	17 70       	andi	r17, 0x07	; 7
    6fdc:	41 f0       	breq	.+16     	; 0x6fee <__ftoa_engine+0xf6>
    6fde:	d6 95       	lsr	r29
    6fe0:	c7 95       	ror	r28
    6fe2:	57 95       	ror	r21
    6fe4:	47 95       	ror	r20
    6fe6:	f7 94       	ror	r15
    6fe8:	e7 94       	ror	r14
    6fea:	1a 95       	dec	r17
    6fec:	c1 f7       	brne	.-16     	; 0x6fde <__ftoa_engine+0xe6>
    6fee:	ec e6       	ldi	r30, 0x6C	; 108
    6ff0:	f2 e0       	ldi	r31, 0x02	; 2
    6ff2:	68 94       	set
    6ff4:	15 90       	lpm	r1, Z+
    6ff6:	15 91       	lpm	r17, Z+
    6ff8:	35 91       	lpm	r19, Z+
    6ffa:	65 91       	lpm	r22, Z+
    6ffc:	95 91       	lpm	r25, Z+
    6ffe:	05 90       	lpm	r0, Z+
    7000:	7f e2       	ldi	r23, 0x2F	; 47
    7002:	73 95       	inc	r23
    7004:	e1 18       	sub	r14, r1
    7006:	f1 0a       	sbc	r15, r17
    7008:	43 0b       	sbc	r20, r19
    700a:	56 0b       	sbc	r21, r22
    700c:	c9 0b       	sbc	r28, r25
    700e:	d0 09       	sbc	r29, r0
    7010:	c0 f7       	brcc	.-16     	; 0x7002 <__ftoa_engine+0x10a>
    7012:	e1 0c       	add	r14, r1
    7014:	f1 1e       	adc	r15, r17
    7016:	43 1f       	adc	r20, r19
    7018:	56 1f       	adc	r21, r22
    701a:	c9 1f       	adc	r28, r25
    701c:	d0 1d       	adc	r29, r0
    701e:	7e f4       	brtc	.+30     	; 0x703e <__ftoa_engine+0x146>
    7020:	70 33       	cpi	r23, 0x30	; 48
    7022:	11 f4       	brne	.+4      	; 0x7028 <__ftoa_engine+0x130>
    7024:	8a 95       	dec	r24
    7026:	e6 cf       	rjmp	.-52     	; 0x6ff4 <__ftoa_engine+0xfc>
    7028:	e8 94       	clt
    702a:	01 50       	subi	r16, 0x01	; 1
    702c:	30 f0       	brcs	.+12     	; 0x703a <__ftoa_engine+0x142>
    702e:	08 0f       	add	r16, r24
    7030:	0a f4       	brpl	.+2      	; 0x7034 <__ftoa_engine+0x13c>
    7032:	00 27       	eor	r16, r16
    7034:	02 17       	cp	r16, r18
    7036:	08 f4       	brcc	.+2      	; 0x703a <__ftoa_engine+0x142>
    7038:	20 2f       	mov	r18, r16
    703a:	23 95       	inc	r18
    703c:	02 2f       	mov	r16, r18
    703e:	7a 33       	cpi	r23, 0x3A	; 58
    7040:	28 f0       	brcs	.+10     	; 0x704c <__ftoa_engine+0x154>
    7042:	79 e3       	ldi	r23, 0x39	; 57
    7044:	7d 93       	st	X+, r23
    7046:	2a 95       	dec	r18
    7048:	e9 f7       	brne	.-6      	; 0x7044 <__ftoa_engine+0x14c>
    704a:	10 c0       	rjmp	.+32     	; 0x706c <__ftoa_engine+0x174>
    704c:	7d 93       	st	X+, r23
    704e:	2a 95       	dec	r18
    7050:	89 f6       	brne	.-94     	; 0x6ff4 <__ftoa_engine+0xfc>
    7052:	06 94       	lsr	r0
    7054:	97 95       	ror	r25
    7056:	67 95       	ror	r22
    7058:	37 95       	ror	r19
    705a:	17 95       	ror	r17
    705c:	17 94       	ror	r1
    705e:	e1 18       	sub	r14, r1
    7060:	f1 0a       	sbc	r15, r17
    7062:	43 0b       	sbc	r20, r19
    7064:	56 0b       	sbc	r21, r22
    7066:	c9 0b       	sbc	r28, r25
    7068:	d0 09       	sbc	r29, r0
    706a:	98 f0       	brcs	.+38     	; 0x7092 <__ftoa_engine+0x19a>
    706c:	23 95       	inc	r18
    706e:	7e 91       	ld	r23, -X
    7070:	73 95       	inc	r23
    7072:	7a 33       	cpi	r23, 0x3A	; 58
    7074:	08 f0       	brcs	.+2      	; 0x7078 <__ftoa_engine+0x180>
    7076:	70 e3       	ldi	r23, 0x30	; 48
    7078:	7c 93       	st	X, r23
    707a:	20 13       	cpse	r18, r16
    707c:	b8 f7       	brcc	.-18     	; 0x706c <__ftoa_engine+0x174>
    707e:	7e 91       	ld	r23, -X
    7080:	70 61       	ori	r23, 0x10	; 16
    7082:	7d 93       	st	X+, r23
    7084:	30 f0       	brcs	.+12     	; 0x7092 <__ftoa_engine+0x19a>
    7086:	83 95       	inc	r24
    7088:	71 e3       	ldi	r23, 0x31	; 49
    708a:	7d 93       	st	X+, r23
    708c:	70 e3       	ldi	r23, 0x30	; 48
    708e:	2a 95       	dec	r18
    7090:	e1 f7       	brne	.-8      	; 0x708a <__ftoa_engine+0x192>
    7092:	11 24       	eor	r1, r1
    7094:	ef 90       	pop	r14
    7096:	ff 90       	pop	r15
    7098:	0f 91       	pop	r16
    709a:	1f 91       	pop	r17
    709c:	cf 91       	pop	r28
    709e:	df 91       	pop	r29
    70a0:	99 27       	eor	r25, r25
    70a2:	87 fd       	sbrc	r24, 7
    70a4:	90 95       	com	r25
    70a6:	08 95       	ret

000070a8 <isspace>:
    70a8:	91 11       	cpse	r25, r1
    70aa:	c7 c1       	rjmp	.+910    	; 0x743a <__ctype_isfalse>
    70ac:	80 32       	cpi	r24, 0x20	; 32
    70ae:	19 f0       	breq	.+6      	; 0x70b6 <isspace+0xe>
    70b0:	89 50       	subi	r24, 0x09	; 9
    70b2:	85 50       	subi	r24, 0x05	; 5
    70b4:	d0 f7       	brcc	.-12     	; 0x70aa <isspace+0x2>
    70b6:	08 95       	ret

000070b8 <strnlen_P>:
    70b8:	fc 01       	movw	r30, r24
    70ba:	05 90       	lpm	r0, Z+
    70bc:	61 50       	subi	r22, 0x01	; 1
    70be:	70 40       	sbci	r23, 0x00	; 0
    70c0:	01 10       	cpse	r0, r1
    70c2:	d8 f7       	brcc	.-10     	; 0x70ba <strnlen_P+0x2>
    70c4:	80 95       	com	r24
    70c6:	90 95       	com	r25
    70c8:	8e 0f       	add	r24, r30
    70ca:	9f 1f       	adc	r25, r31
    70cc:	08 95       	ret

000070ce <memcpy>:
    70ce:	fb 01       	movw	r30, r22
    70d0:	dc 01       	movw	r26, r24
    70d2:	02 c0       	rjmp	.+4      	; 0x70d8 <memcpy+0xa>
    70d4:	01 90       	ld	r0, Z+
    70d6:	0d 92       	st	X+, r0
    70d8:	41 50       	subi	r20, 0x01	; 1
    70da:	50 40       	sbci	r21, 0x00	; 0
    70dc:	d8 f7       	brcc	.-10     	; 0x70d4 <memcpy+0x6>
    70de:	08 95       	ret

000070e0 <strncmp>:
    70e0:	fb 01       	movw	r30, r22
    70e2:	dc 01       	movw	r26, r24
    70e4:	41 50       	subi	r20, 0x01	; 1
    70e6:	50 40       	sbci	r21, 0x00	; 0
    70e8:	30 f0       	brcs	.+12     	; 0x70f6 <strncmp+0x16>
    70ea:	8d 91       	ld	r24, X+
    70ec:	01 90       	ld	r0, Z+
    70ee:	80 19       	sub	r24, r0
    70f0:	19 f4       	brne	.+6      	; 0x70f8 <strncmp+0x18>
    70f2:	00 20       	and	r0, r0
    70f4:	b9 f7       	brne	.-18     	; 0x70e4 <strncmp+0x4>
    70f6:	88 1b       	sub	r24, r24
    70f8:	99 0b       	sbc	r25, r25
    70fa:	08 95       	ret

000070fc <strncpy>:
    70fc:	fb 01       	movw	r30, r22
    70fe:	dc 01       	movw	r26, r24
    7100:	41 50       	subi	r20, 0x01	; 1
    7102:	50 40       	sbci	r21, 0x00	; 0
    7104:	48 f0       	brcs	.+18     	; 0x7118 <strncpy+0x1c>
    7106:	01 90       	ld	r0, Z+
    7108:	0d 92       	st	X+, r0
    710a:	00 20       	and	r0, r0
    710c:	c9 f7       	brne	.-14     	; 0x7100 <strncpy+0x4>
    710e:	01 c0       	rjmp	.+2      	; 0x7112 <strncpy+0x16>
    7110:	1d 92       	st	X+, r1
    7112:	41 50       	subi	r20, 0x01	; 1
    7114:	50 40       	sbci	r21, 0x00	; 0
    7116:	e0 f7       	brcc	.-8      	; 0x7110 <strncpy+0x14>
    7118:	08 95       	ret

0000711a <strnlen>:
    711a:	fc 01       	movw	r30, r24
    711c:	61 50       	subi	r22, 0x01	; 1
    711e:	70 40       	sbci	r23, 0x00	; 0
    7120:	01 90       	ld	r0, Z+
    7122:	01 10       	cpse	r0, r1
    7124:	d8 f7       	brcc	.-10     	; 0x711c <strnlen+0x2>
    7126:	80 95       	com	r24
    7128:	90 95       	com	r25
    712a:	8e 0f       	add	r24, r30
    712c:	9f 1f       	adc	r25, r31
    712e:	08 95       	ret

00007130 <fprintf>:
    7130:	cf 93       	push	r28
    7132:	df 93       	push	r29
    7134:	cd b7       	in	r28, 0x3d	; 61
    7136:	de b7       	in	r29, 0x3e	; 62
    7138:	ae 01       	movw	r20, r28
    713a:	46 5f       	subi	r20, 0xF6	; 246
    713c:	5f 4f       	sbci	r21, 0xFF	; 255
    713e:	68 85       	ldd	r22, Y+8	; 0x08
    7140:	79 85       	ldd	r23, Y+9	; 0x09
    7142:	8e 81       	ldd	r24, Y+6	; 0x06
    7144:	9f 81       	ldd	r25, Y+7	; 0x07
    7146:	0e 94 68 30 	call	0x60d0	; 0x60d0 <vfprintf>
    714a:	df 91       	pop	r29
    714c:	cf 91       	pop	r28
    714e:	08 95       	ret

00007150 <fputc>:
    7150:	0f 93       	push	r16
    7152:	1f 93       	push	r17
    7154:	cf 93       	push	r28
    7156:	df 93       	push	r29
    7158:	18 2f       	mov	r17, r24
    715a:	09 2f       	mov	r16, r25
    715c:	eb 01       	movw	r28, r22
    715e:	8b 81       	ldd	r24, Y+3	; 0x03
    7160:	81 fd       	sbrc	r24, 1
    7162:	03 c0       	rjmp	.+6      	; 0x716a <fputc+0x1a>
    7164:	8f ef       	ldi	r24, 0xFF	; 255
    7166:	9f ef       	ldi	r25, 0xFF	; 255
    7168:	20 c0       	rjmp	.+64     	; 0x71aa <fputc+0x5a>
    716a:	82 ff       	sbrs	r24, 2
    716c:	10 c0       	rjmp	.+32     	; 0x718e <fputc+0x3e>
    716e:	4e 81       	ldd	r20, Y+6	; 0x06
    7170:	5f 81       	ldd	r21, Y+7	; 0x07
    7172:	2c 81       	ldd	r18, Y+4	; 0x04
    7174:	3d 81       	ldd	r19, Y+5	; 0x05
    7176:	42 17       	cp	r20, r18
    7178:	53 07       	cpc	r21, r19
    717a:	7c f4       	brge	.+30     	; 0x719a <fputc+0x4a>
    717c:	e8 81       	ld	r30, Y
    717e:	f9 81       	ldd	r31, Y+1	; 0x01
    7180:	9f 01       	movw	r18, r30
    7182:	2f 5f       	subi	r18, 0xFF	; 255
    7184:	3f 4f       	sbci	r19, 0xFF	; 255
    7186:	28 83       	st	Y, r18
    7188:	39 83       	std	Y+1, r19	; 0x01
    718a:	10 83       	st	Z, r17
    718c:	06 c0       	rjmp	.+12     	; 0x719a <fputc+0x4a>
    718e:	e8 85       	ldd	r30, Y+8	; 0x08
    7190:	f9 85       	ldd	r31, Y+9	; 0x09
    7192:	81 2f       	mov	r24, r17
    7194:	19 95       	eicall
    7196:	89 2b       	or	r24, r25
    7198:	29 f7       	brne	.-54     	; 0x7164 <fputc+0x14>
    719a:	2e 81       	ldd	r18, Y+6	; 0x06
    719c:	3f 81       	ldd	r19, Y+7	; 0x07
    719e:	2f 5f       	subi	r18, 0xFF	; 255
    71a0:	3f 4f       	sbci	r19, 0xFF	; 255
    71a2:	2e 83       	std	Y+6, r18	; 0x06
    71a4:	3f 83       	std	Y+7, r19	; 0x07
    71a6:	81 2f       	mov	r24, r17
    71a8:	90 2f       	mov	r25, r16
    71aa:	df 91       	pop	r29
    71ac:	cf 91       	pop	r28
    71ae:	1f 91       	pop	r17
    71b0:	0f 91       	pop	r16
    71b2:	08 95       	ret

000071b4 <fputs>:
    71b4:	ef 92       	push	r14
    71b6:	ff 92       	push	r15
    71b8:	0f 93       	push	r16
    71ba:	1f 93       	push	r17
    71bc:	cf 93       	push	r28
    71be:	df 93       	push	r29
    71c0:	8b 01       	movw	r16, r22
    71c2:	db 01       	movw	r26, r22
    71c4:	13 96       	adiw	r26, 0x03	; 3
    71c6:	2c 91       	ld	r18, X
    71c8:	21 ff       	sbrs	r18, 1
    71ca:	16 c0       	rjmp	.+44     	; 0x71f8 <fputs+0x44>
    71cc:	ec 01       	movw	r28, r24
    71ce:	e1 2c       	mov	r14, r1
    71d0:	f1 2c       	mov	r15, r1
    71d2:	89 91       	ld	r24, Y+
    71d4:	88 23       	and	r24, r24
    71d6:	71 f0       	breq	.+28     	; 0x71f4 <fputs+0x40>
    71d8:	d8 01       	movw	r26, r16
    71da:	18 96       	adiw	r26, 0x08	; 8
    71dc:	ed 91       	ld	r30, X+
    71de:	fc 91       	ld	r31, X
    71e0:	19 97       	sbiw	r26, 0x09	; 9
    71e2:	b8 01       	movw	r22, r16
    71e4:	19 95       	eicall
    71e6:	89 2b       	or	r24, r25
    71e8:	a1 f3       	breq	.-24     	; 0x71d2 <fputs+0x1e>
    71ea:	ee 24       	eor	r14, r14
    71ec:	ea 94       	dec	r14
    71ee:	ff 24       	eor	r15, r15
    71f0:	fa 94       	dec	r15
    71f2:	ef cf       	rjmp	.-34     	; 0x71d2 <fputs+0x1e>
    71f4:	c7 01       	movw	r24, r14
    71f6:	02 c0       	rjmp	.+4      	; 0x71fc <fputs+0x48>
    71f8:	8f ef       	ldi	r24, 0xFF	; 255
    71fa:	9f ef       	ldi	r25, 0xFF	; 255
    71fc:	df 91       	pop	r29
    71fe:	cf 91       	pop	r28
    7200:	1f 91       	pop	r17
    7202:	0f 91       	pop	r16
    7204:	ff 90       	pop	r15
    7206:	ef 90       	pop	r14
    7208:	08 95       	ret

0000720a <snprintf>:
    720a:	0f 93       	push	r16
    720c:	1f 93       	push	r17
    720e:	cf 93       	push	r28
    7210:	df 93       	push	r29
    7212:	cd b7       	in	r28, 0x3d	; 61
    7214:	de b7       	in	r29, 0x3e	; 62
    7216:	2e 97       	sbiw	r28, 0x0e	; 14
    7218:	cd bf       	out	0x3d, r28	; 61
    721a:	de bf       	out	0x3e, r29	; 62
    721c:	0e 89       	ldd	r16, Y+22	; 0x16
    721e:	1f 89       	ldd	r17, Y+23	; 0x17
    7220:	88 8d       	ldd	r24, Y+24	; 0x18
    7222:	99 8d       	ldd	r25, Y+25	; 0x19
    7224:	26 e0       	ldi	r18, 0x06	; 6
    7226:	2c 83       	std	Y+4, r18	; 0x04
    7228:	09 83       	std	Y+1, r16	; 0x01
    722a:	1a 83       	std	Y+2, r17	; 0x02
    722c:	97 ff       	sbrs	r25, 7
    722e:	02 c0       	rjmp	.+4      	; 0x7234 <snprintf+0x2a>
    7230:	80 e0       	ldi	r24, 0x00	; 0
    7232:	90 e8       	ldi	r25, 0x80	; 128
    7234:	01 97       	sbiw	r24, 0x01	; 1
    7236:	8d 83       	std	Y+5, r24	; 0x05
    7238:	9e 83       	std	Y+6, r25	; 0x06
    723a:	ae 01       	movw	r20, r28
    723c:	44 5e       	subi	r20, 0xE4	; 228
    723e:	5f 4f       	sbci	r21, 0xFF	; 255
    7240:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7242:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7244:	ce 01       	movw	r24, r28
    7246:	01 96       	adiw	r24, 0x01	; 1
    7248:	0e 94 68 30 	call	0x60d0	; 0x60d0 <vfprintf>
    724c:	4d 81       	ldd	r20, Y+5	; 0x05
    724e:	5e 81       	ldd	r21, Y+6	; 0x06
    7250:	57 fd       	sbrc	r21, 7
    7252:	0a c0       	rjmp	.+20     	; 0x7268 <snprintf+0x5e>
    7254:	2f 81       	ldd	r18, Y+7	; 0x07
    7256:	38 85       	ldd	r19, Y+8	; 0x08
    7258:	42 17       	cp	r20, r18
    725a:	53 07       	cpc	r21, r19
    725c:	0c f4       	brge	.+2      	; 0x7260 <snprintf+0x56>
    725e:	9a 01       	movw	r18, r20
    7260:	f8 01       	movw	r30, r16
    7262:	e2 0f       	add	r30, r18
    7264:	f3 1f       	adc	r31, r19
    7266:	10 82       	st	Z, r1
    7268:	2e 96       	adiw	r28, 0x0e	; 14
    726a:	cd bf       	out	0x3d, r28	; 61
    726c:	de bf       	out	0x3e, r29	; 62
    726e:	df 91       	pop	r29
    7270:	cf 91       	pop	r28
    7272:	1f 91       	pop	r17
    7274:	0f 91       	pop	r16
    7276:	08 95       	ret

00007278 <sprintf>:
    7278:	0f 93       	push	r16
    727a:	1f 93       	push	r17
    727c:	cf 93       	push	r28
    727e:	df 93       	push	r29
    7280:	cd b7       	in	r28, 0x3d	; 61
    7282:	de b7       	in	r29, 0x3e	; 62
    7284:	2e 97       	sbiw	r28, 0x0e	; 14
    7286:	cd bf       	out	0x3d, r28	; 61
    7288:	de bf       	out	0x3e, r29	; 62
    728a:	0e 89       	ldd	r16, Y+22	; 0x16
    728c:	1f 89       	ldd	r17, Y+23	; 0x17
    728e:	86 e0       	ldi	r24, 0x06	; 6
    7290:	8c 83       	std	Y+4, r24	; 0x04
    7292:	09 83       	std	Y+1, r16	; 0x01
    7294:	1a 83       	std	Y+2, r17	; 0x02
    7296:	8f ef       	ldi	r24, 0xFF	; 255
    7298:	9f e7       	ldi	r25, 0x7F	; 127
    729a:	8d 83       	std	Y+5, r24	; 0x05
    729c:	9e 83       	std	Y+6, r25	; 0x06
    729e:	ae 01       	movw	r20, r28
    72a0:	46 5e       	subi	r20, 0xE6	; 230
    72a2:	5f 4f       	sbci	r21, 0xFF	; 255
    72a4:	68 8d       	ldd	r22, Y+24	; 0x18
    72a6:	79 8d       	ldd	r23, Y+25	; 0x19
    72a8:	ce 01       	movw	r24, r28
    72aa:	01 96       	adiw	r24, 0x01	; 1
    72ac:	0e 94 68 30 	call	0x60d0	; 0x60d0 <vfprintf>
    72b0:	ef 81       	ldd	r30, Y+7	; 0x07
    72b2:	f8 85       	ldd	r31, Y+8	; 0x08
    72b4:	e0 0f       	add	r30, r16
    72b6:	f1 1f       	adc	r31, r17
    72b8:	10 82       	st	Z, r1
    72ba:	2e 96       	adiw	r28, 0x0e	; 14
    72bc:	cd bf       	out	0x3d, r28	; 61
    72be:	de bf       	out	0x3e, r29	; 62
    72c0:	df 91       	pop	r29
    72c2:	cf 91       	pop	r28
    72c4:	1f 91       	pop	r17
    72c6:	0f 91       	pop	r16
    72c8:	08 95       	ret

000072ca <__ultoa_invert>:
    72ca:	fa 01       	movw	r30, r20
    72cc:	aa 27       	eor	r26, r26
    72ce:	28 30       	cpi	r18, 0x08	; 8
    72d0:	51 f1       	breq	.+84     	; 0x7326 <__ultoa_invert+0x5c>
    72d2:	20 31       	cpi	r18, 0x10	; 16
    72d4:	81 f1       	breq	.+96     	; 0x7336 <__ultoa_invert+0x6c>
    72d6:	e8 94       	clt
    72d8:	6f 93       	push	r22
    72da:	6e 7f       	andi	r22, 0xFE	; 254
    72dc:	6e 5f       	subi	r22, 0xFE	; 254
    72de:	7f 4f       	sbci	r23, 0xFF	; 255
    72e0:	8f 4f       	sbci	r24, 0xFF	; 255
    72e2:	9f 4f       	sbci	r25, 0xFF	; 255
    72e4:	af 4f       	sbci	r26, 0xFF	; 255
    72e6:	b1 e0       	ldi	r27, 0x01	; 1
    72e8:	3e d0       	rcall	.+124    	; 0x7366 <__ultoa_invert+0x9c>
    72ea:	b4 e0       	ldi	r27, 0x04	; 4
    72ec:	3c d0       	rcall	.+120    	; 0x7366 <__ultoa_invert+0x9c>
    72ee:	67 0f       	add	r22, r23
    72f0:	78 1f       	adc	r23, r24
    72f2:	89 1f       	adc	r24, r25
    72f4:	9a 1f       	adc	r25, r26
    72f6:	a1 1d       	adc	r26, r1
    72f8:	68 0f       	add	r22, r24
    72fa:	79 1f       	adc	r23, r25
    72fc:	8a 1f       	adc	r24, r26
    72fe:	91 1d       	adc	r25, r1
    7300:	a1 1d       	adc	r26, r1
    7302:	6a 0f       	add	r22, r26
    7304:	71 1d       	adc	r23, r1
    7306:	81 1d       	adc	r24, r1
    7308:	91 1d       	adc	r25, r1
    730a:	a1 1d       	adc	r26, r1
    730c:	20 d0       	rcall	.+64     	; 0x734e <__ultoa_invert+0x84>
    730e:	09 f4       	brne	.+2      	; 0x7312 <__ultoa_invert+0x48>
    7310:	68 94       	set
    7312:	3f 91       	pop	r19
    7314:	2a e0       	ldi	r18, 0x0A	; 10
    7316:	26 9f       	mul	r18, r22
    7318:	11 24       	eor	r1, r1
    731a:	30 19       	sub	r19, r0
    731c:	30 5d       	subi	r19, 0xD0	; 208
    731e:	31 93       	st	Z+, r19
    7320:	de f6       	brtc	.-74     	; 0x72d8 <__ultoa_invert+0xe>
    7322:	cf 01       	movw	r24, r30
    7324:	08 95       	ret
    7326:	46 2f       	mov	r20, r22
    7328:	47 70       	andi	r20, 0x07	; 7
    732a:	40 5d       	subi	r20, 0xD0	; 208
    732c:	41 93       	st	Z+, r20
    732e:	b3 e0       	ldi	r27, 0x03	; 3
    7330:	0f d0       	rcall	.+30     	; 0x7350 <__ultoa_invert+0x86>
    7332:	c9 f7       	brne	.-14     	; 0x7326 <__ultoa_invert+0x5c>
    7334:	f6 cf       	rjmp	.-20     	; 0x7322 <__ultoa_invert+0x58>
    7336:	46 2f       	mov	r20, r22
    7338:	4f 70       	andi	r20, 0x0F	; 15
    733a:	40 5d       	subi	r20, 0xD0	; 208
    733c:	4a 33       	cpi	r20, 0x3A	; 58
    733e:	18 f0       	brcs	.+6      	; 0x7346 <__ultoa_invert+0x7c>
    7340:	49 5d       	subi	r20, 0xD9	; 217
    7342:	31 fd       	sbrc	r19, 1
    7344:	40 52       	subi	r20, 0x20	; 32
    7346:	41 93       	st	Z+, r20
    7348:	02 d0       	rcall	.+4      	; 0x734e <__ultoa_invert+0x84>
    734a:	a9 f7       	brne	.-22     	; 0x7336 <__ultoa_invert+0x6c>
    734c:	ea cf       	rjmp	.-44     	; 0x7322 <__ultoa_invert+0x58>
    734e:	b4 e0       	ldi	r27, 0x04	; 4
    7350:	a6 95       	lsr	r26
    7352:	97 95       	ror	r25
    7354:	87 95       	ror	r24
    7356:	77 95       	ror	r23
    7358:	67 95       	ror	r22
    735a:	ba 95       	dec	r27
    735c:	c9 f7       	brne	.-14     	; 0x7350 <__ultoa_invert+0x86>
    735e:	00 97       	sbiw	r24, 0x00	; 0
    7360:	61 05       	cpc	r22, r1
    7362:	71 05       	cpc	r23, r1
    7364:	08 95       	ret
    7366:	9b 01       	movw	r18, r22
    7368:	ac 01       	movw	r20, r24
    736a:	0a 2e       	mov	r0, r26
    736c:	06 94       	lsr	r0
    736e:	57 95       	ror	r21
    7370:	47 95       	ror	r20
    7372:	37 95       	ror	r19
    7374:	27 95       	ror	r18
    7376:	ba 95       	dec	r27
    7378:	c9 f7       	brne	.-14     	; 0x736c <__ultoa_invert+0xa2>
    737a:	62 0f       	add	r22, r18
    737c:	73 1f       	adc	r23, r19
    737e:	84 1f       	adc	r24, r20
    7380:	95 1f       	adc	r25, r21
    7382:	a0 1d       	adc	r26, r0
    7384:	08 95       	ret

00007386 <__eerd_block_x256a3u>:
    7386:	e0 ec       	ldi	r30, 0xC0	; 192
    7388:	f1 e0       	ldi	r31, 0x01	; 1
    738a:	a7 85       	ldd	r26, Z+15	; 0x0f
    738c:	a7 fd       	sbrc	r26, 7
    738e:	fd cf       	rjmp	.-6      	; 0x738a <__eerd_block_x256a3u+0x4>
    7390:	a4 85       	ldd	r26, Z+12	; 0x0c
    7392:	a8 60       	ori	r26, 0x08	; 8
    7394:	a4 87       	std	Z+12, r26	; 0x0c
    7396:	60 50       	subi	r22, 0x00	; 0
    7398:	70 4f       	sbci	r23, 0xF0	; 240
    739a:	0c 94 67 38 	jmp	0x70ce	; 0x70ce <memcpy>

0000739e <__eeupd_block_x256a3u>:
    739e:	dc 01       	movw	r26, r24
    73a0:	a4 0f       	add	r26, r20
    73a2:	b5 1f       	adc	r27, r21
    73a4:	41 50       	subi	r20, 0x01	; 1
    73a6:	50 40       	sbci	r21, 0x00	; 0
    73a8:	48 f0       	brcs	.+18     	; 0x73bc <__eeupd_block_x256a3u+0x1e>
    73aa:	cb 01       	movw	r24, r22
    73ac:	84 0f       	add	r24, r20
    73ae:	95 1f       	adc	r25, r21
    73b0:	2e 91       	ld	r18, -X
    73b2:	0e 94 e0 39 	call	0x73c0	; 0x73c0 <__eeupd_r18_x256a3u>
    73b6:	41 50       	subi	r20, 0x01	; 1
    73b8:	50 40       	sbci	r21, 0x00	; 0
    73ba:	d0 f7       	brcc	.-12     	; 0x73b0 <__eeupd_block_x256a3u+0x12>
    73bc:	08 95       	ret

000073be <__eeupd_byte_x256a3u>:
    73be:	26 2f       	mov	r18, r22

000073c0 <__eeupd_r18_x256a3u>:
    73c0:	0e 94 11 3a 	call	0x7422	; 0x7422 <eeprom_mapen>
    73c4:	00 80       	ld	r0, Z
    73c6:	02 16       	cp	r0, r18
    73c8:	19 f0       	breq	.+6      	; 0x73d0 <__eeupd_r18_x256a3u+0x10>
    73ca:	0e 94 eb 39 	call	0x73d6	; 0x73d6 <__eewr_r18_x256a3u>
    73ce:	01 97       	sbiw	r24, 0x01	; 1
    73d0:	01 97       	sbiw	r24, 0x01	; 1
    73d2:	08 95       	ret

000073d4 <__eewr_byte_x256a3u>:
    73d4:	26 2f       	mov	r18, r22

000073d6 <__eewr_r18_x256a3u>:
    73d6:	e0 ec       	ldi	r30, 0xC0	; 192
    73d8:	f1 e0       	ldi	r31, 0x01	; 1
    73da:	37 85       	ldd	r19, Z+15	; 0x0f
    73dc:	37 fd       	sbrc	r19, 7
    73de:	fd cf       	rjmp	.-6      	; 0x73da <__eewr_r18_x256a3u+0x4>
    73e0:	34 85       	ldd	r19, Z+12	; 0x0c
    73e2:	37 7f       	andi	r19, 0xF7	; 247
    73e4:	34 87       	std	Z+12, r19	; 0x0c
    73e6:	37 85       	ldd	r19, Z+15	; 0x0f
    73e8:	31 ff       	sbrs	r19, 1
    73ea:	09 c0       	rjmp	.+18     	; 0x73fe <__eewr_r18_x256a3u+0x28>
    73ec:	36 e3       	ldi	r19, 0x36	; 54
    73ee:	32 87       	std	Z+10, r19	; 0x0a
    73f0:	38 ed       	ldi	r19, 0xD8	; 216
    73f2:	34 bf       	out	0x34, r19	; 52
    73f4:	31 e0       	ldi	r19, 0x01	; 1
    73f6:	33 87       	std	Z+11, r19	; 0x0b
    73f8:	37 85       	ldd	r19, Z+15	; 0x0f
    73fa:	37 fd       	sbrc	r19, 7
    73fc:	fd cf       	rjmp	.-6      	; 0x73f8 <__eewr_r18_x256a3u+0x22>
    73fe:	33 e3       	ldi	r19, 0x33	; 51
    7400:	32 87       	std	Z+10, r19	; 0x0a
    7402:	80 83       	st	Z, r24
    7404:	91 83       	std	Z+1, r25	; 0x01
    7406:	12 82       	std	Z+2, r1	; 0x02
    7408:	24 83       	std	Z+4, r18	; 0x04
    740a:	25 e3       	ldi	r18, 0x35	; 53
    740c:	22 87       	std	Z+10, r18	; 0x0a
    740e:	28 ed       	ldi	r18, 0xD8	; 216
    7410:	31 e0       	ldi	r19, 0x01	; 1
    7412:	24 bf       	out	0x34, r18	; 52
    7414:	33 87       	std	Z+11, r19	; 0x0b
    7416:	01 96       	adiw	r24, 0x01	; 1
    7418:	08 95       	ret

0000741a <__eerd_byte_x256a3b>:
    741a:	03 d0       	rcall	.+6      	; 0x7422 <eeprom_mapen>
    741c:	80 81       	ld	r24, Z
    741e:	99 27       	eor	r25, r25
    7420:	08 95       	ret

00007422 <eeprom_mapen>:
    7422:	e0 ec       	ldi	r30, 0xC0	; 192
    7424:	f1 e0       	ldi	r31, 0x01	; 1
    7426:	37 85       	ldd	r19, Z+15	; 0x0f
    7428:	37 fd       	sbrc	r19, 7
    742a:	fd cf       	rjmp	.-6      	; 0x7426 <eeprom_mapen+0x4>
    742c:	34 85       	ldd	r19, Z+12	; 0x0c
    742e:	38 60       	ori	r19, 0x08	; 8
    7430:	34 87       	std	Z+12, r19	; 0x0c
    7432:	fc 01       	movw	r30, r24
    7434:	e0 50       	subi	r30, 0x00	; 0
    7436:	f0 4f       	sbci	r31, 0xF0	; 240
    7438:	08 95       	ret

0000743a <__ctype_isfalse>:
    743a:	99 27       	eor	r25, r25
    743c:	88 27       	eor	r24, r24

0000743e <__ctype_istrue>:
    743e:	08 95       	ret

00007440 <__mulsi3>:
    7440:	db 01       	movw	r26, r22
    7442:	8f 93       	push	r24
    7444:	9f 93       	push	r25
    7446:	0e 94 24 34 	call	0x6848	; 0x6848 <__muluhisi3>
    744a:	bf 91       	pop	r27
    744c:	af 91       	pop	r26
    744e:	a2 9f       	mul	r26, r18
    7450:	80 0d       	add	r24, r0
    7452:	91 1d       	adc	r25, r1
    7454:	a3 9f       	mul	r26, r19
    7456:	90 0d       	add	r25, r0
    7458:	b2 9f       	mul	r27, r18
    745a:	90 0d       	add	r25, r0
    745c:	11 24       	eor	r1, r1
    745e:	08 95       	ret

00007460 <__udivmodsi4>:
    7460:	a1 e2       	ldi	r26, 0x21	; 33
    7462:	1a 2e       	mov	r1, r26
    7464:	aa 1b       	sub	r26, r26
    7466:	bb 1b       	sub	r27, r27
    7468:	fd 01       	movw	r30, r26
    746a:	0d c0       	rjmp	.+26     	; 0x7486 <__udivmodsi4_ep>

0000746c <__udivmodsi4_loop>:
    746c:	aa 1f       	adc	r26, r26
    746e:	bb 1f       	adc	r27, r27
    7470:	ee 1f       	adc	r30, r30
    7472:	ff 1f       	adc	r31, r31
    7474:	a2 17       	cp	r26, r18
    7476:	b3 07       	cpc	r27, r19
    7478:	e4 07       	cpc	r30, r20
    747a:	f5 07       	cpc	r31, r21
    747c:	20 f0       	brcs	.+8      	; 0x7486 <__udivmodsi4_ep>
    747e:	a2 1b       	sub	r26, r18
    7480:	b3 0b       	sbc	r27, r19
    7482:	e4 0b       	sbc	r30, r20
    7484:	f5 0b       	sbc	r31, r21

00007486 <__udivmodsi4_ep>:
    7486:	66 1f       	adc	r22, r22
    7488:	77 1f       	adc	r23, r23
    748a:	88 1f       	adc	r24, r24
    748c:	99 1f       	adc	r25, r25
    748e:	1a 94       	dec	r1
    7490:	69 f7       	brne	.-38     	; 0x746c <__udivmodsi4_loop>
    7492:	60 95       	com	r22
    7494:	70 95       	com	r23
    7496:	80 95       	com	r24
    7498:	90 95       	com	r25
    749a:	9b 01       	movw	r18, r22
    749c:	ac 01       	movw	r20, r24
    749e:	bd 01       	movw	r22, r26
    74a0:	cf 01       	movw	r24, r30
    74a2:	08 95       	ret

000074a4 <_exit>:
    74a4:	f8 94       	cli

000074a6 <__stop_program>:
    74a6:	ff cf       	rjmp	.-2      	; 0x74a6 <__stop_program>
