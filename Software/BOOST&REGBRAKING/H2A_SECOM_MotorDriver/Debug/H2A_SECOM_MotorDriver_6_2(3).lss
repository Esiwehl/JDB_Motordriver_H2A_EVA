
H2A_SECOM_MotorDriver_6_2(3).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000007a0  00802000  00007650  000076e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006f8  008027a0  008027a0  00007e84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007e84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007ee0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00007f20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bc58  00000000  00000000  000083a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046c2  00000000  00000000  00013ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003800  00000000  00000000  000186ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001314  00000000  00000000  0001bebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006031  00000000  00000000  0001d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005db3  00000000  00000000  00023201  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  00028fb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__ctors_end>
       4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
       8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
       c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      10:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      14:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      18:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      1c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      20:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      24:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      28:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      2c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      30:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      34:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      38:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      3c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      40:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      44:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      48:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      4c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      50:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      54:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      58:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      5c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      60:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      64:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      68:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      6c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      70:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      74:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      78:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      7c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      80:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      84:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      88:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      8c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      90:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      94:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      98:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      9c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      ac:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      b0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      b4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      b8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      bc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      c0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      c4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      c8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      cc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      d0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      d4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      d8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      dc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      e0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      e4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      e8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      ec:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      f0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      f4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      f8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      fc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     100:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     104:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     108:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     10c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     110:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     114:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     118:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     11c:	0c 94 11 25 	jmp	0x4a22	; 0x4a22 <__vector_71>
     120:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     124:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     128:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     12c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     130:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     134:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     138:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     13c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     140:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     144:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     148:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     14c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     150:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     154:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     158:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     15c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     160:	0c 94 fd 2d 	jmp	0x5bfa	; 0x5bfa <__vector_88>
     164:	0c 94 25 2e 	jmp	0x5c4a	; 0x5c4a <__vector_89>
     168:	0c 94 56 2e 	jmp	0x5cac	; 0x5cac <__vector_90>
     16c:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <__vector_91>
     170:	0c 94 9b 2e 	jmp	0x5d36	; 0x5d36 <__vector_92>
     174:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     178:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     17c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     180:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     184:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     188:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     18c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     190:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     194:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     198:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     19c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1a0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1a4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1a8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1ac:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1b0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1b4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1b8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1bc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1c0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1c4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1c8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1cc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1d0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1d4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1d8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1dc:	0c 94 cc 2e 	jmp	0x5d98	; 0x5d98 <__vector_119>
     1e0:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <__vector_120>
     1e4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1e8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1ec:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1f0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1f4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1f8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <GetDiodeStatus>
     200:	0c 94 5e 0b 	jmp	0x16bc	; 0x16bc <GetSupercapPower>
     204:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <GetSupercapCurrent>
     208:	0c 94 64 2c 	jmp	0x58c8	; 0x58c8 <AcceptDataGPSTime>
     20c:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <GetFuelCellEnergy>
     210:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <GetTimeSnapshot>
     214:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <GetFuelCellVoltage>
     218:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <GetWheelDistance>
     21c:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <GetWheelSpeedH2A>
     220:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <GetFuelCellPower>
     224:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <GetSupercapEnergy>
     228:	0c 94 d0 0e 	jmp	0x1da0	; 0x1da0 <GetWheelSpeedEVA>
     22c:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <GetMotorCurrent>
     230:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <GetCruiseControlButtonStatus>
     234:	0c 94 5d 2c 	jmp	0x58ba	; 0x58ba <AcceptDataGPSSpeed>
     238:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <GetFullPowerButtonStatus>
     23c:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <CoreAnalogTakeSnapshot485>
     240:	0c 94 cd 2d 	jmp	0x5b9a	; 0x5b9a <Ctrl_putchar>
     244:	0c 94 4f 2c 	jmp	0x589e	; 0x589e <AcceptDataGPSPosition>
     248:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <GetFuelCellCurrent>
     24c:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <GetMotorVoltage>
     250:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <GetSupercapVoltage>
     254:	0c 94 56 2c 	jmp	0x58ac	; 0x58ac <AcceptDataGPSDirection>
     258:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <GetMotorDriverTemp>

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	cd bf       	out	0x3d, r28	; 61
     264:	df e5       	ldi	r29, 0x5F	; 95
     266:	de bf       	out	0x3e, r29	; 62
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	0c bf       	out	0x3c, r16	; 60

0000026c <__do_copy_data>:
     26c:	17 e2       	ldi	r17, 0x27	; 39
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	e0 e5       	ldi	r30, 0x50	; 80
     274:	f6 e7       	ldi	r31, 0x76	; 118
     276:	00 e0       	ldi	r16, 0x00	; 0
     278:	0b bf       	out	0x3b, r16	; 59
     27a:	02 c0       	rjmp	.+4      	; 0x280 <__do_copy_data+0x14>
     27c:	07 90       	elpm	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	a0 3a       	cpi	r26, 0xA0	; 160
     282:	b1 07       	cpc	r27, r17
     284:	d9 f7       	brne	.-10     	; 0x27c <__do_copy_data+0x10>

00000286 <__do_clear_bss>:
     286:	2e e2       	ldi	r18, 0x2E	; 46
     288:	a0 ea       	ldi	r26, 0xA0	; 160
     28a:	b7 e2       	ldi	r27, 0x27	; 39
     28c:	01 c0       	rjmp	.+2      	; 0x290 <.do_clear_bss_start>

0000028e <.do_clear_bss_loop>:
     28e:	1d 92       	st	X+, r1

00000290 <.do_clear_bss_start>:
     290:	a8 39       	cpi	r26, 0x98	; 152
     292:	b2 07       	cpc	r27, r18
     294:	e1 f7       	brne	.-8      	; 0x28e <.do_clear_bss_loop>
     296:	0e 94 84 05 	call	0xb08	; 0xb08 <main>
     29a:	0c 94 26 3b 	jmp	0x764c	; 0x764c <_exit>

0000029e <__bad_interrupt>:
     29e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a2 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     2a2:	0f 93       	push	r16
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	1f 92       	push	r1
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	2f b7       	in	r18, 0x3f	; 63
     2b0:	29 83       	std	Y+1, r18	; 0x01
     2b2:	f8 94       	cli
     2b4:	1b be       	out	0x3b, r1	; 59
     2b6:	fc 01       	movw	r30, r24
     2b8:	08 ed       	ldi	r16, 0xD8	; 216
     2ba:	04 bf       	out	0x34, r16	; 52
     2bc:	60 83       	st	Z, r22
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	8f bf       	out	0x3f, r24	; 63
     2c2:	0f 90       	pop	r0
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	0f 91       	pop	r16
     2ca:	08 95       	ret

000002cc <CLKSYS_XOSC_Config>:
     2cc:	61 11       	cpse	r22, r1
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <CLKSYS_XOSC_Config+0x8>
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <CLKSYS_XOSC_Config+0xa>
     2d4:	90 e2       	ldi	r25, 0x20	; 32
     2d6:	84 2b       	or	r24, r20
     2d8:	89 2b       	or	r24, r25
     2da:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     2de:	08 95       	ret

000002e0 <CLKSYS_PLL_Config>:
     2e0:	6f 71       	andi	r22, 0x1F	; 31
     2e2:	86 2b       	or	r24, r22
     2e4:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     2e8:	08 95       	ret

000002ea <CLKSYS_Disable>:
     2ea:	e0 e5       	ldi	r30, 0x50	; 80
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	90 81       	ld	r25, Z
     2f0:	28 2f       	mov	r18, r24
     2f2:	20 95       	com	r18
     2f4:	92 23       	and	r25, r18
     2f6:	90 83       	st	Z, r25
     2f8:	90 81       	ld	r25, Z
     2fa:	89 23       	and	r24, r25
     2fc:	08 95       	ret

000002fe <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     306:	00 e4       	ldi	r16, 0x40	; 64
     308:	10 e0       	ldi	r17, 0x00	; 0
     30a:	f8 01       	movw	r30, r16
     30c:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     30e:	68 7f       	andi	r22, 0xF8	; 248
     310:	68 2b       	or	r22, r24
     312:	80 e4       	ldi	r24, 0x40	; 64
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 51 01 	call	0x2a2	; 0x2a2 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     31a:	f8 01       	movw	r30, r16
     31c:	80 81       	ld	r24, Z
	return clkCtrl;
}
     31e:	8c 23       	and	r24, r28
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	08 95       	ret

00000328 <InitSlave>:
 *
 */
void freeSlave (){

	free(sOwnSensor);
	free(sWantedSensor);
     328:	80 93 fb 27 	sts	0x27FB, r24	; 0x8027fb <sMyAdress>
     32c:	90 93 fc 27 	sts	0x27FC, r25	; 0x8027fc <sMyAdress+0x1>
     330:	10 92 f9 27 	sts	0x27F9, r1	; 0x8027f9 <sNumOwnSensor>
     334:	10 92 fa 27 	sts	0x27FA, r1	; 0x8027fa <sNumOwnSensor+0x1>
     338:	10 92 f7 27 	sts	0x27F7, r1	; 0x8027f7 <sNumWantedSensor>
     33c:	10 92 f8 27 	sts	0x27F8, r1	; 0x8027f8 <sNumWantedSensor+0x1>
     340:	10 92 f5 27 	sts	0x27F5, r1	; 0x8027f5 <sOwnSensor>
     344:	10 92 f6 27 	sts	0x27F6, r1	; 0x8027f6 <sOwnSensor+0x1>
     348:	10 92 f3 27 	sts	0x27F3, r1	; 0x8027f3 <sWantedSensor>
     34c:	10 92 f4 27 	sts	0x27F4, r1	; 0x8027f4 <sWantedSensor+0x1>
     350:	08 95       	ret

00000352 <AddSlaveOwnSensor>:
     352:	8f 92       	push	r8
     354:	9f 92       	push	r9
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	4c 01       	movw	r8, r24
     36c:	6b 01       	movw	r12, r22
     36e:	5a 01       	movw	r10, r20
     370:	79 01       	movw	r14, r18
     372:	00 91 f9 27 	lds	r16, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     376:	10 91 fa 27 	lds	r17, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	8b e0       	ldi	r24, 0x0B	; 11
     380:	80 9f       	mul	r24, r16
     382:	e0 01       	movw	r28, r0
     384:	81 9f       	mul	r24, r17
     386:	d0 0d       	add	r29, r0
     388:	11 24       	eor	r1, r1
     38a:	be 01       	movw	r22, r28
     38c:	80 91 f5 27 	lds	r24, 0x27F5	; 0x8027f5 <sOwnSensor>
     390:	90 91 f6 27 	lds	r25, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     394:	0e 94 ff 34 	call	0x69fe	; 0x69fe <realloc>
     398:	80 93 f5 27 	sts	0x27F5, r24	; 0x8027f5 <sOwnSensor>
     39c:	90 93 f6 27 	sts	0x27F6, r25	; 0x8027f6 <sOwnSensor+0x1>
     3a0:	00 97       	sbiw	r24, 0x00	; 0
     3a2:	b9 f0       	breq	.+46     	; 0x3d2 <AddSlaveOwnSensor+0x80>
     3a4:	2b 97       	sbiw	r28, 0x0b	; 11
     3a6:	c8 0f       	add	r28, r24
     3a8:	d9 1f       	adc	r29, r25
     3aa:	44 e0       	ldi	r20, 0x04	; 4
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	b4 01       	movw	r22, r8
     3b0:	ce 01       	movw	r24, r28
     3b2:	0e 94 32 37 	call	0x6e64	; 0x6e64 <strncpy>
     3b6:	1c 82       	std	Y+4, r1	; 0x04
     3b8:	a9 86       	std	Y+9, r10	; 0x09
     3ba:	ba 86       	std	Y+10, r11	; 0x0a
     3bc:	cf 82       	std	Y+7, r12	; 0x07
     3be:	d8 86       	std	Y+8, r13	; 0x08
     3c0:	ed 82       	std	Y+5, r14	; 0x05
     3c2:	fe 82       	std	Y+6, r15	; 0x06
     3c4:	00 93 f9 27 	sts	0x27F9, r16	; 0x8027f9 <sNumOwnSensor>
     3c8:	10 93 fa 27 	sts	0x27FA, r17	; 0x8027fa <sNumOwnSensor+0x1>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <AddSlaveOwnSensor+0x84>
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	df 90       	pop	r13
     3e4:	cf 90       	pop	r12
     3e6:	bf 90       	pop	r11
     3e8:	af 90       	pop	r10
     3ea:	9f 90       	pop	r9
     3ec:	8f 90       	pop	r8
     3ee:	08 95       	ret

000003f0 <AddWantedSensor>:
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	5c 01       	movw	r10, r24
     406:	6b 01       	movw	r12, r22
     408:	e0 90 f7 27 	lds	r14, 0x27F7	; 0x8027f7 <sNumWantedSensor>
     40c:	f0 90 f8 27 	lds	r15, 0x27F8	; 0x8027f8 <sNumWantedSensor+0x1>
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	e8 1a       	sub	r14, r24
     414:	f8 0a       	sbc	r15, r24
     416:	87 01       	movw	r16, r14
     418:	00 0f       	add	r16, r16
     41a:	11 1f       	adc	r17, r17
     41c:	00 0f       	add	r16, r16
     41e:	11 1f       	adc	r17, r17
     420:	00 0f       	add	r16, r16
     422:	11 1f       	adc	r17, r17
     424:	0e 19       	sub	r16, r14
     426:	1f 09       	sbc	r17, r15
     428:	b8 01       	movw	r22, r16
     42a:	80 91 f3 27 	lds	r24, 0x27F3	; 0x8027f3 <sWantedSensor>
     42e:	90 91 f4 27 	lds	r25, 0x27F4	; 0x8027f4 <sWantedSensor+0x1>
     432:	0e 94 ff 34 	call	0x69fe	; 0x69fe <realloc>
     436:	80 93 f3 27 	sts	0x27F3, r24	; 0x8027f3 <sWantedSensor>
     43a:	90 93 f4 27 	sts	0x27F4, r25	; 0x8027f4 <sWantedSensor+0x1>
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	a9 f0       	breq	.+42     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     442:	07 50       	subi	r16, 0x07	; 7
     444:	11 09       	sbc	r17, r1
     446:	ec 01       	movw	r28, r24
     448:	c0 0f       	add	r28, r16
     44a:	d1 1f       	adc	r29, r17
     44c:	44 e0       	ldi	r20, 0x04	; 4
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	b5 01       	movw	r22, r10
     452:	ce 01       	movw	r24, r28
     454:	0e 94 32 37 	call	0x6e64	; 0x6e64 <strncpy>
     458:	1c 82       	std	Y+4, r1	; 0x04
     45a:	cd 82       	std	Y+5, r12	; 0x05
     45c:	de 82       	std	Y+6, r13	; 0x06
     45e:	e0 92 f7 27 	sts	0x27F7, r14	; 0x8027f7 <sNumWantedSensor>
     462:	f0 92 f8 27 	sts	0x27F8, r15	; 0x8027f8 <sNumWantedSensor+0x1>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	cf 90       	pop	r12
     480:	bf 90       	pop	r11
     482:	af 90       	pop	r10
     484:	08 95       	ret

00000486 <HandleSnapshot>:
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
    }
}

//update value of sensors of sensors of a slave
void HandleSnapshot(){
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     48e:	80 91 f9 27 	lds	r24, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     492:	90 91 fa 27 	lds	r25, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     496:	18 16       	cp	r1, r24
     498:	19 06       	cpc	r1, r25
     49a:	e4 f4       	brge	.+56     	; 0x4d4 <HandleSnapshot+0x4e>
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	10 e0       	ldi	r17, 0x00	; 0
     4a0:	c0 e0       	ldi	r28, 0x00	; 0
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
     4a4:	80 91 f5 27 	lds	r24, 0x27F5	; 0x8027f5 <sOwnSensor>
     4a8:	90 91 f6 27 	lds	r25, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     4ac:	80 0f       	add	r24, r16
     4ae:	91 1f       	adc	r25, r17
     4b0:	dc 01       	movw	r26, r24
     4b2:	19 96       	adiw	r26, 0x09	; 9
     4b4:	ed 91       	ld	r30, X+
     4b6:	fc 91       	ld	r31, X
     4b8:	1a 97       	sbiw	r26, 0x0a	; 10
     4ba:	30 97       	sbiw	r30, 0x00	; 0
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <HandleSnapshot+0x3a>
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
     4be:	19 95       	eicall
//update value of sensors of sensors of a slave
void HandleSnapshot(){

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     4c0:	21 96       	adiw	r28, 0x01	; 1
     4c2:	05 5f       	subi	r16, 0xF5	; 245
     4c4:	1f 4f       	sbci	r17, 0xFF	; 255
     4c6:	80 91 f9 27 	lds	r24, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     4ca:	90 91 fa 27 	lds	r25, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     4ce:	c8 17       	cp	r28, r24
     4d0:	d9 07       	cpc	r29, r25
     4d2:	44 f3       	brlt	.-48     	; 0x4a4 <HandleSnapshot+0x1e>
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
	}
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	08 95       	ret

000004de <HandleCmdS>:
 *
 * \param 1 response      :  the buffer where the response is saved
 * \param 2 dataFromMaster: the received message from the master
 *
 */
static void HandleCmdS(char* response, char* dataFromMaster){
     4de:	9f 92       	push	r9
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	25 97       	sbiw	r28, 0x05	; 5
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	d8 2e       	mov	r13, r24
     500:	c9 2e       	mov	r12, r25
     502:	8b 01       	movw	r16, r22
	int position=0, err =0;
	char adr[SUBADR_LENG];

	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
     504:	68 5f       	subi	r22, 0xF8	; 248
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	44 e0       	ldi	r20, 0x04	; 4
     50a:	50 e0       	ldi	r21, 0x00	; 0
     50c:	ce 01       	movw	r24, r28
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	0e 94 32 37 	call	0x6e64	; 0x6e64 <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     514:	1d 82       	std	Y+5, r1	; 0x05

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){
     516:	44 e0       	ldi	r20, 0x04	; 4
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	64 ec       	ldi	r22, 0xC4	; 196
     51c:	70 e2       	ldi	r23, 0x20	; 32
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	0e 94 24 37 	call	0x6e48	; 0x6e48 <strncmp>
     526:	89 2b       	or	r24, r25
     528:	41 f0       	breq	.+16     	; 0x53a <HandleCmdS+0x5c>

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     52a:	40 91 f7 27 	lds	r20, 0x27F7	; 0x8027f7 <sNumWantedSensor>
     52e:	50 91 f8 27 	lds	r21, 0x27F8	; 0x8027f8 <sNumWantedSensor+0x1>
     532:	14 16       	cp	r1, r20
     534:	15 06       	cpc	r1, r21
     536:	24 f0       	brlt	.+8      	; 0x540 <HandleCmdS+0x62>
     538:	80 c0       	rjmp	.+256    	; 0x63a <HandleCmdS+0x15c>
	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){

		HandleSnapshot();
     53a:	0e 94 43 02 	call	0x486	; 0x486 <HandleSnapshot>
     53e:	99 c0       	rjmp	.+306    	; 0x672 <HandleCmdS+0x194>
static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
		if(/*!strncmp(adressSensor,sWantedSensor[i].subadress,SUBADR_LENG-1)*/ FindSensorOK( adressSensor, sWantedSensor[i].subadress )){
     540:	a0 90 f3 27 	lds	r10, 0x27F3	; 0x8027f3 <sWantedSensor>
     544:	b0 90 f4 27 	lds	r11, 0x27F4	; 0x8027f4 <sWantedSensor+0x1>
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     548:	39 81       	ldd	r19, Y+1	; 0x01
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     54a:	6a 81       	ldd	r22, Y+2	; 0x02
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     54c:	7b 81       	ldd	r23, Y+3	; 0x03
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     54e:	9c 80       	ldd	r9, Y+4	; 0x04
     550:	f5 01       	movw	r30, r10
     552:	ee 24       	eor	r14, r14
     554:	ea 94       	dec	r14
     556:	fe 2c       	mov	r15, r14
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	df 01       	movw	r26, r30
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     55e:	20 81       	ld	r18, Z
     560:	2a 32       	cpi	r18, 0x2A	; 42
     562:	11 f0       	breq	.+4      	; 0x568 <HandleCmdS+0x8a>
     564:	23 13       	cpse	r18, r19
     566:	17 c0       	rjmp	.+46     	; 0x596 <HandleCmdS+0xb8>
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     568:	11 96       	adiw	r26, 0x01	; 1
     56a:	2c 91       	ld	r18, X
     56c:	11 97       	sbiw	r26, 0x01	; 1
     56e:	2a 32       	cpi	r18, 0x2A	; 42
     570:	11 f0       	breq	.+4      	; 0x576 <HandleCmdS+0x98>
     572:	26 13       	cpse	r18, r22
     574:	10 c0       	rjmp	.+32     	; 0x596 <HandleCmdS+0xb8>
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     576:	12 96       	adiw	r26, 0x02	; 2
     578:	2c 91       	ld	r18, X
     57a:	12 97       	sbiw	r26, 0x02	; 2
     57c:	2a 32       	cpi	r18, 0x2A	; 42
     57e:	11 f0       	breq	.+4      	; 0x584 <HandleCmdS+0xa6>
     580:	27 13       	cpse	r18, r23
     582:	09 c0       	rjmp	.+18     	; 0x596 <HandleCmdS+0xb8>
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     584:	13 96       	adiw	r26, 0x03	; 3
     586:	2c 91       	ld	r18, X
     588:	2a 32       	cpi	r18, 0x2A	; 42
     58a:	21 f0       	breq	.+8      	; 0x594 <HandleCmdS+0xb6>
     58c:	29 11       	cpse	r18, r9
     58e:	03 c0       	rjmp	.+6      	; 0x596 <HandleCmdS+0xb8>
     590:	7c 01       	movw	r14, r24
     592:	01 c0       	rjmp	.+2      	; 0x596 <HandleCmdS+0xb8>
     594:	7c 01       	movw	r14, r24

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     596:	01 96       	adiw	r24, 0x01	; 1
     598:	37 96       	adiw	r30, 0x07	; 7
     59a:	48 17       	cp	r20, r24
     59c:	59 07       	cpc	r21, r25
     59e:	f1 f6       	brne	.-68     	; 0x55c <HandleCmdS+0x7e>

		HandleSnapshot();
	}
	else{
		position = FindWantedSensorIndex(adr);
		if(position != -1){
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	e8 16       	cp	r14, r24
     5a4:	f8 06       	cpc	r15, r24
     5a6:	09 f4       	brne	.+2      	; 0x5aa <HandleCmdS+0xcc>
     5a8:	48 c0       	rjmp	.+144    	; 0x63a <HandleCmdS+0x15c>
			err = (*sWantedSensor[position].fpSetData)(adr,dataFromMaster + SETDATA_POS);
     5aa:	b8 01       	movw	r22, r16
     5ac:	64 5f       	subi	r22, 0xF4	; 244
     5ae:	7f 4f       	sbci	r23, 0xFF	; 255
     5b0:	c7 01       	movw	r24, r14
     5b2:	88 0f       	add	r24, r24
     5b4:	99 1f       	adc	r25, r25
     5b6:	88 0f       	add	r24, r24
     5b8:	99 1f       	adc	r25, r25
     5ba:	88 0f       	add	r24, r24
     5bc:	99 1f       	adc	r25, r25
     5be:	8e 19       	sub	r24, r14
     5c0:	9f 09       	sbc	r25, r15
     5c2:	f5 01       	movw	r30, r10
     5c4:	e8 0f       	add	r30, r24
     5c6:	f9 1f       	adc	r31, r25
     5c8:	05 80       	ldd	r0, Z+5	; 0x05
     5ca:	f6 81       	ldd	r31, Z+6	; 0x06
     5cc:	e0 2d       	mov	r30, r0
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	19 95       	eicall

			if(err==0){
     5d4:	89 2b       	or	r24, r25
     5d6:	a1 f4       	brne	.+40     	; 0x600 <HandleCmdS+0x122>
				snprintf(response,MAXDATA-1,"$%03dSOK",sMyAdress);
     5d8:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     5dc:	8f 93       	push	r24
     5de:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     5e2:	8f 93       	push	r24
     5e4:	89 ec       	ldi	r24, 0xC9	; 201
     5e6:	90 e2       	ldi	r25, 0x20	; 32
     5e8:	9f 93       	push	r25
     5ea:	8f 93       	push	r24
     5ec:	1f 92       	push	r1
     5ee:	8d e4       	ldi	r24, 0x4D	; 77
     5f0:	8f 93       	push	r24
     5f2:	cf 92       	push	r12
     5f4:	df 92       	push	r13
     5f6:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	39 c0       	rjmp	.+114    	; 0x672 <HandleCmdS+0x194>
			}
			else{
				snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault'",sMyAdress);
     600:	ed 2d       	mov	r30, r13
     602:	fc 2d       	mov	r31, r12
     604:	df 01       	movw	r26, r30
     606:	0d 90       	ld	r0, X+
     608:	00 20       	and	r0, r0
     60a:	e9 f7       	brne	.-6      	; 0x606 <HandleCmdS+0x128>
     60c:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     610:	8f 93       	push	r24
     612:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     616:	8f 93       	push	r24
     618:	82 ed       	ldi	r24, 0xD2	; 210
     61a:	90 e2       	ldi	r25, 0x20	; 32
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	ea 1b       	sub	r30, r26
     622:	fb 0b       	sbc	r31, r27
     624:	e1 5b       	subi	r30, 0xB1	; 177
     626:	ff 4f       	sbci	r31, 0xFF	; 255
     628:	ff 93       	push	r31
     62a:	ef 93       	push	r30
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
     634:	cd bf       	out	0x3d, r28	; 61
     636:	de bf       	out	0x3e, r29	; 62
     638:	1c c0       	rjmp	.+56     	; 0x672 <HandleCmdS+0x194>
			}
		}
		else{
			snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault wrong sensor'",sMyAdress);
     63a:	ed 2d       	mov	r30, r13
     63c:	fc 2d       	mov	r31, r12
     63e:	df 01       	movw	r26, r30
     640:	0d 90       	ld	r0, X+
     642:	00 20       	and	r0, r0
     644:	e9 f7       	brne	.-6      	; 0x640 <HandleCmdS+0x162>
     646:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     64a:	8f 93       	push	r24
     64c:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     650:	8f 93       	push	r24
     652:	81 ee       	ldi	r24, 0xE1	; 225
     654:	90 e2       	ldi	r25, 0x20	; 32
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	ea 1b       	sub	r30, r26
     65c:	fb 0b       	sbc	r31, r27
     65e:	e1 5b       	subi	r30, 0xB1	; 177
     660:	ff 4f       	sbci	r31, 0xFF	; 255
     662:	ff 93       	push	r31
     664:	ef 93       	push	r30
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	de bf       	out	0x3e, r29	; 62
		}
	}
}
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	cd bf       	out	0x3d, r28	; 61
     676:	de bf       	out	0x3e, r29	; 62
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	ff 90       	pop	r15
     682:	ef 90       	pop	r14
     684:	df 90       	pop	r13
     686:	cf 90       	pop	r12
     688:	bf 90       	pop	r11
     68a:	af 90       	pop	r10
     68c:	9f 90       	pop	r9
     68e:	08 95       	ret

00000690 <SendLineRS485>:
 *
 * \param 1 data : data from the slave
 *
 */

void SendLineRS485(char* data){
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	ec 01       	movw	r28, r24

	while(*data != '\0'){
     696:	88 81       	ld	r24, Y
     698:	88 23       	and	r24, r24
     69a:	31 f0       	breq	.+12     	; 0x6a8 <SendLineRS485+0x18>
     69c:	21 96       	adiw	r28, 0x01	; 1
		WriteByte_Comm485(*data++);
     69e:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <WriteByte_Comm485>
 *
 */

void SendLineRS485(char* data){

	while(*data != '\0'){
     6a2:	89 91       	ld	r24, Y+
     6a4:	81 11       	cpse	r24, r1
     6a6:	fb cf       	rjmp	.-10     	; 0x69e <SendLineRS485+0xe>
		WriteByte_Comm485(*data++);
	}
	// add \r\n to the sentence
	WriteByte_Comm485(0x0D);
     6a8:	8d e0       	ldi	r24, 0x0D	; 13
     6aa:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <WriteByte_Comm485>
	WriteByte_Comm485(0x0A);
     6ae:	8a e0       	ldi	r24, 0x0A	; 10
     6b0:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <WriteByte_Comm485>
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <ReadLineRS45>:
 *
 * \param 1 data : data from the master
 *
 */

uint8_t ReadLineRS45( char *Data ){
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	ec 01       	movw	r28, r24
	static char getKarakter;
	uint8_t len, returnValue = 0;
     6c2:	10 e0       	ldi	r17, 0x00	; 0

	while( CanRead_Comm485() != 0 && returnValue == 0 ){
     6c4:	20 c0       	rjmp	.+64     	; 0x706 <ReadLineRS45+0x4c>
		getKarakter = (char )ReadByte_Comm485();
     6c6:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <ReadByte_Comm485>
		if( getKarakter == SLAVESENTENCE || getKarakter == MASTERSENTENCE ){
     6ca:	9d ed       	ldi	r25, 0xDD	; 221
     6cc:	98 0f       	add	r25, r24
     6ce:	92 30       	cpi	r25, 0x02	; 2
     6d0:	18 f4       	brcc	.+6      	; 0x6d8 <ReadLineRS45+0x1e>
			Data[0] = getKarakter;
     6d2:	88 83       	st	Y, r24
			Data[1] = '\0';
     6d4:	19 82       	std	Y+1, r1	; 0x01
     6d6:	17 c0       	rjmp	.+46     	; 0x706 <ReadLineRS45+0x4c>
		}
		else if( Data[0] == SLAVESENTENCE || Data[0] == MASTERSENTENCE ){
     6d8:	98 81       	ld	r25, Y
     6da:	93 52       	subi	r25, 0x23	; 35
     6dc:	92 30       	cpi	r25, 0x02	; 2
     6de:	98 f4       	brcc	.+38     	; 0x706 <ReadLineRS45+0x4c>
			len = strlen(Data);
     6e0:	fe 01       	movw	r30, r28
     6e2:	01 90       	ld	r0, Z+
     6e4:	00 20       	and	r0, r0
     6e6:	e9 f7       	brne	.-6      	; 0x6e2 <ReadLineRS45+0x28>
     6e8:	31 97       	sbiw	r30, 0x01	; 1
     6ea:	ec 1b       	sub	r30, r28
     6ec:	fd 0b       	sbc	r31, r29
			if(len < MAXCHARACTERSSENTENCE - 1) {
     6ee:	e2 35       	cpi	r30, 0x52	; 82
     6f0:	50 f4       	brcc	.+20     	; 0x706 <ReadLineRS45+0x4c>
				Data[len] = getKarakter;
     6f2:	9e 01       	movw	r18, r28
     6f4:	2e 0f       	add	r18, r30
     6f6:	31 1d       	adc	r19, r1
     6f8:	f9 01       	movw	r30, r18
     6fa:	80 83       	st	Z, r24
				Data[len + 1] = '\0';
     6fc:	11 82       	std	Z+1, r1	; 0x01
 *
 */

uint8_t ReadLineRS45( char *Data ){
	static char getKarakter;
	uint8_t len, returnValue = 0;
     6fe:	11 e0       	ldi	r17, 0x01	; 1
     700:	8a 30       	cpi	r24, 0x0A	; 10
     702:	09 f0       	breq	.+2      	; 0x706 <ReadLineRS45+0x4c>
     704:	10 e0       	ldi	r17, 0x00	; 0

	while( CanRead_Comm485() != 0 && returnValue == 0 ){
     706:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <CanRead_Comm485>
     70a:	88 23       	and	r24, r24
     70c:	11 f0       	breq	.+4      	; 0x712 <ReadLineRS45+0x58>
     70e:	11 23       	and	r17, r17
     710:	d1 f2       	breq	.-76     	; 0x6c6 <ReadLineRS45+0xc>
				}
			}			
		}
	}
	return returnValue;
}
     712:	81 2f       	mov	r24, r17
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	08 95       	ret

0000071c <ScanDataInSlave>:
 * \return 0: if there is a fault in the adress of the slave
 *            or the checksum of the master or the message is not from the master
 *            else
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
     71c:	4f 92       	push	r4
     71e:	5f 92       	push	r5
     720:	6f 92       	push	r6
     722:	7f 92       	push	r7
     724:	8f 92       	push	r8
     726:	9f 92       	push	r9
     728:	af 92       	push	r10
     72a:	bf 92       	push	r11
     72c:	cf 92       	push	r12
     72e:	df 92       	push	r13
     730:	ef 92       	push	r14
     732:	ff 92       	push	r15
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	25 97       	sbiw	r28, 0x05	; 5
     742:	cd bf       	out	0x3d, r28	; 61
     744:	de bf       	out	0x3e, r29	; 62
     746:	8c 01       	movw	r16, r24
 * \return adress of the slave in integer
 *
 */
static int GetAdressFromMaster (char* dataMaster){

   return strtol(dataMaster + 1,NULL,10);
     748:	4a e0       	ldi	r20, 0x0A	; 10
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <strtol>
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     756:	f8 01       	movw	r30, r16
     758:	20 81       	ld	r18, Z
     75a:	23 32       	cpi	r18, 0x23	; 35
     75c:	09 f0       	breq	.+2      	; 0x760 <ScanDataInSlave+0x44>
     75e:	bd c1       	rjmp	.+890    	; 0xada <ScanDataInSlave+0x3be>
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
	int err = 0;
    int adress = GetAdressFromMaster(dataFromMaster);
    char cmd = dataFromMaster[COMMAND];
     760:	84 81       	ldd	r24, Z+4	; 0x04
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     762:	e0 90 fb 27 	lds	r14, 0x27FB	; 0x8027fb <sMyAdress>
     766:	f0 90 fc 27 	lds	r15, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     76a:	e6 16       	cp	r14, r22
     76c:	f7 06       	cpc	r15, r23
     76e:	19 f0       	breq	.+6      	; 0x776 <ScanDataInSlave+0x5a>
     770:	67 2b       	or	r22, r23
     772:	21 f0       	breq	.+8      	; 0x77c <ScanDataInSlave+0x60>
     774:	b4 c1       	rjmp	.+872    	; 0xade <ScanDataInSlave+0x3c2>
       err = 0;
    }
    else{
	 if(adress == BROADCAST) {
     776:	e1 14       	cp	r14, r1
     778:	f1 04       	cpc	r15, r1
     77a:	49 f4       	brne	.+18     	; 0x78e <ScanDataInSlave+0x72>
		if(cmd =='S'){
     77c:	83 35       	cpi	r24, 0x53	; 83
     77e:	09 f0       	breq	.+2      	; 0x782 <ScanDataInSlave+0x66>
     780:	a8 c1       	rjmp	.+848    	; 0xad2 <ScanDataInSlave+0x3b6>
			HandleCmdS(responseSlave,dataFromMaster);
     782:	b8 01       	movw	r22, r16
     784:	80 ea       	ldi	r24, 0xA0	; 160
     786:	97 e2       	ldi	r25, 0x27	; 39
     788:	0e 94 6f 02 	call	0x4de	; 0x4de <HandleCmdS>
     78c:	a2 c1       	rjmp	.+836    	; 0xad2 <ScanDataInSlave+0x3b6>
		}
		err =1;
	 }
	 else{

      switch(cmd){
     78e:	89 34       	cpi	r24, 0x49	; 73
     790:	01 f1       	breq	.+64     	; 0x7d2 <ScanDataInSlave+0xb6>
     792:	30 f4       	brcc	.+12     	; 0x7a0 <ScanDataInSlave+0x84>
     794:	81 34       	cpi	r24, 0x41	; 65
     796:	59 f0       	breq	.+22     	; 0x7ae <ScanDataInSlave+0x92>
     798:	87 34       	cpi	r24, 0x47	; 71
     79a:	09 f4       	brne	.+2      	; 0x79e <ScanDataInSlave+0x82>
     79c:	c5 c0       	rjmp	.+394    	; 0x928 <ScanDataInSlave+0x20c>
     79e:	66 c1       	rjmp	.+716    	; 0xa6c <ScanDataInSlave+0x350>
     7a0:	83 35       	cpi	r24, 0x53	; 83
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <ScanDataInSlave+0x8a>
     7a4:	5e c1       	rjmp	.+700    	; 0xa62 <ScanDataInSlave+0x346>
     7a6:	87 35       	cpi	r24, 0x57	; 87
     7a8:	09 f4       	brne	.+2      	; 0x7ac <ScanDataInSlave+0x90>
     7aa:	69 c0       	rjmp	.+210    	; 0x87e <ScanDataInSlave+0x162>
     7ac:	5f c1       	rjmp	.+702    	; 0xa6c <ScanDataInSlave+0x350>
 * \param 1 response : the buffer where the response is saved
 *
 */
static void HandleCmdA(char* response){

    snprintf(response,MAXDATA-1,"$%03dA'Slave available'",sMyAdress);
     7ae:	ff 92       	push	r15
     7b0:	ef 92       	push	r14
     7b2:	8d ef       	ldi	r24, 0xFD	; 253
     7b4:	90 e2       	ldi	r25, 0x20	; 32
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	1f 92       	push	r1
     7bc:	8d e4       	ldi	r24, 0x4D	; 77
     7be:	8f 93       	push	r24
     7c0:	80 ea       	ldi	r24, 0xA0	; 160
     7c2:	97 e2       	ldi	r25, 0x27	; 39
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	4d c1       	rjmp	.+666    	; 0xa6c <ScanDataInSlave+0x350>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     7d2:	4a e0       	ldi	r20, 0x0A	; 10
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	c8 01       	movw	r24, r16
     7dc:	05 96       	adiw	r24, 0x05	; 5
     7de:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <strtol>
static void HandleCmdI(char* response, char* dataFromMaster){
	static int index =0;

	index = GetIndexFromMaster(dataFromMaster);

    if(index > 0 && index <= sNumOwnSensor) {
     7e2:	16 16       	cp	r1, r22
     7e4:	17 06       	cpc	r1, r23
     7e6:	b4 f5       	brge	.+108    	; 0x854 <ScanDataInSlave+0x138>
     7e8:	40 91 f9 27 	lds	r20, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     7ec:	50 91 fa 27 	lds	r21, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     7f0:	46 17       	cp	r20, r22
     7f2:	57 07       	cpc	r21, r23
     7f4:	7c f1       	brlt	.+94     	; 0x854 <ScanDataInSlave+0x138>
        snprintf(response,MAXDATA-1,"$%03dI%02d%s,%02d'Sensor %d'",sMyAdress,index,sOwnSensor[index-1].subadress,sOwnSensor[index-1].measure_interval,index);
     7f6:	2b e0       	ldi	r18, 0x0B	; 11
     7f8:	26 9f       	mul	r18, r22
     7fa:	f0 01       	movw	r30, r0
     7fc:	27 9f       	mul	r18, r23
     7fe:	f0 0d       	add	r31, r0
     800:	11 24       	eor	r1, r1
     802:	9f 01       	movw	r18, r30
     804:	2b 50       	subi	r18, 0x0B	; 11
     806:	31 09       	sbc	r19, r1
     808:	e0 91 f5 27 	lds	r30, 0x27F5	; 0x8027f5 <sOwnSensor>
     80c:	f0 91 f6 27 	lds	r31, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     810:	e2 0f       	add	r30, r18
     812:	f3 1f       	adc	r31, r19
     814:	7f 93       	push	r23
     816:	6f 93       	push	r22
     818:	26 81       	ldd	r18, Z+6	; 0x06
     81a:	2f 93       	push	r18
     81c:	25 81       	ldd	r18, Z+5	; 0x05
     81e:	2f 93       	push	r18
     820:	ff 93       	push	r31
     822:	ef 93       	push	r30
     824:	7f 93       	push	r23
     826:	6f 93       	push	r22
     828:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     82c:	8f 93       	push	r24
     82e:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     832:	8f 93       	push	r24
     834:	85 e1       	ldi	r24, 0x15	; 21
     836:	91 e2       	ldi	r25, 0x21	; 33
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	1f 92       	push	r1
     83e:	8d e4       	ldi	r24, 0x4D	; 77
     840:	8f 93       	push	r24
     842:	80 ea       	ldi	r24, 0xA0	; 160
     844:	97 e2       	ldi	r25, 0x27	; 39
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	de bf       	out	0x3e, r29	; 62
     852:	0c c1       	rjmp	.+536    	; 0xa6c <ScanDataInSlave+0x350>
    }
// the slave sends 0000,0000 if all the sensors that exists are already given
    else{
        sprintf(response,"$%03dI%02d0000,0000'No sensor'", sMyAdress,index);
     854:	7f 93       	push	r23
     856:	6f 93       	push	r22
     858:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     85c:	8f 93       	push	r24
     85e:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     862:	8f 93       	push	r24
     864:	82 e3       	ldi	r24, 0x32	; 50
     866:	91 e2       	ldi	r25, 0x21	; 33
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	80 ea       	ldi	r24, 0xA0	; 160
     86e:	97 e2       	ldi	r25, 0x27	; 39
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	0e 94 06 38 	call	0x700c	; 0x700c <sprintf>
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	f7 c0       	rjmp	.+494    	; 0xa6c <ScanDataInSlave+0x350>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     87e:	4a e0       	ldi	r20, 0x0A	; 10
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	c8 01       	movw	r24, r16
     888:	05 96       	adiw	r24, 0x05	; 5
     88a:	0e 94 e4 35 	call	0x6bc8	; 0x6bc8 <strtol>
     88e:	9b 01       	movw	r18, r22
 */
static void HandleCmdW(char* response, char* dataFromMaster){

    int index = GetIndexFromMaster(dataFromMaster);

    if(index > 0 && index <= sNumWantedSensor){
     890:	16 16       	cp	r1, r22
     892:	17 06       	cpc	r1, r23
     894:	8c f5       	brge	.+98     	; 0x8f8 <ScanDataInSlave+0x1dc>
     896:	40 91 f7 27 	lds	r20, 0x27F7	; 0x8027f7 <sNumWantedSensor>
     89a:	50 91 f8 27 	lds	r21, 0x27F8	; 0x8027f8 <sNumWantedSensor+0x1>
     89e:	46 17       	cp	r20, r22
     8a0:	57 07       	cpc	r21, r23
     8a2:	54 f1       	brlt	.+84     	; 0x8f8 <ScanDataInSlave+0x1dc>
        snprintf(response,MAXDATA-1,"$%03dW%02d%s'Wants slave'",sMyAdress,index,sWantedSensor[index-1].subadress);
     8a4:	22 0f       	add	r18, r18
     8a6:	33 1f       	adc	r19, r19
     8a8:	22 0f       	add	r18, r18
     8aa:	33 1f       	adc	r19, r19
     8ac:	22 0f       	add	r18, r18
     8ae:	33 1f       	adc	r19, r19
     8b0:	26 1b       	sub	r18, r22
     8b2:	37 0b       	sbc	r19, r23
     8b4:	27 50       	subi	r18, 0x07	; 7
     8b6:	31 09       	sbc	r19, r1
     8b8:	40 91 f3 27 	lds	r20, 0x27F3	; 0x8027f3 <sWantedSensor>
     8bc:	50 91 f4 27 	lds	r21, 0x27F4	; 0x8027f4 <sWantedSensor+0x1>
     8c0:	24 0f       	add	r18, r20
     8c2:	35 1f       	adc	r19, r21
     8c4:	3f 93       	push	r19
     8c6:	2f 93       	push	r18
     8c8:	7f 93       	push	r23
     8ca:	6f 93       	push	r22
     8cc:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     8d0:	8f 93       	push	r24
     8d2:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     8d6:	8f 93       	push	r24
     8d8:	81 e5       	ldi	r24, 0x51	; 81
     8da:	91 e2       	ldi	r25, 0x21	; 33
     8dc:	9f 93       	push	r25
     8de:	8f 93       	push	r24
     8e0:	1f 92       	push	r1
     8e2:	8d e4       	ldi	r24, 0x4D	; 77
     8e4:	8f 93       	push	r24
     8e6:	80 ea       	ldi	r24, 0xA0	; 160
     8e8:	97 e2       	ldi	r25, 0x27	; 39
     8ea:	9f 93       	push	r25
     8ec:	8f 93       	push	r24
     8ee:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
     8f2:	cd bf       	out	0x3d, r28	; 61
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	ba c0       	rjmp	.+372    	; 0xa6c <ScanDataInSlave+0x350>
    }
// the slave sends 0000 if all sensor that exists in the buffer are given
    else {
       snprintf(response,MAXDATA-1,"$%03dW%02d0000'All done'", sMyAdress,index);
     8f8:	7f 93       	push	r23
     8fa:	6f 93       	push	r22
     8fc:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     900:	8f 93       	push	r24
     902:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     906:	8f 93       	push	r24
     908:	8b e6       	ldi	r24, 0x6B	; 107
     90a:	91 e2       	ldi	r25, 0x21	; 33
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	1f 92       	push	r1
     912:	8d e4       	ldi	r24, 0x4D	; 77
     914:	8f 93       	push	r24
     916:	80 ea       	ldi	r24, 0xA0	; 160
     918:	97 e2       	ldi	r25, 0x27	; 39
     91a:	9f 93       	push	r25
     91c:	8f 93       	push	r24
     91e:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
     922:	cd bf       	out	0x3d, r28	; 61
     924:	de bf       	out	0x3e, r29	; 62
     926:	a2 c0       	rjmp	.+324    	; 0xa6c <ScanDataInSlave+0x350>
 */
static void HandleCmdG(char* response, char* dataFromMaster){
    int sensorIndex, err;
    char adr[SUBADR_LENG];

    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
     928:	44 e0       	ldi	r20, 0x04	; 4
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	b8 01       	movw	r22, r16
     92e:	6b 5f       	subi	r22, 0xFB	; 251
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	ce 01       	movw	r24, r28
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	0e 94 32 37 	call	0x6e64	; 0x6e64 <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     93a:	1d 82       	std	Y+5, r1	; 0x05

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     93c:	80 90 f9 27 	lds	r8, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     940:	90 90 fa 27 	lds	r9, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     944:	18 14       	cp	r1, r8
     946:	19 04       	cpc	r1, r9
     948:	0c f0       	brlt	.+2      	; 0x94c <ScanDataInSlave+0x230>
     94a:	78 c0       	rjmp	.+240    	; 0xa3c <ScanDataInSlave+0x320>
		if(!strncmp(adressSensor,sOwnSensor[i].subadress,strlen(adressSensor))){
     94c:	de 01       	movw	r26, r28
     94e:	11 96       	adiw	r26, 0x01	; 1
     950:	fd 01       	movw	r30, r26
     952:	01 90       	ld	r0, Z+
     954:	00 20       	and	r0, r0
     956:	e9 f7       	brne	.-6      	; 0x952 <ScanDataInSlave+0x236>
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	3f 01       	movw	r6, r30
     95c:	6a 1a       	sub	r6, r26
     95e:	7b 0a       	sbc	r7, r27
     960:	a0 90 f5 27 	lds	r10, 0x27F5	; 0x8027f5 <sOwnSensor>
     964:	b0 90 f6 27 	lds	r11, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     968:	44 24       	eor	r4, r4
     96a:	4a 94       	dec	r4
     96c:	54 2c       	mov	r5, r4
     96e:	c1 2c       	mov	r12, r1
     970:	d1 2c       	mov	r13, r1
     972:	a3 01       	movw	r20, r6
     974:	b5 01       	movw	r22, r10
     976:	ce 01       	movw	r24, r28
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	0e 94 24 37 	call	0x6e48	; 0x6e48 <strncmp>
     97e:	89 2b       	or	r24, r25
     980:	09 f4       	brne	.+2      	; 0x984 <ScanDataInSlave+0x268>
     982:	26 01       	movw	r4, r12

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     984:	9f ef       	ldi	r25, 0xFF	; 255
     986:	c9 1a       	sub	r12, r25
     988:	d9 0a       	sbc	r13, r25
     98a:	eb e0       	ldi	r30, 0x0B	; 11
     98c:	ae 0e       	add	r10, r30
     98e:	b1 1c       	adc	r11, r1
     990:	c8 14       	cp	r12, r8
     992:	d9 04       	cpc	r13, r9
     994:	71 f7       	brne	.-36     	; 0x972 <ScanDataInSlave+0x256>
    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

    sensorIndex = FindOwnSensorIndex(adr);

    if(sensorIndex !=-1){
     996:	ff ef       	ldi	r31, 0xFF	; 255
     998:	4f 16       	cp	r4, r31
     99a:	5f 06       	cpc	r5, r31
     99c:	09 f4       	brne	.+2      	; 0x9a0 <ScanDataInSlave+0x284>
     99e:	4e c0       	rjmp	.+156    	; 0xa3c <ScanDataInSlave+0x320>
		//sensorIndex is -1 if sensor not found
        sprintf(response,"$%03dG",sMyAdress);
     9a0:	ff 92       	push	r15
     9a2:	ef 92       	push	r14
     9a4:	84 e8       	ldi	r24, 0x84	; 132
     9a6:	91 e2       	ldi	r25, 0x21	; 33
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	0f 2e       	mov	r0, r31
     9ae:	f0 ea       	ldi	r31, 0xA0	; 160
     9b0:	ef 2e       	mov	r14, r31
     9b2:	f7 e2       	ldi	r31, 0x27	; 39
     9b4:	ff 2e       	mov	r15, r31
     9b6:	f0 2d       	mov	r31, r0
     9b8:	ff 92       	push	r15
     9ba:	ef 92       	push	r14
     9bc:	0e 94 06 38 	call	0x700c	; 0x700c <sprintf>
        err= sOwnSensor[sensorIndex].fpGetData(adr,response + strlen(response), MAXDATA-1-strlen(response) );
     9c0:	f7 01       	movw	r30, r14
     9c2:	01 90       	ld	r0, Z+
     9c4:	00 20       	and	r0, r0
     9c6:	e9 f7       	brne	.-6      	; 0x9c2 <ScanDataInSlave+0x2a6>
     9c8:	31 97       	sbiw	r30, 0x01	; 1
     9ca:	e0 5a       	subi	r30, 0xA0	; 160
     9cc:	f7 42       	sbci	r31, 0x27	; 39
     9ce:	4d e4       	ldi	r20, 0x4D	; 77
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	4e 1b       	sub	r20, r30
     9d4:	5f 0b       	sbc	r21, r31
     9d6:	bf 01       	movw	r22, r30
     9d8:	60 56       	subi	r22, 0x60	; 96
     9da:	78 4d       	sbci	r23, 0xD8	; 216
     9dc:	2b e0       	ldi	r18, 0x0B	; 11
     9de:	24 9d       	mul	r18, r4
     9e0:	c0 01       	movw	r24, r0
     9e2:	25 9d       	mul	r18, r5
     9e4:	90 0d       	add	r25, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	e0 91 f5 27 	lds	r30, 0x27F5	; 0x8027f5 <sOwnSensor>
     9ec:	f0 91 f6 27 	lds	r31, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     9f0:	e8 0f       	add	r30, r24
     9f2:	f9 1f       	adc	r31, r25
     9f4:	07 80       	ldd	r0, Z+7	; 0x07
     9f6:	f0 85       	ldd	r31, Z+8	; 0x08
     9f8:	e0 2d       	mov	r30, r0
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	19 95       	eicall
        if(err){
     a00:	0f 90       	pop	r0
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	89 2b       	or	r24, r25
     a0e:	71 f1       	breq	.+92     	; 0xa6c <ScanDataInSlave+0x350>
			sprintf(response,"$%03dGF'Memory fault'",sMyAdress);
     a10:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     a14:	8f 93       	push	r24
     a16:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     a1a:	8f 93       	push	r24
     a1c:	8b e8       	ldi	r24, 0x8B	; 139
     a1e:	91 e2       	ldi	r25, 0x21	; 33
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	c7 01       	movw	r24, r14
     a26:	9f 93       	push	r25
     a28:	ef 92       	push	r14
     a2a:	0e 94 06 38 	call	0x700c	; 0x700c <sprintf>
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	18 c0       	rjmp	.+48     	; 0xa6c <ScanDataInSlave+0x350>
		}
    }
    else{
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
     a3c:	ff 92       	push	r15
     a3e:	ef 92       	push	r14
     a40:	81 ea       	ldi	r24, 0xA1	; 161
     a42:	91 e2       	ldi	r25, 0x21	; 33
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	80 ea       	ldi	r24, 0xA0	; 160
     a4a:	97 e2       	ldi	r25, 0x27	; 39
     a4c:	9f 93       	push	r25
     a4e:	8f 93       	push	r24
     a50:	0e 94 06 38 	call	0x700c	; 0x700c <sprintf>
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <ScanDataInSlave+0x350>
                break;

      case 'G': HandleCmdG(responseSlave,dataFromMaster);
                break;

      case 'S': HandleCmdS(responseSlave,dataFromMaster);
     a62:	b8 01       	movw	r22, r16
     a64:	80 ea       	ldi	r24, 0xA0	; 160
     a66:	97 e2       	ldi	r25, 0x27	; 39
     a68:	0e 94 6f 02 	call	0x4de	; 0x4de <HandleCmdS>
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     a6c:	80 91 a1 27 	lds	r24, 0x27A1	; 0x8027a1 <__data_end+0x1>
     a70:	85 32       	cpi	r24, 0x25	; 37
     a72:	61 f0       	breq	.+24     	; 0xa8c <ScanDataInSlave+0x370>
     a74:	88 23       	and	r24, r24
     a76:	61 f0       	breq	.+24     	; 0xa90 <ScanDataInSlave+0x374>
     a78:	e2 ea       	ldi	r30, 0xA2	; 162
     a7a:	f7 e2       	ldi	r31, 0x27	; 39
     a7c:	90 e0       	ldi	r25, 0x00	; 0
		sChecksum^=*dataMaster++;
     a7e:	98 27       	eor	r25, r24
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     a80:	81 91       	ld	r24, Z+
     a82:	85 32       	cpi	r24, 0x25	; 37
     a84:	31 f0       	breq	.+12     	; 0xa92 <ScanDataInSlave+0x376>
     a86:	81 11       	cpse	r24, r1
     a88:	fa cf       	rjmp	.-12     	; 0xa7e <ScanDataInSlave+0x362>
     a8a:	03 c0       	rjmp	.+6      	; 0xa92 <ScanDataInSlave+0x376>
 *
 * \return checksum value
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <ScanDataInSlave+0x376>
     a90:	90 e0       	ldi	r25, 0x00	; 0
                break;

      default:  break;
    }
    // add '%' and the checksum to the sentence and then send it through the line of the RS485
    snprintf(responseSlave+strlen(responseSlave),MAXCHARACTERSSENTENCE-strlen(responseSlave),"%%%02X",DataChecksum(responseSlave));
     a92:	e0 ea       	ldi	r30, 0xA0	; 160
     a94:	f7 e2       	ldi	r31, 0x27	; 39
     a96:	01 90       	ld	r0, Z+
     a98:	00 20       	and	r0, r0
     a9a:	e9 f7       	brne	.-6      	; 0xa96 <ScanDataInSlave+0x37a>
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	e0 5a       	subi	r30, 0xA0	; 160
     aa0:	f7 42       	sbci	r31, 0x27	; 39
     aa2:	1f 92       	push	r1
     aa4:	9f 93       	push	r25
     aa6:	8b eb       	ldi	r24, 0xBB	; 187
     aa8:	91 e2       	ldi	r25, 0x21	; 33
     aaa:	9f 93       	push	r25
     aac:	8f 93       	push	r24
     aae:	83 e5       	ldi	r24, 0x53	; 83
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	8e 1b       	sub	r24, r30
     ab4:	9f 0b       	sbc	r25, r31
     ab6:	9f 93       	push	r25
     ab8:	8f 93       	push	r24
     aba:	e0 56       	subi	r30, 0x60	; 96
     abc:	f8 4d       	sbci	r31, 0xD8	; 216
     abe:	ff 93       	push	r31
     ac0:	ef 93       	push	r30
     ac2:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    SendLineRS485(responseSlave);
     ac6:	80 ea       	ldi	r24, 0xA0	; 160
     ac8:	97 e2       	ldi	r25, 0x27	; 39
     aca:	0e 94 48 03 	call	0x690	; 0x690 <SendLineRS485>
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	de bf       	out	0x3e, r29	; 62
    err =1;
	}
	dataFromMaster[0] = '\0';
     ad2:	f8 01       	movw	r30, r16
     ad4:	10 82       	st	Z, r1
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	03 c0       	rjmp	.+6      	; 0xae0 <ScanDataInSlave+0x3c4>
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
       err = 0;
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <ScanDataInSlave+0x3c4>
     ade:	80 e0       	ldi	r24, 0x00	; 0
    err =1;
	}
	dataFromMaster[0] = '\0';
	}
	return err;
}
     ae0:	25 96       	adiw	r28, 0x05	; 5
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	df 90       	pop	r13
     af4:	cf 90       	pop	r12
     af6:	bf 90       	pop	r11
     af8:	af 90       	pop	r10
     afa:	9f 90       	pop	r9
     afc:	8f 90       	pop	r8
     afe:	7f 90       	pop	r7
     b00:	6f 90       	pop	r6
     b02:	5f 90       	pop	r5
     b04:	4f 90       	pop	r4
     b06:	08 95       	ret

00000b08 <main>:
}


static void InitClocks(void)
{
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc, 0, OSC_XOSCSEL_XTAL_16KCLK_gc );
     b08:	4b e0       	ldi	r20, 0x0B	; 11
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	80 ec       	ldi	r24, 0xC0	; 192
     b0e:	0e 94 66 01 	call	0x2cc	; 0x2cc <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
     b12:	e0 e5       	ldi	r30, 0x50	; 80
     b14:	f0 e0       	ldi	r31, 0x00	; 0
     b16:	80 81       	ld	r24, Z
     b18:	88 60       	ori	r24, 0x08	; 8
     b1a:	80 83       	st	Z, r24
// do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     b1c:	81 81       	ldd	r24, Z+1	; 0x01
     b1e:	83 ff       	sbrs	r24, 3
     b20:	fd cf       	rjmp	.-6      	; 0xb1c <main+0x14>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     b22:	62 e0       	ldi	r22, 0x02	; 2
     b24:	80 ec       	ldi	r24, 0xC0	; 192
     b26:	0e 94 70 01 	call	0x2e0	; 0x2e0 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     b2a:	e0 e5       	ldi	r30, 0x50	; 80
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	80 81       	ld	r24, Z
     b30:	80 61       	ori	r24, 0x10	; 16
     b32:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     b34:	81 81       	ldd	r24, Z+1	; 0x01
     b36:	84 ff       	sbrs	r24, 4
     b38:	fd cf       	rjmp	.-6      	; 0xb34 <main+0x2c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     b3a:	84 e0       	ldi	r24, 0x04	; 4
     b3c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	0e 94 75 01 	call	0x2ea	; 0x2ea <CLKSYS_Disable>
	CLKSYS_Disable( OSC_RC32MEN_bm );
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	0e 94 75 01 	call	0x2ea	; 0x2ea <CLKSYS_Disable>
	
} /* InitClocks */


static void InitIO(void) {
	PORTC.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm;
     b4c:	e0 e4       	ldi	r30, 0x40	; 64
     b4e:	f6 e0       	ldi	r31, 0x06	; 6
     b50:	8f e7       	ldi	r24, 0x7F	; 127
     b52:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     b54:	80 e1       	ldi	r24, 0x10	; 16
     b56:	80 8b       	std	Z+16, r24	; 0x10
	
	PORTD.DIRCLR = PIN0_bm;
     b58:	e0 e6       	ldi	r30, 0x60	; 96
     b5a:	f6 e0       	ldi	r31, 0x06	; 6
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	92 83       	std	Z+2, r25	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     b60:	80 8b       	std	Z+16, r24	; 0x10
		
	PORTE.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN6_bm | PIN7_bm;
     b62:	e0 e8       	ldi	r30, 0x80	; 128
     b64:	f6 e0       	ldi	r31, 0x06	; 6
     b66:	8f ec       	ldi	r24, 0xCF	; 207
     b68:	80 83       	st	Z, r24
	PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     b6a:	8f e0       	ldi	r24, 0x0F	; 15
     b6c:	86 83       	std	Z+6, r24	; 0x06
	
	PORTF.DIR = PIN0_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
     b6e:	e0 ea       	ldi	r30, 0xA0	; 160
     b70:	f6 e0       	ldi	r31, 0x06	; 6
     b72:	89 ef       	ldi	r24, 0xF9	; 249
     b74:	80 83       	st	Z, r24
	PORTF.OUTCLR = PIN3_bm | PIN4_bm | PIN5_bm;
     b76:	88 e3       	ldi	r24, 0x38	; 56
     b78:	86 83       	std	Z+6, r24	; 0x06
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
	static char slaveData[MAXCHARACTERSSENTENCE];
	
	InitClocks();
	InitIO();
	InitUtil();
     b7a:	0e 94 94 30 	call	0x6128	; 0x6128 <InitUtil>
	InitTimer();
     b7e:	0e 94 25 2f 	call	0x5e4a	; 0x5e4a <InitTimer>
	InitSerial();
     b82:	0e 94 a2 2c 	call	0x5944	; 0x5944 <InitSerial>
	InitSlave(GetBusID());
     b86:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <GetBusID>
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 94 01 	call	0x328	; 0x328 <InitSlave>
	InitCoreAnalog();
     b90:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <InitCoreAnalog>
	Init9DOF();
     b94:	0e 94 ed 06 	call	0xdda	; 0xdda <Init9DOF>
	InitReadBussensors();
     b98:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <InitReadBussensors>

	sei();
     b9c:	78 94       	sei
	
	PrintResetHeader(&gCtrl_IO);
     b9e:	86 e5       	ldi	r24, 0x56	; 86
     ba0:	90 e2       	ldi	r25, 0x20	; 32
     ba2:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <PrintResetHeader>
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
     ba6:	c0 e0       	ldi	r28, 0x00	; 0
     ba8:	31 2c       	mov	r3, r1
#define ESC_TIMEOUT			(CYCLES_PER_SECOND)
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
     baa:	41 2c       	mov	r4, r1
     bac:	51 2c       	mov	r5, r1
     bae:	32 01       	movw	r6, r4
     bb0:	81 2c       	mov	r8, r1
     bb2:	91 2c       	mov	r9, r1
     bb4:	54 01       	movw	r10, r8

		/* Handle the slave code */
		if(CanRead_Comm485())
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     bb6:	00 ea       	ldi	r16, 0xA0	; 160
     bb8:	16 e0       	ldi	r17, 0x06	; 6
     bba:	d0 e3       	ldi	r29, 0x30	; 48

	sei();
	
	PrintResetHeader(&gCtrl_IO);
	while(1) {
		Process9DOF();
     bbc:	0e 94 92 06 	call	0xd24	; 0xd24 <Process9DOF>
		
		if(CanRead_Ctrl()) {
     bc0:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <CanRead_Ctrl>
     bc4:	88 23       	and	r24, r24
     bc6:	e1 f0       	breq	.+56     	; 0xc00 <main+0xf8>
			switch(ReadByte_Ctrl()) {
     bc8:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
     bcc:	83 34       	cpi	r24, 0x43	; 67
     bce:	51 f0       	breq	.+20     	; 0xbe4 <main+0xdc>
     bd0:	83 36       	cpi	r24, 0x63	; 99
     bd2:	41 f0       	breq	.+16     	; 0xbe4 <main+0xdc>
     bd4:	8b 31       	cpi	r24, 0x1B	; 27
     bd6:	51 f4       	brne	.+20     	; 0xbec <main+0xe4>
				case 0x1B:
					/* ESC -- sync character for avrdude. The programmer is trying to talk to us, so reset the chip */
					CCPWrite( &RST.CTRL, RST_SWRST_bm );
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	89 e7       	ldi	r24, 0x79	; 121
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 51 01 	call	0x2a2	; 0x2a2 <CCPWrite>
					break;
     be2:	04 c0       	rjmp	.+8      	; 0xbec <main+0xe4>
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
     be4:	86 e5       	ldi	r24, 0x56	; 86
     be6:	90 e2       	ldi	r25, 0x20	; 32
     be8:	0e 94 cb 11 	call	0x2396	; 0x2396 <CalibrateChannel>
					break;
			}
			escTimeoutActive = 1;
			prev = GetSessionCycleCount();
     bec:	0e 94 d6 17 	call	0x2fac	; 0x2fac <GetSessionCycleCount>
     bf0:	4b 01       	movw	r8, r22
     bf2:	5c 01       	movw	r10, r24
		}
		now = GetSessionCycleCount();
     bf4:	0e 94 d6 17 	call	0x2fac	; 0x2fac <GetSessionCycleCount>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
					break;
			}
			escTimeoutActive = 1;
     bfc:	c1 e0       	ldi	r28, 0x01	; 1
     bfe:	07 c0       	rjmp	.+14     	; 0xc0e <main+0x106>
			prev = GetSessionCycleCount();
		}
		now = GetSessionCycleCount();
     c00:	0e 94 d6 17 	call	0x2fac	; 0x2fac <GetSessionCycleCount>
     c04:	6b 01       	movw	r12, r22
     c06:	7c 01       	movw	r14, r24
		if(escTimeoutActive) {
     c08:	cc 23       	and	r28, r28
     c0a:	09 f4       	brne	.+2      	; 0xc0e <main+0x106>
     c0c:	84 c0       	rjmp	.+264    	; 0xd16 <main+0x20e>
			if(now - prev >= ESC_TIMEOUT)
     c0e:	d7 01       	movw	r26, r14
     c10:	c6 01       	movw	r24, r12
     c12:	88 19       	sub	r24, r8
     c14:	99 09       	sbc	r25, r9
     c16:	aa 09       	sbc	r26, r10
     c18:	bb 09       	sbc	r27, r11
     c1a:	88 38       	cpi	r24, 0x88	; 136
     c1c:	93 41       	sbci	r25, 0x13	; 19
     c1e:	a1 05       	cpc	r26, r1
     c20:	b1 05       	cpc	r27, r1
     c22:	08 f0       	brcs	.+2      	; 0xc26 <main+0x11e>
     c24:	78 c0       	rjmp	.+240    	; 0xd16 <main+0x20e>
     c26:	62 c0       	rjmp	.+196    	; 0xcec <main+0x1e4>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	38 16       	cp	r3, r24
     c2c:	09 f4       	brne	.+2      	; 0xc30 <main+0x128>
     c2e:	41 c0       	rjmp	.+130    	; 0xcb2 <main+0x1aa>
     c30:	83 15       	cp	r24, r3
     c32:	30 f0       	brcs	.+12     	; 0xc40 <main+0x138>
     c34:	33 20       	and	r3, r3
     c36:	41 f0       	breq	.+16     	; 0xc48 <main+0x140>
     c38:	e1 e0       	ldi	r30, 0x01	; 1
     c3a:	3e 16       	cp	r3, r30
     c3c:	21 f1       	breq	.+72     	; 0xc86 <main+0x17e>
     c3e:	54 c0       	rjmp	.+168    	; 0xce8 <main+0x1e0>
     c40:	f3 e0       	ldi	r31, 0x03	; 3
     c42:	3f 12       	cpse	r3, r31
     c44:	51 c0       	rjmp	.+162    	; 0xce8 <main+0x1e0>
     c46:	3f c0       	rjmp	.+126    	; 0xcc6 <main+0x1be>
				case DEBUGPRINT_START:
					if(now - prevIDPrint >= PRINT_ID_INTERVAL) {
     c48:	c4 18       	sub	r12, r4
     c4a:	d5 08       	sbc	r13, r5
     c4c:	e6 08       	sbc	r14, r6
     c4e:	f7 08       	sbc	r15, r7
     c50:	20 ec       	ldi	r18, 0xC0	; 192
     c52:	c2 16       	cp	r12, r18
     c54:	26 ec       	ldi	r18, 0xC6	; 198
     c56:	d2 06       	cpc	r13, r18
     c58:	2d e2       	ldi	r18, 0x2D	; 45
     c5a:	e2 06       	cpc	r14, r18
     c5c:	f1 04       	cpc	r15, r1
     c5e:	68 f0       	brcs	.+26     	; 0xc7a <main+0x172>
						prevIDPrint += PRINT_ID_INTERVAL;
     c60:	80 ec       	ldi	r24, 0xC0	; 192
     c62:	48 0e       	add	r4, r24
     c64:	86 ec       	ldi	r24, 0xC6	; 198
     c66:	58 1e       	adc	r5, r24
     c68:	8d e2       	ldi	r24, 0x2D	; 45
     c6a:	68 1e       	adc	r6, r24
     c6c:	71 1c       	adc	r7, r1
						PrintResetHeader(&gCtrl_IO);
     c6e:	86 e5       	ldi	r24, 0x56	; 86
     c70:	90 e2       	ldi	r25, 0x20	; 32
     c72:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <PrintResetHeader>
     c76:	c0 e0       	ldi	r28, 0x00	; 0
     c78:	39 c0       	rjmp	.+114    	; 0xcec <main+0x1e4>
					}
					else {
						TakeSnapshot();
     c7a:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <TakeSnapshot>
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
						debugPrintstate = DEBUGPRINT_ANALOG;
     c80:	33 24       	eor	r3, r3
     c82:	33 94       	inc	r3
     c84:	33 c0       	rjmp	.+102    	; 0xcec <main+0x1e4>
					}
					break;
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
     c86:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
     c8a:	80 73       	andi	r24, 0x30	; 48
     c8c:	49 f4       	brne	.+18     	; 0xca0 <main+0x198>
						PrintCSV_H2A(&gCtrl_IO);
     c8e:	86 e5       	ldi	r24, 0x56	; 86
     c90:	90 e2       	ldi	r25, 0x20	; 32
     c92:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <PrintCSV_H2A>
     c96:	c0 e0       	ldi	r28, 0x00	; 0
					}
					else {
						PrintCSV_EVA(&gCtrl_IO);
					}
					debugPrintstate = DEBUGPRINT_9DOF;
     c98:	68 94       	set
     c9a:	33 24       	eor	r3, r3
     c9c:	31 f8       	bld	r3, 1
     c9e:	26 c0       	rjmp	.+76     	; 0xcec <main+0x1e4>
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
						PrintCSV_H2A(&gCtrl_IO);
					}
					else {
						PrintCSV_EVA(&gCtrl_IO);
     ca0:	86 e5       	ldi	r24, 0x56	; 86
     ca2:	90 e2       	ldi	r25, 0x20	; 32
     ca4:	0e 94 17 20 	call	0x402e	; 0x402e <PrintCSV_EVA>
     ca8:	c0 e0       	ldi	r28, 0x00	; 0
					}
					debugPrintstate = DEBUGPRINT_9DOF;
     caa:	68 94       	set
     cac:	33 24       	eor	r3, r3
     cae:	31 f8       	bld	r3, 1
     cb0:	1d c0       	rjmp	.+58     	; 0xcec <main+0x1e4>
					break;
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
     cb2:	86 e5       	ldi	r24, 0x56	; 86
     cb4:	90 e2       	ldi	r25, 0x20	; 32
     cb6:	0e 94 a0 08 	call	0x1140	; 0x1140 <PrintCSV_9DOF>
					debugPrintstate = DEBUGPRINT_BUS;
					break;
     cba:	c0 e0       	ldi	r28, 0x00	; 0
					}
					debugPrintstate = DEBUGPRINT_9DOF;
					break;
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_BUS;
     cbc:	0f 2e       	mov	r0, r31
     cbe:	f3 e0       	ldi	r31, 0x03	; 3
     cc0:	3f 2e       	mov	r3, r31
     cc2:	f0 2d       	mov	r31, r0
					break;
     cc4:	13 c0       	rjmp	.+38     	; 0xcec <main+0x1e4>
				case DEBUGPRINT_BUS:
					PrintBussensors(&gCtrl_IO);
     cc6:	86 e5       	ldi	r24, 0x56	; 86
     cc8:	90 e2       	ldi	r25, 0x20	; 32
     cca:	0e 94 84 2c 	call	0x5908	; 0x5908 <PrintBussensors>
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
     cce:	26 e5       	ldi	r18, 0x56	; 86
     cd0:	30 e2       	ldi	r19, 0x20	; 32
     cd2:	43 e0       	ldi	r20, 0x03	; 3
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	82 ec       	ldi	r24, 0xC2	; 194
     cdc:	91 e2       	ldi	r25, 0x21	; 33
     cde:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
     ce2:	c0 e0       	ldi	r28, 0x00	; 0
				default:
					debugPrintstate = DEBUGPRINT_START;
     ce4:	31 2c       	mov	r3, r1
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <main+0x1e4>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     ce8:	c0 e0       	ldi	r28, 0x00	; 0
					PrintBussensors(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
				default:
					debugPrintstate = DEBUGPRINT_START;
     cea:	31 2c       	mov	r3, r1
			}
		}

		/* Handle the slave code */
		if(CanRead_Comm485())
     cec:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <CanRead_Comm485>
     cf0:	88 23       	and	r24, r24
     cf2:	19 f0       	breq	.+6      	; 0xcfa <main+0x1f2>
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
     cf4:	f8 01       	movw	r30, r16
     cf6:	d6 83       	std	Z+6, r29	; 0x06
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <main+0x1f6>
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     cfa:	f8 01       	movw	r30, r16
     cfc:	d5 83       	std	Z+5, r29	; 0x05
		if ( ReadLineRS45( slaveData ) == 1 ){
     cfe:	8d ef       	ldi	r24, 0xFD	; 253
     d00:	97 e2       	ldi	r25, 0x27	; 39
     d02:	0e 94 5d 03 	call	0x6ba	; 0x6ba <ReadLineRS45>
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	09 f0       	breq	.+2      	; 0xd0c <main+0x204>
     d0a:	58 cf       	rjmp	.-336    	; 0xbbc <main+0xb4>
			ScanDataInSlave(slaveData);
     d0c:	8d ef       	ldi	r24, 0xFD	; 253
     d0e:	97 e2       	ldi	r25, 0x27	; 39
     d10:	0e 94 8e 03 	call	0x71c	; 0x71c <ScanDataInSlave>
     d14:	53 cf       	rjmp	.-346    	; 0xbbc <main+0xb4>
			if(now - prev >= ESC_TIMEOUT)
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
     d16:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <CanWrite_Ctrl>
     d1a:	86 39       	cpi	r24, 0x96	; 150
     d1c:	08 f0       	brcs	.+2      	; 0xd20 <main+0x218>
     d1e:	84 cf       	rjmp	.-248    	; 0xc28 <main+0x120>
     d20:	c0 e0       	ldi	r28, 0x00	; 0
     d22:	e4 cf       	rjmp	.-56     	; 0xcec <main+0x1e4>

00000d24 <Process9DOF>:
	S9DOFWrite(0x21, 0x00, SELECT_G);
	
} /* Init9DOF */


void Process9DOF(void) {
     d24:	08 95       	ret

00000d26 <S9DOFWrite>:
		);
	
} /* PrintCSV_9DOF */


void S9DOFWrite(char Address, char Data, uint8_t xm_or_g) {
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
	uint8_t bit = 0, i;

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTCLR = CS_G;
     d2e:	41 30       	cpi	r20, 0x01	; 1
     d30:	21 f4       	brne	.+8      	; 0xd3a <S9DOFWrite+0x14>
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d38:	40 c0       	rjmp	.+128    	; 0xdba <S9DOFWrite+0x94>
	else CS_XM_POORT.OUTCLR = CS_XM;
     d3a:	90 e8       	ldi	r25, 0x80	; 128
     d3c:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d40:	3c c0       	rjmp	.+120    	; 0xdba <S9DOFWrite+0x94>

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     d42:	96 83       	std	Z+6, r25	; 0x06
		bit = ((Address << i) & 0x80);
		if (bit) {SDA_POORT.OUTSET = SDA;}
     d44:	de 01       	movw	r26, r28
     d46:	02 2e       	mov	r0, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <S9DOFWrite+0x28>
     d4a:	aa 0f       	add	r26, r26
     d4c:	bb 1f       	adc	r27, r27
     d4e:	0a 94       	dec	r0
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <S9DOFWrite+0x24>
     d52:	aa 23       	and	r26, r26
     d54:	24 f4       	brge	.+8      	; 0xd5e <S9DOFWrite+0x38>
     d56:	d8 01       	movw	r26, r16
     d58:	15 96       	adiw	r26, 0x05	; 5
     d5a:	8c 93       	st	X, r24
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <S9DOFWrite+0x3e>
		else {SDA_POORT.OUTCLR = SDA;}
     d5e:	d8 01       	movw	r26, r16
     d60:	16 96       	adiw	r26, 0x06	; 6
     d62:	8c 93       	st	X, r24
		SCL_POORT.OUTSET = SCL;
     d64:	95 83       	std	Z+5, r25	; 0x05
     d66:	2f 5f       	subi	r18, 0xFF	; 255
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t bit = 0, i;

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTCLR = CS_G;
	else CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
     d6a:	28 30       	cpi	r18, 0x08	; 8
     d6c:	31 05       	cpc	r19, r1
     d6e:	49 f7       	brne	.-46     	; 0xd42 <S9DOFWrite+0x1c>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     d74:	e0 e6       	ldi	r30, 0x60	; 96
     d76:	f6 e0       	ldi	r31, 0x06	; 6
     d78:	21 e0       	ldi	r18, 0x01	; 1
		bit = ((Data << i) & 0x80);
		if (bit) {SDA_POORT.OUTSET = SDA;}
     d7a:	70 e0       	ldi	r23, 0x00	; 0
		else {SDA_POORT.OUTCLR = SDA;}
     d7c:	c0 e8       	ldi	r28, 0x80	; 128
     d7e:	d6 e0       	ldi	r29, 0x06	; 6
     d80:	30 e4       	ldi	r19, 0x40	; 64
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     d82:	26 83       	std	Z+6, r18	; 0x06
		bit = ((Data << i) & 0x80);
		if (bit) {SDA_POORT.OUTSET = SDA;}
     d84:	db 01       	movw	r26, r22
     d86:	08 2e       	mov	r0, r24
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <S9DOFWrite+0x68>
     d8a:	aa 0f       	add	r26, r26
     d8c:	bb 1f       	adc	r27, r27
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <S9DOFWrite+0x64>
     d92:	aa 23       	and	r26, r26
     d94:	14 f4       	brge	.+4      	; 0xd9a <S9DOFWrite+0x74>
     d96:	3d 83       	std	Y+5, r19	; 0x05
     d98:	01 c0       	rjmp	.+2      	; 0xd9c <S9DOFWrite+0x76>
		else {SDA_POORT.OUTCLR = SDA;}
     d9a:	3e 83       	std	Y+6, r19	; 0x06
		SCL_POORT.OUTSET = SCL;
     d9c:	25 83       	std	Z+5, r18	; 0x05
     d9e:	01 96       	adiw	r24, 0x01	; 1
		else {SDA_POORT.OUTCLR = SDA;}
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
     da0:	88 30       	cpi	r24, 0x08	; 8
     da2:	91 05       	cpc	r25, r1
     da4:	71 f7       	brne	.-36     	; 0xd82 <S9DOFWrite+0x5c>
		if (bit) {SDA_POORT.OUTSET = SDA;}
		else {SDA_POORT.OUTCLR = SDA;}
		SCL_POORT.OUTSET = SCL;
	}

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTSET = CS_G;
     da6:	41 30       	cpi	r20, 0x01	; 1
     da8:	21 f4       	brne	.+8      	; 0xdb2 <S9DOFWrite+0x8c>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     db0:	0f c0       	rjmp	.+30     	; 0xdd0 <S9DOFWrite+0xaa>
	else CS_XM_POORT.OUTSET = CS_XM;
     db2:	80 e8       	ldi	r24, 0x80	; 128
     db4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
		
} /* S9DOFWrite */
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <S9DOFWrite+0xaa>
		);
	
} /* PrintCSV_9DOF */


void S9DOFWrite(char Address, char Data, uint8_t xm_or_g) {
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTCLR = CS_G;
	else CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     dbe:	e0 e6       	ldi	r30, 0x60	; 96
     dc0:	f6 e0       	ldi	r31, 0x06	; 6
     dc2:	91 e0       	ldi	r25, 0x01	; 1
		bit = ((Address << i) & 0x80);
		if (bit) {SDA_POORT.OUTSET = SDA;}
     dc4:	c8 2f       	mov	r28, r24
     dc6:	d0 e0       	ldi	r29, 0x00	; 0
		else {SDA_POORT.OUTCLR = SDA;}
     dc8:	00 e8       	ldi	r16, 0x80	; 128
     dca:	16 e0       	ldi	r17, 0x06	; 6
     dcc:	80 e4       	ldi	r24, 0x40	; 64
     dce:	b9 cf       	rjmp	.-142    	; 0xd42 <S9DOFWrite+0x1c>
	}

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTSET = CS_G;
	else CS_XM_POORT.OUTSET = CS_XM;
		
} /* S9DOFWrite */
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	08 95       	ret

00000dda <Init9DOF>:

#define SENSORS_GRAVITY_EARTH	9.81
#define GYRO_RES	0.0074770348//245/32768


void Init9DOF(void) {
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
	
	SDA_POORT.DIRSET	=	SDA;
     dde:	a0 e8       	ldi	r26, 0x80	; 128
     de0:	b6 e0       	ldi	r27, 0x06	; 6
     de2:	20 e4       	ldi	r18, 0x40	; 64
     de4:	11 96       	adiw	r26, 0x01	; 1
     de6:	2c 93       	st	X, r18
     de8:	11 97       	sbiw	r26, 0x01	; 1
	CS_G_POORT.DIRSET	=	CS_G;
     dea:	e0 e4       	ldi	r30, 0x40	; 64
     dec:	f6 e0       	ldi	r31, 0x06	; 6
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	81 83       	std	Z+1, r24	; 0x01
	CS_XM_POORT.DIRSET	=	CS_XM;
     df2:	90 e8       	ldi	r25, 0x80	; 128
     df4:	91 83       	std	Z+1, r25	; 0x01
	SCL_POORT.DIRSET	=	SCL;
     df6:	c0 e6       	ldi	r28, 0x60	; 96
     df8:	d6 e0       	ldi	r29, 0x06	; 6
     dfa:	89 83       	std	Y+1, r24	; 0x01

	SCL_POORT.OUTSET	=	SCL;
     dfc:	8d 83       	std	Y+5, r24	; 0x05
	SDA_POORT.OUTCLR	=	SDA;
     dfe:	16 96       	adiw	r26, 0x06	; 6
     e00:	2c 93       	st	X, r18
     e02:	16 97       	sbiw	r26, 0x06	; 6
	CS_G_POORT.OUTSET	=	CS_G;
     e04:	85 83       	std	Z+5, r24	; 0x05
	CS_XM_POORT.OUTSET	=	CS_XM;
     e06:	95 83       	std	Z+5, r25	; 0x05

	SDO_G_POORT.DIRCLR	=	SDO_G;
     e08:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
	SDO_XM_POORT.DIRCLR	=	SDO_XM;
     e0c:	12 96       	adiw	r26, 0x02	; 2
     e0e:	9c 93       	st	X, r25

	S9DOFWrite(0x20, 0x47, SELECT_XM);
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	67 e4       	ldi	r22, 0x47	; 71
     e14:	80 e2       	ldi	r24, 0x20	; 32
     e16:	0e 94 93 06 	call	0xd26	; 0xd26 <S9DOFWrite>
	S9DOFWrite(0x21, 0x08, SELECT_XM);
     e1a:	40 e0       	ldi	r20, 0x00	; 0
     e1c:	68 e0       	ldi	r22, 0x08	; 8
     e1e:	81 e2       	ldi	r24, 0x21	; 33
     e20:	0e 94 93 06 	call	0xd26	; 0xd26 <S9DOFWrite>
	S9DOFWrite(0x24, 0x94, SELECT_XM);//was 0x10
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	64 e9       	ldi	r22, 0x94	; 148
     e28:	84 e2       	ldi	r24, 0x24	; 36
     e2a:	0e 94 93 06 	call	0xd26	; 0xd26 <S9DOFWrite>
	S9DOFWrite(0x25, 0x20, SELECT_XM);
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	60 e2       	ldi	r22, 0x20	; 32
     e32:	85 e2       	ldi	r24, 0x25	; 37
     e34:	0e 94 93 06 	call	0xd26	; 0xd26 <S9DOFWrite>
	S9DOFWrite(0x26, 0x00, SELECT_XM);
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	86 e2       	ldi	r24, 0x26	; 38
     e3e:	0e 94 93 06 	call	0xd26	; 0xd26 <S9DOFWrite>

	S9DOFWrite(0x20, 0x8F, SELECT_G);
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	6f e8       	ldi	r22, 0x8F	; 143
     e46:	80 e2       	ldi	r24, 0x20	; 32
     e48:	0e 94 93 06 	call	0xd26	; 0xd26 <S9DOFWrite>
	S9DOFWrite(0x21, 0x00, SELECT_G);
     e4c:	41 e0       	ldi	r20, 0x01	; 1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	81 e2       	ldi	r24, 0x21	; 33
     e52:	0e 94 93 06 	call	0xd26	; 0xd26 <S9DOFWrite>
	
} /* Init9DOF */
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <S9DOFRead>:
	else CS_XM_POORT.OUTSET = CS_XM;
		
} /* S9DOFWrite */


uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
     e5c:	4f 92       	push	r4
     e5e:	5f 92       	push	r5
     e60:	7f 92       	push	r7
     e62:	8f 92       	push	r8
     e64:	9f 92       	push	r9
     e66:	af 92       	push	r10
     e68:	bf 92       	push	r11
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	76 2e       	mov	r7, r22
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;

	if (xm_or_g == SELECT_G)
     e7c:	41 30       	cpi	r20, 0x01	; 1
     e7e:	21 f4       	brne	.+8      	; 0xe88 <S9DOFRead+0x2c>
		CS_G_POORT.OUTCLR = CS_G;
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     e86:	03 c0       	rjmp	.+6      	; 0xe8e <S9DOFRead+0x32>
	else 
		CS_XM_POORT.OUTCLR = CS_XM;
     e88:	90 e8       	ldi	r25, 0x80	; 128
     e8a:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>

	Address |= 0x80;
     e8e:	80 68       	ori	r24, 0x80	; 128
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0

	for(i = 0; i < 8; i++) {
		bit = !!((Address << i) & 0x80);
		if (bit) {
     e94:	a8 2f       	mov	r26, r24
     e96:	b0 e0       	ldi	r27, 0x00	; 0
			SDA_POORT.OUTSET = SDA;
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     e98:	0f 2e       	mov	r0, r31
     e9a:	f0 e8       	ldi	r31, 0x80	; 128
     e9c:	ef 2e       	mov	r14, r31
     e9e:	f6 e0       	ldi	r31, 0x06	; 6
     ea0:	ff 2e       	mov	r15, r31
     ea2:	f0 2d       	mov	r31, r0
     ea4:	80 e4       	ldi	r24, 0x40	; 64
		}
		SCL_POORT.OUTCLR = SCL;
     ea6:	e0 e6       	ldi	r30, 0x60	; 96
     ea8:	f6 e0       	ldi	r31, 0x06	; 6
     eaa:	91 e0       	ldi	r25, 0x01	; 1

	Address |= 0x80;

	for(i = 0; i < 8; i++) {
		bit = !!((Address << i) & 0x80);
		if (bit) {
     eac:	9d 01       	movw	r18, r26
     eae:	06 2e       	mov	r0, r22
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <S9DOFRead+0x5a>
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <S9DOFRead+0x56>
     eba:	27 ff       	sbrs	r18, 7
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <S9DOFRead+0x68>
			SDA_POORT.OUTSET = SDA;
     ebe:	e7 01       	movw	r28, r14
     ec0:	8d 83       	std	Y+5, r24	; 0x05
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <S9DOFRead+0x6c>
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     ec4:	e7 01       	movw	r28, r14
     ec6:	8e 83       	std	Y+6, r24	; 0x06
		}
		SCL_POORT.OUTCLR = SCL;
     ec8:	96 83       	std	Z+6, r25	; 0x06
		SCL_POORT.OUTSET = SCL;
     eca:	95 83       	std	Z+5, r25	; 0x05
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	Address |= 0x80;

	for(i = 0; i < 8; i++) {
     ed0:	68 30       	cpi	r22, 0x08	; 8
     ed2:	71 05       	cpc	r23, r1
     ed4:	59 f7       	brne	.-42     	; 0xeac <S9DOFRead+0x50>
			SDA_POORT.OUTCLR = SDA;
		}
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;
     ed6:	80 e4       	ldi	r24, 0x40	; 64
     ed8:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
     edc:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
     ee2:	e0 e0       	ldi	r30, 0x00	; 0
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     ee6:	c0 e6       	ldi	r28, 0x60	; 96
     ee8:	d6 e0       	ldi	r29, 0x06	; 6
     eea:	51 e0       	ldi	r21, 0x01	; 1
		SCL_POORT.OUTSET = SCL;
		
		if(SDO_G_POORT.IN & SDO_G)bitG = 1;
     eec:	0f 2e       	mov	r0, r31
     eee:	f0 ea       	ldi	r31, 0xA0	; 160
     ef0:	cf 2e       	mov	r12, r31
     ef2:	f6 e0       	ldi	r31, 0x06	; 6
     ef4:	df 2e       	mov	r13, r31
     ef6:	f0 2d       	mov	r31, r0
		else bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;

		if(SDO_XM_POORT.IN & SDO_XM)bitXM = 1;
     ef8:	0f 2e       	mov	r0, r31
     efa:	f0 e8       	ldi	r31, 0x80	; 128
     efc:	ef 2e       	mov	r14, r31
     efe:	f6 e0       	ldi	r31, 0x06	; 6
     f00:	ff 2e       	mov	r15, r31
     f02:	f0 2d       	mov	r31, r0
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     f04:	5e 83       	std	Y+6, r21	; 0x06
		SCL_POORT.OUTSET = SCL;
     f06:	5d 83       	std	Y+5, r21	; 0x05
		
		if(SDO_G_POORT.IN & SDO_G)bitG = 1;
     f08:	d6 01       	movw	r26, r12
     f0a:	18 96       	adiw	r26, 0x08	; 8
     f0c:	8c 91       	ld	r24, X
		else bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;
     f0e:	ee 0f       	add	r30, r30
     f10:	ff 1f       	adc	r31, r31
     f12:	ff 27       	eor	r31, r31
     f14:	80 fb       	bst	r24, 0
     f16:	44 24       	eor	r4, r4
     f18:	40 f8       	bld	r4, 0
     f1a:	51 2c       	mov	r5, r1
     f1c:	e4 29       	or	r30, r4
     f1e:	f5 29       	or	r31, r5

		if(SDO_XM_POORT.IN & SDO_XM)bitXM = 1;
     f20:	d7 01       	movw	r26, r14
     f22:	18 96       	adiw	r26, 0x08	; 8
     f24:	ac 90       	ld	r10, X
		else bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
     f26:	49 01       	movw	r8, r18
     f28:	88 0c       	add	r8, r8
     f2a:	99 1c       	adc	r9, r9
     f2c:	99 24       	eor	r9, r9
     f2e:	2a 2d       	mov	r18, r10
     f30:	aa 0c       	add	r10, r10
     f32:	33 0b       	sbc	r19, r19
     f34:	59 01       	movw	r10, r18
     f36:	aa 24       	eor	r10, r10
     f38:	bb 0c       	add	r11, r11
     f3a:	aa 1c       	adc	r10, r10
     f3c:	bb 24       	eor	r11, r11
     f3e:	95 01       	movw	r18, r10
     f40:	28 29       	or	r18, r8
     f42:	39 29       	or	r19, r9
     f44:	91 50       	subi	r25, 0x01	; 1
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
     f46:	f1 f6       	brne	.-68     	; 0xf04 <S9DOFRead+0xa8>
		if(SDO_XM_POORT.IN & SDO_XM)bitXM = 1;
		else bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
	}

	if(bytes>1) {
     f48:	b1 e0       	ldi	r27, 0x01	; 1
     f4a:	b7 15       	cp	r27, r7
     f4c:	d8 f5       	brcc	.+118    	; 0xfc4 <S9DOFRead+0x168>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	c0 e0       	ldi	r28, 0x00	; 0
     f54:	d0 e0       	ldi	r29, 0x00	; 0
		for(int count = 0; count < 8; count++) {
			SCL_POORT.OUTCLR = SCL;
     f56:	0f 2e       	mov	r0, r31
     f58:	f0 e6       	ldi	r31, 0x60	; 96
     f5a:	ef 2e       	mov	r14, r31
     f5c:	f6 e0       	ldi	r31, 0x06	; 6
     f5e:	ff 2e       	mov	r15, r31
     f60:	f0 2d       	mov	r31, r0
     f62:	51 e0       	ldi	r21, 0x01	; 1

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
     f64:	0f 2e       	mov	r0, r31
     f66:	f0 ea       	ldi	r31, 0xA0	; 160
     f68:	af 2e       	mov	r10, r31
     f6a:	f6 e0       	ldi	r31, 0x06	; 6
     f6c:	bf 2e       	mov	r11, r31
     f6e:	f0 2d       	mov	r31, r0
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;

			if(SDO_XM_POORT.IN & SDO_XM)
     f70:	0f 2e       	mov	r0, r31
     f72:	f0 e8       	ldi	r31, 0x80	; 128
     f74:	cf 2e       	mov	r12, r31
     f76:	f6 e0       	ldi	r31, 0x06	; 6
     f78:	df 2e       	mov	r13, r31
     f7a:	f0 2d       	mov	r31, r0
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
	}

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
			SCL_POORT.OUTCLR = SCL;
     f7c:	d7 01       	movw	r26, r14
     f7e:	16 96       	adiw	r26, 0x06	; 6
     f80:	5c 93       	st	X, r21

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
     f82:	d5 01       	movw	r26, r10
     f84:	18 96       	adiw	r26, 0x08	; 8
     f86:	9c 90       	ld	r9, X
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;
     f88:	cc 0f       	add	r28, r28
     f8a:	dd 1f       	adc	r29, r29
     f8c:	dd 27       	eor	r29, r29
     f8e:	09 2d       	mov	r16, r9
     f90:	01 70       	andi	r16, 0x01	; 1
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	c0 2b       	or	r28, r16
     f96:	d1 2b       	or	r29, r17

			if(SDO_XM_POORT.IN & SDO_XM)
     f98:	d6 01       	movw	r26, r12
     f9a:	18 96       	adiw	r26, 0x08	; 8
     f9c:	9c 90       	ld	r9, X
				bitXM = 1;
			else 
				bitXM = 0;
			byte2GyroXM = ((byte2GyroXM &0x7F)<<1)|bitXM;
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	99 27       	eor	r25, r25
     fa4:	a9 2d       	mov	r26, r9
     fa6:	99 0c       	add	r9, r9
     fa8:	bb 0b       	sbc	r27, r27
     faa:	aa 27       	eor	r26, r26
     fac:	bb 0f       	add	r27, r27
     fae:	aa 1f       	adc	r26, r26
     fb0:	bb 27       	eor	r27, r27
     fb2:	8a 2b       	or	r24, r26
     fb4:	9b 2b       	or	r25, r27

			SCL_POORT.OUTSET = SCL;
     fb6:	d7 01       	movw	r26, r14
     fb8:	15 96       	adiw	r26, 0x05	; 5
     fba:	5c 93       	st	X, r21
     fbc:	61 50       	subi	r22, 0x01	; 1
     fbe:	71 09       	sbc	r23, r1
		else bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
	}

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
     fc0:	e9 f6       	brne	.-70     	; 0xf7c <S9DOFRead+0x120>
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <S9DOFRead+0x170>
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
     fc8:	c0 e0       	ldi	r28, 0x00	; 0
     fca:	d0 e0       	ldi	r29, 0x00	; 0

			SCL_POORT.OUTSET = SCL;
		}
	}

	if (xm_or_g == SELECT_G)
     fcc:	41 30       	cpi	r20, 0x01	; 1
     fce:	41 f4       	brne	.+16     	; 0xfe0 <S9DOFRead+0x184>
		CS_G_POORT.OUTSET = CS_G;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	else 
		CS_XM_POORT.OUTSET = CS_XM;

	if (xm_or_g == SELECT_G) 
		data = (((uint16_t) byte2GyroG) << 8) | byteGyroG;
     fd6:	9c 2f       	mov	r25, r28
     fd8:	88 27       	eor	r24, r24
     fda:	8e 2b       	or	r24, r30
     fdc:	9f 2b       	or	r25, r31
     fde:	07 c0       	rjmp	.+14     	; 0xfee <S9DOFRead+0x192>
	}

	if (xm_or_g == SELECT_G)
		CS_G_POORT.OUTSET = CS_G;
	else 
		CS_XM_POORT.OUTSET = CS_XM;
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	40 93 45 06 	sts	0x0645, r20	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	if (xm_or_g == SELECT_G) 
		data = (((uint16_t) byte2GyroG) << 8) | byteGyroG;
	else 
		data = (((uint16_t) byte2GyroXM) << 8) | byteGyroXM;
     fe6:	98 2f       	mov	r25, r24
     fe8:	88 27       	eor	r24, r24
     fea:	82 2b       	or	r24, r18
     fec:	93 2b       	or	r25, r19

	return data;
}
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	bf 90       	pop	r11
    1000:	af 90       	pop	r10
    1002:	9f 90       	pop	r9
    1004:	8f 90       	pop	r8
    1006:	7f 90       	pop	r7
    1008:	5f 90       	pop	r5
    100a:	4f 90       	pop	r4
    100c:	08 95       	ret

0000100e <GyroGetTemp>:


float GyroGetTemp(void) {
	int16_t data = 0;

	data = (int16_t)S9DOFRead(0xC5,2,SELECT_XM);
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	62 e0       	ldi	r22, 0x02	; 2
    1012:	85 ec       	ldi	r24, 0xC5	; 197
    1014:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>

	return data / 8.0f;
    1018:	bc 01       	movw	r22, r24
    101a:	99 0f       	add	r25, r25
    101c:	88 0b       	sbc	r24, r24
    101e:	99 0b       	sbc	r25, r25
    1020:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	5e e3       	ldi	r21, 0x3E	; 62
    102c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
}
    1030:	08 95       	ret

00001032 <GyroGetMagnetic>:


float GyroGetMagnetic(uint8_t X_Y_Z)
{
	int16_t data = 0;
	if (X_Y_Z == GET_X)
    1032:	81 11       	cpse	r24, r1
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <GyroGetMagnetic+0x10>
	{
		data = (int16_t) S9DOFRead(0xC8,2,SELECT_XM);
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	88 ec       	ldi	r24, 0xC8	; 200
    103c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    1040:	12 c0       	rjmp	.+36     	; 0x1066 <GyroGetMagnetic+0x34>
	}
	if (X_Y_Z == GET_Y)
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	31 f4       	brne	.+12     	; 0x1052 <GyroGetMagnetic+0x20>
	{
		data = (int16_t) S9DOFRead(0xCA,2,SELECT_XM);
    1046:	40 e0       	ldi	r20, 0x00	; 0
    1048:	62 e0       	ldi	r22, 0x02	; 2
    104a:	8a ec       	ldi	r24, 0xCA	; 202
    104c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    1050:	0a c0       	rjmp	.+20     	; 0x1066 <GyroGetMagnetic+0x34>
	}
	if (X_Y_Z == GET_Z)
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	31 f4       	brne	.+12     	; 0x1062 <GyroGetMagnetic+0x30>
	{
		data = (int16_t) S9DOFRead(0xCC,2,SELECT_XM);
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	62 e0       	ldi	r22, 0x02	; 2
    105a:	8c ec       	ldi	r24, 0xCC	; 204
    105c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <GyroGetMagnetic+0x34>
}


float GyroGetMagnetic(uint8_t X_Y_Z)
{
	int16_t data = 0;
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0

//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = ((float)data / 1000)*LSM9DS0_MAG_MGAUSS_4GAUSS;

	return return_data;
    1066:	bc 01       	movw	r22, r24
    1068:	99 0f       	add	r25, r25
    106a:	88 0b       	sbc	r24, r24
    106c:	99 0b       	sbc	r25, r25
    106e:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4a e7       	ldi	r20, 0x7A	; 122
    1078:	54 e4       	ldi	r21, 0x44	; 68
    107a:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    107e:	2a e0       	ldi	r18, 0x0A	; 10
    1080:	37 ed       	ldi	r19, 0xD7	; 215
    1082:	43 e2       	ldi	r20, 0x23	; 35
    1084:	5e e3       	ldi	r21, 0x3E	; 62
    1086:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
}
    108a:	08 95       	ret

0000108c <GyroGetAcceleration>:


float GyroGetAcceleration(uint8_t X_Y_Z) {
	int16_t data = 0;
	
	if (X_Y_Z == GET_X)
    108c:	81 11       	cpse	r24, r1
    108e:	06 c0       	rjmp	.+12     	; 0x109c <GyroGetAcceleration+0x10>
	{
		data = (int16_t) S9DOFRead(0xE8,2,SELECT_XM);
    1090:	40 e0       	ldi	r20, 0x00	; 0
    1092:	62 e0       	ldi	r22, 0x02	; 2
    1094:	88 ee       	ldi	r24, 0xE8	; 232
    1096:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    109a:	12 c0       	rjmp	.+36     	; 0x10c0 <GyroGetAcceleration+0x34>
	}
	if (X_Y_Z == GET_Y)
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	31 f4       	brne	.+12     	; 0x10ac <GyroGetAcceleration+0x20>
	{
		data = (int16_t) S9DOFRead(0xEA,2,SELECT_XM);
    10a0:	40 e0       	ldi	r20, 0x00	; 0
    10a2:	62 e0       	ldi	r22, 0x02	; 2
    10a4:	8a ee       	ldi	r24, 0xEA	; 234
    10a6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    10aa:	0a c0       	rjmp	.+20     	; 0x10c0 <GyroGetAcceleration+0x34>
	}
	if (X_Y_Z == GET_Z)
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	31 f4       	brne	.+12     	; 0x10bc <GyroGetAcceleration+0x30>
	{
		data = (int16_t) S9DOFRead(0xEC,2,SELECT_XM);
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	8c ee       	ldi	r24, 0xEC	; 236
    10b6:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <GyroGetAcceleration+0x34>
	return return_data;
}


float GyroGetAcceleration(uint8_t X_Y_Z) {
	int16_t data = 0;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0

	//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = (((float)data / 1000) * SENSORS_GRAVITY_EARTH)*LSM9DS0_ACCEL_MG_LSB_4G; // factor voor

	return return_data;
    10c0:	bc 01       	movw	r22, r24
    10c2:	99 0f       	add	r25, r25
    10c4:	88 0b       	sbc	r24, r24
    10c6:	99 0b       	sbc	r25, r25
    10c8:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	4a e7       	ldi	r20, 0x7A	; 122
    10d2:	54 e4       	ldi	r21, 0x44	; 68
    10d4:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    10d8:	23 ec       	ldi	r18, 0xC3	; 195
    10da:	35 ef       	ldi	r19, 0xF5	; 245
    10dc:	4c e1       	ldi	r20, 0x1C	; 28
    10de:	51 e4       	ldi	r21, 0x41	; 65
    10e0:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    10e4:	23 e2       	ldi	r18, 0x23	; 35
    10e6:	3b ed       	ldi	r19, 0xDB	; 219
    10e8:	49 ef       	ldi	r20, 0xF9	; 249
    10ea:	5d e3       	ldi	r21, 0x3D	; 61
    10ec:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
}
    10f0:	08 95       	ret

000010f2 <GyroGetGyro>:


float GyroGetGyro(uint8_t X_Y_Z) {
	int16_t data = 0;

	if (X_Y_Z == GET_X)
    10f2:	81 11       	cpse	r24, r1
    10f4:	06 c0       	rjmp	.+12     	; 0x1102 <GyroGetGyro+0x10>
	{
		data = (int16_t) S9DOFRead(0x68,2,SELECT_G);
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	62 e0       	ldi	r22, 0x02	; 2
    10fa:	88 e6       	ldi	r24, 0x68	; 104
    10fc:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    1100:	12 c0       	rjmp	.+36     	; 0x1126 <GyroGetGyro+0x34>
	}
	if (X_Y_Z == GET_Y)
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	31 f4       	brne	.+12     	; 0x1112 <GyroGetGyro+0x20>
	{
		data = (int16_t) S9DOFRead(0x6A,2,SELECT_G);
    1106:	41 e0       	ldi	r20, 0x01	; 1
    1108:	62 e0       	ldi	r22, 0x02	; 2
    110a:	8a e6       	ldi	r24, 0x6A	; 106
    110c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    1110:	0a c0       	rjmp	.+20     	; 0x1126 <GyroGetGyro+0x34>
	}
	if (X_Y_Z == GET_Z)
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	31 f4       	brne	.+12     	; 0x1122 <GyroGetGyro+0x30>
	{
		data = (int16_t) S9DOFRead(0x6C,2,SELECT_G);
    1116:	41 e0       	ldi	r20, 0x01	; 1
    1118:	62 e0       	ldi	r22, 0x02	; 2
    111a:	8c e6       	ldi	r24, 0x6C	; 108
    111c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <S9DOFRead>
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GyroGetGyro+0x34>
	return return_data;
}


float GyroGetGyro(uint8_t X_Y_Z) {
	int16_t data = 0;
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0

//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = ((float)data)*LSM9DS0_GYRO_DPS_DIGIT_245DPS;

	return return_data;
    1126:	bc 01       	movw	r22, r24
    1128:	99 0f       	add	r25, r25
    112a:	88 0b       	sbc	r24, r24
    112c:	99 0b       	sbc	r25, r25
    112e:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1132:	29 e2       	ldi	r18, 0x29	; 41
    1134:	3c e5       	ldi	r19, 0x5C	; 92
    1136:	4f e0       	ldi	r20, 0x0F	; 15
    1138:	5c e3       	ldi	r21, 0x3C	; 60
    113a:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
}
    113e:	08 95       	ret

00001140 <PrintCSV_9DOF>:
void Process9DOF(void) {
	
} /* Process9DOF */


void PrintCSV_9DOF(FILE *fd) {
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	66 97       	sbiw	r28, 0x16	; 22
    116a:	cd bf       	out	0x3d, r28	; 61
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	8b 8b       	std	Y+19, r24	; 0x13
    1170:	9c 8b       	std	Y+20, r25	; 0x14
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
		GyroGetTemp()
    1172:	0e 94 07 08 	call	0x100e	; 0x100e <GyroGetTemp>
    1176:	56 2e       	mov	r5, r22
    1178:	47 2e       	mov	r4, r23
    117a:	38 2e       	mov	r3, r24
    117c:	29 2e       	mov	r2, r25
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GyroGetGyro>
    1184:	96 2e       	mov	r9, r22
    1186:	87 2e       	mov	r8, r23
    1188:	78 2e       	mov	r7, r24
    118a:	69 2e       	mov	r6, r25
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GyroGetGyro>
    1192:	69 83       	std	Y+1, r22	; 0x01
    1194:	7a 83       	std	Y+2, r23	; 0x02
    1196:	b8 2e       	mov	r11, r24
    1198:	a9 2e       	mov	r10, r25
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <GyroGetGyro>
    11a0:	6b 83       	std	Y+3, r22	; 0x03
    11a2:	7c 83       	std	Y+4, r23	; 0x04
    11a4:	8d 83       	std	Y+5, r24	; 0x05
    11a6:	9e 83       	std	Y+6, r25	; 0x06
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	0e 94 19 08 	call	0x1032	; 0x1032 <GyroGetMagnetic>
    11ae:	6f 83       	std	Y+7, r22	; 0x07
    11b0:	78 87       	std	Y+8, r23	; 0x08
    11b2:	89 87       	std	Y+9, r24	; 0x09
    11b4:	9a 87       	std	Y+10, r25	; 0x0a
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 19 08 	call	0x1032	; 0x1032 <GyroGetMagnetic>
    11bc:	6b 87       	std	Y+11, r22	; 0x0b
    11be:	7c 87       	std	Y+12, r23	; 0x0c
    11c0:	8d 87       	std	Y+13, r24	; 0x0d
    11c2:	9e 87       	std	Y+14, r25	; 0x0e
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	0e 94 19 08 	call	0x1032	; 0x1032 <GyroGetMagnetic>
    11ca:	6f 87       	std	Y+15, r22	; 0x0f
    11cc:	78 8b       	std	Y+16, r23	; 0x10
    11ce:	89 8b       	std	Y+17, r24	; 0x11
    11d0:	9a 8b       	std	Y+18, r25	; 0x12
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	0e 94 46 08 	call	0x108c	; 0x108c <GyroGetAcceleration>
    11d8:	f6 2e       	mov	r15, r22
    11da:	e7 2e       	mov	r14, r23
    11dc:	d8 2e       	mov	r13, r24
    11de:	c9 2e       	mov	r12, r25
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 46 08 	call	0x108c	; 0x108c <GyroGetAcceleration>
    11e6:	6d 8b       	std	Y+21, r22	; 0x15
    11e8:	7e 8b       	std	Y+22, r23	; 0x16
    11ea:	18 2f       	mov	r17, r24
    11ec:	09 2f       	mov	r16, r25
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 46 08 	call	0x108c	; 0x108c <GyroGetAcceleration>


void PrintCSV_9DOF(FILE *fd) {
	
	// Dummy print for now. Format will be: Accel[XYZ],Magneto[XYZ],Gyro[XYZ],Temp
	fprintf(fd, "%.3f,%.3f,%.3f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,",
    11f4:	2f 92       	push	r2
    11f6:	3f 92       	push	r3
    11f8:	4f 92       	push	r4
    11fa:	5f 92       	push	r5
    11fc:	6f 92       	push	r6
    11fe:	7f 92       	push	r7
    1200:	8f 92       	push	r8
    1202:	9f 92       	push	r9
    1204:	af 92       	push	r10
    1206:	bf 92       	push	r11
    1208:	2a 81       	ldd	r18, Y+2	; 0x02
    120a:	2f 93       	push	r18
    120c:	29 81       	ldd	r18, Y+1	; 0x01
    120e:	2f 93       	push	r18
    1210:	2e 81       	ldd	r18, Y+6	; 0x06
    1212:	2f 93       	push	r18
    1214:	2d 81       	ldd	r18, Y+5	; 0x05
    1216:	2f 93       	push	r18
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	2f 93       	push	r18
    121c:	2b 81       	ldd	r18, Y+3	; 0x03
    121e:	2f 93       	push	r18
    1220:	2a 85       	ldd	r18, Y+10	; 0x0a
    1222:	2f 93       	push	r18
    1224:	29 85       	ldd	r18, Y+9	; 0x09
    1226:	2f 93       	push	r18
    1228:	28 85       	ldd	r18, Y+8	; 0x08
    122a:	2f 93       	push	r18
    122c:	2f 81       	ldd	r18, Y+7	; 0x07
    122e:	2f 93       	push	r18
    1230:	2e 85       	ldd	r18, Y+14	; 0x0e
    1232:	2f 93       	push	r18
    1234:	2d 85       	ldd	r18, Y+13	; 0x0d
    1236:	2f 93       	push	r18
    1238:	2c 85       	ldd	r18, Y+12	; 0x0c
    123a:	2f 93       	push	r18
    123c:	2b 85       	ldd	r18, Y+11	; 0x0b
    123e:	2f 93       	push	r18
    1240:	2a 89       	ldd	r18, Y+18	; 0x12
    1242:	2f 93       	push	r18
    1244:	29 89       	ldd	r18, Y+17	; 0x11
    1246:	2f 93       	push	r18
    1248:	28 89       	ldd	r18, Y+16	; 0x10
    124a:	2f 93       	push	r18
    124c:	2f 85       	ldd	r18, Y+15	; 0x0f
    124e:	2f 93       	push	r18
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	2e 89       	ldd	r18, Y+22	; 0x16
    125e:	2f 93       	push	r18
    1260:	2d 89       	ldd	r18, Y+21	; 0x15
    1262:	2f 93       	push	r18
    1264:	9f 93       	push	r25
    1266:	8f 93       	push	r24
    1268:	7f 93       	push	r23
    126a:	6f 93       	push	r22
    126c:	86 ec       	ldi	r24, 0xC6	; 198
    126e:	91 e2       	ldi	r25, 0x21	; 33
    1270:	9f 93       	push	r25
    1272:	8f 93       	push	r24
    1274:	8c 89       	ldd	r24, Y+20	; 0x14
    1276:	8f 93       	push	r24
    1278:	9b 89       	ldd	r25, Y+19	; 0x13
    127a:	9f 93       	push	r25
    127c:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
		GyroGetTemp()
#endif
		);
	
} /* PrintCSV_9DOF */
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	66 96       	adiw	r28, 0x16	; 22
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	ff 90       	pop	r15
    1294:	ef 90       	pop	r14
    1296:	df 90       	pop	r13
    1298:	cf 90       	pop	r12
    129a:	bf 90       	pop	r11
    129c:	af 90       	pop	r10
    129e:	9f 90       	pop	r9
    12a0:	8f 90       	pop	r8
    12a2:	7f 90       	pop	r7
    12a4:	6f 90       	pop	r6
    12a6:	5f 90       	pop	r5
    12a8:	4f 90       	pop	r4
    12aa:	3f 90       	pop	r3
    12ac:	2f 90       	pop	r2
    12ae:	08 95       	ret

000012b0 <CoreAnalogTakeSnapshot485>:

uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
	
} /* IsSnapshotCoreAnalogDone */
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 e7 28 	sts	0x28E7, r24	; 0x8028e7 <sTakeSnapshot485>
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	08 95       	ret

000012bc <GetCruiseControlButtonStatus>:
    12bc:	ff 92       	push	r15
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	8b 01       	movw	r16, r22
    12c8:	ea 01       	movw	r28, r20
    12ca:	60 91 55 29 	lds	r22, 0x2955	; 0x802955 <sSensorDataSnapshot485+0x69>
    12ce:	70 91 56 29 	lds	r23, 0x2956	; 0x802956 <sSensorDataSnapshot485+0x6a>
    12d2:	80 91 57 29 	lds	r24, 0x2957	; 0x802957 <sSensorDataSnapshot485+0x6b>
    12d6:	90 91 58 29 	lds	r25, 0x2958	; 0x802958 <sSensorDataSnapshot485+0x6c>
    12da:	f0 90 4f 29 	lds	r15, 0x294F	; 0x80294f <sSensorDataSnapshot485+0x63>
    12de:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e4       	ldi	r19, 0x40	; 64
    12e6:	4c e9       	ldi	r20, 0x9C	; 156
    12e8:	55 e4       	ldi	r21, 0x45	; 69
    12ea:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    12ee:	9f 93       	push	r25
    12f0:	8f 93       	push	r24
    12f2:	7f 93       	push	r23
    12f4:	6f 93       	push	r22
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	f1 10       	cpse	r15, r1
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	9f 93       	push	r25
    1300:	8f 93       	push	r24
    1302:	89 ef       	ldi	r24, 0xF9	; 249
    1304:	91 e2       	ldi	r25, 0x21	; 33
    1306:	9f 93       	push	r25
    1308:	8f 93       	push	r24
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	1f 93       	push	r17
    1310:	0f 93       	push	r16
    1312:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1316:	ed b7       	in	r30, 0x3d	; 61
    1318:	fe b7       	in	r31, 0x3e	; 62
    131a:	3c 96       	adiw	r30, 0x0c	; 12
    131c:	ed bf       	out	0x3d, r30	; 61
    131e:	fe bf       	out	0x3e, r31	; 62
    1320:	8c 17       	cp	r24, r28
    1322:	9d 07       	cpc	r25, r29
    1324:	2c f0       	brlt	.+10     	; 0x1330 <GetCruiseControlButtonStatus+0x74>
    1326:	f8 01       	movw	r30, r16
    1328:	10 82       	st	Z, r1
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <GetCruiseControlButtonStatus+0x78>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	08 95       	ret

00001340 <GetFullPowerButtonStatus>:
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	8b 01       	movw	r16, r22
    134c:	ea 01       	movw	r28, r20
    134e:	60 91 51 29 	lds	r22, 0x2951	; 0x802951 <sSensorDataSnapshot485+0x65>
    1352:	70 91 52 29 	lds	r23, 0x2952	; 0x802952 <sSensorDataSnapshot485+0x66>
    1356:	80 91 53 29 	lds	r24, 0x2953	; 0x802953 <sSensorDataSnapshot485+0x67>
    135a:	90 91 54 29 	lds	r25, 0x2954	; 0x802954 <sSensorDataSnapshot485+0x68>
    135e:	f0 90 4e 29 	lds	r15, 0x294E	; 0x80294e <sSensorDataSnapshot485+0x62>
    1362:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e4       	ldi	r19, 0x40	; 64
    136a:	4c e9       	ldi	r20, 0x9C	; 156
    136c:	55 e4       	ldi	r21, 0x45	; 69
    136e:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1372:	9f 93       	push	r25
    1374:	8f 93       	push	r24
    1376:	7f 93       	push	r23
    1378:	6f 93       	push	r22
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	f1 10       	cpse	r15, r1
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	9f 93       	push	r25
    1384:	8f 93       	push	r24
    1386:	89 ef       	ldi	r24, 0xF9	; 249
    1388:	91 e2       	ldi	r25, 0x21	; 33
    138a:	9f 93       	push	r25
    138c:	8f 93       	push	r24
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	1f 93       	push	r17
    1394:	0f 93       	push	r16
    1396:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    139a:	ed b7       	in	r30, 0x3d	; 61
    139c:	fe b7       	in	r31, 0x3e	; 62
    139e:	3c 96       	adiw	r30, 0x0c	; 12
    13a0:	ed bf       	out	0x3d, r30	; 61
    13a2:	fe bf       	out	0x3e, r31	; 62
    13a4:	8c 17       	cp	r24, r28
    13a6:	9d 07       	cpc	r25, r29
    13a8:	2c f0       	brlt	.+10     	; 0x13b4 <GetFullPowerButtonStatus+0x74>
    13aa:	f8 01       	movw	r30, r16
    13ac:	10 82       	st	Z, r1
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <GetFullPowerButtonStatus+0x78>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	08 95       	ret

000013c4 <GetMotorDriverTemp>:
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	8b 01       	movw	r16, r22
    13ce:	ea 01       	movw	r28, r20
    13d0:	60 91 1a 29 	lds	r22, 0x291A	; 0x80291a <sSensorDataSnapshot485+0x2e>
    13d4:	70 91 1b 29 	lds	r23, 0x291B	; 0x80291b <sSensorDataSnapshot485+0x2f>
    13d8:	80 91 1c 29 	lds	r24, 0x291C	; 0x80291c <sSensorDataSnapshot485+0x30>
    13dc:	90 91 1d 29 	lds	r25, 0x291D	; 0x80291d <sSensorDataSnapshot485+0x31>
    13e0:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	59 e4       	ldi	r21, 0x49	; 73
    13ec:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    13f0:	9f 93       	push	r25
    13f2:	8f 93       	push	r24
    13f4:	7f 93       	push	r23
    13f6:	6f 93       	push	r22
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	92 e2       	ldi	r25, 0x22	; 34
    13fc:	9f 93       	push	r25
    13fe:	8f 93       	push	r24
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	1f 93       	push	r17
    1406:	0f 93       	push	r16
    1408:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    140c:	ed b7       	in	r30, 0x3d	; 61
    140e:	fe b7       	in	r31, 0x3e	; 62
    1410:	3a 96       	adiw	r30, 0x0a	; 10
    1412:	ed bf       	out	0x3d, r30	; 61
    1414:	fe bf       	out	0x3e, r31	; 62
    1416:	8c 17       	cp	r24, r28
    1418:	9d 07       	cpc	r25, r29
    141a:	2c f0       	brlt	.+10     	; 0x1426 <GetMotorDriverTemp+0x62>
    141c:	f8 01       	movw	r30, r16
    141e:	10 82       	st	Z, r1
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GetMotorDriverTemp+0x66>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	08 95       	ret

00001434 <GetWheelSpeedH2A>:
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	8b 01       	movw	r16, r22
    1446:	ea 01       	movw	r28, r20
    1448:	60 91 46 29 	lds	r22, 0x2946	; 0x802946 <sSensorDataSnapshot485+0x5a>
    144c:	70 91 47 29 	lds	r23, 0x2947	; 0x802947 <sSensorDataSnapshot485+0x5b>
    1450:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <sSensorDataSnapshot485+0x5c>
    1454:	90 91 49 29 	lds	r25, 0x2949	; 0x802949 <sSensorDataSnapshot485+0x5d>
    1458:	61 15       	cp	r22, r1
    145a:	71 05       	cpc	r23, r1
    145c:	81 05       	cpc	r24, r1
    145e:	91 05       	cpc	r25, r1
    1460:	09 f1       	breq	.+66     	; 0x14a4 <GetWheelSpeedH2A+0x70>
    1462:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e8       	ldi	r20, 0x80	; 128
    146c:	57 e3       	ldi	r21, 0x37	; 55
    146e:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1472:	9b 01       	movw	r18, r22
    1474:	ac 01       	movw	r20, r24
    1476:	60 e0       	ldi	r22, 0x00	; 0
    1478:	70 e8       	ldi	r23, 0x80	; 128
    147a:	8b e8       	ldi	r24, 0x8B	; 139
    147c:	94 e4       	ldi	r25, 0x44	; 68
    147e:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1482:	f6 2e       	mov	r15, r22
    1484:	e7 2e       	mov	r14, r23
    1486:	d8 2e       	mov	r13, r24
    1488:	c9 2e       	mov	r12, r25
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 3e 31 	call	0x627c	; 0x627c <__cmpsf2>
    1496:	88 23       	and	r24, r24
    1498:	4c f4       	brge	.+18     	; 0x14ac <GetWheelSpeedH2A+0x78>
    149a:	f1 2c       	mov	r15, r1
    149c:	e1 2c       	mov	r14, r1
    149e:	d1 2c       	mov	r13, r1
    14a0:	c1 2c       	mov	r12, r1
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <GetWheelSpeedH2A+0x78>
    14a4:	f1 2c       	mov	r15, r1
    14a6:	e1 2c       	mov	r14, r1
    14a8:	d1 2c       	mov	r13, r1
    14aa:	c1 2c       	mov	r12, r1
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	92 e2       	ldi	r25, 0x22	; 34
    14b8:	9f 93       	push	r25
    14ba:	8f 93       	push	r24
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	1f 93       	push	r17
    14c2:	0f 93       	push	r16
    14c4:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    14c8:	ed b7       	in	r30, 0x3d	; 61
    14ca:	fe b7       	in	r31, 0x3e	; 62
    14cc:	3a 96       	adiw	r30, 0x0a	; 10
    14ce:	ed bf       	out	0x3d, r30	; 61
    14d0:	fe bf       	out	0x3e, r31	; 62
    14d2:	8c 17       	cp	r24, r28
    14d4:	9d 07       	cpc	r25, r29
    14d6:	2c f0       	brlt	.+10     	; 0x14e2 <GetWheelSpeedH2A+0xae>
    14d8:	f8 01       	movw	r30, r16
    14da:	10 82       	st	Z, r1
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <GetWheelSpeedH2A+0xb2>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	08 95       	ret

000014f8 <GetDiodeStatus>:
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	8b 01       	movw	r16, r22
    1504:	ea 01       	movw	r28, r20
    1506:	ec ee       	ldi	r30, 0xEC	; 236
    1508:	f8 e2       	ldi	r31, 0x28	; 40
    150a:	62 a5       	ldd	r22, Z+42	; 0x2a
    150c:	73 a5       	ldd	r23, Z+43	; 0x2b
    150e:	84 a5       	ldd	r24, Z+44	; 0x2c
    1510:	95 a5       	ldd	r25, Z+45	; 0x2d
    1512:	f1 a4       	ldd	r15, Z+41	; 0x29
    1514:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e4       	ldi	r19, 0x40	; 64
    151c:	4c e9       	ldi	r20, 0x9C	; 156
    151e:	55 e4       	ldi	r21, 0x45	; 69
    1520:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1524:	9f 93       	push	r25
    1526:	8f 93       	push	r24
    1528:	7f 93       	push	r23
    152a:	6f 93       	push	r22
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	f1 10       	cpse	r15, r1
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <GetDiodeStatus+0x3e>
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	9f 93       	push	r25
    1538:	8f 93       	push	r24
    153a:	89 ef       	ldi	r24, 0xF9	; 249
    153c:	91 e2       	ldi	r25, 0x21	; 33
    153e:	9f 93       	push	r25
    1540:	8f 93       	push	r24
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	1f 93       	push	r17
    1548:	0f 93       	push	r16
    154a:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    154e:	ed b7       	in	r30, 0x3d	; 61
    1550:	fe b7       	in	r31, 0x3e	; 62
    1552:	3c 96       	adiw	r30, 0x0c	; 12
    1554:	ed bf       	out	0x3d, r30	; 61
    1556:	fe bf       	out	0x3e, r31	; 62
    1558:	8c 17       	cp	r24, r28
    155a:	9d 07       	cpc	r25, r29
    155c:	2c f0       	brlt	.+10     	; 0x1568 <GetDiodeStatus+0x70>
    155e:	f8 01       	movw	r30, r16
    1560:	10 82       	st	Z, r1
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GetDiodeStatus+0x74>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	ff 90       	pop	r15
    1576:	08 95       	ret

00001578 <GetTimeSnapshot>:
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	8b 01       	movw	r16, r22
    1582:	ea 01       	movw	r28, r20
    1584:	60 91 e8 28 	lds	r22, 0x28E8	; 0x8028e8 <sSessionCycleCountSnapshot485>
    1588:	70 91 e9 28 	lds	r23, 0x28E9	; 0x8028e9 <sSessionCycleCountSnapshot485+0x1>
    158c:	80 91 ea 28 	lds	r24, 0x28EA	; 0x8028ea <sSessionCycleCountSnapshot485+0x2>
    1590:	90 91 eb 28 	lds	r25, 0x28EB	; 0x8028eb <sSessionCycleCountSnapshot485+0x3>
    1594:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e4       	ldi	r19, 0x40	; 64
    159c:	4c e9       	ldi	r20, 0x9C	; 156
    159e:	55 e4       	ldi	r21, 0x45	; 69
    15a0:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    15a4:	9f 93       	push	r25
    15a6:	8f 93       	push	r24
    15a8:	7f 93       	push	r23
    15aa:	6f 93       	push	r22
    15ac:	8c ef       	ldi	r24, 0xFC	; 252
    15ae:	91 e2       	ldi	r25, 0x21	; 33
    15b0:	9f 93       	push	r25
    15b2:	8f 93       	push	r24
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	1f 93       	push	r17
    15ba:	0f 93       	push	r16
    15bc:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    15c0:	ed b7       	in	r30, 0x3d	; 61
    15c2:	fe b7       	in	r31, 0x3e	; 62
    15c4:	3a 96       	adiw	r30, 0x0a	; 10
    15c6:	ed bf       	out	0x3d, r30	; 61
    15c8:	fe bf       	out	0x3e, r31	; 62
    15ca:	8c 17       	cp	r24, r28
    15cc:	9d 07       	cpc	r25, r29
    15ce:	2c f0       	brlt	.+10     	; 0x15da <GetTimeSnapshot+0x62>
    15d0:	f8 01       	movw	r30, r16
    15d2:	10 82       	st	Z, r1
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <GetTimeSnapshot+0x66>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	08 95       	ret

000015e8 <GetSupercapEnergy>:
    15e8:	4f 92       	push	r4
    15ea:	5f 92       	push	r5
    15ec:	6f 92       	push	r6
    15ee:	7f 92       	push	r7
    15f0:	8f 92       	push	r8
    15f2:	9f 92       	push	r9
    15f4:	af 92       	push	r10
    15f6:	bf 92       	push	r11
    15f8:	cf 92       	push	r12
    15fa:	df 92       	push	r13
    15fc:	ef 92       	push	r14
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	8b 01       	movw	r16, r22
    160a:	ea 01       	movw	r28, r20
    160c:	ec ee       	ldi	r30, 0xEC	; 236
    160e:	f8 e2       	ldi	r31, 0x28	; 40
    1610:	20 a1       	ldd	r18, Z+32	; 0x20
    1612:	31 a1       	ldd	r19, Z+33	; 0x21
    1614:	42 a1       	ldd	r20, Z+34	; 0x22
    1616:	53 a1       	ldd	r21, Z+35	; 0x23
    1618:	64 a1       	ldd	r22, Z+36	; 0x24
    161a:	75 a1       	ldd	r23, Z+37	; 0x25
    161c:	86 a1       	ldd	r24, Z+38	; 0x26
    161e:	97 a1       	ldd	r25, Z+39	; 0x27
    1620:	e5 ee       	ldi	r30, 0xE5	; 229
    1622:	f9 e2       	ldi	r31, 0x29	; 41
    1624:	40 88       	ldd	r4, Z+16	; 0x10
    1626:	51 88       	ldd	r5, Z+17	; 0x11
    1628:	62 88       	ldd	r6, Z+18	; 0x12
    162a:	73 88       	ldd	r7, Z+19	; 0x13
    162c:	84 88       	ldd	r8, Z+20	; 0x14
    162e:	95 88       	ldd	r9, Z+21	; 0x15
    1630:	a6 88       	ldd	r10, Z+22	; 0x16
    1632:	b7 88       	ldd	r11, Z+23	; 0x17
    1634:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__floatdisf>
    1638:	6b 01       	movw	r12, r22
    163a:	7c 01       	movw	r14, r24
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e4       	ldi	r19, 0x40	; 64
    1640:	4c e9       	ldi	r20, 0x9C	; 156
    1642:	55 e4       	ldi	r21, 0x45	; 69
    1644:	c3 01       	movw	r24, r6
    1646:	b2 01       	movw	r22, r4
    1648:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    164c:	a5 01       	movw	r20, r10
    164e:	94 01       	movw	r18, r8
    1650:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1654:	9b 01       	movw	r18, r22
    1656:	ac 01       	movw	r20, r24
    1658:	c7 01       	movw	r24, r14
    165a:	b6 01       	movw	r22, r12
    165c:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1660:	9f 93       	push	r25
    1662:	8f 93       	push	r24
    1664:	7f 93       	push	r23
    1666:	6f 93       	push	r22
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	92 e2       	ldi	r25, 0x22	; 34
    166c:	9f 93       	push	r25
    166e:	8f 93       	push	r24
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	1f 93       	push	r17
    1676:	0f 93       	push	r16
    1678:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    167c:	ed b7       	in	r30, 0x3d	; 61
    167e:	fe b7       	in	r31, 0x3e	; 62
    1680:	3a 96       	adiw	r30, 0x0a	; 10
    1682:	ed bf       	out	0x3d, r30	; 61
    1684:	fe bf       	out	0x3e, r31	; 62
    1686:	8c 17       	cp	r24, r28
    1688:	9d 07       	cpc	r25, r29
    168a:	2c f0       	brlt	.+10     	; 0x1696 <GetSupercapEnergy+0xae>
    168c:	f8 01       	movw	r30, r16
    168e:	10 82       	st	Z, r1
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GetSupercapEnergy+0xb2>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	af 90       	pop	r10
    16ae:	9f 90       	pop	r9
    16b0:	8f 90       	pop	r8
    16b2:	7f 90       	pop	r7
    16b4:	6f 90       	pop	r6
    16b6:	5f 90       	pop	r5
    16b8:	4f 90       	pop	r4
    16ba:	08 95       	ret

000016bc <GetSupercapPower>:
    16bc:	4f 92       	push	r4
    16be:	5f 92       	push	r5
    16c0:	6f 92       	push	r6
    16c2:	7f 92       	push	r7
    16c4:	8f 92       	push	r8
    16c6:	9f 92       	push	r9
    16c8:	af 92       	push	r10
    16ca:	bf 92       	push	r11
    16cc:	cf 92       	push	r12
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	8b 01       	movw	r16, r22
    16de:	ea 01       	movw	r28, r20
    16e0:	60 91 00 29 	lds	r22, 0x2900	; 0x802900 <sSensorDataSnapshot485+0x14>
    16e4:	70 91 01 29 	lds	r23, 0x2901	; 0x802901 <sSensorDataSnapshot485+0x15>
    16e8:	80 91 02 29 	lds	r24, 0x2902	; 0x802902 <sSensorDataSnapshot485+0x16>
    16ec:	90 91 03 29 	lds	r25, 0x2903	; 0x802903 <sSensorDataSnapshot485+0x17>
    16f0:	e5 ee       	ldi	r30, 0xE5	; 229
    16f2:	f9 e2       	ldi	r31, 0x29	; 41
    16f4:	40 88       	ldd	r4, Z+16	; 0x10
    16f6:	51 88       	ldd	r5, Z+17	; 0x11
    16f8:	62 88       	ldd	r6, Z+18	; 0x12
    16fa:	73 88       	ldd	r7, Z+19	; 0x13
    16fc:	84 88       	ldd	r8, Z+20	; 0x14
    16fe:	95 88       	ldd	r9, Z+21	; 0x15
    1700:	a6 88       	ldd	r10, Z+22	; 0x16
    1702:	b7 88       	ldd	r11, Z+23	; 0x17
    1704:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1708:	6b 01       	movw	r12, r22
    170a:	7c 01       	movw	r14, r24
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	53 e4       	ldi	r21, 0x43	; 67
    1714:	c3 01       	movw	r24, r6
    1716:	b2 01       	movw	r22, r4
    1718:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    171c:	a5 01       	movw	r20, r10
    171e:	94 01       	movw	r18, r8
    1720:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1724:	9b 01       	movw	r18, r22
    1726:	ac 01       	movw	r20, r24
    1728:	c7 01       	movw	r24, r14
    172a:	b6 01       	movw	r22, r12
    172c:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1730:	9f 93       	push	r25
    1732:	8f 93       	push	r24
    1734:	7f 93       	push	r23
    1736:	6f 93       	push	r22
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	92 e2       	ldi	r25, 0x22	; 34
    173c:	9f 93       	push	r25
    173e:	8f 93       	push	r24
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	1f 93       	push	r17
    1746:	0f 93       	push	r16
    1748:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    174c:	ed b7       	in	r30, 0x3d	; 61
    174e:	fe b7       	in	r31, 0x3e	; 62
    1750:	3a 96       	adiw	r30, 0x0a	; 10
    1752:	ed bf       	out	0x3d, r30	; 61
    1754:	fe bf       	out	0x3e, r31	; 62
    1756:	8c 17       	cp	r24, r28
    1758:	9d 07       	cpc	r25, r29
    175a:	2c f0       	brlt	.+10     	; 0x1766 <GetSupercapPower+0xaa>
    175c:	f8 01       	movw	r30, r16
    175e:	10 82       	st	Z, r1
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <GetSupercapPower+0xae>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	df 90       	pop	r13
    1778:	cf 90       	pop	r12
    177a:	bf 90       	pop	r11
    177c:	af 90       	pop	r10
    177e:	9f 90       	pop	r9
    1780:	8f 90       	pop	r8
    1782:	7f 90       	pop	r7
    1784:	6f 90       	pop	r6
    1786:	5f 90       	pop	r5
    1788:	4f 90       	pop	r4
    178a:	08 95       	ret

0000178c <GetSupercapCurrent>:
    178c:	8f 92       	push	r8
    178e:	9f 92       	push	r9
    1790:	af 92       	push	r10
    1792:	bf 92       	push	r11
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	8b 01       	movw	r16, r22
    17a6:	ea 01       	movw	r28, r20
    17a8:	60 91 f8 28 	lds	r22, 0x28F8	; 0x8028f8 <sSensorDataSnapshot485+0xc>
    17ac:	70 91 f9 28 	lds	r23, 0x28F9	; 0x8028f9 <sSensorDataSnapshot485+0xd>
    17b0:	80 91 fa 28 	lds	r24, 0x28FA	; 0x8028fa <sSensorDataSnapshot485+0xe>
    17b4:	90 91 fb 28 	lds	r25, 0x28FB	; 0x8028fb <sSensorDataSnapshot485+0xf>
    17b8:	80 90 f9 29 	lds	r8, 0x29F9	; 0x8029f9 <sCal+0x14>
    17bc:	90 90 fa 29 	lds	r9, 0x29FA	; 0x8029fa <sCal+0x15>
    17c0:	a0 90 fb 29 	lds	r10, 0x29FB	; 0x8029fb <sCal+0x16>
    17c4:	b0 90 fc 29 	lds	r11, 0x29FC	; 0x8029fc <sCal+0x17>
    17c8:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    17cc:	6b 01       	movw	r12, r22
    17ce:	7c 01       	movw	r14, r24
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	c5 01       	movw	r24, r10
    17da:	b4 01       	movw	r22, r8
    17dc:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    17e0:	9b 01       	movw	r18, r22
    17e2:	ac 01       	movw	r20, r24
    17e4:	c7 01       	movw	r24, r14
    17e6:	b6 01       	movw	r22, r12
    17e8:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    17ec:	9f 93       	push	r25
    17ee:	8f 93       	push	r24
    17f0:	7f 93       	push	r23
    17f2:	6f 93       	push	r22
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	92 e2       	ldi	r25, 0x22	; 34
    17f8:	9f 93       	push	r25
    17fa:	8f 93       	push	r24
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	1f 93       	push	r17
    1802:	0f 93       	push	r16
    1804:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1808:	ed b7       	in	r30, 0x3d	; 61
    180a:	fe b7       	in	r31, 0x3e	; 62
    180c:	3a 96       	adiw	r30, 0x0a	; 10
    180e:	ed bf       	out	0x3d, r30	; 61
    1810:	fe bf       	out	0x3e, r31	; 62
    1812:	8c 17       	cp	r24, r28
    1814:	9d 07       	cpc	r25, r29
    1816:	2c f0       	brlt	.+10     	; 0x1822 <GetSupercapCurrent+0x96>
    1818:	f8 01       	movw	r30, r16
    181a:	10 82       	st	Z, r1
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <GetSupercapCurrent+0x9a>
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	9f 90       	pop	r9
    183c:	8f 90       	pop	r8
    183e:	08 95       	ret

00001840 <GetSupercapVoltage>:
    1840:	8f 92       	push	r8
    1842:	9f 92       	push	r9
    1844:	af 92       	push	r10
    1846:	bf 92       	push	r11
    1848:	cf 92       	push	r12
    184a:	df 92       	push	r13
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	8b 01       	movw	r16, r22
    185a:	ea 01       	movw	r28, r20
    185c:	60 91 f4 28 	lds	r22, 0x28F4	; 0x8028f4 <sSensorDataSnapshot485+0x8>
    1860:	70 91 f5 28 	lds	r23, 0x28F5	; 0x8028f5 <sSensorDataSnapshot485+0x9>
    1864:	80 91 f6 28 	lds	r24, 0x28F6	; 0x8028f6 <sSensorDataSnapshot485+0xa>
    1868:	90 91 f7 28 	lds	r25, 0x28F7	; 0x8028f7 <sSensorDataSnapshot485+0xb>
    186c:	80 90 f5 29 	lds	r8, 0x29F5	; 0x8029f5 <sCal+0x10>
    1870:	90 90 f6 29 	lds	r9, 0x29F6	; 0x8029f6 <sCal+0x11>
    1874:	a0 90 f7 29 	lds	r10, 0x29F7	; 0x8029f7 <sCal+0x12>
    1878:	b0 90 f8 29 	lds	r11, 0x29F8	; 0x8029f8 <sCal+0x13>
    187c:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1880:	6b 01       	movw	r12, r22
    1882:	7c 01       	movw	r14, r24
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e8       	ldi	r20, 0x80	; 128
    188a:	57 e4       	ldi	r21, 0x47	; 71
    188c:	c5 01       	movw	r24, r10
    188e:	b4 01       	movw	r22, r8
    1890:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1894:	9b 01       	movw	r18, r22
    1896:	ac 01       	movw	r20, r24
    1898:	c7 01       	movw	r24, r14
    189a:	b6 01       	movw	r22, r12
    189c:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    18a0:	9f 93       	push	r25
    18a2:	8f 93       	push	r24
    18a4:	7f 93       	push	r23
    18a6:	6f 93       	push	r22
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	92 e2       	ldi	r25, 0x22	; 34
    18ac:	9f 93       	push	r25
    18ae:	8f 93       	push	r24
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	1f 93       	push	r17
    18b6:	0f 93       	push	r16
    18b8:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    18bc:	ed b7       	in	r30, 0x3d	; 61
    18be:	fe b7       	in	r31, 0x3e	; 62
    18c0:	3a 96       	adiw	r30, 0x0a	; 10
    18c2:	ed bf       	out	0x3d, r30	; 61
    18c4:	fe bf       	out	0x3e, r31	; 62
    18c6:	8c 17       	cp	r24, r28
    18c8:	9d 07       	cpc	r25, r29
    18ca:	2c f0       	brlt	.+10     	; 0x18d6 <GetSupercapVoltage+0x96>
    18cc:	f8 01       	movw	r30, r16
    18ce:	10 82       	st	Z, r1
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GetSupercapVoltage+0x9a>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	df 91       	pop	r29
    18dc:	cf 91       	pop	r28
    18de:	1f 91       	pop	r17
    18e0:	0f 91       	pop	r16
    18e2:	ff 90       	pop	r15
    18e4:	ef 90       	pop	r14
    18e6:	df 90       	pop	r13
    18e8:	cf 90       	pop	r12
    18ea:	bf 90       	pop	r11
    18ec:	af 90       	pop	r10
    18ee:	9f 90       	pop	r9
    18f0:	8f 90       	pop	r8
    18f2:	08 95       	ret

000018f4 <GetFuelCellEnergy>:
    18f4:	4f 92       	push	r4
    18f6:	5f 92       	push	r5
    18f8:	6f 92       	push	r6
    18fa:	7f 92       	push	r7
    18fc:	8f 92       	push	r8
    18fe:	9f 92       	push	r9
    1900:	af 92       	push	r10
    1902:	bf 92       	push	r11
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	8b 01       	movw	r16, r22
    1916:	ea 01       	movw	r28, r20
    1918:	ec ee       	ldi	r30, 0xEC	; 236
    191a:	f8 e2       	ldi	r31, 0x28	; 40
    191c:	20 8d       	ldd	r18, Z+24	; 0x18
    191e:	31 8d       	ldd	r19, Z+25	; 0x19
    1920:	42 8d       	ldd	r20, Z+26	; 0x1a
    1922:	53 8d       	ldd	r21, Z+27	; 0x1b
    1924:	64 8d       	ldd	r22, Z+28	; 0x1c
    1926:	75 8d       	ldd	r23, Z+29	; 0x1d
    1928:	86 8d       	ldd	r24, Z+30	; 0x1e
    192a:	97 8d       	ldd	r25, Z+31	; 0x1f
    192c:	e5 ee       	ldi	r30, 0xE5	; 229
    192e:	f9 e2       	ldi	r31, 0x29	; 41
    1930:	40 84       	ldd	r4, Z+8	; 0x08
    1932:	51 84       	ldd	r5, Z+9	; 0x09
    1934:	62 84       	ldd	r6, Z+10	; 0x0a
    1936:	73 84       	ldd	r7, Z+11	; 0x0b
    1938:	84 84       	ldd	r8, Z+12	; 0x0c
    193a:	95 84       	ldd	r9, Z+13	; 0x0d
    193c:	a6 84       	ldd	r10, Z+14	; 0x0e
    193e:	b7 84       	ldd	r11, Z+15	; 0x0f
    1940:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__floatdisf>
    1944:	6b 01       	movw	r12, r22
    1946:	7c 01       	movw	r14, r24
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e4       	ldi	r19, 0x40	; 64
    194c:	4c e9       	ldi	r20, 0x9C	; 156
    194e:	55 e4       	ldi	r21, 0x45	; 69
    1950:	c3 01       	movw	r24, r6
    1952:	b2 01       	movw	r22, r4
    1954:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1958:	a5 01       	movw	r20, r10
    195a:	94 01       	movw	r18, r8
    195c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1960:	9b 01       	movw	r18, r22
    1962:	ac 01       	movw	r20, r24
    1964:	c7 01       	movw	r24, r14
    1966:	b6 01       	movw	r22, r12
    1968:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    196c:	9f 93       	push	r25
    196e:	8f 93       	push	r24
    1970:	7f 93       	push	r23
    1972:	6f 93       	push	r22
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	92 e2       	ldi	r25, 0x22	; 34
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	1f 93       	push	r17
    1982:	0f 93       	push	r16
    1984:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1988:	ed b7       	in	r30, 0x3d	; 61
    198a:	fe b7       	in	r31, 0x3e	; 62
    198c:	3a 96       	adiw	r30, 0x0a	; 10
    198e:	ed bf       	out	0x3d, r30	; 61
    1990:	fe bf       	out	0x3e, r31	; 62
    1992:	8c 17       	cp	r24, r28
    1994:	9d 07       	cpc	r25, r29
    1996:	2c f0       	brlt	.+10     	; 0x19a2 <GetFuelCellEnergy+0xae>
    1998:	f8 01       	movw	r30, r16
    199a:	10 82       	st	Z, r1
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <GetFuelCellEnergy+0xb2>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    19be:	7f 90       	pop	r7
    19c0:	6f 90       	pop	r6
    19c2:	5f 90       	pop	r5
    19c4:	4f 90       	pop	r4
    19c6:	08 95       	ret

000019c8 <GetFuelCellPower>:
    19c8:	4f 92       	push	r4
    19ca:	5f 92       	push	r5
    19cc:	6f 92       	push	r6
    19ce:	7f 92       	push	r7
    19d0:	8f 92       	push	r8
    19d2:	9f 92       	push	r9
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	8b 01       	movw	r16, r22
    19ea:	ea 01       	movw	r28, r20
    19ec:	60 91 fc 28 	lds	r22, 0x28FC	; 0x8028fc <sSensorDataSnapshot485+0x10>
    19f0:	70 91 fd 28 	lds	r23, 0x28FD	; 0x8028fd <sSensorDataSnapshot485+0x11>
    19f4:	80 91 fe 28 	lds	r24, 0x28FE	; 0x8028fe <sSensorDataSnapshot485+0x12>
    19f8:	90 91 ff 28 	lds	r25, 0x28FF	; 0x8028ff <sSensorDataSnapshot485+0x13>
    19fc:	e5 ee       	ldi	r30, 0xE5	; 229
    19fe:	f9 e2       	ldi	r31, 0x29	; 41
    1a00:	40 84       	ldd	r4, Z+8	; 0x08
    1a02:	51 84       	ldd	r5, Z+9	; 0x09
    1a04:	62 84       	ldd	r6, Z+10	; 0x0a
    1a06:	73 84       	ldd	r7, Z+11	; 0x0b
    1a08:	84 84       	ldd	r8, Z+12	; 0x0c
    1a0a:	95 84       	ldd	r9, Z+13	; 0x0d
    1a0c:	a6 84       	ldd	r10, Z+14	; 0x0e
    1a0e:	b7 84       	ldd	r11, Z+15	; 0x0f
    1a10:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1a14:	6b 01       	movw	r12, r22
    1a16:	7c 01       	movw	r14, r24
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e8       	ldi	r20, 0x80	; 128
    1a1e:	53 e4       	ldi	r21, 0x43	; 67
    1a20:	c3 01       	movw	r24, r6
    1a22:	b2 01       	movw	r22, r4
    1a24:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1a28:	a5 01       	movw	r20, r10
    1a2a:	94 01       	movw	r18, r8
    1a2c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1a30:	9b 01       	movw	r18, r22
    1a32:	ac 01       	movw	r20, r24
    1a34:	c7 01       	movw	r24, r14
    1a36:	b6 01       	movw	r22, r12
    1a38:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1a3c:	9f 93       	push	r25
    1a3e:	8f 93       	push	r24
    1a40:	7f 93       	push	r23
    1a42:	6f 93       	push	r22
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	92 e2       	ldi	r25, 0x22	; 34
    1a48:	9f 93       	push	r25
    1a4a:	8f 93       	push	r24
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	1f 93       	push	r17
    1a52:	0f 93       	push	r16
    1a54:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1a58:	ed b7       	in	r30, 0x3d	; 61
    1a5a:	fe b7       	in	r31, 0x3e	; 62
    1a5c:	3a 96       	adiw	r30, 0x0a	; 10
    1a5e:	ed bf       	out	0x3d, r30	; 61
    1a60:	fe bf       	out	0x3e, r31	; 62
    1a62:	8c 17       	cp	r24, r28
    1a64:	9d 07       	cpc	r25, r29
    1a66:	2c f0       	brlt	.+10     	; 0x1a72 <GetFuelCellPower+0xaa>
    1a68:	f8 01       	movw	r30, r16
    1a6a:	10 82       	st	Z, r1
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GetFuelCellPower+0xae>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	bf 90       	pop	r11
    1a88:	af 90       	pop	r10
    1a8a:	9f 90       	pop	r9
    1a8c:	8f 90       	pop	r8
    1a8e:	7f 90       	pop	r7
    1a90:	6f 90       	pop	r6
    1a92:	5f 90       	pop	r5
    1a94:	4f 90       	pop	r4
    1a96:	08 95       	ret

00001a98 <GetFuelCellCurrent>:
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	8b 01       	movw	r16, r22
    1ab2:	ea 01       	movw	r28, r20
    1ab4:	60 91 f0 28 	lds	r22, 0x28F0	; 0x8028f0 <sSensorDataSnapshot485+0x4>
    1ab8:	70 91 f1 28 	lds	r23, 0x28F1	; 0x8028f1 <sSensorDataSnapshot485+0x5>
    1abc:	80 91 f2 28 	lds	r24, 0x28F2	; 0x8028f2 <sSensorDataSnapshot485+0x6>
    1ac0:	90 91 f3 28 	lds	r25, 0x28F3	; 0x8028f3 <sSensorDataSnapshot485+0x7>
    1ac4:	80 90 f1 29 	lds	r8, 0x29F1	; 0x8029f1 <sCal+0xc>
    1ac8:	90 90 f2 29 	lds	r9, 0x29F2	; 0x8029f2 <sCal+0xd>
    1acc:	a0 90 f3 29 	lds	r10, 0x29F3	; 0x8029f3 <sCal+0xe>
    1ad0:	b0 90 f4 29 	lds	r11, 0x29F4	; 0x8029f4 <sCal+0xf>
    1ad4:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1ad8:	6b 01       	movw	r12, r22
    1ada:	7c 01       	movw	r14, r24
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	57 e4       	ldi	r21, 0x47	; 71
    1ae4:	c5 01       	movw	r24, r10
    1ae6:	b4 01       	movw	r22, r8
    1ae8:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1aec:	9b 01       	movw	r18, r22
    1aee:	ac 01       	movw	r20, r24
    1af0:	c7 01       	movw	r24, r14
    1af2:	b6 01       	movw	r22, r12
    1af4:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1af8:	9f 93       	push	r25
    1afa:	8f 93       	push	r24
    1afc:	7f 93       	push	r23
    1afe:	6f 93       	push	r22
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	92 e2       	ldi	r25, 0x22	; 34
    1b04:	9f 93       	push	r25
    1b06:	8f 93       	push	r24
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	1f 93       	push	r17
    1b0e:	0f 93       	push	r16
    1b10:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1b14:	ed b7       	in	r30, 0x3d	; 61
    1b16:	fe b7       	in	r31, 0x3e	; 62
    1b18:	3a 96       	adiw	r30, 0x0a	; 10
    1b1a:	ed bf       	out	0x3d, r30	; 61
    1b1c:	fe bf       	out	0x3e, r31	; 62
    1b1e:	8c 17       	cp	r24, r28
    1b20:	9d 07       	cpc	r25, r29
    1b22:	2c f0       	brlt	.+10     	; 0x1b2e <GetFuelCellCurrent+0x96>
    1b24:	f8 01       	movw	r30, r16
    1b26:	10 82       	st	Z, r1
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <GetFuelCellCurrent+0x9a>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	df 91       	pop	r29
    1b34:	cf 91       	pop	r28
    1b36:	1f 91       	pop	r17
    1b38:	0f 91       	pop	r16
    1b3a:	ff 90       	pop	r15
    1b3c:	ef 90       	pop	r14
    1b3e:	df 90       	pop	r13
    1b40:	cf 90       	pop	r12
    1b42:	bf 90       	pop	r11
    1b44:	af 90       	pop	r10
    1b46:	9f 90       	pop	r9
    1b48:	8f 90       	pop	r8
    1b4a:	08 95       	ret

00001b4c <GetFuelCellVoltage>:
    1b4c:	8f 92       	push	r8
    1b4e:	9f 92       	push	r9
    1b50:	af 92       	push	r10
    1b52:	bf 92       	push	r11
    1b54:	cf 92       	push	r12
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	8b 01       	movw	r16, r22
    1b66:	ea 01       	movw	r28, r20
    1b68:	60 91 ec 28 	lds	r22, 0x28EC	; 0x8028ec <sSensorDataSnapshot485>
    1b6c:	70 91 ed 28 	lds	r23, 0x28ED	; 0x8028ed <sSensorDataSnapshot485+0x1>
    1b70:	80 91 ee 28 	lds	r24, 0x28EE	; 0x8028ee <sSensorDataSnapshot485+0x2>
    1b74:	90 91 ef 28 	lds	r25, 0x28EF	; 0x8028ef <sSensorDataSnapshot485+0x3>
    1b78:	80 90 ed 29 	lds	r8, 0x29ED	; 0x8029ed <sCal+0x8>
    1b7c:	90 90 ee 29 	lds	r9, 0x29EE	; 0x8029ee <sCal+0x9>
    1b80:	a0 90 ef 29 	lds	r10, 0x29EF	; 0x8029ef <sCal+0xa>
    1b84:	b0 90 f0 29 	lds	r11, 0x29F0	; 0x8029f0 <sCal+0xb>
    1b88:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1b8c:	6b 01       	movw	r12, r22
    1b8e:	7c 01       	movw	r14, r24
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	57 e4       	ldi	r21, 0x47	; 71
    1b98:	c5 01       	movw	r24, r10
    1b9a:	b4 01       	movw	r22, r8
    1b9c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1ba0:	9b 01       	movw	r18, r22
    1ba2:	ac 01       	movw	r20, r24
    1ba4:	c7 01       	movw	r24, r14
    1ba6:	b6 01       	movw	r22, r12
    1ba8:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1bac:	9f 93       	push	r25
    1bae:	8f 93       	push	r24
    1bb0:	7f 93       	push	r23
    1bb2:	6f 93       	push	r22
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	92 e2       	ldi	r25, 0x22	; 34
    1bb8:	9f 93       	push	r25
    1bba:	8f 93       	push	r24
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	1f 93       	push	r17
    1bc2:	0f 93       	push	r16
    1bc4:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1bc8:	ed b7       	in	r30, 0x3d	; 61
    1bca:	fe b7       	in	r31, 0x3e	; 62
    1bcc:	3a 96       	adiw	r30, 0x0a	; 10
    1bce:	ed bf       	out	0x3d, r30	; 61
    1bd0:	fe bf       	out	0x3e, r31	; 62
    1bd2:	8c 17       	cp	r24, r28
    1bd4:	9d 07       	cpc	r25, r29
    1bd6:	2c f0       	brlt	.+10     	; 0x1be2 <GetFuelCellVoltage+0x96>
    1bd8:	f8 01       	movw	r30, r16
    1bda:	10 82       	st	Z, r1
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <GetFuelCellVoltage+0x9a>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	bf 90       	pop	r11
    1bf8:	af 90       	pop	r10
    1bfa:	9f 90       	pop	r9
    1bfc:	8f 90       	pop	r8
    1bfe:	08 95       	ret

00001c00 <GetMotorCurrent>:
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	8b 01       	movw	r16, r22
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	60 91 22 29 	lds	r22, 0x2922	; 0x802922 <sSensorDataSnapshot485+0x36>
    1c10:	70 91 23 29 	lds	r23, 0x2923	; 0x802923 <sSensorDataSnapshot485+0x37>
    1c14:	80 91 24 29 	lds	r24, 0x2924	; 0x802924 <sSensorDataSnapshot485+0x38>
    1c18:	90 91 25 29 	lds	r25, 0x2925	; 0x802925 <sSensorDataSnapshot485+0x39>
    1c1c:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	48 e4       	ldi	r20, 0x48	; 72
    1c26:	5b e4       	ldi	r21, 0x4B	; 75
    1c28:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a e7       	ldi	r20, 0x7A	; 122
    1c32:	5c e4       	ldi	r21, 0x4C	; 76
    1c34:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1c38:	9f 93       	push	r25
    1c3a:	8f 93       	push	r24
    1c3c:	7f 93       	push	r23
    1c3e:	6f 93       	push	r22
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	92 e2       	ldi	r25, 0x22	; 34
    1c44:	9f 93       	push	r25
    1c46:	8f 93       	push	r24
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	1f 93       	push	r17
    1c4e:	0f 93       	push	r16
    1c50:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1c54:	ed b7       	in	r30, 0x3d	; 61
    1c56:	fe b7       	in	r31, 0x3e	; 62
    1c58:	3a 96       	adiw	r30, 0x0a	; 10
    1c5a:	ed bf       	out	0x3d, r30	; 61
    1c5c:	fe bf       	out	0x3e, r31	; 62
    1c5e:	8c 17       	cp	r24, r28
    1c60:	9d 07       	cpc	r25, r29
    1c62:	2c f0       	brlt	.+10     	; 0x1c6e <GetMotorCurrent+0x6e>
    1c64:	f8 01       	movw	r30, r16
    1c66:	10 82       	st	Z, r1
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <GetMotorCurrent+0x72>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	1f 91       	pop	r17
    1c78:	0f 91       	pop	r16
    1c7a:	08 95       	ret

00001c7c <GetMotorVoltage>:
    1c7c:	8f 92       	push	r8
    1c7e:	9f 92       	push	r9
    1c80:	af 92       	push	r10
    1c82:	bf 92       	push	r11
    1c84:	cf 92       	push	r12
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	8b 01       	movw	r16, r22
    1c96:	ea 01       	movw	r28, r20
    1c98:	60 91 1e 29 	lds	r22, 0x291E	; 0x80291e <sSensorDataSnapshot485+0x32>
    1c9c:	70 91 1f 29 	lds	r23, 0x291F	; 0x80291f <sSensorDataSnapshot485+0x33>
    1ca0:	80 91 20 29 	lds	r24, 0x2920	; 0x802920 <sSensorDataSnapshot485+0x34>
    1ca4:	90 91 21 29 	lds	r25, 0x2921	; 0x802921 <sSensorDataSnapshot485+0x35>
    1ca8:	80 90 05 2a 	lds	r8, 0x2A05	; 0x802a05 <sCal+0x20>
    1cac:	90 90 06 2a 	lds	r9, 0x2A06	; 0x802a06 <sCal+0x21>
    1cb0:	a0 90 07 2a 	lds	r10, 0x2A07	; 0x802a07 <sCal+0x22>
    1cb4:	b0 90 08 2a 	lds	r11, 0x2A08	; 0x802a08 <sCal+0x23>
    1cb8:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1cbc:	6b 01       	movw	r12, r22
    1cbe:	7c 01       	movw	r14, r24
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	c5 01       	movw	r24, r10
    1cca:	b4 01       	movw	r22, r8
    1ccc:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1cd0:	9b 01       	movw	r18, r22
    1cd2:	ac 01       	movw	r20, r24
    1cd4:	c7 01       	movw	r24, r14
    1cd6:	b6 01       	movw	r22, r12
    1cd8:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1cdc:	9f 93       	push	r25
    1cde:	8f 93       	push	r24
    1ce0:	7f 93       	push	r23
    1ce2:	6f 93       	push	r22
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	92 e2       	ldi	r25, 0x22	; 34
    1ce8:	9f 93       	push	r25
    1cea:	8f 93       	push	r24
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	1f 93       	push	r17
    1cf2:	0f 93       	push	r16
    1cf4:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1cf8:	ed b7       	in	r30, 0x3d	; 61
    1cfa:	fe b7       	in	r31, 0x3e	; 62
    1cfc:	3a 96       	adiw	r30, 0x0a	; 10
    1cfe:	ed bf       	out	0x3d, r30	; 61
    1d00:	fe bf       	out	0x3e, r31	; 62
    1d02:	8c 17       	cp	r24, r28
    1d04:	9d 07       	cpc	r25, r29
    1d06:	2c f0       	brlt	.+10     	; 0x1d12 <GetMotorVoltage+0x96>
    1d08:	f8 01       	movw	r30, r16
    1d0a:	10 82       	st	Z, r1
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <GetMotorVoltage+0x9a>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
    1d22:	df 90       	pop	r13
    1d24:	cf 90       	pop	r12
    1d26:	bf 90       	pop	r11
    1d28:	af 90       	pop	r10
    1d2a:	9f 90       	pop	r9
    1d2c:	8f 90       	pop	r8
    1d2e:	08 95       	ret

00001d30 <GetWheelDistance>:
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	8b 01       	movw	r16, r22
    1d3a:	ea 01       	movw	r28, r20
    1d3c:	60 91 4a 29 	lds	r22, 0x294A	; 0x80294a <sSensorDataSnapshot485+0x5e>
    1d40:	70 91 4b 29 	lds	r23, 0x294B	; 0x80294b <sSensorDataSnapshot485+0x5f>
    1d44:	80 91 4c 29 	lds	r24, 0x294C	; 0x80294c <sSensorDataSnapshot485+0x60>
    1d48:	90 91 4d 29 	lds	r25, 0x294D	; 0x80294d <sSensorDataSnapshot485+0x61>
    1d4c:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    1d50:	2f ed       	ldi	r18, 0xDF	; 223
    1d52:	36 e9       	ldi	r19, 0x96	; 150
    1d54:	45 e9       	ldi	r20, 0x95	; 149
    1d56:	5d e3       	ldi	r21, 0x3D	; 61
    1d58:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1d5c:	9f 93       	push	r25
    1d5e:	8f 93       	push	r24
    1d60:	7f 93       	push	r23
    1d62:	6f 93       	push	r22
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	92 e2       	ldi	r25, 0x22	; 34
    1d68:	9f 93       	push	r25
    1d6a:	8f 93       	push	r24
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	1f 93       	push	r17
    1d72:	0f 93       	push	r16
    1d74:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1d78:	ed b7       	in	r30, 0x3d	; 61
    1d7a:	fe b7       	in	r31, 0x3e	; 62
    1d7c:	3a 96       	adiw	r30, 0x0a	; 10
    1d7e:	ed bf       	out	0x3d, r30	; 61
    1d80:	fe bf       	out	0x3e, r31	; 62
    1d82:	8c 17       	cp	r24, r28
    1d84:	9d 07       	cpc	r25, r29
    1d86:	2c f0       	brlt	.+10     	; 0x1d92 <GetWheelDistance+0x62>
    1d88:	f8 01       	movw	r30, r16
    1d8a:	10 82       	st	Z, r1
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <GetWheelDistance+0x66>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	08 95       	ret

00001da0 <GetWheelSpeedEVA>:
    1da0:	cf 92       	push	r12
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	8b 01       	movw	r16, r22
    1db2:	ea 01       	movw	r28, r20
    1db4:	60 91 46 29 	lds	r22, 0x2946	; 0x802946 <sSensorDataSnapshot485+0x5a>
    1db8:	70 91 47 29 	lds	r23, 0x2947	; 0x802947 <sSensorDataSnapshot485+0x5b>
    1dbc:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <sSensorDataSnapshot485+0x5c>
    1dc0:	90 91 49 29 	lds	r25, 0x2949	; 0x802949 <sSensorDataSnapshot485+0x5d>
    1dc4:	61 15       	cp	r22, r1
    1dc6:	71 05       	cpc	r23, r1
    1dc8:	81 05       	cpc	r24, r1
    1dca:	91 05       	cpc	r25, r1
    1dcc:	09 f1       	breq	.+66     	; 0x1e10 <GetWheelSpeedEVA+0x70>
    1dce:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	40 e8       	ldi	r20, 0x80	; 128
    1dd8:	57 e3       	ldi	r21, 0x37	; 55
    1dda:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    1dde:	9b 01       	movw	r18, r22
    1de0:	ac 01       	movw	r20, r24
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	78 e5       	ldi	r23, 0x58	; 88
    1de6:	84 ea       	ldi	r24, 0xA4	; 164
    1de8:	94 e4       	ldi	r25, 0x44	; 68
    1dea:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    1dee:	f6 2e       	mov	r15, r22
    1df0:	e7 2e       	mov	r14, r23
    1df2:	d8 2e       	mov	r13, r24
    1df4:	c9 2e       	mov	r12, r25
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 3e 31 	call	0x627c	; 0x627c <__cmpsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	4c f4       	brge	.+18     	; 0x1e18 <GetWheelSpeedEVA+0x78>
    1e06:	f1 2c       	mov	r15, r1
    1e08:	e1 2c       	mov	r14, r1
    1e0a:	d1 2c       	mov	r13, r1
    1e0c:	c1 2c       	mov	r12, r1
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <GetWheelSpeedEVA+0x78>
    1e10:	f1 2c       	mov	r15, r1
    1e12:	e1 2c       	mov	r14, r1
    1e14:	d1 2c       	mov	r13, r1
    1e16:	c1 2c       	mov	r12, r1
    1e18:	cf 92       	push	r12
    1e1a:	df 92       	push	r13
    1e1c:	ef 92       	push	r14
    1e1e:	ff 92       	push	r15
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	92 e2       	ldi	r25, 0x22	; 34
    1e24:	9f 93       	push	r25
    1e26:	8f 93       	push	r24
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	1f 93       	push	r17
    1e2e:	0f 93       	push	r16
    1e30:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <snprintf>
    1e34:	ed b7       	in	r30, 0x3d	; 61
    1e36:	fe b7       	in	r31, 0x3e	; 62
    1e38:	3a 96       	adiw	r30, 0x0a	; 10
    1e3a:	ed bf       	out	0x3d, r30	; 61
    1e3c:	fe bf       	out	0x3e, r31	; 62
    1e3e:	8c 17       	cp	r24, r28
    1e40:	9d 07       	cpc	r25, r29
    1e42:	2c f0       	brlt	.+10     	; 0x1e4e <GetWheelSpeedEVA+0xae>
    1e44:	f8 01       	movw	r30, r16
    1e46:	10 82       	st	Z, r1
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <GetWheelSpeedEVA+0xb2>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	cf 90       	pop	r12
    1e62:	08 95       	ret

00001e64 <InitCoreAnalog>:
    1e64:	df 92       	push	r13
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	80 e2       	ldi	r24, 0x20	; 32
    1e74:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    1e78:	c0 e0       	ldi	r28, 0x00	; 0
    1e7a:	d2 e0       	ldi	r29, 0x02	; 2
    1e7c:	8c 87       	std	Y+12, r24	; 0x0c
    1e7e:	81 e2       	ldi	r24, 0x21	; 33
    1e80:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    1e84:	8d 87       	std	Y+13, r24	; 0x0d
    1e86:	84 e2       	ldi	r24, 0x24	; 36
    1e88:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    1e8c:	00 e4       	ldi	r16, 0x40	; 64
    1e8e:	12 e0       	ldi	r17, 0x02	; 2
    1e90:	f8 01       	movw	r30, r16
    1e92:	84 87       	std	Z+12, r24	; 0x0c
    1e94:	85 e2       	ldi	r24, 0x25	; 37
    1e96:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	85 87       	std	Z+13, r24	; 0x0d
    1e9e:	e0 e0       	ldi	r30, 0x00	; 0
    1ea0:	f6 e0       	ldi	r31, 0x06	; 6
    1ea2:	14 82       	std	Z+4, r1	; 0x04
    1ea4:	10 82       	st	Z, r1
    1ea6:	a0 e2       	ldi	r26, 0x20	; 32
    1ea8:	b6 e0       	ldi	r27, 0x06	; 6
    1eaa:	14 96       	adiw	r26, 0x04	; 4
    1eac:	1c 92       	st	X, r1
    1eae:	14 97       	sbiw	r26, 0x04	; 4
    1eb0:	1c 92       	st	X, r1
    1eb2:	87 e0       	ldi	r24, 0x07	; 7
    1eb4:	80 8b       	std	Z+16, r24	; 0x10
    1eb6:	81 8b       	std	Z+17, r24	; 0x11
    1eb8:	82 8b       	std	Z+18, r24	; 0x12
    1eba:	83 8b       	std	Z+19, r24	; 0x13
    1ebc:	84 8b       	std	Z+20, r24	; 0x14
    1ebe:	85 8b       	std	Z+21, r24	; 0x15
    1ec0:	86 8b       	std	Z+22, r24	; 0x16
    1ec2:	50 96       	adiw	r26, 0x10	; 16
    1ec4:	8c 93       	st	X, r24
    1ec6:	50 97       	sbiw	r26, 0x10	; 16
    1ec8:	51 96       	adiw	r26, 0x11	; 17
    1eca:	8c 93       	st	X, r24
    1ecc:	51 97       	sbiw	r26, 0x11	; 17
    1ece:	52 96       	adiw	r26, 0x12	; 18
    1ed0:	8c 93       	st	X, r24
    1ed2:	52 97       	sbiw	r26, 0x12	; 18
    1ed4:	53 96       	adiw	r26, 0x13	; 19
    1ed6:	8c 93       	st	X, r24
    1ed8:	53 97       	sbiw	r26, 0x13	; 19
    1eda:	54 96       	adiw	r26, 0x14	; 20
    1edc:	8c 93       	st	X, r24
    1ede:	54 97       	sbiw	r26, 0x14	; 20
    1ee0:	55 96       	adiw	r26, 0x15	; 21
    1ee2:	8c 93       	st	X, r24
    1ee4:	55 97       	sbiw	r26, 0x15	; 21
    1ee6:	56 96       	adiw	r26, 0x16	; 22
    1ee8:	8c 93       	st	X, r24
    1eea:	56 97       	sbiw	r26, 0x16	; 22
    1eec:	57 96       	adiw	r26, 0x17	; 23
    1eee:	8c 93       	st	X, r24
    1ef0:	68 94       	set
    1ef2:	dd 24       	eor	r13, r13
    1ef4:	d4 f8       	bld	r13, 4
    1ef6:	d7 8a       	std	Z+23, r13	; 0x17
    1ef8:	d9 82       	std	Y+1, r13	; 0x01
    1efa:	50 e2       	ldi	r21, 0x20	; 32
    1efc:	5a 83       	std	Y+2, r21	; 0x02
    1efe:	46 ec       	ldi	r20, 0xC6	; 198
    1f00:	4b 83       	std	Y+3, r20	; 0x03
    1f02:	33 e0       	ldi	r19, 0x03	; 3
    1f04:	3c 83       	std	Y+4, r19	; 0x04
    1f06:	68 94       	set
    1f08:	ff 24       	eor	r15, r15
    1f0a:	f1 f8       	bld	r15, 1
    1f0c:	f8 a2       	std	Y+32, r15	; 0x20
    1f0e:	f8 a6       	std	Y+40, r15	; 0x28
    1f10:	f8 aa       	std	Y+48, r15	; 0x30
    1f12:	f8 ae       	std	Y+56, r15	; 0x38
    1f14:	89 e2       	ldi	r24, 0x29	; 41
    1f16:	89 a3       	std	Y+33, r24	; 0x21
    1f18:	99 e1       	ldi	r25, 0x19	; 25
    1f1a:	99 a7       	std	Y+41, r25	; 0x29
    1f1c:	91 e3       	ldi	r25, 0x31	; 49
    1f1e:	99 ab       	std	Y+49, r25	; 0x31
    1f20:	21 e6       	ldi	r18, 0x61	; 97
    1f22:	29 af       	std	Y+57, r18	; 0x39
    1f24:	ee 24       	eor	r14, r14
    1f26:	e3 94       	inc	r14
    1f28:	ea a2       	std	Y+34, r14	; 0x22
    1f2a:	e8 82       	st	Y, r14
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	d1 82       	std	Z+1, r13	; 0x01
    1f30:	52 83       	std	Z+2, r21	; 0x02
    1f32:	43 83       	std	Z+3, r20	; 0x03
    1f34:	34 83       	std	Z+4, r19	; 0x04
    1f36:	f0 a2       	std	Z+32, r15	; 0x20
    1f38:	f0 a6       	std	Z+40, r15	; 0x28
    1f3a:	f0 aa       	std	Z+48, r15	; 0x30
    1f3c:	f0 ae       	std	Z+56, r15	; 0x38
    1f3e:	21 a3       	std	Z+33, r18	; 0x21
    1f40:	21 e5       	ldi	r18, 0x51	; 81
    1f42:	21 a7       	std	Z+41, r18	; 0x29
    1f44:	91 ab       	std	Z+49, r25	; 0x31
    1f46:	81 af       	std	Z+57, r24	; 0x39
    1f48:	e0 82       	st	Z, r14
    1f4a:	e0 ea       	ldi	r30, 0xA0	; 160
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	81 60       	ori	r24, 0x01	; 1
    1f52:	82 83       	std	Z+2, r24	; 0x02
    1f54:	e5 ee       	ldi	r30, 0xE5	; 229
    1f56:	f9 e2       	ldi	r31, 0x29	; 41
    1f58:	8b ea       	ldi	r24, 0xAB	; 171
    1f5a:	9a ea       	ldi	r25, 0xAA	; 170
    1f5c:	a6 e2       	ldi	r26, 0x26	; 38
    1f5e:	b2 e4       	ldi	r27, 0x42	; 66
    1f60:	80 87       	std	Z+8, r24	; 0x08
    1f62:	91 87       	std	Z+9, r25	; 0x09
    1f64:	a2 87       	std	Z+10, r26	; 0x0a
    1f66:	b3 87       	std	Z+11, r27	; 0x0b
    1f68:	47 e2       	ldi	r20, 0x27	; 39
    1f6a:	51 e1       	ldi	r21, 0x11	; 17
    1f6c:	64 eb       	ldi	r22, 0xB4	; 180
    1f6e:	72 e4       	ldi	r23, 0x42	; 66
    1f70:	44 87       	std	Z+12, r20	; 0x0c
    1f72:	55 87       	std	Z+13, r21	; 0x0d
    1f74:	66 87       	std	Z+14, r22	; 0x0e
    1f76:	77 87       	std	Z+15, r23	; 0x0f
    1f78:	80 8b       	std	Z+16, r24	; 0x10
    1f7a:	91 8b       	std	Z+17, r25	; 0x11
    1f7c:	a2 8b       	std	Z+18, r26	; 0x12
    1f7e:	b3 8b       	std	Z+19, r27	; 0x13
    1f80:	4f e1       	ldi	r20, 0x1F	; 31
    1f82:	5e e8       	ldi	r21, 0x8E	; 142
    1f84:	60 eb       	ldi	r22, 0xB0	; 176
    1f86:	72 e4       	ldi	r23, 0x42	; 66
    1f88:	44 8b       	std	Z+20, r20	; 0x14
    1f8a:	55 8b       	std	Z+21, r21	; 0x15
    1f8c:	66 8b       	std	Z+22, r22	; 0x16
    1f8e:	77 8b       	std	Z+23, r23	; 0x17
    1f90:	80 a3       	std	Z+32, r24	; 0x20
    1f92:	91 a3       	std	Z+33, r25	; 0x21
    1f94:	a2 a3       	std	Z+34, r26	; 0x22
    1f96:	b3 a3       	std	Z+35, r27	; 0x23
    1f98:	4d e5       	ldi	r20, 0x5D	; 93
    1f9a:	55 e8       	ldi	r21, 0x85	; 133
    1f9c:	6f e6       	ldi	r22, 0x6F	; 111
    1f9e:	72 e4       	ldi	r23, 0x42	; 66
    1fa0:	44 a3       	std	Z+36, r20	; 0x24
    1fa2:	55 a3       	std	Z+37, r21	; 0x25
    1fa4:	66 a3       	std	Z+38, r22	; 0x26
    1fa6:	77 a3       	std	Z+39, r23	; 0x27
    1fa8:	80 a7       	std	Z+40, r24	; 0x28
    1faa:	91 a7       	std	Z+41, r25	; 0x29
    1fac:	a2 a7       	std	Z+42, r26	; 0x2a
    1fae:	b3 a7       	std	Z+43, r27	; 0x2b
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a8 e4       	ldi	r26, 0x48	; 72
    1fb6:	b2 e4       	ldi	r27, 0x42	; 66
    1fb8:	84 a7       	std	Z+44, r24	; 0x2c
    1fba:	95 a7       	std	Z+45, r25	; 0x2d
    1fbc:	a6 a7       	std	Z+46, r26	; 0x2e
    1fbe:	b7 a7       	std	Z+47, r27	; 0x2f
    1fc0:	44 e0       	ldi	r20, 0x04	; 4
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	8d ee       	ldi	r24, 0xED	; 237
    1fca:	99 e2       	ldi	r25, 0x29	; 41
    1fcc:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    1fd0:	44 e0       	ldi	r20, 0x04	; 4
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	60 e1       	ldi	r22, 0x10	; 16
    1fd6:	70 e0       	ldi	r23, 0x00	; 0
    1fd8:	81 ef       	ldi	r24, 0xF1	; 241
    1fda:	99 e2       	ldi	r25, 0x29	; 41
    1fdc:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    1fe0:	44 e0       	ldi	r20, 0x04	; 4
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	60 e2       	ldi	r22, 0x20	; 32
    1fe6:	70 e0       	ldi	r23, 0x00	; 0
    1fe8:	85 ef       	ldi	r24, 0xF5	; 245
    1fea:	99 e2       	ldi	r25, 0x29	; 41
    1fec:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    1ff0:	44 e0       	ldi	r20, 0x04	; 4
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	60 e3       	ldi	r22, 0x30	; 48
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	89 ef       	ldi	r24, 0xF9	; 249
    1ffa:	99 e2       	ldi	r25, 0x29	; 41
    1ffc:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2000:	42 e0       	ldi	r20, 0x02	; 2
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	60 e4       	ldi	r22, 0x40	; 64
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	85 ee       	ldi	r24, 0xE5	; 229
    200a:	99 e2       	ldi	r25, 0x29	; 41
    200c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2010:	42 e0       	ldi	r20, 0x02	; 2
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	64 e4       	ldi	r22, 0x44	; 68
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	87 ee       	ldi	r24, 0xE7	; 231
    201a:	99 e2       	ldi	r25, 0x29	; 41
    201c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2020:	42 e0       	ldi	r20, 0x02	; 2
    2022:	50 e0       	ldi	r21, 0x00	; 0
    2024:	68 e4       	ldi	r22, 0x48	; 72
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	89 ee       	ldi	r24, 0xE9	; 233
    202a:	99 e2       	ldi	r25, 0x29	; 41
    202c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2030:	42 e0       	ldi	r20, 0x02	; 2
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	6c e4       	ldi	r22, 0x4C	; 76
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	8b ee       	ldi	r24, 0xEB	; 235
    203a:	99 e2       	ldi	r25, 0x29	; 41
    203c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2040:	44 e0       	ldi	r20, 0x04	; 4
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	60 e5       	ldi	r22, 0x50	; 80
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	85 e0       	ldi	r24, 0x05	; 5
    204a:	9a e2       	ldi	r25, 0x2A	; 42
    204c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2050:	44 e0       	ldi	r20, 0x04	; 4
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	60 e6       	ldi	r22, 0x60	; 96
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	89 e0       	ldi	r24, 0x09	; 9
    205a:	9a e2       	ldi	r25, 0x2A	; 42
    205c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2060:	44 e0       	ldi	r20, 0x04	; 4
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	60 e7       	ldi	r22, 0x70	; 112
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	8d e0       	ldi	r24, 0x0D	; 13
    206a:	9a e2       	ldi	r25, 0x2A	; 42
    206c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2070:	44 e0       	ldi	r20, 0x04	; 4
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	60 e8       	ldi	r22, 0x80	; 128
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	81 e1       	ldi	r24, 0x11	; 17
    207a:	9a e2       	ldi	r25, 0x2A	; 42
    207c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2080:	42 e0       	ldi	r20, 0x02	; 2
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	60 e9       	ldi	r22, 0x90	; 144
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	8d ef       	ldi	r24, 0xFD	; 253
    208a:	99 e2       	ldi	r25, 0x29	; 41
    208c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2090:	42 e0       	ldi	r20, 0x02	; 2
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	64 e9       	ldi	r22, 0x94	; 148
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	8f ef       	ldi	r24, 0xFF	; 255
    209a:	99 e2       	ldi	r25, 0x29	; 41
    209c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    20a0:	42 e0       	ldi	r20, 0x02	; 2
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	68 e9       	ldi	r22, 0x98	; 152
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	9a e2       	ldi	r25, 0x2A	; 42
    20ac:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    20b0:	42 e0       	ldi	r20, 0x02	; 2
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	6c e9       	ldi	r22, 0x9C	; 156
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	83 e0       	ldi	r24, 0x03	; 3
    20ba:	9a e2       	ldi	r25, 0x2A	; 42
    20bc:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    20c0:	e0 e2       	ldi	r30, 0x20	; 32
    20c2:	f3 e0       	ldi	r31, 0x03	; 3
    20c4:	85 e0       	ldi	r24, 0x05	; 5
    20c6:	80 83       	st	Z, r24
    20c8:	11 82       	std	Z+1, r1	; 0x01
    20ca:	d2 82       	std	Z+2, r13	; 0x02
    20cc:	8e ea       	ldi	r24, 0xAE	; 174
    20ce:	95 e0       	ldi	r25, 0x05	; 5
    20d0:	80 8f       	std	Z+24, r24	; 0x18
    20d2:	91 8f       	std	Z+25, r25	; 0x19
    20d4:	e0 e0       	ldi	r30, 0x00	; 0
    20d6:	f8 e0       	ldi	r31, 0x08	; 8
    20d8:	11 82       	std	Z+1, r1	; 0x01
    20da:	13 82       	std	Z+3, r1	; 0x03
    20dc:	14 82       	std	Z+4, r1	; 0x04
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	99 e1       	ldi	r25, 0x19	; 25
    20e2:	86 a3       	std	Z+38, r24	; 0x26
    20e4:	97 a3       	std	Z+39, r25	; 0x27
    20e6:	16 82       	std	Z+6, r1	; 0x06
    20e8:	17 82       	std	Z+7, r1	; 0x07
    20ea:	10 a2       	std	Z+32, r1	; 0x20
    20ec:	11 a2       	std	Z+33, r1	; 0x21
    20ee:	e0 82       	st	Z, r14
    20f0:	a0 e8       	ldi	r26, 0x80	; 128
    20f2:	b1 e0       	ldi	r27, 0x01	; 1
    20f4:	80 ec       	ldi	r24, 0xC0	; 192
    20f6:	8c 93       	st	X, r24
    20f8:	e0 e4       	ldi	r30, 0x40	; 64
    20fa:	f8 e0       	ldi	r31, 0x08	; 8
    20fc:	8c e0       	ldi	r24, 0x0C	; 12
    20fe:	80 83       	st	Z, r24
    2100:	11 82       	std	Z+1, r1	; 0x01
    2102:	13 82       	std	Z+3, r1	; 0x03
    2104:	14 82       	std	Z+4, r1	; 0x04
    2106:	16 82       	std	Z+6, r1	; 0x06
    2108:	17 82       	std	Z+7, r1	; 0x07
    210a:	e0 86       	std	Z+8, r14	; 0x08
    210c:	8f ef       	ldi	r24, 0xFF	; 255
    210e:	9f ef       	ldi	r25, 0xFF	; 255
    2110:	86 a3       	std	Z+38, r24	; 0x26
    2112:	97 a3       	std	Z+39, r25	; 0x27
    2114:	e0 e4       	ldi	r30, 0x40	; 64
    2116:	f6 e0       	ldi	r31, 0x06	; 6
    2118:	80 e4       	ldi	r24, 0x40	; 64
    211a:	82 83       	std	Z+2, r24	; 0x02
    211c:	e6 8a       	std	Z+22, r14	; 0x16
    211e:	86 e6       	ldi	r24, 0x66	; 102
    2120:	14 96       	adiw	r26, 0x04	; 4
    2122:	8c 93       	st	X, r24
    2124:	14 97       	sbiw	r26, 0x04	; 4
    2126:	1c 96       	adiw	r26, 0x0c	; 12
    2128:	fc 92       	st	X, r15
    212a:	e0 e6       	ldi	r30, 0x60	; 96
    212c:	f6 e0       	ldi	r31, 0x06	; 6
    212e:	80 85       	ldd	r24, Z+8	; 0x08
    2130:	90 85       	ldd	r25, Z+8	; 0x08
    2132:	80 73       	andi	r24, 0x30	; 48
    2134:	21 e0       	ldi	r18, 0x01	; 1
    2136:	80 31       	cpi	r24, 0x10	; 16
    2138:	09 f0       	breq	.+2      	; 0x213c <InitCoreAnalog+0x2d8>
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	21 11       	cpse	r18, r1
    213e:	08 c0       	rjmp	.+16     	; 0x2150 <InitCoreAnalog+0x2ec>
    2140:	90 73       	andi	r25, 0x30	; 48
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	90 32       	cpi	r25, 0x20	; 32
    2146:	09 f0       	breq	.+2      	; 0x214a <InitCoreAnalog+0x2e6>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	88 23       	and	r24, r24
    214c:	09 f4       	brne	.+2      	; 0x2150 <InitCoreAnalog+0x2ec>
    214e:	49 c0       	rjmp	.+146    	; 0x21e2 <InitCoreAnalog+0x37e>
    2150:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2154:	80 73       	andi	r24, 0x30	; 48
    2156:	80 31       	cpi	r24, 0x10	; 16
    2158:	19 f0       	breq	.+6      	; 0x2160 <InitCoreAnalog+0x2fc>
    215a:	8b e0       	ldi	r24, 0x0B	; 11
    215c:	92 e2       	ldi	r25, 0x22	; 34
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <InitCoreAnalog+0x300>
    2160:	86 e0       	ldi	r24, 0x06	; 6
    2162:	92 e2       	ldi	r25, 0x22	; 34
    2164:	21 e0       	ldi	r18, 0x01	; 1
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	48 e5       	ldi	r20, 0x58	; 88
    216a:	59 e0       	ldi	r21, 0x09	; 9
    216c:	60 ed       	ldi	r22, 0xD0	; 208
    216e:	7e e0       	ldi	r23, 0x0E	; 14
    2170:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2174:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2178:	80 73       	andi	r24, 0x30	; 48
    217a:	80 31       	cpi	r24, 0x10	; 16
    217c:	19 f0       	breq	.+6      	; 0x2184 <InitCoreAnalog+0x320>
    217e:	85 e1       	ldi	r24, 0x15	; 21
    2180:	92 e2       	ldi	r25, 0x22	; 34
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <InitCoreAnalog+0x324>
    2184:	80 e1       	ldi	r24, 0x10	; 16
    2186:	92 e2       	ldi	r25, 0x22	; 34
    2188:	21 e0       	ldi	r18, 0x01	; 1
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e0       	ldi	r20, 0x00	; 0
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	68 e9       	ldi	r22, 0x98	; 152
    2192:	7e e0       	ldi	r23, 0x0E	; 14
    2194:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2198:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    219c:	80 73       	andi	r24, 0x30	; 48
    219e:	80 31       	cpi	r24, 0x10	; 16
    21a0:	19 f0       	breq	.+6      	; 0x21a8 <InitCoreAnalog+0x344>
    21a2:	8f e1       	ldi	r24, 0x1F	; 31
    21a4:	92 e2       	ldi	r25, 0x22	; 34
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <InitCoreAnalog+0x348>
    21a8:	8a e1       	ldi	r24, 0x1A	; 26
    21aa:	92 e2       	ldi	r25, 0x22	; 34
    21ac:	21 e0       	ldi	r18, 0x01	; 1
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	6e e3       	ldi	r22, 0x3E	; 62
    21b6:	7e e0       	ldi	r23, 0x0E	; 14
    21b8:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    21bc:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    21c0:	80 73       	andi	r24, 0x30	; 48
    21c2:	80 31       	cpi	r24, 0x10	; 16
    21c4:	19 f0       	breq	.+6      	; 0x21cc <InitCoreAnalog+0x368>
    21c6:	89 e2       	ldi	r24, 0x29	; 41
    21c8:	92 e2       	ldi	r25, 0x22	; 34
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <InitCoreAnalog+0x36c>
    21cc:	84 e2       	ldi	r24, 0x24	; 36
    21ce:	92 e2       	ldi	r25, 0x22	; 34
    21d0:	21 e0       	ldi	r18, 0x01	; 1
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	7e e0       	ldi	r23, 0x0E	; 14
    21dc:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    21e0:	af c0       	rjmp	.+350    	; 0x2340 <InitCoreAnalog+0x4dc>
    21e2:	21 e0       	ldi	r18, 0x01	; 1
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e0       	ldi	r20, 0x00	; 0
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	66 ea       	ldi	r22, 0xA6	; 166
    21ec:	7d e0       	ldi	r23, 0x0D	; 13
    21ee:	8e e2       	ldi	r24, 0x2E	; 46
    21f0:	92 e2       	ldi	r25, 0x22	; 34
    21f2:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    21f6:	21 e0       	ldi	r18, 0x01	; 1
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e0       	ldi	r20, 0x00	; 0
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	6c e4       	ldi	r22, 0x4C	; 76
    2200:	7d e0       	ldi	r23, 0x0D	; 13
    2202:	83 e3       	ldi	r24, 0x33	; 51
    2204:	92 e2       	ldi	r25, 0x22	; 34
    2206:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    220a:	21 e0       	ldi	r18, 0x01	; 1
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	64 ee       	ldi	r22, 0xE4	; 228
    2214:	7c e0       	ldi	r23, 0x0C	; 12
    2216:	88 e3       	ldi	r24, 0x38	; 56
    2218:	92 e2       	ldi	r25, 0x22	; 34
    221a:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    221e:	25 e0       	ldi	r18, 0x05	; 5
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	6a e7       	ldi	r22, 0x7A	; 122
    2228:	7c e0       	ldi	r23, 0x0C	; 12
    222a:	8d e3       	ldi	r24, 0x3D	; 61
    222c:	92 e2       	ldi	r25, 0x22	; 34
    222e:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2232:	21 e0       	ldi	r18, 0x01	; 1
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	60 e2       	ldi	r22, 0x20	; 32
    223c:	7c e0       	ldi	r23, 0x0C	; 12
    223e:	82 e4       	ldi	r24, 0x42	; 66
    2240:	92 e2       	ldi	r25, 0x22	; 34
    2242:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2246:	21 e0       	ldi	r18, 0x01	; 1
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	66 ec       	ldi	r22, 0xC6	; 198
    2250:	7b e0       	ldi	r23, 0x0B	; 11
    2252:	87 e4       	ldi	r24, 0x47	; 71
    2254:	92 e2       	ldi	r25, 0x22	; 34
    2256:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    225a:	21 e0       	ldi	r18, 0x01	; 1
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	6e e5       	ldi	r22, 0x5E	; 94
    2264:	7b e0       	ldi	r23, 0x0B	; 11
    2266:	8c e4       	ldi	r24, 0x4C	; 76
    2268:	92 e2       	ldi	r25, 0x22	; 34
    226a:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    226e:	25 e0       	ldi	r18, 0x05	; 5
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e0       	ldi	r20, 0x00	; 0
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	64 ef       	ldi	r22, 0xF4	; 244
    2278:	7a e0       	ldi	r23, 0x0A	; 10
    227a:	81 e5       	ldi	r24, 0x51	; 81
    227c:	92 e2       	ldi	r25, 0x22	; 34
    227e:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2282:	21 e0       	ldi	r18, 0x01	; 1
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	6c eb       	ldi	r22, 0xBC	; 188
    228c:	7a e0       	ldi	r23, 0x0A	; 10
    228e:	86 e5       	ldi	r24, 0x56	; 86
    2290:	92 e2       	ldi	r25, 0x22	; 34
    2292:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2296:	2a e0       	ldi	r18, 0x0A	; 10
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	6c e7       	ldi	r22, 0x7C	; 124
    22a0:	7a e0       	ldi	r23, 0x0A	; 10
    22a2:	8b e5       	ldi	r24, 0x5B	; 91
    22a4:	92 e2       	ldi	r25, 0x22	; 34
    22a6:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    22aa:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    22ae:	80 73       	andi	r24, 0x30	; 48
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <InitCoreAnalog+0x450>
    22b2:	46 c0       	rjmp	.+140    	; 0x2340 <InitCoreAnalog+0x4dc>
    22b4:	21 e0       	ldi	r18, 0x01	; 1
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	48 e5       	ldi	r20, 0x58	; 88
    22ba:	59 e0       	ldi	r21, 0x09	; 9
    22bc:	6a e1       	ldi	r22, 0x1A	; 26
    22be:	7a e0       	ldi	r23, 0x0A	; 10
    22c0:	86 e0       	ldi	r24, 0x06	; 6
    22c2:	92 e2       	ldi	r25, 0x22	; 34
    22c4:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    22c8:	21 e0       	ldi	r18, 0x01	; 1
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	68 e9       	ldi	r22, 0x98	; 152
    22d2:	7e e0       	ldi	r23, 0x0E	; 14
    22d4:	80 e1       	ldi	r24, 0x10	; 16
    22d6:	92 e2       	ldi	r25, 0x22	; 34
    22d8:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    22dc:	21 e0       	ldi	r18, 0x01	; 1
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e0       	ldi	r20, 0x00	; 0
    22e2:	50 e0       	ldi	r21, 0x00	; 0
    22e4:	6e e3       	ldi	r22, 0x3E	; 62
    22e6:	7e e0       	ldi	r23, 0x0E	; 14
    22e8:	8a e1       	ldi	r24, 0x1A	; 26
    22ea:	92 e2       	ldi	r25, 0x22	; 34
    22ec:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    22f0:	21 e0       	ldi	r18, 0x01	; 1
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	60 e0       	ldi	r22, 0x00	; 0
    22fa:	7e e0       	ldi	r23, 0x0E	; 14
    22fc:	84 e2       	ldi	r24, 0x24	; 36
    22fe:	92 e2       	ldi	r25, 0x22	; 34
    2300:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2304:	2a e0       	ldi	r18, 0x0A	; 10
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e0       	ldi	r20, 0x00	; 0
    230a:	50 e0       	ldi	r21, 0x00	; 0
    230c:	62 ee       	ldi	r22, 0xE2	; 226
    230e:	79 e0       	ldi	r23, 0x09	; 9
    2310:	80 e6       	ldi	r24, 0x60	; 96
    2312:	92 e2       	ldi	r25, 0x22	; 34
    2314:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2318:	25 e0       	ldi	r18, 0x05	; 5
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	60 ea       	ldi	r22, 0xA0	; 160
    2322:	79 e0       	ldi	r23, 0x09	; 9
    2324:	85 e6       	ldi	r24, 0x65	; 101
    2326:	92 e2       	ldi	r25, 0x22	; 34
    2328:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    232c:	25 e0       	ldi	r18, 0x05	; 5
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	6e e5       	ldi	r22, 0x5E	; 94
    2336:	79 e0       	ldi	r23, 0x09	; 9
    2338:	8a e6       	ldi	r24, 0x6A	; 106
    233a:	92 e2       	ldi	r25, 0x22	; 34
    233c:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2340:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2344:	80 73       	andi	r24, 0x30	; 48
    2346:	80 31       	cpi	r24, 0x10	; 16
    2348:	29 f0       	breq	.+10     	; 0x2354 <InitCoreAnalog+0x4f0>
    234a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    234e:	80 73       	andi	r24, 0x30	; 48
    2350:	80 32       	cpi	r24, 0x20	; 32
    2352:	69 f4       	brne	.+26     	; 0x236e <InitCoreAnalog+0x50a>
    2354:	86 e6       	ldi	r24, 0x66	; 102
    2356:	96 ea       	ldi	r25, 0xA6	; 166
    2358:	a7 e5       	ldi	r26, 0x57	; 87
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <sCC2MinSpeed>
    2360:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <sCC2MinSpeed+0x1>
    2364:	a0 93 e0 28 	sts	0x28E0, r26	; 0x8028e0 <sCC2MinSpeed+0x2>
    2368:	b0 93 e1 28 	sts	0x28E1, r27	; 0x8028e1 <sCC2MinSpeed+0x3>
    236c:	0c c0       	rjmp	.+24     	; 0x2386 <InitCoreAnalog+0x522>
    236e:	86 e6       	ldi	r24, 0x66	; 102
    2370:	96 e6       	ldi	r25, 0x66	; 102
    2372:	aa e4       	ldi	r26, 0x4A	; 74
    2374:	b0 e0       	ldi	r27, 0x00	; 0
    2376:	80 93 de 28 	sts	0x28DE, r24	; 0x8028de <sCC2MinSpeed>
    237a:	90 93 df 28 	sts	0x28DF, r25	; 0x8028df <sCC2MinSpeed+0x1>
    237e:	a0 93 e0 28 	sts	0x28E0, r26	; 0x8028e0 <sCC2MinSpeed+0x2>
    2382:	b0 93 e1 28 	sts	0x28E1, r27	; 0x8028e1 <sCC2MinSpeed+0x3>
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	df 90       	pop	r13
    2394:	08 95       	ret

00002396 <CalibrateChannel>:
    2396:	2f 92       	push	r2
    2398:	3f 92       	push	r3
    239a:	4f 92       	push	r4
    239c:	5f 92       	push	r5
    239e:	6f 92       	push	r6
    23a0:	7f 92       	push	r7
    23a2:	8f 92       	push	r8
    23a4:	9f 92       	push	r9
    23a6:	af 92       	push	r10
    23a8:	bf 92       	push	r11
    23aa:	cf 92       	push	r12
    23ac:	df 92       	push	r13
    23ae:	ef 92       	push	r14
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	c2 5a       	subi	r28, 0xA2	; 162
    23c0:	d1 09       	sbc	r29, r1
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	de bf       	out	0x3e, r29	; 62
    23c6:	28 2e       	mov	r2, r24
    23c8:	89 2e       	mov	r8, r25
    23ca:	80 e6       	ldi	r24, 0x60	; 96
    23cc:	e4 e6       	ldi	r30, 0x64	; 100
    23ce:	f0 e2       	ldi	r31, 0x20	; 32
    23d0:	de 01       	movw	r26, r28
    23d2:	11 96       	adiw	r26, 0x01	; 1
    23d4:	01 90       	ld	r0, Z+
    23d6:	0d 92       	st	X+, r0
    23d8:	8a 95       	dec	r24
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <CalibrateChannel+0x3e>
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	80 93 66 29 	sts	0x2966, r24	; 0x802966 <sTakeSnapshot>
    23e2:	80 91 66 29 	lds	r24, 0x2966	; 0x802966 <sTakeSnapshot>
    23e6:	81 11       	cpse	r24, r1
    23e8:	fc cf       	rjmp	.-8      	; 0x23e2 <CalibrateChannel+0x4c>
    23ea:	80 91 c9 29 	lds	r24, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5e>
    23ee:	90 91 ca 29 	lds	r25, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5f>
    23f2:	a0 91 cb 29 	lds	r26, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x60>
    23f6:	b0 91 cc 29 	lds	r27, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x61>
    23fa:	85 36       	cpi	r24, 0x65	; 101
    23fc:	91 05       	cpc	r25, r1
    23fe:	a1 05       	cpc	r26, r1
    2400:	b1 05       	cpc	r27, r1
    2402:	58 f0       	brcs	.+22     	; 0x241a <CalibrateChannel+0x84>
    2404:	22 2d       	mov	r18, r2
    2406:	38 2d       	mov	r19, r8
    2408:	42 e4       	ldi	r20, 0x42	; 66
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	61 e0       	ldi	r22, 0x01	; 1
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	8f e6       	ldi	r24, 0x6F	; 111
    2412:	92 e2       	ldi	r25, 0x22	; 34
    2414:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    2418:	ae c5       	rjmp	.+2908   	; 0x2f76 <CalibrateChannel+0xbe0>
    241a:	22 2d       	mov	r18, r2
    241c:	38 2d       	mov	r19, r8
    241e:	48 e1       	ldi	r20, 0x18	; 24
    2420:	50 e0       	ldi	r21, 0x00	; 0
    2422:	61 e0       	ldi	r22, 0x01	; 1
    2424:	70 e0       	ldi	r23, 0x00	; 0
    2426:	82 eb       	ldi	r24, 0xB2	; 178
    2428:	92 e2       	ldi	r25, 0x22	; 34
    242a:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    242e:	00 e6       	ldi	r16, 0x60	; 96
    2430:	16 e0       	ldi	r17, 0x06	; 6
    2432:	0f 2e       	mov	r0, r31
    2434:	f3 ef       	ldi	r31, 0xF3	; 243
    2436:	ef 2e       	mov	r14, r31
    2438:	f2 e2       	ldi	r31, 0x22	; 34
    243a:	ff 2e       	mov	r15, r31
    243c:	f0 2d       	mov	r31, r0
    243e:	22 2d       	mov	r18, r2
    2440:	38 2d       	mov	r19, r8
    2442:	47 e2       	ldi	r20, 0x27	; 39
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	61 e0       	ldi	r22, 0x01	; 1
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	8b ec       	ldi	r24, 0xCB	; 203
    244c:	92 e2       	ldi	r25, 0x22	; 34
    244e:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    2452:	d1 2c       	mov	r13, r1
    2454:	1f c0       	rjmp	.+62     	; 0x2494 <CalibrateChannel+0xfe>
    2456:	fc 01       	movw	r30, r24
    2458:	ee 0f       	add	r30, r30
    245a:	ff 1f       	adc	r31, r31
    245c:	e8 0f       	add	r30, r24
    245e:	f9 1f       	adc	r31, r25
    2460:	ee 0f       	add	r30, r30
    2462:	ff 1f       	adc	r31, r31
    2464:	ee 0f       	add	r30, r30
    2466:	ff 1f       	adc	r31, r31
    2468:	21 e0       	ldi	r18, 0x01	; 1
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	2c 0f       	add	r18, r28
    246e:	3d 1f       	adc	r19, r29
    2470:	e2 0f       	add	r30, r18
    2472:	f3 1f       	adc	r31, r19
    2474:	21 81       	ldd	r18, Z+1	; 0x01
    2476:	2f 93       	push	r18
    2478:	20 81       	ld	r18, Z
    247a:	2f 93       	push	r18
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	9f 93       	push	r25
    2480:	8f 93       	push	r24
    2482:	ff 92       	push	r15
    2484:	ef 92       	push	r14
    2486:	8f 92       	push	r8
    2488:	2f 92       	push	r2
    248a:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    248e:	d3 94       	inc	r13
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	de bf       	out	0x3e, r29	; 62
    2494:	8d 2d       	mov	r24, r13
    2496:	0d 2c       	mov	r0, r13
    2498:	00 0c       	add	r0, r0
    249a:	99 0b       	sbc	r25, r25
    249c:	d8 01       	movw	r26, r16
    249e:	18 96       	adiw	r26, 0x08	; 8
    24a0:	2c 91       	ld	r18, X
    24a2:	18 97       	sbiw	r26, 0x08	; 8
    24a4:	18 96       	adiw	r26, 0x08	; 8
    24a6:	3c 91       	ld	r19, X
    24a8:	20 73       	andi	r18, 0x30	; 48
    24aa:	41 e0       	ldi	r20, 0x01	; 1
    24ac:	20 31       	cpi	r18, 0x10	; 16
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <CalibrateChannel+0x11c>
    24b0:	40 e0       	ldi	r20, 0x00	; 0
    24b2:	41 11       	cpse	r20, r1
    24b4:	0a c0       	rjmp	.+20     	; 0x24ca <CalibrateChannel+0x134>
    24b6:	30 73       	andi	r19, 0x30	; 48
    24b8:	21 e0       	ldi	r18, 0x01	; 1
    24ba:	30 32       	cpi	r19, 0x20	; 32
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <CalibrateChannel+0x12a>
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	21 11       	cpse	r18, r1
    24c2:	03 c0       	rjmp	.+6      	; 0x24ca <CalibrateChannel+0x134>
    24c4:	28 e0       	ldi	r18, 0x08	; 8
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <CalibrateChannel+0x138>
    24ca:	24 e0       	ldi	r18, 0x04	; 4
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	82 17       	cp	r24, r18
    24d0:	93 07       	cpc	r25, r19
    24d2:	0c f2       	brlt	.-126    	; 0x2456 <CalibrateChannel+0xc0>
    24d4:	22 2d       	mov	r18, r2
    24d6:	38 2d       	mov	r19, r8
    24d8:	43 e0       	ldi	r20, 0x03	; 3
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	70 e0       	ldi	r23, 0x00	; 0
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
    24e2:	92 e2       	ldi	r25, 0x22	; 34
    24e4:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <CalibrateChannel+0x158>
    24ea:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
    24ee:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <CanRead_Ctrl>
    24f2:	81 11       	cpse	r24, r1
    24f4:	fa cf       	rjmp	.-12     	; 0x24ea <CalibrateChannel+0x154>
    24f6:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
    24fa:	0f 2e       	mov	r0, r31
    24fc:	ff ec       	ldi	r31, 0xCF	; 207
    24fe:	cf 2e       	mov	r12, r31
    2500:	f0 2d       	mov	r31, r0
    2502:	c8 0e       	add	r12, r24
    2504:	22 2d       	mov	r18, r2
    2506:	38 2d       	mov	r19, r8
    2508:	42 e0       	ldi	r20, 0x02	; 2
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	85 e2       	ldi	r24, 0x25	; 37
    2512:	94 e2       	ldi	r25, 0x24	; 36
    2514:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    2518:	cd 14       	cp	r12, r13
    251a:	1c f4       	brge	.+6      	; 0x2522 <CalibrateChannel+0x18c>
    251c:	cc 20       	and	r12, r12
    251e:	0c f0       	brlt	.+2      	; 0x2522 <CalibrateChannel+0x18c>
    2520:	48 c3       	rjmp	.+1680   	; 0x2bb2 <CalibrateChannel+0x81c>
    2522:	22 2d       	mov	r18, r2
    2524:	38 2d       	mov	r19, r8
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	83 e0       	ldi	r24, 0x03	; 3
    2530:	93 e2       	ldi	r25, 0x23	; 35
    2532:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    2536:	83 cf       	rjmp	.-250    	; 0x243e <CalibrateChannel+0xa8>
    2538:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
    253c:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <CanRead_Ctrl>
    2540:	81 11       	cpse	r24, r1
    2542:	fa cf       	rjmp	.-12     	; 0x2538 <CalibrateChannel+0x1a2>
    2544:	c3 2c       	mov	r12, r3
    2546:	03 2c       	mov	r0, r3
    2548:	00 0c       	add	r0, r0
    254a:	dd 08       	sbc	r13, r13
    254c:	9f 92       	push	r9
    254e:	af 92       	push	r10
    2550:	c6 01       	movw	r24, r12
    2552:	01 96       	adiw	r24, 0x01	; 1
    2554:	9f 93       	push	r25
    2556:	8f 93       	push	r24
    2558:	e4 e2       	ldi	r30, 0x24	; 36
    255a:	f3 e2       	ldi	r31, 0x23	; 35
    255c:	ff 93       	push	r31
    255e:	ef 93       	push	r30
    2560:	8f 92       	push	r8
    2562:	2f 92       	push	r2
    2564:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	41 2c       	mov	r4, r1
    256e:	51 2c       	mov	r5, r1
    2570:	32 01       	movw	r6, r4
    2572:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
    2576:	18 2f       	mov	r17, r24
    2578:	08 2e       	mov	r0, r24
    257a:	00 0c       	add	r0, r0
    257c:	99 0b       	sbc	r25, r25
    257e:	c0 97       	sbiw	r24, 0x30	; 48
    2580:	0a 97       	sbiw	r24, 0x0a	; 10
    2582:	08 f0       	brcs	.+2      	; 0x2586 <CalibrateChannel+0x1f0>
    2584:	8a c3       	rjmp	.+1812   	; 0x2c9a <CalibrateChannel+0x904>
    2586:	62 2d       	mov	r22, r2
    2588:	78 2d       	mov	r23, r8
    258a:	81 2f       	mov	r24, r17
    258c:	01 2e       	mov	r0, r17
    258e:	00 0c       	add	r0, r0
    2590:	99 0b       	sbc	r25, r25
    2592:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    2596:	44 0c       	add	r4, r4
    2598:	55 1c       	adc	r5, r5
    259a:	66 1c       	adc	r6, r6
    259c:	77 1c       	adc	r7, r7
    259e:	d3 01       	movw	r26, r6
    25a0:	c2 01       	movw	r24, r4
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	aa 1f       	adc	r26, r26
    25a8:	bb 1f       	adc	r27, r27
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	aa 1f       	adc	r26, r26
    25b0:	bb 1f       	adc	r27, r27
    25b2:	48 0e       	add	r4, r24
    25b4:	59 1e       	adc	r5, r25
    25b6:	6a 1e       	adc	r6, r26
    25b8:	7b 1e       	adc	r7, r27
    25ba:	81 2f       	mov	r24, r17
    25bc:	11 0f       	add	r17, r17
    25be:	99 0b       	sbc	r25, r25
    25c0:	aa 0b       	sbc	r26, r26
    25c2:	bb 0b       	sbc	r27, r27
    25c4:	48 0e       	add	r4, r24
    25c6:	59 1e       	adc	r5, r25
    25c8:	6a 1e       	adc	r6, r26
    25ca:	7b 1e       	adc	r7, r27
    25cc:	90 e3       	ldi	r25, 0x30	; 48
    25ce:	49 1a       	sub	r4, r25
    25d0:	51 08       	sbc	r5, r1
    25d2:	61 08       	sbc	r6, r1
    25d4:	71 08       	sbc	r7, r1
    25d6:	cd cf       	rjmp	.-102    	; 0x2572 <CalibrateChannel+0x1dc>
    25d8:	80 91 66 29 	lds	r24, 0x2966	; 0x802966 <sTakeSnapshot>
    25dc:	81 11       	cpse	r24, r1
    25de:	fc cf       	rjmp	.-8      	; 0x25d8 <CalibrateChannel+0x242>
    25e0:	cd 56       	subi	r28, 0x6D	; 109
    25e2:	df 4f       	sbci	r29, 0xFF	; 255
    25e4:	a8 81       	ld	r26, Y
    25e6:	b9 81       	ldd	r27, Y+1	; 0x01
    25e8:	c3 59       	subi	r28, 0x93	; 147
    25ea:	d0 40       	sbci	r29, 0x00	; 0
    25ec:	ed 91       	ld	r30, X+
    25ee:	fc 91       	ld	r31, X
    25f0:	60 81       	ld	r22, Z
    25f2:	71 81       	ldd	r23, Z+1	; 0x01
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	57 e3       	ldi	r21, 0x37	; 55
    2604:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    2608:	2b 01       	movw	r4, r22
    260a:	3c 01       	movw	r6, r24
    260c:	cc 0c       	add	r12, r12
    260e:	dd 1c       	adc	r13, r13
    2610:	cc 0c       	add	r12, r12
    2612:	dd 1c       	adc	r13, r13
    2614:	e1 e6       	ldi	r30, 0x61	; 97
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	ec 0f       	add	r30, r28
    261a:	fd 1f       	adc	r31, r29
    261c:	ec 0d       	add	r30, r12
    261e:	fd 1d       	adc	r31, r13
    2620:	60 83       	st	Z, r22
    2622:	71 83       	std	Z+1, r23	; 0x01
    2624:	82 83       	std	Z+2, r24	; 0x02
    2626:	93 83       	std	Z+3, r25	; 0x03
    2628:	c9 56       	subi	r28, 0x69	; 105
    262a:	df 4f       	sbci	r29, 0xFF	; 255
    262c:	e8 81       	ld	r30, Y
    262e:	f9 81       	ldd	r31, Y+1	; 0x01
    2630:	c7 59       	subi	r28, 0x97	; 151
    2632:	d0 40       	sbci	r29, 0x00	; 0
    2634:	c0 80       	ld	r12, Z
    2636:	d1 80       	ldd	r13, Z+1	; 0x01
    2638:	d6 01       	movw	r26, r12
    263a:	8d 91       	ld	r24, X+
    263c:	9d 91       	ld	r25, X+
    263e:	0d 90       	ld	r0, X+
    2640:	bc 91       	ld	r27, X
    2642:	a0 2d       	mov	r26, r0
    2644:	c1 57       	subi	r28, 0x71	; 113
    2646:	df 4f       	sbci	r29, 0xFF	; 255
    2648:	88 83       	st	Y, r24
    264a:	99 83       	std	Y+1, r25	; 0x01
    264c:	aa 83       	std	Y+2, r26	; 0x02
    264e:	bb 83       	std	Y+3, r27	; 0x03
    2650:	cf 58       	subi	r28, 0x8F	; 143
    2652:	d0 40       	sbci	r29, 0x00	; 0
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a e7       	ldi	r20, 0x7A	; 122
    265a:	54 e4       	ldi	r21, 0x44	; 68
    265c:	c3 01       	movw	r24, r6
    265e:	b2 01       	movw	r22, r4
    2660:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    2664:	9f 93       	push	r25
    2666:	8f 93       	push	r24
    2668:	7f 93       	push	r23
    266a:	6f 93       	push	r22
    266c:	c1 57       	subi	r28, 0x71	; 113
    266e:	df 4f       	sbci	r29, 0xFF	; 255
    2670:	28 81       	ld	r18, Y
    2672:	39 81       	ldd	r19, Y+1	; 0x01
    2674:	4a 81       	ldd	r20, Y+2	; 0x02
    2676:	5b 81       	ldd	r21, Y+3	; 0x03
    2678:	cf 58       	subi	r28, 0x8F	; 143
    267a:	d0 40       	sbci	r29, 0x00	; 0
    267c:	c3 01       	movw	r24, r6
    267e:	b2 01       	movw	r22, r4
    2680:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    2684:	9f 93       	push	r25
    2686:	8f 93       	push	r24
    2688:	7f 93       	push	r23
    268a:	6f 93       	push	r22
    268c:	1f 93       	push	r17
    268e:	0f 93       	push	r16
    2690:	ff 92       	push	r15
    2692:	ef 92       	push	r14
    2694:	e9 e5       	ldi	r30, 0x59	; 89
    2696:	f3 e2       	ldi	r31, 0x23	; 35
    2698:	ff 93       	push	r31
    269a:	ef 93       	push	r30
    269c:	8f 92       	push	r8
    269e:	2f 92       	push	r2
    26a0:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    26a4:	cd bf       	out	0x3d, r28	; 61
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
    26ac:	98 2f       	mov	r25, r24
    26ae:	89 37       	cpi	r24, 0x79	; 121
    26b0:	09 f4       	brne	.+2      	; 0x26b4 <CalibrateChannel+0x31e>
    26b2:	54 c3       	rjmp	.+1704   	; 0x2d5c <CalibrateChannel+0x9c6>
    26b4:	89 35       	cpi	r24, 0x59	; 89
    26b6:	09 f4       	brne	.+2      	; 0x26ba <CalibrateChannel+0x324>
    26b8:	14 c3       	rjmp	.+1576   	; 0x2ce2 <CalibrateChannel+0x94c>
    26ba:	8f 7d       	andi	r24, 0xDF	; 223
    26bc:	8e 34       	cpi	r24, 0x4E	; 78
    26be:	09 f4       	brne	.+2      	; 0x26c2 <CalibrateChannel+0x32c>
    26c0:	22 c3       	rjmp	.+1604   	; 0x2d06 <CalibrateChannel+0x970>
    26c2:	9b 31       	cpi	r25, 0x1B	; 27
    26c4:	89 f7       	brne	.-30     	; 0x26a8 <CalibrateChannel+0x312>
    26c6:	38 c3       	rjmp	.+1648   	; 0x2d38 <CalibrateChannel+0x9a2>
    26c8:	33 94       	inc	r3
    26ca:	94 e0       	ldi	r25, 0x04	; 4
    26cc:	93 15       	cp	r25, r3
    26ce:	d4 f0       	brlt	.+52     	; 0x2704 <CalibrateChannel+0x36e>
    26d0:	22 2d       	mov	r18, r2
    26d2:	38 2d       	mov	r19, r8
    26d4:	47 e2       	ldi	r20, 0x27	; 39
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	61 e0       	ldi	r22, 0x01	; 1
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	8d ea       	ldi	r24, 0xAD	; 173
    26de:	93 e2       	ldi	r25, 0x23	; 35
    26e0:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    26e4:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
    26e8:	98 2f       	mov	r25, r24
    26ea:	89 37       	cpi	r24, 0x79	; 121
    26ec:	09 f4       	brne	.+2      	; 0x26f0 <CalibrateChannel+0x35a>
    26ee:	48 c3       	rjmp	.+1680   	; 0x2d80 <CalibrateChannel+0x9ea>
    26f0:	89 35       	cpi	r24, 0x59	; 89
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <CalibrateChannel+0x360>
    26f4:	57 c3       	rjmp	.+1710   	; 0x2da4 <CalibrateChannel+0xa0e>
    26f6:	8f 7d       	andi	r24, 0xDF	; 223
    26f8:	8e 34       	cpi	r24, 0x4E	; 78
    26fa:	09 f4       	brne	.+2      	; 0x26fe <CalibrateChannel+0x368>
    26fc:	65 c3       	rjmp	.+1738   	; 0x2dc8 <CalibrateChannel+0xa32>
    26fe:	9b 31       	cpi	r25, 0x1B	; 27
    2700:	89 f7       	brne	.-30     	; 0x26e4 <CalibrateChannel+0x34e>
    2702:	62 c3       	rjmp	.+1732   	; 0x2dc8 <CalibrateChannel+0xa32>
    2704:	a1 e0       	ldi	r26, 0x01	; 1
    2706:	a3 15       	cp	r26, r3
    2708:	1c f4       	brge	.+6      	; 0x2710 <CalibrateChannel+0x37a>
    270a:	13 14       	cp	r1, r3
    270c:	64 f0       	brlt	.+24     	; 0x2726 <CalibrateChannel+0x390>
    270e:	cc c3       	rjmp	.+1944   	; 0x2ea8 <CalibrateChannel+0xb12>
    2710:	22 2d       	mov	r18, r2
    2712:	38 2d       	mov	r19, r8
    2714:	42 e5       	ldi	r20, 0x52	; 82
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	61 e0       	ldi	r22, 0x01	; 1
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	85 ed       	ldi	r24, 0xD5	; 213
    271e:	93 e2       	ldi	r25, 0x23	; 35
    2720:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    2724:	28 c4       	rjmp	.+2128   	; 0x2f76 <CalibrateChannel+0xbe0>
    2726:	3e 01       	movw	r6, r28
    2728:	b5 e7       	ldi	r27, 0x75	; 117
    272a:	6b 0e       	add	r6, r27
    272c:	71 1c       	adc	r7, r1
    272e:	5e 01       	movw	r10, r28
    2730:	e1 e6       	ldi	r30, 0x61	; 97
    2732:	ae 0e       	add	r10, r30
    2734:	b1 1c       	adc	r11, r1
    2736:	75 01       	movw	r14, r10
    2738:	83 01       	movw	r16, r6
    273a:	cd 56       	subi	r28, 0x6D	; 109
    273c:	df 4f       	sbci	r29, 0xFF	; 255
    273e:	18 82       	st	Y, r1
    2740:	19 82       	std	Y+1, r1	; 0x01
    2742:	1a 82       	std	Y+2, r1	; 0x02
    2744:	1b 82       	std	Y+3, r1	; 0x03
    2746:	c3 59       	subi	r28, 0x93	; 147
    2748:	d0 40       	sbci	r29, 0x00	; 0
    274a:	c1 57       	subi	r28, 0x71	; 113
    274c:	df 4f       	sbci	r29, 0xFF	; 255
    274e:	18 82       	st	Y, r1
    2750:	19 82       	std	Y+1, r1	; 0x01
    2752:	1a 82       	std	Y+2, r1	; 0x02
    2754:	1b 82       	std	Y+3, r1	; 0x03
    2756:	cf 58       	subi	r28, 0x8F	; 143
    2758:	d0 40       	sbci	r29, 0x00	; 0
    275a:	91 2c       	mov	r9, r1
    275c:	d8 01       	movw	r26, r16
    275e:	2d 91       	ld	r18, X+
    2760:	3d 91       	ld	r19, X+
    2762:	4d 91       	ld	r20, X+
    2764:	5d 91       	ld	r21, X+
    2766:	8d 01       	movw	r16, r26
    2768:	c1 57       	subi	r28, 0x71	; 113
    276a:	df 4f       	sbci	r29, 0xFF	; 255
    276c:	68 81       	ld	r22, Y
    276e:	79 81       	ldd	r23, Y+1	; 0x01
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	9b 81       	ldd	r25, Y+3	; 0x03
    2774:	cf 58       	subi	r28, 0x8F	; 143
    2776:	d0 40       	sbci	r29, 0x00	; 0
    2778:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    277c:	c1 57       	subi	r28, 0x71	; 113
    277e:	df 4f       	sbci	r29, 0xFF	; 255
    2780:	68 83       	st	Y, r22
    2782:	79 83       	std	Y+1, r23	; 0x01
    2784:	8a 83       	std	Y+2, r24	; 0x02
    2786:	9b 83       	std	Y+3, r25	; 0x03
    2788:	cf 58       	subi	r28, 0x8F	; 143
    278a:	d0 40       	sbci	r29, 0x00	; 0
    278c:	f7 01       	movw	r30, r14
    278e:	21 91       	ld	r18, Z+
    2790:	31 91       	ld	r19, Z+
    2792:	41 91       	ld	r20, Z+
    2794:	51 91       	ld	r21, Z+
    2796:	7f 01       	movw	r14, r30
    2798:	cd 56       	subi	r28, 0x6D	; 109
    279a:	df 4f       	sbci	r29, 0xFF	; 255
    279c:	68 81       	ld	r22, Y
    279e:	79 81       	ldd	r23, Y+1	; 0x01
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	9b 81       	ldd	r25, Y+3	; 0x03
    27a4:	c3 59       	subi	r28, 0x93	; 147
    27a6:	d0 40       	sbci	r29, 0x00	; 0
    27a8:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    27ac:	cd 56       	subi	r28, 0x6D	; 109
    27ae:	df 4f       	sbci	r29, 0xFF	; 255
    27b0:	68 83       	st	Y, r22
    27b2:	79 83       	std	Y+1, r23	; 0x01
    27b4:	8a 83       	std	Y+2, r24	; 0x02
    27b6:	9b 83       	std	Y+3, r25	; 0x03
    27b8:	c3 59       	subi	r28, 0x93	; 147
    27ba:	d0 40       	sbci	r29, 0x00	; 0
    27bc:	93 94       	inc	r9
    27be:	39 10       	cpse	r3, r9
    27c0:	cd cf       	rjmp	.-102    	; 0x275c <CalibrateChannel+0x3c6>
    27c2:	17 c3       	rjmp	.+1582   	; 0x2df2 <CalibrateChannel+0xa5c>
    27c4:	d3 01       	movw	r26, r6
    27c6:	6d 91       	ld	r22, X+
    27c8:	7d 91       	ld	r23, X+
    27ca:	8d 91       	ld	r24, X+
    27cc:	9d 91       	ld	r25, X+
    27ce:	3d 01       	movw	r6, r26
    27d0:	20 2f       	mov	r18, r16
    27d2:	3f 2d       	mov	r19, r15
    27d4:	4d 2d       	mov	r20, r13
    27d6:	5e 2d       	mov	r21, r14
    27d8:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    27dc:	c1 57       	subi	r28, 0x71	; 113
    27de:	df 4f       	sbci	r29, 0xFF	; 255
    27e0:	68 83       	st	Y, r22
    27e2:	79 83       	std	Y+1, r23	; 0x01
    27e4:	8a 83       	std	Y+2, r24	; 0x02
    27e6:	9b 83       	std	Y+3, r25	; 0x03
    27e8:	cf 58       	subi	r28, 0x8F	; 143
    27ea:	d0 40       	sbci	r29, 0x00	; 0
    27ec:	9b 01       	movw	r18, r22
    27ee:	ac 01       	movw	r20, r24
    27f0:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    27f4:	9b 01       	movw	r18, r22
    27f6:	ac 01       	movw	r20, r24
    27f8:	cd 56       	subi	r28, 0x6D	; 109
    27fa:	df 4f       	sbci	r29, 0xFF	; 255
    27fc:	68 81       	ld	r22, Y
    27fe:	79 81       	ldd	r23, Y+1	; 0x01
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	9b 81       	ldd	r25, Y+3	; 0x03
    2804:	c3 59       	subi	r28, 0x93	; 147
    2806:	d0 40       	sbci	r29, 0x00	; 0
    2808:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    280c:	cd 56       	subi	r28, 0x6D	; 109
    280e:	df 4f       	sbci	r29, 0xFF	; 255
    2810:	68 83       	st	Y, r22
    2812:	79 83       	std	Y+1, r23	; 0x01
    2814:	8a 83       	std	Y+2, r24	; 0x02
    2816:	9b 83       	std	Y+3, r25	; 0x03
    2818:	c3 59       	subi	r28, 0x93	; 147
    281a:	d0 40       	sbci	r29, 0x00	; 0
    281c:	f5 01       	movw	r30, r10
    281e:	61 91       	ld	r22, Z+
    2820:	71 91       	ld	r23, Z+
    2822:	81 91       	ld	r24, Z+
    2824:	91 91       	ld	r25, Z+
    2826:	5f 01       	movw	r10, r30
    2828:	c1 56       	subi	r28, 0x61	; 97
    282a:	df 4f       	sbci	r29, 0xFF	; 255
    282c:	28 81       	ld	r18, Y
    282e:	cf 59       	subi	r28, 0x9F	; 159
    2830:	d0 40       	sbci	r29, 0x00	; 0
    2832:	39 2d       	mov	r19, r9
    2834:	44 2d       	mov	r20, r4
    2836:	55 2d       	mov	r21, r5
    2838:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    283c:	c1 57       	subi	r28, 0x71	; 113
    283e:	df 4f       	sbci	r29, 0xFF	; 255
    2840:	28 81       	ld	r18, Y
    2842:	39 81       	ldd	r19, Y+1	; 0x01
    2844:	4a 81       	ldd	r20, Y+2	; 0x02
    2846:	5b 81       	ldd	r21, Y+3	; 0x03
    2848:	cf 58       	subi	r28, 0x8F	; 143
    284a:	d0 40       	sbci	r29, 0x00	; 0
    284c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    2850:	9b 01       	movw	r18, r22
    2852:	ac 01       	movw	r20, r24
    2854:	c9 56       	subi	r28, 0x69	; 105
    2856:	df 4f       	sbci	r29, 0xFF	; 255
    2858:	68 81       	ld	r22, Y
    285a:	79 81       	ldd	r23, Y+1	; 0x01
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	9b 81       	ldd	r25, Y+3	; 0x03
    2860:	c7 59       	subi	r28, 0x97	; 151
    2862:	d0 40       	sbci	r29, 0x00	; 0
    2864:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2868:	c9 56       	subi	r28, 0x69	; 105
    286a:	df 4f       	sbci	r29, 0xFF	; 255
    286c:	68 83       	st	Y, r22
    286e:	79 83       	std	Y+1, r23	; 0x01
    2870:	8a 83       	std	Y+2, r24	; 0x02
    2872:	9b 83       	std	Y+3, r25	; 0x03
    2874:	c7 59       	subi	r28, 0x97	; 151
    2876:	d0 40       	sbci	r29, 0x00	; 0
    2878:	1f 5f       	subi	r17, 0xFF	; 255
    287a:	31 12       	cpse	r3, r17
    287c:	a3 cf       	rjmp	.-186    	; 0x27c4 <CalibrateChannel+0x42e>
    287e:	cf 55       	subi	r28, 0x5F	; 95
    2880:	df 4f       	sbci	r29, 0xFF	; 255
    2882:	c8 80       	ld	r12, Y
    2884:	d9 80       	ldd	r13, Y+1	; 0x01
    2886:	c1 5a       	subi	r28, 0xA1	; 161
    2888:	d0 40       	sbci	r29, 0x00	; 0
    288a:	cd 56       	subi	r28, 0x6D	; 109
    288c:	df 4f       	sbci	r29, 0xFF	; 255
    288e:	28 81       	ld	r18, Y
    2890:	39 81       	ldd	r19, Y+1	; 0x01
    2892:	4a 81       	ldd	r20, Y+2	; 0x02
    2894:	5b 81       	ldd	r21, Y+3	; 0x03
    2896:	c3 59       	subi	r28, 0x93	; 147
    2898:	d0 40       	sbci	r29, 0x00	; 0
    289a:	c9 56       	subi	r28, 0x69	; 105
    289c:	df 4f       	sbci	r29, 0xFF	; 255
    289e:	68 81       	ld	r22, Y
    28a0:	79 81       	ldd	r23, Y+1	; 0x01
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	9b 81       	ldd	r25, Y+3	; 0x03
    28a6:	c7 59       	subi	r28, 0x97	; 151
    28a8:	d0 40       	sbci	r29, 0x00	; 0
    28aa:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    28ae:	c1 57       	subi	r28, 0x71	; 113
    28b0:	df 4f       	sbci	r29, 0xFF	; 255
    28b2:	68 83       	st	Y, r22
    28b4:	79 83       	std	Y+1, r23	; 0x01
    28b6:	8a 83       	std	Y+2, r24	; 0x02
    28b8:	9b 83       	std	Y+3, r25	; 0x03
    28ba:	cf 58       	subi	r28, 0x8F	; 143
    28bc:	d0 40       	sbci	r29, 0x00	; 0
    28be:	20 2f       	mov	r18, r16
    28c0:	3f 2d       	mov	r19, r15
    28c2:	c0 56       	subi	r28, 0x60	; 96
    28c4:	df 4f       	sbci	r29, 0xFF	; 255
    28c6:	48 81       	ld	r20, Y
    28c8:	c0 5a       	subi	r28, 0xA0	; 160
    28ca:	d0 40       	sbci	r29, 0x00	; 0
    28cc:	5e 2d       	mov	r21, r14
    28ce:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    28d2:	9b 01       	movw	r18, r22
    28d4:	ac 01       	movw	r20, r24
    28d6:	c1 56       	subi	r28, 0x61	; 97
    28d8:	df 4f       	sbci	r29, 0xFF	; 255
    28da:	68 81       	ld	r22, Y
    28dc:	cf 59       	subi	r28, 0x9F	; 159
    28de:	d0 40       	sbci	r29, 0x00	; 0
    28e0:	79 2d       	mov	r23, r9
    28e2:	84 2d       	mov	r24, r4
    28e4:	95 2d       	mov	r25, r5
    28e6:	0e 94 d1 30 	call	0x61a2	; 0x61a2 <__subsf3>
    28ea:	cd 56       	subi	r28, 0x6D	; 109
    28ec:	df 4f       	sbci	r29, 0xFF	; 255
    28ee:	68 83       	st	Y, r22
    28f0:	79 83       	std	Y+1, r23	; 0x01
    28f2:	8a 83       	std	Y+2, r24	; 0x02
    28f4:	9b 83       	std	Y+3, r25	; 0x03
    28f6:	c3 59       	subi	r28, 0x93	; 147
    28f8:	d0 40       	sbci	r29, 0x00	; 0
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <CalibrateChannel+0x56a>
    28fc:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
    2900:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <CanRead_Ctrl>
    2904:	81 11       	cpse	r24, r1
    2906:	fa cf       	rjmp	.-12     	; 0x28fc <CalibrateChannel+0x566>
    2908:	c2 56       	subi	r28, 0x62	; 98
    290a:	df 4f       	sbci	r29, 0xFF	; 255
    290c:	f8 81       	ld	r31, Y
    290e:	ce 59       	subi	r28, 0x9E	; 158
    2910:	d0 40       	sbci	r29, 0x00	; 0
    2912:	ff 93       	push	r31
    2914:	c3 56       	subi	r28, 0x63	; 99
    2916:	df 4f       	sbci	r29, 0xFF	; 255
    2918:	28 81       	ld	r18, Y
    291a:	cd 59       	subi	r28, 0x9D	; 157
    291c:	d0 40       	sbci	r29, 0x00	; 0
    291e:	2f 93       	push	r18
    2920:	88 e2       	ldi	r24, 0x28	; 40
    2922:	94 e2       	ldi	r25, 0x24	; 36
    2924:	9f 93       	push	r25
    2926:	8f 93       	push	r24
    2928:	8f 92       	push	r8
    292a:	2f 92       	push	r2
    292c:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2930:	d6 01       	movw	r26, r12
    2932:	4d 90       	ld	r4, X+
    2934:	5d 90       	ld	r5, X+
    2936:	6d 90       	ld	r6, X+
    2938:	7c 90       	ld	r7, X
    293a:	c5 56       	subi	r28, 0x65	; 101
    293c:	df 4f       	sbci	r29, 0xFF	; 255
    293e:	e8 81       	ld	r30, Y
    2940:	f9 81       	ldd	r31, Y+1	; 0x01
    2942:	cb 59       	subi	r28, 0x9B	; 155
    2944:	d0 40       	sbci	r29, 0x00	; 0
    2946:	ee 0f       	add	r30, r30
    2948:	ff 1f       	adc	r31, r31
    294a:	c5 56       	subi	r28, 0x65	; 101
    294c:	df 4f       	sbci	r29, 0xFF	; 255
    294e:	28 81       	ld	r18, Y
    2950:	39 81       	ldd	r19, Y+1	; 0x01
    2952:	cb 59       	subi	r28, 0x9B	; 155
    2954:	d0 40       	sbci	r29, 0x00	; 0
    2956:	e2 0f       	add	r30, r18
    2958:	f3 1f       	adc	r31, r19
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	ec 0f       	add	r30, r28
    2964:	fd 1f       	adc	r31, r29
    2966:	07 81       	ldd	r16, Z+7	; 0x07
    2968:	10 85       	ldd	r17, Z+8	; 0x08
    296a:	d8 01       	movw	r26, r16
    296c:	ad 90       	ld	r10, X+
    296e:	bc 90       	ld	r11, X
    2970:	11 97       	sbiw	r26, 0x01	; 1
    2972:	ed 90       	ld	r14, X+
    2974:	fc 90       	ld	r15, X
    2976:	cd 56       	subi	r28, 0x6D	; 109
    2978:	df 4f       	sbci	r29, 0xFF	; 255
    297a:	68 81       	ld	r22, Y
    297c:	79 81       	ldd	r23, Y+1	; 0x01
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	9b 81       	ldd	r25, Y+3	; 0x03
    2982:	c3 59       	subi	r28, 0x93	; 147
    2984:	d0 40       	sbci	r29, 0x00	; 0
    2986:	0e 94 5e 33 	call	0x66bc	; 0x66bc <round>
    298a:	cd 56       	subi	r28, 0x6D	; 109
    298c:	df 4f       	sbci	r29, 0xFF	; 255
    298e:	68 83       	st	Y, r22
    2990:	79 83       	std	Y+1, r23	; 0x01
    2992:	8a 83       	std	Y+2, r24	; 0x02
    2994:	9b 83       	std	Y+3, r25	; 0x03
    2996:	c3 59       	subi	r28, 0x93	; 147
    2998:	d0 40       	sbci	r29, 0x00	; 0
    299a:	7f 92       	push	r7
    299c:	6f 92       	push	r6
    299e:	5f 92       	push	r5
    29a0:	4f 92       	push	r4
    29a2:	ce 56       	subi	r28, 0x6E	; 110
    29a4:	df 4f       	sbci	r29, 0xFF	; 255
    29a6:	b8 81       	ld	r27, Y
    29a8:	c2 59       	subi	r28, 0x92	; 146
    29aa:	d0 40       	sbci	r29, 0x00	; 0
    29ac:	bf 93       	push	r27
    29ae:	cf 56       	subi	r28, 0x6F	; 111
    29b0:	df 4f       	sbci	r29, 0xFF	; 255
    29b2:	e8 81       	ld	r30, Y
    29b4:	c1 59       	subi	r28, 0x91	; 145
    29b6:	d0 40       	sbci	r29, 0x00	; 0
    29b8:	ef 93       	push	r30
    29ba:	c0 57       	subi	r28, 0x70	; 112
    29bc:	df 4f       	sbci	r29, 0xFF	; 255
    29be:	f8 81       	ld	r31, Y
    29c0:	c0 59       	subi	r28, 0x90	; 144
    29c2:	d0 40       	sbci	r29, 0x00	; 0
    29c4:	ff 93       	push	r31
    29c6:	c1 57       	subi	r28, 0x71	; 113
    29c8:	df 4f       	sbci	r29, 0xFF	; 255
    29ca:	28 81       	ld	r18, Y
    29cc:	cf 58       	subi	r28, 0x8F	; 143
    29ce:	d0 40       	sbci	r29, 0x00	; 0
    29d0:	2f 93       	push	r18
    29d2:	bf 92       	push	r11
    29d4:	af 92       	push	r10
    29d6:	b7 01       	movw	r22, r14
    29d8:	ff 0c       	add	r15, r15
    29da:	88 0b       	sbc	r24, r24
    29dc:	99 0b       	sbc	r25, r25
    29de:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    29e2:	cd 56       	subi	r28, 0x6D	; 109
    29e4:	df 4f       	sbci	r29, 0xFF	; 255
    29e6:	28 81       	ld	r18, Y
    29e8:	39 81       	ldd	r19, Y+1	; 0x01
    29ea:	4a 81       	ldd	r20, Y+2	; 0x02
    29ec:	5b 81       	ldd	r21, Y+3	; 0x03
    29ee:	c3 59       	subi	r28, 0x93	; 147
    29f0:	d0 40       	sbci	r29, 0x00	; 0
    29f2:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    29f6:	9f 93       	push	r25
    29f8:	8f 93       	push	r24
    29fa:	7f 93       	push	r23
    29fc:	6f 93       	push	r22
    29fe:	8c e4       	ldi	r24, 0x4C	; 76
    2a00:	94 e2       	ldi	r25, 0x24	; 36
    2a02:	9f 93       	push	r25
    2a04:	8f 93       	push	r24
    2a06:	8f 92       	push	r8
    2a08:	2f 92       	push	r2
    2a0a:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <ReadByte_Ctrl>
    2a16:	98 2f       	mov	r25, r24
    2a18:	89 37       	cpi	r24, 0x79	; 121
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <CalibrateChannel+0x688>
    2a1c:	74 c2       	rjmp	.+1256   	; 0x2f06 <CalibrateChannel+0xb70>
    2a1e:	89 35       	cpi	r24, 0x59	; 89
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <CalibrateChannel+0x68e>
    2a22:	83 c2       	rjmp	.+1286   	; 0x2f2a <CalibrateChannel+0xb94>
    2a24:	8f 7d       	andi	r24, 0xDF	; 223
    2a26:	8e 34       	cpi	r24, 0x4E	; 78
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <CalibrateChannel+0x696>
    2a2a:	91 c2       	rjmp	.+1314   	; 0x2f4e <CalibrateChannel+0xbb8>
    2a2c:	9b 31       	cpi	r25, 0x1B	; 27
    2a2e:	89 f7       	brne	.-30     	; 0x2a12 <CalibrateChannel+0x67c>
    2a30:	8e c2       	rjmp	.+1308   	; 0x2f4e <CalibrateChannel+0xbb8>
    2a32:	d8 01       	movw	r26, r16
    2a34:	6d 91       	ld	r22, X+
    2a36:	7c 91       	ld	r23, X
    2a38:	07 2e       	mov	r0, r23
    2a3a:	00 0c       	add	r0, r0
    2a3c:	88 0b       	sbc	r24, r24
    2a3e:	99 0b       	sbc	r25, r25
    2a40:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    2a44:	cd 56       	subi	r28, 0x6D	; 109
    2a46:	df 4f       	sbci	r29, 0xFF	; 255
    2a48:	28 81       	ld	r18, Y
    2a4a:	39 81       	ldd	r19, Y+1	; 0x01
    2a4c:	4a 81       	ldd	r20, Y+2	; 0x02
    2a4e:	5b 81       	ldd	r21, Y+3	; 0x03
    2a50:	c3 59       	subi	r28, 0x93	; 147
    2a52:	d0 40       	sbci	r29, 0x00	; 0
    2a54:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <__addsf3>
    2a58:	0e 94 b5 31 	call	0x636a	; 0x636a <__fixsfsi>
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	60 83       	st	Z, r22
    2a60:	71 83       	std	Z+1, r23	; 0x01
    2a62:	c1 57       	subi	r28, 0x71	; 113
    2a64:	df 4f       	sbci	r29, 0xFF	; 255
    2a66:	88 81       	ld	r24, Y
    2a68:	99 81       	ldd	r25, Y+1	; 0x01
    2a6a:	aa 81       	ldd	r26, Y+2	; 0x02
    2a6c:	bb 81       	ldd	r27, Y+3	; 0x03
    2a6e:	cf 58       	subi	r28, 0x8F	; 143
    2a70:	d0 40       	sbci	r29, 0x00	; 0
    2a72:	f6 01       	movw	r30, r12
    2a74:	80 83       	st	Z, r24
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	a2 83       	std	Z+2, r26	; 0x02
    2a7a:	b3 83       	std	Z+3, r27	; 0x03
    2a7c:	c5 56       	subi	r28, 0x65	; 101
    2a7e:	df 4f       	sbci	r29, 0xFF	; 255
    2a80:	e8 80       	ld	r14, Y
    2a82:	f9 80       	ldd	r15, Y+1	; 0x01
    2a84:	cb 59       	subi	r28, 0x9B	; 155
    2a86:	d0 40       	sbci	r29, 0x00	; 0
    2a88:	ee 0c       	add	r14, r14
    2a8a:	ff 1c       	adc	r15, r15
    2a8c:	c5 56       	subi	r28, 0x65	; 101
    2a8e:	df 4f       	sbci	r29, 0xFF	; 255
    2a90:	e8 81       	ld	r30, Y
    2a92:	f9 81       	ldd	r31, Y+1	; 0x01
    2a94:	cb 59       	subi	r28, 0x9B	; 155
    2a96:	d0 40       	sbci	r29, 0x00	; 0
    2a98:	ee 0d       	add	r30, r14
    2a9a:	ff 1d       	adc	r31, r15
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	ff 1f       	adc	r31, r31
    2aa0:	ee 0f       	add	r30, r30
    2aa2:	ff 1f       	adc	r31, r31
    2aa4:	21 e0       	ldi	r18, 0x01	; 1
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	2c 0f       	add	r18, r28
    2aaa:	3d 1f       	adc	r19, r29
    2aac:	e2 0f       	add	r30, r18
    2aae:	f3 1f       	adc	r31, r19
    2ab0:	a2 84       	ldd	r10, Z+10	; 0x0a
    2ab2:	b3 84       	ldd	r11, Z+11	; 0x0b
    2ab4:	42 e0       	ldi	r20, 0x02	; 2
    2ab6:	50 e0       	ldi	r21, 0x00	; 0
    2ab8:	b5 01       	movw	r22, r10
    2aba:	c8 01       	movw	r24, r16
    2abc:	0e 94 49 30 	call	0x6092	; 0x6092 <UpdateEEPROM>
    2ac0:	c5 56       	subi	r28, 0x65	; 101
    2ac2:	df 4f       	sbci	r29, 0xFF	; 255
    2ac4:	e8 81       	ld	r30, Y
    2ac6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ac8:	cb 59       	subi	r28, 0x9B	; 155
    2aca:	d0 40       	sbci	r29, 0x00	; 0
    2acc:	ee 0d       	add	r30, r14
    2ace:	ff 1d       	adc	r31, r15
    2ad0:	ee 0f       	add	r30, r30
    2ad2:	ff 1f       	adc	r31, r31
    2ad4:	ee 0f       	add	r30, r30
    2ad6:	ff 1f       	adc	r31, r31
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	8c 0f       	add	r24, r28
    2ade:	9d 1f       	adc	r25, r29
    2ae0:	e8 0f       	add	r30, r24
    2ae2:	f9 1f       	adc	r31, r25
    2ae4:	e0 84       	ldd	r14, Z+8	; 0x08
    2ae6:	f1 84       	ldd	r15, Z+9	; 0x09
    2ae8:	44 e0       	ldi	r20, 0x04	; 4
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	b7 01       	movw	r22, r14
    2aee:	c6 01       	movw	r24, r12
    2af0:	0e 94 49 30 	call	0x6092	; 0x6092 <UpdateEEPROM>
    2af4:	f6 01       	movw	r30, r12
    2af6:	80 81       	ld	r24, Z
    2af8:	91 81       	ldd	r25, Z+1	; 0x01
    2afa:	a2 81       	ldd	r26, Z+2	; 0x02
    2afc:	b3 81       	ldd	r27, Z+3	; 0x03
    2afe:	f8 01       	movw	r30, r16
    2b00:	20 81       	ld	r18, Z
    2b02:	31 81       	ldd	r19, Z+1	; 0x01
    2b04:	bf 93       	push	r27
    2b06:	af 93       	push	r26
    2b08:	9f 93       	push	r25
    2b0a:	8f 93       	push	r24
    2b0c:	3f 93       	push	r19
    2b0e:	2f 93       	push	r18
    2b10:	83 e9       	ldi	r24, 0x93	; 147
    2b12:	94 e2       	ldi	r25, 0x24	; 36
    2b14:	9f 93       	push	r25
    2b16:	8f 93       	push	r24
    2b18:	8f 92       	push	r8
    2b1a:	2f 92       	push	r2
    2b1c:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2b20:	42 e0       	ldi	r20, 0x02	; 2
    2b22:	50 e0       	ldi	r21, 0x00	; 0
    2b24:	b5 01       	movw	r22, r10
    2b26:	ce 01       	movw	r24, r28
    2b28:	87 57       	subi	r24, 0x77	; 119
    2b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2b30:	44 e0       	ldi	r20, 0x04	; 4
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	b7 01       	movw	r22, r14
    2b36:	ce 01       	movw	r24, r28
    2b38:	85 57       	subi	r24, 0x75	; 117
    2b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b3c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <TryReadEEPROM>
    2b40:	c2 57       	subi	r28, 0x72	; 114
    2b42:	df 4f       	sbci	r29, 0xFF	; 255
    2b44:	88 81       	ld	r24, Y
    2b46:	ce 58       	subi	r28, 0x8E	; 142
    2b48:	d0 40       	sbci	r29, 0x00	; 0
    2b4a:	8f 93       	push	r24
    2b4c:	c3 57       	subi	r28, 0x73	; 115
    2b4e:	df 4f       	sbci	r29, 0xFF	; 255
    2b50:	88 81       	ld	r24, Y
    2b52:	cd 58       	subi	r28, 0x8D	; 141
    2b54:	d0 40       	sbci	r29, 0x00	; 0
    2b56:	8f 93       	push	r24
    2b58:	c4 57       	subi	r28, 0x74	; 116
    2b5a:	df 4f       	sbci	r29, 0xFF	; 255
    2b5c:	88 81       	ld	r24, Y
    2b5e:	cc 58       	subi	r28, 0x8C	; 140
    2b60:	d0 40       	sbci	r29, 0x00	; 0
    2b62:	8f 93       	push	r24
    2b64:	c5 57       	subi	r28, 0x75	; 117
    2b66:	df 4f       	sbci	r29, 0xFF	; 255
    2b68:	88 81       	ld	r24, Y
    2b6a:	cb 58       	subi	r28, 0x8B	; 139
    2b6c:	d0 40       	sbci	r29, 0x00	; 0
    2b6e:	8f 93       	push	r24
    2b70:	c6 57       	subi	r28, 0x76	; 118
    2b72:	df 4f       	sbci	r29, 0xFF	; 255
    2b74:	88 81       	ld	r24, Y
    2b76:	ca 58       	subi	r28, 0x8A	; 138
    2b78:	d0 40       	sbci	r29, 0x00	; 0
    2b7a:	8f 93       	push	r24
    2b7c:	c7 57       	subi	r28, 0x77	; 119
    2b7e:	df 4f       	sbci	r29, 0xFF	; 255
    2b80:	88 81       	ld	r24, Y
    2b82:	c9 58       	subi	r28, 0x89	; 137
    2b84:	d0 40       	sbci	r29, 0x00	; 0
    2b86:	8f 93       	push	r24
    2b88:	89 eb       	ldi	r24, 0xB9	; 185
    2b8a:	94 e2       	ldi	r25, 0x24	; 36
    2b8c:	9f 93       	push	r25
    2b8e:	8f 93       	push	r24
    2b90:	8f 92       	push	r8
    2b92:	2f 92       	push	r2
    2b94:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2b98:	22 2d       	mov	r18, r2
    2b9a:	38 2d       	mov	r19, r8
    2b9c:	4c e2       	ldi	r20, 0x2C	; 44
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	61 e0       	ldi	r22, 0x01	; 1
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	8f ed       	ldi	r24, 0xDF	; 223
    2ba6:	94 e2       	ldi	r25, 0x24	; 36
    2ba8:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	e2 c1       	rjmp	.+964    	; 0x2f76 <CalibrateChannel+0xbe0>
    2bb2:	8c 2d       	mov	r24, r12
    2bb4:	0c 2c       	mov	r0, r12
    2bb6:	00 0c       	add	r0, r0
    2bb8:	99 0b       	sbc	r25, r25
    2bba:	c5 56       	subi	r28, 0x65	; 101
    2bbc:	df 4f       	sbci	r29, 0xFF	; 255
    2bbe:	88 83       	st	Y, r24
    2bc0:	99 83       	std	Y+1, r25	; 0x01
    2bc2:	cb 59       	subi	r28, 0x9B	; 155
    2bc4:	d0 40       	sbci	r29, 0x00	; 0
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	ee 0f       	add	r30, r30
    2bca:	ff 1f       	adc	r31, r31
    2bcc:	e8 0f       	add	r30, r24
    2bce:	f9 1f       	adc	r31, r25
    2bd0:	ee 0f       	add	r30, r30
    2bd2:	ff 1f       	adc	r31, r31
    2bd4:	ee 0f       	add	r30, r30
    2bd6:	ff 1f       	adc	r31, r31
    2bd8:	a1 e0       	ldi	r26, 0x01	; 1
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	ac 0f       	add	r26, r28
    2bde:	bd 1f       	adc	r27, r29
    2be0:	ea 0f       	add	r30, r26
    2be2:	fb 1f       	adc	r31, r27
    2be4:	b0 81       	ld	r27, Z
    2be6:	c3 56       	subi	r28, 0x63	; 99
    2be8:	df 4f       	sbci	r29, 0xFF	; 255
    2bea:	b8 83       	st	Y, r27
    2bec:	cd 59       	subi	r28, 0x9D	; 157
    2bee:	d0 40       	sbci	r29, 0x00	; 0
    2bf0:	21 81       	ldd	r18, Z+1	; 0x01
    2bf2:	c2 56       	subi	r28, 0x62	; 98
    2bf4:	df 4f       	sbci	r29, 0xFF	; 255
    2bf6:	28 83       	st	Y, r18
    2bf8:	ce 59       	subi	r28, 0x9E	; 158
    2bfa:	d0 40       	sbci	r29, 0x00	; 0
    2bfc:	2f 93       	push	r18
    2bfe:	bf 93       	push	r27
    2c00:	8c e0       	ldi	r24, 0x0C	; 12
    2c02:	95 e2       	ldi	r25, 0x25	; 37
    2c04:	9f 93       	push	r25
    2c06:	8f 93       	push	r24
    2c08:	8f 92       	push	r8
    2c0a:	2f 92       	push	r2
    2c0c:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2c10:	1f 92       	push	r1
    2c12:	85 e0       	ldi	r24, 0x05	; 5
    2c14:	8f 93       	push	r24
    2c16:	85 e2       	ldi	r24, 0x25	; 37
    2c18:	95 e2       	ldi	r25, 0x25	; 37
    2c1a:	9f 93       	push	r25
    2c1c:	8f 93       	push	r24
    2c1e:	8f 92       	push	r8
    2c20:	2f 92       	push	r2
    2c22:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	c0 fe       	sbrs	r12, 0
    2c2c:	03 c0       	rjmp	.+6      	; 0x2c34 <CalibrateChannel+0x89e>
    2c2e:	83 e5       	ldi	r24, 0x53	; 83
    2c30:	95 e2       	ldi	r25, 0x25	; 37
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <CalibrateChannel+0x8a2>
    2c34:	86 e5       	ldi	r24, 0x56	; 86
    2c36:	95 e2       	ldi	r25, 0x25	; 37
    2c38:	a8 2e       	mov	r10, r24
    2c3a:	99 2e       	mov	r9, r25
    2c3c:	31 2c       	mov	r3, r1
    2c3e:	bb 24       	eor	r11, r11
    2c40:	b3 94       	inc	r11
    2c42:	c5 56       	subi	r28, 0x65	; 101
    2c44:	df 4f       	sbci	r29, 0xFF	; 255
    2c46:	88 81       	ld	r24, Y
    2c48:	99 81       	ldd	r25, Y+1	; 0x01
    2c4a:	cb 59       	subi	r28, 0x9B	; 155
    2c4c:	d0 40       	sbci	r29, 0x00	; 0
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	c5 56       	subi	r28, 0x65	; 101
    2c54:	df 4f       	sbci	r29, 0xFF	; 255
    2c56:	a8 81       	ld	r26, Y
    2c58:	b9 81       	ldd	r27, Y+1	; 0x01
    2c5a:	cb 59       	subi	r28, 0x9B	; 155
    2c5c:	d0 40       	sbci	r29, 0x00	; 0
    2c5e:	8a 0f       	add	r24, r26
    2c60:	9b 1f       	adc	r25, r27
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	e1 e0       	ldi	r30, 0x01	; 1
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	ec 0f       	add	r30, r28
    2c70:	fd 1f       	adc	r31, r29
    2c72:	8e 0f       	add	r24, r30
    2c74:	9f 1f       	adc	r25, r31
    2c76:	9c 01       	movw	r18, r24
    2c78:	2e 5f       	subi	r18, 0xFE	; 254
    2c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c7c:	cd 56       	subi	r28, 0x6D	; 109
    2c7e:	df 4f       	sbci	r29, 0xFF	; 255
    2c80:	28 83       	st	Y, r18
    2c82:	39 83       	std	Y+1, r19	; 0x01
    2c84:	c3 59       	subi	r28, 0x93	; 147
    2c86:	d0 40       	sbci	r29, 0x00	; 0
    2c88:	dc 01       	movw	r26, r24
    2c8a:	14 96       	adiw	r26, 0x04	; 4
    2c8c:	c9 56       	subi	r28, 0x69	; 105
    2c8e:	df 4f       	sbci	r29, 0xFF	; 255
    2c90:	a8 83       	st	Y, r26
    2c92:	b9 83       	std	Y+1, r27	; 0x01
    2c94:	c7 59       	subi	r28, 0x97	; 151
    2c96:	d0 40       	sbci	r29, 0x00	; 0
    2c98:	51 cc       	rjmp	.-1886   	; 0x253c <CalibrateChannel+0x1a6>
    2c9a:	c3 01       	movw	r24, r6
    2c9c:	b2 01       	movw	r22, r4
    2c9e:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	4a e7       	ldi	r20, 0x7A	; 122
    2ca8:	54 e4       	ldi	r21, 0x44	; 68
    2caa:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    2cae:	e6 2e       	mov	r14, r22
    2cb0:	f7 2e       	mov	r15, r23
    2cb2:	08 2f       	mov	r16, r24
    2cb4:	19 2f       	mov	r17, r25
    2cb6:	f6 01       	movw	r30, r12
    2cb8:	ee 0f       	add	r30, r30
    2cba:	ff 1f       	adc	r31, r31
    2cbc:	ee 0f       	add	r30, r30
    2cbe:	ff 1f       	adc	r31, r31
    2cc0:	25 e7       	ldi	r18, 0x75	; 117
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	2c 0f       	add	r18, r28
    2cc6:	3d 1f       	adc	r19, r29
    2cc8:	e2 0f       	add	r30, r18
    2cca:	f3 1f       	adc	r31, r19
    2ccc:	86 2f       	mov	r24, r22
    2cce:	9f 2d       	mov	r25, r15
    2cd0:	a0 2f       	mov	r26, r16
    2cd2:	b1 2f       	mov	r27, r17
    2cd4:	80 83       	st	Z, r24
    2cd6:	91 83       	std	Z+1, r25	; 0x01
    2cd8:	a2 83       	std	Z+2, r26	; 0x02
    2cda:	b3 83       	std	Z+3, r27	; 0x03
    2cdc:	b0 92 66 29 	sts	0x2966, r11	; 0x802966 <sTakeSnapshot>
    2ce0:	7b cc       	rjmp	.-1802   	; 0x25d8 <CalibrateChannel+0x242>
    2ce2:	1f 92       	push	r1
    2ce4:	89 e5       	ldi	r24, 0x59	; 89
    2ce6:	8f 93       	push	r24
    2ce8:	89 e5       	ldi	r24, 0x59	; 89
    2cea:	95 e2       	ldi	r25, 0x25	; 37
    2cec:	9f 93       	push	r25
    2cee:	8f 93       	push	r24
    2cf0:	8f 92       	push	r8
    2cf2:	2f 92       	push	r2
    2cf4:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	e1 cc       	rjmp	.-1598   	; 0x26c8 <CalibrateChannel+0x332>
    2d06:	29 2f       	mov	r18, r25
    2d08:	09 2e       	mov	r0, r25
    2d0a:	00 0c       	add	r0, r0
    2d0c:	33 0b       	sbc	r19, r19
    2d0e:	3f 93       	push	r19
    2d10:	9f 93       	push	r25
    2d12:	e9 e5       	ldi	r30, 0x59	; 89
    2d14:	f5 e2       	ldi	r31, 0x25	; 37
    2d16:	ff 93       	push	r31
    2d18:	ef 93       	push	r30
    2d1a:	8f 92       	push	r8
    2d1c:	2f 92       	push	r2
    2d1e:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	0f 90       	pop	r0
    2d2e:	34 e0       	ldi	r19, 0x04	; 4
    2d30:	33 15       	cp	r19, r3
    2d32:	0c f0       	brlt	.+2      	; 0x2d36 <CalibrateChannel+0x9a0>
    2d34:	03 cc       	rjmp	.-2042   	; 0x253c <CalibrateChannel+0x1a6>
    2d36:	e6 cc       	rjmp	.-1588   	; 0x2704 <CalibrateChannel+0x36e>
    2d38:	1f 92       	push	r1
    2d3a:	8b e1       	ldi	r24, 0x1B	; 27
    2d3c:	8f 93       	push	r24
    2d3e:	89 e5       	ldi	r24, 0x59	; 89
    2d40:	95 e2       	ldi	r25, 0x25	; 37
    2d42:	9f 93       	push	r25
    2d44:	8f 93       	push	r24
    2d46:	8f 92       	push	r8
    2d48:	2f 92       	push	r2
    2d4a:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	0f 90       	pop	r0
    2d54:	0f 90       	pop	r0
    2d56:	0f 90       	pop	r0
    2d58:	0f 90       	pop	r0
    2d5a:	d4 cc       	rjmp	.-1624   	; 0x2704 <CalibrateChannel+0x36e>
    2d5c:	1f 92       	push	r1
    2d5e:	89 e7       	ldi	r24, 0x79	; 121
    2d60:	8f 93       	push	r24
    2d62:	89 e5       	ldi	r24, 0x59	; 89
    2d64:	95 e2       	ldi	r25, 0x25	; 37
    2d66:	9f 93       	push	r25
    2d68:	8f 93       	push	r24
    2d6a:	8f 92       	push	r8
    2d6c:	2f 92       	push	r2
    2d6e:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	a4 cc       	rjmp	.-1720   	; 0x26c8 <CalibrateChannel+0x332>
    2d80:	1f 92       	push	r1
    2d82:	89 e7       	ldi	r24, 0x79	; 121
    2d84:	8f 93       	push	r24
    2d86:	e9 e5       	ldi	r30, 0x59	; 89
    2d88:	f5 e2       	ldi	r31, 0x25	; 37
    2d8a:	ff 93       	push	r31
    2d8c:	ef 93       	push	r30
    2d8e:	8f 92       	push	r8
    2d90:	2f 92       	push	r2
    2d92:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	cc cb       	rjmp	.-2152   	; 0x253c <CalibrateChannel+0x1a6>
    2da4:	1f 92       	push	r1
    2da6:	89 e5       	ldi	r24, 0x59	; 89
    2da8:	8f 93       	push	r24
    2daa:	89 e5       	ldi	r24, 0x59	; 89
    2dac:	95 e2       	ldi	r25, 0x25	; 37
    2dae:	9f 93       	push	r25
    2db0:	8f 93       	push	r24
    2db2:	8f 92       	push	r8
    2db4:	2f 92       	push	r2
    2db6:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	ba cb       	rjmp	.-2188   	; 0x253c <CalibrateChannel+0x1a6>
    2dc8:	29 2f       	mov	r18, r25
    2dca:	09 2e       	mov	r0, r25
    2dcc:	00 0c       	add	r0, r0
    2dce:	33 0b       	sbc	r19, r19
    2dd0:	3f 93       	push	r19
    2dd2:	9f 93       	push	r25
    2dd4:	89 e5       	ldi	r24, 0x59	; 89
    2dd6:	95 e2       	ldi	r25, 0x25	; 37
    2dd8:	9f 93       	push	r25
    2dda:	8f 93       	push	r24
    2ddc:	8f 92       	push	r8
    2dde:	2f 92       	push	r2
    2de0:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	89 cc       	rjmp	.-1774   	; 0x2704 <CalibrateChannel+0x36e>
    2df2:	63 2d       	mov	r22, r3
    2df4:	03 2c       	mov	r0, r3
    2df6:	00 0c       	add	r0, r0
    2df8:	77 0b       	sbc	r23, r23
    2dfa:	88 0b       	sbc	r24, r24
    2dfc:	99 0b       	sbc	r25, r25
    2dfe:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    2e02:	c9 56       	subi	r28, 0x69	; 105
    2e04:	df 4f       	sbci	r29, 0xFF	; 255
    2e06:	68 83       	st	Y, r22
    2e08:	79 83       	std	Y+1, r23	; 0x01
    2e0a:	8a 83       	std	Y+2, r24	; 0x02
    2e0c:	9b 83       	std	Y+3, r25	; 0x03
    2e0e:	c7 59       	subi	r28, 0x97	; 151
    2e10:	d0 40       	sbci	r29, 0x00	; 0
    2e12:	9b 01       	movw	r18, r22
    2e14:	ac 01       	movw	r20, r24
    2e16:	c1 57       	subi	r28, 0x71	; 113
    2e18:	df 4f       	sbci	r29, 0xFF	; 255
    2e1a:	68 81       	ld	r22, Y
    2e1c:	79 81       	ldd	r23, Y+1	; 0x01
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	9b 81       	ldd	r25, Y+3	; 0x03
    2e22:	cf 58       	subi	r28, 0x8F	; 143
    2e24:	d0 40       	sbci	r29, 0x00	; 0
    2e26:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    2e2a:	06 2f       	mov	r16, r22
    2e2c:	f7 2e       	mov	r15, r23
    2e2e:	c0 56       	subi	r28, 0x60	; 96
    2e30:	df 4f       	sbci	r29, 0xFF	; 255
    2e32:	88 83       	st	Y, r24
    2e34:	c0 5a       	subi	r28, 0xA0	; 160
    2e36:	d0 40       	sbci	r29, 0x00	; 0
    2e38:	e9 2e       	mov	r14, r25
    2e3a:	c9 56       	subi	r28, 0x69	; 105
    2e3c:	df 4f       	sbci	r29, 0xFF	; 255
    2e3e:	28 81       	ld	r18, Y
    2e40:	39 81       	ldd	r19, Y+1	; 0x01
    2e42:	4a 81       	ldd	r20, Y+2	; 0x02
    2e44:	5b 81       	ldd	r21, Y+3	; 0x03
    2e46:	c7 59       	subi	r28, 0x97	; 151
    2e48:	d0 40       	sbci	r29, 0x00	; 0
    2e4a:	cd 56       	subi	r28, 0x6D	; 109
    2e4c:	df 4f       	sbci	r29, 0xFF	; 255
    2e4e:	68 81       	ld	r22, Y
    2e50:	79 81       	ldd	r23, Y+1	; 0x01
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	9b 81       	ldd	r25, Y+3	; 0x03
    2e56:	c3 59       	subi	r28, 0x93	; 147
    2e58:	d0 40       	sbci	r29, 0x00	; 0
    2e5a:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    2e5e:	c1 56       	subi	r28, 0x61	; 97
    2e60:	df 4f       	sbci	r29, 0xFF	; 255
    2e62:	68 83       	st	Y, r22
    2e64:	cf 59       	subi	r28, 0x9F	; 159
    2e66:	d0 40       	sbci	r29, 0x00	; 0
    2e68:	97 2e       	mov	r9, r23
    2e6a:	48 2e       	mov	r4, r24
    2e6c:	59 2e       	mov	r5, r25
    2e6e:	c9 56       	subi	r28, 0x69	; 105
    2e70:	df 4f       	sbci	r29, 0xFF	; 255
    2e72:	18 82       	st	Y, r1
    2e74:	19 82       	std	Y+1, r1	; 0x01
    2e76:	1a 82       	std	Y+2, r1	; 0x02
    2e78:	1b 82       	std	Y+3, r1	; 0x03
    2e7a:	c7 59       	subi	r28, 0x97	; 151
    2e7c:	d0 40       	sbci	r29, 0x00	; 0
    2e7e:	cd 56       	subi	r28, 0x6D	; 109
    2e80:	df 4f       	sbci	r29, 0xFF	; 255
    2e82:	18 82       	st	Y, r1
    2e84:	19 82       	std	Y+1, r1	; 0x01
    2e86:	1a 82       	std	Y+2, r1	; 0x02
    2e88:	1b 82       	std	Y+3, r1	; 0x03
    2e8a:	c3 59       	subi	r28, 0x93	; 147
    2e8c:	d0 40       	sbci	r29, 0x00	; 0
    2e8e:	10 e0       	ldi	r17, 0x00	; 0
    2e90:	cf 55       	subi	r28, 0x5F	; 95
    2e92:	df 4f       	sbci	r29, 0xFF	; 255
    2e94:	c8 82       	st	Y, r12
    2e96:	d9 82       	std	Y+1, r13	; 0x01
    2e98:	c1 5a       	subi	r28, 0xA1	; 161
    2e9a:	d0 40       	sbci	r29, 0x00	; 0
    2e9c:	c0 56       	subi	r28, 0x60	; 96
    2e9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ea0:	d8 80       	ld	r13, Y
    2ea2:	c0 5a       	subi	r28, 0xA0	; 160
    2ea4:	d0 40       	sbci	r29, 0x00	; 0
    2ea6:	8e cc       	rjmp	.-1764   	; 0x27c4 <CalibrateChannel+0x42e>
    2ea8:	63 2d       	mov	r22, r3
    2eaa:	33 0c       	add	r3, r3
    2eac:	77 0b       	sbc	r23, r23
    2eae:	88 0b       	sbc	r24, r24
    2eb0:	99 0b       	sbc	r25, r25
    2eb2:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    2eb6:	9b 01       	movw	r18, r22
    2eb8:	ac 01       	movw	r20, r24
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	70 e0       	ldi	r23, 0x00	; 0
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    2ec4:	06 2f       	mov	r16, r22
    2ec6:	f7 2e       	mov	r15, r23
    2ec8:	c0 56       	subi	r28, 0x60	; 96
    2eca:	df 4f       	sbci	r29, 0xFF	; 255
    2ecc:	88 83       	st	Y, r24
    2ece:	c0 5a       	subi	r28, 0xA0	; 160
    2ed0:	d0 40       	sbci	r29, 0x00	; 0
    2ed2:	e9 2e       	mov	r14, r25
    2ed4:	c1 56       	subi	r28, 0x61	; 97
    2ed6:	df 4f       	sbci	r29, 0xFF	; 255
    2ed8:	68 83       	st	Y, r22
    2eda:	cf 59       	subi	r28, 0x9F	; 159
    2edc:	d0 40       	sbci	r29, 0x00	; 0
    2ede:	97 2e       	mov	r9, r23
    2ee0:	48 2e       	mov	r4, r24
    2ee2:	59 2e       	mov	r5, r25
    2ee4:	c9 56       	subi	r28, 0x69	; 105
    2ee6:	df 4f       	sbci	r29, 0xFF	; 255
    2ee8:	18 82       	st	Y, r1
    2eea:	19 82       	std	Y+1, r1	; 0x01
    2eec:	1a 82       	std	Y+2, r1	; 0x02
    2eee:	1b 82       	std	Y+3, r1	; 0x03
    2ef0:	c7 59       	subi	r28, 0x97	; 151
    2ef2:	d0 40       	sbci	r29, 0x00	; 0
    2ef4:	cd 56       	subi	r28, 0x6D	; 109
    2ef6:	df 4f       	sbci	r29, 0xFF	; 255
    2ef8:	18 82       	st	Y, r1
    2efa:	19 82       	std	Y+1, r1	; 0x01
    2efc:	1a 82       	std	Y+2, r1	; 0x02
    2efe:	1b 82       	std	Y+3, r1	; 0x03
    2f00:	c3 59       	subi	r28, 0x93	; 147
    2f02:	d0 40       	sbci	r29, 0x00	; 0
    2f04:	c2 cc       	rjmp	.-1660   	; 0x288a <CalibrateChannel+0x4f4>
    2f06:	1f 92       	push	r1
    2f08:	89 e7       	ldi	r24, 0x79	; 121
    2f0a:	8f 93       	push	r24
    2f0c:	89 e5       	ldi	r24, 0x59	; 89
    2f0e:	95 e2       	ldi	r25, 0x25	; 37
    2f10:	9f 93       	push	r25
    2f12:	8f 93       	push	r24
    2f14:	8f 92       	push	r8
    2f16:	2f 92       	push	r2
    2f18:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	84 cd       	rjmp	.-1272   	; 0x2a32 <CalibrateChannel+0x69c>
    2f2a:	1f 92       	push	r1
    2f2c:	89 e5       	ldi	r24, 0x59	; 89
    2f2e:	8f 93       	push	r24
    2f30:	89 e5       	ldi	r24, 0x59	; 89
    2f32:	95 e2       	ldi	r25, 0x25	; 37
    2f34:	9f 93       	push	r25
    2f36:	8f 93       	push	r24
    2f38:	8f 92       	push	r8
    2f3a:	2f 92       	push	r2
    2f3c:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2f40:	0f 90       	pop	r0
    2f42:	0f 90       	pop	r0
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	72 cd       	rjmp	.-1308   	; 0x2a32 <CalibrateChannel+0x69c>
    2f4e:	29 2f       	mov	r18, r25
    2f50:	09 2e       	mov	r0, r25
    2f52:	00 0c       	add	r0, r0
    2f54:	33 0b       	sbc	r19, r19
    2f56:	3f 93       	push	r19
    2f58:	9f 93       	push	r25
    2f5a:	89 e5       	ldi	r24, 0x59	; 89
    2f5c:	95 e2       	ldi	r25, 0x25	; 37
    2f5e:	9f 93       	push	r25
    2f60:	8f 93       	push	r24
    2f62:	8f 92       	push	r8
    2f64:	2f 92       	push	r2
    2f66:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	ce 55       	subi	r28, 0x5E	; 94
    2f78:	df 4f       	sbci	r29, 0xFF	; 255
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	ff 90       	pop	r15
    2f88:	ef 90       	pop	r14
    2f8a:	df 90       	pop	r13
    2f8c:	cf 90       	pop	r12
    2f8e:	bf 90       	pop	r11
    2f90:	af 90       	pop	r10
    2f92:	9f 90       	pop	r9
    2f94:	8f 90       	pop	r8
    2f96:	7f 90       	pop	r7
    2f98:	6f 90       	pop	r6
    2f9a:	5f 90       	pop	r5
    2f9c:	4f 90       	pop	r4
    2f9e:	3f 90       	pop	r3
    2fa0:	2f 90       	pop	r2
    2fa2:	08 95       	ret

00002fa4 <TakeSnapshot>:
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	80 93 66 29 	sts	0x2966, r24	; 0x802966 <sTakeSnapshot>
    2faa:	08 95       	ret

00002fac <GetSessionCycleCount>:


uint32_t GetSessionCycleCount(void) {
    2fac:	0f 93       	push	r16
    2fae:	1f 93       	push	r17
	
	uint32_t res, prev;
	
	res = sSessionCycleCount;
    2fb0:	00 91 e3 28 	lds	r16, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    2fb4:	10 91 e4 28 	lds	r17, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    2fb8:	20 91 e5 28 	lds	r18, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    2fbc:	30 91 e6 28 	lds	r19, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    2fc0:	02 c0       	rjmp	.+4      	; 0x2fc6 <GetSessionCycleCount+0x1a>
	
	do {
		prev = res;
		res = sSessionCycleCount;
    2fc2:	8b 01       	movw	r16, r22
    2fc4:	9c 01       	movw	r18, r24
    2fc6:	60 91 e3 28 	lds	r22, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    2fca:	70 91 e4 28 	lds	r23, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    2fce:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    2fd2:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
	} while (res != prev);
    2fd6:	06 17       	cp	r16, r22
    2fd8:	17 07       	cpc	r17, r23
    2fda:	28 07       	cpc	r18, r24
    2fdc:	39 07       	cpc	r19, r25
    2fde:	89 f7       	brne	.-30     	; 0x2fc2 <GetSessionCycleCount+0x16>
	
	return res;
	
} /* GetSessionCycleCount */
    2fe0:	1f 91       	pop	r17
    2fe2:	0f 91       	pop	r16
    2fe4:	08 95       	ret

00002fe6 <PrintCSV_H2A>:

	return res;
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
    2fe6:	2f 92       	push	r2
    2fe8:	3f 92       	push	r3
    2fea:	4f 92       	push	r4
    2fec:	5f 92       	push	r5
    2fee:	6f 92       	push	r6
    2ff0:	7f 92       	push	r7
    2ff2:	8f 92       	push	r8
    2ff4:	9f 92       	push	r9
    2ff6:	af 92       	push	r10
    2ff8:	bf 92       	push	r11
    2ffa:	cf 92       	push	r12
    2ffc:	df 92       	push	r13
    2ffe:	ef 92       	push	r14
    3000:	ff 92       	push	r15
    3002:	0f 93       	push	r16
    3004:	1f 93       	push	r17
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	c1 5d       	subi	r28, 0xD1	; 209
    3010:	d1 09       	sbc	r29, r1
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	ca 54       	subi	r28, 0x4A	; 74
    3018:	df 4f       	sbci	r29, 0xFF	; 255
    301a:	88 83       	st	Y, r24
    301c:	c6 5b       	subi	r28, 0xB6	; 182
    301e:	d0 40       	sbci	r29, 0x00	; 0
    3020:	c9 54       	subi	r28, 0x49	; 73
    3022:	df 4f       	sbci	r29, 0xFF	; 255
    3024:	98 83       	st	Y, r25
    3026:	c7 5b       	subi	r28, 0xB7	; 183
    3028:	d0 40       	sbci	r29, 0x00	; 0
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    302a:	80 91 66 29 	lds	r24, 0x2966	; 0x802966 <sTakeSnapshot>
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    302e:	81 11       	cpse	r24, r1
    3030:	fc cf       	rjmp	.-8      	; 0x302a <PrintCSV_H2A+0x44>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
    3032:	60 91 d8 29 	lds	r22, 0x29D8	; 0x8029d8 <sSensorDataSnapshot+0x6d>
    3036:	70 91 d9 29 	lds	r23, 0x29D9	; 0x8029d9 <sSensorDataSnapshot+0x6e>
    303a:	80 91 da 29 	lds	r24, 0x29DA	; 0x8029da <sSensorDataSnapshot+0x6f>
    303e:	90 91 db 29 	lds	r25, 0x29DB	; 0x8029db <sSensorDataSnapshot+0x70>
    3042:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e4       	ldi	r19, 0x40	; 64
    304a:	4c e9       	ldi	r20, 0x9C	; 156
    304c:	55 e4       	ldi	r21, 0x45	; 69
    304e:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3052:	c8 54       	subi	r28, 0x48	; 72
    3054:	df 4f       	sbci	r29, 0xFF	; 255
    3056:	68 83       	st	Y, r22
    3058:	c8 5b       	subi	r28, 0xB8	; 184
    305a:	d0 40       	sbci	r29, 0x00	; 0
    305c:	c7 54       	subi	r28, 0x47	; 71
    305e:	df 4f       	sbci	r29, 0xFF	; 255
    3060:	78 83       	st	Y, r23
    3062:	c9 5b       	subi	r28, 0xB9	; 185
    3064:	d0 40       	sbci	r29, 0x00	; 0
    3066:	c6 54       	subi	r28, 0x46	; 70
    3068:	df 4f       	sbci	r29, 0xFF	; 255
    306a:	88 83       	st	Y, r24
    306c:	ca 5b       	subi	r28, 0xBA	; 186
    306e:	d0 40       	sbci	r29, 0x00	; 0
    3070:	c5 54       	subi	r28, 0x45	; 69
    3072:	df 4f       	sbci	r29, 0xFF	; 255
    3074:	98 83       	st	Y, r25
    3076:	cb 5b       	subi	r28, 0xBB	; 187
    3078:	d0 40       	sbci	r29, 0x00	; 0
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
    307a:	20 91 cf 29 	lds	r18, 0x29CF	; 0x8029cf <sSensorDataSnapshot+0x64>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	21 11       	cpse	r18, r1
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	c0 57       	subi	r28, 0x70	; 112
    3088:	df 4f       	sbci	r29, 0xFF	; 255
    308a:	98 83       	st	Y, r25
    308c:	c0 59       	subi	r28, 0x90	; 144
    308e:	d0 40       	sbci	r29, 0x00	; 0
    3090:	cf 56       	subi	r28, 0x6F	; 111
    3092:	df 4f       	sbci	r29, 0xFF	; 255
    3094:	88 83       	st	Y, r24
    3096:	c1 59       	subi	r28, 0x91	; 145
    3098:	d0 40       	sbci	r29, 0x00	; 0
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    309a:	80 91 e0 29 	lds	r24, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x75>
    309e:	90 91 e1 29 	lds	r25, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x76>
    30a2:	a0 91 e2 29 	lds	r26, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x77>
    30a6:	b0 91 e3 29 	lds	r27, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x78>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    30aa:	89 2b       	or	r24, r25
    30ac:	8a 2b       	or	r24, r26
    30ae:	8b 2b       	or	r24, r27
    30b0:	69 f1       	breq	.+90     	; 0x310c <PrintCSV_H2A+0x126>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    30b2:	60 91 e0 29 	lds	r22, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x75>
    30b6:	70 91 e1 29 	lds	r23, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x76>
    30ba:	80 91 e2 29 	lds	r24, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x77>
    30be:	90 91 e3 29 	lds	r25, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x78>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    30c2:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e8       	ldi	r20, 0x80	; 128
    30cc:	57 e3       	ldi	r21, 0x37	; 55
    30ce:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    30d2:	9b 01       	movw	r18, r22
    30d4:	ac 01       	movw	r20, r24
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	70 e8       	ldi	r23, 0x80	; 128
    30da:	8b e8       	ldi	r24, 0x8B	; 139
    30dc:	94 e4       	ldi	r25, 0x44	; 68
    30de:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    30e2:	c4 53       	subi	r28, 0x34	; 52
    30e4:	df 4f       	sbci	r29, 0xFF	; 255
    30e6:	68 83       	st	Y, r22
    30e8:	cc 5c       	subi	r28, 0xCC	; 204
    30ea:	d0 40       	sbci	r29, 0x00	; 0
    30ec:	c3 53       	subi	r28, 0x33	; 51
    30ee:	df 4f       	sbci	r29, 0xFF	; 255
    30f0:	78 83       	st	Y, r23
    30f2:	cd 5c       	subi	r28, 0xCD	; 205
    30f4:	d0 40       	sbci	r29, 0x00	; 0
    30f6:	c2 53       	subi	r28, 0x32	; 50
    30f8:	df 4f       	sbci	r29, 0xFF	; 255
    30fa:	88 83       	st	Y, r24
    30fc:	ce 5c       	subi	r28, 0xCE	; 206
    30fe:	d0 40       	sbci	r29, 0x00	; 0
    3100:	c1 53       	subi	r28, 0x31	; 49
    3102:	df 4f       	sbci	r29, 0xFF	; 255
    3104:	98 83       	st	Y, r25
    3106:	cf 5c       	subi	r28, 0xCF	; 207
    3108:	d0 40       	sbci	r29, 0x00	; 0
    310a:	14 c0       	rjmp	.+40     	; 0x3134 <PrintCSV_H2A+0x14e>
    310c:	c4 53       	subi	r28, 0x34	; 52
    310e:	df 4f       	sbci	r29, 0xFF	; 255
    3110:	18 82       	st	Y, r1
    3112:	cc 5c       	subi	r28, 0xCC	; 204
    3114:	d0 40       	sbci	r29, 0x00	; 0
    3116:	c3 53       	subi	r28, 0x33	; 51
    3118:	df 4f       	sbci	r29, 0xFF	; 255
    311a:	18 82       	st	Y, r1
    311c:	cd 5c       	subi	r28, 0xCD	; 205
    311e:	d0 40       	sbci	r29, 0x00	; 0
    3120:	c2 53       	subi	r28, 0x32	; 50
    3122:	df 4f       	sbci	r29, 0xFF	; 255
    3124:	18 82       	st	Y, r1
    3126:	ce 5c       	subi	r28, 0xCE	; 206
    3128:	d0 40       	sbci	r29, 0x00	; 0
    312a:	c1 53       	subi	r28, 0x31	; 49
    312c:	df 4f       	sbci	r29, 0xFF	; 255
    312e:	18 82       	st	Y, r1
    3130:	cf 5c       	subi	r28, 0xCF	; 207
    3132:	d0 40       	sbci	r29, 0x00	; 0
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    3134:	10 91 e4 29 	lds	r17, 0x29E4	; 0x8029e4 <sSensorDataSnapshot+0x79>
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    3138:	60 91 d4 29 	lds	r22, 0x29D4	; 0x8029d4 <sSensorDataSnapshot+0x69>
    313c:	70 91 d5 29 	lds	r23, 0x29D5	; 0x8029d5 <sSensorDataSnapshot+0x6a>
    3140:	80 91 d6 29 	lds	r24, 0x29D6	; 0x8029d6 <sSensorDataSnapshot+0x6b>
    3144:	90 91 d7 29 	lds	r25, 0x29D7	; 0x8029d7 <sSensorDataSnapshot+0x6c>
    3148:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e4       	ldi	r19, 0x40	; 64
    3150:	4c e9       	ldi	r20, 0x9C	; 156
    3152:	55 e4       	ldi	r21, 0x45	; 69
    3154:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3158:	c4 54       	subi	r28, 0x44	; 68
    315a:	df 4f       	sbci	r29, 0xFF	; 255
    315c:	68 83       	st	Y, r22
    315e:	cc 5b       	subi	r28, 0xBC	; 188
    3160:	d0 40       	sbci	r29, 0x00	; 0
    3162:	c3 54       	subi	r28, 0x43	; 67
    3164:	df 4f       	sbci	r29, 0xFF	; 255
    3166:	78 83       	st	Y, r23
    3168:	cd 5b       	subi	r28, 0xBD	; 189
    316a:	d0 40       	sbci	r29, 0x00	; 0
    316c:	c2 54       	subi	r28, 0x42	; 66
    316e:	df 4f       	sbci	r29, 0xFF	; 255
    3170:	88 83       	st	Y, r24
    3172:	ce 5b       	subi	r28, 0xBE	; 190
    3174:	d0 40       	sbci	r29, 0x00	; 0
    3176:	c1 54       	subi	r28, 0x41	; 65
    3178:	df 4f       	sbci	r29, 0xFF	; 255
    317a:	98 83       	st	Y, r25
    317c:	cf 5b       	subi	r28, 0xBF	; 191
    317e:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    3180:	20 91 ce 29 	lds	r18, 0x29CE	; 0x8029ce <sSensorDataSnapshot+0x63>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3184:	91 e0       	ldi	r25, 0x01	; 1
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	21 11       	cpse	r18, r1
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	ce 56       	subi	r28, 0x6E	; 110
    318e:	df 4f       	sbci	r29, 0xFF	; 255
    3190:	98 83       	st	Y, r25
    3192:	c2 59       	subi	r28, 0x92	; 146
    3194:	d0 40       	sbci	r29, 0x00	; 0
    3196:	cd 56       	subi	r28, 0x6D	; 109
    3198:	df 4f       	sbci	r29, 0xFF	; 255
    319a:	88 83       	st	Y, r24
    319c:	c3 59       	subi	r28, 0x93	; 147
    319e:	d0 40       	sbci	r29, 0x00	; 0
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    31a0:	60 91 d0 29 	lds	r22, 0x29D0	; 0x8029d0 <sSensorDataSnapshot+0x65>
    31a4:	70 91 d1 29 	lds	r23, 0x29D1	; 0x8029d1 <sSensorDataSnapshot+0x66>
    31a8:	80 91 d2 29 	lds	r24, 0x29D2	; 0x8029d2 <sSensorDataSnapshot+0x67>
    31ac:	90 91 d3 29 	lds	r25, 0x29D3	; 0x8029d3 <sSensorDataSnapshot+0x68>
    31b0:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e4       	ldi	r19, 0x40	; 64
    31b8:	4c e9       	ldi	r20, 0x9C	; 156
    31ba:	55 e4       	ldi	r21, 0x45	; 69
    31bc:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    31c0:	c0 54       	subi	r28, 0x40	; 64
    31c2:	df 4f       	sbci	r29, 0xFF	; 255
    31c4:	68 83       	st	Y, r22
    31c6:	c0 5c       	subi	r28, 0xC0	; 192
    31c8:	d0 40       	sbci	r29, 0x00	; 0
    31ca:	cf 53       	subi	r28, 0x3F	; 63
    31cc:	df 4f       	sbci	r29, 0xFF	; 255
    31ce:	78 83       	st	Y, r23
    31d0:	c1 5c       	subi	r28, 0xC1	; 193
    31d2:	d0 40       	sbci	r29, 0x00	; 0
    31d4:	ce 53       	subi	r28, 0x3E	; 62
    31d6:	df 4f       	sbci	r29, 0xFF	; 255
    31d8:	88 83       	st	Y, r24
    31da:	c2 5c       	subi	r28, 0xC2	; 194
    31dc:	d0 40       	sbci	r29, 0x00	; 0
    31de:	cd 53       	subi	r28, 0x3D	; 61
    31e0:	df 4f       	sbci	r29, 0xFF	; 255
    31e2:	98 83       	st	Y, r25
    31e4:	c3 5c       	subi	r28, 0xC3	; 195
    31e6:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
    31e8:	20 91 cd 29 	lds	r18, 0x29CD	; 0x8029cd <sSensorDataSnapshot+0x62>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    31ec:	91 e0       	ldi	r25, 0x01	; 1
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	21 11       	cpse	r18, r1
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	cc 56       	subi	r28, 0x6C	; 108
    31f6:	df 4f       	sbci	r29, 0xFF	; 255
    31f8:	98 83       	st	Y, r25
    31fa:	c4 59       	subi	r28, 0x94	; 148
    31fc:	d0 40       	sbci	r29, 0x00	; 0
    31fe:	cb 56       	subi	r28, 0x6B	; 107
    3200:	df 4f       	sbci	r29, 0xFF	; 255
    3202:	88 83       	st	Y, r24
    3204:	c5 59       	subi	r28, 0x95	; 149
    3206:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
    3208:	60 91 95 29 	lds	r22, 0x2995	; 0x802995 <sSensorDataSnapshot+0x2a>
    320c:	70 91 96 29 	lds	r23, 0x2996	; 0x802996 <sSensorDataSnapshot+0x2b>
    3210:	80 91 97 29 	lds	r24, 0x2997	; 0x802997 <sSensorDataSnapshot+0x2c>
    3214:	90 91 98 29 	lds	r25, 0x2998	; 0x802998 <sSensorDataSnapshot+0x2d>
    3218:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e4       	ldi	r19, 0x40	; 64
    3220:	4c e9       	ldi	r20, 0x9C	; 156
    3222:	55 e4       	ldi	r21, 0x45	; 69
    3224:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3228:	cc 53       	subi	r28, 0x3C	; 60
    322a:	df 4f       	sbci	r29, 0xFF	; 255
    322c:	68 83       	st	Y, r22
    322e:	c4 5c       	subi	r28, 0xC4	; 196
    3230:	d0 40       	sbci	r29, 0x00	; 0
    3232:	cb 53       	subi	r28, 0x3B	; 59
    3234:	df 4f       	sbci	r29, 0xFF	; 255
    3236:	78 83       	st	Y, r23
    3238:	c5 5c       	subi	r28, 0xC5	; 197
    323a:	d0 40       	sbci	r29, 0x00	; 0
    323c:	ca 53       	subi	r28, 0x3A	; 58
    323e:	df 4f       	sbci	r29, 0xFF	; 255
    3240:	88 83       	st	Y, r24
    3242:	c6 5c       	subi	r28, 0xC6	; 198
    3244:	d0 40       	sbci	r29, 0x00	; 0
    3246:	c9 53       	subi	r28, 0x39	; 57
    3248:	df 4f       	sbci	r29, 0xFF	; 255
    324a:	98 83       	st	Y, r25
    324c:	c7 5c       	subi	r28, 0xC7	; 199
    324e:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
    3250:	20 91 94 29 	lds	r18, 0x2994	; 0x802994 <sSensorDataSnapshot+0x29>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	21 11       	cpse	r18, r1
    325a:	01 c0       	rjmp	.+2      	; 0x325e <PrintCSV_H2A+0x278>
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	ca 56       	subi	r28, 0x6A	; 106
    3260:	df 4f       	sbci	r29, 0xFF	; 255
    3262:	98 83       	st	Y, r25
    3264:	c6 59       	subi	r28, 0x96	; 150
    3266:	d0 40       	sbci	r29, 0x00	; 0
    3268:	c9 56       	subi	r28, 0x69	; 105
    326a:	df 4f       	sbci	r29, 0xFF	; 255
    326c:	88 83       	st	Y, r24
    326e:	c7 59       	subi	r28, 0x97	; 151
    3270:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
    3272:	60 91 c9 29 	lds	r22, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5e>
    3276:	70 91 ca 29 	lds	r23, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5f>
    327a:	80 91 cb 29 	lds	r24, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x60>
    327e:	90 91 cc 29 	lds	r25, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x61>
    3282:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    3286:	27 eb       	ldi	r18, 0xB7	; 183
    3288:	33 ef       	ldi	r19, 0xF3	; 243
    328a:	4d e7       	ldi	r20, 0x7D	; 125
    328c:	5d e3       	ldi	r21, 0x3D	; 61
    328e:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3292:	c8 53       	subi	r28, 0x38	; 56
    3294:	df 4f       	sbci	r29, 0xFF	; 255
    3296:	68 83       	st	Y, r22
    3298:	c8 5c       	subi	r28, 0xC8	; 200
    329a:	d0 40       	sbci	r29, 0x00	; 0
    329c:	c7 53       	subi	r28, 0x37	; 55
    329e:	df 4f       	sbci	r29, 0xFF	; 255
    32a0:	78 83       	st	Y, r23
    32a2:	c9 5c       	subi	r28, 0xC9	; 201
    32a4:	d0 40       	sbci	r29, 0x00	; 0
    32a6:	c6 53       	subi	r28, 0x36	; 54
    32a8:	df 4f       	sbci	r29, 0xFF	; 255
    32aa:	88 83       	st	Y, r24
    32ac:	ca 5c       	subi	r28, 0xCA	; 202
    32ae:	d0 40       	sbci	r29, 0x00	; 0
    32b0:	c5 53       	subi	r28, 0x35	; 53
    32b2:	df 4f       	sbci	r29, 0xFF	; 255
    32b4:	98 83       	st	Y, r25
    32b6:	cb 5c       	subi	r28, 0xCB	; 203
    32b8:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
    32ba:	60 91 c5 29 	lds	r22, 0x29C5	; 0x8029c5 <sSensorDataSnapshot+0x5a>
    32be:	70 91 c6 29 	lds	r23, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5b>
    32c2:	80 91 c7 29 	lds	r24, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5c>
    32c6:	90 91 c8 29 	lds	r25, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5d>

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    32ca:	61 15       	cp	r22, r1
    32cc:	71 05       	cpc	r23, r1
    32ce:	81 05       	cpc	r24, r1
    32d0:	91 05       	cpc	r25, r1
    32d2:	09 f1       	breq	.+66     	; 0x3316 <PrintCSV_H2A+0x330>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    32d4:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e8       	ldi	r20, 0x80	; 128
    32de:	57 e3       	ldi	r21, 0x37	; 55
    32e0:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    32e4:	9b 01       	movw	r18, r22
    32e6:	ac 01       	movw	r20, r24
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	70 e8       	ldi	r23, 0x80	; 128
    32ec:	8b e8       	ldi	r24, 0x8B	; 139
    32ee:	94 e4       	ldi	r25, 0x44	; 68
    32f0:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    32f4:	69 83       	std	Y+1, r22	; 0x01
    32f6:	07 2f       	mov	r16, r23
    32f8:	38 2e       	mov	r3, r24
    32fa:	29 2e       	mov	r2, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e8       	ldi	r20, 0x80	; 128
    3302:	5f e3       	ldi	r21, 0x3F	; 63
    3304:	0e 94 3e 31 	call	0x627c	; 0x627c <__cmpsf2>
    3308:	88 23       	and	r24, r24
    330a:	4c f4       	brge	.+18     	; 0x331e <PrintCSV_H2A+0x338>
		res = 0.0f;
    330c:	19 82       	std	Y+1, r1	; 0x01
    330e:	00 e0       	ldi	r16, 0x00	; 0
    3310:	31 2c       	mov	r3, r1
    3312:	21 2c       	mov	r2, r1
    3314:	04 c0       	rjmp	.+8      	; 0x331e <PrintCSV_H2A+0x338>
	}
	else
	res = 0.0f;
    3316:	19 82       	std	Y+1, r1	; 0x01
    3318:	00 e0       	ldi	r16, 0x00	; 0
    331a:	31 2c       	mov	r3, r1
    331c:	21 2c       	mov	r2, r1
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    331e:	eb e6       	ldi	r30, 0x6B	; 107
    3320:	f9 e2       	ldi	r31, 0x29	; 41
    3322:	60 91 de 29 	lds	r22, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x73>
    3326:	70 91 df 29 	lds	r23, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x74>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    332a:	20 91 dc 29 	lds	r18, 0x29DC	; 0x8029dc <sSensorDataSnapshot+0x71>
    332e:	30 91 dd 29 	lds	r19, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x72>
    3332:	2a 83       	std	Y+2, r18	; 0x02
    3334:	3b 83       	std	Y+3, r19	; 0x03
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    3336:	c6 a4       	ldd	r12, Z+46	; 0x2e
    3338:	d7 a4       	ldd	r13, Z+47	; 0x2f
    333a:	e0 a8       	ldd	r14, Z+48	; 0x30
    333c:	f1 a8       	ldd	r15, Z+49	; 0x31
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    333e:	ad eb       	ldi	r26, 0xBD	; 189
    3340:	b9 e2       	ldi	r27, 0x29	; 41
    3342:	3c 91       	ld	r19, X
    3344:	c8 56       	subi	r28, 0x68	; 104
    3346:	df 4f       	sbci	r29, 0xFF	; 255
    3348:	38 83       	st	Y, r19
    334a:	c8 59       	subi	r28, 0x98	; 152
    334c:	d0 40       	sbci	r29, 0x00	; 0
    334e:	11 96       	adiw	r26, 0x01	; 1
    3350:	4c 91       	ld	r20, X
    3352:	11 97       	sbiw	r26, 0x01	; 1
    3354:	c7 56       	subi	r28, 0x67	; 103
    3356:	df 4f       	sbci	r29, 0xFF	; 255
    3358:	48 83       	st	Y, r20
    335a:	c9 59       	subi	r28, 0x99	; 153
    335c:	d0 40       	sbci	r29, 0x00	; 0
    335e:	12 96       	adiw	r26, 0x02	; 2
    3360:	5c 91       	ld	r21, X
    3362:	12 97       	sbiw	r26, 0x02	; 2
    3364:	c6 56       	subi	r28, 0x66	; 102
    3366:	df 4f       	sbci	r29, 0xFF	; 255
    3368:	58 83       	st	Y, r21
    336a:	ca 59       	subi	r28, 0x9A	; 154
    336c:	d0 40       	sbci	r29, 0x00	; 0
    336e:	13 96       	adiw	r26, 0x03	; 3
    3370:	8c 91       	ld	r24, X
    3372:	13 97       	sbiw	r26, 0x03	; 3
    3374:	c5 56       	subi	r28, 0x65	; 101
    3376:	df 4f       	sbci	r29, 0xFF	; 255
    3378:	88 83       	st	Y, r24
    337a:	cb 59       	subi	r28, 0x9B	; 155
    337c:	d0 40       	sbci	r29, 0x00	; 0
    337e:	14 96       	adiw	r26, 0x04	; 4
    3380:	9c 91       	ld	r25, X
    3382:	14 97       	sbiw	r26, 0x04	; 4
    3384:	c4 56       	subi	r28, 0x64	; 100
    3386:	df 4f       	sbci	r29, 0xFF	; 255
    3388:	98 83       	st	Y, r25
    338a:	cc 59       	subi	r28, 0x9C	; 156
    338c:	d0 40       	sbci	r29, 0x00	; 0
    338e:	15 96       	adiw	r26, 0x05	; 5
    3390:	2c 91       	ld	r18, X
    3392:	15 97       	sbiw	r26, 0x05	; 5
    3394:	c3 56       	subi	r28, 0x63	; 99
    3396:	df 4f       	sbci	r29, 0xFF	; 255
    3398:	28 83       	st	Y, r18
    339a:	cd 59       	subi	r28, 0x9D	; 157
    339c:	d0 40       	sbci	r29, 0x00	; 0
    339e:	16 96       	adiw	r26, 0x06	; 6
    33a0:	3c 91       	ld	r19, X
    33a2:	16 97       	sbiw	r26, 0x06	; 6
    33a4:	c2 56       	subi	r28, 0x62	; 98
    33a6:	df 4f       	sbci	r29, 0xFF	; 255
    33a8:	38 83       	st	Y, r19
    33aa:	ce 59       	subi	r28, 0x9E	; 158
    33ac:	d0 40       	sbci	r29, 0x00	; 0
    33ae:	17 96       	adiw	r26, 0x07	; 7
    33b0:	4c 91       	ld	r20, X
    33b2:	c1 56       	subi	r28, 0x61	; 97
    33b4:	df 4f       	sbci	r29, 0xFF	; 255
    33b6:	48 83       	st	Y, r20
    33b8:	cf 59       	subi	r28, 0x9F	; 159
    33ba:	d0 40       	sbci	r29, 0x00	; 0
    33bc:	40 90 0d 2a 	lds	r4, 0x2A0D	; 0x802a0d <sCal+0x28>
    33c0:	50 90 0e 2a 	lds	r5, 0x2A0E	; 0x802a0e <sCal+0x29>
    33c4:	60 90 0f 2a 	lds	r6, 0x2A0F	; 0x802a0f <sCal+0x2a>
    33c8:	70 90 10 2a 	lds	r7, 0x2A10	; 0x802a10 <sCal+0x2b>
    33cc:	80 90 11 2a 	lds	r8, 0x2A11	; 0x802a11 <sCal+0x2c>
    33d0:	90 90 12 2a 	lds	r9, 0x2A12	; 0x802a12 <sCal+0x2d>
    33d4:	a0 90 13 2a 	lds	r10, 0x2A13	; 0x802a13 <sCal+0x2e>
    33d8:	b0 90 14 2a 	lds	r11, 0x2A14	; 0x802a14 <sCal+0x2f>
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    33dc:	80 91 b1 29 	lds	r24, 0x29B1	; 0x8029b1 <sSensorDataSnapshot+0x46>
    33e0:	90 91 b2 29 	lds	r25, 0x29B2	; 0x8029b2 <sSensorDataSnapshot+0x47>
    33e4:	a0 91 b3 29 	lds	r26, 0x29B3	; 0x8029b3 <sSensorDataSnapshot+0x48>
    33e8:	b0 91 b4 29 	lds	r27, 0x29B4	; 0x8029b4 <sSensorDataSnapshot+0x49>
    33ec:	8c 83       	std	Y+4, r24	; 0x04
    33ee:	9d 83       	std	Y+5, r25	; 0x05
    33f0:	ae 83       	std	Y+6, r26	; 0x06
    33f2:	bf 83       	std	Y+7, r27	; 0x07
    33f4:	20 91 0d 2a 	lds	r18, 0x2A0D	; 0x802a0d <sCal+0x28>
    33f8:	30 91 0e 2a 	lds	r19, 0x2A0E	; 0x802a0e <sCal+0x29>
    33fc:	40 91 0f 2a 	lds	r20, 0x2A0F	; 0x802a0f <sCal+0x2a>
    3400:	50 91 10 2a 	lds	r21, 0x2A10	; 0x802a10 <sCal+0x2b>
    3404:	28 87       	std	Y+8, r18	; 0x08
    3406:	39 87       	std	Y+9, r19	; 0x09
    3408:	4a 87       	std	Y+10, r20	; 0x0a
    340a:	5b 87       	std	Y+11, r21	; 0x0b
    340c:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <sCal+0x2c>
    3410:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <sCal+0x2d>
    3414:	a0 91 13 2a 	lds	r26, 0x2A13	; 0x802a13 <sCal+0x2e>
    3418:	b0 91 14 2a 	lds	r27, 0x2A14	; 0x802a14 <sCal+0x2f>
    341c:	8c 87       	std	Y+12, r24	; 0x0c
    341e:	9d 87       	std	Y+13, r25	; 0x0d
    3420:	ae 87       	std	Y+14, r26	; 0x0e
    3422:	bf 87       	std	Y+15, r27	; 0x0f
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    3424:	20 91 a9 29 	lds	r18, 0x29A9	; 0x8029a9 <sSensorDataSnapshot+0x3e>
    3428:	30 91 aa 29 	lds	r19, 0x29AA	; 0x8029aa <sSensorDataSnapshot+0x3f>
    342c:	40 91 ab 29 	lds	r20, 0x29AB	; 0x8029ab <sSensorDataSnapshot+0x40>
    3430:	50 91 ac 29 	lds	r21, 0x29AC	; 0x8029ac <sSensorDataSnapshot+0x41>
    3434:	28 8b       	std	Y+16, r18	; 0x10
    3436:	39 8b       	std	Y+17, r19	; 0x11
    3438:	4a 8b       	std	Y+18, r20	; 0x12
    343a:	5b 8b       	std	Y+19, r21	; 0x13
    343c:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <sCal+0x2c>
    3440:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <sCal+0x2d>
    3444:	a0 91 13 2a 	lds	r26, 0x2A13	; 0x802a13 <sCal+0x2e>
    3448:	b0 91 14 2a 	lds	r27, 0x2A14	; 0x802a14 <sCal+0x2f>
    344c:	8c 8b       	std	Y+20, r24	; 0x14
    344e:	9d 8b       	std	Y+21, r25	; 0x15
    3450:	ae 8b       	std	Y+22, r26	; 0x16
    3452:	bf 8b       	std	Y+23, r27	; 0x17
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    3454:	22 ad       	ldd	r18, Z+58	; 0x3a
    3456:	33 ad       	ldd	r19, Z+59	; 0x3b
    3458:	44 ad       	ldd	r20, Z+60	; 0x3c
    345a:	55 ad       	ldd	r21, Z+61	; 0x3d
    345c:	28 8f       	std	Y+24, r18	; 0x18
    345e:	39 8f       	std	Y+25, r19	; 0x19
    3460:	4a 8f       	std	Y+26, r20	; 0x1a
    3462:	5b 8f       	std	Y+27, r21	; 0x1b
    3464:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <sCal+0x28>
    3468:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <sCal+0x29>
    346c:	a0 91 0f 2a 	lds	r26, 0x2A0F	; 0x802a0f <sCal+0x2a>
    3470:	b0 91 10 2a 	lds	r27, 0x2A10	; 0x802a10 <sCal+0x2b>
    3474:	8c 8f       	std	Y+28, r24	; 0x1c
    3476:	9d 8f       	std	Y+29, r25	; 0x1d
    3478:	ae 8f       	std	Y+30, r26	; 0x1e
    347a:	bf 8f       	std	Y+31, r27	; 0x1f
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    347c:	25 eb       	ldi	r18, 0xB5	; 181
    347e:	39 e2       	ldi	r19, 0x29	; 41
    3480:	d9 01       	movw	r26, r18
    3482:	bc 91       	ld	r27, X
    3484:	c0 56       	subi	r28, 0x60	; 96
    3486:	df 4f       	sbci	r29, 0xFF	; 255
    3488:	b8 83       	st	Y, r27
    348a:	c0 5a       	subi	r28, 0xA0	; 160
    348c:	d0 40       	sbci	r29, 0x00	; 0
    348e:	40 91 b6 29 	lds	r20, 0x29B6	; 0x8029b6 <sSensorDataSnapshot+0x4b>
    3492:	cf 55       	subi	r28, 0x5F	; 95
    3494:	df 4f       	sbci	r29, 0xFF	; 255
    3496:	48 83       	st	Y, r20
    3498:	c1 5a       	subi	r28, 0xA1	; 161
    349a:	d0 40       	sbci	r29, 0x00	; 0
    349c:	50 91 b7 29 	lds	r21, 0x29B7	; 0x8029b7 <sSensorDataSnapshot+0x4c>
    34a0:	ce 55       	subi	r28, 0x5E	; 94
    34a2:	df 4f       	sbci	r29, 0xFF	; 255
    34a4:	58 83       	st	Y, r21
    34a6:	c2 5a       	subi	r28, 0xA2	; 162
    34a8:	d0 40       	sbci	r29, 0x00	; 0
    34aa:	80 91 b8 29 	lds	r24, 0x29B8	; 0x8029b8 <sSensorDataSnapshot+0x4d>
    34ae:	cd 55       	subi	r28, 0x5D	; 93
    34b0:	df 4f       	sbci	r29, 0xFF	; 255
    34b2:	88 83       	st	Y, r24
    34b4:	c3 5a       	subi	r28, 0xA3	; 163
    34b6:	d0 40       	sbci	r29, 0x00	; 0
    34b8:	90 91 b9 29 	lds	r25, 0x29B9	; 0x8029b9 <sSensorDataSnapshot+0x4e>
    34bc:	cc 55       	subi	r28, 0x5C	; 92
    34be:	df 4f       	sbci	r29, 0xFF	; 255
    34c0:	98 83       	st	Y, r25
    34c2:	c4 5a       	subi	r28, 0xA4	; 164
    34c4:	d0 40       	sbci	r29, 0x00	; 0
    34c6:	a0 91 ba 29 	lds	r26, 0x29BA	; 0x8029ba <sSensorDataSnapshot+0x4f>
    34ca:	cb 55       	subi	r28, 0x5B	; 91
    34cc:	df 4f       	sbci	r29, 0xFF	; 255
    34ce:	a8 83       	st	Y, r26
    34d0:	c5 5a       	subi	r28, 0xA5	; 165
    34d2:	d0 40       	sbci	r29, 0x00	; 0
    34d4:	b0 91 bb 29 	lds	r27, 0x29BB	; 0x8029bb <sSensorDataSnapshot+0x50>
    34d8:	ca 55       	subi	r28, 0x5A	; 90
    34da:	df 4f       	sbci	r29, 0xFF	; 255
    34dc:	b8 83       	st	Y, r27
    34de:	c6 5a       	subi	r28, 0xA6	; 166
    34e0:	d0 40       	sbci	r29, 0x00	; 0
    34e2:	40 91 bc 29 	lds	r20, 0x29BC	; 0x8029bc <sSensorDataSnapshot+0x51>
    34e6:	c0 53       	subi	r28, 0x30	; 48
    34e8:	df 4f       	sbci	r29, 0xFF	; 255
    34ea:	48 83       	st	Y, r20
    34ec:	c0 5d       	subi	r28, 0xD0	; 208
    34ee:	d0 40       	sbci	r29, 0x00	; 0
    34f0:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    34f4:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    34f8:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    34fc:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    3500:	88 a3       	std	Y+32, r24	; 0x20
    3502:	99 a3       	std	Y+33, r25	; 0x21
    3504:	aa a3       	std	Y+34, r26	; 0x22
    3506:	bb a3       	std	Y+35, r27	; 0x23
    3508:	20 91 09 2a 	lds	r18, 0x2A09	; 0x802a09 <sCal+0x24>
    350c:	30 91 0a 2a 	lds	r19, 0x2A0A	; 0x802a0a <sCal+0x25>
    3510:	40 91 0b 2a 	lds	r20, 0x2A0B	; 0x802a0b <sCal+0x26>
    3514:	50 91 0c 2a 	lds	r21, 0x2A0C	; 0x802a0c <sCal+0x27>
    3518:	2c a3       	std	Y+36, r18	; 0x24
    351a:	3d a3       	std	Y+37, r19	; 0x25
    351c:	4e a3       	std	Y+38, r20	; 0x26
    351e:	5f a3       	std	Y+39, r21	; 0x27
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3520:	80 91 ad 29 	lds	r24, 0x29AD	; 0x8029ad <sSensorDataSnapshot+0x42>
    3524:	90 91 ae 29 	lds	r25, 0x29AE	; 0x8029ae <sSensorDataSnapshot+0x43>
    3528:	a0 91 af 29 	lds	r26, 0x29AF	; 0x8029af <sSensorDataSnapshot+0x44>
    352c:	b0 91 b0 29 	lds	r27, 0x29B0	; 0x8029b0 <sSensorDataSnapshot+0x45>
    3530:	88 a7       	std	Y+40, r24	; 0x28
    3532:	99 a7       	std	Y+41, r25	; 0x29
    3534:	aa a7       	std	Y+42, r26	; 0x2a
    3536:	bb a7       	std	Y+43, r27	; 0x2b
    3538:	20 91 05 2a 	lds	r18, 0x2A05	; 0x802a05 <sCal+0x20>
    353c:	30 91 06 2a 	lds	r19, 0x2A06	; 0x802a06 <sCal+0x21>
    3540:	40 91 07 2a 	lds	r20, 0x2A07	; 0x802a07 <sCal+0x22>
    3544:	50 91 08 2a 	lds	r21, 0x2A08	; 0x802a08 <sCal+0x23>
    3548:	2c a7       	std	Y+44, r18	; 0x2c
    354a:	3d a7       	std	Y+45, r19	; 0x2d
    354c:	4e a7       	std	Y+46, r20	; 0x2e
    354e:	5f a7       	std	Y+47, r21	; 0x2f
    3550:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    3554:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    3558:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    355c:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    3560:	88 ab       	std	Y+48, r24	; 0x30
    3562:	99 ab       	std	Y+49, r25	; 0x31
    3564:	aa ab       	std	Y+50, r26	; 0x32
    3566:	bb ab       	std	Y+51, r27	; 0x33
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    3568:	26 a9       	ldd	r18, Z+54	; 0x36
    356a:	37 a9       	ldd	r19, Z+55	; 0x37
    356c:	40 ad       	ldd	r20, Z+56	; 0x38
    356e:	51 ad       	ldd	r21, Z+57	; 0x39
    3570:	2c ab       	std	Y+52, r18	; 0x34
    3572:	3d ab       	std	Y+53, r19	; 0x35
    3574:	4e ab       	std	Y+54, r20	; 0x36
    3576:	5f ab       	std	Y+55, r21	; 0x37
    3578:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    357c:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    3580:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    3584:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    3588:	88 af       	std	Y+56, r24	; 0x38
    358a:	99 af       	std	Y+57, r25	; 0x39
    358c:	aa af       	std	Y+58, r26	; 0x3a
    358e:	bb af       	std	Y+59, r27	; 0x3b
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    3590:	22 a9       	ldd	r18, Z+50	; 0x32
    3592:	33 a9       	ldd	r19, Z+51	; 0x33
    3594:	44 a9       	ldd	r20, Z+52	; 0x34
    3596:	55 a9       	ldd	r21, Z+53	; 0x35
    3598:	2c af       	std	Y+60, r18	; 0x3c
    359a:	3d af       	std	Y+61, r19	; 0x3d
    359c:	4e af       	std	Y+62, r20	; 0x3e
    359e:	5f af       	std	Y+63, r21	; 0x3f
    35a0:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    35a4:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    35a8:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    35ac:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    35b0:	24 96       	adiw	r28, 0x04	; 4
    35b2:	8c af       	std	Y+60, r24	; 0x3c
    35b4:	9d af       	std	Y+61, r25	; 0x3d
    35b6:	ae af       	std	Y+62, r26	; 0x3e
    35b8:	bf af       	std	Y+63, r27	; 0x3f
    35ba:	24 97       	sbiw	r28, 0x04	; 4
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
    35bc:	90 a1       	ldd	r25, Z+32	; 0x20
    35be:	c9 55       	subi	r28, 0x59	; 89
    35c0:	df 4f       	sbci	r29, 0xFF	; 255
    35c2:	98 83       	st	Y, r25
    35c4:	c7 5a       	subi	r28, 0xA7	; 167
    35c6:	d0 40       	sbci	r29, 0x00	; 0
    35c8:	a1 a1       	ldd	r26, Z+33	; 0x21
    35ca:	c8 55       	subi	r28, 0x58	; 88
    35cc:	df 4f       	sbci	r29, 0xFF	; 255
    35ce:	a8 83       	st	Y, r26
    35d0:	c8 5a       	subi	r28, 0xA8	; 168
    35d2:	d0 40       	sbci	r29, 0x00	; 0
    35d4:	b2 a1       	ldd	r27, Z+34	; 0x22
    35d6:	c7 55       	subi	r28, 0x57	; 87
    35d8:	df 4f       	sbci	r29, 0xFF	; 255
    35da:	b8 83       	st	Y, r27
    35dc:	c9 5a       	subi	r28, 0xA9	; 169
    35de:	d0 40       	sbci	r29, 0x00	; 0
    35e0:	23 a1       	ldd	r18, Z+35	; 0x23
    35e2:	c6 55       	subi	r28, 0x56	; 86
    35e4:	df 4f       	sbci	r29, 0xFF	; 255
    35e6:	28 83       	st	Y, r18
    35e8:	ca 5a       	subi	r28, 0xAA	; 170
    35ea:	d0 40       	sbci	r29, 0x00	; 0
    35ec:	34 a1       	ldd	r19, Z+36	; 0x24
    35ee:	c5 55       	subi	r28, 0x55	; 85
    35f0:	df 4f       	sbci	r29, 0xFF	; 255
    35f2:	38 83       	st	Y, r19
    35f4:	cb 5a       	subi	r28, 0xAB	; 171
    35f6:	d0 40       	sbci	r29, 0x00	; 0
    35f8:	45 a1       	ldd	r20, Z+37	; 0x25
    35fa:	c4 55       	subi	r28, 0x54	; 84
    35fc:	df 4f       	sbci	r29, 0xFF	; 255
    35fe:	48 83       	st	Y, r20
    3600:	cc 5a       	subi	r28, 0xAC	; 172
    3602:	d0 40       	sbci	r29, 0x00	; 0
    3604:	56 a1       	ldd	r21, Z+38	; 0x26
    3606:	c3 55       	subi	r28, 0x53	; 83
    3608:	df 4f       	sbci	r29, 0xFF	; 255
    360a:	58 83       	st	Y, r21
    360c:	cd 5a       	subi	r28, 0xAD	; 173
    360e:	d0 40       	sbci	r29, 0x00	; 0
    3610:	87 a1       	ldd	r24, Z+39	; 0x27
    3612:	cf 52       	subi	r28, 0x2F	; 47
    3614:	df 4f       	sbci	r29, 0xFF	; 255
    3616:	88 83       	st	Y, r24
    3618:	c1 5d       	subi	r28, 0xD1	; 209
    361a:	d0 40       	sbci	r29, 0x00	; 0
    361c:	20 91 f5 29 	lds	r18, 0x29F5	; 0x8029f5 <sCal+0x10>
    3620:	30 91 f6 29 	lds	r19, 0x29F6	; 0x8029f6 <sCal+0x11>
    3624:	40 91 f7 29 	lds	r20, 0x29F7	; 0x8029f7 <sCal+0x12>
    3628:	50 91 f8 29 	lds	r21, 0x29F8	; 0x8029f8 <sCal+0x13>
    362c:	28 96       	adiw	r28, 0x08	; 8
    362e:	2c af       	std	Y+60, r18	; 0x3c
    3630:	3d af       	std	Y+61, r19	; 0x3d
    3632:	4e af       	std	Y+62, r20	; 0x3e
    3634:	5f af       	std	Y+63, r21	; 0x3f
    3636:	28 97       	sbiw	r28, 0x08	; 8
    3638:	80 91 f9 29 	lds	r24, 0x29F9	; 0x8029f9 <sCal+0x14>
    363c:	90 91 fa 29 	lds	r25, 0x29FA	; 0x8029fa <sCal+0x15>
    3640:	a0 91 fb 29 	lds	r26, 0x29FB	; 0x8029fb <sCal+0x16>
    3644:	b0 91 fc 29 	lds	r27, 0x29FC	; 0x8029fc <sCal+0x17>
    3648:	2c 96       	adiw	r28, 0x0c	; 12
    364a:	8c af       	std	Y+60, r24	; 0x3c
    364c:	9d af       	std	Y+61, r25	; 0x3d
    364e:	ae af       	std	Y+62, r26	; 0x3e
    3650:	bf af       	std	Y+63, r27	; 0x3f
    3652:	2c 97       	sbiw	r28, 0x0c	; 12
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
    3654:	24 89       	ldd	r18, Z+20	; 0x14
    3656:	35 89       	ldd	r19, Z+21	; 0x15
    3658:	46 89       	ldd	r20, Z+22	; 0x16
    365a:	57 89       	ldd	r21, Z+23	; 0x17
    365c:	60 96       	adiw	r28, 0x10	; 16
    365e:	2c af       	std	Y+60, r18	; 0x3c
    3660:	3d af       	std	Y+61, r19	; 0x3d
    3662:	4e af       	std	Y+62, r20	; 0x3e
    3664:	5f af       	std	Y+63, r21	; 0x3f
    3666:	60 97       	sbiw	r28, 0x10	; 16
    3668:	80 91 f5 29 	lds	r24, 0x29F5	; 0x8029f5 <sCal+0x10>
    366c:	90 91 f6 29 	lds	r25, 0x29F6	; 0x8029f6 <sCal+0x11>
    3670:	a0 91 f7 29 	lds	r26, 0x29F7	; 0x8029f7 <sCal+0x12>
    3674:	b0 91 f8 29 	lds	r27, 0x29F8	; 0x8029f8 <sCal+0x13>
    3678:	64 96       	adiw	r28, 0x14	; 20
    367a:	8c af       	std	Y+60, r24	; 0x3c
    367c:	9d af       	std	Y+61, r25	; 0x3d
    367e:	ae af       	std	Y+62, r26	; 0x3e
    3680:	bf af       	std	Y+63, r27	; 0x3f
    3682:	64 97       	sbiw	r28, 0x14	; 20
    3684:	20 91 f9 29 	lds	r18, 0x29F9	; 0x8029f9 <sCal+0x14>
    3688:	30 91 fa 29 	lds	r19, 0x29FA	; 0x8029fa <sCal+0x15>
    368c:	40 91 fb 29 	lds	r20, 0x29FB	; 0x8029fb <sCal+0x16>
    3690:	50 91 fc 29 	lds	r21, 0x29FC	; 0x8029fc <sCal+0x17>
    3694:	68 96       	adiw	r28, 0x18	; 24
    3696:	2c af       	std	Y+60, r18	; 0x3c
    3698:	3d af       	std	Y+61, r19	; 0x3d
    369a:	4e af       	std	Y+62, r20	; 0x3e
    369c:	5f af       	std	Y+63, r21	; 0x3f
    369e:	68 97       	sbiw	r28, 0x18	; 24
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
    36a0:	84 85       	ldd	r24, Z+12	; 0x0c
    36a2:	95 85       	ldd	r25, Z+13	; 0x0d
    36a4:	a6 85       	ldd	r26, Z+14	; 0x0e
    36a6:	b7 85       	ldd	r27, Z+15	; 0x0f
    36a8:	6c 96       	adiw	r28, 0x1c	; 28
    36aa:	8c af       	std	Y+60, r24	; 0x3c
    36ac:	9d af       	std	Y+61, r25	; 0x3d
    36ae:	ae af       	std	Y+62, r26	; 0x3e
    36b0:	bf af       	std	Y+63, r27	; 0x3f
    36b2:	6c 97       	sbiw	r28, 0x1c	; 28
    36b4:	20 91 f9 29 	lds	r18, 0x29F9	; 0x8029f9 <sCal+0x14>
    36b8:	30 91 fa 29 	lds	r19, 0x29FA	; 0x8029fa <sCal+0x15>
    36bc:	40 91 fb 29 	lds	r20, 0x29FB	; 0x8029fb <sCal+0x16>
    36c0:	50 91 fc 29 	lds	r21, 0x29FC	; 0x8029fc <sCal+0x17>
    36c4:	a0 96       	adiw	r28, 0x20	; 32
    36c6:	2c af       	std	Y+60, r18	; 0x3c
    36c8:	3d af       	std	Y+61, r19	; 0x3d
    36ca:	4e af       	std	Y+62, r20	; 0x3e
    36cc:	5f af       	std	Y+63, r21	; 0x3f
    36ce:	a0 97       	sbiw	r28, 0x20	; 32
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
    36d0:	80 85       	ldd	r24, Z+8	; 0x08
    36d2:	91 85       	ldd	r25, Z+9	; 0x09
    36d4:	a2 85       	ldd	r26, Z+10	; 0x0a
    36d6:	b3 85       	ldd	r27, Z+11	; 0x0b
    36d8:	a4 96       	adiw	r28, 0x24	; 36
    36da:	8c af       	std	Y+60, r24	; 0x3c
    36dc:	9d af       	std	Y+61, r25	; 0x3d
    36de:	ae af       	std	Y+62, r26	; 0x3e
    36e0:	bf af       	std	Y+63, r27	; 0x3f
    36e2:	a4 97       	sbiw	r28, 0x24	; 36
    36e4:	20 91 f5 29 	lds	r18, 0x29F5	; 0x8029f5 <sCal+0x10>
    36e8:	30 91 f6 29 	lds	r19, 0x29F6	; 0x8029f6 <sCal+0x11>
    36ec:	40 91 f7 29 	lds	r20, 0x29F7	; 0x8029f7 <sCal+0x12>
    36f0:	50 91 f8 29 	lds	r21, 0x29F8	; 0x8029f8 <sCal+0x13>
    36f4:	a8 96       	adiw	r28, 0x28	; 40
    36f6:	2c af       	std	Y+60, r18	; 0x3c
    36f8:	3d af       	std	Y+61, r19	; 0x3d
    36fa:	4e af       	std	Y+62, r20	; 0x3e
    36fc:	5f af       	std	Y+63, r21	; 0x3f
    36fe:	a8 97       	sbiw	r28, 0x28	; 40
	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
    3700:	30 8d       	ldd	r19, Z+24	; 0x18
    3702:	c2 55       	subi	r28, 0x52	; 82
    3704:	df 4f       	sbci	r29, 0xFF	; 255
    3706:	38 83       	st	Y, r19
    3708:	ce 5a       	subi	r28, 0xAE	; 174
    370a:	d0 40       	sbci	r29, 0x00	; 0
    370c:	41 8d       	ldd	r20, Z+25	; 0x19
    370e:	c1 55       	subi	r28, 0x51	; 81
    3710:	df 4f       	sbci	r29, 0xFF	; 255
    3712:	48 83       	st	Y, r20
    3714:	cf 5a       	subi	r28, 0xAF	; 175
    3716:	d0 40       	sbci	r29, 0x00	; 0
    3718:	52 8d       	ldd	r21, Z+26	; 0x1a
    371a:	c0 55       	subi	r28, 0x50	; 80
    371c:	df 4f       	sbci	r29, 0xFF	; 255
    371e:	58 83       	st	Y, r21
    3720:	c0 5b       	subi	r28, 0xB0	; 176
    3722:	d0 40       	sbci	r29, 0x00	; 0
    3724:	83 8d       	ldd	r24, Z+27	; 0x1b
    3726:	cf 54       	subi	r28, 0x4F	; 79
    3728:	df 4f       	sbci	r29, 0xFF	; 255
    372a:	88 83       	st	Y, r24
    372c:	c1 5b       	subi	r28, 0xB1	; 177
    372e:	d0 40       	sbci	r29, 0x00	; 0
    3730:	94 8d       	ldd	r25, Z+28	; 0x1c
    3732:	ce 54       	subi	r28, 0x4E	; 78
    3734:	df 4f       	sbci	r29, 0xFF	; 255
    3736:	98 83       	st	Y, r25
    3738:	c2 5b       	subi	r28, 0xB2	; 178
    373a:	d0 40       	sbci	r29, 0x00	; 0
    373c:	a5 8d       	ldd	r26, Z+29	; 0x1d
    373e:	cd 54       	subi	r28, 0x4D	; 77
    3740:	df 4f       	sbci	r29, 0xFF	; 255
    3742:	a8 83       	st	Y, r26
    3744:	c3 5b       	subi	r28, 0xB3	; 179
    3746:	d0 40       	sbci	r29, 0x00	; 0
    3748:	b6 8d       	ldd	r27, Z+30	; 0x1e
    374a:	cc 54       	subi	r28, 0x4C	; 76
    374c:	df 4f       	sbci	r29, 0xFF	; 255
    374e:	b8 83       	st	Y, r27
    3750:	c4 5b       	subi	r28, 0xB4	; 180
    3752:	d0 40       	sbci	r29, 0x00	; 0
    3754:	27 8d       	ldd	r18, Z+31	; 0x1f
    3756:	cb 54       	subi	r28, 0x4B	; 75
    3758:	df 4f       	sbci	r29, 0xFF	; 255
    375a:	28 83       	st	Y, r18
    375c:	c5 5b       	subi	r28, 0xB5	; 181
    375e:	d0 40       	sbci	r29, 0x00	; 0
    3760:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <sCal+0x8>
    3764:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <sCal+0x9>
    3768:	a0 91 ef 29 	lds	r26, 0x29EF	; 0x8029ef <sCal+0xa>
    376c:	b0 91 f0 29 	lds	r27, 0x29F0	; 0x8029f0 <sCal+0xb>
    3770:	ac 96       	adiw	r28, 0x2c	; 44
    3772:	8c af       	std	Y+60, r24	; 0x3c
    3774:	9d af       	std	Y+61, r25	; 0x3d
    3776:	ae af       	std	Y+62, r26	; 0x3e
    3778:	bf af       	std	Y+63, r27	; 0x3f
    377a:	ac 97       	sbiw	r28, 0x2c	; 44
    377c:	20 91 f1 29 	lds	r18, 0x29F1	; 0x8029f1 <sCal+0xc>
    3780:	30 91 f2 29 	lds	r19, 0x29F2	; 0x8029f2 <sCal+0xd>
    3784:	40 91 f3 29 	lds	r20, 0x29F3	; 0x8029f3 <sCal+0xe>
    3788:	50 91 f4 29 	lds	r21, 0x29F4	; 0x8029f4 <sCal+0xf>
    378c:	e0 96       	adiw	r28, 0x30	; 48
    378e:	2c af       	std	Y+60, r18	; 0x3c
    3790:	3d af       	std	Y+61, r19	; 0x3d
    3792:	4e af       	std	Y+62, r20	; 0x3e
    3794:	5f af       	std	Y+63, r21	; 0x3f
    3796:	e0 97       	sbiw	r28, 0x30	; 48

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
    3798:	80 89       	ldd	r24, Z+16	; 0x10
    379a:	91 89       	ldd	r25, Z+17	; 0x11
    379c:	a2 89       	ldd	r26, Z+18	; 0x12
    379e:	b3 89       	ldd	r27, Z+19	; 0x13
    37a0:	e4 96       	adiw	r28, 0x34	; 52
    37a2:	8c af       	std	Y+60, r24	; 0x3c
    37a4:	9d af       	std	Y+61, r25	; 0x3d
    37a6:	ae af       	std	Y+62, r26	; 0x3e
    37a8:	bf af       	std	Y+63, r27	; 0x3f
    37aa:	e4 97       	sbiw	r28, 0x34	; 52
    37ac:	20 91 ed 29 	lds	r18, 0x29ED	; 0x8029ed <sCal+0x8>
    37b0:	30 91 ee 29 	lds	r19, 0x29EE	; 0x8029ee <sCal+0x9>
    37b4:	40 91 ef 29 	lds	r20, 0x29EF	; 0x8029ef <sCal+0xa>
    37b8:	50 91 f0 29 	lds	r21, 0x29F0	; 0x8029f0 <sCal+0xb>
    37bc:	e8 96       	adiw	r28, 0x38	; 56
    37be:	2c af       	std	Y+60, r18	; 0x3c
    37c0:	3d af       	std	Y+61, r19	; 0x3d
    37c2:	4e af       	std	Y+62, r20	; 0x3e
    37c4:	5f af       	std	Y+63, r21	; 0x3f
    37c6:	e8 97       	sbiw	r28, 0x38	; 56
    37c8:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <sCal+0xc>
    37cc:	90 91 f2 29 	lds	r25, 0x29F2	; 0x8029f2 <sCal+0xd>
    37d0:	a0 91 f3 29 	lds	r26, 0x29F3	; 0x8029f3 <sCal+0xe>
    37d4:	b0 91 f4 29 	lds	r27, 0x29F4	; 0x8029f4 <sCal+0xf>
    37d8:	ec 96       	adiw	r28, 0x3c	; 60
    37da:	8c af       	std	Y+60, r24	; 0x3c
    37dc:	9d af       	std	Y+61, r25	; 0x3d
    37de:	ae af       	std	Y+62, r26	; 0x3e
    37e0:	bf af       	std	Y+63, r27	; 0x3f
    37e2:	ec 97       	sbiw	r28, 0x3c	; 60
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
    37e4:	24 81       	ldd	r18, Z+4	; 0x04
    37e6:	35 81       	ldd	r19, Z+5	; 0x05
    37e8:	46 81       	ldd	r20, Z+6	; 0x06
    37ea:	57 81       	ldd	r21, Z+7	; 0x07
    37ec:	c4 58       	subi	r28, 0x84	; 132
    37ee:	df 4f       	sbci	r29, 0xFF	; 255
    37f0:	28 83       	st	Y, r18
    37f2:	39 83       	std	Y+1, r19	; 0x01
    37f4:	4a 83       	std	Y+2, r20	; 0x02
    37f6:	5b 83       	std	Y+3, r21	; 0x03
    37f8:	cc 57       	subi	r28, 0x7C	; 124
    37fa:	d0 40       	sbci	r29, 0x00	; 0
    37fc:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <sCal+0xc>
    3800:	90 91 f2 29 	lds	r25, 0x29F2	; 0x8029f2 <sCal+0xd>
    3804:	a0 91 f3 29 	lds	r26, 0x29F3	; 0x8029f3 <sCal+0xe>
    3808:	b0 91 f4 29 	lds	r27, 0x29F4	; 0x8029f4 <sCal+0xf>
    380c:	c0 58       	subi	r28, 0x80	; 128
    380e:	df 4f       	sbci	r29, 0xFF	; 255
    3810:	88 83       	st	Y, r24
    3812:	99 83       	std	Y+1, r25	; 0x01
    3814:	aa 83       	std	Y+2, r26	; 0x02
    3816:	bb 83       	std	Y+3, r27	; 0x03
    3818:	c0 58       	subi	r28, 0x80	; 128
    381a:	d0 40       	sbci	r29, 0x00	; 0
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
    381c:	20 81       	ld	r18, Z
    381e:	31 81       	ldd	r19, Z+1	; 0x01
    3820:	42 81       	ldd	r20, Z+2	; 0x02
    3822:	53 81       	ldd	r21, Z+3	; 0x03
    3824:	cc 57       	subi	r28, 0x7C	; 124
    3826:	df 4f       	sbci	r29, 0xFF	; 255
    3828:	28 83       	st	Y, r18
    382a:	39 83       	std	Y+1, r19	; 0x01
    382c:	4a 83       	std	Y+2, r20	; 0x02
    382e:	5b 83       	std	Y+3, r21	; 0x03
    3830:	c4 58       	subi	r28, 0x84	; 132
    3832:	d0 40       	sbci	r29, 0x00	; 0
    3834:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <sCal+0x8>
    3838:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <sCal+0x9>
    383c:	a0 91 ef 29 	lds	r26, 0x29EF	; 0x8029ef <sCal+0xa>
    3840:	b0 91 f0 29 	lds	r27, 0x29F0	; 0x8029f0 <sCal+0xb>
    3844:	c8 57       	subi	r28, 0x78	; 120
    3846:	df 4f       	sbci	r29, 0xFF	; 255
    3848:	88 83       	st	Y, r24
    384a:	99 83       	std	Y+1, r25	; 0x01
    384c:	aa 83       	std	Y+2, r26	; 0x02
    384e:	bb 83       	std	Y+3, r27	; 0x03
    3850:	c8 58       	subi	r28, 0x88	; 136
    3852:	d0 40       	sbci	r29, 0x00	; 0
void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    3854:	20 91 67 29 	lds	r18, 0x2967	; 0x802967 <sSessionCycleCountSnapshot>
    3858:	30 91 68 29 	lds	r19, 0x2968	; 0x802968 <sSessionCycleCountSnapshot+0x1>
    385c:	40 91 69 29 	lds	r20, 0x2969	; 0x802969 <sSessionCycleCountSnapshot+0x2>
    3860:	50 91 6a 29 	lds	r21, 0x296A	; 0x80296a <sSessionCycleCountSnapshot+0x3>
    3864:	c4 57       	subi	r28, 0x74	; 116
    3866:	df 4f       	sbci	r29, 0xFF	; 255
    3868:	28 83       	st	Y, r18
    386a:	39 83       	std	Y+1, r19	; 0x01
    386c:	4a 83       	std	Y+2, r20	; 0x02
    386e:	5b 83       	std	Y+3, r21	; 0x03
    3870:	cc 58       	subi	r28, 0x8C	; 140
    3872:	d0 40       	sbci	r29, 0x00	; 0

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3874:	c5 54       	subi	r28, 0x45	; 69
    3876:	df 4f       	sbci	r29, 0xFF	; 255
    3878:	38 81       	ld	r19, Y
    387a:	cb 5b       	subi	r28, 0xBB	; 187
    387c:	d0 40       	sbci	r29, 0x00	; 0
    387e:	3f 93       	push	r19
    3880:	c6 54       	subi	r28, 0x46	; 70
    3882:	df 4f       	sbci	r29, 0xFF	; 255
    3884:	48 81       	ld	r20, Y
    3886:	ca 5b       	subi	r28, 0xBA	; 186
    3888:	d0 40       	sbci	r29, 0x00	; 0
    388a:	4f 93       	push	r20
    388c:	c7 54       	subi	r28, 0x47	; 71
    388e:	df 4f       	sbci	r29, 0xFF	; 255
    3890:	58 81       	ld	r21, Y
    3892:	c9 5b       	subi	r28, 0xB9	; 185
    3894:	d0 40       	sbci	r29, 0x00	; 0
    3896:	5f 93       	push	r21
    3898:	c8 54       	subi	r28, 0x48	; 72
    389a:	df 4f       	sbci	r29, 0xFF	; 255
    389c:	88 81       	ld	r24, Y
    389e:	c8 5b       	subi	r28, 0xB8	; 184
    38a0:	d0 40       	sbci	r29, 0x00	; 0
    38a2:	8f 93       	push	r24
    38a4:	cf 56       	subi	r28, 0x6F	; 111
    38a6:	df 4f       	sbci	r29, 0xFF	; 255
    38a8:	98 81       	ld	r25, Y
    38aa:	c1 59       	subi	r28, 0x91	; 145
    38ac:	d0 40       	sbci	r29, 0x00	; 0
    38ae:	9f 93       	push	r25
    38b0:	c0 57       	subi	r28, 0x70	; 112
    38b2:	df 4f       	sbci	r29, 0xFF	; 255
    38b4:	a8 81       	ld	r26, Y
    38b6:	c0 59       	subi	r28, 0x90	; 144
    38b8:	d0 40       	sbci	r29, 0x00	; 0
    38ba:	af 93       	push	r26
    38bc:	c1 53       	subi	r28, 0x31	; 49
    38be:	df 4f       	sbci	r29, 0xFF	; 255
    38c0:	b8 81       	ld	r27, Y
    38c2:	cf 5c       	subi	r28, 0xCF	; 207
    38c4:	d0 40       	sbci	r29, 0x00	; 0
    38c6:	bf 93       	push	r27
    38c8:	c2 53       	subi	r28, 0x32	; 50
    38ca:	df 4f       	sbci	r29, 0xFF	; 255
    38cc:	28 81       	ld	r18, Y
    38ce:	ce 5c       	subi	r28, 0xCE	; 206
    38d0:	d0 40       	sbci	r29, 0x00	; 0
    38d2:	2f 93       	push	r18
    38d4:	c3 53       	subi	r28, 0x33	; 51
    38d6:	df 4f       	sbci	r29, 0xFF	; 255
    38d8:	38 81       	ld	r19, Y
    38da:	cd 5c       	subi	r28, 0xCD	; 205
    38dc:	d0 40       	sbci	r29, 0x00	; 0
    38de:	3f 93       	push	r19
    38e0:	c4 53       	subi	r28, 0x34	; 52
    38e2:	df 4f       	sbci	r29, 0xFF	; 255
    38e4:	48 81       	ld	r20, Y
    38e6:	cc 5c       	subi	r28, 0xCC	; 204
    38e8:	d0 40       	sbci	r29, 0x00	; 0
    38ea:	4f 93       	push	r20
    38ec:	1f 92       	push	r1
    38ee:	1f 93       	push	r17
    38f0:	c1 54       	subi	r28, 0x41	; 65
    38f2:	df 4f       	sbci	r29, 0xFF	; 255
    38f4:	58 81       	ld	r21, Y
    38f6:	cf 5b       	subi	r28, 0xBF	; 191
    38f8:	d0 40       	sbci	r29, 0x00	; 0
    38fa:	5f 93       	push	r21
    38fc:	c2 54       	subi	r28, 0x42	; 66
    38fe:	df 4f       	sbci	r29, 0xFF	; 255
    3900:	88 81       	ld	r24, Y
    3902:	ce 5b       	subi	r28, 0xBE	; 190
    3904:	d0 40       	sbci	r29, 0x00	; 0
    3906:	8f 93       	push	r24
    3908:	c3 54       	subi	r28, 0x43	; 67
    390a:	df 4f       	sbci	r29, 0xFF	; 255
    390c:	98 81       	ld	r25, Y
    390e:	cd 5b       	subi	r28, 0xBD	; 189
    3910:	d0 40       	sbci	r29, 0x00	; 0
    3912:	9f 93       	push	r25
    3914:	c4 54       	subi	r28, 0x44	; 68
    3916:	df 4f       	sbci	r29, 0xFF	; 255
    3918:	a8 81       	ld	r26, Y
    391a:	cc 5b       	subi	r28, 0xBC	; 188
    391c:	d0 40       	sbci	r29, 0x00	; 0
    391e:	af 93       	push	r26
    3920:	cd 56       	subi	r28, 0x6D	; 109
    3922:	df 4f       	sbci	r29, 0xFF	; 255
    3924:	b8 81       	ld	r27, Y
    3926:	c3 59       	subi	r28, 0x93	; 147
    3928:	d0 40       	sbci	r29, 0x00	; 0
    392a:	bf 93       	push	r27
    392c:	ce 56       	subi	r28, 0x6E	; 110
    392e:	df 4f       	sbci	r29, 0xFF	; 255
    3930:	28 81       	ld	r18, Y
    3932:	c2 59       	subi	r28, 0x92	; 146
    3934:	d0 40       	sbci	r29, 0x00	; 0
    3936:	2f 93       	push	r18
    3938:	cd 53       	subi	r28, 0x3D	; 61
    393a:	df 4f       	sbci	r29, 0xFF	; 255
    393c:	38 81       	ld	r19, Y
    393e:	c3 5c       	subi	r28, 0xC3	; 195
    3940:	d0 40       	sbci	r29, 0x00	; 0
    3942:	3f 93       	push	r19
    3944:	ce 53       	subi	r28, 0x3E	; 62
    3946:	df 4f       	sbci	r29, 0xFF	; 255
    3948:	48 81       	ld	r20, Y
    394a:	c2 5c       	subi	r28, 0xC2	; 194
    394c:	d0 40       	sbci	r29, 0x00	; 0
    394e:	4f 93       	push	r20
    3950:	cf 53       	subi	r28, 0x3F	; 63
    3952:	df 4f       	sbci	r29, 0xFF	; 255
    3954:	58 81       	ld	r21, Y
    3956:	c1 5c       	subi	r28, 0xC1	; 193
    3958:	d0 40       	sbci	r29, 0x00	; 0
    395a:	5f 93       	push	r21
    395c:	c0 54       	subi	r28, 0x40	; 64
    395e:	df 4f       	sbci	r29, 0xFF	; 255
    3960:	88 81       	ld	r24, Y
    3962:	c0 5c       	subi	r28, 0xC0	; 192
    3964:	d0 40       	sbci	r29, 0x00	; 0
    3966:	8f 93       	push	r24
    3968:	cb 56       	subi	r28, 0x6B	; 107
    396a:	df 4f       	sbci	r29, 0xFF	; 255
    396c:	98 81       	ld	r25, Y
    396e:	c5 59       	subi	r28, 0x95	; 149
    3970:	d0 40       	sbci	r29, 0x00	; 0
    3972:	9f 93       	push	r25
    3974:	cc 56       	subi	r28, 0x6C	; 108
    3976:	df 4f       	sbci	r29, 0xFF	; 255
    3978:	a8 81       	ld	r26, Y
    397a:	c4 59       	subi	r28, 0x94	; 148
    397c:	d0 40       	sbci	r29, 0x00	; 0
    397e:	af 93       	push	r26
    3980:	c9 53       	subi	r28, 0x39	; 57
    3982:	df 4f       	sbci	r29, 0xFF	; 255
    3984:	b8 81       	ld	r27, Y
    3986:	c7 5c       	subi	r28, 0xC7	; 199
    3988:	d0 40       	sbci	r29, 0x00	; 0
    398a:	bf 93       	push	r27
    398c:	ca 53       	subi	r28, 0x3A	; 58
    398e:	df 4f       	sbci	r29, 0xFF	; 255
    3990:	28 81       	ld	r18, Y
    3992:	c6 5c       	subi	r28, 0xC6	; 198
    3994:	d0 40       	sbci	r29, 0x00	; 0
    3996:	2f 93       	push	r18
    3998:	cb 53       	subi	r28, 0x3B	; 59
    399a:	df 4f       	sbci	r29, 0xFF	; 255
    399c:	38 81       	ld	r19, Y
    399e:	c5 5c       	subi	r28, 0xC5	; 197
    39a0:	d0 40       	sbci	r29, 0x00	; 0
    39a2:	3f 93       	push	r19
    39a4:	cc 53       	subi	r28, 0x3C	; 60
    39a6:	df 4f       	sbci	r29, 0xFF	; 255
    39a8:	48 81       	ld	r20, Y
    39aa:	c4 5c       	subi	r28, 0xC4	; 196
    39ac:	d0 40       	sbci	r29, 0x00	; 0
    39ae:	4f 93       	push	r20
    39b0:	c9 56       	subi	r28, 0x69	; 105
    39b2:	df 4f       	sbci	r29, 0xFF	; 255
    39b4:	58 81       	ld	r21, Y
    39b6:	c7 59       	subi	r28, 0x97	; 151
    39b8:	d0 40       	sbci	r29, 0x00	; 0
    39ba:	5f 93       	push	r21
    39bc:	ca 56       	subi	r28, 0x6A	; 106
    39be:	df 4f       	sbci	r29, 0xFF	; 255
    39c0:	88 81       	ld	r24, Y
    39c2:	c6 59       	subi	r28, 0x96	; 150
    39c4:	d0 40       	sbci	r29, 0x00	; 0
    39c6:	8f 93       	push	r24
    39c8:	c5 53       	subi	r28, 0x35	; 53
    39ca:	df 4f       	sbci	r29, 0xFF	; 255
    39cc:	98 81       	ld	r25, Y
    39ce:	cb 5c       	subi	r28, 0xCB	; 203
    39d0:	d0 40       	sbci	r29, 0x00	; 0
    39d2:	9f 93       	push	r25
    39d4:	c6 53       	subi	r28, 0x36	; 54
    39d6:	df 4f       	sbci	r29, 0xFF	; 255
    39d8:	a8 81       	ld	r26, Y
    39da:	ca 5c       	subi	r28, 0xCA	; 202
    39dc:	d0 40       	sbci	r29, 0x00	; 0
    39de:	af 93       	push	r26
    39e0:	c7 53       	subi	r28, 0x37	; 55
    39e2:	df 4f       	sbci	r29, 0xFF	; 255
    39e4:	b8 81       	ld	r27, Y
    39e6:	c9 5c       	subi	r28, 0xC9	; 201
    39e8:	d0 40       	sbci	r29, 0x00	; 0
    39ea:	bf 93       	push	r27
    39ec:	c8 53       	subi	r28, 0x38	; 56
    39ee:	df 4f       	sbci	r29, 0xFF	; 255
    39f0:	28 81       	ld	r18, Y
    39f2:	c8 5c       	subi	r28, 0xC8	; 200
    39f4:	d0 40       	sbci	r29, 0x00	; 0
    39f6:	2f 93       	push	r18
    39f8:	2f 92       	push	r2
    39fa:	3f 92       	push	r3
    39fc:	0f 93       	push	r16
    39fe:	39 81       	ldd	r19, Y+1	; 0x01
    3a00:	3f 93       	push	r19
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    3a0a:	23 e3       	ldi	r18, 0x33	; 51
    3a0c:	33 e3       	ldi	r19, 0x33	; 51
    3a0e:	43 e2       	ldi	r20, 0x23	; 35
    3a10:	54 e4       	ldi	r21, 0x44	; 68
    3a12:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3a16:	9f 93       	push	r25
    3a18:	8f 93       	push	r24
    3a1a:	7f 93       	push	r23
    3a1c:	6f 93       	push	r22
    3a1e:	4a 81       	ldd	r20, Y+2	; 0x02
    3a20:	5b 81       	ldd	r21, Y+3	; 0x03
    3a22:	ba 01       	movw	r22, r20
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    3a2c:	27 e1       	ldi	r18, 0x17	; 23
    3a2e:	37 eb       	ldi	r19, 0xB7	; 183
    3a30:	41 ed       	ldi	r20, 0xD1	; 209
    3a32:	5e e3       	ldi	r21, 0x3E	; 62
    3a34:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3a38:	9f 93       	push	r25
    3a3a:	8f 93       	push	r24
    3a3c:	7f 93       	push	r23
    3a3e:	6f 93       	push	r22
    3a40:	c7 01       	movw	r24, r14
    3a42:	b6 01       	movw	r22, r12
    3a44:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	40 e2       	ldi	r20, 0x20	; 32
    3a4e:	59 e4       	ldi	r21, 0x49	; 73
    3a50:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3a54:	9f 93       	push	r25
    3a56:	8f 93       	push	r24
    3a58:	7f 93       	push	r23
    3a5a:	6f 93       	push	r22
    3a5c:	c8 56       	subi	r28, 0x68	; 104
    3a5e:	df 4f       	sbci	r29, 0xFF	; 255
    3a60:	28 81       	ld	r18, Y
    3a62:	c8 59       	subi	r28, 0x98	; 152
    3a64:	d0 40       	sbci	r29, 0x00	; 0
    3a66:	c7 56       	subi	r28, 0x67	; 103
    3a68:	df 4f       	sbci	r29, 0xFF	; 255
    3a6a:	38 81       	ld	r19, Y
    3a6c:	c9 59       	subi	r28, 0x99	; 153
    3a6e:	d0 40       	sbci	r29, 0x00	; 0
    3a70:	c6 56       	subi	r28, 0x66	; 102
    3a72:	df 4f       	sbci	r29, 0xFF	; 255
    3a74:	48 81       	ld	r20, Y
    3a76:	ca 59       	subi	r28, 0x9A	; 154
    3a78:	d0 40       	sbci	r29, 0x00	; 0
    3a7a:	c5 56       	subi	r28, 0x65	; 101
    3a7c:	df 4f       	sbci	r29, 0xFF	; 255
    3a7e:	58 81       	ld	r21, Y
    3a80:	cb 59       	subi	r28, 0x9B	; 155
    3a82:	d0 40       	sbci	r29, 0x00	; 0
    3a84:	c4 56       	subi	r28, 0x64	; 100
    3a86:	df 4f       	sbci	r29, 0xFF	; 255
    3a88:	68 81       	ld	r22, Y
    3a8a:	cc 59       	subi	r28, 0x9C	; 156
    3a8c:	d0 40       	sbci	r29, 0x00	; 0
    3a8e:	c3 56       	subi	r28, 0x63	; 99
    3a90:	df 4f       	sbci	r29, 0xFF	; 255
    3a92:	78 81       	ld	r23, Y
    3a94:	cd 59       	subi	r28, 0x9D	; 157
    3a96:	d0 40       	sbci	r29, 0x00	; 0
    3a98:	c2 56       	subi	r28, 0x62	; 98
    3a9a:	df 4f       	sbci	r29, 0xFF	; 255
    3a9c:	88 81       	ld	r24, Y
    3a9e:	ce 59       	subi	r28, 0x9E	; 158
    3aa0:	d0 40       	sbci	r29, 0x00	; 0
    3aa2:	c1 56       	subi	r28, 0x61	; 97
    3aa4:	df 4f       	sbci	r29, 0xFF	; 255
    3aa6:	98 81       	ld	r25, Y
    3aa8:	cf 59       	subi	r28, 0x9F	; 159
    3aaa:	d0 40       	sbci	r29, 0x00	; 0
    3aac:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__floatdisf>
    3ab0:	6b 01       	movw	r12, r22
    3ab2:	7c 01       	movw	r14, r24
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e4       	ldi	r19, 0x40	; 64
    3ab8:	4c e9       	ldi	r20, 0x9C	; 156
    3aba:	55 e4       	ldi	r21, 0x45	; 69
    3abc:	c3 01       	movw	r24, r6
    3abe:	b2 01       	movw	r22, r4
    3ac0:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3ac4:	a5 01       	movw	r20, r10
    3ac6:	94 01       	movw	r18, r8
    3ac8:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3acc:	9b 01       	movw	r18, r22
    3ace:	ac 01       	movw	r20, r24
    3ad0:	c7 01       	movw	r24, r14
    3ad2:	b6 01       	movw	r22, r12
    3ad4:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3ad8:	9f 93       	push	r25
    3ada:	8f 93       	push	r24
    3adc:	7f 93       	push	r23
    3ade:	6f 93       	push	r22
    3ae0:	6c 81       	ldd	r22, Y+4	; 0x04
    3ae2:	7d 81       	ldd	r23, Y+5	; 0x05
    3ae4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ae6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ae8:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3aec:	6b 01       	movw	r12, r22
    3aee:	7c 01       	movw	r14, r24
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e8       	ldi	r20, 0x80	; 128
    3af6:	53 e4       	ldi	r21, 0x43	; 67
    3af8:	68 85       	ldd	r22, Y+8	; 0x08
    3afa:	79 85       	ldd	r23, Y+9	; 0x09
    3afc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3afe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b00:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3b04:	2c 85       	ldd	r18, Y+12	; 0x0c
    3b06:	3d 85       	ldd	r19, Y+13	; 0x0d
    3b08:	4e 85       	ldd	r20, Y+14	; 0x0e
    3b0a:	5f 85       	ldd	r21, Y+15	; 0x0f
    3b0c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3b10:	9b 01       	movw	r18, r22
    3b12:	ac 01       	movw	r20, r24
    3b14:	c7 01       	movw	r24, r14
    3b16:	b6 01       	movw	r22, r12
    3b18:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3b1c:	9f 93       	push	r25
    3b1e:	8f 93       	push	r24
    3b20:	7f 93       	push	r23
    3b22:	6f 93       	push	r22
    3b24:	68 89       	ldd	r22, Y+16	; 0x10
    3b26:	79 89       	ldd	r23, Y+17	; 0x11
    3b28:	8a 89       	ldd	r24, Y+18	; 0x12
    3b2a:	9b 89       	ldd	r25, Y+19	; 0x13
    3b2c:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3b30:	6b 01       	movw	r12, r22
    3b32:	7c 01       	movw	r14, r24
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	57 e4       	ldi	r21, 0x47	; 71
    3b3c:	6c 89       	ldd	r22, Y+20	; 0x14
    3b3e:	7d 89       	ldd	r23, Y+21	; 0x15
    3b40:	8e 89       	ldd	r24, Y+22	; 0x16
    3b42:	9f 89       	ldd	r25, Y+23	; 0x17
    3b44:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3b48:	9b 01       	movw	r18, r22
    3b4a:	ac 01       	movw	r20, r24
    3b4c:	c7 01       	movw	r24, r14
    3b4e:	b6 01       	movw	r22, r12
    3b50:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3b54:	9f 93       	push	r25
    3b56:	8f 93       	push	r24
    3b58:	7f 93       	push	r23
    3b5a:	6f 93       	push	r22
    3b5c:	68 8d       	ldd	r22, Y+24	; 0x18
    3b5e:	79 8d       	ldd	r23, Y+25	; 0x19
    3b60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b62:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b64:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3b68:	6b 01       	movw	r12, r22
    3b6a:	7c 01       	movw	r14, r24
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	40 e8       	ldi	r20, 0x80	; 128
    3b72:	57 e4       	ldi	r21, 0x47	; 71
    3b74:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3b76:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3b78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b7c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3b80:	9b 01       	movw	r18, r22
    3b82:	ac 01       	movw	r20, r24
    3b84:	c7 01       	movw	r24, r14
    3b86:	b6 01       	movw	r22, r12
    3b88:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3b8c:	9f 93       	push	r25
    3b8e:	8f 93       	push	r24
    3b90:	7f 93       	push	r23
    3b92:	6f 93       	push	r22
    3b94:	c0 56       	subi	r28, 0x60	; 96
    3b96:	df 4f       	sbci	r29, 0xFF	; 255
    3b98:	28 81       	ld	r18, Y
    3b9a:	c0 5a       	subi	r28, 0xA0	; 160
    3b9c:	d0 40       	sbci	r29, 0x00	; 0
    3b9e:	cf 55       	subi	r28, 0x5F	; 95
    3ba0:	df 4f       	sbci	r29, 0xFF	; 255
    3ba2:	38 81       	ld	r19, Y
    3ba4:	c1 5a       	subi	r28, 0xA1	; 161
    3ba6:	d0 40       	sbci	r29, 0x00	; 0
    3ba8:	ce 55       	subi	r28, 0x5E	; 94
    3baa:	df 4f       	sbci	r29, 0xFF	; 255
    3bac:	48 81       	ld	r20, Y
    3bae:	c2 5a       	subi	r28, 0xA2	; 162
    3bb0:	d0 40       	sbci	r29, 0x00	; 0
    3bb2:	cd 55       	subi	r28, 0x5D	; 93
    3bb4:	df 4f       	sbci	r29, 0xFF	; 255
    3bb6:	58 81       	ld	r21, Y
    3bb8:	c3 5a       	subi	r28, 0xA3	; 163
    3bba:	d0 40       	sbci	r29, 0x00	; 0
    3bbc:	cc 55       	subi	r28, 0x5C	; 92
    3bbe:	df 4f       	sbci	r29, 0xFF	; 255
    3bc0:	68 81       	ld	r22, Y
    3bc2:	c4 5a       	subi	r28, 0xA4	; 164
    3bc4:	d0 40       	sbci	r29, 0x00	; 0
    3bc6:	cb 55       	subi	r28, 0x5B	; 91
    3bc8:	df 4f       	sbci	r29, 0xFF	; 255
    3bca:	78 81       	ld	r23, Y
    3bcc:	c5 5a       	subi	r28, 0xA5	; 165
    3bce:	d0 40       	sbci	r29, 0x00	; 0
    3bd0:	ca 55       	subi	r28, 0x5A	; 90
    3bd2:	df 4f       	sbci	r29, 0xFF	; 255
    3bd4:	88 81       	ld	r24, Y
    3bd6:	c6 5a       	subi	r28, 0xA6	; 166
    3bd8:	d0 40       	sbci	r29, 0x00	; 0
    3bda:	c0 53       	subi	r28, 0x30	; 48
    3bdc:	df 4f       	sbci	r29, 0xFF	; 255
    3bde:	98 81       	ld	r25, Y
    3be0:	c0 5d       	subi	r28, 0xD0	; 208
    3be2:	d0 40       	sbci	r29, 0x00	; 0
    3be4:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__floatdisf>
    3be8:	6b 01       	movw	r12, r22
    3bea:	7c 01       	movw	r14, r24
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e4       	ldi	r19, 0x40	; 64
    3bf0:	4c e9       	ldi	r20, 0x9C	; 156
    3bf2:	55 e4       	ldi	r21, 0x45	; 69
    3bf4:	68 a1       	ldd	r22, Y+32	; 0x20
    3bf6:	79 a1       	ldd	r23, Y+33	; 0x21
    3bf8:	8a a1       	ldd	r24, Y+34	; 0x22
    3bfa:	9b a1       	ldd	r25, Y+35	; 0x23
    3bfc:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3c00:	2c a1       	ldd	r18, Y+36	; 0x24
    3c02:	3d a1       	ldd	r19, Y+37	; 0x25
    3c04:	4e a1       	ldd	r20, Y+38	; 0x26
    3c06:	5f a1       	ldd	r21, Y+39	; 0x27
    3c08:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3c0c:	9b 01       	movw	r18, r22
    3c0e:	ac 01       	movw	r20, r24
    3c10:	c7 01       	movw	r24, r14
    3c12:	b6 01       	movw	r22, r12
    3c14:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3c18:	9f 93       	push	r25
    3c1a:	8f 93       	push	r24
    3c1c:	7f 93       	push	r23
    3c1e:	6f 93       	push	r22
    3c20:	68 a5       	ldd	r22, Y+40	; 0x28
    3c22:	79 a5       	ldd	r23, Y+41	; 0x29
    3c24:	8a a5       	ldd	r24, Y+42	; 0x2a
    3c26:	9b a5       	ldd	r25, Y+43	; 0x2b
    3c28:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3c2c:	6b 01       	movw	r12, r22
    3c2e:	7c 01       	movw	r14, r24
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e8       	ldi	r20, 0x80	; 128
    3c36:	53 e4       	ldi	r21, 0x43	; 67
    3c38:	6c a5       	ldd	r22, Y+44	; 0x2c
    3c3a:	7d a5       	ldd	r23, Y+45	; 0x2d
    3c3c:	8e a5       	ldd	r24, Y+46	; 0x2e
    3c3e:	9f a5       	ldd	r25, Y+47	; 0x2f
    3c40:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3c44:	28 a9       	ldd	r18, Y+48	; 0x30
    3c46:	39 a9       	ldd	r19, Y+49	; 0x31
    3c48:	4a a9       	ldd	r20, Y+50	; 0x32
    3c4a:	5b a9       	ldd	r21, Y+51	; 0x33
    3c4c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3c50:	9b 01       	movw	r18, r22
    3c52:	ac 01       	movw	r20, r24
    3c54:	c7 01       	movw	r24, r14
    3c56:	b6 01       	movw	r22, r12
    3c58:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3c5c:	9f 93       	push	r25
    3c5e:	8f 93       	push	r24
    3c60:	7f 93       	push	r23
    3c62:	6f 93       	push	r22
    3c64:	6c a9       	ldd	r22, Y+52	; 0x34
    3c66:	7d a9       	ldd	r23, Y+53	; 0x35
    3c68:	8e a9       	ldd	r24, Y+54	; 0x36
    3c6a:	9f a9       	ldd	r25, Y+55	; 0x37
    3c6c:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3c70:	6b 01       	movw	r12, r22
    3c72:	7c 01       	movw	r14, r24
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	30 e0       	ldi	r19, 0x00	; 0
    3c78:	40 e8       	ldi	r20, 0x80	; 128
    3c7a:	57 e4       	ldi	r21, 0x47	; 71
    3c7c:	68 ad       	ldd	r22, Y+56	; 0x38
    3c7e:	79 ad       	ldd	r23, Y+57	; 0x39
    3c80:	8a ad       	ldd	r24, Y+58	; 0x3a
    3c82:	9b ad       	ldd	r25, Y+59	; 0x3b
    3c84:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3c88:	9b 01       	movw	r18, r22
    3c8a:	ac 01       	movw	r20, r24
    3c8c:	c7 01       	movw	r24, r14
    3c8e:	b6 01       	movw	r22, r12
    3c90:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3c94:	9f 93       	push	r25
    3c96:	8f 93       	push	r24
    3c98:	7f 93       	push	r23
    3c9a:	6f 93       	push	r22
    3c9c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3c9e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ca0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ca2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ca4:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3ca8:	6b 01       	movw	r12, r22
    3caa:	7c 01       	movw	r14, r24
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e8       	ldi	r20, 0x80	; 128
    3cb2:	57 e4       	ldi	r21, 0x47	; 71
    3cb4:	24 96       	adiw	r28, 0x04	; 4
    3cb6:	6c ad       	ldd	r22, Y+60	; 0x3c
    3cb8:	7d ad       	ldd	r23, Y+61	; 0x3d
    3cba:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cbe:	24 97       	sbiw	r28, 0x04	; 4
    3cc0:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3cc4:	9b 01       	movw	r18, r22
    3cc6:	ac 01       	movw	r20, r24
    3cc8:	c7 01       	movw	r24, r14
    3cca:	b6 01       	movw	r22, r12
    3ccc:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3cd0:	9f 93       	push	r25
    3cd2:	8f 93       	push	r24
    3cd4:	7f 93       	push	r23
    3cd6:	6f 93       	push	r22
    3cd8:	c9 55       	subi	r28, 0x59	; 89
    3cda:	df 4f       	sbci	r29, 0xFF	; 255
    3cdc:	28 81       	ld	r18, Y
    3cde:	c7 5a       	subi	r28, 0xA7	; 167
    3ce0:	d0 40       	sbci	r29, 0x00	; 0
    3ce2:	c8 55       	subi	r28, 0x58	; 88
    3ce4:	df 4f       	sbci	r29, 0xFF	; 255
    3ce6:	38 81       	ld	r19, Y
    3ce8:	c8 5a       	subi	r28, 0xA8	; 168
    3cea:	d0 40       	sbci	r29, 0x00	; 0
    3cec:	c7 55       	subi	r28, 0x57	; 87
    3cee:	df 4f       	sbci	r29, 0xFF	; 255
    3cf0:	48 81       	ld	r20, Y
    3cf2:	c9 5a       	subi	r28, 0xA9	; 169
    3cf4:	d0 40       	sbci	r29, 0x00	; 0
    3cf6:	c6 55       	subi	r28, 0x56	; 86
    3cf8:	df 4f       	sbci	r29, 0xFF	; 255
    3cfa:	58 81       	ld	r21, Y
    3cfc:	ca 5a       	subi	r28, 0xAA	; 170
    3cfe:	d0 40       	sbci	r29, 0x00	; 0
    3d00:	c5 55       	subi	r28, 0x55	; 85
    3d02:	df 4f       	sbci	r29, 0xFF	; 255
    3d04:	68 81       	ld	r22, Y
    3d06:	cb 5a       	subi	r28, 0xAB	; 171
    3d08:	d0 40       	sbci	r29, 0x00	; 0
    3d0a:	c4 55       	subi	r28, 0x54	; 84
    3d0c:	df 4f       	sbci	r29, 0xFF	; 255
    3d0e:	78 81       	ld	r23, Y
    3d10:	cc 5a       	subi	r28, 0xAC	; 172
    3d12:	d0 40       	sbci	r29, 0x00	; 0
    3d14:	c3 55       	subi	r28, 0x53	; 83
    3d16:	df 4f       	sbci	r29, 0xFF	; 255
    3d18:	88 81       	ld	r24, Y
    3d1a:	cd 5a       	subi	r28, 0xAD	; 173
    3d1c:	d0 40       	sbci	r29, 0x00	; 0
    3d1e:	cf 52       	subi	r28, 0x2F	; 47
    3d20:	df 4f       	sbci	r29, 0xFF	; 255
    3d22:	98 81       	ld	r25, Y
    3d24:	c1 5d       	subi	r28, 0xD1	; 209
    3d26:	d0 40       	sbci	r29, 0x00	; 0
    3d28:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__floatdisf>
    3d2c:	6b 01       	movw	r12, r22
    3d2e:	7c 01       	movw	r14, r24
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e4       	ldi	r19, 0x40	; 64
    3d34:	4c e9       	ldi	r20, 0x9C	; 156
    3d36:	55 e4       	ldi	r21, 0x45	; 69
    3d38:	28 96       	adiw	r28, 0x08	; 8
    3d3a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d3c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d40:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d42:	28 97       	sbiw	r28, 0x08	; 8
    3d44:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3d48:	2c 96       	adiw	r28, 0x0c	; 12
    3d4a:	2c ad       	ldd	r18, Y+60	; 0x3c
    3d4c:	3d ad       	ldd	r19, Y+61	; 0x3d
    3d4e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3d50:	5f ad       	ldd	r21, Y+63	; 0x3f
    3d52:	2c 97       	sbiw	r28, 0x0c	; 12
    3d54:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3d58:	9b 01       	movw	r18, r22
    3d5a:	ac 01       	movw	r20, r24
    3d5c:	c7 01       	movw	r24, r14
    3d5e:	b6 01       	movw	r22, r12
    3d60:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3d64:	9f 93       	push	r25
    3d66:	8f 93       	push	r24
    3d68:	7f 93       	push	r23
    3d6a:	6f 93       	push	r22
    3d6c:	60 96       	adiw	r28, 0x10	; 16
    3d6e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d70:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d72:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d74:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d76:	60 97       	sbiw	r28, 0x10	; 16
    3d78:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3d7c:	6b 01       	movw	r12, r22
    3d7e:	7c 01       	movw	r14, r24
    3d80:	20 e0       	ldi	r18, 0x00	; 0
    3d82:	30 e0       	ldi	r19, 0x00	; 0
    3d84:	40 e8       	ldi	r20, 0x80	; 128
    3d86:	53 e4       	ldi	r21, 0x43	; 67
    3d88:	64 96       	adiw	r28, 0x14	; 20
    3d8a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d8c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d8e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d90:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d92:	64 97       	sbiw	r28, 0x14	; 20
    3d94:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3d98:	68 96       	adiw	r28, 0x18	; 24
    3d9a:	2c ad       	ldd	r18, Y+60	; 0x3c
    3d9c:	3d ad       	ldd	r19, Y+61	; 0x3d
    3d9e:	4e ad       	ldd	r20, Y+62	; 0x3e
    3da0:	5f ad       	ldd	r21, Y+63	; 0x3f
    3da2:	68 97       	sbiw	r28, 0x18	; 24
    3da4:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3da8:	9b 01       	movw	r18, r22
    3daa:	ac 01       	movw	r20, r24
    3dac:	c7 01       	movw	r24, r14
    3dae:	b6 01       	movw	r22, r12
    3db0:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3db4:	9f 93       	push	r25
    3db6:	8f 93       	push	r24
    3db8:	7f 93       	push	r23
    3dba:	6f 93       	push	r22
    3dbc:	6c 96       	adiw	r28, 0x1c	; 28
    3dbe:	6c ad       	ldd	r22, Y+60	; 0x3c
    3dc0:	7d ad       	ldd	r23, Y+61	; 0x3d
    3dc2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3dc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3dc6:	6c 97       	sbiw	r28, 0x1c	; 28
    3dc8:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3dcc:	6b 01       	movw	r12, r22
    3dce:	7c 01       	movw	r14, r24
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	40 e8       	ldi	r20, 0x80	; 128
    3dd6:	57 e4       	ldi	r21, 0x47	; 71
    3dd8:	a0 96       	adiw	r28, 0x20	; 32
    3dda:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ddc:	7d ad       	ldd	r23, Y+61	; 0x3d
    3dde:	8e ad       	ldd	r24, Y+62	; 0x3e
    3de0:	9f ad       	ldd	r25, Y+63	; 0x3f
    3de2:	a0 97       	sbiw	r28, 0x20	; 32
    3de4:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3de8:	9b 01       	movw	r18, r22
    3dea:	ac 01       	movw	r20, r24
    3dec:	c7 01       	movw	r24, r14
    3dee:	b6 01       	movw	r22, r12
    3df0:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3df4:	9f 93       	push	r25
    3df6:	8f 93       	push	r24
    3df8:	7f 93       	push	r23
    3dfa:	6f 93       	push	r22
    3dfc:	a4 96       	adiw	r28, 0x24	; 36
    3dfe:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e00:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e02:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e04:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e06:	a4 97       	sbiw	r28, 0x24	; 36
    3e08:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3e0c:	6b 01       	movw	r12, r22
    3e0e:	7c 01       	movw	r14, r24
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	40 e8       	ldi	r20, 0x80	; 128
    3e16:	57 e4       	ldi	r21, 0x47	; 71
    3e18:	a8 96       	adiw	r28, 0x28	; 40
    3e1a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e1c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e20:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e22:	a8 97       	sbiw	r28, 0x28	; 40
    3e24:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3e28:	9b 01       	movw	r18, r22
    3e2a:	ac 01       	movw	r20, r24
    3e2c:	c7 01       	movw	r24, r14
    3e2e:	b6 01       	movw	r22, r12
    3e30:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3e34:	9f 93       	push	r25
    3e36:	8f 93       	push	r24
    3e38:	7f 93       	push	r23
    3e3a:	6f 93       	push	r22
    3e3c:	c2 55       	subi	r28, 0x52	; 82
    3e3e:	df 4f       	sbci	r29, 0xFF	; 255
    3e40:	28 81       	ld	r18, Y
    3e42:	ce 5a       	subi	r28, 0xAE	; 174
    3e44:	d0 40       	sbci	r29, 0x00	; 0
    3e46:	c1 55       	subi	r28, 0x51	; 81
    3e48:	df 4f       	sbci	r29, 0xFF	; 255
    3e4a:	38 81       	ld	r19, Y
    3e4c:	cf 5a       	subi	r28, 0xAF	; 175
    3e4e:	d0 40       	sbci	r29, 0x00	; 0
    3e50:	c0 55       	subi	r28, 0x50	; 80
    3e52:	df 4f       	sbci	r29, 0xFF	; 255
    3e54:	48 81       	ld	r20, Y
    3e56:	c0 5b       	subi	r28, 0xB0	; 176
    3e58:	d0 40       	sbci	r29, 0x00	; 0
    3e5a:	cf 54       	subi	r28, 0x4F	; 79
    3e5c:	df 4f       	sbci	r29, 0xFF	; 255
    3e5e:	58 81       	ld	r21, Y
    3e60:	c1 5b       	subi	r28, 0xB1	; 177
    3e62:	d0 40       	sbci	r29, 0x00	; 0
    3e64:	ce 54       	subi	r28, 0x4E	; 78
    3e66:	df 4f       	sbci	r29, 0xFF	; 255
    3e68:	68 81       	ld	r22, Y
    3e6a:	c2 5b       	subi	r28, 0xB2	; 178
    3e6c:	d0 40       	sbci	r29, 0x00	; 0
    3e6e:	cd 54       	subi	r28, 0x4D	; 77
    3e70:	df 4f       	sbci	r29, 0xFF	; 255
    3e72:	78 81       	ld	r23, Y
    3e74:	c3 5b       	subi	r28, 0xB3	; 179
    3e76:	d0 40       	sbci	r29, 0x00	; 0
    3e78:	cc 54       	subi	r28, 0x4C	; 76
    3e7a:	df 4f       	sbci	r29, 0xFF	; 255
    3e7c:	88 81       	ld	r24, Y
    3e7e:	c4 5b       	subi	r28, 0xB4	; 180
    3e80:	d0 40       	sbci	r29, 0x00	; 0
    3e82:	cb 54       	subi	r28, 0x4B	; 75
    3e84:	df 4f       	sbci	r29, 0xFF	; 255
    3e86:	98 81       	ld	r25, Y
    3e88:	c5 5b       	subi	r28, 0xB5	; 181
    3e8a:	d0 40       	sbci	r29, 0x00	; 0
    3e8c:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__floatdisf>
    3e90:	6b 01       	movw	r12, r22
    3e92:	7c 01       	movw	r14, r24
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e4       	ldi	r19, 0x40	; 64
    3e98:	4c e9       	ldi	r20, 0x9C	; 156
    3e9a:	55 e4       	ldi	r21, 0x45	; 69
    3e9c:	ac 96       	adiw	r28, 0x2c	; 44
    3e9e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ea0:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ea2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ea4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ea6:	ac 97       	sbiw	r28, 0x2c	; 44
    3ea8:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3eac:	e0 96       	adiw	r28, 0x30	; 48
    3eae:	2c ad       	ldd	r18, Y+60	; 0x3c
    3eb0:	3d ad       	ldd	r19, Y+61	; 0x3d
    3eb2:	4e ad       	ldd	r20, Y+62	; 0x3e
    3eb4:	5f ad       	ldd	r21, Y+63	; 0x3f
    3eb6:	e0 97       	sbiw	r28, 0x30	; 48
    3eb8:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3ebc:	9b 01       	movw	r18, r22
    3ebe:	ac 01       	movw	r20, r24
    3ec0:	c7 01       	movw	r24, r14
    3ec2:	b6 01       	movw	r22, r12
    3ec4:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3ec8:	9f 93       	push	r25
    3eca:	8f 93       	push	r24
    3ecc:	7f 93       	push	r23
    3ece:	6f 93       	push	r22
    3ed0:	e4 96       	adiw	r28, 0x34	; 52
    3ed2:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ed4:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ed6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ed8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eda:	e4 97       	sbiw	r28, 0x34	; 52
    3edc:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3ee0:	6b 01       	movw	r12, r22
    3ee2:	7c 01       	movw	r14, r24
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	40 e8       	ldi	r20, 0x80	; 128
    3eea:	53 e4       	ldi	r21, 0x43	; 67
    3eec:	e8 96       	adiw	r28, 0x38	; 56
    3eee:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ef0:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ef2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ef4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ef6:	e8 97       	sbiw	r28, 0x38	; 56
    3ef8:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3efc:	ec 96       	adiw	r28, 0x3c	; 60
    3efe:	2c ad       	ldd	r18, Y+60	; 0x3c
    3f00:	3d ad       	ldd	r19, Y+61	; 0x3d
    3f02:	4e ad       	ldd	r20, Y+62	; 0x3e
    3f04:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f06:	ec 97       	sbiw	r28, 0x3c	; 60
    3f08:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3f0c:	9b 01       	movw	r18, r22
    3f0e:	ac 01       	movw	r20, r24
    3f10:	c7 01       	movw	r24, r14
    3f12:	b6 01       	movw	r22, r12
    3f14:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3f18:	9f 93       	push	r25
    3f1a:	8f 93       	push	r24
    3f1c:	7f 93       	push	r23
    3f1e:	6f 93       	push	r22
    3f20:	c4 58       	subi	r28, 0x84	; 132
    3f22:	df 4f       	sbci	r29, 0xFF	; 255
    3f24:	68 81       	ld	r22, Y
    3f26:	79 81       	ldd	r23, Y+1	; 0x01
    3f28:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f2c:	cc 57       	subi	r28, 0x7C	; 124
    3f2e:	d0 40       	sbci	r29, 0x00	; 0
    3f30:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3f34:	6b 01       	movw	r12, r22
    3f36:	7c 01       	movw	r14, r24
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	30 e0       	ldi	r19, 0x00	; 0
    3f3c:	40 e8       	ldi	r20, 0x80	; 128
    3f3e:	57 e4       	ldi	r21, 0x47	; 71
    3f40:	c0 58       	subi	r28, 0x80	; 128
    3f42:	df 4f       	sbci	r29, 0xFF	; 255
    3f44:	68 81       	ld	r22, Y
    3f46:	79 81       	ldd	r23, Y+1	; 0x01
    3f48:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f4c:	c0 58       	subi	r28, 0x80	; 128
    3f4e:	d0 40       	sbci	r29, 0x00	; 0
    3f50:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3f54:	9b 01       	movw	r18, r22
    3f56:	ac 01       	movw	r20, r24
    3f58:	c7 01       	movw	r24, r14
    3f5a:	b6 01       	movw	r22, r12
    3f5c:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3f60:	9f 93       	push	r25
    3f62:	8f 93       	push	r24
    3f64:	7f 93       	push	r23
    3f66:	6f 93       	push	r22
    3f68:	cc 57       	subi	r28, 0x7C	; 124
    3f6a:	df 4f       	sbci	r29, 0xFF	; 255
    3f6c:	68 81       	ld	r22, Y
    3f6e:	79 81       	ldd	r23, Y+1	; 0x01
    3f70:	8a 81       	ldd	r24, Y+2	; 0x02
    3f72:	9b 81       	ldd	r25, Y+3	; 0x03
    3f74:	c4 58       	subi	r28, 0x84	; 132
    3f76:	d0 40       	sbci	r29, 0x00	; 0
    3f78:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    3f7c:	6b 01       	movw	r12, r22
    3f7e:	7c 01       	movw	r14, r24
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	40 e8       	ldi	r20, 0x80	; 128
    3f86:	57 e4       	ldi	r21, 0x47	; 71
    3f88:	c8 57       	subi	r28, 0x78	; 120
    3f8a:	df 4f       	sbci	r29, 0xFF	; 255
    3f8c:	68 81       	ld	r22, Y
    3f8e:	79 81       	ldd	r23, Y+1	; 0x01
    3f90:	8a 81       	ldd	r24, Y+2	; 0x02
    3f92:	9b 81       	ldd	r25, Y+3	; 0x03
    3f94:	c8 58       	subi	r28, 0x88	; 136
    3f96:	d0 40       	sbci	r29, 0x00	; 0
    3f98:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    3f9c:	9b 01       	movw	r18, r22
    3f9e:	ac 01       	movw	r20, r24
    3fa0:	c7 01       	movw	r24, r14
    3fa2:	b6 01       	movw	r22, r12
    3fa4:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3fa8:	9f 93       	push	r25
    3faa:	8f 93       	push	r24
    3fac:	7f 93       	push	r23
    3fae:	6f 93       	push	r22
    3fb0:	c4 57       	subi	r28, 0x74	; 116
    3fb2:	df 4f       	sbci	r29, 0xFF	; 255
    3fb4:	68 81       	ld	r22, Y
    3fb6:	79 81       	ldd	r23, Y+1	; 0x01
    3fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fba:	9b 81       	ldd	r25, Y+3	; 0x03
    3fbc:	cc 58       	subi	r28, 0x8C	; 140
    3fbe:	d0 40       	sbci	r29, 0x00	; 0
    3fc0:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e4       	ldi	r19, 0x40	; 64
    3fc8:	4c e9       	ldi	r20, 0x9C	; 156
    3fca:	55 e4       	ldi	r21, 0x45	; 69
    3fcc:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    3fd0:	9f 93       	push	r25
    3fd2:	8f 93       	push	r24
    3fd4:	7f 93       	push	r23
    3fd6:	6f 93       	push	r22
    3fd8:	8e ec       	ldi	r24, 0xCE	; 206
    3fda:	95 e2       	ldi	r25, 0x25	; 37
    3fdc:	9f 93       	push	r25
    3fde:	8f 93       	push	r24
    3fe0:	c9 54       	subi	r28, 0x49	; 73
    3fe2:	df 4f       	sbci	r29, 0xFF	; 255
    3fe4:	58 81       	ld	r21, Y
    3fe6:	c7 5b       	subi	r28, 0xB7	; 183
    3fe8:	d0 40       	sbci	r29, 0x00	; 0
    3fea:	5f 93       	push	r21
    3fec:	ca 54       	subi	r28, 0x4A	; 74
    3fee:	df 4f       	sbci	r29, 0xFF	; 255
    3ff0:	88 81       	ld	r24, Y
    3ff2:	c6 5b       	subi	r28, 0xB6	; 182
    3ff4:	d0 40       	sbci	r29, 0x00	; 0
    3ff6:	8f 93       	push	r24
    3ff8:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_H2A */
    3ffc:	cd bf       	out	0x3d, r28	; 61
    3ffe:	de bf       	out	0x3e, r29	; 62
    4000:	cf 52       	subi	r28, 0x2F	; 47
    4002:	df 4f       	sbci	r29, 0xFF	; 255
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	1f 91       	pop	r17
    400e:	0f 91       	pop	r16
    4010:	ff 90       	pop	r15
    4012:	ef 90       	pop	r14
    4014:	df 90       	pop	r13
    4016:	cf 90       	pop	r12
    4018:	bf 90       	pop	r11
    401a:	af 90       	pop	r10
    401c:	9f 90       	pop	r9
    401e:	8f 90       	pop	r8
    4020:	7f 90       	pop	r7
    4022:	6f 90       	pop	r6
    4024:	5f 90       	pop	r5
    4026:	4f 90       	pop	r4
    4028:	3f 90       	pop	r3
    402a:	2f 90       	pop	r2
    402c:	08 95       	ret

0000402e <PrintCSV_EVA>:




void PrintCSV_EVA(FILE *fp) {
    402e:	2f 92       	push	r2
    4030:	3f 92       	push	r3
    4032:	4f 92       	push	r4
    4034:	5f 92       	push	r5
    4036:	6f 92       	push	r6
    4038:	7f 92       	push	r7
    403a:	8f 92       	push	r8
    403c:	9f 92       	push	r9
    403e:	af 92       	push	r10
    4040:	bf 92       	push	r11
    4042:	cf 92       	push	r12
    4044:	df 92       	push	r13
    4046:	ef 92       	push	r14
    4048:	ff 92       	push	r15
    404a:	0f 93       	push	r16
    404c:	1f 93       	push	r17
    404e:	cf 93       	push	r28
    4050:	df 93       	push	r29
    4052:	cd b7       	in	r28, 0x3d	; 61
    4054:	de b7       	in	r29, 0x3e	; 62
    4056:	c3 58       	subi	r28, 0x83	; 131
    4058:	d1 09       	sbc	r29, r1
    405a:	cd bf       	out	0x3d, r28	; 61
    405c:	de bf       	out	0x3e, r29	; 62
    405e:	ae 96       	adiw	r28, 0x2e	; 46
    4060:	8f af       	std	Y+63, r24	; 0x3f
    4062:	ae 97       	sbiw	r28, 0x2e	; 46
    4064:	af 96       	adiw	r28, 0x2f	; 47
    4066:	9f af       	std	Y+63, r25	; 0x3f
    4068:	af 97       	sbiw	r28, 0x2f	; 47
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    406a:	80 91 66 29 	lds	r24, 0x2966	; 0x802966 <sTakeSnapshot>



void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    406e:	81 11       	cpse	r24, r1
    4070:	fc cf       	rjmp	.-8      	; 0x406a <PrintCSV_EVA+0x3c>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
    4072:	60 91 d8 29 	lds	r22, 0x29D8	; 0x8029d8 <sSensorDataSnapshot+0x6d>
    4076:	70 91 d9 29 	lds	r23, 0x29D9	; 0x8029d9 <sSensorDataSnapshot+0x6e>
    407a:	80 91 da 29 	lds	r24, 0x29DA	; 0x8029da <sSensorDataSnapshot+0x6f>
    407e:	90 91 db 29 	lds	r25, 0x29DB	; 0x8029db <sSensorDataSnapshot+0x70>
    4082:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e4       	ldi	r19, 0x40	; 64
    408a:	4c e9       	ldi	r20, 0x9C	; 156
    408c:	55 e4       	ldi	r21, 0x45	; 69
    408e:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4092:	e0 96       	adiw	r28, 0x30	; 48
    4094:	6f af       	std	Y+63, r22	; 0x3f
    4096:	e0 97       	sbiw	r28, 0x30	; 48
    4098:	e1 96       	adiw	r28, 0x31	; 49
    409a:	7f af       	std	Y+63, r23	; 0x3f
    409c:	e1 97       	sbiw	r28, 0x31	; 49
    409e:	e2 96       	adiw	r28, 0x32	; 50
    40a0:	8f af       	std	Y+63, r24	; 0x3f
    40a2:	e2 97       	sbiw	r28, 0x32	; 50
    40a4:	e3 96       	adiw	r28, 0x33	; 51
    40a6:	9f af       	std	Y+63, r25	; 0x3f
    40a8:	e3 97       	sbiw	r28, 0x33	; 51
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
    40aa:	20 91 cf 29 	lds	r18, 0x29CF	; 0x8029cf <sSensorDataSnapshot+0x64>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    40ae:	91 e0       	ldi	r25, 0x01	; 1
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	21 11       	cpse	r18, r1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	69 96       	adiw	r28, 0x19	; 25
    40b8:	9f af       	std	Y+63, r25	; 0x3f
    40ba:	69 97       	sbiw	r28, 0x19	; 25
    40bc:	6a 96       	adiw	r28, 0x1a	; 26
    40be:	8f af       	std	Y+63, r24	; 0x3f
    40c0:	6a 97       	sbiw	r28, 0x1a	; 26
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    40c2:	80 91 e0 29 	lds	r24, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x75>
    40c6:	90 91 e1 29 	lds	r25, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x76>
    40ca:	a0 91 e2 29 	lds	r26, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x77>
    40ce:	b0 91 e3 29 	lds	r27, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x78>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    40d2:	89 2b       	or	r24, r25
    40d4:	8a 2b       	or	r24, r26
    40d6:	8b 2b       	or	r24, r27
    40d8:	69 f1       	breq	.+90     	; 0x4134 <PrintCSV_EVA+0x106>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    40da:	60 91 e0 29 	lds	r22, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x75>
    40de:	70 91 e1 29 	lds	r23, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x76>
    40e2:	80 91 e2 29 	lds	r24, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x77>
    40e6:	90 91 e3 29 	lds	r25, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x78>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    40ea:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	40 e8       	ldi	r20, 0x80	; 128
    40f4:	57 e3       	ldi	r21, 0x37	; 55
    40f6:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    40fa:	9b 01       	movw	r18, r22
    40fc:	ac 01       	movw	r20, r24
    40fe:	60 e0       	ldi	r22, 0x00	; 0
    4100:	78 e5       	ldi	r23, 0x58	; 88
    4102:	84 ea       	ldi	r24, 0xA4	; 164
    4104:	94 e4       	ldi	r25, 0x44	; 68
    4106:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    410a:	c1 58       	subi	r28, 0x81	; 129
    410c:	df 4f       	sbci	r29, 0xFF	; 255
    410e:	68 83       	st	Y, r22
    4110:	cf 57       	subi	r28, 0x7F	; 127
    4112:	d0 40       	sbci	r29, 0x00	; 0
    4114:	c0 58       	subi	r28, 0x80	; 128
    4116:	df 4f       	sbci	r29, 0xFF	; 255
    4118:	78 83       	st	Y, r23
    411a:	c0 58       	subi	r28, 0x80	; 128
    411c:	d0 40       	sbci	r29, 0x00	; 0
    411e:	cf 57       	subi	r28, 0x7F	; 127
    4120:	df 4f       	sbci	r29, 0xFF	; 255
    4122:	88 83       	st	Y, r24
    4124:	c1 58       	subi	r28, 0x81	; 129
    4126:	d0 40       	sbci	r29, 0x00	; 0
    4128:	ce 57       	subi	r28, 0x7E	; 126
    412a:	df 4f       	sbci	r29, 0xFF	; 255
    412c:	98 83       	st	Y, r25
    412e:	c2 58       	subi	r28, 0x82	; 130
    4130:	d0 40       	sbci	r29, 0x00	; 0
    4132:	14 c0       	rjmp	.+40     	; 0x415c <PrintCSV_EVA+0x12e>
    4134:	c1 58       	subi	r28, 0x81	; 129
    4136:	df 4f       	sbci	r29, 0xFF	; 255
    4138:	18 82       	st	Y, r1
    413a:	cf 57       	subi	r28, 0x7F	; 127
    413c:	d0 40       	sbci	r29, 0x00	; 0
    413e:	c0 58       	subi	r28, 0x80	; 128
    4140:	df 4f       	sbci	r29, 0xFF	; 255
    4142:	18 82       	st	Y, r1
    4144:	c0 58       	subi	r28, 0x80	; 128
    4146:	d0 40       	sbci	r29, 0x00	; 0
    4148:	cf 57       	subi	r28, 0x7F	; 127
    414a:	df 4f       	sbci	r29, 0xFF	; 255
    414c:	18 82       	st	Y, r1
    414e:	c1 58       	subi	r28, 0x81	; 129
    4150:	d0 40       	sbci	r29, 0x00	; 0
    4152:	ce 57       	subi	r28, 0x7E	; 126
    4154:	df 4f       	sbci	r29, 0xFF	; 255
    4156:	18 82       	st	Y, r1
    4158:	c2 58       	subi	r28, 0x82	; 130
    415a:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    415c:	10 91 e4 29 	lds	r17, 0x29E4	; 0x8029e4 <sSensorDataSnapshot+0x79>
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    4160:	60 91 d4 29 	lds	r22, 0x29D4	; 0x8029d4 <sSensorDataSnapshot+0x69>
    4164:	70 91 d5 29 	lds	r23, 0x29D5	; 0x8029d5 <sSensorDataSnapshot+0x6a>
    4168:	80 91 d6 29 	lds	r24, 0x29D6	; 0x8029d6 <sSensorDataSnapshot+0x6b>
    416c:	90 91 d7 29 	lds	r25, 0x29D7	; 0x8029d7 <sSensorDataSnapshot+0x6c>
    4170:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    4174:	20 e0       	ldi	r18, 0x00	; 0
    4176:	30 e4       	ldi	r19, 0x40	; 64
    4178:	4c e9       	ldi	r20, 0x9C	; 156
    417a:	55 e4       	ldi	r21, 0x45	; 69
    417c:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4180:	e4 96       	adiw	r28, 0x34	; 52
    4182:	6f af       	std	Y+63, r22	; 0x3f
    4184:	e4 97       	sbiw	r28, 0x34	; 52
    4186:	e5 96       	adiw	r28, 0x35	; 53
    4188:	7f af       	std	Y+63, r23	; 0x3f
    418a:	e5 97       	sbiw	r28, 0x35	; 53
    418c:	e6 96       	adiw	r28, 0x36	; 54
    418e:	8f af       	std	Y+63, r24	; 0x3f
    4190:	e6 97       	sbiw	r28, 0x36	; 54
    4192:	e7 96       	adiw	r28, 0x37	; 55
    4194:	9f af       	std	Y+63, r25	; 0x3f
    4196:	e7 97       	sbiw	r28, 0x37	; 55
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    4198:	20 91 ce 29 	lds	r18, 0x29CE	; 0x8029ce <sSensorDataSnapshot+0x63>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    419c:	91 e0       	ldi	r25, 0x01	; 1
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	21 11       	cpse	r18, r1
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	6b 96       	adiw	r28, 0x1b	; 27
    41a6:	9f af       	std	Y+63, r25	; 0x3f
    41a8:	6b 97       	sbiw	r28, 0x1b	; 27
    41aa:	6c 96       	adiw	r28, 0x1c	; 28
    41ac:	8f af       	std	Y+63, r24	; 0x3f
    41ae:	6c 97       	sbiw	r28, 0x1c	; 28
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    41b0:	60 91 d0 29 	lds	r22, 0x29D0	; 0x8029d0 <sSensorDataSnapshot+0x65>
    41b4:	70 91 d1 29 	lds	r23, 0x29D1	; 0x8029d1 <sSensorDataSnapshot+0x66>
    41b8:	80 91 d2 29 	lds	r24, 0x29D2	; 0x8029d2 <sSensorDataSnapshot+0x67>
    41bc:	90 91 d3 29 	lds	r25, 0x29D3	; 0x8029d3 <sSensorDataSnapshot+0x68>
    41c0:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    41c4:	20 e0       	ldi	r18, 0x00	; 0
    41c6:	30 e4       	ldi	r19, 0x40	; 64
    41c8:	4c e9       	ldi	r20, 0x9C	; 156
    41ca:	55 e4       	ldi	r21, 0x45	; 69
    41cc:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    41d0:	e8 96       	adiw	r28, 0x38	; 56
    41d2:	6f af       	std	Y+63, r22	; 0x3f
    41d4:	e8 97       	sbiw	r28, 0x38	; 56
    41d6:	e9 96       	adiw	r28, 0x39	; 57
    41d8:	7f af       	std	Y+63, r23	; 0x3f
    41da:	e9 97       	sbiw	r28, 0x39	; 57
    41dc:	ea 96       	adiw	r28, 0x3a	; 58
    41de:	8f af       	std	Y+63, r24	; 0x3f
    41e0:	ea 97       	sbiw	r28, 0x3a	; 58
    41e2:	eb 96       	adiw	r28, 0x3b	; 59
    41e4:	9f af       	std	Y+63, r25	; 0x3f
    41e6:	eb 97       	sbiw	r28, 0x3b	; 59
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
    41e8:	20 91 cd 29 	lds	r18, 0x29CD	; 0x8029cd <sSensorDataSnapshot+0x62>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    41ec:	91 e0       	ldi	r25, 0x01	; 1
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	21 11       	cpse	r18, r1
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	6d 96       	adiw	r28, 0x1d	; 29
    41f6:	9f af       	std	Y+63, r25	; 0x3f
    41f8:	6d 97       	sbiw	r28, 0x1d	; 29
    41fa:	6e 96       	adiw	r28, 0x1e	; 30
    41fc:	8f af       	std	Y+63, r24	; 0x3f
    41fe:	6e 97       	sbiw	r28, 0x1e	; 30
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
    4200:	60 91 c9 29 	lds	r22, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5e>
    4204:	70 91 ca 29 	lds	r23, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5f>
    4208:	80 91 cb 29 	lds	r24, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x60>
    420c:	90 91 cc 29 	lds	r25, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x61>
    4210:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    4214:	2f ed       	ldi	r18, 0xDF	; 223
    4216:	36 e9       	ldi	r19, 0x96	; 150
    4218:	45 e9       	ldi	r20, 0x95	; 149
    421a:	5d e3       	ldi	r21, 0x3D	; 61
    421c:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    4220:	ec 96       	adiw	r28, 0x3c	; 60
    4222:	6f af       	std	Y+63, r22	; 0x3f
    4224:	ec 97       	sbiw	r28, 0x3c	; 60
    4226:	ed 96       	adiw	r28, 0x3d	; 61
    4228:	7f af       	std	Y+63, r23	; 0x3f
    422a:	ed 97       	sbiw	r28, 0x3d	; 61
    422c:	ee 96       	adiw	r28, 0x3e	; 62
    422e:	8f af       	std	Y+63, r24	; 0x3f
    4230:	ee 97       	sbiw	r28, 0x3e	; 62
    4232:	ef 96       	adiw	r28, 0x3f	; 63
    4234:	9f af       	std	Y+63, r25	; 0x3f
    4236:	ef 97       	sbiw	r28, 0x3f	; 63
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
    4238:	60 91 c5 29 	lds	r22, 0x29C5	; 0x8029c5 <sSensorDataSnapshot+0x5a>
    423c:	70 91 c6 29 	lds	r23, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5b>
    4240:	80 91 c7 29 	lds	r24, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5c>
    4244:	90 91 c8 29 	lds	r25, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5d>

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    4248:	61 15       	cp	r22, r1
    424a:	71 05       	cpc	r23, r1
    424c:	81 05       	cpc	r24, r1
    424e:	91 05       	cpc	r25, r1
    4250:	09 f1       	breq	.+66     	; 0x4294 <PrintCSV_EVA+0x266>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    4252:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 e8       	ldi	r20, 0x80	; 128
    425c:	57 e3       	ldi	r21, 0x37	; 55
    425e:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    4262:	9b 01       	movw	r18, r22
    4264:	ac 01       	movw	r20, r24
    4266:	60 e0       	ldi	r22, 0x00	; 0
    4268:	78 e5       	ldi	r23, 0x58	; 88
    426a:	84 ea       	ldi	r24, 0xA4	; 164
    426c:	94 e4       	ldi	r25, 0x44	; 68
    426e:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4272:	69 83       	std	Y+1, r22	; 0x01
    4274:	07 2f       	mov	r16, r23
    4276:	38 2e       	mov	r3, r24
    4278:	29 2e       	mov	r2, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e0       	ldi	r19, 0x00	; 0
    427e:	40 e8       	ldi	r20, 0x80	; 128
    4280:	5f e3       	ldi	r21, 0x3F	; 63
    4282:	0e 94 3e 31 	call	0x627c	; 0x627c <__cmpsf2>
    4286:	88 23       	and	r24, r24
    4288:	4c f4       	brge	.+18     	; 0x429c <PrintCSV_EVA+0x26e>
		res = 0.0f;
    428a:	19 82       	std	Y+1, r1	; 0x01
    428c:	00 e0       	ldi	r16, 0x00	; 0
    428e:	31 2c       	mov	r3, r1
    4290:	21 2c       	mov	r2, r1
    4292:	04 c0       	rjmp	.+8      	; 0x429c <PrintCSV_EVA+0x26e>
	}
	else
	res = 0.0f;
    4294:	19 82       	std	Y+1, r1	; 0x01
    4296:	00 e0       	ldi	r16, 0x00	; 0
    4298:	31 2c       	mov	r3, r1
    429a:	21 2c       	mov	r2, r1
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    429c:	60 91 de 29 	lds	r22, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x73>
    42a0:	70 91 df 29 	lds	r23, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x74>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    42a4:	20 91 dc 29 	lds	r18, 0x29DC	; 0x8029dc <sSensorDataSnapshot+0x71>
    42a8:	30 91 dd 29 	lds	r19, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x72>
    42ac:	2a 83       	std	Y+2, r18	; 0x02
    42ae:	3b 83       	std	Y+3, r19	; 0x03
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    42b0:	c0 90 99 29 	lds	r12, 0x2999	; 0x802999 <sSensorDataSnapshot+0x2e>
    42b4:	d0 90 9a 29 	lds	r13, 0x299A	; 0x80299a <sSensorDataSnapshot+0x2f>
    42b8:	e0 90 9b 29 	lds	r14, 0x299B	; 0x80299b <sSensorDataSnapshot+0x30>
    42bc:	f0 90 9c 29 	lds	r15, 0x299C	; 0x80299c <sSensorDataSnapshot+0x31>
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    42c0:	ed eb       	ldi	r30, 0xBD	; 189
    42c2:	f9 e2       	ldi	r31, 0x29	; 41
    42c4:	30 81       	ld	r19, Z
    42c6:	6f 96       	adiw	r28, 0x1f	; 31
    42c8:	3f af       	std	Y+63, r19	; 0x3f
    42ca:	6f 97       	sbiw	r28, 0x1f	; 31
    42cc:	41 81       	ldd	r20, Z+1	; 0x01
    42ce:	a0 96       	adiw	r28, 0x20	; 32
    42d0:	4f af       	std	Y+63, r20	; 0x3f
    42d2:	a0 97       	sbiw	r28, 0x20	; 32
    42d4:	52 81       	ldd	r21, Z+2	; 0x02
    42d6:	a1 96       	adiw	r28, 0x21	; 33
    42d8:	5f af       	std	Y+63, r21	; 0x3f
    42da:	a1 97       	sbiw	r28, 0x21	; 33
    42dc:	83 81       	ldd	r24, Z+3	; 0x03
    42de:	a2 96       	adiw	r28, 0x22	; 34
    42e0:	8f af       	std	Y+63, r24	; 0x3f
    42e2:	a2 97       	sbiw	r28, 0x22	; 34
    42e4:	94 81       	ldd	r25, Z+4	; 0x04
    42e6:	a3 96       	adiw	r28, 0x23	; 35
    42e8:	9f af       	std	Y+63, r25	; 0x3f
    42ea:	a3 97       	sbiw	r28, 0x23	; 35
    42ec:	a5 81       	ldd	r26, Z+5	; 0x05
    42ee:	a4 96       	adiw	r28, 0x24	; 36
    42f0:	af af       	std	Y+63, r26	; 0x3f
    42f2:	a4 97       	sbiw	r28, 0x24	; 36
    42f4:	b6 81       	ldd	r27, Z+6	; 0x06
    42f6:	a5 96       	adiw	r28, 0x25	; 37
    42f8:	bf af       	std	Y+63, r27	; 0x3f
    42fa:	a5 97       	sbiw	r28, 0x25	; 37
    42fc:	27 81       	ldd	r18, Z+7	; 0x07
    42fe:	a6 96       	adiw	r28, 0x26	; 38
    4300:	2f af       	std	Y+63, r18	; 0x3f
    4302:	a6 97       	sbiw	r28, 0x26	; 38
    4304:	e5 ee       	ldi	r30, 0xE5	; 229
    4306:	f9 e2       	ldi	r31, 0x29	; 41
    4308:	40 a4       	ldd	r4, Z+40	; 0x28
    430a:	51 a4       	ldd	r5, Z+41	; 0x29
    430c:	62 a4       	ldd	r6, Z+42	; 0x2a
    430e:	73 a4       	ldd	r7, Z+43	; 0x2b
    4310:	84 a4       	ldd	r8, Z+44	; 0x2c
    4312:	95 a4       	ldd	r9, Z+45	; 0x2d
    4314:	a6 a4       	ldd	r10, Z+46	; 0x2e
    4316:	b7 a4       	ldd	r11, Z+47	; 0x2f
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    4318:	80 91 b1 29 	lds	r24, 0x29B1	; 0x8029b1 <sSensorDataSnapshot+0x46>
    431c:	90 91 b2 29 	lds	r25, 0x29B2	; 0x8029b2 <sSensorDataSnapshot+0x47>
    4320:	a0 91 b3 29 	lds	r26, 0x29B3	; 0x8029b3 <sSensorDataSnapshot+0x48>
    4324:	b0 91 b4 29 	lds	r27, 0x29B4	; 0x8029b4 <sSensorDataSnapshot+0x49>
    4328:	8c 83       	std	Y+4, r24	; 0x04
    432a:	9d 83       	std	Y+5, r25	; 0x05
    432c:	ae 83       	std	Y+6, r26	; 0x06
    432e:	bf 83       	std	Y+7, r27	; 0x07
    4330:	20 a5       	ldd	r18, Z+40	; 0x28
    4332:	31 a5       	ldd	r19, Z+41	; 0x29
    4334:	42 a5       	ldd	r20, Z+42	; 0x2a
    4336:	53 a5       	ldd	r21, Z+43	; 0x2b
    4338:	28 87       	std	Y+8, r18	; 0x08
    433a:	39 87       	std	Y+9, r19	; 0x09
    433c:	4a 87       	std	Y+10, r20	; 0x0a
    433e:	5b 87       	std	Y+11, r21	; 0x0b
    4340:	84 a5       	ldd	r24, Z+44	; 0x2c
    4342:	95 a5       	ldd	r25, Z+45	; 0x2d
    4344:	a6 a5       	ldd	r26, Z+46	; 0x2e
    4346:	b7 a5       	ldd	r27, Z+47	; 0x2f
    4348:	8c 87       	std	Y+12, r24	; 0x0c
    434a:	9d 87       	std	Y+13, r25	; 0x0d
    434c:	ae 87       	std	Y+14, r26	; 0x0e
    434e:	bf 87       	std	Y+15, r27	; 0x0f
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    4350:	20 91 a9 29 	lds	r18, 0x29A9	; 0x8029a9 <sSensorDataSnapshot+0x3e>
    4354:	30 91 aa 29 	lds	r19, 0x29AA	; 0x8029aa <sSensorDataSnapshot+0x3f>
    4358:	40 91 ab 29 	lds	r20, 0x29AB	; 0x8029ab <sSensorDataSnapshot+0x40>
    435c:	50 91 ac 29 	lds	r21, 0x29AC	; 0x8029ac <sSensorDataSnapshot+0x41>
    4360:	28 8b       	std	Y+16, r18	; 0x10
    4362:	39 8b       	std	Y+17, r19	; 0x11
    4364:	4a 8b       	std	Y+18, r20	; 0x12
    4366:	5b 8b       	std	Y+19, r21	; 0x13
    4368:	84 a5       	ldd	r24, Z+44	; 0x2c
    436a:	95 a5       	ldd	r25, Z+45	; 0x2d
    436c:	a6 a5       	ldd	r26, Z+46	; 0x2e
    436e:	b7 a5       	ldd	r27, Z+47	; 0x2f
    4370:	8c 8b       	std	Y+20, r24	; 0x14
    4372:	9d 8b       	std	Y+21, r25	; 0x15
    4374:	ae 8b       	std	Y+22, r26	; 0x16
    4376:	bf 8b       	std	Y+23, r27	; 0x17
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    4378:	20 91 a5 29 	lds	r18, 0x29A5	; 0x8029a5 <sSensorDataSnapshot+0x3a>
    437c:	30 91 a6 29 	lds	r19, 0x29A6	; 0x8029a6 <sSensorDataSnapshot+0x3b>
    4380:	40 91 a7 29 	lds	r20, 0x29A7	; 0x8029a7 <sSensorDataSnapshot+0x3c>
    4384:	50 91 a8 29 	lds	r21, 0x29A8	; 0x8029a8 <sSensorDataSnapshot+0x3d>
    4388:	28 8f       	std	Y+24, r18	; 0x18
    438a:	39 8f       	std	Y+25, r19	; 0x19
    438c:	4a 8f       	std	Y+26, r20	; 0x1a
    438e:	5b 8f       	std	Y+27, r21	; 0x1b
    4390:	80 a5       	ldd	r24, Z+40	; 0x28
    4392:	91 a5       	ldd	r25, Z+41	; 0x29
    4394:	a2 a5       	ldd	r26, Z+42	; 0x2a
    4396:	b3 a5       	ldd	r27, Z+43	; 0x2b
    4398:	8c 8f       	std	Y+28, r24	; 0x1c
    439a:	9d 8f       	std	Y+29, r25	; 0x1d
    439c:	ae 8f       	std	Y+30, r26	; 0x1e
    439e:	bf 8f       	std	Y+31, r27	; 0x1f
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    43a0:	25 eb       	ldi	r18, 0xB5	; 181
    43a2:	39 e2       	ldi	r19, 0x29	; 41
    43a4:	d9 01       	movw	r26, r18
    43a6:	bc 91       	ld	r27, X
    43a8:	a7 96       	adiw	r28, 0x27	; 39
    43aa:	bf af       	std	Y+63, r27	; 0x3f
    43ac:	a7 97       	sbiw	r28, 0x27	; 39
    43ae:	40 91 b6 29 	lds	r20, 0x29B6	; 0x8029b6 <sSensorDataSnapshot+0x4b>
    43b2:	a8 96       	adiw	r28, 0x28	; 40
    43b4:	4f af       	std	Y+63, r20	; 0x3f
    43b6:	a8 97       	sbiw	r28, 0x28	; 40
    43b8:	50 91 b7 29 	lds	r21, 0x29B7	; 0x8029b7 <sSensorDataSnapshot+0x4c>
    43bc:	a9 96       	adiw	r28, 0x29	; 41
    43be:	5f af       	std	Y+63, r21	; 0x3f
    43c0:	a9 97       	sbiw	r28, 0x29	; 41
    43c2:	80 91 b8 29 	lds	r24, 0x29B8	; 0x8029b8 <sSensorDataSnapshot+0x4d>
    43c6:	aa 96       	adiw	r28, 0x2a	; 42
    43c8:	8f af       	std	Y+63, r24	; 0x3f
    43ca:	aa 97       	sbiw	r28, 0x2a	; 42
    43cc:	90 91 b9 29 	lds	r25, 0x29B9	; 0x8029b9 <sSensorDataSnapshot+0x4e>
    43d0:	ab 96       	adiw	r28, 0x2b	; 43
    43d2:	9f af       	std	Y+63, r25	; 0x3f
    43d4:	ab 97       	sbiw	r28, 0x2b	; 43
    43d6:	a0 91 ba 29 	lds	r26, 0x29BA	; 0x8029ba <sSensorDataSnapshot+0x4f>
    43da:	ac 96       	adiw	r28, 0x2c	; 44
    43dc:	af af       	std	Y+63, r26	; 0x3f
    43de:	ac 97       	sbiw	r28, 0x2c	; 44
    43e0:	b0 91 bb 29 	lds	r27, 0x29BB	; 0x8029bb <sSensorDataSnapshot+0x50>
    43e4:	ad 96       	adiw	r28, 0x2d	; 45
    43e6:	bf af       	std	Y+63, r27	; 0x3f
    43e8:	ad 97       	sbiw	r28, 0x2d	; 45
    43ea:	40 91 bc 29 	lds	r20, 0x29BC	; 0x8029bc <sSensorDataSnapshot+0x51>
    43ee:	cd 57       	subi	r28, 0x7D	; 125
    43f0:	df 4f       	sbci	r29, 0xFF	; 255
    43f2:	48 83       	st	Y, r20
    43f4:	c3 58       	subi	r28, 0x83	; 131
    43f6:	d0 40       	sbci	r29, 0x00	; 0
    43f8:	80 a1       	ldd	r24, Z+32	; 0x20
    43fa:	91 a1       	ldd	r25, Z+33	; 0x21
    43fc:	a2 a1       	ldd	r26, Z+34	; 0x22
    43fe:	b3 a1       	ldd	r27, Z+35	; 0x23
    4400:	88 a3       	std	Y+32, r24	; 0x20
    4402:	99 a3       	std	Y+33, r25	; 0x21
    4404:	aa a3       	std	Y+34, r26	; 0x22
    4406:	bb a3       	std	Y+35, r27	; 0x23
    4408:	24 a1       	ldd	r18, Z+36	; 0x24
    440a:	35 a1       	ldd	r19, Z+37	; 0x25
    440c:	46 a1       	ldd	r20, Z+38	; 0x26
    440e:	57 a1       	ldd	r21, Z+39	; 0x27
    4410:	2c a3       	std	Y+36, r18	; 0x24
    4412:	3d a3       	std	Y+37, r19	; 0x25
    4414:	4e a3       	std	Y+38, r20	; 0x26
    4416:	5f a3       	std	Y+39, r21	; 0x27
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    4418:	80 91 ad 29 	lds	r24, 0x29AD	; 0x8029ad <sSensorDataSnapshot+0x42>
    441c:	90 91 ae 29 	lds	r25, 0x29AE	; 0x8029ae <sSensorDataSnapshot+0x43>
    4420:	a0 91 af 29 	lds	r26, 0x29AF	; 0x8029af <sSensorDataSnapshot+0x44>
    4424:	b0 91 b0 29 	lds	r27, 0x29B0	; 0x8029b0 <sSensorDataSnapshot+0x45>
    4428:	88 a7       	std	Y+40, r24	; 0x28
    442a:	99 a7       	std	Y+41, r25	; 0x29
    442c:	aa a7       	std	Y+42, r26	; 0x2a
    442e:	bb a7       	std	Y+43, r27	; 0x2b
    4430:	20 a1       	ldd	r18, Z+32	; 0x20
    4432:	31 a1       	ldd	r19, Z+33	; 0x21
    4434:	42 a1       	ldd	r20, Z+34	; 0x22
    4436:	53 a1       	ldd	r21, Z+35	; 0x23
    4438:	2c a7       	std	Y+44, r18	; 0x2c
    443a:	3d a7       	std	Y+45, r19	; 0x2d
    443c:	4e a7       	std	Y+46, r20	; 0x2e
    443e:	5f a7       	std	Y+47, r21	; 0x2f
    4440:	84 a1       	ldd	r24, Z+36	; 0x24
    4442:	95 a1       	ldd	r25, Z+37	; 0x25
    4444:	a6 a1       	ldd	r26, Z+38	; 0x26
    4446:	b7 a1       	ldd	r27, Z+39	; 0x27
    4448:	88 ab       	std	Y+48, r24	; 0x30
    444a:	99 ab       	std	Y+49, r25	; 0x31
    444c:	aa ab       	std	Y+50, r26	; 0x32
    444e:	bb ab       	std	Y+51, r27	; 0x33
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    4450:	20 91 a1 29 	lds	r18, 0x29A1	; 0x8029a1 <sSensorDataSnapshot+0x36>
    4454:	30 91 a2 29 	lds	r19, 0x29A2	; 0x8029a2 <sSensorDataSnapshot+0x37>
    4458:	40 91 a3 29 	lds	r20, 0x29A3	; 0x8029a3 <sSensorDataSnapshot+0x38>
    445c:	50 91 a4 29 	lds	r21, 0x29A4	; 0x8029a4 <sSensorDataSnapshot+0x39>
    4460:	2c ab       	std	Y+52, r18	; 0x34
    4462:	3d ab       	std	Y+53, r19	; 0x35
    4464:	4e ab       	std	Y+54, r20	; 0x36
    4466:	5f ab       	std	Y+55, r21	; 0x37
    4468:	84 a1       	ldd	r24, Z+36	; 0x24
    446a:	95 a1       	ldd	r25, Z+37	; 0x25
    446c:	a6 a1       	ldd	r26, Z+38	; 0x26
    446e:	b7 a1       	ldd	r27, Z+39	; 0x27
    4470:	88 af       	std	Y+56, r24	; 0x38
    4472:	99 af       	std	Y+57, r25	; 0x39
    4474:	aa af       	std	Y+58, r26	; 0x3a
    4476:	bb af       	std	Y+59, r27	; 0x3b
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    4478:	20 91 9d 29 	lds	r18, 0x299D	; 0x80299d <sSensorDataSnapshot+0x32>
    447c:	30 91 9e 29 	lds	r19, 0x299E	; 0x80299e <sSensorDataSnapshot+0x33>
    4480:	40 91 9f 29 	lds	r20, 0x299F	; 0x80299f <sSensorDataSnapshot+0x34>
    4484:	50 91 a0 29 	lds	r21, 0x29A0	; 0x8029a0 <sSensorDataSnapshot+0x35>
    4488:	2c af       	std	Y+60, r18	; 0x3c
    448a:	3d af       	std	Y+61, r19	; 0x3d
    448c:	4e af       	std	Y+62, r20	; 0x3e
    448e:	5f af       	std	Y+63, r21	; 0x3f
    4490:	80 a1       	ldd	r24, Z+32	; 0x20
    4492:	91 a1       	ldd	r25, Z+33	; 0x21
    4494:	a2 a1       	ldd	r26, Z+34	; 0x22
    4496:	b3 a1       	ldd	r27, Z+35	; 0x23
    4498:	24 96       	adiw	r28, 0x04	; 4
    449a:	8c af       	std	Y+60, r24	; 0x3c
    449c:	9d af       	std	Y+61, r25	; 0x3d
    449e:	ae af       	std	Y+62, r26	; 0x3e
    44a0:	bf af       	std	Y+63, r27	; 0x3f
    44a2:	24 97       	sbiw	r28, 0x04	; 4
	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
    44a4:	20 91 6f 29 	lds	r18, 0x296F	; 0x80296f <sSensorDataSnapshot+0x4>
    44a8:	30 91 70 29 	lds	r19, 0x2970	; 0x802970 <sSensorDataSnapshot+0x5>
    44ac:	40 91 71 29 	lds	r20, 0x2971	; 0x802971 <sSensorDataSnapshot+0x6>
    44b0:	50 91 72 29 	lds	r21, 0x2972	; 0x802972 <sSensorDataSnapshot+0x7>
    44b4:	28 96       	adiw	r28, 0x08	; 8
    44b6:	2c af       	std	Y+60, r18	; 0x3c
    44b8:	3d af       	std	Y+61, r19	; 0x3d
    44ba:	4e af       	std	Y+62, r20	; 0x3e
    44bc:	5f af       	std	Y+63, r21	; 0x3f
    44be:	28 97       	sbiw	r28, 0x08	; 8

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
    44c0:	ab e6       	ldi	r26, 0x6B	; 107
    44c2:	b9 e2       	ldi	r27, 0x29	; 41
    44c4:	8d 91       	ld	r24, X+
    44c6:	9d 91       	ld	r25, X+
    44c8:	0d 90       	ld	r0, X+
    44ca:	bc 91       	ld	r27, X
    44cc:	a0 2d       	mov	r26, r0
    44ce:	2c 96       	adiw	r28, 0x0c	; 12
    44d0:	8c af       	std	Y+60, r24	; 0x3c
    44d2:	9d af       	std	Y+61, r25	; 0x3d
    44d4:	ae af       	std	Y+62, r26	; 0x3e
    44d6:	bf af       	std	Y+63, r27	; 0x3f
    44d8:	2c 97       	sbiw	r28, 0x0c	; 12
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
    44da:	20 91 77 29 	lds	r18, 0x2977	; 0x802977 <sSensorDataSnapshot+0xc>
    44de:	30 91 78 29 	lds	r19, 0x2978	; 0x802978 <sSensorDataSnapshot+0xd>
    44e2:	40 91 79 29 	lds	r20, 0x2979	; 0x802979 <sSensorDataSnapshot+0xe>
    44e6:	50 91 7a 29 	lds	r21, 0x297A	; 0x80297a <sSensorDataSnapshot+0xf>
    44ea:	60 96       	adiw	r28, 0x10	; 16
    44ec:	2c af       	std	Y+60, r18	; 0x3c
    44ee:	3d af       	std	Y+61, r19	; 0x3d
    44f0:	4e af       	std	Y+62, r20	; 0x3e
    44f2:	5f af       	std	Y+63, r21	; 0x3f
    44f4:	60 97       	sbiw	r28, 0x10	; 16
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
    44f6:	80 91 73 29 	lds	r24, 0x2973	; 0x802973 <sSensorDataSnapshot+0x8>
    44fa:	90 91 74 29 	lds	r25, 0x2974	; 0x802974 <sSensorDataSnapshot+0x9>
    44fe:	a0 91 75 29 	lds	r26, 0x2975	; 0x802975 <sSensorDataSnapshot+0xa>
    4502:	b0 91 76 29 	lds	r27, 0x2976	; 0x802976 <sSensorDataSnapshot+0xb>
    4506:	64 96       	adiw	r28, 0x14	; 20
    4508:	8c af       	std	Y+60, r24	; 0x3c
    450a:	9d af       	std	Y+61, r25	; 0x3d
    450c:	ae af       	std	Y+62, r26	; 0x3e
    450e:	bf af       	std	Y+63, r27	; 0x3f
    4510:	64 97       	sbiw	r28, 0x14	; 20
void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    4512:	20 91 67 29 	lds	r18, 0x2967	; 0x802967 <sSessionCycleCountSnapshot>
    4516:	30 91 68 29 	lds	r19, 0x2968	; 0x802968 <sSessionCycleCountSnapshot+0x1>
    451a:	40 91 69 29 	lds	r20, 0x2969	; 0x802969 <sSessionCycleCountSnapshot+0x2>
    451e:	50 91 6a 29 	lds	r21, 0x296A	; 0x80296a <sSessionCycleCountSnapshot+0x3>
    4522:	68 96       	adiw	r28, 0x18	; 24
    4524:	2c af       	std	Y+60, r18	; 0x3c
    4526:	3d af       	std	Y+61, r19	; 0x3d
    4528:	4e af       	std	Y+62, r20	; 0x3e
    452a:	5f af       	std	Y+63, r21	; 0x3f
    452c:	68 97       	sbiw	r28, 0x18	; 24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    452e:	e3 96       	adiw	r28, 0x33	; 51
    4530:	3f ad       	ldd	r19, Y+63	; 0x3f
    4532:	e3 97       	sbiw	r28, 0x33	; 51
    4534:	3f 93       	push	r19
    4536:	e2 96       	adiw	r28, 0x32	; 50
    4538:	4f ad       	ldd	r20, Y+63	; 0x3f
    453a:	e2 97       	sbiw	r28, 0x32	; 50
    453c:	4f 93       	push	r20
    453e:	e1 96       	adiw	r28, 0x31	; 49
    4540:	5f ad       	ldd	r21, Y+63	; 0x3f
    4542:	e1 97       	sbiw	r28, 0x31	; 49
    4544:	5f 93       	push	r21
    4546:	e0 96       	adiw	r28, 0x30	; 48
    4548:	8f ad       	ldd	r24, Y+63	; 0x3f
    454a:	e0 97       	sbiw	r28, 0x30	; 48
    454c:	8f 93       	push	r24
    454e:	6a 96       	adiw	r28, 0x1a	; 26
    4550:	9f ad       	ldd	r25, Y+63	; 0x3f
    4552:	6a 97       	sbiw	r28, 0x1a	; 26
    4554:	9f 93       	push	r25
    4556:	69 96       	adiw	r28, 0x19	; 25
    4558:	af ad       	ldd	r26, Y+63	; 0x3f
    455a:	69 97       	sbiw	r28, 0x19	; 25
    455c:	af 93       	push	r26
    455e:	ce 57       	subi	r28, 0x7E	; 126
    4560:	df 4f       	sbci	r29, 0xFF	; 255
    4562:	b8 81       	ld	r27, Y
    4564:	c2 58       	subi	r28, 0x82	; 130
    4566:	d0 40       	sbci	r29, 0x00	; 0
    4568:	bf 93       	push	r27
    456a:	cf 57       	subi	r28, 0x7F	; 127
    456c:	df 4f       	sbci	r29, 0xFF	; 255
    456e:	e8 81       	ld	r30, Y
    4570:	c1 58       	subi	r28, 0x81	; 129
    4572:	d0 40       	sbci	r29, 0x00	; 0
    4574:	ef 93       	push	r30
    4576:	c0 58       	subi	r28, 0x80	; 128
    4578:	df 4f       	sbci	r29, 0xFF	; 255
    457a:	f8 81       	ld	r31, Y
    457c:	c0 58       	subi	r28, 0x80	; 128
    457e:	d0 40       	sbci	r29, 0x00	; 0
    4580:	ff 93       	push	r31
    4582:	c1 58       	subi	r28, 0x81	; 129
    4584:	df 4f       	sbci	r29, 0xFF	; 255
    4586:	28 81       	ld	r18, Y
    4588:	cf 57       	subi	r28, 0x7F	; 127
    458a:	d0 40       	sbci	r29, 0x00	; 0
    458c:	2f 93       	push	r18
    458e:	1f 92       	push	r1
    4590:	1f 93       	push	r17
    4592:	e7 96       	adiw	r28, 0x37	; 55
    4594:	3f ad       	ldd	r19, Y+63	; 0x3f
    4596:	e7 97       	sbiw	r28, 0x37	; 55
    4598:	3f 93       	push	r19
    459a:	e6 96       	adiw	r28, 0x36	; 54
    459c:	4f ad       	ldd	r20, Y+63	; 0x3f
    459e:	e6 97       	sbiw	r28, 0x36	; 54
    45a0:	4f 93       	push	r20
    45a2:	e5 96       	adiw	r28, 0x35	; 53
    45a4:	5f ad       	ldd	r21, Y+63	; 0x3f
    45a6:	e5 97       	sbiw	r28, 0x35	; 53
    45a8:	5f 93       	push	r21
    45aa:	e4 96       	adiw	r28, 0x34	; 52
    45ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    45ae:	e4 97       	sbiw	r28, 0x34	; 52
    45b0:	8f 93       	push	r24
    45b2:	6c 96       	adiw	r28, 0x1c	; 28
    45b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    45b6:	6c 97       	sbiw	r28, 0x1c	; 28
    45b8:	9f 93       	push	r25
    45ba:	6b 96       	adiw	r28, 0x1b	; 27
    45bc:	af ad       	ldd	r26, Y+63	; 0x3f
    45be:	6b 97       	sbiw	r28, 0x1b	; 27
    45c0:	af 93       	push	r26
    45c2:	eb 96       	adiw	r28, 0x3b	; 59
    45c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    45c6:	eb 97       	sbiw	r28, 0x3b	; 59
    45c8:	bf 93       	push	r27
    45ca:	ea 96       	adiw	r28, 0x3a	; 58
    45cc:	ef ad       	ldd	r30, Y+63	; 0x3f
    45ce:	ea 97       	sbiw	r28, 0x3a	; 58
    45d0:	ef 93       	push	r30
    45d2:	e9 96       	adiw	r28, 0x39	; 57
    45d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    45d6:	e9 97       	sbiw	r28, 0x39	; 57
    45d8:	ff 93       	push	r31
    45da:	e8 96       	adiw	r28, 0x38	; 56
    45dc:	2f ad       	ldd	r18, Y+63	; 0x3f
    45de:	e8 97       	sbiw	r28, 0x38	; 56
    45e0:	2f 93       	push	r18
    45e2:	6e 96       	adiw	r28, 0x1e	; 30
    45e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    45e6:	6e 97       	sbiw	r28, 0x1e	; 30
    45e8:	3f 93       	push	r19
    45ea:	6d 96       	adiw	r28, 0x1d	; 29
    45ec:	4f ad       	ldd	r20, Y+63	; 0x3f
    45ee:	6d 97       	sbiw	r28, 0x1d	; 29
    45f0:	4f 93       	push	r20
    45f2:	ef 96       	adiw	r28, 0x3f	; 63
    45f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    45f6:	ef 97       	sbiw	r28, 0x3f	; 63
    45f8:	5f 93       	push	r21
    45fa:	ee 96       	adiw	r28, 0x3e	; 62
    45fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    45fe:	ee 97       	sbiw	r28, 0x3e	; 62
    4600:	8f 93       	push	r24
    4602:	ed 96       	adiw	r28, 0x3d	; 61
    4604:	9f ad       	ldd	r25, Y+63	; 0x3f
    4606:	ed 97       	sbiw	r28, 0x3d	; 61
    4608:	9f 93       	push	r25
    460a:	ec 96       	adiw	r28, 0x3c	; 60
    460c:	af ad       	ldd	r26, Y+63	; 0x3f
    460e:	ec 97       	sbiw	r28, 0x3c	; 60
    4610:	af 93       	push	r26
    4612:	2f 92       	push	r2
    4614:	3f 92       	push	r3
    4616:	0f 93       	push	r16
    4618:	b9 81       	ldd	r27, Y+1	; 0x01
    461a:	bf 93       	push	r27
    461c:	80 e0       	ldi	r24, 0x00	; 0
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    4624:	23 e3       	ldi	r18, 0x33	; 51
    4626:	33 e3       	ldi	r19, 0x33	; 51
    4628:	43 e2       	ldi	r20, 0x23	; 35
    462a:	54 e4       	ldi	r21, 0x44	; 68
    462c:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4630:	9f 93       	push	r25
    4632:	8f 93       	push	r24
    4634:	7f 93       	push	r23
    4636:	6f 93       	push	r22
    4638:	ea 81       	ldd	r30, Y+2	; 0x02
    463a:	fb 81       	ldd	r31, Y+3	; 0x03
    463c:	bf 01       	movw	r22, r30
    463e:	80 e0       	ldi	r24, 0x00	; 0
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    4646:	27 e1       	ldi	r18, 0x17	; 23
    4648:	37 eb       	ldi	r19, 0xB7	; 183
    464a:	41 ed       	ldi	r20, 0xD1	; 209
    464c:	5e e3       	ldi	r21, 0x3E	; 62
    464e:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4652:	9f 93       	push	r25
    4654:	8f 93       	push	r24
    4656:	7f 93       	push	r23
    4658:	6f 93       	push	r22
    465a:	c7 01       	movw	r24, r14
    465c:	b6 01       	movw	r22, r12
    465e:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	40 e2       	ldi	r20, 0x20	; 32
    4668:	59 e4       	ldi	r21, 0x49	; 73
    466a:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    466e:	9f 93       	push	r25
    4670:	8f 93       	push	r24
    4672:	7f 93       	push	r23
    4674:	6f 93       	push	r22
    4676:	6f 96       	adiw	r28, 0x1f	; 31
    4678:	2f ad       	ldd	r18, Y+63	; 0x3f
    467a:	6f 97       	sbiw	r28, 0x1f	; 31
    467c:	a0 96       	adiw	r28, 0x20	; 32
    467e:	3f ad       	ldd	r19, Y+63	; 0x3f
    4680:	a0 97       	sbiw	r28, 0x20	; 32
    4682:	a1 96       	adiw	r28, 0x21	; 33
    4684:	4f ad       	ldd	r20, Y+63	; 0x3f
    4686:	a1 97       	sbiw	r28, 0x21	; 33
    4688:	a2 96       	adiw	r28, 0x22	; 34
    468a:	5f ad       	ldd	r21, Y+63	; 0x3f
    468c:	a2 97       	sbiw	r28, 0x22	; 34
    468e:	a3 96       	adiw	r28, 0x23	; 35
    4690:	6f ad       	ldd	r22, Y+63	; 0x3f
    4692:	a3 97       	sbiw	r28, 0x23	; 35
    4694:	a4 96       	adiw	r28, 0x24	; 36
    4696:	7f ad       	ldd	r23, Y+63	; 0x3f
    4698:	a4 97       	sbiw	r28, 0x24	; 36
    469a:	a5 96       	adiw	r28, 0x25	; 37
    469c:	8f ad       	ldd	r24, Y+63	; 0x3f
    469e:	a5 97       	sbiw	r28, 0x25	; 37
    46a0:	a6 96       	adiw	r28, 0x26	; 38
    46a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    46a4:	a6 97       	sbiw	r28, 0x26	; 38
    46a6:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__floatdisf>
    46aa:	6b 01       	movw	r12, r22
    46ac:	7c 01       	movw	r14, r24
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e4       	ldi	r19, 0x40	; 64
    46b2:	4c e9       	ldi	r20, 0x9C	; 156
    46b4:	55 e4       	ldi	r21, 0x45	; 69
    46b6:	c3 01       	movw	r24, r6
    46b8:	b2 01       	movw	r22, r4
    46ba:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    46be:	a5 01       	movw	r20, r10
    46c0:	94 01       	movw	r18, r8
    46c2:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    46c6:	9b 01       	movw	r18, r22
    46c8:	ac 01       	movw	r20, r24
    46ca:	c7 01       	movw	r24, r14
    46cc:	b6 01       	movw	r22, r12
    46ce:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    46d2:	9f 93       	push	r25
    46d4:	8f 93       	push	r24
    46d6:	7f 93       	push	r23
    46d8:	6f 93       	push	r22
    46da:	6c 81       	ldd	r22, Y+4	; 0x04
    46dc:	7d 81       	ldd	r23, Y+5	; 0x05
    46de:	8e 81       	ldd	r24, Y+6	; 0x06
    46e0:	9f 81       	ldd	r25, Y+7	; 0x07
    46e2:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    46e6:	6b 01       	movw	r12, r22
    46e8:	7c 01       	movw	r14, r24
    46ea:	20 e0       	ldi	r18, 0x00	; 0
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	40 e8       	ldi	r20, 0x80	; 128
    46f0:	53 e4       	ldi	r21, 0x43	; 67
    46f2:	68 85       	ldd	r22, Y+8	; 0x08
    46f4:	79 85       	ldd	r23, Y+9	; 0x09
    46f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    46f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    46fa:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    46fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    4700:	3d 85       	ldd	r19, Y+13	; 0x0d
    4702:	4e 85       	ldd	r20, Y+14	; 0x0e
    4704:	5f 85       	ldd	r21, Y+15	; 0x0f
    4706:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    470a:	9b 01       	movw	r18, r22
    470c:	ac 01       	movw	r20, r24
    470e:	c7 01       	movw	r24, r14
    4710:	b6 01       	movw	r22, r12
    4712:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4716:	9f 93       	push	r25
    4718:	8f 93       	push	r24
    471a:	7f 93       	push	r23
    471c:	6f 93       	push	r22
    471e:	68 89       	ldd	r22, Y+16	; 0x10
    4720:	79 89       	ldd	r23, Y+17	; 0x11
    4722:	8a 89       	ldd	r24, Y+18	; 0x12
    4724:	9b 89       	ldd	r25, Y+19	; 0x13
    4726:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    472a:	6b 01       	movw	r12, r22
    472c:	7c 01       	movw	r14, r24
    472e:	20 e0       	ldi	r18, 0x00	; 0
    4730:	30 e0       	ldi	r19, 0x00	; 0
    4732:	40 e8       	ldi	r20, 0x80	; 128
    4734:	57 e4       	ldi	r21, 0x47	; 71
    4736:	6c 89       	ldd	r22, Y+20	; 0x14
    4738:	7d 89       	ldd	r23, Y+21	; 0x15
    473a:	8e 89       	ldd	r24, Y+22	; 0x16
    473c:	9f 89       	ldd	r25, Y+23	; 0x17
    473e:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    4742:	9b 01       	movw	r18, r22
    4744:	ac 01       	movw	r20, r24
    4746:	c7 01       	movw	r24, r14
    4748:	b6 01       	movw	r22, r12
    474a:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    474e:	9f 93       	push	r25
    4750:	8f 93       	push	r24
    4752:	7f 93       	push	r23
    4754:	6f 93       	push	r22
    4756:	68 8d       	ldd	r22, Y+24	; 0x18
    4758:	79 8d       	ldd	r23, Y+25	; 0x19
    475a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    475c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    475e:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    4762:	6b 01       	movw	r12, r22
    4764:	7c 01       	movw	r14, r24
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	40 e8       	ldi	r20, 0x80	; 128
    476c:	57 e4       	ldi	r21, 0x47	; 71
    476e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4770:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4772:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4774:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4776:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    477a:	9b 01       	movw	r18, r22
    477c:	ac 01       	movw	r20, r24
    477e:	c7 01       	movw	r24, r14
    4780:	b6 01       	movw	r22, r12
    4782:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4786:	9f 93       	push	r25
    4788:	8f 93       	push	r24
    478a:	7f 93       	push	r23
    478c:	6f 93       	push	r22
    478e:	a7 96       	adiw	r28, 0x27	; 39
    4790:	2f ad       	ldd	r18, Y+63	; 0x3f
    4792:	a7 97       	sbiw	r28, 0x27	; 39
    4794:	a8 96       	adiw	r28, 0x28	; 40
    4796:	3f ad       	ldd	r19, Y+63	; 0x3f
    4798:	a8 97       	sbiw	r28, 0x28	; 40
    479a:	a9 96       	adiw	r28, 0x29	; 41
    479c:	4f ad       	ldd	r20, Y+63	; 0x3f
    479e:	a9 97       	sbiw	r28, 0x29	; 41
    47a0:	aa 96       	adiw	r28, 0x2a	; 42
    47a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    47a4:	aa 97       	sbiw	r28, 0x2a	; 42
    47a6:	ab 96       	adiw	r28, 0x2b	; 43
    47a8:	6f ad       	ldd	r22, Y+63	; 0x3f
    47aa:	ab 97       	sbiw	r28, 0x2b	; 43
    47ac:	ac 96       	adiw	r28, 0x2c	; 44
    47ae:	7f ad       	ldd	r23, Y+63	; 0x3f
    47b0:	ac 97       	sbiw	r28, 0x2c	; 44
    47b2:	ad 96       	adiw	r28, 0x2d	; 45
    47b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    47b6:	ad 97       	sbiw	r28, 0x2d	; 45
    47b8:	cd 57       	subi	r28, 0x7D	; 125
    47ba:	df 4f       	sbci	r29, 0xFF	; 255
    47bc:	98 81       	ld	r25, Y
    47be:	c3 58       	subi	r28, 0x83	; 131
    47c0:	d0 40       	sbci	r29, 0x00	; 0
    47c2:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <__floatdisf>
    47c6:	6b 01       	movw	r12, r22
    47c8:	7c 01       	movw	r14, r24
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	30 e4       	ldi	r19, 0x40	; 64
    47ce:	4c e9       	ldi	r20, 0x9C	; 156
    47d0:	55 e4       	ldi	r21, 0x45	; 69
    47d2:	68 a1       	ldd	r22, Y+32	; 0x20
    47d4:	79 a1       	ldd	r23, Y+33	; 0x21
    47d6:	8a a1       	ldd	r24, Y+34	; 0x22
    47d8:	9b a1       	ldd	r25, Y+35	; 0x23
    47da:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    47de:	2c a1       	ldd	r18, Y+36	; 0x24
    47e0:	3d a1       	ldd	r19, Y+37	; 0x25
    47e2:	4e a1       	ldd	r20, Y+38	; 0x26
    47e4:	5f a1       	ldd	r21, Y+39	; 0x27
    47e6:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    47ea:	9b 01       	movw	r18, r22
    47ec:	ac 01       	movw	r20, r24
    47ee:	c7 01       	movw	r24, r14
    47f0:	b6 01       	movw	r22, r12
    47f2:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    47f6:	9f 93       	push	r25
    47f8:	8f 93       	push	r24
    47fa:	7f 93       	push	r23
    47fc:	6f 93       	push	r22
    47fe:	68 a5       	ldd	r22, Y+40	; 0x28
    4800:	79 a5       	ldd	r23, Y+41	; 0x29
    4802:	8a a5       	ldd	r24, Y+42	; 0x2a
    4804:	9b a5       	ldd	r25, Y+43	; 0x2b
    4806:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    480a:	6b 01       	movw	r12, r22
    480c:	7c 01       	movw	r14, r24
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	40 e8       	ldi	r20, 0x80	; 128
    4814:	53 e4       	ldi	r21, 0x43	; 67
    4816:	6c a5       	ldd	r22, Y+44	; 0x2c
    4818:	7d a5       	ldd	r23, Y+45	; 0x2d
    481a:	8e a5       	ldd	r24, Y+46	; 0x2e
    481c:	9f a5       	ldd	r25, Y+47	; 0x2f
    481e:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    4822:	28 a9       	ldd	r18, Y+48	; 0x30
    4824:	39 a9       	ldd	r19, Y+49	; 0x31
    4826:	4a a9       	ldd	r20, Y+50	; 0x32
    4828:	5b a9       	ldd	r21, Y+51	; 0x33
    482a:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    482e:	9b 01       	movw	r18, r22
    4830:	ac 01       	movw	r20, r24
    4832:	c7 01       	movw	r24, r14
    4834:	b6 01       	movw	r22, r12
    4836:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    483a:	9f 93       	push	r25
    483c:	8f 93       	push	r24
    483e:	7f 93       	push	r23
    4840:	6f 93       	push	r22
    4842:	6c a9       	ldd	r22, Y+52	; 0x34
    4844:	7d a9       	ldd	r23, Y+53	; 0x35
    4846:	8e a9       	ldd	r24, Y+54	; 0x36
    4848:	9f a9       	ldd	r25, Y+55	; 0x37
    484a:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    484e:	6b 01       	movw	r12, r22
    4850:	7c 01       	movw	r14, r24
    4852:	20 e0       	ldi	r18, 0x00	; 0
    4854:	30 e0       	ldi	r19, 0x00	; 0
    4856:	40 e8       	ldi	r20, 0x80	; 128
    4858:	57 e4       	ldi	r21, 0x47	; 71
    485a:	68 ad       	ldd	r22, Y+56	; 0x38
    485c:	79 ad       	ldd	r23, Y+57	; 0x39
    485e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4860:	9b ad       	ldd	r25, Y+59	; 0x3b
    4862:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    4866:	9b 01       	movw	r18, r22
    4868:	ac 01       	movw	r20, r24
    486a:	c7 01       	movw	r24, r14
    486c:	b6 01       	movw	r22, r12
    486e:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4872:	9f 93       	push	r25
    4874:	8f 93       	push	r24
    4876:	7f 93       	push	r23
    4878:	6f 93       	push	r22
    487a:	6c ad       	ldd	r22, Y+60	; 0x3c
    487c:	7d ad       	ldd	r23, Y+61	; 0x3d
    487e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4880:	9f ad       	ldd	r25, Y+63	; 0x3f
    4882:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    4886:	6b 01       	movw	r12, r22
    4888:	7c 01       	movw	r14, r24
    488a:	20 e0       	ldi	r18, 0x00	; 0
    488c:	30 e0       	ldi	r19, 0x00	; 0
    488e:	40 e8       	ldi	r20, 0x80	; 128
    4890:	57 e4       	ldi	r21, 0x47	; 71
    4892:	24 96       	adiw	r28, 0x04	; 4
    4894:	6c ad       	ldd	r22, Y+60	; 0x3c
    4896:	7d ad       	ldd	r23, Y+61	; 0x3d
    4898:	8e ad       	ldd	r24, Y+62	; 0x3e
    489a:	9f ad       	ldd	r25, Y+63	; 0x3f
    489c:	24 97       	sbiw	r28, 0x04	; 4
    489e:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    48a2:	9b 01       	movw	r18, r22
    48a4:	ac 01       	movw	r20, r24
    48a6:	c7 01       	movw	r24, r14
    48a8:	b6 01       	movw	r22, r12
    48aa:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    48ae:	9f 93       	push	r25
    48b0:	8f 93       	push	r24
    48b2:	7f 93       	push	r23
    48b4:	6f 93       	push	r22
    48b6:	28 96       	adiw	r28, 0x08	; 8
    48b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    48ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    48bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    48be:	9f ad       	ldd	r25, Y+63	; 0x3f
    48c0:	28 97       	sbiw	r28, 0x08	; 8
    48c2:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    48c6:	25 e5       	ldi	r18, 0x55	; 85
    48c8:	35 e5       	ldi	r19, 0x55	; 85
    48ca:	45 e8       	ldi	r20, 0x85	; 133
    48cc:	59 e4       	ldi	r21, 0x49	; 73
    48ce:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    48d2:	9f 93       	push	r25
    48d4:	8f 93       	push	r24
    48d6:	7f 93       	push	r23
    48d8:	6f 93       	push	r22
    48da:	2c 96       	adiw	r28, 0x0c	; 12
    48dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    48de:	7d ad       	ldd	r23, Y+61	; 0x3d
    48e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    48e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    48e4:	2c 97       	sbiw	r28, 0x0c	; 12
    48e6:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    48ea:	25 e5       	ldi	r18, 0x55	; 85
    48ec:	35 e5       	ldi	r19, 0x55	; 85
    48ee:	45 e8       	ldi	r20, 0x85	; 133
    48f0:	59 e4       	ldi	r21, 0x49	; 73
    48f2:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    48f6:	9f 93       	push	r25
    48f8:	8f 93       	push	r24
    48fa:	7f 93       	push	r23
    48fc:	6f 93       	push	r22
    48fe:	60 96       	adiw	r28, 0x10	; 16
    4900:	6c ad       	ldd	r22, Y+60	; 0x3c
    4902:	7d ad       	ldd	r23, Y+61	; 0x3d
    4904:	8e ad       	ldd	r24, Y+62	; 0x3e
    4906:	9f ad       	ldd	r25, Y+63	; 0x3f
    4908:	60 97       	sbiw	r28, 0x10	; 16
    490a:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	30 e0       	ldi	r19, 0x00	; 0
    4912:	40 e8       	ldi	r20, 0x80	; 128
    4914:	57 e3       	ldi	r21, 0x37	; 55
    4916:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    491a:	9f 93       	push	r25
    491c:	8f 93       	push	r24
    491e:	7f 93       	push	r23
    4920:	6f 93       	push	r22
    4922:	64 96       	adiw	r28, 0x14	; 20
    4924:	6c ad       	ldd	r22, Y+60	; 0x3c
    4926:	7d ad       	ldd	r23, Y+61	; 0x3d
    4928:	8e ad       	ldd	r24, Y+62	; 0x3e
    492a:	9f ad       	ldd	r25, Y+63	; 0x3f
    492c:	64 97       	sbiw	r28, 0x14	; 20
    492e:	0e 94 f3 31 	call	0x63e6	; 0x63e6 <__floatsisf>
    4932:	20 e0       	ldi	r18, 0x00	; 0
    4934:	30 e0       	ldi	r19, 0x00	; 0
    4936:	40 e8       	ldi	r20, 0x80	; 128
    4938:	57 e3       	ldi	r21, 0x37	; 55
    493a:	0e 94 f1 32 	call	0x65e2	; 0x65e2 <__mulsf3>
    493e:	9f 93       	push	r25
    4940:	8f 93       	push	r24
    4942:	7f 93       	push	r23
    4944:	6f 93       	push	r22
    4946:	68 96       	adiw	r28, 0x18	; 24
    4948:	6c ad       	ldd	r22, Y+60	; 0x3c
    494a:	7d ad       	ldd	r23, Y+61	; 0x3d
    494c:	8e ad       	ldd	r24, Y+62	; 0x3e
    494e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4950:	68 97       	sbiw	r28, 0x18	; 24
    4952:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__floatunsisf>
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e4       	ldi	r19, 0x40	; 64
    495a:	4c e9       	ldi	r20, 0x9C	; 156
    495c:	55 e4       	ldi	r21, 0x45	; 69
    495e:	0e 94 43 31 	call	0x6286	; 0x6286 <__divsf3>
    4962:	9f 93       	push	r25
    4964:	8f 93       	push	r24
    4966:	7f 93       	push	r23
    4968:	6f 93       	push	r22
    496a:	8c e6       	ldi	r24, 0x6C	; 108
    496c:	96 e2       	ldi	r25, 0x26	; 38
    496e:	9f 93       	push	r25
    4970:	8f 93       	push	r24
    4972:	af 96       	adiw	r28, 0x2f	; 47
    4974:	ff ad       	ldd	r31, Y+63	; 0x3f
    4976:	af 97       	sbiw	r28, 0x2f	; 47
    4978:	ff 93       	push	r31
    497a:	ae 96       	adiw	r28, 0x2e	; 46
    497c:	2f ad       	ldd	r18, Y+63	; 0x3f
    497e:	ae 97       	sbiw	r28, 0x2e	; 46
    4980:	2f 93       	push	r18
    4982:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_EVA */
    4986:	cd bf       	out	0x3d, r28	; 61
    4988:	de bf       	out	0x3e, r29	; 62
    498a:	cd 57       	subi	r28, 0x7D	; 125
    498c:	df 4f       	sbci	r29, 0xFF	; 255
    498e:	cd bf       	out	0x3d, r28	; 61
    4990:	de bf       	out	0x3e, r29	; 62
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	1f 91       	pop	r17
    4998:	0f 91       	pop	r16
    499a:	ff 90       	pop	r15
    499c:	ef 90       	pop	r14
    499e:	df 90       	pop	r13
    49a0:	cf 90       	pop	r12
    49a2:	bf 90       	pop	r11
    49a4:	af 90       	pop	r10
    49a6:	9f 90       	pop	r9
    49a8:	8f 90       	pop	r8
    49aa:	7f 90       	pop	r7
    49ac:	6f 90       	pop	r6
    49ae:	5f 90       	pop	r5
    49b0:	4f 90       	pop	r4
    49b2:	3f 90       	pop	r3
    49b4:	2f 90       	pop	r2
    49b6:	08 95       	ret

000049b8 <PrintResetHeader>:


void PrintResetHeader(FILE *fp) {
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	d8 2f       	mov	r29, r24
    49be:	c9 2f       	mov	r28, r25
	
	fprintf(fp, "# HvA SECOM Motor driver board ");
    49c0:	28 2f       	mov	r18, r24
    49c2:	39 2f       	mov	r19, r25
    49c4:	4f e1       	ldi	r20, 0x1F	; 31
    49c6:	50 e0       	ldi	r21, 0x00	; 0
    49c8:	61 e0       	ldi	r22, 0x01	; 1
    49ca:	70 e0       	ldi	r23, 0x00	; 0
    49cc:	8e ee       	ldi	r24, 0xEE	; 238
    49ce:	96 e2       	ldi	r25, 0x26	; 38
    49d0:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
	PrintBoardType(fp);
    49d4:	8d 2f       	mov	r24, r29
    49d6:	9c 2f       	mov	r25, r28
    49d8:	0e 94 60 2f 	call	0x5ec0	; 0x5ec0 <PrintBoardType>
	fprintf(fp, "busID %d cpu ", GetBusID());
    49dc:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <GetBusID>
    49e0:	1f 92       	push	r1
    49e2:	8f 93       	push	r24
    49e4:	8e e0       	ldi	r24, 0x0E	; 14
    49e6:	97 e2       	ldi	r25, 0x27	; 39
    49e8:	9f 93       	push	r25
    49ea:	8f 93       	push	r24
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
	PrintProcessorID(fp);
    49f4:	8d 2f       	mov	r24, r29
    49f6:	9c 2f       	mov	r25, r28
    49f8:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <PrintProcessorID>
	fprintf(fp, "# code " __DATE__ " " __TIME__ "\r\n");
    49fc:	2d 2f       	mov	r18, r29
    49fe:	3c 2f       	mov	r19, r28
    4a00:	4d e1       	ldi	r20, 0x1D	; 29
    4a02:	50 e0       	ldi	r21, 0x00	; 0
    4a04:	61 e0       	ldi	r22, 0x01	; 1
    4a06:	70 e0       	ldi	r23, 0x00	; 0
    4a08:	8c e1       	ldi	r24, 0x1C	; 28
    4a0a:	97 e2       	ldi	r25, 0x27	; 39
    4a0c:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
	
} /* PrintResetHeader */
    4a10:	0f 90       	pop	r0
    4a12:	0f 90       	pop	r0
    4a14:	0f 90       	pop	r0
    4a16:	0f 90       	pop	r0
    4a18:	0f 90       	pop	r0
    4a1a:	0f 90       	pop	r0
    4a1c:	df 91       	pop	r29
    4a1e:	cf 91       	pop	r28
    4a20:	08 95       	ret

00004a22 <__vector_71>:
// 	}
	
} /* ISRReadADC_EVA */


ISR(ADCA_CH0_vect) {
    4a22:	1f 92       	push	r1
    4a24:	0f 92       	push	r0
    4a26:	0f b6       	in	r0, 0x3f	; 63
    4a28:	0f 92       	push	r0
    4a2a:	11 24       	eor	r1, r1
    4a2c:	0b b6       	in	r0, 0x3b	; 59
    4a2e:	0f 92       	push	r0
    4a30:	2f 92       	push	r2
    4a32:	3f 92       	push	r3
    4a34:	4f 92       	push	r4
    4a36:	5f 92       	push	r5
    4a38:	6f 92       	push	r6
    4a3a:	7f 92       	push	r7
    4a3c:	8f 92       	push	r8
    4a3e:	9f 92       	push	r9
    4a40:	af 92       	push	r10
    4a42:	bf 92       	push	r11
    4a44:	cf 92       	push	r12
    4a46:	df 92       	push	r13
    4a48:	ef 92       	push	r14
    4a4a:	ff 92       	push	r15
    4a4c:	0f 93       	push	r16
    4a4e:	1f 93       	push	r17
    4a50:	2f 93       	push	r18
    4a52:	3f 93       	push	r19
    4a54:	4f 93       	push	r20
    4a56:	5f 93       	push	r21
    4a58:	6f 93       	push	r22
    4a5a:	7f 93       	push	r23
    4a5c:	8f 93       	push	r24
    4a5e:	9f 93       	push	r25
    4a60:	af 93       	push	r26
    4a62:	bf 93       	push	r27
    4a64:	cf 93       	push	r28
    4a66:	df 93       	push	r29
    4a68:	ef 93       	push	r30
    4a6a:	ff 93       	push	r31

	static int32_t sCCPrevPulseInterval;

	int16_t spRawSample, driverTempSample, motorVoltageSample, motorCurrentSample, inVoltageSample, inCurrentSample;
	int32_t inPower, motorPower;
	uint8_t selCCPin = PORTC.IN & PIN2_bm, selCC2Pin = PORTC.IN & PIN5_bm, selFPPin = PORTC.IN & PIN4_bm, pwmEn = !(PORTC.IN & PIN1_bm), pwm = PORTC.IN & PIN6_bm;
    4a6c:	e0 e4       	ldi	r30, 0x40	; 64
    4a6e:	f6 e0       	ldi	r31, 0x06	; 6
    4a70:	d0 85       	ldd	r29, Z+8	; 0x08
    4a72:	d4 70       	andi	r29, 0x04	; 4
    4a74:	c0 85       	ldd	r28, Z+8	; 0x08
    4a76:	c0 72       	andi	r28, 0x20	; 32
    4a78:	80 85       	ldd	r24, Z+8	; 0x08
    4a7a:	80 71       	andi	r24, 0x10	; 16
    4a7c:	58 2e       	mov	r5, r24
    4a7e:	80 85       	ldd	r24, Z+8	; 0x08
    4a80:	82 70       	andi	r24, 0x02	; 2
    4a82:	38 2e       	mov	r3, r24
    4a84:	20 84       	ldd	r2, Z+8	; 0x08
	uint8_t curPWMCycles = TCC1.CNTL;
    4a86:	40 90 60 08 	lds	r4, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
	
	if(I_AM_EVA_L || I_AM_EVA_R)
    4a8a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4a8e:	80 73       	andi	r24, 0x30	; 48
    4a90:	80 31       	cpi	r24, 0x10	; 16
    4a92:	31 f0       	breq	.+12     	; 0x4aa0 <__vector_71+0x7e>
    4a94:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4a98:	80 73       	andi	r24, 0x30	; 48
    4a9a:	80 32       	cpi	r24, 0x20	; 32
    4a9c:	09 f0       	breq	.+2      	; 0x4aa0 <__vector_71+0x7e>
    4a9e:	a6 c0       	rjmp	.+332    	; 0x4bec <__vector_71+0x1ca>
} /* ISRReadADC_H2A */


static inline void ISRReadADC_EVA(void) {
	
	int16_t motorTempFront = ADCA.CH0RES, motorTempRear, angSample, angFSSample;
    4aa0:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    4aa4:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>

//	uint8_t selRegenPin = !(PORTC.IN & PIN5_bm);
	
	FILTER32(motorTempFront, sSensorData.adc.eva.motorTempFrontFiltered);
    4aa8:	e0 e6       	ldi	r30, 0x60	; 96
    4aaa:	f8 e2       	ldi	r31, 0x28	; 40
    4aac:	40 81       	ld	r20, Z
    4aae:	51 81       	ldd	r21, Z+1	; 0x01
    4ab0:	62 81       	ldd	r22, Z+2	; 0x02
    4ab2:	73 81       	ldd	r23, Z+3	; 0x03
    4ab4:	c5 2e       	mov	r12, r21
    4ab6:	d6 2e       	mov	r13, r22
    4ab8:	e7 2e       	mov	r14, r23
    4aba:	ff 24       	eor	r15, r15
    4abc:	e7 fc       	sbrc	r14, 7
    4abe:	fa 94       	dec	r15
    4ac0:	4c 19       	sub	r20, r12
    4ac2:	5d 09       	sbc	r21, r13
    4ac4:	6e 09       	sbc	r22, r14
    4ac6:	7f 09       	sbc	r23, r15
    4ac8:	09 2e       	mov	r0, r25
    4aca:	00 0c       	add	r0, r0
    4acc:	aa 0b       	sbc	r26, r26
    4ace:	bb 0b       	sbc	r27, r27
    4ad0:	ba 2f       	mov	r27, r26
    4ad2:	a9 2f       	mov	r26, r25
    4ad4:	98 2f       	mov	r25, r24
    4ad6:	88 27       	eor	r24, r24
    4ad8:	84 0f       	add	r24, r20
    4ada:	95 1f       	adc	r25, r21
    4adc:	a6 1f       	adc	r26, r22
    4ade:	b7 1f       	adc	r27, r23
    4ae0:	80 83       	st	Z, r24
    4ae2:	91 83       	std	Z+1, r25	; 0x01
    4ae4:	a2 83       	std	Z+2, r26	; 0x02
    4ae6:	b3 83       	std	Z+3, r27	; 0x03
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    4ae8:	e0 e4       	ldi	r30, 0x40	; 64
    4aea:	f2 e0       	ldi	r31, 0x02	; 2
    4aec:	83 a1       	ldd	r24, Z+35	; 0x23
    4aee:	80 ff       	sbrs	r24, 0
    4af0:	fd cf       	rjmp	.-6      	; 0x4aec <__vector_71+0xca>
	ADCB.CH0.INTFLAGS = 0x01;
    4af2:	e0 e4       	ldi	r30, 0x40	; 64
    4af4:	f2 e0       	ldi	r31, 0x02	; 2
    4af6:	81 e0       	ldi	r24, 0x01	; 1
    4af8:	83 a3       	std	Z+35, r24	; 0x23
	motorTempRear = ADCB.CH0RES;
    4afa:	80 89       	ldd	r24, Z+16	; 0x10
    4afc:	91 89       	ldd	r25, Z+17	; 0x11
	FILTER32(motorTempRear, sSensorData.adc.eva.motorTempRearFiltered);
    4afe:	e0 e6       	ldi	r30, 0x60	; 96
    4b00:	f8 e2       	ldi	r31, 0x28	; 40
    4b02:	44 81       	ldd	r20, Z+4	; 0x04
    4b04:	55 81       	ldd	r21, Z+5	; 0x05
    4b06:	66 81       	ldd	r22, Z+6	; 0x06
    4b08:	77 81       	ldd	r23, Z+7	; 0x07
    4b0a:	c5 2e       	mov	r12, r21
    4b0c:	d6 2e       	mov	r13, r22
    4b0e:	e7 2e       	mov	r14, r23
    4b10:	ff 24       	eor	r15, r15
    4b12:	e7 fc       	sbrc	r14, 7
    4b14:	fa 94       	dec	r15
    4b16:	4c 19       	sub	r20, r12
    4b18:	5d 09       	sbc	r21, r13
    4b1a:	6e 09       	sbc	r22, r14
    4b1c:	7f 09       	sbc	r23, r15
    4b1e:	09 2e       	mov	r0, r25
    4b20:	00 0c       	add	r0, r0
    4b22:	aa 0b       	sbc	r26, r26
    4b24:	bb 0b       	sbc	r27, r27
    4b26:	ba 2f       	mov	r27, r26
    4b28:	a9 2f       	mov	r26, r25
    4b2a:	98 2f       	mov	r25, r24
    4b2c:	88 27       	eor	r24, r24
    4b2e:	84 0f       	add	r24, r20
    4b30:	95 1f       	adc	r25, r21
    4b32:	a6 1f       	adc	r26, r22
    4b34:	b7 1f       	adc	r27, r23
    4b36:	84 83       	std	Z+4, r24	; 0x04
    4b38:	95 83       	std	Z+5, r25	; 0x05
    4b3a:	a6 83       	std	Z+6, r26	; 0x06
    4b3c:	b7 83       	std	Z+7, r27	; 0x07
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ;
    4b3e:	e0 e0       	ldi	r30, 0x00	; 0
    4b40:	f2 e0       	ldi	r31, 0x02	; 2
    4b42:	83 a5       	ldd	r24, Z+43	; 0x2b
    4b44:	80 ff       	sbrs	r24, 0
    4b46:	fd cf       	rjmp	.-6      	; 0x4b42 <__vector_71+0x120>
	ADCA.CH1.INTFLAGS = 0x01;
    4b48:	e0 e0       	ldi	r30, 0x00	; 0
    4b4a:	f2 e0       	ldi	r31, 0x02	; 2
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	83 a7       	std	Z+43, r24	; 0x2b
	angSample = ADCA.CH1RES;
    4b50:	82 89       	ldd	r24, Z+18	; 0x12
    4b52:	93 89       	ldd	r25, Z+19	; 0x13
	FILTER32(angSample, sSensorData.adc.eva.angSenseFiltered);
    4b54:	e0 e6       	ldi	r30, 0x60	; 96
    4b56:	f8 e2       	ldi	r31, 0x28	; 40
    4b58:	40 85       	ldd	r20, Z+8	; 0x08
    4b5a:	51 85       	ldd	r21, Z+9	; 0x09
    4b5c:	62 85       	ldd	r22, Z+10	; 0x0a
    4b5e:	73 85       	ldd	r23, Z+11	; 0x0b
    4b60:	c5 2e       	mov	r12, r21
    4b62:	d6 2e       	mov	r13, r22
    4b64:	e7 2e       	mov	r14, r23
    4b66:	ff 24       	eor	r15, r15
    4b68:	e7 fc       	sbrc	r14, 7
    4b6a:	fa 94       	dec	r15
    4b6c:	4c 19       	sub	r20, r12
    4b6e:	5d 09       	sbc	r21, r13
    4b70:	6e 09       	sbc	r22, r14
    4b72:	7f 09       	sbc	r23, r15
    4b74:	09 2e       	mov	r0, r25
    4b76:	00 0c       	add	r0, r0
    4b78:	aa 0b       	sbc	r26, r26
    4b7a:	bb 0b       	sbc	r27, r27
    4b7c:	ba 2f       	mov	r27, r26
    4b7e:	a9 2f       	mov	r26, r25
    4b80:	98 2f       	mov	r25, r24
    4b82:	88 27       	eor	r24, r24
    4b84:	84 0f       	add	r24, r20
    4b86:	95 1f       	adc	r25, r21
    4b88:	a6 1f       	adc	r26, r22
    4b8a:	b7 1f       	adc	r27, r23
    4b8c:	80 87       	std	Z+8, r24	; 0x08
    4b8e:	91 87       	std	Z+9, r25	; 0x09
    4b90:	a2 87       	std	Z+10, r26	; 0x0a
    4b92:	b3 87       	std	Z+11, r27	; 0x0b
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4b94:	e0 e4       	ldi	r30, 0x40	; 64
    4b96:	f2 e0       	ldi	r31, 0x02	; 2
    4b98:	83 a5       	ldd	r24, Z+43	; 0x2b
    4b9a:	80 ff       	sbrs	r24, 0
    4b9c:	fd cf       	rjmp	.-6      	; 0x4b98 <__vector_71+0x176>
	ADCB.CH1.INTFLAGS = 0x01;
    4b9e:	e0 e4       	ldi	r30, 0x40	; 64
    4ba0:	f2 e0       	ldi	r31, 0x02	; 2
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	83 a7       	std	Z+43, r24	; 0x2b
	angFSSample = ADCB.CH1RES;
    4ba6:	82 89       	ldd	r24, Z+18	; 0x12
    4ba8:	93 89       	ldd	r25, Z+19	; 0x13
	FILTER32(angFSSample, sSensorData.adc.eva.angFSFiltered);
    4baa:	e0 e6       	ldi	r30, 0x60	; 96
    4bac:	f8 e2       	ldi	r31, 0x28	; 40
    4bae:	44 85       	ldd	r20, Z+12	; 0x0c
    4bb0:	55 85       	ldd	r21, Z+13	; 0x0d
    4bb2:	66 85       	ldd	r22, Z+14	; 0x0e
    4bb4:	77 85       	ldd	r23, Z+15	; 0x0f
    4bb6:	c5 2e       	mov	r12, r21
    4bb8:	d6 2e       	mov	r13, r22
    4bba:	e7 2e       	mov	r14, r23
    4bbc:	ff 24       	eor	r15, r15
    4bbe:	e7 fc       	sbrc	r14, 7
    4bc0:	fa 94       	dec	r15
    4bc2:	4c 19       	sub	r20, r12
    4bc4:	5d 09       	sbc	r21, r13
    4bc6:	6e 09       	sbc	r22, r14
    4bc8:	7f 09       	sbc	r23, r15
    4bca:	09 2e       	mov	r0, r25
    4bcc:	00 0c       	add	r0, r0
    4bce:	aa 0b       	sbc	r26, r26
    4bd0:	bb 0b       	sbc	r27, r27
    4bd2:	ba 2f       	mov	r27, r26
    4bd4:	a9 2f       	mov	r26, r25
    4bd6:	98 2f       	mov	r25, r24
    4bd8:	88 27       	eor	r24, r24
    4bda:	84 0f       	add	r24, r20
    4bdc:	95 1f       	adc	r25, r21
    4bde:	a6 1f       	adc	r26, r22
    4be0:	b7 1f       	adc	r27, r23
    4be2:	84 87       	std	Z+12, r24	; 0x0c
    4be4:	95 87       	std	Z+13, r25	; 0x0d
    4be6:	a6 87       	std	Z+14, r26	; 0x0e
    4be8:	b7 87       	std	Z+15, r27	; 0x0f
    4bea:	55 c1       	rjmp	.+682    	; 0x4e96 <__vector_71+0x474>
	else { PORTE.OUTSET = ~(x) & CC_PINS;  PORTE.OUTCLR = CC_TURBO_BOOST | ((x) & CC_PINS); } \
} while(0)

static inline void ISRReadADC_H2A(void) {

	int16_t fcVoltageSample = ADCA.CH0RES - sCal.fcVoltageOffset, fcCurrentSample, scVoltageSample, scCurrentSample;
    4bec:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    4bf0:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
    4bf4:	80 91 e5 29 	lds	r24, 0x29E5	; 0x8029e5 <sCal>
    4bf8:	90 91 e6 29 	lds	r25, 0x29E6	; 0x8029e6 <sCal+0x1>
	int32_t fcPower, scPower;

	uint8_t idealDiodePin = PORTE.IN & PIN4_bm;
    4bfc:	40 91 88 06 	lds	r20, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    4c00:	40 71       	andi	r20, 0x10	; 16
    4c02:	64 2e       	mov	r6, r20
	
	uint8_t selRegenPin = !(PORTC.IN & PIN5_bm);
    4c04:	80 90 48 06 	lds	r8, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    4c08:	85 fa       	bst	r8, 5
    4c0a:	44 27       	eor	r20, r20
    4c0c:	40 f9       	bld	r20, 0
    4c0e:	51 e0       	ldi	r21, 0x01	; 1
    4c10:	74 2e       	mov	r7, r20
    4c12:	75 26       	eor	r7, r21
	
	FILTER32(fcVoltageSample, sSensorData.adc.h2a.fcVoltageFiltered);
    4c14:	e0 e6       	ldi	r30, 0x60	; 96
    4c16:	f8 e2       	ldi	r31, 0x28	; 40
    4c18:	c0 80       	ld	r12, Z
    4c1a:	d1 80       	ldd	r13, Z+1	; 0x01
    4c1c:	e2 80       	ldd	r14, Z+2	; 0x02
    4c1e:	f3 80       	ldd	r15, Z+3	; 0x03
    4c20:	28 1b       	sub	r18, r24
    4c22:	39 0b       	sbc	r19, r25
    4c24:	03 2e       	mov	r0, r19
    4c26:	00 0c       	add	r0, r0
    4c28:	44 0b       	sbc	r20, r20
    4c2a:	55 0b       	sbc	r21, r21
    4c2c:	bb 27       	eor	r27, r27
    4c2e:	f7 fc       	sbrc	r15, 7
    4c30:	ba 95       	dec	r27
    4c32:	af 2d       	mov	r26, r15
    4c34:	9e 2d       	mov	r25, r14
    4c36:	8d 2d       	mov	r24, r13
    4c38:	c8 1a       	sub	r12, r24
    4c3a:	d9 0a       	sbc	r13, r25
    4c3c:	ea 0a       	sbc	r14, r26
    4c3e:	fb 0a       	sbc	r15, r27
    4c40:	b4 2f       	mov	r27, r20
    4c42:	a3 2f       	mov	r26, r19
    4c44:	92 2f       	mov	r25, r18
    4c46:	88 27       	eor	r24, r24
    4c48:	c8 0e       	add	r12, r24
    4c4a:	d9 1e       	adc	r13, r25
    4c4c:	ea 1e       	adc	r14, r26
    4c4e:	fb 1e       	adc	r15, r27
    4c50:	c0 82       	st	Z, r12
    4c52:	d1 82       	std	Z+1, r13	; 0x01
    4c54:	e2 82       	std	Z+2, r14	; 0x02
    4c56:	f3 82       	std	Z+3, r15	; 0x03
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    4c58:	e0 e4       	ldi	r30, 0x40	; 64
    4c5a:	f2 e0       	ldi	r31, 0x02	; 2
    4c5c:	83 a1       	ldd	r24, Z+35	; 0x23
    4c5e:	80 ff       	sbrs	r24, 0
    4c60:	fd cf       	rjmp	.-6      	; 0x4c5c <__vector_71+0x23a>
	ADCB.CH0.INTFLAGS = 0x01;
    4c62:	e0 e4       	ldi	r30, 0x40	; 64
    4c64:	f2 e0       	ldi	r31, 0x02	; 2
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	83 a3       	std	Z+35, r24	; 0x23
	fcCurrentSample = ADCB.CH0RES - sCal.fcCurrentOffset;
    4c6a:	60 89       	ldd	r22, Z+16	; 0x10
    4c6c:	71 89       	ldd	r23, Z+17	; 0x11
    4c6e:	80 91 e7 29 	lds	r24, 0x29E7	; 0x8029e7 <sCal+0x2>
    4c72:	90 91 e8 29 	lds	r25, 0x29E8	; 0x8029e8 <sCal+0x3>
	FILTER32(fcCurrentSample, sSensorData.adc.h2a.fcCurrentFiltered);
    4c76:	e0 e6       	ldi	r30, 0x60	; 96
    4c78:	f8 e2       	ldi	r31, 0x28	; 40
    4c7a:	c4 80       	ldd	r12, Z+4	; 0x04
    4c7c:	d5 80       	ldd	r13, Z+5	; 0x05
    4c7e:	e6 80       	ldd	r14, Z+6	; 0x06
    4c80:	f7 80       	ldd	r15, Z+7	; 0x07
    4c82:	68 1b       	sub	r22, r24
    4c84:	79 0b       	sbc	r23, r25
    4c86:	07 2e       	mov	r0, r23
    4c88:	00 0c       	add	r0, r0
    4c8a:	88 0b       	sbc	r24, r24
    4c8c:	99 0b       	sbc	r25, r25
    4c8e:	8d 2c       	mov	r8, r13
    4c90:	9e 2c       	mov	r9, r14
    4c92:	af 2c       	mov	r10, r15
    4c94:	bb 24       	eor	r11, r11
    4c96:	a7 fc       	sbrc	r10, 7
    4c98:	ba 94       	dec	r11
    4c9a:	c8 18       	sub	r12, r8
    4c9c:	d9 08       	sbc	r13, r9
    4c9e:	ea 08       	sbc	r14, r10
    4ca0:	fb 08       	sbc	r15, r11
    4ca2:	88 24       	eor	r8, r8
    4ca4:	96 2e       	mov	r9, r22
    4ca6:	a7 2e       	mov	r10, r23
    4ca8:	b8 2e       	mov	r11, r24
    4caa:	c8 0c       	add	r12, r8
    4cac:	d9 1c       	adc	r13, r9
    4cae:	ea 1c       	adc	r14, r10
    4cb0:	fb 1c       	adc	r15, r11
    4cb2:	c4 82       	std	Z+4, r12	; 0x04
    4cb4:	d5 82       	std	Z+5, r13	; 0x05
    4cb6:	e6 82       	std	Z+6, r14	; 0x06
    4cb8:	f7 82       	std	Z+7, r15	; 0x07
	
	fcPower = ((int32_t) fcVoltageSample) * ((int32_t) fcCurrentSample);
    4cba:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
	FILTER32PWR(fcPower, sSensorData.adc.h2a.fcPowerFiltered);
    4cbe:	c0 88       	ldd	r12, Z+16	; 0x10
    4cc0:	d1 88       	ldd	r13, Z+17	; 0x11
    4cc2:	e2 88       	ldd	r14, Z+18	; 0x12
    4cc4:	f3 88       	ldd	r15, Z+19	; 0x13
    4cc6:	33 27       	eor	r19, r19
    4cc8:	f7 fc       	sbrc	r15, 7
    4cca:	3a 95       	dec	r19
    4ccc:	2f 2d       	mov	r18, r15
    4cce:	1e 2d       	mov	r17, r14
    4cd0:	0d 2d       	mov	r16, r13
    4cd2:	c0 1a       	sub	r12, r16
    4cd4:	d1 0a       	sbc	r13, r17
    4cd6:	e2 0a       	sbc	r14, r18
    4cd8:	f3 0a       	sbc	r15, r19
    4cda:	c6 0e       	add	r12, r22
    4cdc:	d7 1e       	adc	r13, r23
    4cde:	e8 1e       	adc	r14, r24
    4ce0:	f9 1e       	adc	r15, r25
    4ce2:	c0 8a       	std	Z+16, r12	; 0x10
    4ce4:	d1 8a       	std	Z+17, r13	; 0x11
    4ce6:	e2 8a       	std	Z+18, r14	; 0x12
    4ce8:	f3 8a       	std	Z+19, r15	; 0x13
	sSensorData.adc.h2a.fcEnergy += fcPower;
    4cea:	6b 01       	movw	r12, r22
    4cec:	7c 01       	movw	r14, r24
    4cee:	ff 0c       	add	r15, r15
    4cf0:	cc 08       	sbc	r12, r12
    4cf2:	dc 2c       	mov	r13, r12
    4cf4:	76 01       	movw	r14, r12
    4cf6:	26 2f       	mov	r18, r22
    4cf8:	37 2f       	mov	r19, r23
    4cfa:	48 2f       	mov	r20, r24
    4cfc:	59 2f       	mov	r21, r25
    4cfe:	6c 2d       	mov	r22, r12
    4d00:	7c 2d       	mov	r23, r12
    4d02:	8c 2d       	mov	r24, r12
    4d04:	9c 2d       	mov	r25, r12
    4d06:	a0 8c       	ldd	r10, Z+24	; 0x18
    4d08:	b1 8c       	ldd	r11, Z+25	; 0x19
    4d0a:	c2 8c       	ldd	r12, Z+26	; 0x1a
    4d0c:	d3 8c       	ldd	r13, Z+27	; 0x1b
    4d0e:	e4 8c       	ldd	r14, Z+28	; 0x1c
    4d10:	f5 8c       	ldd	r15, Z+29	; 0x1d
    4d12:	06 8d       	ldd	r16, Z+30	; 0x1e
    4d14:	17 8d       	ldd	r17, Z+31	; 0x1f
    4d16:	0e 94 c6 33 	call	0x678c	; 0x678c <__adddi3>
    4d1a:	20 8f       	std	Z+24, r18	; 0x18
    4d1c:	31 8f       	std	Z+25, r19	; 0x19
    4d1e:	42 8f       	std	Z+26, r20	; 0x1a
    4d20:	53 8f       	std	Z+27, r21	; 0x1b
    4d22:	64 8f       	std	Z+28, r22	; 0x1c
    4d24:	75 8f       	std	Z+29, r23	; 0x1d
    4d26:	86 8f       	std	Z+30, r24	; 0x1e
    4d28:	97 8f       	std	Z+31, r25	; 0x1f
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ; /* Should also not be necessary, by this time the conversion should be long over */
    4d2a:	e0 e0       	ldi	r30, 0x00	; 0
    4d2c:	f2 e0       	ldi	r31, 0x02	; 2
    4d2e:	83 a5       	ldd	r24, Z+43	; 0x2b
    4d30:	80 ff       	sbrs	r24, 0
    4d32:	fd cf       	rjmp	.-6      	; 0x4d2e <__vector_71+0x30c>
	ADCA.CH1.INTFLAGS = 0x01;
    4d34:	e0 e0       	ldi	r30, 0x00	; 0
    4d36:	f2 e0       	ldi	r31, 0x02	; 2
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	83 a7       	std	Z+43, r24	; 0x2b
	scVoltageSample = ADCA.CH1RES - sCal.scVoltageOffset;
    4d3c:	22 89       	ldd	r18, Z+18	; 0x12
    4d3e:	33 89       	ldd	r19, Z+19	; 0x13
    4d40:	80 91 e9 29 	lds	r24, 0x29E9	; 0x8029e9 <sCal+0x4>
    4d44:	90 91 ea 29 	lds	r25, 0x29EA	; 0x8029ea <sCal+0x5>
	FILTER32(scVoltageSample, sSensorData.adc.h2a.scVoltageFiltered);
    4d48:	e0 e6       	ldi	r30, 0x60	; 96
    4d4a:	f8 e2       	ldi	r31, 0x28	; 40
    4d4c:	c0 84       	ldd	r12, Z+8	; 0x08
    4d4e:	d1 84       	ldd	r13, Z+9	; 0x09
    4d50:	e2 84       	ldd	r14, Z+10	; 0x0a
    4d52:	f3 84       	ldd	r15, Z+11	; 0x0b
    4d54:	28 1b       	sub	r18, r24
    4d56:	39 0b       	sbc	r19, r25
    4d58:	03 2e       	mov	r0, r19
    4d5a:	00 0c       	add	r0, r0
    4d5c:	44 0b       	sbc	r20, r20
    4d5e:	55 0b       	sbc	r21, r21
    4d60:	bb 27       	eor	r27, r27
    4d62:	f7 fc       	sbrc	r15, 7
    4d64:	ba 95       	dec	r27
    4d66:	af 2d       	mov	r26, r15
    4d68:	9e 2d       	mov	r25, r14
    4d6a:	8d 2d       	mov	r24, r13
    4d6c:	c8 1a       	sub	r12, r24
    4d6e:	d9 0a       	sbc	r13, r25
    4d70:	ea 0a       	sbc	r14, r26
    4d72:	fb 0a       	sbc	r15, r27
    4d74:	b4 2f       	mov	r27, r20
    4d76:	a3 2f       	mov	r26, r19
    4d78:	92 2f       	mov	r25, r18
    4d7a:	88 27       	eor	r24, r24
    4d7c:	c8 0e       	add	r12, r24
    4d7e:	d9 1e       	adc	r13, r25
    4d80:	ea 1e       	adc	r14, r26
    4d82:	fb 1e       	adc	r15, r27
    4d84:	c0 86       	std	Z+8, r12	; 0x08
    4d86:	d1 86       	std	Z+9, r13	; 0x09
    4d88:	e2 86       	std	Z+10, r14	; 0x0a
    4d8a:	f3 86       	std	Z+11, r15	; 0x0b
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4d8c:	e0 e4       	ldi	r30, 0x40	; 64
    4d8e:	f2 e0       	ldi	r31, 0x02	; 2
    4d90:	83 a5       	ldd	r24, Z+43	; 0x2b
    4d92:	80 ff       	sbrs	r24, 0
    4d94:	fd cf       	rjmp	.-6      	; 0x4d90 <__vector_71+0x36e>
	ADCB.CH1.INTFLAGS = 0x01;
    4d96:	e0 e4       	ldi	r30, 0x40	; 64
    4d98:	f2 e0       	ldi	r31, 0x02	; 2
    4d9a:	81 e0       	ldi	r24, 0x01	; 1
    4d9c:	83 a7       	std	Z+43, r24	; 0x2b
	scCurrentSample = ADCB.CH1RES - sCal.scCurrentOffset;
    4d9e:	62 89       	ldd	r22, Z+18	; 0x12
    4da0:	73 89       	ldd	r23, Z+19	; 0x13
    4da2:	80 91 eb 29 	lds	r24, 0x29EB	; 0x8029eb <sCal+0x6>
    4da6:	90 91 ec 29 	lds	r25, 0x29EC	; 0x8029ec <sCal+0x7>
	FILTER32(scCurrentSample, sSensorData.adc.h2a.scCurrentFiltered);
    4daa:	e0 e6       	ldi	r30, 0x60	; 96
    4dac:	f8 e2       	ldi	r31, 0x28	; 40
    4dae:	c4 84       	ldd	r12, Z+12	; 0x0c
    4db0:	d5 84       	ldd	r13, Z+13	; 0x0d
    4db2:	e6 84       	ldd	r14, Z+14	; 0x0e
    4db4:	f7 84       	ldd	r15, Z+15	; 0x0f
    4db6:	68 1b       	sub	r22, r24
    4db8:	79 0b       	sbc	r23, r25
    4dba:	07 2e       	mov	r0, r23
    4dbc:	00 0c       	add	r0, r0
    4dbe:	88 0b       	sbc	r24, r24
    4dc0:	99 0b       	sbc	r25, r25
    4dc2:	8d 2c       	mov	r8, r13
    4dc4:	9e 2c       	mov	r9, r14
    4dc6:	af 2c       	mov	r10, r15
    4dc8:	bb 24       	eor	r11, r11
    4dca:	a7 fc       	sbrc	r10, 7
    4dcc:	ba 94       	dec	r11
    4dce:	c8 18       	sub	r12, r8
    4dd0:	d9 08       	sbc	r13, r9
    4dd2:	ea 08       	sbc	r14, r10
    4dd4:	fb 08       	sbc	r15, r11
    4dd6:	88 24       	eor	r8, r8
    4dd8:	96 2e       	mov	r9, r22
    4dda:	a7 2e       	mov	r10, r23
    4ddc:	b8 2e       	mov	r11, r24
    4dde:	c8 0c       	add	r12, r8
    4de0:	d9 1c       	adc	r13, r9
    4de2:	ea 1c       	adc	r14, r10
    4de4:	fb 1c       	adc	r15, r11
    4de6:	c4 86       	std	Z+12, r12	; 0x0c
    4de8:	d5 86       	std	Z+13, r13	; 0x0d
    4dea:	e6 86       	std	Z+14, r14	; 0x0e
    4dec:	f7 86       	std	Z+15, r15	; 0x0f
	
if(sSensorData.adc.h2a.booststate != selRegenPin) {
    4dee:	e0 a5       	ldd	r30, Z+40	; 0x28
    4df0:	7e 16       	cp	r7, r30
    4df2:	39 f0       	breq	.+14     	; 0x4e02 <__vector_71+0x3e0>
 	SET_CC_DRIVE(BOOST_LEVEL);
    4df4:	e0 e8       	ldi	r30, 0x80	; 128
    4df6:	f6 e0       	ldi	r31, 0x06	; 6
    4df8:	a7 e0       	ldi	r26, 0x07	; 7
    4dfa:	a5 83       	std	Z+5, r26	; 0x05
    4dfc:	a8 e0       	ldi	r26, 0x08	; 8
    4dfe:	a6 83       	std	Z+6, r26	; 0x06
 	PORTE.OUTSET = PIN3_bm;
    4e00:	a5 83       	std	Z+5, r26	; 0x05
}

	scPower = ((int32_t) scVoltageSample) * ((int32_t) scCurrentSample);
    4e02:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
	FILTER32PWR(scPower, sSensorData.adc.h2a.scPowerFiltered);
    4e06:	e0 e6       	ldi	r30, 0x60	; 96
    4e08:	f8 e2       	ldi	r31, 0x28	; 40
    4e0a:	c4 88       	ldd	r12, Z+20	; 0x14
    4e0c:	d5 88       	ldd	r13, Z+21	; 0x15
    4e0e:	e6 88       	ldd	r14, Z+22	; 0x16
    4e10:	f7 88       	ldd	r15, Z+23	; 0x17
    4e12:	33 27       	eor	r19, r19
    4e14:	f7 fc       	sbrc	r15, 7
    4e16:	3a 95       	dec	r19
    4e18:	2f 2d       	mov	r18, r15
    4e1a:	1e 2d       	mov	r17, r14
    4e1c:	0d 2d       	mov	r16, r13
    4e1e:	c0 1a       	sub	r12, r16
    4e20:	d1 0a       	sbc	r13, r17
    4e22:	e2 0a       	sbc	r14, r18
    4e24:	f3 0a       	sbc	r15, r19
    4e26:	c6 0e       	add	r12, r22
    4e28:	d7 1e       	adc	r13, r23
    4e2a:	e8 1e       	adc	r14, r24
    4e2c:	f9 1e       	adc	r15, r25
    4e2e:	c4 8a       	std	Z+20, r12	; 0x14
    4e30:	d5 8a       	std	Z+21, r13	; 0x15
    4e32:	e6 8a       	std	Z+22, r14	; 0x16
    4e34:	f7 8a       	std	Z+23, r15	; 0x17
	sSensorData.adc.h2a.scEnergy += scPower;
    4e36:	6b 01       	movw	r12, r22
    4e38:	7c 01       	movw	r14, r24
    4e3a:	ff 0c       	add	r15, r15
    4e3c:	cc 08       	sbc	r12, r12
    4e3e:	dc 2c       	mov	r13, r12
    4e40:	76 01       	movw	r14, r12
    4e42:	26 2f       	mov	r18, r22
    4e44:	37 2f       	mov	r19, r23
    4e46:	48 2f       	mov	r20, r24
    4e48:	59 2f       	mov	r21, r25
    4e4a:	6c 2d       	mov	r22, r12
    4e4c:	7c 2d       	mov	r23, r12
    4e4e:	8c 2d       	mov	r24, r12
    4e50:	9c 2d       	mov	r25, r12
    4e52:	a0 a0       	ldd	r10, Z+32	; 0x20
    4e54:	b1 a0       	ldd	r11, Z+33	; 0x21
    4e56:	c2 a0       	ldd	r12, Z+34	; 0x22
    4e58:	d3 a0       	ldd	r13, Z+35	; 0x23
    4e5a:	e4 a0       	ldd	r14, Z+36	; 0x24
    4e5c:	f5 a0       	ldd	r15, Z+37	; 0x25
    4e5e:	06 a1       	ldd	r16, Z+38	; 0x26
    4e60:	17 a1       	ldd	r17, Z+39	; 0x27
    4e62:	0e 94 c6 33 	call	0x678c	; 0x678c <__adddi3>
    4e66:	20 a3       	std	Z+32, r18	; 0x20
    4e68:	31 a3       	std	Z+33, r19	; 0x21
    4e6a:	42 a3       	std	Z+34, r20	; 0x22
    4e6c:	53 a3       	std	Z+35, r21	; 0x23
    4e6e:	64 a3       	std	Z+36, r22	; 0x24
    4e70:	75 a3       	std	Z+37, r23	; 0x25
    4e72:	86 a3       	std	Z+38, r24	; 0x26
    4e74:	97 a3       	std	Z+39, r25	; 0x27
	
	if(sSensorData.adc.h2a.idealDiodeState != idealDiodePin) {
    4e76:	81 a5       	ldd	r24, Z+41	; 0x29
    4e78:	68 16       	cp	r6, r24
    4e7a:	69 f0       	breq	.+26     	; 0x4e96 <__vector_71+0x474>
		sSensorData.adc.h2a.idealDiodeState = idealDiodePin;
    4e7c:	61 a6       	std	Z+41, r6	; 0x29
		sSensorData.adc.h2a.idealDiodeTimestamp = sSessionCycleCount;
    4e7e:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    4e82:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    4e86:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    4e8a:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    4e8e:	82 a7       	std	Z+42, r24	; 0x2a
    4e90:	93 a7       	std	Z+43, r25	; 0x2b
    4e92:	a4 a7       	std	Z+44, r26	; 0x2c
    4e94:	b5 a7       	std	Z+45, r27	; 0x2d
	if(I_AM_EVA_L || I_AM_EVA_R)
		ISRReadADC_EVA();
	else
		ISRReadADC_H2A();
	
	while(!(ADCA.CH2.INTFLAGS & 0x01)) ;
    4e96:	e0 e0       	ldi	r30, 0x00	; 0
    4e98:	f2 e0       	ldi	r31, 0x02	; 2
    4e9a:	83 a9       	ldd	r24, Z+51	; 0x33
    4e9c:	80 ff       	sbrs	r24, 0
    4e9e:	fd cf       	rjmp	.-6      	; 0x4e9a <__vector_71+0x478>
	ADCA.CH2.INTFLAGS = 0x01;
    4ea0:	e0 e0       	ldi	r30, 0x00	; 0
    4ea2:	f2 e0       	ldi	r31, 0x02	; 2
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	83 ab       	std	Z+51, r24	; 0x33
	spRawSample = ADCA.CH2RES;
    4ea8:	84 89       	ldd	r24, Z+20	; 0x14
    4eaa:	95 89       	ldd	r25, Z+21	; 0x15
	if(spRawSample < SPEEDSENSOR_MIDWAY_VAL) {
    4eac:	87 3d       	cpi	r24, 0xD7	; 215
    4eae:	92 40       	sbci	r25, 0x02	; 2
    4eb0:	94 f4       	brge	.+36     	; 0x4ed6 <__vector_71+0x4b4>
		sSpeedSensorPosDeglitchCounter = 0;
    4eb2:	10 92 5f 28 	sts	0x285F, r1	; 0x80285f <sSpeedSensorPosDeglitchCounter.4880>
		if(sSpeedSensorPreviousState && ++sSpeedSensorNegDeglitchCounter >= SPEEDSENSOR_DEGLITCH)
    4eb6:	80 91 5e 28 	lds	r24, 0x285E	; 0x80285e <sSpeedSensorPreviousState.4879>
    4eba:	88 23       	and	r24, r24
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <__vector_71+0x49e>
    4ebe:	67 c0       	rjmp	.+206    	; 0x4f8e <__vector_71+0x56c>
    4ec0:	80 91 5d 28 	lds	r24, 0x285D	; 0x80285d <sSpeedSensorNegDeglitchCounter.4881>
    4ec4:	8f 5f       	subi	r24, 0xFF	; 255
    4ec6:	80 93 5d 28 	sts	0x285D, r24	; 0x80285d <sSpeedSensorNegDeglitchCounter.4881>
    4eca:	85 30       	cpi	r24, 0x05	; 5
    4ecc:	08 f4       	brcc	.+2      	; 0x4ed0 <__vector_71+0x4ae>
    4ece:	5f c0       	rjmp	.+190    	; 0x4f8e <__vector_71+0x56c>
			sSpeedSensorPreviousState = 0;
    4ed0:	10 92 5e 28 	sts	0x285E, r1	; 0x80285e <sSpeedSensorPreviousState.4879>
    4ed4:	5c c0       	rjmp	.+184    	; 0x4f8e <__vector_71+0x56c>
	}
	else {
		sSpeedSensorNegDeglitchCounter = 0;
    4ed6:	10 92 5d 28 	sts	0x285D, r1	; 0x80285d <sSpeedSensorNegDeglitchCounter.4881>
		if(!sSpeedSensorPreviousState && ++sSpeedSensorPosDeglitchCounter >= SPEEDSENSOR_DEGLITCH) {
    4eda:	80 91 5e 28 	lds	r24, 0x285E	; 0x80285e <sSpeedSensorPreviousState.4879>
    4ede:	81 11       	cpse	r24, r1
    4ee0:	56 c0       	rjmp	.+172    	; 0x4f8e <__vector_71+0x56c>
    4ee2:	80 91 5f 28 	lds	r24, 0x285F	; 0x80285f <sSpeedSensorPosDeglitchCounter.4880>
    4ee6:	8f 5f       	subi	r24, 0xFF	; 255
    4ee8:	80 93 5f 28 	sts	0x285F, r24	; 0x80285f <sSpeedSensorPosDeglitchCounter.4880>
    4eec:	85 30       	cpi	r24, 0x05	; 5
    4eee:	08 f4       	brcc	.+2      	; 0x4ef2 <__vector_71+0x4d0>
    4ef0:	4e c0       	rjmp	.+156    	; 0x4f8e <__vector_71+0x56c>
			sSpeedSensorPreviousState = 1;
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	80 93 5e 28 	sts	0x285E, r24	; 0x80285e <sSpeedSensorPreviousState.4879>
			sSensorData.speedSensorPositivePulsesSeen++;
    4ef8:	ee eb       	ldi	r30, 0xBE	; 190
    4efa:	f8 e2       	ldi	r31, 0x28	; 40
    4efc:	80 81       	ld	r24, Z
    4efe:	91 81       	ldd	r25, Z+1	; 0x01
    4f00:	a2 81       	ldd	r26, Z+2	; 0x02
    4f02:	b3 81       	ldd	r27, Z+3	; 0x03
    4f04:	01 96       	adiw	r24, 0x01	; 1
    4f06:	a1 1d       	adc	r26, r1
    4f08:	b1 1d       	adc	r27, r1
    4f0a:	80 83       	st	Z, r24
    4f0c:	91 83       	std	Z+1, r25	; 0x01
    4f0e:	a2 83       	std	Z+2, r26	; 0x02
    4f10:	b3 83       	std	Z+3, r27	; 0x03
			if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp < SPEEDSENSOR_MAX_INTERVAL)
    4f12:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    4f16:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    4f1a:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    4f1e:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    4f22:	40 91 59 28 	lds	r20, 0x2859	; 0x802859 <sSpeedSensorPreviousValidEdgeTimestamp.4878>
    4f26:	50 91 5a 28 	lds	r21, 0x285A	; 0x80285a <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x1>
    4f2a:	60 91 5b 28 	lds	r22, 0x285B	; 0x80285b <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x2>
    4f2e:	70 91 5c 28 	lds	r23, 0x285C	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x3>
    4f32:	84 1b       	sub	r24, r20
    4f34:	95 0b       	sbc	r25, r21
    4f36:	a6 0b       	sbc	r26, r22
    4f38:	b7 0b       	sbc	r27, r23
    4f3a:	82 38       	cpi	r24, 0x82	; 130
    4f3c:	96 40       	sbci	r25, 0x06	; 6
    4f3e:	a1 05       	cpc	r26, r1
    4f40:	b1 05       	cpc	r27, r1
    4f42:	78 f4       	brcc	.+30     	; 0x4f62 <__vector_71+0x540>
				sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    4f44:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    4f48:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    4f4c:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    4f50:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    4f54:	84 1b       	sub	r24, r20
    4f56:	95 0b       	sbc	r25, r21
    4f58:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4877>
    4f5c:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4877+0x1>
    4f60:	06 c0       	rjmp	.+12     	; 0x4f6e <__vector_71+0x54c>
			else
				sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    4f62:	82 e8       	ldi	r24, 0x82	; 130
    4f64:	96 e0       	ldi	r25, 0x06	; 6
    4f66:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4877>
    4f6a:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4877+0x1>
			sSpeedSensorPreviousValidEdgeTimestamp = sSessionCycleCount;
    4f6e:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    4f72:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    4f76:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    4f7a:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    4f7e:	80 93 59 28 	sts	0x2859, r24	; 0x802859 <sSpeedSensorPreviousValidEdgeTimestamp.4878>
    4f82:	90 93 5a 28 	sts	0x285A, r25	; 0x80285a <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x1>
    4f86:	a0 93 5b 28 	sts	0x285B, r26	; 0x80285b <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x2>
    4f8a:	b0 93 5c 28 	sts	0x285C, r27	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x3>
		}
	}
	
	if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) SPEEDSENSOR_MAX_INTERVAL)
    4f8e:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    4f92:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    4f96:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    4f9a:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    4f9e:	40 91 59 28 	lds	r20, 0x2859	; 0x802859 <sSpeedSensorPreviousValidEdgeTimestamp.4878>
    4fa2:	50 91 5a 28 	lds	r21, 0x285A	; 0x80285a <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x1>
    4fa6:	60 91 5b 28 	lds	r22, 0x285B	; 0x80285b <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x2>
    4faa:	70 91 5c 28 	lds	r23, 0x285C	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4878+0x3>
    4fae:	84 1b       	sub	r24, r20
    4fb0:	95 0b       	sbc	r25, r21
    4fb2:	a6 0b       	sbc	r26, r22
    4fb4:	b7 0b       	sbc	r27, r23
    4fb6:	83 38       	cpi	r24, 0x83	; 131
    4fb8:	96 40       	sbci	r25, 0x06	; 6
    4fba:	a1 05       	cpc	r26, r1
    4fbc:	b1 05       	cpc	r27, r1
    4fbe:	38 f0       	brcs	.+14     	; 0x4fce <__vector_71+0x5ac>
		sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    4fc0:	82 e8       	ldi	r24, 0x82	; 130
    4fc2:	96 e0       	ldi	r25, 0x06	; 6
    4fc4:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4877>
    4fc8:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4877+0x1>
    4fcc:	27 c0       	rjmp	.+78     	; 0x501c <__vector_71+0x5fa>
	else if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) sSpeedSensorLastValidInterval)
    4fce:	c0 90 e3 28 	lds	r12, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    4fd2:	d0 90 e4 28 	lds	r13, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    4fd6:	e0 90 e5 28 	lds	r14, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    4fda:	f0 90 e6 28 	lds	r15, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    4fde:	c4 1a       	sub	r12, r20
    4fe0:	d5 0a       	sbc	r13, r21
    4fe2:	e6 0a       	sbc	r14, r22
    4fe4:	f7 0a       	sbc	r15, r23
    4fe6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sSpeedSensorLastValidInterval.4877>
    4fea:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <sSpeedSensorLastValidInterval.4877+0x1>
    4fee:	09 2e       	mov	r0, r25
    4ff0:	00 0c       	add	r0, r0
    4ff2:	aa 0b       	sbc	r26, r26
    4ff4:	bb 0b       	sbc	r27, r27
    4ff6:	8c 15       	cp	r24, r12
    4ff8:	9d 05       	cpc	r25, r13
    4ffa:	ae 05       	cpc	r26, r14
    4ffc:	bf 05       	cpc	r27, r15
    4ffe:	70 f4       	brcc	.+28     	; 0x501c <__vector_71+0x5fa>
		sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    5000:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    5004:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    5008:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    500c:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    5010:	84 1b       	sub	r24, r20
    5012:	95 0b       	sbc	r25, r21
    5014:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4877>
    5018:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4877+0x1>
		
	FILTER32(sSpeedSensorLastValidInterval, sSensorData.speedSensorPulseInterval);
    501c:	ea eb       	ldi	r30, 0xBA	; 186
    501e:	f8 e2       	ldi	r31, 0x28	; 40
    5020:	80 81       	ld	r24, Z
    5022:	91 81       	ldd	r25, Z+1	; 0x01
    5024:	a2 81       	ldd	r26, Z+2	; 0x02
    5026:	b3 81       	ldd	r27, Z+3	; 0x03
    5028:	49 2f       	mov	r20, r25
    502a:	5a 2f       	mov	r21, r26
    502c:	6b 2f       	mov	r22, r27
    502e:	77 27       	eor	r23, r23
    5030:	67 fd       	sbrc	r22, 7
    5032:	7a 95       	dec	r23
    5034:	8c 01       	movw	r16, r24
    5036:	9d 01       	movw	r18, r26
    5038:	04 1b       	sub	r16, r20
    503a:	15 0b       	sbc	r17, r21
    503c:	26 0b       	sbc	r18, r22
    503e:	37 0b       	sbc	r19, r23
    5040:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sSpeedSensorLastValidInterval.4877>
    5044:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <sSpeedSensorLastValidInterval.4877+0x1>
    5048:	09 2e       	mov	r0, r25
    504a:	00 0c       	add	r0, r0
    504c:	aa 0b       	sbc	r26, r26
    504e:	bb 0b       	sbc	r27, r27
    5050:	ba 2f       	mov	r27, r26
    5052:	a9 2f       	mov	r26, r25
    5054:	98 2f       	mov	r25, r24
    5056:	88 27       	eor	r24, r24
    5058:	80 0f       	add	r24, r16
    505a:	91 1f       	adc	r25, r17
    505c:	a2 1f       	adc	r26, r18
    505e:	b3 1f       	adc	r27, r19
    5060:	80 83       	st	Z, r24
    5062:	91 83       	std	Z+1, r25	; 0x01
    5064:	a2 83       	std	Z+2, r26	; 0x02
    5066:	b3 83       	std	Z+3, r27	; 0x03

	while(!(ADCB.CH2.INTFLAGS & 0x01)) ;
    5068:	e0 e4       	ldi	r30, 0x40	; 64
    506a:	f2 e0       	ldi	r31, 0x02	; 2
    506c:	83 a9       	ldd	r24, Z+51	; 0x33
    506e:	80 ff       	sbrs	r24, 0
    5070:	fd cf       	rjmp	.-6      	; 0x506c <__vector_71+0x64a>
	ADCB.CH2.INTFLAGS = 0x01;
    5072:	e0 e4       	ldi	r30, 0x40	; 64
    5074:	f2 e0       	ldi	r31, 0x02	; 2
    5076:	81 e0       	ldi	r24, 0x01	; 1
    5078:	83 ab       	std	Z+51, r24	; 0x33
	driverTempSample = ADCB.CH2RES;
    507a:	84 89       	ldd	r24, Z+20	; 0x14
    507c:	95 89       	ldd	r25, Z+21	; 0x15
	FILTER32(driverTempSample, sSensorData.driverTempFiltered);
    507e:	e0 e6       	ldi	r30, 0x60	; 96
    5080:	f8 e2       	ldi	r31, 0x28	; 40
    5082:	46 a5       	ldd	r20, Z+46	; 0x2e
    5084:	57 a5       	ldd	r21, Z+47	; 0x2f
    5086:	60 a9       	ldd	r22, Z+48	; 0x30
    5088:	71 a9       	ldd	r23, Z+49	; 0x31
    508a:	c5 2e       	mov	r12, r21
    508c:	d6 2e       	mov	r13, r22
    508e:	e7 2e       	mov	r14, r23
    5090:	ff 24       	eor	r15, r15
    5092:	e7 fc       	sbrc	r14, 7
    5094:	fa 94       	dec	r15
    5096:	4c 19       	sub	r20, r12
    5098:	5d 09       	sbc	r21, r13
    509a:	6e 09       	sbc	r22, r14
    509c:	7f 09       	sbc	r23, r15
    509e:	09 2e       	mov	r0, r25
    50a0:	00 0c       	add	r0, r0
    50a2:	aa 0b       	sbc	r26, r26
    50a4:	bb 0b       	sbc	r27, r27
    50a6:	ba 2f       	mov	r27, r26
    50a8:	a9 2f       	mov	r26, r25
    50aa:	98 2f       	mov	r25, r24
    50ac:	88 27       	eor	r24, r24
    50ae:	84 0f       	add	r24, r20
    50b0:	95 1f       	adc	r25, r21
    50b2:	a6 1f       	adc	r26, r22
    50b4:	b7 1f       	adc	r27, r23
    50b6:	86 a7       	std	Z+46, r24	; 0x2e
    50b8:	97 a7       	std	Z+47, r25	; 0x2f
    50ba:	a0 ab       	std	Z+48, r26	; 0x30
    50bc:	b1 ab       	std	Z+49, r27	; 0x31
	
	while(!(ADCA.CH3.INTFLAGS & 0x01)) ;
    50be:	e0 e0       	ldi	r30, 0x00	; 0
    50c0:	f2 e0       	ldi	r31, 0x02	; 2
    50c2:	83 ad       	ldd	r24, Z+59	; 0x3b
    50c4:	80 ff       	sbrs	r24, 0
    50c6:	fd cf       	rjmp	.-6      	; 0x50c2 <__vector_71+0x6a0>
	ADCA.CH3.INTFLAGS = 0x01;
    50c8:	81 e0       	ldi	r24, 0x01	; 1
    50ca:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <__TEXT_REGION_LENGTH__+0x70023b>
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
    50ce:	e0 e4       	ldi	r30, 0x40	; 64
    50d0:	f2 e0       	ldi	r31, 0x02	; 2
    50d2:	83 ad       	ldd	r24, Z+59	; 0x3b
    50d4:	80 ff       	sbrs	r24, 0
    50d6:	fd cf       	rjmp	.-6      	; 0x50d2 <__vector_71+0x6b0>
	ADCB.CH3.INTFLAGS = 0x01;
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <__TEXT_REGION_LENGTH__+0x70027b>
	if(sSamplingVin) {
    50de:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <sSamplingVin.4873>
    50e2:	88 23       	and	r24, r24
    50e4:	09 f4       	brne	.+2      	; 0x50e8 <__vector_71+0x6c6>
    50e6:	c1 c0       	rjmp	.+386    	; 0x526a <__vector_71+0x848>
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
    50e8:	61 2c       	mov	r6, r1
    50ea:	68 94       	set
    50ec:	77 24       	eor	r7, r7
    50ee:	71 f8       	bld	r7, 1
    50f0:	d3 01       	movw	r26, r6
    50f2:	56 96       	adiw	r26, 0x16	; 22
    50f4:	2d 91       	ld	r18, X+
    50f6:	3c 91       	ld	r19, X
    50f8:	57 97       	sbiw	r26, 0x17	; 23
    50fa:	a5 ee       	ldi	r26, 0xE5	; 229
    50fc:	b9 e2       	ldi	r27, 0x29	; 41
    50fe:	5c 96       	adiw	r26, 0x1c	; 28
    5100:	8d 91       	ld	r24, X+
    5102:	9c 91       	ld	r25, X
    5104:	5d 97       	sbiw	r26, 0x1d	; 29
		FILTER32(inVoltageSample, sSensorData.inVoltageFiltered);
    5106:	e0 e6       	ldi	r30, 0x60	; 96
    5108:	f8 e2       	ldi	r31, 0x28	; 40
    510a:	c2 ac       	ldd	r12, Z+58	; 0x3a
    510c:	d3 ac       	ldd	r13, Z+59	; 0x3b
    510e:	e4 ac       	ldd	r14, Z+60	; 0x3c
    5110:	f5 ac       	ldd	r15, Z+61	; 0x3d
    5112:	28 1b       	sub	r18, r24
    5114:	39 0b       	sbc	r19, r25
    5116:	03 2e       	mov	r0, r19
    5118:	00 0c       	add	r0, r0
    511a:	44 0b       	sbc	r20, r20
    511c:	55 0b       	sbc	r21, r21
    511e:	8d 2c       	mov	r8, r13
    5120:	9e 2c       	mov	r9, r14
    5122:	af 2c       	mov	r10, r15
    5124:	bb 24       	eor	r11, r11
    5126:	a7 fc       	sbrc	r10, 7
    5128:	ba 94       	dec	r11
    512a:	c8 18       	sub	r12, r8
    512c:	d9 08       	sbc	r13, r9
    512e:	ea 08       	sbc	r14, r10
    5130:	fb 08       	sbc	r15, r11
    5132:	88 24       	eor	r8, r8
    5134:	92 2e       	mov	r9, r18
    5136:	a3 2e       	mov	r10, r19
    5138:	b4 2e       	mov	r11, r20
    513a:	c8 0c       	add	r12, r8
    513c:	d9 1c       	adc	r13, r9
    513e:	ea 1c       	adc	r14, r10
    5140:	fb 1c       	adc	r15, r11
    5142:	c2 ae       	std	Z+58, r12	; 0x3a
    5144:	d3 ae       	std	Z+59, r13	; 0x3b
    5146:	e4 ae       	std	Z+60, r14	; 0x3c
    5148:	f5 ae       	std	Z+61, r15	; 0x3d
		inCurrentSample = ADCB.CH3RES - sCal.inCurrentOffset;
    514a:	e0 e4       	ldi	r30, 0x40	; 64
    514c:	f2 e0       	ldi	r31, 0x02	; 2
    514e:	66 89       	ldd	r22, Z+22	; 0x16
    5150:	77 89       	ldd	r23, Z+23	; 0x17
    5152:	5e 96       	adiw	r26, 0x1e	; 30
    5154:	8d 91       	ld	r24, X+
    5156:	9c 91       	ld	r25, X
    5158:	5f 97       	sbiw	r26, 0x1f	; 31
		FILTER32(inCurrentSample, sSensorData.inCurrentFiltered);
    515a:	ae e9       	ldi	r26, 0x9E	; 158
    515c:	b8 e2       	ldi	r27, 0x28	; 40
    515e:	cd 90       	ld	r12, X+
    5160:	dd 90       	ld	r13, X+
    5162:	ed 90       	ld	r14, X+
    5164:	fc 90       	ld	r15, X
    5166:	13 97       	sbiw	r26, 0x03	; 3
    5168:	68 1b       	sub	r22, r24
    516a:	79 0b       	sbc	r23, r25
    516c:	07 2e       	mov	r0, r23
    516e:	00 0c       	add	r0, r0
    5170:	88 0b       	sbc	r24, r24
    5172:	99 0b       	sbc	r25, r25
    5174:	8d 2c       	mov	r8, r13
    5176:	9e 2c       	mov	r9, r14
    5178:	af 2c       	mov	r10, r15
    517a:	bb 24       	eor	r11, r11
    517c:	a7 fc       	sbrc	r10, 7
    517e:	ba 94       	dec	r11
    5180:	c8 18       	sub	r12, r8
    5182:	d9 08       	sbc	r13, r9
    5184:	ea 08       	sbc	r14, r10
    5186:	fb 08       	sbc	r15, r11
    5188:	88 24       	eor	r8, r8
    518a:	96 2e       	mov	r9, r22
    518c:	a7 2e       	mov	r10, r23
    518e:	b8 2e       	mov	r11, r24
    5190:	c8 0c       	add	r12, r8
    5192:	d9 1c       	adc	r13, r9
    5194:	ea 1c       	adc	r14, r10
    5196:	fb 1c       	adc	r15, r11
    5198:	cd 92       	st	X+, r12
    519a:	dd 92       	st	X+, r13
    519c:	ed 92       	st	X+, r14
    519e:	fc 92       	st	X, r15
    51a0:	13 97       	sbiw	r26, 0x03	; 3
		inPower = ((int32_t) inVoltageSample) * ((int32_t) inCurrentSample);
    51a2:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
		FILTER32PWR(inPower, sSensorData.inPowerFiltered);
    51a6:	a6 ea       	ldi	r26, 0xA6	; 166
    51a8:	b8 e2       	ldi	r27, 0x28	; 40
    51aa:	cd 90       	ld	r12, X+
    51ac:	dd 90       	ld	r13, X+
    51ae:	ed 90       	ld	r14, X+
    51b0:	fc 90       	ld	r15, X
    51b2:	13 97       	sbiw	r26, 0x03	; 3
    51b4:	33 27       	eor	r19, r19
    51b6:	f7 fc       	sbrc	r15, 7
    51b8:	3a 95       	dec	r19
    51ba:	2f 2d       	mov	r18, r15
    51bc:	1e 2d       	mov	r17, r14
    51be:	0d 2d       	mov	r16, r13
    51c0:	c0 1a       	sub	r12, r16
    51c2:	d1 0a       	sbc	r13, r17
    51c4:	e2 0a       	sbc	r14, r18
    51c6:	f3 0a       	sbc	r15, r19
    51c8:	c6 0e       	add	r12, r22
    51ca:	d7 1e       	adc	r13, r23
    51cc:	e8 1e       	adc	r14, r24
    51ce:	f9 1e       	adc	r15, r25
    51d0:	cd 92       	st	X+, r12
    51d2:	dd 92       	st	X+, r13
    51d4:	ed 92       	st	X+, r14
    51d6:	fc 92       	st	X, r15
    51d8:	13 97       	sbiw	r26, 0x03	; 3
		sSensorData.inEnergy +=  2 * inPower;
    51da:	a2 eb       	ldi	r26, 0xB2	; 178
    51dc:	b8 e2       	ldi	r27, 0x28	; 40
    51de:	66 0f       	add	r22, r22
    51e0:	77 1f       	adc	r23, r23
    51e2:	88 1f       	adc	r24, r24
    51e4:	99 1f       	adc	r25, r25
    51e6:	6b 01       	movw	r12, r22
    51e8:	7c 01       	movw	r14, r24
    51ea:	ff 0c       	add	r15, r15
    51ec:	cc 08       	sbc	r12, r12
    51ee:	dc 2c       	mov	r13, r12
    51f0:	76 01       	movw	r14, r12
    51f2:	26 2f       	mov	r18, r22
    51f4:	37 2f       	mov	r19, r23
    51f6:	48 2f       	mov	r20, r24
    51f8:	59 2f       	mov	r21, r25
    51fa:	6c 2d       	mov	r22, r12
    51fc:	7c 2d       	mov	r23, r12
    51fe:	8c 2d       	mov	r24, r12
    5200:	9c 2d       	mov	r25, r12
    5202:	ac 90       	ld	r10, X
    5204:	11 96       	adiw	r26, 0x01	; 1
    5206:	bc 90       	ld	r11, X
    5208:	11 97       	sbiw	r26, 0x01	; 1
    520a:	12 96       	adiw	r26, 0x02	; 2
    520c:	cc 90       	ld	r12, X
    520e:	12 97       	sbiw	r26, 0x02	; 2
    5210:	13 96       	adiw	r26, 0x03	; 3
    5212:	dc 90       	ld	r13, X
    5214:	13 97       	sbiw	r26, 0x03	; 3
    5216:	14 96       	adiw	r26, 0x04	; 4
    5218:	ec 90       	ld	r14, X
    521a:	14 97       	sbiw	r26, 0x04	; 4
    521c:	15 96       	adiw	r26, 0x05	; 5
    521e:	fc 90       	ld	r15, X
    5220:	15 97       	sbiw	r26, 0x05	; 5
    5222:	16 96       	adiw	r26, 0x06	; 6
    5224:	0c 91       	ld	r16, X
    5226:	16 97       	sbiw	r26, 0x06	; 6
    5228:	17 96       	adiw	r26, 0x07	; 7
    522a:	1c 91       	ld	r17, X
    522c:	17 97       	sbiw	r26, 0x07	; 7
    522e:	0e 94 c6 33 	call	0x678c	; 0x678c <__adddi3>
    5232:	2c 93       	st	X, r18
    5234:	11 96       	adiw	r26, 0x01	; 1
    5236:	3c 93       	st	X, r19
    5238:	11 97       	sbiw	r26, 0x01	; 1
    523a:	12 96       	adiw	r26, 0x02	; 2
    523c:	4c 93       	st	X, r20
    523e:	12 97       	sbiw	r26, 0x02	; 2
    5240:	13 96       	adiw	r26, 0x03	; 3
    5242:	5c 93       	st	X, r21
    5244:	13 97       	sbiw	r26, 0x03	; 3
    5246:	14 96       	adiw	r26, 0x04	; 4
    5248:	6c 93       	st	X, r22
    524a:	14 97       	sbiw	r26, 0x04	; 4
    524c:	15 96       	adiw	r26, 0x05	; 5
    524e:	7c 93       	st	X, r23
    5250:	15 97       	sbiw	r26, 0x05	; 5
    5252:	16 96       	adiw	r26, 0x06	; 6
    5254:	8c 93       	st	X, r24
    5256:	16 97       	sbiw	r26, 0x06	; 6
    5258:	17 96       	adiw	r26, 0x07	; 7
    525a:	9c 93       	st	X, r25
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN12_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_VMOTOR on PB4 vs V33/2 on PA1 */
    525c:	81 e6       	ldi	r24, 0x61	; 97
    525e:	d3 01       	movw	r26, r6
    5260:	d9 96       	adiw	r26, 0x39	; 57
    5262:	8c 93       	st	X, r24
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_IMOTOR on PB5 vs V33/2 on PB1 */
    5264:	89 e2       	ldi	r24, 0x29	; 41
    5266:	81 af       	std	Z+57, r24	; 0x39
    5268:	a0 c0       	rjmp	.+320    	; 0x53aa <__vector_71+0x988>
	}
	else {
		motorVoltageSample = ADCA.CH3RES - sCal.motorVoltageOffset;
    526a:	61 2c       	mov	r6, r1
    526c:	68 94       	set
    526e:	77 24       	eor	r7, r7
    5270:	71 f8       	bld	r7, 1
    5272:	f3 01       	movw	r30, r6
    5274:	26 89       	ldd	r18, Z+22	; 0x16
    5276:	37 89       	ldd	r19, Z+23	; 0x17
    5278:	a5 ee       	ldi	r26, 0xE5	; 229
    527a:	b9 e2       	ldi	r27, 0x29	; 41
    527c:	58 96       	adiw	r26, 0x18	; 24
    527e:	8d 91       	ld	r24, X+
    5280:	9c 91       	ld	r25, X
    5282:	59 97       	sbiw	r26, 0x19	; 25
		FILTER32(motorVoltageSample, sSensorData.motorVoltageFiltered);	
    5284:	e0 e6       	ldi	r30, 0x60	; 96
    5286:	f8 e2       	ldi	r31, 0x28	; 40
    5288:	c2 a8       	ldd	r12, Z+50	; 0x32
    528a:	d3 a8       	ldd	r13, Z+51	; 0x33
    528c:	e4 a8       	ldd	r14, Z+52	; 0x34
    528e:	f5 a8       	ldd	r15, Z+53	; 0x35
    5290:	28 1b       	sub	r18, r24
    5292:	39 0b       	sbc	r19, r25
    5294:	03 2e       	mov	r0, r19
    5296:	00 0c       	add	r0, r0
    5298:	44 0b       	sbc	r20, r20
    529a:	55 0b       	sbc	r21, r21
    529c:	8d 2c       	mov	r8, r13
    529e:	9e 2c       	mov	r9, r14
    52a0:	af 2c       	mov	r10, r15
    52a2:	bb 24       	eor	r11, r11
    52a4:	a7 fc       	sbrc	r10, 7
    52a6:	ba 94       	dec	r11
    52a8:	c8 18       	sub	r12, r8
    52aa:	d9 08       	sbc	r13, r9
    52ac:	ea 08       	sbc	r14, r10
    52ae:	fb 08       	sbc	r15, r11
    52b0:	88 24       	eor	r8, r8
    52b2:	92 2e       	mov	r9, r18
    52b4:	a3 2e       	mov	r10, r19
    52b6:	b4 2e       	mov	r11, r20
    52b8:	c8 0c       	add	r12, r8
    52ba:	d9 1c       	adc	r13, r9
    52bc:	ea 1c       	adc	r14, r10
    52be:	fb 1c       	adc	r15, r11
    52c0:	c2 aa       	std	Z+50, r12	; 0x32
    52c2:	d3 aa       	std	Z+51, r13	; 0x33
    52c4:	e4 aa       	std	Z+52, r14	; 0x34
    52c6:	f5 aa       	std	Z+53, r15	; 0x35
		motorCurrentSample = ADCB.CH3RES - sCal.motorCurrentOffset;
    52c8:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <__TEXT_REGION_LENGTH__+0x700256>
    52cc:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <__TEXT_REGION_LENGTH__+0x700257>
    52d0:	5a 96       	adiw	r26, 0x1a	; 26
    52d2:	8d 91       	ld	r24, X+
    52d4:	9c 91       	ld	r25, X
    52d6:	5b 97       	sbiw	r26, 0x1b	; 27
		FILTER32(motorCurrentSample, sSensorData.motorCurrentFiltered);
    52d8:	c6 a8       	ldd	r12, Z+54	; 0x36
    52da:	d7 a8       	ldd	r13, Z+55	; 0x37
    52dc:	e0 ac       	ldd	r14, Z+56	; 0x38
    52de:	f1 ac       	ldd	r15, Z+57	; 0x39
    52e0:	68 1b       	sub	r22, r24
    52e2:	79 0b       	sbc	r23, r25
    52e4:	07 2e       	mov	r0, r23
    52e6:	00 0c       	add	r0, r0
    52e8:	88 0b       	sbc	r24, r24
    52ea:	99 0b       	sbc	r25, r25
    52ec:	8d 2c       	mov	r8, r13
    52ee:	9e 2c       	mov	r9, r14
    52f0:	af 2c       	mov	r10, r15
    52f2:	bb 24       	eor	r11, r11
    52f4:	a7 fc       	sbrc	r10, 7
    52f6:	ba 94       	dec	r11
    52f8:	c8 18       	sub	r12, r8
    52fa:	d9 08       	sbc	r13, r9
    52fc:	ea 08       	sbc	r14, r10
    52fe:	fb 08       	sbc	r15, r11
    5300:	88 24       	eor	r8, r8
    5302:	96 2e       	mov	r9, r22
    5304:	a7 2e       	mov	r10, r23
    5306:	b8 2e       	mov	r11, r24
    5308:	c8 0c       	add	r12, r8
    530a:	d9 1c       	adc	r13, r9
    530c:	ea 1c       	adc	r14, r10
    530e:	fb 1c       	adc	r15, r11
    5310:	c6 aa       	std	Z+54, r12	; 0x36
    5312:	d7 aa       	std	Z+55, r13	; 0x37
    5314:	e0 ae       	std	Z+56, r14	; 0x38
    5316:	f1 ae       	std	Z+57, r15	; 0x39
		motorPower = ((int32_t) motorVoltageSample) * ((int32_t) motorCurrentSample);
    5318:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
		FILTER32PWR(motorPower, sSensorData.motorPowerFiltered);
    531c:	e2 ea       	ldi	r30, 0xA2	; 162
    531e:	f8 e2       	ldi	r31, 0x28	; 40
    5320:	c0 80       	ld	r12, Z
    5322:	d1 80       	ldd	r13, Z+1	; 0x01
    5324:	e2 80       	ldd	r14, Z+2	; 0x02
    5326:	f3 80       	ldd	r15, Z+3	; 0x03
    5328:	33 27       	eor	r19, r19
    532a:	f7 fc       	sbrc	r15, 7
    532c:	3a 95       	dec	r19
    532e:	2f 2d       	mov	r18, r15
    5330:	1e 2d       	mov	r17, r14
    5332:	0d 2d       	mov	r16, r13
    5334:	c0 1a       	sub	r12, r16
    5336:	d1 0a       	sbc	r13, r17
    5338:	e2 0a       	sbc	r14, r18
    533a:	f3 0a       	sbc	r15, r19
    533c:	c6 0e       	add	r12, r22
    533e:	d7 1e       	adc	r13, r23
    5340:	e8 1e       	adc	r14, r24
    5342:	f9 1e       	adc	r15, r25
    5344:	c0 82       	st	Z, r12
    5346:	d1 82       	std	Z+1, r13	; 0x01
    5348:	e2 82       	std	Z+2, r14	; 0x02
    534a:	f3 82       	std	Z+3, r15	; 0x03
		sSensorData.motorEnergy += 2 * motorPower;
    534c:	ea ea       	ldi	r30, 0xAA	; 170
    534e:	f8 e2       	ldi	r31, 0x28	; 40
    5350:	dc 01       	movw	r26, r24
    5352:	cb 01       	movw	r24, r22
    5354:	88 0f       	add	r24, r24
    5356:	99 1f       	adc	r25, r25
    5358:	aa 1f       	adc	r26, r26
    535a:	bb 1f       	adc	r27, r27
    535c:	6c 01       	movw	r12, r24
    535e:	7d 01       	movw	r14, r26
    5360:	ff 0c       	add	r15, r15
    5362:	cc 08       	sbc	r12, r12
    5364:	dc 2c       	mov	r13, r12
    5366:	76 01       	movw	r14, r12
    5368:	28 2f       	mov	r18, r24
    536a:	39 2f       	mov	r19, r25
    536c:	4a 2f       	mov	r20, r26
    536e:	5b 2f       	mov	r21, r27
    5370:	6c 2d       	mov	r22, r12
    5372:	7c 2d       	mov	r23, r12
    5374:	8c 2d       	mov	r24, r12
    5376:	9c 2d       	mov	r25, r12
    5378:	a0 80       	ld	r10, Z
    537a:	b1 80       	ldd	r11, Z+1	; 0x01
    537c:	c2 80       	ldd	r12, Z+2	; 0x02
    537e:	d3 80       	ldd	r13, Z+3	; 0x03
    5380:	e4 80       	ldd	r14, Z+4	; 0x04
    5382:	f5 80       	ldd	r15, Z+5	; 0x05
    5384:	06 81       	ldd	r16, Z+6	; 0x06
    5386:	17 81       	ldd	r17, Z+7	; 0x07
    5388:	0e 94 c6 33 	call	0x678c	; 0x678c <__adddi3>
    538c:	20 83       	st	Z, r18
    538e:	31 83       	std	Z+1, r19	; 0x01
    5390:	42 83       	std	Z+2, r20	; 0x02
    5392:	53 83       	std	Z+3, r21	; 0x03
    5394:	64 83       	std	Z+4, r22	; 0x04
    5396:	75 83       	std	Z+5, r23	; 0x05
    5398:	86 83       	std	Z+6, r24	; 0x06
    539a:	97 83       	std	Z+7, r25	; 0x07
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN11_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_Vin on PB3 vs V33/2 on PA1 */
    539c:	89 e5       	ldi	r24, 0x59	; 89
    539e:	d3 01       	movw	r26, r6
    53a0:	d9 96       	adiw	r26, 0x39	; 57
    53a2:	8c 93       	st	X, r24
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure Iin on PB7 vs V33/2 on PB1 */
    53a4:	89 e3       	ldi	r24, 0x39	; 57
    53a6:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__TEXT_REGION_LENGTH__+0x700279>
	}
	sSamplingVin = !sSamplingVin;
    53aa:	81 e0       	ldi	r24, 0x01	; 1
    53ac:	90 91 58 28 	lds	r25, 0x2858	; 0x802858 <sSamplingVin.4873>
    53b0:	91 11       	cpse	r25, r1
    53b2:	80 e0       	ldi	r24, 0x00	; 0
    53b4:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <sSamplingVin.4873>

	/* PWM frequency and duty cycle */
	if(pwmEn) {
    53b8:	31 10       	cpse	r3, r1
    53ba:	2e c0       	rjmp	.+92     	; 0x5418 <__vector_71+0x9f6>
		sSensorData.pwmDutyCycle -= sSensorData.pwmDutyCycle >> 8;
    53bc:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <sSensorData+0x73>
    53c0:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <sSensorData+0x74>
    53c4:	29 2f       	mov	r18, r25
    53c6:	33 27       	eor	r19, r19
    53c8:	82 1b       	sub	r24, r18
    53ca:	93 0b       	sbc	r25, r19
		if(pwm)
    53cc:	26 fc       	sbrc	r2, 6
    53ce:	05 c0       	rjmp	.+10     	; 0x53da <__vector_71+0x9b8>
	}
	sSamplingVin = !sSamplingVin;

	/* PWM frequency and duty cycle */
	if(pwmEn) {
		sSensorData.pwmDutyCycle -= sSensorData.pwmDutyCycle >> 8;
    53d0:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <sSensorData+0x73>
    53d4:	90 93 d4 28 	sts	0x28D4, r25	; 0x8028d4 <sSensorData+0x74>
    53d8:	06 c0       	rjmp	.+12     	; 0x53e6 <__vector_71+0x9c4>
		if(pwm)
			sSensorData.pwmDutyCycle += PWM_DC_FS;
    53da:	81 50       	subi	r24, 0x01	; 1
    53dc:	9f 4f       	sbci	r25, 0xFF	; 255
    53de:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <sSensorData+0x73>
    53e2:	90 93 d4 28 	sts	0x28D4, r25	; 0x8028d4 <sSensorData+0x74>
		sSensorData.pwmFrequency -= sSensorData.pwmFrequency >> 8;
    53e6:	e1 ed       	ldi	r30, 0xD1	; 209
    53e8:	f8 e2       	ldi	r31, 0x28	; 40
    53ea:	20 81       	ld	r18, Z
    53ec:	31 81       	ldd	r19, Z+1	; 0x01
		sSensorData.pwmFrequency += (curPWMCycles - sPrevPWMCycles) << PWM_FREQ_FILTER_SHIFT;
    53ee:	84 2d       	mov	r24, r4
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	40 91 57 28 	lds	r20, 0x2857	; 0x802857 <sPrevPWMCycles.4874>
    53f6:	84 1b       	sub	r24, r20
    53f8:	91 09       	sbc	r25, r1
    53fa:	88 0f       	add	r24, r24
    53fc:	99 1f       	adc	r25, r25
    53fe:	88 0f       	add	r24, r24
    5400:	99 1f       	adc	r25, r25
    5402:	88 0f       	add	r24, r24
    5404:	99 1f       	adc	r25, r25
    5406:	43 2f       	mov	r20, r19
    5408:	55 27       	eor	r21, r21
    540a:	24 1b       	sub	r18, r20
    540c:	35 0b       	sbc	r19, r21
    540e:	82 0f       	add	r24, r18
    5410:	93 1f       	adc	r25, r19
    5412:	80 83       	st	Z, r24
    5414:	91 83       	std	Z+1, r25	; 0x01
    5416:	08 c0       	rjmp	.+16     	; 0x5428 <__vector_71+0xa06>
	}
	else {
		sSensorData.pwmDutyCycle = 0;
    5418:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <sSensorData+0x73>
    541c:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <sSensorData+0x74>
		sSensorData.pwmFrequency = 0;
    5420:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <sSensorData+0x71>
    5424:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <sSensorData+0x72>
	}
	sPrevPWMCycles = curPWMCycles;
    5428:	40 92 57 28 	sts	0x2857, r4	; 0x802857 <sPrevPWMCycles.4874>
	
	/* Pin states */
	if(sSensorData.selFPState != selFPPin) {
    542c:	80 91 c2 28 	lds	r24, 0x28C2	; 0x8028c2 <sSensorData+0x62>
    5430:	58 16       	cp	r5, r24
    5432:	91 f0       	breq	.+36     	; 0x5458 <__vector_71+0xa36>
		sSensorData.selFPState = selFPPin;
    5434:	50 92 c2 28 	sts	0x28C2, r5	; 0x8028c2 <sSensorData+0x62>
		sSensorData.selFPTimestamp = sSessionCycleCount;
    5438:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    543c:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    5440:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    5444:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    5448:	80 93 c5 28 	sts	0x28C5, r24	; 0x8028c5 <sSensorData+0x65>
    544c:	90 93 c6 28 	sts	0x28C6, r25	; 0x8028c6 <sSensorData+0x66>
    5450:	a0 93 c7 28 	sts	0x28C7, r26	; 0x8028c7 <sSensorData+0x67>
    5454:	b0 93 c8 28 	sts	0x28C8, r27	; 0x8028c8 <sSensorData+0x68>
	}
	
	if(sSensorData.selCCState != selCCPin) {
    5458:	80 91 c3 28 	lds	r24, 0x28C3	; 0x8028c3 <sSensorData+0x63>
    545c:	d8 17       	cp	r29, r24
    545e:	09 f4       	brne	.+2      	; 0x5462 <__vector_71+0xa40>
    5460:	50 c0       	rjmp	.+160    	; 0x5502 <__vector_71+0xae0>
		sSensorData.selCCState = selCCPin;
    5462:	d0 93 c3 28 	sts	0x28C3, r29	; 0x8028c3 <sSensorData+0x63>
		sSensorData.selCCTimestamp = sSessionCycleCount;
    5466:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    546a:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    546e:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    5472:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    5476:	80 93 c9 28 	sts	0x28C9, r24	; 0x8028c9 <sSensorData+0x69>
    547a:	90 93 ca 28 	sts	0x28CA, r25	; 0x8028ca <sSensorData+0x6a>
    547e:	a0 93 cb 28 	sts	0x28CB, r26	; 0x8028cb <sSensorData+0x6b>
    5482:	b0 93 cc 28 	sts	0x28CC, r27	; 0x8028cc <sSensorData+0x6c>
		/* Did CC just get enabled? */
		if(!selCCPin && sSensorData.speedSensorPulseInterval < (((int32_t) CC_MAX_INTERVAL) << 16)) {
    5486:	d1 11       	cpse	r29, r1
    5488:	35 c0       	rjmp	.+106    	; 0x54f4 <__vector_71+0xad2>
    548a:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <sSensorData+0x5a>
    548e:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <sSensorData+0x5b>
    5492:	a0 91 bc 28 	lds	r26, 0x28BC	; 0x8028bc <sSensorData+0x5c>
    5496:	b0 91 bd 28 	lds	r27, 0x28BD	; 0x8028bd <sSensorData+0x5d>
    549a:	00 97       	sbiw	r24, 0x00	; 0
    549c:	e0 ed       	ldi	r30, 0xD0	; 208
    549e:	ae 07       	cpc	r26, r30
    54a0:	b1 05       	cpc	r27, r1
    54a2:	44 f5       	brge	.+80     	; 0x54f4 <__vector_71+0xad2>
			sCCIsOn = 1;
    54a4:	21 e0       	ldi	r18, 0x01	; 1
    54a6:	20 93 56 28 	sts	0x2856, r18	; 0x802856 <sCCIsOn.4875>
			sSensorData.ccPower = CC_DEFAULT_POWER;
    54aa:	22 e0       	ldi	r18, 0x02	; 2
    54ac:	20 93 d9 28 	sts	0x28D9, r18	; 0x8028d9 <sSensorData+0x79>
			sCCPrevPulseInterval = sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    54b0:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <sSensorData+0x75>
    54b4:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <sSensorData+0x76>
    54b8:	a0 93 d7 28 	sts	0x28D7, r26	; 0x8028d7 <sSensorData+0x77>
    54bc:	b0 93 d8 28 	sts	0x28D8, r27	; 0x8028d8 <sSensorData+0x78>
    54c0:	80 93 52 28 	sts	0x2852, r24	; 0x802852 <sCCPrevPulseInterval.4882>
    54c4:	90 93 53 28 	sts	0x2853, r25	; 0x802853 <sCCPrevPulseInterval.4882+0x1>
    54c8:	a0 93 54 28 	sts	0x2854, r26	; 0x802854 <sCCPrevPulseInterval.4882+0x2>
    54cc:	b0 93 55 28 	sts	0x2855, r27	; 0x802855 <sCCPrevPulseInterval.4882+0x3>
			sCCRunTimer = CC_REG_CYCLES;
    54d0:	88 e8       	ldi	r24, 0x88	; 136
    54d2:	93 e1       	ldi	r25, 0x13	; 19
    54d4:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4876>
    54d8:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4876+0x1>
			SET_CC_DRIVE(sSensorData.ccPower);
    54dc:	e0 e8       	ldi	r30, 0x80	; 128
    54de:	f6 e0       	ldi	r31, 0x06	; 6
    54e0:	85 e0       	ldi	r24, 0x05	; 5
    54e2:	85 83       	std	Z+5, r24	; 0x05
    54e4:	8a e0       	ldi	r24, 0x0A	; 10
    54e6:	86 83       	std	Z+6, r24	; 0x06
		}
		else
			sCCIsOn = 0;
	}

	if(sSensorData.selCC2State != selCC2Pin) {
    54e8:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <sSensorData+0x64>
    54ec:	c8 17       	cp	r28, r24
    54ee:	09 f4       	brne	.+2      	; 0x54f2 <__vector_71+0xad0>
    54f0:	7f c1       	rjmp	.+766    	; 0x57f0 <__vector_71+0xdce>
    54f2:	0c c0       	rjmp	.+24     	; 0x550c <__vector_71+0xaea>
			sCCPrevPulseInterval = sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
			sCCRunTimer = CC_REG_CYCLES;
			SET_CC_DRIVE(sSensorData.ccPower);
		}
		else
			sCCIsOn = 0;
    54f4:	10 92 56 28 	sts	0x2856, r1	; 0x802856 <sCCIsOn.4875>
	}

	if(sSensorData.selCC2State != selCC2Pin) {
    54f8:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <sSensorData+0x64>
    54fc:	c8 13       	cpse	r28, r24
    54fe:	06 c0       	rjmp	.+12     	; 0x550c <__vector_71+0xaea>
    5500:	24 c1       	rjmp	.+584    	; 0x574a <__vector_71+0xd28>
    5502:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <sSensorData+0x64>
    5506:	c8 17       	cp	r28, r24
    5508:	09 f4       	brne	.+2      	; 0x550c <__vector_71+0xaea>
    550a:	7d c0       	rjmp	.+250    	; 0x5606 <__vector_71+0xbe4>
		sSensorData.selCC2State = selCC2Pin;
    550c:	c0 93 c4 28 	sts	0x28C4, r28	; 0x8028c4 <sSensorData+0x64>
		sSensorData.selCC2Timestamp = sSessionCycleCount;
    5510:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    5514:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    5518:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    551c:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    5520:	80 93 cd 28 	sts	0x28CD, r24	; 0x8028cd <sSensorData+0x6d>
    5524:	90 93 ce 28 	sts	0x28CE, r25	; 0x8028ce <sSensorData+0x6e>
    5528:	a0 93 cf 28 	sts	0x28CF, r26	; 0x8028cf <sSensorData+0x6f>
    552c:	b0 93 d0 28 	sts	0x28D0, r27	; 0x8028d0 <sSensorData+0x70>
		/* Did CC2 just get enabled? */
		if(!selCC2Pin) {
    5530:	c1 11       	cpse	r28, r1
    5532:	66 c0       	rjmp	.+204    	; 0x5600 <__vector_71+0xbde>
			sCCIsOn = 1;
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	80 93 56 28 	sts	0x2856, r24	; 0x802856 <sCCIsOn.4875>
			sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    553a:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <sSensorData+0x5a>
    553e:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <sSensorData+0x5b>
    5542:	a0 91 bc 28 	lds	r26, 0x28BC	; 0x8028bc <sSensorData+0x5c>
    5546:	b0 91 bd 28 	lds	r27, 0x28BD	; 0x8028bd <sSensorData+0x5d>
    554a:	80 93 52 28 	sts	0x2852, r24	; 0x802852 <sCCPrevPulseInterval.4882>
    554e:	90 93 53 28 	sts	0x2853, r25	; 0x802853 <sCCPrevPulseInterval.4882+0x1>
    5552:	a0 93 54 28 	sts	0x2854, r26	; 0x802854 <sCCPrevPulseInterval.4882+0x2>
    5556:	b0 93 55 28 	sts	0x2855, r27	; 0x802855 <sCCPrevPulseInterval.4882+0x3>
			if(sSensorData.speedSensorPulseInterval > sCC2MinSpeed) { // Driving below minimum initial CC2 speed limit
    555a:	40 91 de 28 	lds	r20, 0x28DE	; 0x8028de <sCC2MinSpeed>
    555e:	50 91 df 28 	lds	r21, 0x28DF	; 0x8028df <sCC2MinSpeed+0x1>
    5562:	60 91 e0 28 	lds	r22, 0x28E0	; 0x8028e0 <sCC2MinSpeed+0x2>
    5566:	70 91 e1 28 	lds	r23, 0x28E1	; 0x8028e1 <sCC2MinSpeed+0x3>
    556a:	48 17       	cp	r20, r24
    556c:	59 07       	cpc	r21, r25
    556e:	6a 07       	cpc	r22, r26
    5570:	7b 07       	cpc	r23, r27
    5572:	a4 f4       	brge	.+40     	; 0x559c <__vector_71+0xb7a>
				sSensorData.ccTargetSpeed = sCC2MinSpeed;
    5574:	80 91 de 28 	lds	r24, 0x28DE	; 0x8028de <sCC2MinSpeed>
    5578:	90 91 df 28 	lds	r25, 0x28DF	; 0x8028df <sCC2MinSpeed+0x1>
    557c:	a0 91 e0 28 	lds	r26, 0x28E0	; 0x8028e0 <sCC2MinSpeed+0x2>
    5580:	b0 91 e1 28 	lds	r27, 0x28E1	; 0x8028e1 <sCC2MinSpeed+0x3>
    5584:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <sSensorData+0x75>
    5588:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <sSensorData+0x76>
    558c:	a0 93 d7 28 	sts	0x28D7, r26	; 0x8028d7 <sSensorData+0x77>
    5590:	b0 93 d8 28 	sts	0x28D8, r27	; 0x8028d8 <sSensorData+0x78>
				sSensorData.ccPower = CC_MAX_POWER;
    5594:	87 e0       	ldi	r24, 0x07	; 7
    5596:	80 93 d9 28 	sts	0x28D9, r24	; 0x8028d9 <sSensorData+0x79>
    559a:	0b c0       	rjmp	.+22     	; 0x55b2 <__vector_71+0xb90>
			}
			else {
				sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    559c:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <sSensorData+0x75>
    55a0:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <sSensorData+0x76>
    55a4:	a0 93 d7 28 	sts	0x28D7, r26	; 0x8028d7 <sSensorData+0x77>
    55a8:	b0 93 d8 28 	sts	0x28D8, r27	; 0x8028d8 <sSensorData+0x78>
				sSensorData.ccPower = CC_DEFAULT_POWER;
    55ac:	82 e0       	ldi	r24, 0x02	; 2
    55ae:	80 93 d9 28 	sts	0x28D9, r24	; 0x8028d9 <sSensorData+0x79>
			}
			sCCRunTimer = CC_REG_CYCLES;
    55b2:	88 e8       	ldi	r24, 0x88	; 136
    55b4:	93 e1       	ldi	r25, 0x13	; 19
    55b6:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4876>
    55ba:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4876+0x1>
			SET_CC_DRIVE(sSensorData.ccPower);
    55be:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <sSensorData+0x79>
    55c2:	81 11       	cpse	r24, r1
    55c4:	04 c0       	rjmp	.+8      	; 0x55ce <__vector_71+0xbac>
    55c6:	8f e0       	ldi	r24, 0x0F	; 15
    55c8:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    55cc:	1c c0       	rjmp	.+56     	; 0x5606 <__vector_71+0xbe4>
    55ce:	87 30       	cpi	r24, 0x07	; 7
    55d0:	31 f4       	brne	.+12     	; 0x55de <__vector_71+0xbbc>
    55d2:	e0 e8       	ldi	r30, 0x80	; 128
    55d4:	f6 e0       	ldi	r31, 0x06	; 6
    55d6:	85 83       	std	Z+5, r24	; 0x05
    55d8:	88 e0       	ldi	r24, 0x08	; 8
    55da:	86 83       	std	Z+6, r24	; 0x06
    55dc:	14 c0       	rjmp	.+40     	; 0x5606 <__vector_71+0xbe4>
    55de:	88 30       	cpi	r24, 0x08	; 8
    55e0:	21 f4       	brne	.+8      	; 0x55ea <__vector_71+0xbc8>
    55e2:	8f e0       	ldi	r24, 0x0F	; 15
    55e4:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    55e8:	0e c0       	rjmp	.+28     	; 0x5606 <__vector_71+0xbe4>
    55ea:	80 95       	com	r24
    55ec:	87 70       	andi	r24, 0x07	; 7
    55ee:	e0 e8       	ldi	r30, 0x80	; 128
    55f0:	f6 e0       	ldi	r31, 0x06	; 6
    55f2:	85 83       	std	Z+5, r24	; 0x05
    55f4:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <sSensorData+0x79>
    55f8:	87 70       	andi	r24, 0x07	; 7
    55fa:	88 60       	ori	r24, 0x08	; 8
    55fc:	86 83       	std	Z+6, r24	; 0x06
    55fe:	03 c0       	rjmp	.+6      	; 0x5606 <__vector_71+0xbe4>
		}
		else
			sCCIsOn = 0;
    5600:	10 92 56 28 	sts	0x2856, r1	; 0x802856 <sCCIsOn.4875>
    5604:	a2 c0       	rjmp	.+324    	; 0x574a <__vector_71+0xd28>
	}
	
	if(sCCIsOn && !--sCCRunTimer) {
    5606:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <sCCIsOn.4875>
    560a:	88 23       	and	r24, r24
    560c:	09 f4       	brne	.+2      	; 0x5610 <__vector_71+0xbee>
    560e:	9d c0       	rjmp	.+314    	; 0x574a <__vector_71+0xd28>
    5610:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <sCCRunTimer.4876>
    5614:	90 91 51 28 	lds	r25, 0x2851	; 0x802851 <sCCRunTimer.4876+0x1>
    5618:	01 97       	sbiw	r24, 0x01	; 1
    561a:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4876>
    561e:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4876+0x1>
    5622:	89 2b       	or	r24, r25
    5624:	09 f0       	breq	.+2      	; 0x5628 <__vector_71+0xc06>
    5626:	91 c0       	rjmp	.+290    	; 0x574a <__vector_71+0xd28>
		if(!selCC2Pin && sCC2TargetSpeedUpdate) {
    5628:	c1 11       	cpse	r28, r1
    562a:	16 c0       	rjmp	.+44     	; 0x5658 <__vector_71+0xc36>
    562c:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sCC2TargetSpeedUpdate>
    5630:	88 23       	and	r24, r24
    5632:	91 f0       	breq	.+36     	; 0x5658 <__vector_71+0xc36>
			sSensorData.ccTargetSpeed = sCC2TargetSpeed;
    5634:	80 91 da 28 	lds	r24, 0x28DA	; 0x8028da <sCC2TargetSpeed>
    5638:	90 91 db 28 	lds	r25, 0x28DB	; 0x8028db <sCC2TargetSpeed+0x1>
    563c:	a0 91 dc 28 	lds	r26, 0x28DC	; 0x8028dc <sCC2TargetSpeed+0x2>
    5640:	b0 91 dd 28 	lds	r27, 0x28DD	; 0x8028dd <sCC2TargetSpeed+0x3>
    5644:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <sSensorData+0x75>
    5648:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <sSensorData+0x76>
    564c:	a0 93 d7 28 	sts	0x28D7, r26	; 0x8028d7 <sSensorData+0x77>
    5650:	b0 93 d8 28 	sts	0x28D8, r27	; 0x8028d8 <sSensorData+0x78>
			// Possibly adjust power levels here too, for faster convergence?
			sCC2TargetSpeedUpdate = 0;
    5654:	10 92 e2 28 	sts	0x28E2, r1	; 0x8028e2 <sCC2TargetSpeedUpdate>
		}
		if((sSensorData.speedSensorPulseInterval > sSensorData.ccTargetSpeed)
    5658:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <sSensorData+0x5a>
    565c:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <sSensorData+0x5b>
    5660:	a0 91 bc 28 	lds	r26, 0x28BC	; 0x8028bc <sSensorData+0x5c>
    5664:	b0 91 bd 28 	lds	r27, 0x28BD	; 0x8028bd <sSensorData+0x5d>
    5668:	40 91 d5 28 	lds	r20, 0x28D5	; 0x8028d5 <sSensorData+0x75>
    566c:	50 91 d6 28 	lds	r21, 0x28D6	; 0x8028d6 <sSensorData+0x76>
    5670:	60 91 d7 28 	lds	r22, 0x28D7	; 0x8028d7 <sSensorData+0x77>
    5674:	70 91 d8 28 	lds	r23, 0x28D8	; 0x8028d8 <sSensorData+0x78>
    5678:	48 17       	cp	r20, r24
    567a:	59 07       	cpc	r21, r25
    567c:	6a 07       	cpc	r22, r26
    567e:	7b 07       	cpc	r23, r27
    5680:	ac f4       	brge	.+42     	; 0x56ac <__vector_71+0xc8a>
			&& (sSensorData.speedSensorPulseInterval > sCCPrevPulseInterval)
    5682:	00 91 52 28 	lds	r16, 0x2852	; 0x802852 <sCCPrevPulseInterval.4882>
    5686:	10 91 53 28 	lds	r17, 0x2853	; 0x802853 <sCCPrevPulseInterval.4882+0x1>
    568a:	20 91 54 28 	lds	r18, 0x2854	; 0x802854 <sCCPrevPulseInterval.4882+0x2>
    568e:	30 91 55 28 	lds	r19, 0x2855	; 0x802855 <sCCPrevPulseInterval.4882+0x3>
    5692:	08 17       	cp	r16, r24
    5694:	19 07       	cpc	r17, r25
    5696:	2a 07       	cpc	r18, r26
    5698:	3b 07       	cpc	r19, r27
    569a:	44 f4       	brge	.+16     	; 0x56ac <__vector_71+0xc8a>
			&& (sSensorData.ccPower < CC_TURBO_BOOST) 
    569c:	20 91 d9 28 	lds	r18, 0x28D9	; 0x8028d9 <sSensorData+0x79>
			&& (sSensorData.ccPower < CC_MAX_POWER))
    56a0:	27 30       	cpi	r18, 0x07	; 7
    56a2:	20 f4       	brcc	.+8      	; 0x56ac <__vector_71+0xc8a>
				sSensorData.ccPower++;
    56a4:	2f 5f       	subi	r18, 0xFF	; 255
    56a6:	20 93 d9 28 	sts	0x28D9, r18	; 0x8028d9 <sSensorData+0x79>
    56aa:	19 c0       	rjmp	.+50     	; 0x56de <__vector_71+0xcbc>
		else if((sSensorData.speedSensorPulseInterval < sSensorData.ccTargetSpeed)
    56ac:	84 17       	cp	r24, r20
    56ae:	95 07       	cpc	r25, r21
    56b0:	a6 07       	cpc	r26, r22
    56b2:	b7 07       	cpc	r27, r23
    56b4:	a4 f4       	brge	.+40     	; 0x56de <__vector_71+0xcbc>
			&& (sSensorData.speedSensorPulseInterval < sCCPrevPulseInterval)
    56b6:	40 91 52 28 	lds	r20, 0x2852	; 0x802852 <sCCPrevPulseInterval.4882>
    56ba:	50 91 53 28 	lds	r21, 0x2853	; 0x802853 <sCCPrevPulseInterval.4882+0x1>
    56be:	60 91 54 28 	lds	r22, 0x2854	; 0x802854 <sCCPrevPulseInterval.4882+0x2>
    56c2:	70 91 55 28 	lds	r23, 0x2855	; 0x802855 <sCCPrevPulseInterval.4882+0x3>
    56c6:	84 17       	cp	r24, r20
    56c8:	95 07       	cpc	r25, r21
    56ca:	a6 07       	cpc	r26, r22
    56cc:	b7 07       	cpc	r27, r23
    56ce:	3c f4       	brge	.+14     	; 0x56de <__vector_71+0xcbc>
			&& (sSensorData.ccPower > 0))
    56d0:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <sSensorData+0x79>
    56d4:	88 23       	and	r24, r24
    56d6:	39 f0       	breq	.+14     	; 0x56e6 <__vector_71+0xcc4>
				sSensorData.ccPower--;
    56d8:	81 50       	subi	r24, 0x01	; 1
    56da:	80 93 d9 28 	sts	0x28D9, r24	; 0x8028d9 <sSensorData+0x79>
		SET_CC_DRIVE(sSensorData.ccPower);
    56de:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <sSensorData+0x79>
    56e2:	81 11       	cpse	r24, r1
    56e4:	04 c0       	rjmp	.+8      	; 0x56ee <__vector_71+0xccc>
    56e6:	8f e0       	ldi	r24, 0x0F	; 15
    56e8:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    56ec:	18 c0       	rjmp	.+48     	; 0x571e <__vector_71+0xcfc>
    56ee:	87 30       	cpi	r24, 0x07	; 7
    56f0:	31 f4       	brne	.+12     	; 0x56fe <__vector_71+0xcdc>
    56f2:	e0 e8       	ldi	r30, 0x80	; 128
    56f4:	f6 e0       	ldi	r31, 0x06	; 6
    56f6:	85 83       	std	Z+5, r24	; 0x05
    56f8:	88 e0       	ldi	r24, 0x08	; 8
    56fa:	86 83       	std	Z+6, r24	; 0x06
    56fc:	10 c0       	rjmp	.+32     	; 0x571e <__vector_71+0xcfc>
    56fe:	88 30       	cpi	r24, 0x08	; 8
    5700:	21 f4       	brne	.+8      	; 0x570a <__vector_71+0xce8>
    5702:	8f e0       	ldi	r24, 0x0F	; 15
    5704:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    5708:	0a c0       	rjmp	.+20     	; 0x571e <__vector_71+0xcfc>
    570a:	80 95       	com	r24
    570c:	87 70       	andi	r24, 0x07	; 7
    570e:	e0 e8       	ldi	r30, 0x80	; 128
    5710:	f6 e0       	ldi	r31, 0x06	; 6
    5712:	85 83       	std	Z+5, r24	; 0x05
    5714:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <sSensorData+0x79>
    5718:	87 70       	andi	r24, 0x07	; 7
    571a:	88 60       	ori	r24, 0x08	; 8
    571c:	86 83       	std	Z+6, r24	; 0x06
		sCCRunTimer = CC_REG_CYCLES;
    571e:	88 e8       	ldi	r24, 0x88	; 136
    5720:	93 e1       	ldi	r25, 0x13	; 19
    5722:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4876>
    5726:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4876+0x1>
		sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    572a:	80 91 ba 28 	lds	r24, 0x28BA	; 0x8028ba <sSensorData+0x5a>
    572e:	90 91 bb 28 	lds	r25, 0x28BB	; 0x8028bb <sSensorData+0x5b>
    5732:	a0 91 bc 28 	lds	r26, 0x28BC	; 0x8028bc <sSensorData+0x5c>
    5736:	b0 91 bd 28 	lds	r27, 0x28BD	; 0x8028bd <sSensorData+0x5d>
    573a:	80 93 52 28 	sts	0x2852, r24	; 0x802852 <sCCPrevPulseInterval.4882>
    573e:	90 93 53 28 	sts	0x2853, r25	; 0x802853 <sCCPrevPulseInterval.4882+0x1>
    5742:	a0 93 54 28 	sts	0x2854, r26	; 0x802854 <sCCPrevPulseInterval.4882+0x2>
    5746:	b0 93 55 28 	sts	0x2855, r27	; 0x802855 <sCCPrevPulseInterval.4882+0x3>
	}
	
	if(sTakeSnapshot485) {
    574a:	80 91 e7 28 	lds	r24, 0x28E7	; 0x8028e7 <sTakeSnapshot485>
    574e:	88 23       	and	r24, r24
    5750:	e1 f0       	breq	.+56     	; 0x578a <__vector_71+0xd68>
		sSensorDataSnapshot485 = sSensorData;
    5752:	8a e7       	ldi	r24, 0x7A	; 122
    5754:	e0 e6       	ldi	r30, 0x60	; 96
    5756:	f8 e2       	ldi	r31, 0x28	; 40
    5758:	ac ee       	ldi	r26, 0xEC	; 236
    575a:	b8 e2       	ldi	r27, 0x28	; 40
    575c:	01 90       	ld	r0, Z+
    575e:	0d 92       	st	X+, r0
    5760:	8a 95       	dec	r24
    5762:	e1 f7       	brne	.-8      	; 0x575c <__vector_71+0xd3a>
		sSessionCycleCountSnapshot485 = sSessionCycleCount;
    5764:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    5768:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    576c:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    5770:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    5774:	80 93 e8 28 	sts	0x28E8, r24	; 0x8028e8 <sSessionCycleCountSnapshot485>
    5778:	90 93 e9 28 	sts	0x28E9, r25	; 0x8028e9 <sSessionCycleCountSnapshot485+0x1>
    577c:	a0 93 ea 28 	sts	0x28EA, r26	; 0x8028ea <sSessionCycleCountSnapshot485+0x2>
    5780:	b0 93 eb 28 	sts	0x28EB, r27	; 0x8028eb <sSessionCycleCountSnapshot485+0x3>
		
		sTakeSnapshot485 = 0;
    5784:	10 92 e7 28 	sts	0x28E7, r1	; 0x8028e7 <sTakeSnapshot485>
    5788:	1f c0       	rjmp	.+62     	; 0x57c8 <__vector_71+0xda6>
	}
	else if(sTakeSnapshot) { 
    578a:	80 91 66 29 	lds	r24, 0x2966	; 0x802966 <sTakeSnapshot>
    578e:	88 23       	and	r24, r24
    5790:	d9 f0       	breq	.+54     	; 0x57c8 <__vector_71+0xda6>
		sSensorDataSnapshot = sSensorData;
    5792:	8a e7       	ldi	r24, 0x7A	; 122
    5794:	e0 e6       	ldi	r30, 0x60	; 96
    5796:	f8 e2       	ldi	r31, 0x28	; 40
    5798:	ab e6       	ldi	r26, 0x6B	; 107
    579a:	b9 e2       	ldi	r27, 0x29	; 41
    579c:	01 90       	ld	r0, Z+
    579e:	0d 92       	st	X+, r0
    57a0:	8a 95       	dec	r24
    57a2:	e1 f7       	brne	.-8      	; 0x579c <__vector_71+0xd7a>
		sSessionCycleCountSnapshot = sSessionCycleCount;
    57a4:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    57a8:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    57ac:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    57b0:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    57b4:	80 93 67 29 	sts	0x2967, r24	; 0x802967 <sSessionCycleCountSnapshot>
    57b8:	90 93 68 29 	sts	0x2968, r25	; 0x802968 <sSessionCycleCountSnapshot+0x1>
    57bc:	a0 93 69 29 	sts	0x2969, r26	; 0x802969 <sSessionCycleCountSnapshot+0x2>
    57c0:	b0 93 6a 29 	sts	0x296A, r27	; 0x80296a <sSessionCycleCountSnapshot+0x3>
		
		sTakeSnapshot = 0;
    57c4:	10 92 66 29 	sts	0x2966, r1	; 0x802966 <sTakeSnapshot>
	}

	sSessionCycleCount++;
    57c8:	80 91 e3 28 	lds	r24, 0x28E3	; 0x8028e3 <sSessionCycleCount>
    57cc:	90 91 e4 28 	lds	r25, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x1>
    57d0:	a0 91 e5 28 	lds	r26, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x2>
    57d4:	b0 91 e6 28 	lds	r27, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x3>
    57d8:	01 96       	adiw	r24, 0x01	; 1
    57da:	a1 1d       	adc	r26, r1
    57dc:	b1 1d       	adc	r27, r1
    57de:	80 93 e3 28 	sts	0x28E3, r24	; 0x8028e3 <sSessionCycleCount>
    57e2:	90 93 e4 28 	sts	0x28E4, r25	; 0x8028e4 <sSessionCycleCount+0x1>
    57e6:	a0 93 e5 28 	sts	0x28E5, r26	; 0x8028e5 <sSessionCycleCount+0x2>
    57ea:	b0 93 e6 28 	sts	0x28E6, r27	; 0x8028e6 <sSessionCycleCount+0x3>
		
} /* ISR(ADCA_CH0_vect) */
    57ee:	0a c0       	rjmp	.+20     	; 0x5804 <__vector_71+0xde2>
		}
		else
			sCCIsOn = 0;
	}
	
	if(sCCIsOn && !--sCCRunTimer) {
    57f0:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <sCCRunTimer.4876>
    57f4:	90 91 51 28 	lds	r25, 0x2851	; 0x802851 <sCCRunTimer.4876+0x1>
    57f8:	01 97       	sbiw	r24, 0x01	; 1
    57fa:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4876>
    57fe:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4876+0x1>
    5802:	a3 cf       	rjmp	.-186    	; 0x574a <__vector_71+0xd28>
		sTakeSnapshot = 0;
	}

	sSessionCycleCount++;
		
} /* ISR(ADCA_CH0_vect) */
    5804:	ff 91       	pop	r31
    5806:	ef 91       	pop	r30
    5808:	df 91       	pop	r29
    580a:	cf 91       	pop	r28
    580c:	bf 91       	pop	r27
    580e:	af 91       	pop	r26
    5810:	9f 91       	pop	r25
    5812:	8f 91       	pop	r24
    5814:	7f 91       	pop	r23
    5816:	6f 91       	pop	r22
    5818:	5f 91       	pop	r21
    581a:	4f 91       	pop	r20
    581c:	3f 91       	pop	r19
    581e:	2f 91       	pop	r18
    5820:	1f 91       	pop	r17
    5822:	0f 91       	pop	r16
    5824:	ff 90       	pop	r15
    5826:	ef 90       	pop	r14
    5828:	df 90       	pop	r13
    582a:	cf 90       	pop	r12
    582c:	bf 90       	pop	r11
    582e:	af 90       	pop	r10
    5830:	9f 90       	pop	r9
    5832:	8f 90       	pop	r8
    5834:	7f 90       	pop	r7
    5836:	6f 90       	pop	r6
    5838:	5f 90       	pop	r5
    583a:	4f 90       	pop	r4
    583c:	3f 90       	pop	r3
    583e:	2f 90       	pop	r2
    5840:	0f 90       	pop	r0
    5842:	0b be       	out	0x3b, r0	; 59
    5844:	0f 90       	pop	r0
    5846:	0f be       	out	0x3f, r0	; 63
    5848:	0f 90       	pop	r0
    584a:	1f 90       	pop	r1
    584c:	18 95       	reti

0000584e <CopySensorData>:
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
    584e:	ac 01       	movw	r20, r24
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    5850:	fb 01       	movw	r30, r22
    5852:	80 81       	ld	r24, Z
    5854:	98 2f       	mov	r25, r24
    5856:	9d 7f       	andi	r25, 0xFD	; 253
    5858:	95 32       	cpi	r25, 0x25	; 37
    585a:	81 f0       	breq	.+32     	; 0x587c <CopySensorData+0x2e>
    585c:	81 11       	cpse	r24, r1
    585e:	19 c0       	rjmp	.+50     	; 0x5892 <CopySensorData+0x44>
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
    5860:	20 e0       	ldi	r18, 0x00	; 0
    5862:	0d c0       	rjmp	.+26     	; 0x587e <CopySensorData+0x30>
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
		dest[i] = src[i];
    5864:	9d 93       	st	X+, r25
		i++;
    5866:	2f 5f       	subi	r18, 0xFF	; 255


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    5868:	2e 34       	cpi	r18, 0x4E	; 78
    586a:	71 f0       	breq	.+28     	; 0x5888 <CopySensorData+0x3a>
    586c:	91 91       	ld	r25, Z+
    586e:	39 2f       	mov	r19, r25
    5870:	3d 7f       	andi	r19, 0xFD	; 253
    5872:	35 32       	cpi	r19, 0x25	; 37
    5874:	21 f0       	breq	.+8      	; 0x587e <CopySensorData+0x30>
    5876:	91 11       	cpse	r25, r1
    5878:	f5 cf       	rjmp	.-22     	; 0x5864 <CopySensorData+0x16>
    587a:	01 c0       	rjmp	.+2      	; 0x587e <CopySensorData+0x30>
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
    587c:	20 e0       	ldi	r18, 0x00	; 0
		dest[i] = src[i];
		i++;
	}		
	
	if(i < MAXDATA)
		dest[i] = '\0';
    587e:	fa 01       	movw	r30, r20
    5880:	e2 0f       	add	r30, r18
    5882:	f1 1d       	adc	r31, r1
    5884:	10 82       	st	Z, r1
    5886:	08 95       	ret
	else
		dest[MAXDATA - 1] = '\0';
    5888:	fa 01       	movw	r30, r20
    588a:	e3 5b       	subi	r30, 0xB3	; 179
    588c:	ff 4f       	sbci	r31, 0xFF	; 255
    588e:	10 82       	st	Z, r1
    5890:	08 95       	ret

static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
		dest[i] = src[i];
    5892:	da 01       	movw	r26, r20
    5894:	8d 93       	st	X+, r24
    5896:	fb 01       	movw	r30, r22
    5898:	31 96       	adiw	r30, 0x01	; 1
		i++;
    589a:	21 e0       	ldi	r18, 0x01	; 1
    589c:	e7 cf       	rjmp	.-50     	; 0x586c <CopySensorData+0x1e>

0000589e <AcceptDataGPSPosition>:
} /* CopySensorData */


static int AcceptDataGPSPosition(const char *adr, char *inData) {
	
	CopySensorData(sGPSPos, inData);
    589e:	88 e0       	ldi	r24, 0x08	; 8
    58a0:	90 e2       	ldi	r25, 0x20	; 32
    58a2:	0e 94 27 2c 	call	0x584e	; 0x584e <CopySensorData>
	return 0;
	
} /* AcceptDataGPSPosition */
    58a6:	80 e0       	ldi	r24, 0x00	; 0
    58a8:	90 e0       	ldi	r25, 0x00	; 0
    58aa:	08 95       	ret

000058ac <AcceptDataGPSDirection>:


static int AcceptDataGPSDirection(const char *adr, char *inData) {
	
	CopySensorData(sGPSDirection, inData);
    58ac:	81 eb       	ldi	r24, 0xB1	; 177
    58ae:	9a e2       	ldi	r25, 0x2A	; 42
    58b0:	0e 94 27 2c 	call	0x584e	; 0x584e <CopySensorData>
	return 0;
	
} /* AcceptDataGPSDirection */
    58b4:	80 e0       	ldi	r24, 0x00	; 0
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	08 95       	ret

000058ba <AcceptDataGPSSpeed>:


static int AcceptDataGPSSpeed(const char *adr, char *inData) {
	
	CopySensorData(sGPSSpeed, inData);
    58ba:	83 e6       	ldi	r24, 0x63	; 99
    58bc:	9a e2       	ldi	r25, 0x2A	; 42
    58be:	0e 94 27 2c 	call	0x584e	; 0x584e <CopySensorData>
	return 0;
	
} /* AcceptDataGPSSpeed */
    58c2:	80 e0       	ldi	r24, 0x00	; 0
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	08 95       	ret

000058c8 <AcceptDataGPSTime>:


static int AcceptDataGPSTime(const char *adr, char *inData) {
	
	CopySensorData(sGPSTime, inData);
    58c8:	85 e1       	ldi	r24, 0x15	; 21
    58ca:	9a e2       	ldi	r25, 0x2A	; 42
    58cc:	0e 94 27 2c 	call	0x584e	; 0x584e <CopySensorData>
	return 0;
		
} /* AcceptDataGPSTime */
    58d0:	80 e0       	ldi	r24, 0x00	; 0
    58d2:	90 e0       	ldi	r25, 0x00	; 0
    58d4:	08 95       	ret

000058d6 <InitReadBussensors>:
static int AcceptDataGPSTime(const char *adr, char *inData);


void InitReadBussensors(void) {
	
	AddWantedSensor("LL01", AcceptDataGPSPosition);
    58d6:	6f e4       	ldi	r22, 0x4F	; 79
    58d8:	7c e2       	ldi	r23, 0x2C	; 44
    58da:	8a e3       	ldi	r24, 0x3A	; 58
    58dc:	97 e2       	ldi	r25, 0x27	; 39
    58de:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AddWantedSensor>
	AddWantedSensor("GR01", AcceptDataGPSDirection);
    58e2:	66 e5       	ldi	r22, 0x56	; 86
    58e4:	7c e2       	ldi	r23, 0x2C	; 44
    58e6:	8f e3       	ldi	r24, 0x3F	; 63
    58e8:	97 e2       	ldi	r25, 0x27	; 39
    58ea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AddWantedSensor>
	AddWantedSensor("SG01", AcceptDataGPSSpeed);
    58ee:	6d e5       	ldi	r22, 0x5D	; 93
    58f0:	7c e2       	ldi	r23, 0x2C	; 44
    58f2:	84 e4       	ldi	r24, 0x44	; 68
    58f4:	97 e2       	ldi	r25, 0x27	; 39
    58f6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AddWantedSensor>
	AddWantedSensor("GT01", AcceptDataGPSTime);
    58fa:	64 e6       	ldi	r22, 0x64	; 100
    58fc:	7c e2       	ldi	r23, 0x2C	; 44
    58fe:	89 e4       	ldi	r24, 0x49	; 73
    5900:	97 e2       	ldi	r25, 0x27	; 39
    5902:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AddWantedSensor>
    5906:	08 95       	ret

00005908 <PrintBussensors>:
} /* InitReadBussensors */


void PrintBussensors(FILE *fp) {
	
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
    5908:	25 e1       	ldi	r18, 0x15	; 21
    590a:	3a e2       	ldi	r19, 0x2A	; 42
    590c:	3f 93       	push	r19
    590e:	2f 93       	push	r18
    5910:	23 e6       	ldi	r18, 0x63	; 99
    5912:	3a e2       	ldi	r19, 0x2A	; 42
    5914:	3f 93       	push	r19
    5916:	2f 93       	push	r18
    5918:	21 eb       	ldi	r18, 0xB1	; 177
    591a:	3a e2       	ldi	r19, 0x2A	; 42
    591c:	3f 93       	push	r19
    591e:	2f 93       	push	r18
    5920:	28 e0       	ldi	r18, 0x08	; 8
    5922:	30 e2       	ldi	r19, 0x20	; 32
    5924:	3f 93       	push	r19
    5926:	2f 93       	push	r18
    5928:	2e e4       	ldi	r18, 0x4E	; 78
    592a:	37 e2       	ldi	r19, 0x27	; 39
    592c:	3f 93       	push	r19
    592e:	2f 93       	push	r18
    5930:	9f 93       	push	r25
    5932:	8f 93       	push	r24
    5934:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
	
} /* PrintBussensors */
    5938:	8d b7       	in	r24, 0x3d	; 61
    593a:	9e b7       	in	r25, 0x3e	; 62
    593c:	0c 96       	adiw	r24, 0x0c	; 12
    593e:	8d bf       	out	0x3d, r24	; 61
    5940:	9e bf       	out	0x3e, r25	; 62
    5942:	08 95       	ret

00005944 <InitSerial>:
	PMIC.CTRL = savePMIC & ~PMIC_LOLVLEN_bm;
	tx_fc_wridx = nextSlot;
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
	PMIC.CTRL = savePMIC;

} /* WriteByte_FC */
    5944:	cf 93       	push	r28
    5946:	df 93       	push	r29
    5948:	f8 94       	cli
    594a:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    594e:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <__TEXT_REGION_LENGTH__+0x7008b4>
    5952:	20 ea       	ldi	r18, 0xA0	; 160
    5954:	39 e0       	ldi	r19, 0x09	; 9
    5956:	d9 01       	movw	r26, r18
    5958:	14 96       	adiw	r26, 0x04	; 4
    595a:	1c 92       	st	X, r1
    595c:	c0 eb       	ldi	r28, 0xB0	; 176
    595e:	d9 e0       	ldi	r29, 0x09	; 9
    5960:	1c 82       	std	Y+4, r1	; 0x04
    5962:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
    5966:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <__TEXT_REGION_LENGTH__+0x700ab4>
    596a:	60 ea       	ldi	r22, 0xA0	; 160
    596c:	7b e0       	ldi	r23, 0x0B	; 11
    596e:	fb 01       	movw	r30, r22
    5970:	14 82       	std	Z+4, r1	; 0x04
    5972:	e0 e6       	ldi	r30, 0x60	; 96
    5974:	f6 e0       	ldi	r31, 0x06	; 6
    5976:	88 e1       	ldi	r24, 0x18	; 24
    5978:	82 8b       	std	Z+18, r24	; 0x12
    597a:	86 8b       	std	Z+22, r24	; 0x16
    597c:	40 ea       	ldi	r20, 0xA0	; 160
    597e:	56 e0       	ldi	r21, 0x06	; 6
    5980:	da 01       	movw	r26, r20
    5982:	52 96       	adiw	r26, 0x12	; 18
    5984:	8c 93       	st	X, r24
    5986:	52 97       	sbiw	r26, 0x12	; 18
    5988:	98 e8       	ldi	r25, 0x88	; 136
    598a:	95 83       	std	Z+5, r25	; 0x05
    598c:	92 e0       	ldi	r25, 0x02	; 2
    598e:	96 83       	std	Z+6, r25	; 0x06
    5990:	9a e8       	ldi	r25, 0x8A	; 138
    5992:	91 83       	std	Z+1, r25	; 0x01
    5994:	94 e4       	ldi	r25, 0x44	; 68
    5996:	92 83       	std	Z+2, r25	; 0x02
    5998:	98 e0       	ldi	r25, 0x08	; 8
    599a:	15 96       	adiw	r26, 0x05	; 5
    599c:	9c 93       	st	X, r25
    599e:	15 97       	sbiw	r26, 0x05	; 5
    59a0:	11 96       	adiw	r26, 0x01	; 1
    59a2:	9c 93       	st	X, r25
    59a4:	11 97       	sbiw	r26, 0x01	; 1
    59a6:	94 e0       	ldi	r25, 0x04	; 4
    59a8:	12 96       	adiw	r26, 0x02	; 2
    59aa:	9c 93       	st	X, r25
    59ac:	90 e1       	ldi	r25, 0x10	; 16
    59ae:	90 8b       	std	Z+16, r25	; 0x10
    59b0:	94 8b       	std	Z+20, r25	; 0x14
    59b2:	95 8b       	std	Z+21, r25	; 0x15
    59b4:	45 ef       	ldi	r20, 0xF5	; 245
    59b6:	f9 01       	movw	r30, r18
    59b8:	46 83       	std	Z+6, r20	; 0x06
    59ba:	90 eb       	ldi	r25, 0xB0	; 176
    59bc:	97 83       	std	Z+7, r25	; 0x07
    59be:	4e 83       	std	Y+6, r20	; 0x06
    59c0:	9f 83       	std	Y+7, r25	; 0x07
    59c2:	9c e0       	ldi	r25, 0x0C	; 12
    59c4:	db 01       	movw	r26, r22
    59c6:	16 96       	adiw	r26, 0x06	; 6
    59c8:	9c 93       	st	X, r25
    59ca:	16 97       	sbiw	r26, 0x06	; 6
    59cc:	92 eb       	ldi	r25, 0xB2	; 178
    59ce:	17 96       	adiw	r26, 0x07	; 7
    59d0:	9c 93       	st	X, r25
    59d2:	17 97       	sbiw	r26, 0x07	; 7
    59d4:	84 83       	std	Z+4, r24	; 0x04
    59d6:	8c 83       	std	Y+4, r24	; 0x04
    59d8:	14 96       	adiw	r26, 0x04	; 4
    59da:	8c 93       	st	X, r24
    59dc:	14 97       	sbiw	r26, 0x04	; 4
    59de:	80 e2       	ldi	r24, 0x20	; 32
    59e0:	83 83       	std	Z+3, r24	; 0x03
    59e2:	8b 83       	std	Y+3, r24	; 0x03
    59e4:	13 96       	adiw	r26, 0x03	; 3
    59e6:	8c 93       	st	X, r24
    59e8:	e0 ea       	ldi	r30, 0xA0	; 160
    59ea:	f0 e0       	ldi	r31, 0x00	; 0
    59ec:	82 81       	ldd	r24, Z+2	; 0x02
    59ee:	83 60       	ori	r24, 0x03	; 3
    59f0:	82 83       	std	Z+2, r24	; 0x02
    59f2:	df 91       	pop	r29
    59f4:	cf 91       	pop	r28
    59f6:	08 95       	ret

000059f8 <CanRead_Comm485>:
    59f8:	80 91 cf 2d 	lds	r24, 0x2DCF	; 0x802dcf <rx_485_wridx>
    59fc:	90 91 ce 2d 	lds	r25, 0x2DCE	; 0x802dce <rx_485_rdidx>
    5a00:	89 17       	cp	r24, r25
    5a02:	10 f0       	brcs	.+4      	; 0x5a08 <CanRead_Comm485+0x10>
    5a04:	89 1b       	sub	r24, r25
    5a06:	08 95       	ret
    5a08:	8c 54       	subi	r24, 0x4C	; 76
    5a0a:	89 1b       	sub	r24, r25
    5a0c:	08 95       	ret

00005a0e <ReadByte_Comm485>:
    5a0e:	cf 93       	push	r28
    5a10:	c0 91 ce 2d 	lds	r28, 0x2DCE	; 0x802dce <rx_485_rdidx>
    5a14:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <CanRead_Comm485>
    5a18:	88 23       	and	r24, r24
    5a1a:	e1 f3       	breq	.-8      	; 0x5a14 <ReadByte_Comm485+0x6>
    5a1c:	ec 2f       	mov	r30, r28
    5a1e:	f0 e0       	ldi	r31, 0x00	; 0
    5a20:	e6 5e       	subi	r30, 0xE6	; 230
    5a22:	f2 4d       	sbci	r31, 0xD2	; 210
    5a24:	80 81       	ld	r24, Z
    5a26:	91 e0       	ldi	r25, 0x01	; 1
    5a28:	9c 0f       	add	r25, r28
    5a2a:	94 3b       	cpi	r25, 0xB4	; 180
    5a2c:	08 f0       	brcs	.+2      	; 0x5a30 <ReadByte_Comm485+0x22>
    5a2e:	90 e0       	ldi	r25, 0x00	; 0
    5a30:	90 93 ce 2d 	sts	0x2DCE, r25	; 0x802dce <rx_485_rdidx>
    5a34:	cf 91       	pop	r28
    5a36:	08 95       	ret

00005a38 <CanWrite_Comm485>:
    5a38:	20 91 86 2e 	lds	r18, 0x2E86	; 0x802e86 <tx_485_wridx>
    5a3c:	91 e0       	ldi	r25, 0x01	; 1
    5a3e:	92 0f       	add	r25, r18
    5a40:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <tx_485_rdidx>
    5a44:	94 3b       	cpi	r25, 0xB4	; 180
    5a46:	10 f0       	brcs	.+4      	; 0x5a4c <CanWrite_Comm485+0x14>
    5a48:	9d e4       	ldi	r25, 0x4D	; 77
    5a4a:	92 0f       	add	r25, r18
    5a4c:	89 17       	cp	r24, r25
    5a4e:	10 f0       	brcs	.+4      	; 0x5a54 <CanWrite_Comm485+0x1c>
    5a50:	89 1b       	sub	r24, r25
    5a52:	08 95       	ret
    5a54:	8c 54       	subi	r24, 0x4C	; 76
    5a56:	89 1b       	sub	r24, r25
    5a58:	08 95       	ret

00005a5a <WriteByte_Comm485>:
    5a5a:	0f 93       	push	r16
    5a5c:	1f 93       	push	r17
    5a5e:	cf 93       	push	r28
    5a60:	df 93       	push	r29
    5a62:	d8 2f       	mov	r29, r24
    5a64:	00 ea       	ldi	r16, 0xA0	; 160
    5a66:	19 e0       	ldi	r17, 0x09	; 9
    5a68:	c1 e2       	ldi	r28, 0x21	; 33
    5a6a:	02 c0       	rjmp	.+4      	; 0x5a70 <WriteByte_Comm485+0x16>
    5a6c:	f8 01       	movw	r30, r16
    5a6e:	c3 83       	std	Z+3, r28	; 0x03
    5a70:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <CanWrite_Comm485>
    5a74:	88 23       	and	r24, r24
    5a76:	d1 f3       	breq	.-12     	; 0x5a6c <WriteByte_Comm485+0x12>
    5a78:	c0 91 86 2e 	lds	r28, 0x2E86	; 0x802e86 <tx_485_wridx>
    5a7c:	ec 2f       	mov	r30, r28
    5a7e:	f0 e0       	ldi	r31, 0x00	; 0
    5a80:	ef 52       	subi	r30, 0x2F	; 47
    5a82:	f2 4d       	sbci	r31, 0xD2	; 210
    5a84:	d0 83       	st	Z, r29
    5a86:	cf 5f       	subi	r28, 0xFF	; 255
    5a88:	c4 3b       	cpi	r28, 0xB4	; 180
    5a8a:	08 f0       	brcs	.+2      	; 0x5a8e <WriteByte_Comm485+0x34>
    5a8c:	c0 e0       	ldi	r28, 0x00	; 0
    5a8e:	e0 ea       	ldi	r30, 0xA0	; 160
    5a90:	f0 e0       	ldi	r31, 0x00	; 0
    5a92:	12 81       	ldd	r17, Z+2	; 0x02
    5a94:	81 2f       	mov	r24, r17
    5a96:	8e 7f       	andi	r24, 0xFE	; 254
    5a98:	82 83       	std	Z+2, r24	; 0x02
    5a9a:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <tx_485_busy>
    5a9e:	88 23       	and	r24, r24
    5aa0:	29 f0       	breq	.+10     	; 0x5aac <WriteByte_Comm485+0x52>
    5aa2:	c0 93 86 2e 	sts	0x2E86, r28	; 0x802e86 <tx_485_wridx>
    5aa6:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5aaa:	16 c0       	rjmp	.+44     	; 0x5ad8 <WriteByte_Comm485+0x7e>
    5aac:	82 e0       	ldi	r24, 0x02	; 2
    5aae:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    5ab2:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <GetTicks>
    5ab6:	21 e0       	ldi	r18, 0x01	; 1
    5ab8:	20 93 d0 2d 	sts	0x2DD0, r18	; 0x802dd0 <tx_485_busy>
    5abc:	c0 93 86 2e 	sts	0x2E86, r28	; 0x802e86 <tx_485_wridx>
    5ac0:	c0 ea       	ldi	r28, 0xA0	; 160
    5ac2:	d9 e0       	ldi	r29, 0x09	; 9
    5ac4:	20 e2       	ldi	r18, 0x20	; 32
    5ac6:	2b 83       	std	Y+3, r18	; 0x03
    5ac8:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5acc:	63 e0       	ldi	r22, 0x03	; 3
    5ace:	70 e0       	ldi	r23, 0x00	; 0
    5ad0:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <BusyWaitTillAfter>
    5ad4:	81 e2       	ldi	r24, 0x21	; 33
    5ad6:	8b 83       	std	Y+3, r24	; 0x03
    5ad8:	df 91       	pop	r29
    5ada:	cf 91       	pop	r28
    5adc:	1f 91       	pop	r17
    5ade:	0f 91       	pop	r16
    5ae0:	08 95       	ret

00005ae2 <CanRead_Ctrl>:
    5ae2:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <rx_ctrl_wridx>
    5ae6:	90 91 1c 2c 	lds	r25, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5aea:	89 17       	cp	r24, r25
    5aec:	10 f0       	brcs	.+4      	; 0x5af2 <CanRead_Ctrl+0x10>
    5aee:	89 1b       	sub	r24, r25
    5af0:	08 95       	ret
    5af2:	80 5b       	subi	r24, 0xB0	; 176
    5af4:	89 1b       	sub	r24, r25
    5af6:	08 95       	ret

00005af8 <ReadByte_Ctrl>:
    5af8:	cf 93       	push	r28
    5afa:	c0 91 1c 2c 	lds	r28, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5afe:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <CanRead_Ctrl>
    5b02:	88 23       	and	r24, r24
    5b04:	e1 f3       	breq	.-8      	; 0x5afe <ReadByte_Ctrl+0x6>
    5b06:	ec 2f       	mov	r30, r28
    5b08:	f0 e0       	ldi	r31, 0x00	; 0
    5b0a:	e4 53       	subi	r30, 0x34	; 52
    5b0c:	f4 4d       	sbci	r31, 0xD4	; 212
    5b0e:	80 81       	ld	r24, Z
    5b10:	91 e0       	ldi	r25, 0x01	; 1
    5b12:	9c 0f       	add	r25, r28
    5b14:	90 35       	cpi	r25, 0x50	; 80
    5b16:	08 f0       	brcs	.+2      	; 0x5b1a <ReadByte_Ctrl+0x22>
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	90 93 1c 2c 	sts	0x2C1C, r25	; 0x802c1c <rx_ctrl_rdidx>
    5b1e:	cf 91       	pop	r28
    5b20:	08 95       	ret

00005b22 <CanWrite_Ctrl>:
    5b22:	20 91 19 2d 	lds	r18, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
    5b26:	91 e0       	ldi	r25, 0x01	; 1
    5b28:	92 0f       	add	r25, r18
    5b2a:	80 91 18 2d 	lds	r24, 0x2D18	; 0x802d18 <tx_ctrl_rdidx>
    5b2e:	9a 3f       	cpi	r25, 0xFA	; 250
    5b30:	10 f0       	brcs	.+4      	; 0x5b36 <CanWrite_Ctrl+0x14>
    5b32:	97 e0       	ldi	r25, 0x07	; 7
    5b34:	92 0f       	add	r25, r18
    5b36:	89 17       	cp	r24, r25
    5b38:	10 f0       	brcs	.+4      	; 0x5b3e <CanWrite_Ctrl+0x1c>
    5b3a:	89 1b       	sub	r24, r25
    5b3c:	08 95       	ret
    5b3e:	86 50       	subi	r24, 0x06	; 6
    5b40:	89 1b       	sub	r24, r25
    5b42:	08 95       	ret

00005b44 <WriteByte_Ctrl>:
    5b44:	0f 93       	push	r16
    5b46:	1f 93       	push	r17
    5b48:	cf 93       	push	r28
    5b4a:	df 93       	push	r29
    5b4c:	d8 2f       	mov	r29, r24
    5b4e:	00 eb       	ldi	r16, 0xB0	; 176
    5b50:	19 e0       	ldi	r17, 0x09	; 9
    5b52:	c1 e2       	ldi	r28, 0x21	; 33
    5b54:	02 c0       	rjmp	.+4      	; 0x5b5a <WriteByte_Ctrl+0x16>
    5b56:	f8 01       	movw	r30, r16
    5b58:	c3 83       	std	Z+3, r28	; 0x03
    5b5a:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <CanWrite_Ctrl>
    5b5e:	88 23       	and	r24, r24
    5b60:	d1 f3       	breq	.-12     	; 0x5b56 <WriteByte_Ctrl+0x12>
    5b62:	80 91 19 2d 	lds	r24, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
    5b66:	e8 2f       	mov	r30, r24
    5b68:	f0 e0       	ldi	r31, 0x00	; 0
    5b6a:	e2 5e       	subi	r30, 0xE2	; 226
    5b6c:	f3 4d       	sbci	r31, 0xD3	; 211
    5b6e:	d0 83       	st	Z, r29
    5b70:	8f 5f       	subi	r24, 0xFF	; 255
    5b72:	8a 3f       	cpi	r24, 0xFA	; 250
    5b74:	08 f0       	brcs	.+2      	; 0x5b78 <WriteByte_Ctrl+0x34>
    5b76:	80 e0       	ldi	r24, 0x00	; 0
    5b78:	e0 ea       	ldi	r30, 0xA0	; 160
    5b7a:	f0 e0       	ldi	r31, 0x00	; 0
    5b7c:	92 81       	ldd	r25, Z+2	; 0x02
    5b7e:	29 2f       	mov	r18, r25
    5b80:	2e 7f       	andi	r18, 0xFE	; 254
    5b82:	22 83       	std	Z+2, r18	; 0x02
    5b84:	80 93 19 2d 	sts	0x2D19, r24	; 0x802d19 <tx_ctrl_wridx>
    5b88:	81 e2       	ldi	r24, 0x21	; 33
    5b8a:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    5b8e:	92 83       	std	Z+2, r25	; 0x02
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	1f 91       	pop	r17
    5b96:	0f 91       	pop	r16
    5b98:	08 95       	ret

00005b9a <Ctrl_putchar>:
    5b9a:	cf 93       	push	r28
    5b9c:	c8 2f       	mov	r28, r24
    5b9e:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <WriteByte_Ctrl>
    5ba2:	ce 33       	cpi	r28, 0x3E	; 62
    5ba4:	19 f4       	brne	.+6      	; 0x5bac <Ctrl_putchar+0x12>
    5ba6:	10 92 ff 2a 	sts	0x2AFF, r1	; 0x802aff <checksum.4265>
    5baa:	23 c0       	rjmp	.+70     	; 0x5bf2 <Ctrl_putchar+0x58>
    5bac:	cc 33       	cpi	r28, 0x3C	; 60
    5bae:	e1 f4       	brne	.+56     	; 0x5be8 <Ctrl_putchar+0x4e>
    5bb0:	c0 91 ff 2a 	lds	r28, 0x2AFF	; 0x802aff <checksum.4265>
    5bb4:	8c 2f       	mov	r24, r28
    5bb6:	82 95       	swap	r24
    5bb8:	8f 70       	andi	r24, 0x0F	; 15
    5bba:	28 2f       	mov	r18, r24
    5bbc:	30 e0       	ldi	r19, 0x00	; 0
    5bbe:	2a 30       	cpi	r18, 0x0A	; 10
    5bc0:	31 05       	cpc	r19, r1
    5bc2:	14 f4       	brge	.+4      	; 0x5bc8 <Ctrl_putchar+0x2e>
    5bc4:	80 5d       	subi	r24, 0xD0	; 208
    5bc6:	01 c0       	rjmp	.+2      	; 0x5bca <Ctrl_putchar+0x30>
    5bc8:	89 5c       	subi	r24, 0xC9	; 201
    5bca:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <WriteByte_Ctrl>
    5bce:	cf 70       	andi	r28, 0x0F	; 15
    5bd0:	8c 2f       	mov	r24, r28
    5bd2:	90 e0       	ldi	r25, 0x00	; 0
    5bd4:	0a 97       	sbiw	r24, 0x0a	; 10
    5bd6:	1c f4       	brge	.+6      	; 0x5bde <Ctrl_putchar+0x44>
    5bd8:	80 e3       	ldi	r24, 0x30	; 48
    5bda:	8c 0f       	add	r24, r28
    5bdc:	02 c0       	rjmp	.+4      	; 0x5be2 <Ctrl_putchar+0x48>
    5bde:	87 e3       	ldi	r24, 0x37	; 55
    5be0:	8c 0f       	add	r24, r28
    5be2:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <WriteByte_Ctrl>
    5be6:	05 c0       	rjmp	.+10     	; 0x5bf2 <Ctrl_putchar+0x58>
    5be8:	80 91 ff 2a 	lds	r24, 0x2AFF	; 0x802aff <checksum.4265>
    5bec:	c8 27       	eor	r28, r24
    5bee:	c0 93 ff 2a 	sts	0x2AFF, r28	; 0x802aff <checksum.4265>
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	cf 91       	pop	r28
    5bf8:	08 95       	ret

00005bfa <__vector_88>:


ISR(USARTD0_RXC_vect) {
    5bfa:	1f 92       	push	r1
    5bfc:	0f 92       	push	r0
    5bfe:	0f b6       	in	r0, 0x3f	; 63
    5c00:	0f 92       	push	r0
    5c02:	11 24       	eor	r1, r1
    5c04:	0b b6       	in	r0, 0x3b	; 59
    5c06:	0f 92       	push	r0
    5c08:	8f 93       	push	r24
    5c0a:	9f 93       	push	r25
    5c0c:	ef 93       	push	r30
    5c0e:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_485_wridx;
    5c10:	80 91 cf 2d 	lds	r24, 0x2DCF	; 0x802dcf <rx_485_wridx>
	rx_485_buf[curSlot] = USARTD0.DATA;
    5c14:	e8 2f       	mov	r30, r24
    5c16:	f0 e0       	ldi	r31, 0x00	; 0
    5c18:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    5c1c:	e6 5e       	subi	r30, 0xE6	; 230
    5c1e:	f2 4d       	sbci	r31, 0xD2	; 210
    5c20:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5c22:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_COMM485)
    5c24:	84 3b       	cpi	r24, 0xB4	; 180
    5c26:	08 f0       	brcs	.+2      	; 0x5c2a <__vector_88+0x30>
	nextSlot = 0;
    5c28:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_485_rdidx)
    5c2a:	90 91 ce 2d 	lds	r25, 0x2DCE	; 0x802dce <rx_485_rdidx>
    5c2e:	89 13       	cpse	r24, r25
	rx_485_wridx = nextSlot;
    5c30:	80 93 cf 2d 	sts	0x2DCF, r24	; 0x802dcf <rx_485_wridx>
	
} /* ISR(USARTD0_RXC_vect) */
    5c34:	ff 91       	pop	r31
    5c36:	ef 91       	pop	r30
    5c38:	9f 91       	pop	r25
    5c3a:	8f 91       	pop	r24
    5c3c:	0f 90       	pop	r0
    5c3e:	0b be       	out	0x3b, r0	; 59
    5c40:	0f 90       	pop	r0
    5c42:	0f be       	out	0x3f, r0	; 63
    5c44:	0f 90       	pop	r0
    5c46:	1f 90       	pop	r1
    5c48:	18 95       	reti

00005c4a <__vector_89>:


ISR(USARTD0_DRE_vect) {
    5c4a:	1f 92       	push	r1
    5c4c:	0f 92       	push	r0
    5c4e:	0f b6       	in	r0, 0x3f	; 63
    5c50:	0f 92       	push	r0
    5c52:	11 24       	eor	r1, r1
    5c54:	0b b6       	in	r0, 0x3b	; 59
    5c56:	0f 92       	push	r0
    5c58:	2f 93       	push	r18
    5c5a:	8f 93       	push	r24
    5c5c:	9f 93       	push	r25
    5c5e:	ef 93       	push	r30
    5c60:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_485_rdidx;
    5c62:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <tx_485_rdidx>
	lastSlot = tx_485_wridx;
    5c66:	90 91 86 2e 	lds	r25, 0x2E86	; 0x802e86 <tx_485_wridx>
	
	if(curSlot != lastSlot) {
    5c6a:	89 17       	cp	r24, r25
    5c6c:	69 f0       	breq	.+26     	; 0x5c88 <__vector_89+0x3e>
		USARTD0.DATA = tx_485_buf[curSlot];
    5c6e:	e8 2f       	mov	r30, r24
    5c70:	f0 e0       	ldi	r31, 0x00	; 0
    5c72:	ef 52       	subi	r30, 0x2F	; 47
    5c74:	f2 4d       	sbci	r31, 0xD2	; 210
    5c76:	20 81       	ld	r18, Z
    5c78:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
		if(++nextSlot >= TXBUF_DEPTH_COMM485)
    5c7c:	8f 5f       	subi	r24, 0xFF	; 255
    5c7e:	84 3b       	cpi	r24, 0xB4	; 180
    5c80:	08 f0       	brcs	.+2      	; 0x5c84 <__vector_89+0x3a>
		nextSlot = 0;
    5c82:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5c84:	89 13       	cpse	r24, r25
    5c86:	04 c0       	rjmp	.+8      	; 0x5c90 <__vector_89+0x46>
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_LO_gc | USART_DREINTLVL_OFF_gc;
    5c88:	84 e2       	ldi	r24, 0x24	; 36
    5c8a:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
    5c8e:	89 2f       	mov	r24, r25
	
	tx_485_rdidx = nextSlot;
    5c90:	80 93 85 2e 	sts	0x2E85, r24	; 0x802e85 <tx_485_rdidx>
	
} /* ISR(USARTD0_DRE_vect) */
    5c94:	ff 91       	pop	r31
    5c96:	ef 91       	pop	r30
    5c98:	9f 91       	pop	r25
    5c9a:	8f 91       	pop	r24
    5c9c:	2f 91       	pop	r18
    5c9e:	0f 90       	pop	r0
    5ca0:	0b be       	out	0x3b, r0	; 59
    5ca2:	0f 90       	pop	r0
    5ca4:	0f be       	out	0x3f, r0	; 63
    5ca6:	0f 90       	pop	r0
    5ca8:	1f 90       	pop	r1
    5caa:	18 95       	reti

00005cac <__vector_90>:


ISR(USARTD0_TXC_vect) {
    5cac:	1f 92       	push	r1
    5cae:	0f 92       	push	r0
    5cb0:	0f b6       	in	r0, 0x3f	; 63
    5cb2:	0f 92       	push	r0
    5cb4:	11 24       	eor	r1, r1
    5cb6:	8f 93       	push	r24
    5cb8:	9f 93       	push	r25
	
	if(tx_485_rdidx == tx_485_wridx) {/* Still no bytes to tx ? */
    5cba:	90 91 85 2e 	lds	r25, 0x2E85	; 0x802e85 <tx_485_rdidx>
    5cbe:	80 91 86 2e 	lds	r24, 0x2E86	; 0x802e86 <tx_485_wridx>
    5cc2:	98 13       	cpse	r25, r24
    5cc4:	06 c0       	rjmp	.+12     	; 0x5cd2 <__vector_90+0x26>
		PORTD.OUTCLR = PD_DRIVER_ENABLE_COMM485; /* Transmission complete; we can turn off the driver enable line */
    5cc6:	82 e0       	ldi	r24, 0x02	; 2
    5cc8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		tx_485_busy = 0;
    5ccc:	10 92 d0 2d 	sts	0x2DD0, r1	; 0x802dd0 <tx_485_busy>
    5cd0:	03 c0       	rjmp	.+6      	; 0x5cd8 <__vector_90+0x2c>
	}	
	else /* Re-enable TX ISR */
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    5cd2:	81 e2       	ldi	r24, 0x21	; 33
    5cd4:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
	
} /* ISR(USARTD0_TXC_vect) */
    5cd8:	9f 91       	pop	r25
    5cda:	8f 91       	pop	r24
    5cdc:	0f 90       	pop	r0
    5cde:	0f be       	out	0x3f, r0	; 63
    5ce0:	0f 90       	pop	r0
    5ce2:	1f 90       	pop	r1
    5ce4:	18 95       	reti

00005ce6 <__vector_91>:


ISR(USARTD1_RXC_vect) {
    5ce6:	1f 92       	push	r1
    5ce8:	0f 92       	push	r0
    5cea:	0f b6       	in	r0, 0x3f	; 63
    5cec:	0f 92       	push	r0
    5cee:	11 24       	eor	r1, r1
    5cf0:	0b b6       	in	r0, 0x3b	; 59
    5cf2:	0f 92       	push	r0
    5cf4:	8f 93       	push	r24
    5cf6:	9f 93       	push	r25
    5cf8:	ef 93       	push	r30
    5cfa:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_ctrl_wridx;
    5cfc:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <rx_ctrl_wridx>
	rx_ctrl_buf[curSlot] = USARTD1.DATA;
    5d00:	e8 2f       	mov	r30, r24
    5d02:	f0 e0       	ldi	r31, 0x00	; 0
    5d04:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    5d08:	e4 53       	subi	r30, 0x34	; 52
    5d0a:	f4 4d       	sbci	r31, 0xD4	; 212
    5d0c:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5d0e:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_CTRL)
    5d10:	80 35       	cpi	r24, 0x50	; 80
    5d12:	08 f0       	brcs	.+2      	; 0x5d16 <__vector_91+0x30>
		nextSlot = 0;
    5d14:	80 e0       	ldi	r24, 0x00	; 0
		
	if(nextSlot != rx_ctrl_rdidx)
    5d16:	90 91 1c 2c 	lds	r25, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5d1a:	89 13       	cpse	r24, r25
		rx_ctrl_wridx = nextSlot;
    5d1c:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <rx_ctrl_wridx>
	
} /* ISR(USARTD1_RXC_vect) */
    5d20:	ff 91       	pop	r31
    5d22:	ef 91       	pop	r30
    5d24:	9f 91       	pop	r25
    5d26:	8f 91       	pop	r24
    5d28:	0f 90       	pop	r0
    5d2a:	0b be       	out	0x3b, r0	; 59
    5d2c:	0f 90       	pop	r0
    5d2e:	0f be       	out	0x3f, r0	; 63
    5d30:	0f 90       	pop	r0
    5d32:	1f 90       	pop	r1
    5d34:	18 95       	reti

00005d36 <__vector_92>:


ISR(USARTD1_DRE_vect) {
    5d36:	1f 92       	push	r1
    5d38:	0f 92       	push	r0
    5d3a:	0f b6       	in	r0, 0x3f	; 63
    5d3c:	0f 92       	push	r0
    5d3e:	11 24       	eor	r1, r1
    5d40:	0b b6       	in	r0, 0x3b	; 59
    5d42:	0f 92       	push	r0
    5d44:	2f 93       	push	r18
    5d46:	8f 93       	push	r24
    5d48:	9f 93       	push	r25
    5d4a:	ef 93       	push	r30
    5d4c:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_ctrl_rdidx;
    5d4e:	80 91 18 2d 	lds	r24, 0x2D18	; 0x802d18 <tx_ctrl_rdidx>
	lastSlot = tx_ctrl_wridx;
    5d52:	90 91 19 2d 	lds	r25, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
	
	if(curSlot != lastSlot) {
    5d56:	89 17       	cp	r24, r25
    5d58:	69 f0       	breq	.+26     	; 0x5d74 <__vector_92+0x3e>
		USARTD1.DATA = tx_ctrl_buf[curSlot];
    5d5a:	e8 2f       	mov	r30, r24
    5d5c:	f0 e0       	ldi	r31, 0x00	; 0
    5d5e:	e2 5e       	subi	r30, 0xE2	; 226
    5d60:	f3 4d       	sbci	r31, 0xD3	; 211
    5d62:	20 81       	ld	r18, Z
    5d64:	20 93 b0 09 	sts	0x09B0, r18	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
		nextSlot = curSlot + 1;
    5d68:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_CTRL)
    5d6a:	8a 3f       	cpi	r24, 0xFA	; 250
    5d6c:	08 f0       	brcs	.+2      	; 0x5d70 <__vector_92+0x3a>
			nextSlot = 0;
    5d6e:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5d70:	89 13       	cpse	r24, r25
    5d72:	04 c0       	rjmp	.+8      	; 0x5d7c <__vector_92+0x46>
		USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5d74:	80 e2       	ldi	r24, 0x20	; 32
    5d76:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    5d7a:	89 2f       	mov	r24, r25
	
	tx_ctrl_rdidx = nextSlot;
    5d7c:	80 93 18 2d 	sts	0x2D18, r24	; 0x802d18 <tx_ctrl_rdidx>
	
} /* ISR(USARTD1_DRE_vect) */
    5d80:	ff 91       	pop	r31
    5d82:	ef 91       	pop	r30
    5d84:	9f 91       	pop	r25
    5d86:	8f 91       	pop	r24
    5d88:	2f 91       	pop	r18
    5d8a:	0f 90       	pop	r0
    5d8c:	0b be       	out	0x3b, r0	; 59
    5d8e:	0f 90       	pop	r0
    5d90:	0f be       	out	0x3f, r0	; 63
    5d92:	0f 90       	pop	r0
    5d94:	1f 90       	pop	r1
    5d96:	18 95       	reti

00005d98 <__vector_119>:


ISR(USARTF0_RXC_vect) {
    5d98:	1f 92       	push	r1
    5d9a:	0f 92       	push	r0
    5d9c:	0f b6       	in	r0, 0x3f	; 63
    5d9e:	0f 92       	push	r0
    5da0:	11 24       	eor	r1, r1
    5da2:	0b b6       	in	r0, 0x3b	; 59
    5da4:	0f 92       	push	r0
    5da6:	8f 93       	push	r24
    5da8:	9f 93       	push	r25
    5daa:	ef 93       	push	r30
    5dac:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_fc_wridx;
    5dae:	80 91 65 2b 	lds	r24, 0x2B65	; 0x802b65 <rx_fc_wridx>
	rx_fc_buf[curSlot] = USARTF0.DATA;
    5db2:	e8 2f       	mov	r30, r24
    5db4:	f0 e0       	ldi	r31, 0x00	; 0
    5db6:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    5dba:	e0 50       	subi	r30, 0x00	; 0
    5dbc:	f5 4d       	sbci	r31, 0xD5	; 213
    5dbe:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5dc0:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_FC)
    5dc2:	84 36       	cpi	r24, 0x64	; 100
    5dc4:	08 f0       	brcs	.+2      	; 0x5dc8 <__vector_119+0x30>
	nextSlot = 0;
    5dc6:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_fc_rdidx)
    5dc8:	90 91 64 2b 	lds	r25, 0x2B64	; 0x802b64 <rx_fc_rdidx>
    5dcc:	89 13       	cpse	r24, r25
	rx_fc_wridx = nextSlot;
    5dce:	80 93 65 2b 	sts	0x2B65, r24	; 0x802b65 <rx_fc_wridx>
	
} /* ISR(USARTF0_RXC_vect) */
    5dd2:	ff 91       	pop	r31
    5dd4:	ef 91       	pop	r30
    5dd6:	9f 91       	pop	r25
    5dd8:	8f 91       	pop	r24
    5dda:	0f 90       	pop	r0
    5ddc:	0b be       	out	0x3b, r0	; 59
    5dde:	0f 90       	pop	r0
    5de0:	0f be       	out	0x3f, r0	; 63
    5de2:	0f 90       	pop	r0
    5de4:	1f 90       	pop	r1
    5de6:	18 95       	reti

00005de8 <__vector_120>:


ISR(USARTF0_DRE_vect) {
    5de8:	1f 92       	push	r1
    5dea:	0f 92       	push	r0
    5dec:	0f b6       	in	r0, 0x3f	; 63
    5dee:	0f 92       	push	r0
    5df0:	11 24       	eor	r1, r1
    5df2:	0b b6       	in	r0, 0x3b	; 59
    5df4:	0f 92       	push	r0
    5df6:	2f 93       	push	r18
    5df8:	8f 93       	push	r24
    5dfa:	9f 93       	push	r25
    5dfc:	ef 93       	push	r30
    5dfe:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_fc_rdidx;
    5e00:	80 91 ca 2b 	lds	r24, 0x2BCA	; 0x802bca <tx_fc_rdidx>
	lastSlot = tx_fc_wridx;
    5e04:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <tx_fc_wridx>
	
	if(curSlot != lastSlot) {
    5e08:	89 17       	cp	r24, r25
    5e0a:	69 f0       	breq	.+26     	; 0x5e26 <__vector_120+0x3e>
		USARTF0.DATA = tx_fc_buf[curSlot];
    5e0c:	e8 2f       	mov	r30, r24
    5e0e:	f0 e0       	ldi	r31, 0x00	; 0
    5e10:	ea 59       	subi	r30, 0x9A	; 154
    5e12:	f4 4d       	sbci	r31, 0xD4	; 212
    5e14:	20 81       	ld	r18, Z
    5e16:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
		nextSlot = curSlot + 1;
    5e1a:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_FC)
    5e1c:	84 36       	cpi	r24, 0x64	; 100
    5e1e:	08 f0       	brcs	.+2      	; 0x5e22 <__vector_120+0x3a>
		nextSlot = 0;
    5e20:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5e22:	89 13       	cpse	r24, r25
    5e24:	04 c0       	rjmp	.+8      	; 0x5e2e <__vector_120+0x46>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5e26:	80 e2       	ldi	r24, 0x20	; 32
    5e28:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
    5e2c:	89 2f       	mov	r24, r25
	
	tx_fc_rdidx = nextSlot;
    5e2e:	80 93 ca 2b 	sts	0x2BCA, r24	; 0x802bca <tx_fc_rdidx>
	
} /* ISR(USARTF0_DRE_vect) */
    5e32:	ff 91       	pop	r31
    5e34:	ef 91       	pop	r30
    5e36:	9f 91       	pop	r25
    5e38:	8f 91       	pop	r24
    5e3a:	2f 91       	pop	r18
    5e3c:	0f 90       	pop	r0
    5e3e:	0b be       	out	0x3b, r0	; 59
    5e40:	0f 90       	pop	r0
    5e42:	0f be       	out	0x3f, r0	; 63
    5e44:	0f 90       	pop	r0
    5e46:	1f 90       	pop	r1
    5e48:	18 95       	reti

00005e4a <InitTimer>:
#include "Timers.h"


void InitTimer(void) {

	TCE0.CTRLA = TC_CLKSEL_DIV8_gc;
    5e4a:	e0 e0       	ldi	r30, 0x00	; 0
    5e4c:	fa e0       	ldi	r31, 0x0A	; 10
    5e4e:	84 e0       	ldi	r24, 0x04	; 4
    5e50:	80 83       	st	Z, r24
	TCE0.CTRLB = 0x00; /* No input capture, normal mode */
    5e52:	11 82       	std	Z+1, r1	; 0x01
	/* CTRLC is of no interest to us */
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc; /* No events */
    5e54:	13 82       	std	Z+3, r1	; 0x03
	TCE0.CTRLE = 0x00; /* No byte mode */
    5e56:	14 82       	std	Z+4, r1	; 0x04
	TCE0.PER = TICKTIMER_PERIOD;
    5e58:	8f ef       	ldi	r24, 0xFF	; 255
    5e5a:	9f ef       	ldi	r25, 0xFF	; 255
    5e5c:	86 a3       	std	Z+38, r24	; 0x26
    5e5e:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc; /* No interrupts (for now) */
    5e60:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = 0x00; /* Disable Compare/Capture interrupts */
    5e62:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    5e64:	10 a2       	std	Z+32, r1	; 0x20
    5e66:	11 a2       	std	Z+33, r1	; 0x21
    5e68:	08 95       	ret

00005e6a <GetTicks>:

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    5e6a:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    5e6e:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
} /* GetTicks */
    5e72:	08 95       	ret

00005e74 <BusyWaitTillAfter>:


timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
    5e74:	9c 01       	movw	r18, r24
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
    5e76:	66 0f       	add	r22, r22
    5e78:	77 1f       	adc	r23, r23
    5e7a:	66 0f       	add	r22, r22
    5e7c:	77 1f       	adc	r23, r23
	TCE0.CNT = 0;

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    5e7e:	e0 e0       	ldi	r30, 0x00	; 0
    5e80:	fa e0       	ldi	r31, 0x0A	; 10
    5e82:	80 a1       	ldd	r24, Z+32	; 0x20
    5e84:	91 a1       	ldd	r25, Z+33	; 0x21
timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
	
	do {
		now = GetTicks();
		if(now < then) // Fix wraparound
    5e86:	82 17       	cp	r24, r18
    5e88:	93 07       	cpc	r25, r19
    5e8a:	08 f4       	brcc	.+2      	; 0x5e8e <BusyWaitTillAfter+0x1a>
		now += TICKTIMER_PERIOD;
    5e8c:	01 97       	sbiw	r24, 0x01	; 1
		delta = now - then;
	} while(delta < tickWait);
    5e8e:	ac 01       	movw	r20, r24
    5e90:	42 1b       	sub	r20, r18
    5e92:	53 0b       	sbc	r21, r19
    5e94:	46 17       	cp	r20, r22
    5e96:	57 07       	cpc	r21, r23
    5e98:	a0 f3       	brcs	.-24     	; 0x5e82 <BusyWaitTillAfter+0xe>
	
	return now;
	
} /* BusyWaitTillAfter */
    5e9a:	08 95       	ret

00005e9c <GetBusID>:

void FinishEEPROMOperations(void) {
	
	eeprom_busy_wait();
	
} /* FinishEEPROMOperations */
    5e9c:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    5ea0:	80 73       	andi	r24, 0x30	; 48
    5ea2:	80 31       	cpi	r24, 0x10	; 16
    5ea4:	29 f0       	breq	.+10     	; 0x5eb0 <GetBusID+0x14>
    5ea6:	80 32       	cpi	r24, 0x20	; 32
    5ea8:	29 f0       	breq	.+10     	; 0x5eb4 <GetBusID+0x18>
    5eaa:	81 11       	cpse	r24, r1
    5eac:	05 c0       	rjmp	.+10     	; 0x5eb8 <GetBusID+0x1c>
    5eae:	06 c0       	rjmp	.+12     	; 0x5ebc <GetBusID+0x20>
    5eb0:	85 e0       	ldi	r24, 0x05	; 5
    5eb2:	08 95       	ret
    5eb4:	86 e0       	ldi	r24, 0x06	; 6
    5eb6:	08 95       	ret
    5eb8:	87 e0       	ldi	r24, 0x07	; 7
    5eba:	08 95       	ret
    5ebc:	83 e0       	ldi	r24, 0x03	; 3
    5ebe:	08 95       	ret

00005ec0 <PrintBoardType>:
    5ec0:	9c 01       	movw	r18, r24
    5ec2:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    5ec6:	90 73       	andi	r25, 0x30	; 48
    5ec8:	90 31       	cpi	r25, 0x10	; 16
    5eca:	91 f0       	breq	.+36     	; 0x5ef0 <PrintBoardType+0x30>
    5ecc:	18 f4       	brcc	.+6      	; 0x5ed4 <PrintBoardType+0x14>
    5ece:	99 23       	and	r25, r25
    5ed0:	31 f0       	breq	.+12     	; 0x5ede <PrintBoardType+0x1e>
    5ed2:	29 c0       	rjmp	.+82     	; 0x5f26 <PrintBoardType+0x66>
    5ed4:	90 32       	cpi	r25, 0x20	; 32
    5ed6:	a9 f0       	breq	.+42     	; 0x5f02 <PrintBoardType+0x42>
    5ed8:	90 33       	cpi	r25, 0x30	; 48
    5eda:	e1 f0       	breq	.+56     	; 0x5f14 <PrintBoardType+0x54>
    5edc:	24 c0       	rjmp	.+72     	; 0x5f26 <PrintBoardType+0x66>
    5ede:	43 e0       	ldi	r20, 0x03	; 3
    5ee0:	50 e0       	ldi	r21, 0x00	; 0
    5ee2:	61 e0       	ldi	r22, 0x01	; 1
    5ee4:	70 e0       	ldi	r23, 0x00	; 0
    5ee6:	8b e5       	ldi	r24, 0x5B	; 91
    5ee8:	97 e2       	ldi	r25, 0x27	; 39
    5eea:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    5eee:	08 95       	ret
    5ef0:	48 e0       	ldi	r20, 0x08	; 8
    5ef2:	50 e0       	ldi	r21, 0x00	; 0
    5ef4:	61 e0       	ldi	r22, 0x01	; 1
    5ef6:	70 e0       	ldi	r23, 0x00	; 0
    5ef8:	8f e5       	ldi	r24, 0x5F	; 95
    5efa:	97 e2       	ldi	r25, 0x27	; 39
    5efc:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    5f00:	08 95       	ret
    5f02:	49 e0       	ldi	r20, 0x09	; 9
    5f04:	50 e0       	ldi	r21, 0x00	; 0
    5f06:	61 e0       	ldi	r22, 0x01	; 1
    5f08:	70 e0       	ldi	r23, 0x00	; 0
    5f0a:	88 e6       	ldi	r24, 0x68	; 104
    5f0c:	97 e2       	ldi	r25, 0x27	; 39
    5f0e:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    5f12:	08 95       	ret
    5f14:	4f e0       	ldi	r20, 0x0F	; 15
    5f16:	50 e0       	ldi	r21, 0x00	; 0
    5f18:	61 e0       	ldi	r22, 0x01	; 1
    5f1a:	70 e0       	ldi	r23, 0x00	; 0
    5f1c:	82 e7       	ldi	r24, 0x72	; 114
    5f1e:	97 e2       	ldi	r25, 0x27	; 39
    5f20:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    5f24:	08 95       	ret
    5f26:	47 e0       	ldi	r20, 0x07	; 7
    5f28:	50 e0       	ldi	r21, 0x00	; 0
    5f2a:	61 e0       	ldi	r22, 0x01	; 1
    5f2c:	70 e0       	ldi	r23, 0x00	; 0
    5f2e:	82 e8       	ldi	r24, 0x82	; 130
    5f30:	97 e2       	ldi	r25, 0x27	; 39
    5f32:	0e 94 8d 37 	call	0x6f1a	; 0x6f1a <fwrite>
    5f36:	08 95       	ret

00005f38 <PrintProcessorID>:
    5f38:	cf 92       	push	r12
    5f3a:	df 92       	push	r13
    5f3c:	ef 92       	push	r14
    5f3e:	ff 92       	push	r15
    5f40:	0f 93       	push	r16
    5f42:	1f 93       	push	r17
    5f44:	cf 93       	push	r28
    5f46:	df 93       	push	r29
    5f48:	f8 2e       	mov	r15, r24
    5f4a:	e9 2e       	mov	r14, r25
    5f4c:	e0 e9       	ldi	r30, 0x90	; 144
    5f4e:	f0 e0       	ldi	r31, 0x00	; 0
    5f50:	33 81       	ldd	r19, Z+3	; 0x03
    5f52:	22 81       	ldd	r18, Z+2	; 0x02
    5f54:	91 81       	ldd	r25, Z+1	; 0x01
    5f56:	80 81       	ld	r24, Z
    5f58:	1f 92       	push	r1
    5f5a:	3f 93       	push	r19
    5f5c:	1f 92       	push	r1
    5f5e:	2f 93       	push	r18
    5f60:	1f 92       	push	r1
    5f62:	9f 93       	push	r25
    5f64:	1f 92       	push	r1
    5f66:	8f 93       	push	r24
    5f68:	8a e8       	ldi	r24, 0x8A	; 138
    5f6a:	97 e2       	ldi	r25, 0x27	; 39
    5f6c:	9f 93       	push	r25
    5f6e:	8f 93       	push	r24
    5f70:	ef 92       	push	r14
    5f72:	ff 92       	push	r15
    5f74:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    5f78:	c7 e8       	ldi	r28, 0x87	; 135
    5f7a:	de e2       	ldi	r29, 0x2E	; 46
    5f7c:	0f 2e       	mov	r0, r31
    5f7e:	f2 e9       	ldi	r31, 0x92	; 146
    5f80:	cf 2e       	mov	r12, r31
    5f82:	fe e2       	ldi	r31, 0x2E	; 46
    5f84:	df 2e       	mov	r13, r31
    5f86:	f0 2d       	mov	r31, r0
    5f88:	8d b7       	in	r24, 0x3d	; 61
    5f8a:	9e b7       	in	r25, 0x3e	; 62
    5f8c:	0c 96       	adiw	r24, 0x0c	; 12
    5f8e:	8d bf       	out	0x3d, r24	; 61
    5f90:	9e bf       	out	0x3e, r25	; 62
    5f92:	0d eb       	ldi	r16, 0xBD	; 189
    5f94:	11 e2       	ldi	r17, 0x21	; 33
    5f96:	89 91       	ld	r24, Y+
    5f98:	1f 92       	push	r1
    5f9a:	8f 93       	push	r24
    5f9c:	1f 93       	push	r17
    5f9e:	0f 93       	push	r16
    5fa0:	ef 92       	push	r14
    5fa2:	ff 92       	push	r15
    5fa4:	0e 94 41 37 	call	0x6e82	; 0x6e82 <fprintf>
    5fa8:	0f 90       	pop	r0
    5faa:	0f 90       	pop	r0
    5fac:	0f 90       	pop	r0
    5fae:	0f 90       	pop	r0
    5fb0:	0f 90       	pop	r0
    5fb2:	0f 90       	pop	r0
    5fb4:	cc 15       	cp	r28, r12
    5fb6:	dd 05       	cpc	r29, r13
    5fb8:	71 f7       	brne	.-36     	; 0x5f96 <PrintProcessorID+0x5e>
    5fba:	df 91       	pop	r29
    5fbc:	cf 91       	pop	r28
    5fbe:	1f 91       	pop	r17
    5fc0:	0f 91       	pop	r16
    5fc2:	ff 90       	pop	r15
    5fc4:	ef 90       	pop	r14
    5fc6:	df 90       	pop	r13
    5fc8:	cf 90       	pop	r12
    5fca:	08 95       	ret

00005fcc <TryReadEEPROM>:
    5fcc:	ef 92       	push	r14
    5fce:	ff 92       	push	r15
    5fd0:	0f 93       	push	r16
    5fd2:	1f 93       	push	r17
    5fd4:	cf 93       	push	r28
    5fd6:	df 93       	push	r29
    5fd8:	cd b7       	in	r28, 0x3d	; 61
    5fda:	de b7       	in	r29, 0x3e	; 62
    5fdc:	28 97       	sbiw	r28, 0x08	; 8
    5fde:	cd bf       	out	0x3d, r28	; 61
    5fe0:	de bf       	out	0x3e, r29	; 62
    5fe2:	7c 01       	movw	r14, r24
    5fe4:	8a 01       	movw	r16, r20
    5fe6:	44 0f       	add	r20, r20
    5fe8:	55 1f       	adc	r21, r21
    5fea:	ce 01       	movw	r24, r28
    5fec:	01 96       	adiw	r24, 0x01	; 1
    5fee:	0e 94 aa 3a 	call	0x7554	; 0x7554 <eeprom_read_block>
    5ff2:	01 15       	cp	r16, r1
    5ff4:	11 05       	cpc	r17, r1
    5ff6:	09 f4       	brne	.+2      	; 0x5ffa <TryReadEEPROM+0x2e>
    5ff8:	41 c0       	rjmp	.+130    	; 0x607c <__stack+0x7d>
    5ffa:	20 e0       	ldi	r18, 0x00	; 0
    5ffc:	30 e0       	ldi	r19, 0x00	; 0
    5ffe:	40 e0       	ldi	r20, 0x00	; 0
    6000:	e1 e0       	ldi	r30, 0x01	; 1
    6002:	f0 e0       	ldi	r31, 0x00	; 0
    6004:	ec 0f       	add	r30, r28
    6006:	fd 1f       	adc	r31, r29
    6008:	e4 0f       	add	r30, r20
    600a:	f1 1d       	adc	r31, r1
    600c:	47 fd       	sbrc	r20, 7
    600e:	fa 95       	dec	r31
    6010:	50 81       	ld	r21, Z
    6012:	81 e0       	ldi	r24, 0x01	; 1
    6014:	90 e0       	ldi	r25, 0x00	; 0
    6016:	8c 0f       	add	r24, r28
    6018:	9d 1f       	adc	r25, r29
    601a:	28 0f       	add	r18, r24
    601c:	39 1f       	adc	r19, r25
    601e:	f9 01       	movw	r30, r18
    6020:	e0 0f       	add	r30, r16
    6022:	f1 1f       	adc	r31, r17
    6024:	90 81       	ld	r25, Z
    6026:	90 95       	com	r25
    6028:	81 e0       	ldi	r24, 0x01	; 1
    602a:	59 13       	cpse	r21, r25
    602c:	01 c0       	rjmp	.+2      	; 0x6030 <__stack+0x31>
    602e:	80 e0       	ldi	r24, 0x00	; 0
    6030:	4f 5f       	subi	r20, 0xFF	; 255
    6032:	24 2f       	mov	r18, r20
    6034:	04 2e       	mov	r0, r20
    6036:	00 0c       	add	r0, r0
    6038:	33 0b       	sbc	r19, r19
    603a:	20 17       	cp	r18, r16
    603c:	31 07       	cpc	r19, r17
    603e:	18 f4       	brcc	.+6      	; 0x6046 <__stack+0x47>
    6040:	59 17       	cp	r21, r25
    6042:	f1 f2       	breq	.-68     	; 0x6000 <__stack+0x1>
    6044:	1c c0       	rjmp	.+56     	; 0x607e <__stack+0x7f>
    6046:	59 13       	cpse	r21, r25
    6048:	1a c0       	rjmp	.+52     	; 0x607e <__stack+0x7f>
    604a:	20 e0       	ldi	r18, 0x00	; 0
    604c:	30 e0       	ldi	r19, 0x00	; 0
    604e:	90 e0       	ldi	r25, 0x00	; 0
    6050:	d7 01       	movw	r26, r14
    6052:	a2 0f       	add	r26, r18
    6054:	b3 1f       	adc	r27, r19
    6056:	e1 e0       	ldi	r30, 0x01	; 1
    6058:	f0 e0       	ldi	r31, 0x00	; 0
    605a:	ec 0f       	add	r30, r28
    605c:	fd 1f       	adc	r31, r29
    605e:	e9 0f       	add	r30, r25
    6060:	f1 1d       	adc	r31, r1
    6062:	97 fd       	sbrc	r25, 7
    6064:	fa 95       	dec	r31
    6066:	40 81       	ld	r20, Z
    6068:	4c 93       	st	X, r20
    606a:	9f 5f       	subi	r25, 0xFF	; 255
    606c:	29 2f       	mov	r18, r25
    606e:	09 2e       	mov	r0, r25
    6070:	00 0c       	add	r0, r0
    6072:	33 0b       	sbc	r19, r19
    6074:	20 17       	cp	r18, r16
    6076:	31 07       	cpc	r19, r17
    6078:	58 f3       	brcs	.-42     	; 0x6050 <__stack+0x51>
    607a:	01 c0       	rjmp	.+2      	; 0x607e <__stack+0x7f>
    607c:	80 e0       	ldi	r24, 0x00	; 0
    607e:	28 96       	adiw	r28, 0x08	; 8
    6080:	cd bf       	out	0x3d, r28	; 61
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	df 91       	pop	r29
    6086:	cf 91       	pop	r28
    6088:	1f 91       	pop	r17
    608a:	0f 91       	pop	r16
    608c:	ff 90       	pop	r15
    608e:	ef 90       	pop	r14
    6090:	08 95       	ret

00006092 <UpdateEEPROM>:
    6092:	0f 93       	push	r16
    6094:	1f 93       	push	r17
    6096:	cf 93       	push	r28
    6098:	df 93       	push	r29
    609a:	cd b7       	in	r28, 0x3d	; 61
    609c:	de b7       	in	r29, 0x3e	; 62
    609e:	28 97       	sbiw	r28, 0x08	; 8
    60a0:	cd bf       	out	0x3d, r28	; 61
    60a2:	de bf       	out	0x3e, r29	; 62
    60a4:	8c 01       	movw	r16, r24
    60a6:	da 01       	movw	r26, r20
    60a8:	10 97       	sbiw	r26, 0x00	; 0
    60aa:	19 f1       	breq	.+70     	; 0x60f2 <UpdateEEPROM+0x60>
    60ac:	20 e0       	ldi	r18, 0x00	; 0
    60ae:	30 e0       	ldi	r19, 0x00	; 0
    60b0:	50 e0       	ldi	r21, 0x00	; 0
    60b2:	f8 01       	movw	r30, r16
    60b4:	e2 0f       	add	r30, r18
    60b6:	f3 1f       	adc	r31, r19
    60b8:	90 81       	ld	r25, Z
    60ba:	e1 e0       	ldi	r30, 0x01	; 1
    60bc:	f0 e0       	ldi	r31, 0x00	; 0
    60be:	ec 0f       	add	r30, r28
    60c0:	fd 1f       	adc	r31, r29
    60c2:	e5 0f       	add	r30, r21
    60c4:	f1 1d       	adc	r31, r1
    60c6:	57 fd       	sbrc	r21, 7
    60c8:	fa 95       	dec	r31
    60ca:	90 83       	st	Z, r25
    60cc:	e1 e0       	ldi	r30, 0x01	; 1
    60ce:	f0 e0       	ldi	r31, 0x00	; 0
    60d0:	ec 0f       	add	r30, r28
    60d2:	fd 1f       	adc	r31, r29
    60d4:	2e 0f       	add	r18, r30
    60d6:	3f 1f       	adc	r19, r31
    60d8:	f9 01       	movw	r30, r18
    60da:	ea 0f       	add	r30, r26
    60dc:	fb 1f       	adc	r31, r27
    60de:	90 95       	com	r25
    60e0:	90 83       	st	Z, r25
    60e2:	5f 5f       	subi	r21, 0xFF	; 255
    60e4:	25 2f       	mov	r18, r21
    60e6:	05 2e       	mov	r0, r21
    60e8:	00 0c       	add	r0, r0
    60ea:	33 0b       	sbc	r19, r19
    60ec:	2a 17       	cp	r18, r26
    60ee:	3b 07       	cpc	r19, r27
    60f0:	00 f3       	brcs	.-64     	; 0x60b2 <UpdateEEPROM+0x20>
    60f2:	ad 01       	movw	r20, r26
    60f4:	44 0f       	add	r20, r20
    60f6:	55 1f       	adc	r21, r21
    60f8:	ce 01       	movw	r24, r28
    60fa:	01 96       	adiw	r24, 0x01	; 1
    60fc:	0e 94 b6 3a 	call	0x756c	; 0x756c <eeprom_update_block>
    6100:	28 96       	adiw	r28, 0x08	; 8
    6102:	cd bf       	out	0x3d, r28	; 61
    6104:	de bf       	out	0x3e, r29	; 62
    6106:	df 91       	pop	r29
    6108:	cf 91       	pop	r28
    610a:	1f 91       	pop	r17
    610c:	0f 91       	pop	r16
    610e:	08 95       	ret

00006110 <ReadCalibrationByte>:


uint8_t ReadCalibrationByte(uint8_t index) {
	uint8_t result;
	
	NVM.CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6110:	a0 ec       	ldi	r26, 0xC0	; 192
    6112:	b1 e0       	ldi	r27, 0x01	; 1
    6114:	92 e0       	ldi	r25, 0x02	; 2
    6116:	1a 96       	adiw	r26, 0x0a	; 10
    6118:	9c 93       	st	X, r25
    611a:	1a 97       	sbiw	r26, 0x0a	; 10
	result = pgm_read_byte(index);
    611c:	e8 2f       	mov	r30, r24
    611e:	f0 e0       	ldi	r31, 0x00	; 0
    6120:	84 91       	lpm	r24, Z
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    6122:	1a 96       	adiw	r26, 0x0a	; 10
    6124:	1c 92       	st	X, r1
	
	return result;
} /* ReadCalibrationByte */
    6126:	08 95       	ret

00006128 <InitUtil>:

#define PROCID_LEN 11

static uint8_t sProcID[PROCID_LEN];

void InitUtil(void) {
    6128:	cf 93       	push	r28
    612a:	df 93       	push	r29

	PORTD.DIRCLR = BOARDID_BIT1 | BOARDID_BIT0;
    612c:	e0 e6       	ldi	r30, 0x60	; 96
    612e:	f6 e0       	ldi	r31, 0x06	; 6
    6130:	80 e3       	ldi	r24, 0x30	; 48
    6132:	82 83       	std	Z+2, r24	; 0x02

	PORTD.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    6134:	80 e1       	ldi	r24, 0x10	; 16
    6136:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    6138:	85 8b       	std	Z+21, r24	; 0x15

	/* Read and save processor serial #. Source: http://www.avrfreaks.net/forum/tutc-introduction-offsetof-reading-xmega-sn */
	(void) ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ); 
    613a:	88 e0       	ldi	r24, 0x08	; 8
    613c:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
	/* First read after reset or possibly Power Up returns zero, so read then toss this value */ 

	sProcID[0] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ) ;
    6140:	88 e0       	ldi	r24, 0x08	; 8
    6142:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    6146:	c7 e8       	ldi	r28, 0x87	; 135
    6148:	de e2       	ldi	r29, 0x2E	; 46
    614a:	88 83       	st	Y, r24
	sProcID[1] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM1 ) ) ;
    614c:	89 e0       	ldi	r24, 0x09	; 9
    614e:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    6152:	89 83       	std	Y+1, r24	; 0x01
	sProcID[2] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM2 ) ) ;
    6154:	8a e0       	ldi	r24, 0x0A	; 10
    6156:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    615a:	8a 83       	std	Y+2, r24	; 0x02
	sProcID[3] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM3 ) ) ;
    615c:	8b e0       	ldi	r24, 0x0B	; 11
    615e:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    6162:	8b 83       	std	Y+3, r24	; 0x03
	sProcID[4] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM4 ) ) ;
    6164:	8c e0       	ldi	r24, 0x0C	; 12
    6166:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    616a:	8c 83       	std	Y+4, r24	; 0x04
	sProcID[5] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM5 ) ) ;
    616c:	8d e0       	ldi	r24, 0x0D	; 13
    616e:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    6172:	8d 83       	std	Y+5, r24	; 0x05
	sProcID[6] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, WAFNUM ) ); 
    6174:	80 e1       	ldi	r24, 0x10	; 16
    6176:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    617a:	8e 83       	std	Y+6, r24	; 0x06
	sProcID[7] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX0 ) ); 
    617c:	82 e1       	ldi	r24, 0x12	; 18
    617e:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    6182:	8f 83       	std	Y+7, r24	; 0x07
	sProcID[8] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX1 ) ); 
    6184:	83 e1       	ldi	r24, 0x13	; 19
    6186:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    618a:	88 87       	std	Y+8, r24	; 0x08
	sProcID[9] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY0 ) ); 
    618c:	84 e1       	ldi	r24, 0x14	; 20
    618e:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    6192:	89 87       	std	Y+9, r24	; 0x09
	sProcID[10] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY1 ) );	
    6194:	85 e1       	ldi	r24, 0x15	; 21
    6196:	0e 94 88 30 	call	0x6110	; 0x6110 <ReadCalibrationByte>
    619a:	8a 87       	std	Y+10, r24	; 0x0a

} /* InitUtil */
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	08 95       	ret

000061a2 <__subsf3>:
    61a2:	50 58       	subi	r21, 0x80	; 128

000061a4 <__addsf3>:
    61a4:	bb 27       	eor	r27, r27
    61a6:	aa 27       	eor	r26, r26
    61a8:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__addsf3x>
    61ac:	0c 94 b7 32 	jmp	0x656e	; 0x656e <__fp_round>
    61b0:	0e 94 a9 32 	call	0x6552	; 0x6552 <__fp_pscA>
    61b4:	38 f0       	brcs	.+14     	; 0x61c4 <__addsf3+0x20>
    61b6:	0e 94 b0 32 	call	0x6560	; 0x6560 <__fp_pscB>
    61ba:	20 f0       	brcs	.+8      	; 0x61c4 <__addsf3+0x20>
    61bc:	39 f4       	brne	.+14     	; 0x61cc <__addsf3+0x28>
    61be:	9f 3f       	cpi	r25, 0xFF	; 255
    61c0:	19 f4       	brne	.+6      	; 0x61c8 <__addsf3+0x24>
    61c2:	26 f4       	brtc	.+8      	; 0x61cc <__addsf3+0x28>
    61c4:	0c 94 96 32 	jmp	0x652c	; 0x652c <__fp_nan>
    61c8:	0e f4       	brtc	.+2      	; 0x61cc <__addsf3+0x28>
    61ca:	e0 95       	com	r30
    61cc:	e7 fb       	bst	r30, 7
    61ce:	0c 94 90 32 	jmp	0x6520	; 0x6520 <__fp_inf>

000061d2 <__addsf3x>:
    61d2:	e9 2f       	mov	r30, r25
    61d4:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fp_split3>
    61d8:	58 f3       	brcs	.-42     	; 0x61b0 <__addsf3+0xc>
    61da:	ba 17       	cp	r27, r26
    61dc:	62 07       	cpc	r22, r18
    61de:	73 07       	cpc	r23, r19
    61e0:	84 07       	cpc	r24, r20
    61e2:	95 07       	cpc	r25, r21
    61e4:	20 f0       	brcs	.+8      	; 0x61ee <__addsf3x+0x1c>
    61e6:	79 f4       	brne	.+30     	; 0x6206 <__addsf3x+0x34>
    61e8:	a6 f5       	brtc	.+104    	; 0x6252 <__addsf3x+0x80>
    61ea:	0c 94 ea 32 	jmp	0x65d4	; 0x65d4 <__fp_zero>
    61ee:	0e f4       	brtc	.+2      	; 0x61f2 <__addsf3x+0x20>
    61f0:	e0 95       	com	r30
    61f2:	0b 2e       	mov	r0, r27
    61f4:	ba 2f       	mov	r27, r26
    61f6:	a0 2d       	mov	r26, r0
    61f8:	0b 01       	movw	r0, r22
    61fa:	b9 01       	movw	r22, r18
    61fc:	90 01       	movw	r18, r0
    61fe:	0c 01       	movw	r0, r24
    6200:	ca 01       	movw	r24, r20
    6202:	a0 01       	movw	r20, r0
    6204:	11 24       	eor	r1, r1
    6206:	ff 27       	eor	r31, r31
    6208:	59 1b       	sub	r21, r25
    620a:	99 f0       	breq	.+38     	; 0x6232 <__addsf3x+0x60>
    620c:	59 3f       	cpi	r21, 0xF9	; 249
    620e:	50 f4       	brcc	.+20     	; 0x6224 <__addsf3x+0x52>
    6210:	50 3e       	cpi	r21, 0xE0	; 224
    6212:	68 f1       	brcs	.+90     	; 0x626e <__addsf3x+0x9c>
    6214:	1a 16       	cp	r1, r26
    6216:	f0 40       	sbci	r31, 0x00	; 0
    6218:	a2 2f       	mov	r26, r18
    621a:	23 2f       	mov	r18, r19
    621c:	34 2f       	mov	r19, r20
    621e:	44 27       	eor	r20, r20
    6220:	58 5f       	subi	r21, 0xF8	; 248
    6222:	f3 cf       	rjmp	.-26     	; 0x620a <__addsf3x+0x38>
    6224:	46 95       	lsr	r20
    6226:	37 95       	ror	r19
    6228:	27 95       	ror	r18
    622a:	a7 95       	ror	r26
    622c:	f0 40       	sbci	r31, 0x00	; 0
    622e:	53 95       	inc	r21
    6230:	c9 f7       	brne	.-14     	; 0x6224 <__addsf3x+0x52>
    6232:	7e f4       	brtc	.+30     	; 0x6252 <__addsf3x+0x80>
    6234:	1f 16       	cp	r1, r31
    6236:	ba 0b       	sbc	r27, r26
    6238:	62 0b       	sbc	r22, r18
    623a:	73 0b       	sbc	r23, r19
    623c:	84 0b       	sbc	r24, r20
    623e:	ba f0       	brmi	.+46     	; 0x626e <__addsf3x+0x9c>
    6240:	91 50       	subi	r25, 0x01	; 1
    6242:	a1 f0       	breq	.+40     	; 0x626c <__addsf3x+0x9a>
    6244:	ff 0f       	add	r31, r31
    6246:	bb 1f       	adc	r27, r27
    6248:	66 1f       	adc	r22, r22
    624a:	77 1f       	adc	r23, r23
    624c:	88 1f       	adc	r24, r24
    624e:	c2 f7       	brpl	.-16     	; 0x6240 <__addsf3x+0x6e>
    6250:	0e c0       	rjmp	.+28     	; 0x626e <__addsf3x+0x9c>
    6252:	ba 0f       	add	r27, r26
    6254:	62 1f       	adc	r22, r18
    6256:	73 1f       	adc	r23, r19
    6258:	84 1f       	adc	r24, r20
    625a:	48 f4       	brcc	.+18     	; 0x626e <__addsf3x+0x9c>
    625c:	87 95       	ror	r24
    625e:	77 95       	ror	r23
    6260:	67 95       	ror	r22
    6262:	b7 95       	ror	r27
    6264:	f7 95       	ror	r31
    6266:	9e 3f       	cpi	r25, 0xFE	; 254
    6268:	08 f0       	brcs	.+2      	; 0x626c <__addsf3x+0x9a>
    626a:	b0 cf       	rjmp	.-160    	; 0x61cc <__addsf3+0x28>
    626c:	93 95       	inc	r25
    626e:	88 0f       	add	r24, r24
    6270:	08 f0       	brcs	.+2      	; 0x6274 <__addsf3x+0xa2>
    6272:	99 27       	eor	r25, r25
    6274:	ee 0f       	add	r30, r30
    6276:	97 95       	ror	r25
    6278:	87 95       	ror	r24
    627a:	08 95       	ret

0000627c <__cmpsf2>:
    627c:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <__fp_cmp>
    6280:	08 f4       	brcc	.+2      	; 0x6284 <__cmpsf2+0x8>
    6282:	81 e0       	ldi	r24, 0x01	; 1
    6284:	08 95       	ret

00006286 <__divsf3>:
    6286:	0e 94 57 31 	call	0x62ae	; 0x62ae <__divsf3x>
    628a:	0c 94 b7 32 	jmp	0x656e	; 0x656e <__fp_round>
    628e:	0e 94 b0 32 	call	0x6560	; 0x6560 <__fp_pscB>
    6292:	58 f0       	brcs	.+22     	; 0x62aa <__divsf3+0x24>
    6294:	0e 94 a9 32 	call	0x6552	; 0x6552 <__fp_pscA>
    6298:	40 f0       	brcs	.+16     	; 0x62aa <__divsf3+0x24>
    629a:	29 f4       	brne	.+10     	; 0x62a6 <__divsf3+0x20>
    629c:	5f 3f       	cpi	r21, 0xFF	; 255
    629e:	29 f0       	breq	.+10     	; 0x62aa <__divsf3+0x24>
    62a0:	0c 94 90 32 	jmp	0x6520	; 0x6520 <__fp_inf>
    62a4:	51 11       	cpse	r21, r1
    62a6:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__fp_szero>
    62aa:	0c 94 96 32 	jmp	0x652c	; 0x652c <__fp_nan>

000062ae <__divsf3x>:
    62ae:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fp_split3>
    62b2:	68 f3       	brcs	.-38     	; 0x628e <__divsf3+0x8>

000062b4 <__divsf3_pse>:
    62b4:	99 23       	and	r25, r25
    62b6:	b1 f3       	breq	.-20     	; 0x62a4 <__divsf3+0x1e>
    62b8:	55 23       	and	r21, r21
    62ba:	91 f3       	breq	.-28     	; 0x62a0 <__divsf3+0x1a>
    62bc:	95 1b       	sub	r25, r21
    62be:	55 0b       	sbc	r21, r21
    62c0:	bb 27       	eor	r27, r27
    62c2:	aa 27       	eor	r26, r26
    62c4:	62 17       	cp	r22, r18
    62c6:	73 07       	cpc	r23, r19
    62c8:	84 07       	cpc	r24, r20
    62ca:	38 f0       	brcs	.+14     	; 0x62da <__divsf3_pse+0x26>
    62cc:	9f 5f       	subi	r25, 0xFF	; 255
    62ce:	5f 4f       	sbci	r21, 0xFF	; 255
    62d0:	22 0f       	add	r18, r18
    62d2:	33 1f       	adc	r19, r19
    62d4:	44 1f       	adc	r20, r20
    62d6:	aa 1f       	adc	r26, r26
    62d8:	a9 f3       	breq	.-22     	; 0x62c4 <__divsf3_pse+0x10>
    62da:	35 d0       	rcall	.+106    	; 0x6346 <__divsf3_pse+0x92>
    62dc:	0e 2e       	mov	r0, r30
    62de:	3a f0       	brmi	.+14     	; 0x62ee <__divsf3_pse+0x3a>
    62e0:	e0 e8       	ldi	r30, 0x80	; 128
    62e2:	32 d0       	rcall	.+100    	; 0x6348 <__divsf3_pse+0x94>
    62e4:	91 50       	subi	r25, 0x01	; 1
    62e6:	50 40       	sbci	r21, 0x00	; 0
    62e8:	e6 95       	lsr	r30
    62ea:	00 1c       	adc	r0, r0
    62ec:	ca f7       	brpl	.-14     	; 0x62e0 <__divsf3_pse+0x2c>
    62ee:	2b d0       	rcall	.+86     	; 0x6346 <__divsf3_pse+0x92>
    62f0:	fe 2f       	mov	r31, r30
    62f2:	29 d0       	rcall	.+82     	; 0x6346 <__divsf3_pse+0x92>
    62f4:	66 0f       	add	r22, r22
    62f6:	77 1f       	adc	r23, r23
    62f8:	88 1f       	adc	r24, r24
    62fa:	bb 1f       	adc	r27, r27
    62fc:	26 17       	cp	r18, r22
    62fe:	37 07       	cpc	r19, r23
    6300:	48 07       	cpc	r20, r24
    6302:	ab 07       	cpc	r26, r27
    6304:	b0 e8       	ldi	r27, 0x80	; 128
    6306:	09 f0       	breq	.+2      	; 0x630a <__divsf3_pse+0x56>
    6308:	bb 0b       	sbc	r27, r27
    630a:	80 2d       	mov	r24, r0
    630c:	bf 01       	movw	r22, r30
    630e:	ff 27       	eor	r31, r31
    6310:	93 58       	subi	r25, 0x83	; 131
    6312:	5f 4f       	sbci	r21, 0xFF	; 255
    6314:	3a f0       	brmi	.+14     	; 0x6324 <__divsf3_pse+0x70>
    6316:	9e 3f       	cpi	r25, 0xFE	; 254
    6318:	51 05       	cpc	r21, r1
    631a:	78 f0       	brcs	.+30     	; 0x633a <__divsf3_pse+0x86>
    631c:	0c 94 90 32 	jmp	0x6520	; 0x6520 <__fp_inf>
    6320:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__fp_szero>
    6324:	5f 3f       	cpi	r21, 0xFF	; 255
    6326:	e4 f3       	brlt	.-8      	; 0x6320 <__divsf3_pse+0x6c>
    6328:	98 3e       	cpi	r25, 0xE8	; 232
    632a:	d4 f3       	brlt	.-12     	; 0x6320 <__divsf3_pse+0x6c>
    632c:	86 95       	lsr	r24
    632e:	77 95       	ror	r23
    6330:	67 95       	ror	r22
    6332:	b7 95       	ror	r27
    6334:	f7 95       	ror	r31
    6336:	9f 5f       	subi	r25, 0xFF	; 255
    6338:	c9 f7       	brne	.-14     	; 0x632c <__divsf3_pse+0x78>
    633a:	88 0f       	add	r24, r24
    633c:	91 1d       	adc	r25, r1
    633e:	96 95       	lsr	r25
    6340:	87 95       	ror	r24
    6342:	97 f9       	bld	r25, 7
    6344:	08 95       	ret
    6346:	e1 e0       	ldi	r30, 0x01	; 1
    6348:	66 0f       	add	r22, r22
    634a:	77 1f       	adc	r23, r23
    634c:	88 1f       	adc	r24, r24
    634e:	bb 1f       	adc	r27, r27
    6350:	62 17       	cp	r22, r18
    6352:	73 07       	cpc	r23, r19
    6354:	84 07       	cpc	r24, r20
    6356:	ba 07       	cpc	r27, r26
    6358:	20 f0       	brcs	.+8      	; 0x6362 <__divsf3_pse+0xae>
    635a:	62 1b       	sub	r22, r18
    635c:	73 0b       	sbc	r23, r19
    635e:	84 0b       	sbc	r24, r20
    6360:	ba 0b       	sbc	r27, r26
    6362:	ee 1f       	adc	r30, r30
    6364:	88 f7       	brcc	.-30     	; 0x6348 <__divsf3_pse+0x94>
    6366:	e0 95       	com	r30
    6368:	08 95       	ret

0000636a <__fixsfsi>:
    636a:	0e 94 bc 31 	call	0x6378	; 0x6378 <__fixunssfsi>
    636e:	68 94       	set
    6370:	b1 11       	cpse	r27, r1
    6372:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__fp_szero>
    6376:	08 95       	ret

00006378 <__fixunssfsi>:
    6378:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <__fp_splitA>
    637c:	88 f0       	brcs	.+34     	; 0x63a0 <__fixunssfsi+0x28>
    637e:	9f 57       	subi	r25, 0x7F	; 127
    6380:	98 f0       	brcs	.+38     	; 0x63a8 <__fixunssfsi+0x30>
    6382:	b9 2f       	mov	r27, r25
    6384:	99 27       	eor	r25, r25
    6386:	b7 51       	subi	r27, 0x17	; 23
    6388:	b0 f0       	brcs	.+44     	; 0x63b6 <__fixunssfsi+0x3e>
    638a:	e1 f0       	breq	.+56     	; 0x63c4 <__fixunssfsi+0x4c>
    638c:	66 0f       	add	r22, r22
    638e:	77 1f       	adc	r23, r23
    6390:	88 1f       	adc	r24, r24
    6392:	99 1f       	adc	r25, r25
    6394:	1a f0       	brmi	.+6      	; 0x639c <__fixunssfsi+0x24>
    6396:	ba 95       	dec	r27
    6398:	c9 f7       	brne	.-14     	; 0x638c <__fixunssfsi+0x14>
    639a:	14 c0       	rjmp	.+40     	; 0x63c4 <__fixunssfsi+0x4c>
    639c:	b1 30       	cpi	r27, 0x01	; 1
    639e:	91 f0       	breq	.+36     	; 0x63c4 <__fixunssfsi+0x4c>
    63a0:	0e 94 ea 32 	call	0x65d4	; 0x65d4 <__fp_zero>
    63a4:	b1 e0       	ldi	r27, 0x01	; 1
    63a6:	08 95       	ret
    63a8:	0c 94 ea 32 	jmp	0x65d4	; 0x65d4 <__fp_zero>
    63ac:	67 2f       	mov	r22, r23
    63ae:	78 2f       	mov	r23, r24
    63b0:	88 27       	eor	r24, r24
    63b2:	b8 5f       	subi	r27, 0xF8	; 248
    63b4:	39 f0       	breq	.+14     	; 0x63c4 <__fixunssfsi+0x4c>
    63b6:	b9 3f       	cpi	r27, 0xF9	; 249
    63b8:	cc f3       	brlt	.-14     	; 0x63ac <__fixunssfsi+0x34>
    63ba:	86 95       	lsr	r24
    63bc:	77 95       	ror	r23
    63be:	67 95       	ror	r22
    63c0:	b3 95       	inc	r27
    63c2:	d9 f7       	brne	.-10     	; 0x63ba <__fixunssfsi+0x42>
    63c4:	3e f4       	brtc	.+14     	; 0x63d4 <__fixunssfsi+0x5c>
    63c6:	90 95       	com	r25
    63c8:	80 95       	com	r24
    63ca:	70 95       	com	r23
    63cc:	61 95       	neg	r22
    63ce:	7f 4f       	sbci	r23, 0xFF	; 255
    63d0:	8f 4f       	sbci	r24, 0xFF	; 255
    63d2:	9f 4f       	sbci	r25, 0xFF	; 255
    63d4:	08 95       	ret

000063d6 <__floatdisf>:
    63d6:	97 fb       	bst	r25, 7
    63d8:	16 f4       	brtc	.+4      	; 0x63de <__floatdisf+0x8>
    63da:	0e 94 99 32 	call	0x6532	; 0x6532 <__fp_negdi>
    63de:	0c 94 2f 32 	jmp	0x645e	; 0x645e <__fp_di2sf>

000063e2 <__floatunsisf>:
    63e2:	e8 94       	clt
    63e4:	09 c0       	rjmp	.+18     	; 0x63f8 <__floatsisf+0x12>

000063e6 <__floatsisf>:
    63e6:	97 fb       	bst	r25, 7
    63e8:	3e f4       	brtc	.+14     	; 0x63f8 <__floatsisf+0x12>
    63ea:	90 95       	com	r25
    63ec:	80 95       	com	r24
    63ee:	70 95       	com	r23
    63f0:	61 95       	neg	r22
    63f2:	7f 4f       	sbci	r23, 0xFF	; 255
    63f4:	8f 4f       	sbci	r24, 0xFF	; 255
    63f6:	9f 4f       	sbci	r25, 0xFF	; 255
    63f8:	99 23       	and	r25, r25
    63fa:	a9 f0       	breq	.+42     	; 0x6426 <__floatsisf+0x40>
    63fc:	f9 2f       	mov	r31, r25
    63fe:	96 e9       	ldi	r25, 0x96	; 150
    6400:	bb 27       	eor	r27, r27
    6402:	93 95       	inc	r25
    6404:	f6 95       	lsr	r31
    6406:	87 95       	ror	r24
    6408:	77 95       	ror	r23
    640a:	67 95       	ror	r22
    640c:	b7 95       	ror	r27
    640e:	f1 11       	cpse	r31, r1
    6410:	f8 cf       	rjmp	.-16     	; 0x6402 <__floatsisf+0x1c>
    6412:	fa f4       	brpl	.+62     	; 0x6452 <__floatsisf+0x6c>
    6414:	bb 0f       	add	r27, r27
    6416:	11 f4       	brne	.+4      	; 0x641c <__floatsisf+0x36>
    6418:	60 ff       	sbrs	r22, 0
    641a:	1b c0       	rjmp	.+54     	; 0x6452 <__floatsisf+0x6c>
    641c:	6f 5f       	subi	r22, 0xFF	; 255
    641e:	7f 4f       	sbci	r23, 0xFF	; 255
    6420:	8f 4f       	sbci	r24, 0xFF	; 255
    6422:	9f 4f       	sbci	r25, 0xFF	; 255
    6424:	16 c0       	rjmp	.+44     	; 0x6452 <__floatsisf+0x6c>
    6426:	88 23       	and	r24, r24
    6428:	11 f0       	breq	.+4      	; 0x642e <__floatsisf+0x48>
    642a:	96 e9       	ldi	r25, 0x96	; 150
    642c:	11 c0       	rjmp	.+34     	; 0x6450 <__floatsisf+0x6a>
    642e:	77 23       	and	r23, r23
    6430:	21 f0       	breq	.+8      	; 0x643a <__floatsisf+0x54>
    6432:	9e e8       	ldi	r25, 0x8E	; 142
    6434:	87 2f       	mov	r24, r23
    6436:	76 2f       	mov	r23, r22
    6438:	05 c0       	rjmp	.+10     	; 0x6444 <__floatsisf+0x5e>
    643a:	66 23       	and	r22, r22
    643c:	71 f0       	breq	.+28     	; 0x645a <__floatsisf+0x74>
    643e:	96 e8       	ldi	r25, 0x86	; 134
    6440:	86 2f       	mov	r24, r22
    6442:	70 e0       	ldi	r23, 0x00	; 0
    6444:	60 e0       	ldi	r22, 0x00	; 0
    6446:	2a f0       	brmi	.+10     	; 0x6452 <__floatsisf+0x6c>
    6448:	9a 95       	dec	r25
    644a:	66 0f       	add	r22, r22
    644c:	77 1f       	adc	r23, r23
    644e:	88 1f       	adc	r24, r24
    6450:	da f7       	brpl	.-10     	; 0x6448 <__floatsisf+0x62>
    6452:	88 0f       	add	r24, r24
    6454:	96 95       	lsr	r25
    6456:	87 95       	ror	r24
    6458:	97 f9       	bld	r25, 7
    645a:	08 95       	ret

0000645c <__floatundisf>:
    645c:	e8 94       	clt

0000645e <__fp_di2sf>:
    645e:	f9 2f       	mov	r31, r25
    6460:	96 eb       	ldi	r25, 0xB6	; 182
    6462:	ff 23       	and	r31, r31
    6464:	81 f0       	breq	.+32     	; 0x6486 <__fp_di2sf+0x28>
    6466:	12 16       	cp	r1, r18
    6468:	13 06       	cpc	r1, r19
    646a:	14 06       	cpc	r1, r20
    646c:	44 0b       	sbc	r20, r20
    646e:	93 95       	inc	r25
    6470:	f6 95       	lsr	r31
    6472:	87 95       	ror	r24
    6474:	77 95       	ror	r23
    6476:	67 95       	ror	r22
    6478:	57 95       	ror	r21
    647a:	40 40       	sbci	r20, 0x00	; 0
    647c:	ff 23       	and	r31, r31
    647e:	b9 f7       	brne	.-18     	; 0x646e <__fp_di2sf+0x10>
    6480:	1b c0       	rjmp	.+54     	; 0x64b8 <__fp_di2sf+0x5a>
    6482:	99 27       	eor	r25, r25
    6484:	08 95       	ret
    6486:	88 23       	and	r24, r24
    6488:	51 f4       	brne	.+20     	; 0x649e <__fp_di2sf+0x40>
    648a:	98 50       	subi	r25, 0x08	; 8
    648c:	d2 f7       	brpl	.-12     	; 0x6482 <__fp_di2sf+0x24>
    648e:	87 2b       	or	r24, r23
    6490:	76 2f       	mov	r23, r22
    6492:	65 2f       	mov	r22, r21
    6494:	54 2f       	mov	r21, r20
    6496:	43 2f       	mov	r20, r19
    6498:	32 2f       	mov	r19, r18
    649a:	20 e0       	ldi	r18, 0x00	; 0
    649c:	b1 f3       	breq	.-20     	; 0x648a <__fp_di2sf+0x2c>
    649e:	12 16       	cp	r1, r18
    64a0:	13 06       	cpc	r1, r19
    64a2:	14 06       	cpc	r1, r20
    64a4:	44 0b       	sbc	r20, r20
    64a6:	88 23       	and	r24, r24
    64a8:	3a f0       	brmi	.+14     	; 0x64b8 <__fp_di2sf+0x5a>
    64aa:	9a 95       	dec	r25
    64ac:	44 0f       	add	r20, r20
    64ae:	55 1f       	adc	r21, r21
    64b0:	66 1f       	adc	r22, r22
    64b2:	77 1f       	adc	r23, r23
    64b4:	88 1f       	adc	r24, r24
    64b6:	ca f7       	brpl	.-14     	; 0x64aa <__fp_di2sf+0x4c>
    64b8:	55 23       	and	r21, r21
    64ba:	4a f4       	brpl	.+18     	; 0x64ce <__fp_di2sf+0x70>
    64bc:	44 0f       	add	r20, r20
    64be:	55 1f       	adc	r21, r21
    64c0:	11 f4       	brne	.+4      	; 0x64c6 <__fp_di2sf+0x68>
    64c2:	60 ff       	sbrs	r22, 0
    64c4:	04 c0       	rjmp	.+8      	; 0x64ce <__fp_di2sf+0x70>
    64c6:	6f 5f       	subi	r22, 0xFF	; 255
    64c8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ca:	8f 4f       	sbci	r24, 0xFF	; 255
    64cc:	9f 4f       	sbci	r25, 0xFF	; 255
    64ce:	88 0f       	add	r24, r24
    64d0:	96 95       	lsr	r25
    64d2:	87 95       	ror	r24
    64d4:	97 f9       	bld	r25, 7
    64d6:	08 95       	ret

000064d8 <__fp_cmp>:
    64d8:	99 0f       	add	r25, r25
    64da:	00 08       	sbc	r0, r0
    64dc:	55 0f       	add	r21, r21
    64de:	aa 0b       	sbc	r26, r26
    64e0:	e0 e8       	ldi	r30, 0x80	; 128
    64e2:	fe ef       	ldi	r31, 0xFE	; 254
    64e4:	16 16       	cp	r1, r22
    64e6:	17 06       	cpc	r1, r23
    64e8:	e8 07       	cpc	r30, r24
    64ea:	f9 07       	cpc	r31, r25
    64ec:	c0 f0       	brcs	.+48     	; 0x651e <__fp_cmp+0x46>
    64ee:	12 16       	cp	r1, r18
    64f0:	13 06       	cpc	r1, r19
    64f2:	e4 07       	cpc	r30, r20
    64f4:	f5 07       	cpc	r31, r21
    64f6:	98 f0       	brcs	.+38     	; 0x651e <__fp_cmp+0x46>
    64f8:	62 1b       	sub	r22, r18
    64fa:	73 0b       	sbc	r23, r19
    64fc:	84 0b       	sbc	r24, r20
    64fe:	95 0b       	sbc	r25, r21
    6500:	39 f4       	brne	.+14     	; 0x6510 <__fp_cmp+0x38>
    6502:	0a 26       	eor	r0, r26
    6504:	61 f0       	breq	.+24     	; 0x651e <__fp_cmp+0x46>
    6506:	23 2b       	or	r18, r19
    6508:	24 2b       	or	r18, r20
    650a:	25 2b       	or	r18, r21
    650c:	21 f4       	brne	.+8      	; 0x6516 <__fp_cmp+0x3e>
    650e:	08 95       	ret
    6510:	0a 26       	eor	r0, r26
    6512:	09 f4       	brne	.+2      	; 0x6516 <__fp_cmp+0x3e>
    6514:	a1 40       	sbci	r26, 0x01	; 1
    6516:	a6 95       	lsr	r26
    6518:	8f ef       	ldi	r24, 0xFF	; 255
    651a:	81 1d       	adc	r24, r1
    651c:	81 1d       	adc	r24, r1
    651e:	08 95       	ret

00006520 <__fp_inf>:
    6520:	97 f9       	bld	r25, 7
    6522:	9f 67       	ori	r25, 0x7F	; 127
    6524:	80 e8       	ldi	r24, 0x80	; 128
    6526:	70 e0       	ldi	r23, 0x00	; 0
    6528:	60 e0       	ldi	r22, 0x00	; 0
    652a:	08 95       	ret

0000652c <__fp_nan>:
    652c:	9f ef       	ldi	r25, 0xFF	; 255
    652e:	80 ec       	ldi	r24, 0xC0	; 192
    6530:	08 95       	ret

00006532 <__fp_negdi>:
    6532:	90 95       	com	r25
    6534:	80 95       	com	r24
    6536:	70 95       	com	r23
    6538:	60 95       	com	r22
    653a:	50 95       	com	r21
    653c:	40 95       	com	r20
    653e:	30 95       	com	r19
    6540:	21 95       	neg	r18
    6542:	3f 4f       	sbci	r19, 0xFF	; 255
    6544:	4f 4f       	sbci	r20, 0xFF	; 255
    6546:	5f 4f       	sbci	r21, 0xFF	; 255
    6548:	6f 4f       	sbci	r22, 0xFF	; 255
    654a:	7f 4f       	sbci	r23, 0xFF	; 255
    654c:	8f 4f       	sbci	r24, 0xFF	; 255
    654e:	9f 4f       	sbci	r25, 0xFF	; 255
    6550:	08 95       	ret

00006552 <__fp_pscA>:
    6552:	00 24       	eor	r0, r0
    6554:	0a 94       	dec	r0
    6556:	16 16       	cp	r1, r22
    6558:	17 06       	cpc	r1, r23
    655a:	18 06       	cpc	r1, r24
    655c:	09 06       	cpc	r0, r25
    655e:	08 95       	ret

00006560 <__fp_pscB>:
    6560:	00 24       	eor	r0, r0
    6562:	0a 94       	dec	r0
    6564:	12 16       	cp	r1, r18
    6566:	13 06       	cpc	r1, r19
    6568:	14 06       	cpc	r1, r20
    656a:	05 06       	cpc	r0, r21
    656c:	08 95       	ret

0000656e <__fp_round>:
    656e:	09 2e       	mov	r0, r25
    6570:	03 94       	inc	r0
    6572:	00 0c       	add	r0, r0
    6574:	11 f4       	brne	.+4      	; 0x657a <__fp_round+0xc>
    6576:	88 23       	and	r24, r24
    6578:	52 f0       	brmi	.+20     	; 0x658e <__fp_round+0x20>
    657a:	bb 0f       	add	r27, r27
    657c:	40 f4       	brcc	.+16     	; 0x658e <__fp_round+0x20>
    657e:	bf 2b       	or	r27, r31
    6580:	11 f4       	brne	.+4      	; 0x6586 <__fp_round+0x18>
    6582:	60 ff       	sbrs	r22, 0
    6584:	04 c0       	rjmp	.+8      	; 0x658e <__fp_round+0x20>
    6586:	6f 5f       	subi	r22, 0xFF	; 255
    6588:	7f 4f       	sbci	r23, 0xFF	; 255
    658a:	8f 4f       	sbci	r24, 0xFF	; 255
    658c:	9f 4f       	sbci	r25, 0xFF	; 255
    658e:	08 95       	ret

00006590 <__fp_split3>:
    6590:	57 fd       	sbrc	r21, 7
    6592:	90 58       	subi	r25, 0x80	; 128
    6594:	44 0f       	add	r20, r20
    6596:	55 1f       	adc	r21, r21
    6598:	59 f0       	breq	.+22     	; 0x65b0 <__fp_splitA+0x10>
    659a:	5f 3f       	cpi	r21, 0xFF	; 255
    659c:	71 f0       	breq	.+28     	; 0x65ba <__fp_splitA+0x1a>
    659e:	47 95       	ror	r20

000065a0 <__fp_splitA>:
    65a0:	88 0f       	add	r24, r24
    65a2:	97 fb       	bst	r25, 7
    65a4:	99 1f       	adc	r25, r25
    65a6:	61 f0       	breq	.+24     	; 0x65c0 <__fp_splitA+0x20>
    65a8:	9f 3f       	cpi	r25, 0xFF	; 255
    65aa:	79 f0       	breq	.+30     	; 0x65ca <__fp_splitA+0x2a>
    65ac:	87 95       	ror	r24
    65ae:	08 95       	ret
    65b0:	12 16       	cp	r1, r18
    65b2:	13 06       	cpc	r1, r19
    65b4:	14 06       	cpc	r1, r20
    65b6:	55 1f       	adc	r21, r21
    65b8:	f2 cf       	rjmp	.-28     	; 0x659e <__fp_split3+0xe>
    65ba:	46 95       	lsr	r20
    65bc:	f1 df       	rcall	.-30     	; 0x65a0 <__fp_splitA>
    65be:	08 c0       	rjmp	.+16     	; 0x65d0 <__fp_splitA+0x30>
    65c0:	16 16       	cp	r1, r22
    65c2:	17 06       	cpc	r1, r23
    65c4:	18 06       	cpc	r1, r24
    65c6:	99 1f       	adc	r25, r25
    65c8:	f1 cf       	rjmp	.-30     	; 0x65ac <__fp_splitA+0xc>
    65ca:	86 95       	lsr	r24
    65cc:	71 05       	cpc	r23, r1
    65ce:	61 05       	cpc	r22, r1
    65d0:	08 94       	sec
    65d2:	08 95       	ret

000065d4 <__fp_zero>:
    65d4:	e8 94       	clt

000065d6 <__fp_szero>:
    65d6:	bb 27       	eor	r27, r27
    65d8:	66 27       	eor	r22, r22
    65da:	77 27       	eor	r23, r23
    65dc:	cb 01       	movw	r24, r22
    65de:	97 f9       	bld	r25, 7
    65e0:	08 95       	ret

000065e2 <__mulsf3>:
    65e2:	0e 94 04 33 	call	0x6608	; 0x6608 <__mulsf3x>
    65e6:	0c 94 b7 32 	jmp	0x656e	; 0x656e <__fp_round>
    65ea:	0e 94 a9 32 	call	0x6552	; 0x6552 <__fp_pscA>
    65ee:	38 f0       	brcs	.+14     	; 0x65fe <__mulsf3+0x1c>
    65f0:	0e 94 b0 32 	call	0x6560	; 0x6560 <__fp_pscB>
    65f4:	20 f0       	brcs	.+8      	; 0x65fe <__mulsf3+0x1c>
    65f6:	95 23       	and	r25, r21
    65f8:	11 f0       	breq	.+4      	; 0x65fe <__mulsf3+0x1c>
    65fa:	0c 94 90 32 	jmp	0x6520	; 0x6520 <__fp_inf>
    65fe:	0c 94 96 32 	jmp	0x652c	; 0x652c <__fp_nan>
    6602:	11 24       	eor	r1, r1
    6604:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__fp_szero>

00006608 <__mulsf3x>:
    6608:	0e 94 c8 32 	call	0x6590	; 0x6590 <__fp_split3>
    660c:	70 f3       	brcs	.-36     	; 0x65ea <__mulsf3+0x8>

0000660e <__mulsf3_pse>:
    660e:	95 9f       	mul	r25, r21
    6610:	c1 f3       	breq	.-16     	; 0x6602 <__mulsf3+0x20>
    6612:	95 0f       	add	r25, r21
    6614:	50 e0       	ldi	r21, 0x00	; 0
    6616:	55 1f       	adc	r21, r21
    6618:	62 9f       	mul	r22, r18
    661a:	f0 01       	movw	r30, r0
    661c:	72 9f       	mul	r23, r18
    661e:	bb 27       	eor	r27, r27
    6620:	f0 0d       	add	r31, r0
    6622:	b1 1d       	adc	r27, r1
    6624:	63 9f       	mul	r22, r19
    6626:	aa 27       	eor	r26, r26
    6628:	f0 0d       	add	r31, r0
    662a:	b1 1d       	adc	r27, r1
    662c:	aa 1f       	adc	r26, r26
    662e:	64 9f       	mul	r22, r20
    6630:	66 27       	eor	r22, r22
    6632:	b0 0d       	add	r27, r0
    6634:	a1 1d       	adc	r26, r1
    6636:	66 1f       	adc	r22, r22
    6638:	82 9f       	mul	r24, r18
    663a:	22 27       	eor	r18, r18
    663c:	b0 0d       	add	r27, r0
    663e:	a1 1d       	adc	r26, r1
    6640:	62 1f       	adc	r22, r18
    6642:	73 9f       	mul	r23, r19
    6644:	b0 0d       	add	r27, r0
    6646:	a1 1d       	adc	r26, r1
    6648:	62 1f       	adc	r22, r18
    664a:	83 9f       	mul	r24, r19
    664c:	a0 0d       	add	r26, r0
    664e:	61 1d       	adc	r22, r1
    6650:	22 1f       	adc	r18, r18
    6652:	74 9f       	mul	r23, r20
    6654:	33 27       	eor	r19, r19
    6656:	a0 0d       	add	r26, r0
    6658:	61 1d       	adc	r22, r1
    665a:	23 1f       	adc	r18, r19
    665c:	84 9f       	mul	r24, r20
    665e:	60 0d       	add	r22, r0
    6660:	21 1d       	adc	r18, r1
    6662:	82 2f       	mov	r24, r18
    6664:	76 2f       	mov	r23, r22
    6666:	6a 2f       	mov	r22, r26
    6668:	11 24       	eor	r1, r1
    666a:	9f 57       	subi	r25, 0x7F	; 127
    666c:	50 40       	sbci	r21, 0x00	; 0
    666e:	9a f0       	brmi	.+38     	; 0x6696 <__mulsf3_pse+0x88>
    6670:	f1 f0       	breq	.+60     	; 0x66ae <__mulsf3_pse+0xa0>
    6672:	88 23       	and	r24, r24
    6674:	4a f0       	brmi	.+18     	; 0x6688 <__mulsf3_pse+0x7a>
    6676:	ee 0f       	add	r30, r30
    6678:	ff 1f       	adc	r31, r31
    667a:	bb 1f       	adc	r27, r27
    667c:	66 1f       	adc	r22, r22
    667e:	77 1f       	adc	r23, r23
    6680:	88 1f       	adc	r24, r24
    6682:	91 50       	subi	r25, 0x01	; 1
    6684:	50 40       	sbci	r21, 0x00	; 0
    6686:	a9 f7       	brne	.-22     	; 0x6672 <__mulsf3_pse+0x64>
    6688:	9e 3f       	cpi	r25, 0xFE	; 254
    668a:	51 05       	cpc	r21, r1
    668c:	80 f0       	brcs	.+32     	; 0x66ae <__mulsf3_pse+0xa0>
    668e:	0c 94 90 32 	jmp	0x6520	; 0x6520 <__fp_inf>
    6692:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__fp_szero>
    6696:	5f 3f       	cpi	r21, 0xFF	; 255
    6698:	e4 f3       	brlt	.-8      	; 0x6692 <__mulsf3_pse+0x84>
    669a:	98 3e       	cpi	r25, 0xE8	; 232
    669c:	d4 f3       	brlt	.-12     	; 0x6692 <__mulsf3_pse+0x84>
    669e:	86 95       	lsr	r24
    66a0:	77 95       	ror	r23
    66a2:	67 95       	ror	r22
    66a4:	b7 95       	ror	r27
    66a6:	f7 95       	ror	r31
    66a8:	e7 95       	ror	r30
    66aa:	9f 5f       	subi	r25, 0xFF	; 255
    66ac:	c1 f7       	brne	.-16     	; 0x669e <__mulsf3_pse+0x90>
    66ae:	fe 2b       	or	r31, r30
    66b0:	88 0f       	add	r24, r24
    66b2:	91 1d       	adc	r25, r1
    66b4:	96 95       	lsr	r25
    66b6:	87 95       	ror	r24
    66b8:	97 f9       	bld	r25, 7
    66ba:	08 95       	ret

000066bc <round>:
    66bc:	0e 94 d0 32 	call	0x65a0	; 0x65a0 <__fp_splitA>
    66c0:	e8 f0       	brcs	.+58     	; 0x66fc <round+0x40>
    66c2:	9e 37       	cpi	r25, 0x7E	; 126
    66c4:	e8 f0       	brcs	.+58     	; 0x6700 <round+0x44>
    66c6:	96 39       	cpi	r25, 0x96	; 150
    66c8:	b8 f4       	brcc	.+46     	; 0x66f8 <round+0x3c>
    66ca:	9e 38       	cpi	r25, 0x8E	; 142
    66cc:	48 f4       	brcc	.+18     	; 0x66e0 <round+0x24>
    66ce:	67 2f       	mov	r22, r23
    66d0:	78 2f       	mov	r23, r24
    66d2:	88 27       	eor	r24, r24
    66d4:	98 5f       	subi	r25, 0xF8	; 248
    66d6:	f9 cf       	rjmp	.-14     	; 0x66ca <round+0xe>
    66d8:	86 95       	lsr	r24
    66da:	77 95       	ror	r23
    66dc:	67 95       	ror	r22
    66de:	93 95       	inc	r25
    66e0:	95 39       	cpi	r25, 0x95	; 149
    66e2:	d0 f3       	brcs	.-12     	; 0x66d8 <round+0x1c>
    66e4:	b6 2f       	mov	r27, r22
    66e6:	b1 70       	andi	r27, 0x01	; 1
    66e8:	6b 0f       	add	r22, r27
    66ea:	71 1d       	adc	r23, r1
    66ec:	81 1d       	adc	r24, r1
    66ee:	20 f4       	brcc	.+8      	; 0x66f8 <round+0x3c>
    66f0:	87 95       	ror	r24
    66f2:	77 95       	ror	r23
    66f4:	67 95       	ror	r22
    66f6:	93 95       	inc	r25
    66f8:	0c 94 82 33 	jmp	0x6704	; 0x6704 <__fp_mintl>
    66fc:	0c 94 9d 33 	jmp	0x673a	; 0x673a <__fp_mpack>
    6700:	0c 94 eb 32 	jmp	0x65d6	; 0x65d6 <__fp_szero>

00006704 <__fp_mintl>:
    6704:	88 23       	and	r24, r24
    6706:	71 f4       	brne	.+28     	; 0x6724 <__fp_mintl+0x20>
    6708:	77 23       	and	r23, r23
    670a:	21 f0       	breq	.+8      	; 0x6714 <__fp_mintl+0x10>
    670c:	98 50       	subi	r25, 0x08	; 8
    670e:	87 2b       	or	r24, r23
    6710:	76 2f       	mov	r23, r22
    6712:	07 c0       	rjmp	.+14     	; 0x6722 <__fp_mintl+0x1e>
    6714:	66 23       	and	r22, r22
    6716:	11 f4       	brne	.+4      	; 0x671c <__fp_mintl+0x18>
    6718:	99 27       	eor	r25, r25
    671a:	0d c0       	rjmp	.+26     	; 0x6736 <__fp_mintl+0x32>
    671c:	90 51       	subi	r25, 0x10	; 16
    671e:	86 2b       	or	r24, r22
    6720:	70 e0       	ldi	r23, 0x00	; 0
    6722:	60 e0       	ldi	r22, 0x00	; 0
    6724:	2a f0       	brmi	.+10     	; 0x6730 <__fp_mintl+0x2c>
    6726:	9a 95       	dec	r25
    6728:	66 0f       	add	r22, r22
    672a:	77 1f       	adc	r23, r23
    672c:	88 1f       	adc	r24, r24
    672e:	da f7       	brpl	.-10     	; 0x6726 <__fp_mintl+0x22>
    6730:	88 0f       	add	r24, r24
    6732:	96 95       	lsr	r25
    6734:	87 95       	ror	r24
    6736:	97 f9       	bld	r25, 7
    6738:	08 95       	ret

0000673a <__fp_mpack>:
    673a:	9f 3f       	cpi	r25, 0xFF	; 255
    673c:	31 f0       	breq	.+12     	; 0x674a <__fp_mpack_finite+0xc>

0000673e <__fp_mpack_finite>:
    673e:	91 50       	subi	r25, 0x01	; 1
    6740:	20 f4       	brcc	.+8      	; 0x674a <__fp_mpack_finite+0xc>
    6742:	87 95       	ror	r24
    6744:	77 95       	ror	r23
    6746:	67 95       	ror	r22
    6748:	b7 95       	ror	r27
    674a:	88 0f       	add	r24, r24
    674c:	91 1d       	adc	r25, r1
    674e:	96 95       	lsr	r25
    6750:	87 95       	ror	r24
    6752:	97 f9       	bld	r25, 7
    6754:	08 95       	ret

00006756 <__mulsi3>:
    6756:	db 01       	movw	r26, r22
    6758:	8f 93       	push	r24
    675a:	9f 93       	push	r25
    675c:	0e 94 bb 33 	call	0x6776	; 0x6776 <__muluhisi3>
    6760:	bf 91       	pop	r27
    6762:	af 91       	pop	r26
    6764:	a2 9f       	mul	r26, r18
    6766:	80 0d       	add	r24, r0
    6768:	91 1d       	adc	r25, r1
    676a:	a3 9f       	mul	r26, r19
    676c:	90 0d       	add	r25, r0
    676e:	b2 9f       	mul	r27, r18
    6770:	90 0d       	add	r25, r0
    6772:	11 24       	eor	r1, r1
    6774:	08 95       	ret

00006776 <__muluhisi3>:
    6776:	0e 94 cf 33 	call	0x679e	; 0x679e <__umulhisi3>
    677a:	a5 9f       	mul	r26, r21
    677c:	90 0d       	add	r25, r0
    677e:	b4 9f       	mul	r27, r20
    6780:	90 0d       	add	r25, r0
    6782:	a4 9f       	mul	r26, r20
    6784:	80 0d       	add	r24, r0
    6786:	91 1d       	adc	r25, r1
    6788:	11 24       	eor	r1, r1
    678a:	08 95       	ret

0000678c <__adddi3>:
    678c:	2a 0d       	add	r18, r10
    678e:	3b 1d       	adc	r19, r11
    6790:	4c 1d       	adc	r20, r12
    6792:	5d 1d       	adc	r21, r13
    6794:	6e 1d       	adc	r22, r14
    6796:	7f 1d       	adc	r23, r15
    6798:	80 1f       	adc	r24, r16
    679a:	91 1f       	adc	r25, r17
    679c:	08 95       	ret

0000679e <__umulhisi3>:
    679e:	a2 9f       	mul	r26, r18
    67a0:	b0 01       	movw	r22, r0
    67a2:	b3 9f       	mul	r27, r19
    67a4:	c0 01       	movw	r24, r0
    67a6:	a3 9f       	mul	r26, r19
    67a8:	70 0d       	add	r23, r0
    67aa:	81 1d       	adc	r24, r1
    67ac:	11 24       	eor	r1, r1
    67ae:	91 1d       	adc	r25, r1
    67b0:	b2 9f       	mul	r27, r18
    67b2:	70 0d       	add	r23, r0
    67b4:	81 1d       	adc	r24, r1
    67b6:	11 24       	eor	r1, r1
    67b8:	91 1d       	adc	r25, r1
    67ba:	08 95       	ret

000067bc <malloc>:
    67bc:	0f 93       	push	r16
    67be:	1f 93       	push	r17
    67c0:	cf 93       	push	r28
    67c2:	df 93       	push	r29
    67c4:	82 30       	cpi	r24, 0x02	; 2
    67c6:	91 05       	cpc	r25, r1
    67c8:	10 f4       	brcc	.+4      	; 0x67ce <malloc+0x12>
    67ca:	82 e0       	ldi	r24, 0x02	; 2
    67cc:	90 e0       	ldi	r25, 0x00	; 0
    67ce:	e0 91 94 2e 	lds	r30, 0x2E94	; 0x802e94 <__flp>
    67d2:	f0 91 95 2e 	lds	r31, 0x2E95	; 0x802e95 <__flp+0x1>
    67d6:	20 e0       	ldi	r18, 0x00	; 0
    67d8:	30 e0       	ldi	r19, 0x00	; 0
    67da:	a0 e0       	ldi	r26, 0x00	; 0
    67dc:	b0 e0       	ldi	r27, 0x00	; 0
    67de:	30 97       	sbiw	r30, 0x00	; 0
    67e0:	19 f1       	breq	.+70     	; 0x6828 <malloc+0x6c>
    67e2:	40 81       	ld	r20, Z
    67e4:	51 81       	ldd	r21, Z+1	; 0x01
    67e6:	02 81       	ldd	r16, Z+2	; 0x02
    67e8:	13 81       	ldd	r17, Z+3	; 0x03
    67ea:	48 17       	cp	r20, r24
    67ec:	59 07       	cpc	r21, r25
    67ee:	c8 f0       	brcs	.+50     	; 0x6822 <malloc+0x66>
    67f0:	84 17       	cp	r24, r20
    67f2:	95 07       	cpc	r25, r21
    67f4:	69 f4       	brne	.+26     	; 0x6810 <malloc+0x54>
    67f6:	10 97       	sbiw	r26, 0x00	; 0
    67f8:	31 f0       	breq	.+12     	; 0x6806 <malloc+0x4a>
    67fa:	12 96       	adiw	r26, 0x02	; 2
    67fc:	0c 93       	st	X, r16
    67fe:	12 97       	sbiw	r26, 0x02	; 2
    6800:	13 96       	adiw	r26, 0x03	; 3
    6802:	1c 93       	st	X, r17
    6804:	27 c0       	rjmp	.+78     	; 0x6854 <malloc+0x98>
    6806:	00 93 94 2e 	sts	0x2E94, r16	; 0x802e94 <__flp>
    680a:	10 93 95 2e 	sts	0x2E95, r17	; 0x802e95 <__flp+0x1>
    680e:	22 c0       	rjmp	.+68     	; 0x6854 <malloc+0x98>
    6810:	21 15       	cp	r18, r1
    6812:	31 05       	cpc	r19, r1
    6814:	19 f0       	breq	.+6      	; 0x681c <malloc+0x60>
    6816:	42 17       	cp	r20, r18
    6818:	53 07       	cpc	r21, r19
    681a:	18 f4       	brcc	.+6      	; 0x6822 <malloc+0x66>
    681c:	9a 01       	movw	r18, r20
    681e:	bd 01       	movw	r22, r26
    6820:	ef 01       	movw	r28, r30
    6822:	df 01       	movw	r26, r30
    6824:	f8 01       	movw	r30, r16
    6826:	db cf       	rjmp	.-74     	; 0x67de <malloc+0x22>
    6828:	21 15       	cp	r18, r1
    682a:	31 05       	cpc	r19, r1
    682c:	f9 f0       	breq	.+62     	; 0x686c <malloc+0xb0>
    682e:	28 1b       	sub	r18, r24
    6830:	39 0b       	sbc	r19, r25
    6832:	24 30       	cpi	r18, 0x04	; 4
    6834:	31 05       	cpc	r19, r1
    6836:	80 f4       	brcc	.+32     	; 0x6858 <malloc+0x9c>
    6838:	8a 81       	ldd	r24, Y+2	; 0x02
    683a:	9b 81       	ldd	r25, Y+3	; 0x03
    683c:	61 15       	cp	r22, r1
    683e:	71 05       	cpc	r23, r1
    6840:	21 f0       	breq	.+8      	; 0x684a <malloc+0x8e>
    6842:	fb 01       	movw	r30, r22
    6844:	82 83       	std	Z+2, r24	; 0x02
    6846:	93 83       	std	Z+3, r25	; 0x03
    6848:	04 c0       	rjmp	.+8      	; 0x6852 <malloc+0x96>
    684a:	80 93 94 2e 	sts	0x2E94, r24	; 0x802e94 <__flp>
    684e:	90 93 95 2e 	sts	0x2E95, r25	; 0x802e95 <__flp+0x1>
    6852:	fe 01       	movw	r30, r28
    6854:	32 96       	adiw	r30, 0x02	; 2
    6856:	44 c0       	rjmp	.+136    	; 0x68e0 <malloc+0x124>
    6858:	fe 01       	movw	r30, r28
    685a:	e2 0f       	add	r30, r18
    685c:	f3 1f       	adc	r31, r19
    685e:	81 93       	st	Z+, r24
    6860:	91 93       	st	Z+, r25
    6862:	22 50       	subi	r18, 0x02	; 2
    6864:	31 09       	sbc	r19, r1
    6866:	28 83       	st	Y, r18
    6868:	39 83       	std	Y+1, r19	; 0x01
    686a:	3a c0       	rjmp	.+116    	; 0x68e0 <malloc+0x124>
    686c:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    6870:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    6874:	23 2b       	or	r18, r19
    6876:	41 f4       	brne	.+16     	; 0x6888 <malloc+0xcc>
    6878:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    687c:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6880:	20 93 92 2e 	sts	0x2E92, r18	; 0x802e92 <__brkval>
    6884:	30 93 93 2e 	sts	0x2E93, r19	; 0x802e93 <__brkval+0x1>
    6888:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    688c:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6890:	21 15       	cp	r18, r1
    6892:	31 05       	cpc	r19, r1
    6894:	41 f4       	brne	.+16     	; 0x68a6 <malloc+0xea>
    6896:	2d b7       	in	r18, 0x3d	; 61
    6898:	3e b7       	in	r19, 0x3e	; 62
    689a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    689e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    68a2:	24 1b       	sub	r18, r20
    68a4:	35 0b       	sbc	r19, r21
    68a6:	e0 91 92 2e 	lds	r30, 0x2E92	; 0x802e92 <__brkval>
    68aa:	f0 91 93 2e 	lds	r31, 0x2E93	; 0x802e93 <__brkval+0x1>
    68ae:	e2 17       	cp	r30, r18
    68b0:	f3 07       	cpc	r31, r19
    68b2:	a0 f4       	brcc	.+40     	; 0x68dc <malloc+0x120>
    68b4:	2e 1b       	sub	r18, r30
    68b6:	3f 0b       	sbc	r19, r31
    68b8:	28 17       	cp	r18, r24
    68ba:	39 07       	cpc	r19, r25
    68bc:	78 f0       	brcs	.+30     	; 0x68dc <malloc+0x120>
    68be:	ac 01       	movw	r20, r24
    68c0:	4e 5f       	subi	r20, 0xFE	; 254
    68c2:	5f 4f       	sbci	r21, 0xFF	; 255
    68c4:	24 17       	cp	r18, r20
    68c6:	35 07       	cpc	r19, r21
    68c8:	48 f0       	brcs	.+18     	; 0x68dc <malloc+0x120>
    68ca:	4e 0f       	add	r20, r30
    68cc:	5f 1f       	adc	r21, r31
    68ce:	40 93 92 2e 	sts	0x2E92, r20	; 0x802e92 <__brkval>
    68d2:	50 93 93 2e 	sts	0x2E93, r21	; 0x802e93 <__brkval+0x1>
    68d6:	81 93       	st	Z+, r24
    68d8:	91 93       	st	Z+, r25
    68da:	02 c0       	rjmp	.+4      	; 0x68e0 <malloc+0x124>
    68dc:	e0 e0       	ldi	r30, 0x00	; 0
    68de:	f0 e0       	ldi	r31, 0x00	; 0
    68e0:	cf 01       	movw	r24, r30
    68e2:	df 91       	pop	r29
    68e4:	cf 91       	pop	r28
    68e6:	1f 91       	pop	r17
    68e8:	0f 91       	pop	r16
    68ea:	08 95       	ret

000068ec <free>:
    68ec:	cf 93       	push	r28
    68ee:	df 93       	push	r29
    68f0:	00 97       	sbiw	r24, 0x00	; 0
    68f2:	09 f4       	brne	.+2      	; 0x68f6 <free+0xa>
    68f4:	81 c0       	rjmp	.+258    	; 0x69f8 <free+0x10c>
    68f6:	fc 01       	movw	r30, r24
    68f8:	32 97       	sbiw	r30, 0x02	; 2
    68fa:	12 82       	std	Z+2, r1	; 0x02
    68fc:	13 82       	std	Z+3, r1	; 0x03
    68fe:	a0 91 94 2e 	lds	r26, 0x2E94	; 0x802e94 <__flp>
    6902:	b0 91 95 2e 	lds	r27, 0x2E95	; 0x802e95 <__flp+0x1>
    6906:	10 97       	sbiw	r26, 0x00	; 0
    6908:	81 f4       	brne	.+32     	; 0x692a <free+0x3e>
    690a:	20 81       	ld	r18, Z
    690c:	31 81       	ldd	r19, Z+1	; 0x01
    690e:	82 0f       	add	r24, r18
    6910:	93 1f       	adc	r25, r19
    6912:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    6916:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    691a:	28 17       	cp	r18, r24
    691c:	39 07       	cpc	r19, r25
    691e:	51 f5       	brne	.+84     	; 0x6974 <free+0x88>
    6920:	e0 93 92 2e 	sts	0x2E92, r30	; 0x802e92 <__brkval>
    6924:	f0 93 93 2e 	sts	0x2E93, r31	; 0x802e93 <__brkval+0x1>
    6928:	67 c0       	rjmp	.+206    	; 0x69f8 <free+0x10c>
    692a:	ed 01       	movw	r28, r26
    692c:	20 e0       	ldi	r18, 0x00	; 0
    692e:	30 e0       	ldi	r19, 0x00	; 0
    6930:	ce 17       	cp	r28, r30
    6932:	df 07       	cpc	r29, r31
    6934:	40 f4       	brcc	.+16     	; 0x6946 <free+0x5a>
    6936:	4a 81       	ldd	r20, Y+2	; 0x02
    6938:	5b 81       	ldd	r21, Y+3	; 0x03
    693a:	9e 01       	movw	r18, r28
    693c:	41 15       	cp	r20, r1
    693e:	51 05       	cpc	r21, r1
    6940:	f1 f0       	breq	.+60     	; 0x697e <free+0x92>
    6942:	ea 01       	movw	r28, r20
    6944:	f5 cf       	rjmp	.-22     	; 0x6930 <free+0x44>
    6946:	c2 83       	std	Z+2, r28	; 0x02
    6948:	d3 83       	std	Z+3, r29	; 0x03
    694a:	40 81       	ld	r20, Z
    694c:	51 81       	ldd	r21, Z+1	; 0x01
    694e:	84 0f       	add	r24, r20
    6950:	95 1f       	adc	r25, r21
    6952:	c8 17       	cp	r28, r24
    6954:	d9 07       	cpc	r29, r25
    6956:	59 f4       	brne	.+22     	; 0x696e <free+0x82>
    6958:	88 81       	ld	r24, Y
    695a:	99 81       	ldd	r25, Y+1	; 0x01
    695c:	84 0f       	add	r24, r20
    695e:	95 1f       	adc	r25, r21
    6960:	02 96       	adiw	r24, 0x02	; 2
    6962:	80 83       	st	Z, r24
    6964:	91 83       	std	Z+1, r25	; 0x01
    6966:	8a 81       	ldd	r24, Y+2	; 0x02
    6968:	9b 81       	ldd	r25, Y+3	; 0x03
    696a:	82 83       	std	Z+2, r24	; 0x02
    696c:	93 83       	std	Z+3, r25	; 0x03
    696e:	21 15       	cp	r18, r1
    6970:	31 05       	cpc	r19, r1
    6972:	29 f4       	brne	.+10     	; 0x697e <free+0x92>
    6974:	e0 93 94 2e 	sts	0x2E94, r30	; 0x802e94 <__flp>
    6978:	f0 93 95 2e 	sts	0x2E95, r31	; 0x802e95 <__flp+0x1>
    697c:	3d c0       	rjmp	.+122    	; 0x69f8 <free+0x10c>
    697e:	e9 01       	movw	r28, r18
    6980:	ea 83       	std	Y+2, r30	; 0x02
    6982:	fb 83       	std	Y+3, r31	; 0x03
    6984:	49 91       	ld	r20, Y+
    6986:	59 91       	ld	r21, Y+
    6988:	c4 0f       	add	r28, r20
    698a:	d5 1f       	adc	r29, r21
    698c:	ec 17       	cp	r30, r28
    698e:	fd 07       	cpc	r31, r29
    6990:	61 f4       	brne	.+24     	; 0x69aa <free+0xbe>
    6992:	80 81       	ld	r24, Z
    6994:	91 81       	ldd	r25, Z+1	; 0x01
    6996:	84 0f       	add	r24, r20
    6998:	95 1f       	adc	r25, r21
    699a:	02 96       	adiw	r24, 0x02	; 2
    699c:	e9 01       	movw	r28, r18
    699e:	88 83       	st	Y, r24
    69a0:	99 83       	std	Y+1, r25	; 0x01
    69a2:	82 81       	ldd	r24, Z+2	; 0x02
    69a4:	93 81       	ldd	r25, Z+3	; 0x03
    69a6:	8a 83       	std	Y+2, r24	; 0x02
    69a8:	9b 83       	std	Y+3, r25	; 0x03
    69aa:	e0 e0       	ldi	r30, 0x00	; 0
    69ac:	f0 e0       	ldi	r31, 0x00	; 0
    69ae:	12 96       	adiw	r26, 0x02	; 2
    69b0:	8d 91       	ld	r24, X+
    69b2:	9c 91       	ld	r25, X
    69b4:	13 97       	sbiw	r26, 0x03	; 3
    69b6:	00 97       	sbiw	r24, 0x00	; 0
    69b8:	19 f0       	breq	.+6      	; 0x69c0 <free+0xd4>
    69ba:	fd 01       	movw	r30, r26
    69bc:	dc 01       	movw	r26, r24
    69be:	f7 cf       	rjmp	.-18     	; 0x69ae <free+0xc2>
    69c0:	8d 91       	ld	r24, X+
    69c2:	9c 91       	ld	r25, X
    69c4:	11 97       	sbiw	r26, 0x01	; 1
    69c6:	9d 01       	movw	r18, r26
    69c8:	2e 5f       	subi	r18, 0xFE	; 254
    69ca:	3f 4f       	sbci	r19, 0xFF	; 255
    69cc:	82 0f       	add	r24, r18
    69ce:	93 1f       	adc	r25, r19
    69d0:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    69d4:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    69d8:	28 17       	cp	r18, r24
    69da:	39 07       	cpc	r19, r25
    69dc:	69 f4       	brne	.+26     	; 0x69f8 <free+0x10c>
    69de:	30 97       	sbiw	r30, 0x00	; 0
    69e0:	29 f4       	brne	.+10     	; 0x69ec <free+0x100>
    69e2:	10 92 94 2e 	sts	0x2E94, r1	; 0x802e94 <__flp>
    69e6:	10 92 95 2e 	sts	0x2E95, r1	; 0x802e95 <__flp+0x1>
    69ea:	02 c0       	rjmp	.+4      	; 0x69f0 <free+0x104>
    69ec:	12 82       	std	Z+2, r1	; 0x02
    69ee:	13 82       	std	Z+3, r1	; 0x03
    69f0:	a0 93 92 2e 	sts	0x2E92, r26	; 0x802e92 <__brkval>
    69f4:	b0 93 93 2e 	sts	0x2E93, r27	; 0x802e93 <__brkval+0x1>
    69f8:	df 91       	pop	r29
    69fa:	cf 91       	pop	r28
    69fc:	08 95       	ret

000069fe <realloc>:
    69fe:	6f 92       	push	r6
    6a00:	7f 92       	push	r7
    6a02:	8f 92       	push	r8
    6a04:	9f 92       	push	r9
    6a06:	af 92       	push	r10
    6a08:	bf 92       	push	r11
    6a0a:	cf 92       	push	r12
    6a0c:	df 92       	push	r13
    6a0e:	ef 92       	push	r14
    6a10:	ff 92       	push	r15
    6a12:	0f 93       	push	r16
    6a14:	1f 93       	push	r17
    6a16:	cf 93       	push	r28
    6a18:	df 93       	push	r29
    6a1a:	00 97       	sbiw	r24, 0x00	; 0
    6a1c:	89 f4       	brne	.+34     	; 0x6a40 <realloc+0x42>
    6a1e:	cb 01       	movw	r24, r22
    6a20:	df 91       	pop	r29
    6a22:	cf 91       	pop	r28
    6a24:	1f 91       	pop	r17
    6a26:	0f 91       	pop	r16
    6a28:	ff 90       	pop	r15
    6a2a:	ef 90       	pop	r14
    6a2c:	df 90       	pop	r13
    6a2e:	cf 90       	pop	r12
    6a30:	bf 90       	pop	r11
    6a32:	af 90       	pop	r10
    6a34:	9f 90       	pop	r9
    6a36:	8f 90       	pop	r8
    6a38:	7f 90       	pop	r7
    6a3a:	6f 90       	pop	r6
    6a3c:	0c 94 de 33 	jmp	0x67bc	; 0x67bc <malloc>
    6a40:	fc 01       	movw	r30, r24
    6a42:	e6 0f       	add	r30, r22
    6a44:	f7 1f       	adc	r31, r23
    6a46:	9c 01       	movw	r18, r24
    6a48:	22 50       	subi	r18, 0x02	; 2
    6a4a:	31 09       	sbc	r19, r1
    6a4c:	e2 17       	cp	r30, r18
    6a4e:	f3 07       	cpc	r31, r19
    6a50:	08 f4       	brcc	.+2      	; 0x6a54 <realloc+0x56>
    6a52:	a9 c0       	rjmp	.+338    	; 0x6ba6 <realloc+0x1a8>
    6a54:	ec 01       	movw	r28, r24
    6a56:	d9 01       	movw	r26, r18
    6a58:	0d 91       	ld	r16, X+
    6a5a:	1c 91       	ld	r17, X
    6a5c:	11 97       	sbiw	r26, 0x01	; 1
    6a5e:	06 17       	cp	r16, r22
    6a60:	17 07       	cpc	r17, r23
    6a62:	b0 f0       	brcs	.+44     	; 0x6a90 <realloc+0x92>
    6a64:	05 30       	cpi	r16, 0x05	; 5
    6a66:	11 05       	cpc	r17, r1
    6a68:	08 f4       	brcc	.+2      	; 0x6a6c <realloc+0x6e>
    6a6a:	9b c0       	rjmp	.+310    	; 0x6ba2 <realloc+0x1a4>
    6a6c:	c8 01       	movw	r24, r16
    6a6e:	04 97       	sbiw	r24, 0x04	; 4
    6a70:	86 17       	cp	r24, r22
    6a72:	97 07       	cpc	r25, r23
    6a74:	08 f4       	brcc	.+2      	; 0x6a78 <realloc+0x7a>
    6a76:	95 c0       	rjmp	.+298    	; 0x6ba2 <realloc+0x1a4>
    6a78:	02 50       	subi	r16, 0x02	; 2
    6a7a:	11 09       	sbc	r17, r1
    6a7c:	06 1b       	sub	r16, r22
    6a7e:	17 0b       	sbc	r17, r23
    6a80:	01 93       	st	Z+, r16
    6a82:	11 93       	st	Z+, r17
    6a84:	6d 93       	st	X+, r22
    6a86:	7c 93       	st	X, r23
    6a88:	cf 01       	movw	r24, r30
    6a8a:	0e 94 76 34 	call	0x68ec	; 0x68ec <free>
    6a8e:	89 c0       	rjmp	.+274    	; 0x6ba2 <realloc+0x1a4>
    6a90:	5b 01       	movw	r10, r22
    6a92:	a0 1a       	sub	r10, r16
    6a94:	b1 0a       	sbc	r11, r17
    6a96:	4c 01       	movw	r8, r24
    6a98:	80 0e       	add	r8, r16
    6a9a:	91 1e       	adc	r9, r17
    6a9c:	a0 91 94 2e 	lds	r26, 0x2E94	; 0x802e94 <__flp>
    6aa0:	b0 91 95 2e 	lds	r27, 0x2E95	; 0x802e95 <__flp+0x1>
    6aa4:	61 2c       	mov	r6, r1
    6aa6:	71 2c       	mov	r7, r1
    6aa8:	e1 2c       	mov	r14, r1
    6aaa:	f1 2c       	mov	r15, r1
    6aac:	10 97       	sbiw	r26, 0x00	; 0
    6aae:	09 f4       	brne	.+2      	; 0x6ab2 <realloc+0xb4>
    6ab0:	46 c0       	rjmp	.+140    	; 0x6b3e <realloc+0x140>
    6ab2:	8d 91       	ld	r24, X+
    6ab4:	9c 91       	ld	r25, X
    6ab6:	11 97       	sbiw	r26, 0x01	; 1
    6ab8:	a8 15       	cp	r26, r8
    6aba:	b9 05       	cpc	r27, r9
    6abc:	b1 f5       	brne	.+108    	; 0x6b2a <realloc+0x12c>
    6abe:	6c 01       	movw	r12, r24
    6ac0:	42 e0       	ldi	r20, 0x02	; 2
    6ac2:	c4 0e       	add	r12, r20
    6ac4:	d1 1c       	adc	r13, r1
    6ac6:	ca 14       	cp	r12, r10
    6ac8:	db 04       	cpc	r13, r11
    6aca:	78 f1       	brcs	.+94     	; 0x6b2a <realloc+0x12c>
    6acc:	4c 01       	movw	r8, r24
    6ace:	8a 18       	sub	r8, r10
    6ad0:	9b 08       	sbc	r9, r11
    6ad2:	64 01       	movw	r12, r8
    6ad4:	42 e0       	ldi	r20, 0x02	; 2
    6ad6:	c4 0e       	add	r12, r20
    6ad8:	d1 1c       	adc	r13, r1
    6ada:	12 96       	adiw	r26, 0x02	; 2
    6adc:	bc 90       	ld	r11, X
    6ade:	12 97       	sbiw	r26, 0x02	; 2
    6ae0:	13 96       	adiw	r26, 0x03	; 3
    6ae2:	ac 91       	ld	r26, X
    6ae4:	b5 e0       	ldi	r27, 0x05	; 5
    6ae6:	cb 16       	cp	r12, r27
    6ae8:	d1 04       	cpc	r13, r1
    6aea:	40 f0       	brcs	.+16     	; 0x6afc <realloc+0xfe>
    6aec:	b2 82       	std	Z+2, r11	; 0x02
    6aee:	a3 83       	std	Z+3, r26	; 0x03
    6af0:	80 82       	st	Z, r8
    6af2:	91 82       	std	Z+1, r9	; 0x01
    6af4:	d9 01       	movw	r26, r18
    6af6:	6d 93       	st	X+, r22
    6af8:	7c 93       	st	X, r23
    6afa:	09 c0       	rjmp	.+18     	; 0x6b0e <realloc+0x110>
    6afc:	0e 5f       	subi	r16, 0xFE	; 254
    6afe:	1f 4f       	sbci	r17, 0xFF	; 255
    6b00:	80 0f       	add	r24, r16
    6b02:	91 1f       	adc	r25, r17
    6b04:	f9 01       	movw	r30, r18
    6b06:	80 83       	st	Z, r24
    6b08:	91 83       	std	Z+1, r25	; 0x01
    6b0a:	eb 2d       	mov	r30, r11
    6b0c:	fa 2f       	mov	r31, r26
    6b0e:	e1 14       	cp	r14, r1
    6b10:	f1 04       	cpc	r15, r1
    6b12:	31 f0       	breq	.+12     	; 0x6b20 <realloc+0x122>
    6b14:	d7 01       	movw	r26, r14
    6b16:	12 96       	adiw	r26, 0x02	; 2
    6b18:	ed 93       	st	X+, r30
    6b1a:	fc 93       	st	X, r31
    6b1c:	13 97       	sbiw	r26, 0x03	; 3
    6b1e:	41 c0       	rjmp	.+130    	; 0x6ba2 <realloc+0x1a4>
    6b20:	e0 93 94 2e 	sts	0x2E94, r30	; 0x802e94 <__flp>
    6b24:	f0 93 95 2e 	sts	0x2E95, r31	; 0x802e95 <__flp+0x1>
    6b28:	3c c0       	rjmp	.+120    	; 0x6ba2 <realloc+0x1a4>
    6b2a:	68 16       	cp	r6, r24
    6b2c:	79 06       	cpc	r7, r25
    6b2e:	08 f4       	brcc	.+2      	; 0x6b32 <realloc+0x134>
    6b30:	3c 01       	movw	r6, r24
    6b32:	7d 01       	movw	r14, r26
    6b34:	12 96       	adiw	r26, 0x02	; 2
    6b36:	0d 90       	ld	r0, X+
    6b38:	bc 91       	ld	r27, X
    6b3a:	a0 2d       	mov	r26, r0
    6b3c:	b7 cf       	rjmp	.-146    	; 0x6aac <realloc+0xae>
    6b3e:	80 91 92 2e 	lds	r24, 0x2E92	; 0x802e92 <__brkval>
    6b42:	90 91 93 2e 	lds	r25, 0x2E93	; 0x802e93 <__brkval+0x1>
    6b46:	88 16       	cp	r8, r24
    6b48:	99 06       	cpc	r9, r25
    6b4a:	e1 f4       	brne	.+56     	; 0x6b84 <realloc+0x186>
    6b4c:	66 16       	cp	r6, r22
    6b4e:	77 06       	cpc	r7, r23
    6b50:	c8 f4       	brcc	.+50     	; 0x6b84 <realloc+0x186>
    6b52:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    6b56:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    6b5a:	00 97       	sbiw	r24, 0x00	; 0
    6b5c:	41 f4       	brne	.+16     	; 0x6b6e <realloc+0x170>
    6b5e:	8d b7       	in	r24, 0x3d	; 61
    6b60:	9e b7       	in	r25, 0x3e	; 62
    6b62:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6b66:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6b6a:	84 1b       	sub	r24, r20
    6b6c:	95 0b       	sbc	r25, r21
    6b6e:	e8 17       	cp	r30, r24
    6b70:	f9 07       	cpc	r31, r25
    6b72:	c8 f4       	brcc	.+50     	; 0x6ba6 <realloc+0x1a8>
    6b74:	e0 93 92 2e 	sts	0x2E92, r30	; 0x802e92 <__brkval>
    6b78:	f0 93 93 2e 	sts	0x2E93, r31	; 0x802e93 <__brkval+0x1>
    6b7c:	f9 01       	movw	r30, r18
    6b7e:	60 83       	st	Z, r22
    6b80:	71 83       	std	Z+1, r23	; 0x01
    6b82:	0f c0       	rjmp	.+30     	; 0x6ba2 <realloc+0x1a4>
    6b84:	cb 01       	movw	r24, r22
    6b86:	0e 94 de 33 	call	0x67bc	; 0x67bc <malloc>
    6b8a:	7c 01       	movw	r14, r24
    6b8c:	00 97       	sbiw	r24, 0x00	; 0
    6b8e:	59 f0       	breq	.+22     	; 0x6ba6 <realloc+0x1a8>
    6b90:	a8 01       	movw	r20, r16
    6b92:	be 01       	movw	r22, r28
    6b94:	0e 94 1b 37 	call	0x6e36	; 0x6e36 <memcpy>
    6b98:	ce 01       	movw	r24, r28
    6b9a:	0e 94 76 34 	call	0x68ec	; 0x68ec <free>
    6b9e:	c7 01       	movw	r24, r14
    6ba0:	04 c0       	rjmp	.+8      	; 0x6baa <realloc+0x1ac>
    6ba2:	ce 01       	movw	r24, r28
    6ba4:	02 c0       	rjmp	.+4      	; 0x6baa <realloc+0x1ac>
    6ba6:	80 e0       	ldi	r24, 0x00	; 0
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	df 91       	pop	r29
    6bac:	cf 91       	pop	r28
    6bae:	1f 91       	pop	r17
    6bb0:	0f 91       	pop	r16
    6bb2:	ff 90       	pop	r15
    6bb4:	ef 90       	pop	r14
    6bb6:	df 90       	pop	r13
    6bb8:	cf 90       	pop	r12
    6bba:	bf 90       	pop	r11
    6bbc:	af 90       	pop	r10
    6bbe:	9f 90       	pop	r9
    6bc0:	8f 90       	pop	r8
    6bc2:	7f 90       	pop	r7
    6bc4:	6f 90       	pop	r6
    6bc6:	08 95       	ret

00006bc8 <strtol>:
    6bc8:	3f 92       	push	r3
    6bca:	4f 92       	push	r4
    6bcc:	5f 92       	push	r5
    6bce:	6f 92       	push	r6
    6bd0:	7f 92       	push	r7
    6bd2:	8f 92       	push	r8
    6bd4:	9f 92       	push	r9
    6bd6:	af 92       	push	r10
    6bd8:	bf 92       	push	r11
    6bda:	cf 92       	push	r12
    6bdc:	df 92       	push	r13
    6bde:	ef 92       	push	r14
    6be0:	ff 92       	push	r15
    6be2:	0f 93       	push	r16
    6be4:	1f 93       	push	r17
    6be6:	cf 93       	push	r28
    6be8:	df 93       	push	r29
    6bea:	5c 01       	movw	r10, r24
    6bec:	6b 01       	movw	r12, r22
    6bee:	7a 01       	movw	r14, r20
    6bf0:	61 15       	cp	r22, r1
    6bf2:	71 05       	cpc	r23, r1
    6bf4:	19 f0       	breq	.+6      	; 0x6bfc <strtol+0x34>
    6bf6:	fb 01       	movw	r30, r22
    6bf8:	80 83       	st	Z, r24
    6bfa:	91 83       	std	Z+1, r25	; 0x01
    6bfc:	e1 14       	cp	r14, r1
    6bfe:	f1 04       	cpc	r15, r1
    6c00:	29 f0       	breq	.+10     	; 0x6c0c <strtol+0x44>
    6c02:	c7 01       	movw	r24, r14
    6c04:	02 97       	sbiw	r24, 0x02	; 2
    6c06:	83 97       	sbiw	r24, 0x23	; 35
    6c08:	08 f0       	brcs	.+2      	; 0x6c0c <strtol+0x44>
    6c0a:	e5 c0       	rjmp	.+458    	; 0x6dd6 <strtol+0x20e>
    6c0c:	e5 01       	movw	r28, r10
    6c0e:	21 96       	adiw	r28, 0x01	; 1
    6c10:	f5 01       	movw	r30, r10
    6c12:	10 81       	ld	r17, Z
    6c14:	81 2f       	mov	r24, r17
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	0e 94 12 37 	call	0x6e24	; 0x6e24 <isspace>
    6c1c:	89 2b       	or	r24, r25
    6c1e:	11 f0       	breq	.+4      	; 0x6c24 <strtol+0x5c>
    6c20:	5e 01       	movw	r10, r28
    6c22:	f4 cf       	rjmp	.-24     	; 0x6c0c <strtol+0x44>
    6c24:	1d 32       	cpi	r17, 0x2D	; 45
    6c26:	29 f4       	brne	.+10     	; 0x6c32 <strtol+0x6a>
    6c28:	21 96       	adiw	r28, 0x01	; 1
    6c2a:	f5 01       	movw	r30, r10
    6c2c:	11 81       	ldd	r17, Z+1	; 0x01
    6c2e:	01 e0       	ldi	r16, 0x01	; 1
    6c30:	07 c0       	rjmp	.+14     	; 0x6c40 <strtol+0x78>
    6c32:	1b 32       	cpi	r17, 0x2B	; 43
    6c34:	21 f4       	brne	.+8      	; 0x6c3e <strtol+0x76>
    6c36:	e5 01       	movw	r28, r10
    6c38:	22 96       	adiw	r28, 0x02	; 2
    6c3a:	f5 01       	movw	r30, r10
    6c3c:	11 81       	ldd	r17, Z+1	; 0x01
    6c3e:	00 e0       	ldi	r16, 0x00	; 0
    6c40:	e1 14       	cp	r14, r1
    6c42:	f1 04       	cpc	r15, r1
    6c44:	09 f1       	breq	.+66     	; 0x6c88 <strtol+0xc0>
    6c46:	f0 e1       	ldi	r31, 0x10	; 16
    6c48:	ef 16       	cp	r14, r31
    6c4a:	f1 04       	cpc	r15, r1
    6c4c:	29 f4       	brne	.+10     	; 0x6c58 <strtol+0x90>
    6c4e:	3f c0       	rjmp	.+126    	; 0x6cce <strtol+0x106>
    6c50:	10 e3       	ldi	r17, 0x30	; 48
    6c52:	e1 14       	cp	r14, r1
    6c54:	f1 04       	cpc	r15, r1
    6c56:	21 f1       	breq	.+72     	; 0x6ca0 <strtol+0xd8>
    6c58:	28 e0       	ldi	r18, 0x08	; 8
    6c5a:	e2 16       	cp	r14, r18
    6c5c:	f1 04       	cpc	r15, r1
    6c5e:	01 f1       	breq	.+64     	; 0x6ca0 <strtol+0xd8>
    6c60:	54 f4       	brge	.+20     	; 0x6c76 <strtol+0xae>
    6c62:	e2 e0       	ldi	r30, 0x02	; 2
    6c64:	ee 16       	cp	r14, r30
    6c66:	f1 04       	cpc	r15, r1
    6c68:	21 f5       	brne	.+72     	; 0x6cb2 <strtol+0xea>
    6c6a:	81 2c       	mov	r8, r1
    6c6c:	91 2c       	mov	r9, r1
    6c6e:	a1 2c       	mov	r10, r1
    6c70:	b0 e4       	ldi	r27, 0x40	; 64
    6c72:	bb 2e       	mov	r11, r27
    6c74:	3e c0       	rjmp	.+124    	; 0x6cf2 <strtol+0x12a>
    6c76:	fa e0       	ldi	r31, 0x0A	; 10
    6c78:	ef 16       	cp	r14, r31
    6c7a:	f1 04       	cpc	r15, r1
    6c7c:	39 f0       	breq	.+14     	; 0x6c8c <strtol+0xc4>
    6c7e:	20 e1       	ldi	r18, 0x10	; 16
    6c80:	e2 16       	cp	r14, r18
    6c82:	f1 04       	cpc	r15, r1
    6c84:	b1 f4       	brne	.+44     	; 0x6cb2 <strtol+0xea>
    6c86:	30 c0       	rjmp	.+96     	; 0x6ce8 <strtol+0x120>
    6c88:	10 33       	cpi	r17, 0x30	; 48
    6c8a:	19 f1       	breq	.+70     	; 0x6cd2 <strtol+0x10a>
    6c8c:	fa e0       	ldi	r31, 0x0A	; 10
    6c8e:	ef 2e       	mov	r14, r31
    6c90:	f1 2c       	mov	r15, r1
    6c92:	ac ec       	ldi	r26, 0xCC	; 204
    6c94:	8a 2e       	mov	r8, r26
    6c96:	98 2c       	mov	r9, r8
    6c98:	a8 2c       	mov	r10, r8
    6c9a:	ac e0       	ldi	r26, 0x0C	; 12
    6c9c:	ba 2e       	mov	r11, r26
    6c9e:	29 c0       	rjmp	.+82     	; 0x6cf2 <strtol+0x12a>
    6ca0:	78 e0       	ldi	r23, 0x08	; 8
    6ca2:	e7 2e       	mov	r14, r23
    6ca4:	f1 2c       	mov	r15, r1
    6ca6:	81 2c       	mov	r8, r1
    6ca8:	91 2c       	mov	r9, r1
    6caa:	a1 2c       	mov	r10, r1
    6cac:	e0 e1       	ldi	r30, 0x10	; 16
    6cae:	be 2e       	mov	r11, r30
    6cb0:	20 c0       	rjmp	.+64     	; 0x6cf2 <strtol+0x12a>
    6cb2:	60 e0       	ldi	r22, 0x00	; 0
    6cb4:	70 e0       	ldi	r23, 0x00	; 0
    6cb6:	80 e0       	ldi	r24, 0x00	; 0
    6cb8:	90 e8       	ldi	r25, 0x80	; 128
    6cba:	97 01       	movw	r18, r14
    6cbc:	0f 2c       	mov	r0, r15
    6cbe:	00 0c       	add	r0, r0
    6cc0:	44 0b       	sbc	r20, r20
    6cc2:	55 0b       	sbc	r21, r21
    6cc4:	0e 94 04 3b 	call	0x7608	; 0x7608 <__udivmodsi4>
    6cc8:	49 01       	movw	r8, r18
    6cca:	5a 01       	movw	r10, r20
    6ccc:	12 c0       	rjmp	.+36     	; 0x6cf2 <strtol+0x12a>
    6cce:	10 33       	cpi	r17, 0x30	; 48
    6cd0:	59 f4       	brne	.+22     	; 0x6ce8 <strtol+0x120>
    6cd2:	88 81       	ld	r24, Y
    6cd4:	8f 7d       	andi	r24, 0xDF	; 223
    6cd6:	88 35       	cpi	r24, 0x58	; 88
    6cd8:	09 f0       	breq	.+2      	; 0x6cdc <strtol+0x114>
    6cda:	ba cf       	rjmp	.-140    	; 0x6c50 <strtol+0x88>
    6cdc:	19 81       	ldd	r17, Y+1	; 0x01
    6cde:	22 96       	adiw	r28, 0x02	; 2
    6ce0:	02 60       	ori	r16, 0x02	; 2
    6ce2:	80 e1       	ldi	r24, 0x10	; 16
    6ce4:	e8 2e       	mov	r14, r24
    6ce6:	f1 2c       	mov	r15, r1
    6ce8:	81 2c       	mov	r8, r1
    6cea:	91 2c       	mov	r9, r1
    6cec:	a1 2c       	mov	r10, r1
    6cee:	68 e0       	ldi	r22, 0x08	; 8
    6cf0:	b6 2e       	mov	r11, r22
    6cf2:	40 e0       	ldi	r20, 0x00	; 0
    6cf4:	60 e0       	ldi	r22, 0x00	; 0
    6cf6:	70 e0       	ldi	r23, 0x00	; 0
    6cf8:	cb 01       	movw	r24, r22
    6cfa:	27 01       	movw	r4, r14
    6cfc:	0f 2c       	mov	r0, r15
    6cfe:	00 0c       	add	r0, r0
    6d00:	66 08       	sbc	r6, r6
    6d02:	77 08       	sbc	r7, r7
    6d04:	fe 01       	movw	r30, r28
    6d06:	50 ed       	ldi	r21, 0xD0	; 208
    6d08:	35 2e       	mov	r3, r21
    6d0a:	31 0e       	add	r3, r17
    6d0c:	29 e0       	ldi	r18, 0x09	; 9
    6d0e:	23 15       	cp	r18, r3
    6d10:	70 f4       	brcc	.+28     	; 0x6d2e <strtol+0x166>
    6d12:	2f eb       	ldi	r18, 0xBF	; 191
    6d14:	21 0f       	add	r18, r17
    6d16:	2a 31       	cpi	r18, 0x1A	; 26
    6d18:	18 f4       	brcc	.+6      	; 0x6d20 <strtol+0x158>
    6d1a:	39 ec       	ldi	r19, 0xC9	; 201
    6d1c:	33 2e       	mov	r3, r19
    6d1e:	06 c0       	rjmp	.+12     	; 0x6d2c <strtol+0x164>
    6d20:	2f e9       	ldi	r18, 0x9F	; 159
    6d22:	21 0f       	add	r18, r17
    6d24:	2a 31       	cpi	r18, 0x1A	; 26
    6d26:	18 f5       	brcc	.+70     	; 0x6d6e <strtol+0x1a6>
    6d28:	29 ea       	ldi	r18, 0xA9	; 169
    6d2a:	32 2e       	mov	r3, r18
    6d2c:	31 0e       	add	r3, r17
    6d2e:	23 2d       	mov	r18, r3
    6d30:	30 e0       	ldi	r19, 0x00	; 0
    6d32:	2e 15       	cp	r18, r14
    6d34:	3f 05       	cpc	r19, r15
    6d36:	dc f4       	brge	.+54     	; 0x6d6e <strtol+0x1a6>
    6d38:	47 fd       	sbrc	r20, 7
    6d3a:	16 c0       	rjmp	.+44     	; 0x6d68 <strtol+0x1a0>
    6d3c:	86 16       	cp	r8, r22
    6d3e:	97 06       	cpc	r9, r23
    6d40:	a8 06       	cpc	r10, r24
    6d42:	b9 06       	cpc	r11, r25
    6d44:	70 f0       	brcs	.+28     	; 0x6d62 <strtol+0x19a>
    6d46:	a3 01       	movw	r20, r6
    6d48:	92 01       	movw	r18, r4
    6d4a:	0e 94 ab 33 	call	0x6756	; 0x6756 <__mulsi3>
    6d4e:	63 0d       	add	r22, r3
    6d50:	71 1d       	adc	r23, r1
    6d52:	81 1d       	adc	r24, r1
    6d54:	91 1d       	adc	r25, r1
    6d56:	61 30       	cpi	r22, 0x01	; 1
    6d58:	71 05       	cpc	r23, r1
    6d5a:	81 05       	cpc	r24, r1
    6d5c:	20 e8       	ldi	r18, 0x80	; 128
    6d5e:	92 07       	cpc	r25, r18
    6d60:	10 f0       	brcs	.+4      	; 0x6d66 <strtol+0x19e>
    6d62:	4f ef       	ldi	r20, 0xFF	; 255
    6d64:	01 c0       	rjmp	.+2      	; 0x6d68 <strtol+0x1a0>
    6d66:	41 e0       	ldi	r20, 0x01	; 1
    6d68:	21 96       	adiw	r28, 0x01	; 1
    6d6a:	10 81       	ld	r17, Z
    6d6c:	cb cf       	rjmp	.-106    	; 0x6d04 <strtol+0x13c>
    6d6e:	20 2f       	mov	r18, r16
    6d70:	21 70       	andi	r18, 0x01	; 1
    6d72:	c1 14       	cp	r12, r1
    6d74:	d1 04       	cpc	r13, r1
    6d76:	71 f0       	breq	.+28     	; 0x6d94 <strtol+0x1cc>
    6d78:	44 23       	and	r20, r20
    6d7a:	29 f0       	breq	.+10     	; 0x6d86 <strtol+0x1be>
    6d7c:	21 97       	sbiw	r28, 0x01	; 1
    6d7e:	f6 01       	movw	r30, r12
    6d80:	c0 83       	st	Z, r28
    6d82:	d1 83       	std	Z+1, r29	; 0x01
    6d84:	07 c0       	rjmp	.+14     	; 0x6d94 <strtol+0x1cc>
    6d86:	01 ff       	sbrs	r16, 1
    6d88:	19 c0       	rjmp	.+50     	; 0x6dbc <strtol+0x1f4>
    6d8a:	22 97       	sbiw	r28, 0x02	; 2
    6d8c:	f6 01       	movw	r30, r12
    6d8e:	c0 83       	st	Z, r28
    6d90:	d1 83       	std	Z+1, r29	; 0x01
    6d92:	14 c0       	rjmp	.+40     	; 0x6dbc <strtol+0x1f4>
    6d94:	47 ff       	sbrs	r20, 7
    6d96:	12 c0       	rjmp	.+36     	; 0x6dbc <strtol+0x1f4>
    6d98:	22 23       	and	r18, r18
    6d9a:	29 f0       	breq	.+10     	; 0x6da6 <strtol+0x1de>
    6d9c:	60 e0       	ldi	r22, 0x00	; 0
    6d9e:	70 e0       	ldi	r23, 0x00	; 0
    6da0:	80 e0       	ldi	r24, 0x00	; 0
    6da2:	90 e8       	ldi	r25, 0x80	; 128
    6da4:	04 c0       	rjmp	.+8      	; 0x6dae <strtol+0x1e6>
    6da6:	6f ef       	ldi	r22, 0xFF	; 255
    6da8:	7f ef       	ldi	r23, 0xFF	; 255
    6daa:	8f ef       	ldi	r24, 0xFF	; 255
    6dac:	9f e7       	ldi	r25, 0x7F	; 127
    6dae:	22 e2       	ldi	r18, 0x22	; 34
    6db0:	30 e0       	ldi	r19, 0x00	; 0
    6db2:	20 93 96 2e 	sts	0x2E96, r18	; 0x802e96 <errno>
    6db6:	30 93 97 2e 	sts	0x2E97, r19	; 0x802e97 <errno+0x1>
    6dba:	09 c0       	rjmp	.+18     	; 0x6dce <strtol+0x206>
    6dbc:	22 23       	and	r18, r18
    6dbe:	81 f0       	breq	.+32     	; 0x6de0 <strtol+0x218>
    6dc0:	90 95       	com	r25
    6dc2:	80 95       	com	r24
    6dc4:	70 95       	com	r23
    6dc6:	61 95       	neg	r22
    6dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    6dca:	8f 4f       	sbci	r24, 0xFF	; 255
    6dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    6dce:	46 2f       	mov	r20, r22
    6dd0:	37 2f       	mov	r19, r23
    6dd2:	28 2f       	mov	r18, r24
    6dd4:	12 c0       	rjmp	.+36     	; 0x6dfa <strtol+0x232>
    6dd6:	40 e0       	ldi	r20, 0x00	; 0
    6dd8:	30 e0       	ldi	r19, 0x00	; 0
    6dda:	20 e0       	ldi	r18, 0x00	; 0
    6ddc:	90 e0       	ldi	r25, 0x00	; 0
    6dde:	0d c0       	rjmp	.+26     	; 0x6dfa <strtol+0x232>
    6de0:	97 ff       	sbrs	r25, 7
    6de2:	f5 cf       	rjmp	.-22     	; 0x6dce <strtol+0x206>
    6de4:	82 e2       	ldi	r24, 0x22	; 34
    6de6:	90 e0       	ldi	r25, 0x00	; 0
    6de8:	80 93 96 2e 	sts	0x2E96, r24	; 0x802e96 <errno>
    6dec:	90 93 97 2e 	sts	0x2E97, r25	; 0x802e97 <errno+0x1>
    6df0:	6f ef       	ldi	r22, 0xFF	; 255
    6df2:	7f ef       	ldi	r23, 0xFF	; 255
    6df4:	8f ef       	ldi	r24, 0xFF	; 255
    6df6:	9f e7       	ldi	r25, 0x7F	; 127
    6df8:	ea cf       	rjmp	.-44     	; 0x6dce <strtol+0x206>
    6dfa:	64 2f       	mov	r22, r20
    6dfc:	73 2f       	mov	r23, r19
    6dfe:	82 2f       	mov	r24, r18
    6e00:	df 91       	pop	r29
    6e02:	cf 91       	pop	r28
    6e04:	1f 91       	pop	r17
    6e06:	0f 91       	pop	r16
    6e08:	ff 90       	pop	r15
    6e0a:	ef 90       	pop	r14
    6e0c:	df 90       	pop	r13
    6e0e:	cf 90       	pop	r12
    6e10:	bf 90       	pop	r11
    6e12:	af 90       	pop	r10
    6e14:	9f 90       	pop	r9
    6e16:	8f 90       	pop	r8
    6e18:	7f 90       	pop	r7
    6e1a:	6f 90       	pop	r6
    6e1c:	5f 90       	pop	r5
    6e1e:	4f 90       	pop	r4
    6e20:	3f 90       	pop	r3
    6e22:	08 95       	ret

00006e24 <isspace>:
    6e24:	91 11       	cpse	r25, r1
    6e26:	0c 94 33 3a 	jmp	0x7466	; 0x7466 <__ctype_isfalse>
    6e2a:	80 32       	cpi	r24, 0x20	; 32
    6e2c:	19 f0       	breq	.+6      	; 0x6e34 <isspace+0x10>
    6e2e:	89 50       	subi	r24, 0x09	; 9
    6e30:	85 50       	subi	r24, 0x05	; 5
    6e32:	c8 f7       	brcc	.-14     	; 0x6e26 <isspace+0x2>
    6e34:	08 95       	ret

00006e36 <memcpy>:
    6e36:	fb 01       	movw	r30, r22
    6e38:	dc 01       	movw	r26, r24
    6e3a:	02 c0       	rjmp	.+4      	; 0x6e40 <memcpy+0xa>
    6e3c:	01 90       	ld	r0, Z+
    6e3e:	0d 92       	st	X+, r0
    6e40:	41 50       	subi	r20, 0x01	; 1
    6e42:	50 40       	sbci	r21, 0x00	; 0
    6e44:	d8 f7       	brcc	.-10     	; 0x6e3c <memcpy+0x6>
    6e46:	08 95       	ret

00006e48 <strncmp>:
    6e48:	fb 01       	movw	r30, r22
    6e4a:	dc 01       	movw	r26, r24
    6e4c:	41 50       	subi	r20, 0x01	; 1
    6e4e:	50 40       	sbci	r21, 0x00	; 0
    6e50:	30 f0       	brcs	.+12     	; 0x6e5e <strncmp+0x16>
    6e52:	8d 91       	ld	r24, X+
    6e54:	01 90       	ld	r0, Z+
    6e56:	80 19       	sub	r24, r0
    6e58:	19 f4       	brne	.+6      	; 0x6e60 <strncmp+0x18>
    6e5a:	00 20       	and	r0, r0
    6e5c:	b9 f7       	brne	.-18     	; 0x6e4c <strncmp+0x4>
    6e5e:	88 1b       	sub	r24, r24
    6e60:	99 0b       	sbc	r25, r25
    6e62:	08 95       	ret

00006e64 <strncpy>:
    6e64:	fb 01       	movw	r30, r22
    6e66:	dc 01       	movw	r26, r24
    6e68:	41 50       	subi	r20, 0x01	; 1
    6e6a:	50 40       	sbci	r21, 0x00	; 0
    6e6c:	48 f0       	brcs	.+18     	; 0x6e80 <strncpy+0x1c>
    6e6e:	01 90       	ld	r0, Z+
    6e70:	0d 92       	st	X+, r0
    6e72:	00 20       	and	r0, r0
    6e74:	c9 f7       	brne	.-14     	; 0x6e68 <strncpy+0x4>
    6e76:	01 c0       	rjmp	.+2      	; 0x6e7a <strncpy+0x16>
    6e78:	1d 92       	st	X+, r1
    6e7a:	41 50       	subi	r20, 0x01	; 1
    6e7c:	50 40       	sbci	r21, 0x00	; 0
    6e7e:	e0 f7       	brcc	.-8      	; 0x6e78 <strncpy+0x14>
    6e80:	08 95       	ret

00006e82 <fprintf>:
    6e82:	cf 93       	push	r28
    6e84:	df 93       	push	r29
    6e86:	cd b7       	in	r28, 0x3d	; 61
    6e88:	de b7       	in	r29, 0x3e	; 62
    6e8a:	ae 01       	movw	r20, r28
    6e8c:	46 5f       	subi	r20, 0xF6	; 246
    6e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    6e90:	68 85       	ldd	r22, Y+8	; 0x08
    6e92:	79 85       	ldd	r23, Y+9	; 0x09
    6e94:	8e 81       	ldd	r24, Y+6	; 0x06
    6e96:	9f 81       	ldd	r25, Y+7	; 0x07
    6e98:	0e 94 2f 38 	call	0x705e	; 0x705e <vfprintf>
    6e9c:	df 91       	pop	r29
    6e9e:	cf 91       	pop	r28
    6ea0:	08 95       	ret

00006ea2 <fputc>:
    6ea2:	0f 93       	push	r16
    6ea4:	1f 93       	push	r17
    6ea6:	cf 93       	push	r28
    6ea8:	df 93       	push	r29
    6eaa:	fb 01       	movw	r30, r22
    6eac:	23 81       	ldd	r18, Z+3	; 0x03
    6eae:	21 fd       	sbrc	r18, 1
    6eb0:	03 c0       	rjmp	.+6      	; 0x6eb8 <fputc+0x16>
    6eb2:	8f ef       	ldi	r24, 0xFF	; 255
    6eb4:	9f ef       	ldi	r25, 0xFF	; 255
    6eb6:	2c c0       	rjmp	.+88     	; 0x6f10 <fputc+0x6e>
    6eb8:	22 ff       	sbrs	r18, 2
    6eba:	16 c0       	rjmp	.+44     	; 0x6ee8 <fputc+0x46>
    6ebc:	46 81       	ldd	r20, Z+6	; 0x06
    6ebe:	57 81       	ldd	r21, Z+7	; 0x07
    6ec0:	24 81       	ldd	r18, Z+4	; 0x04
    6ec2:	35 81       	ldd	r19, Z+5	; 0x05
    6ec4:	42 17       	cp	r20, r18
    6ec6:	53 07       	cpc	r21, r19
    6ec8:	44 f4       	brge	.+16     	; 0x6eda <fputc+0x38>
    6eca:	a0 81       	ld	r26, Z
    6ecc:	b1 81       	ldd	r27, Z+1	; 0x01
    6ece:	9d 01       	movw	r18, r26
    6ed0:	2f 5f       	subi	r18, 0xFF	; 255
    6ed2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ed4:	20 83       	st	Z, r18
    6ed6:	31 83       	std	Z+1, r19	; 0x01
    6ed8:	8c 93       	st	X, r24
    6eda:	26 81       	ldd	r18, Z+6	; 0x06
    6edc:	37 81       	ldd	r19, Z+7	; 0x07
    6ede:	2f 5f       	subi	r18, 0xFF	; 255
    6ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ee2:	26 83       	std	Z+6, r18	; 0x06
    6ee4:	37 83       	std	Z+7, r19	; 0x07
    6ee6:	14 c0       	rjmp	.+40     	; 0x6f10 <fputc+0x6e>
    6ee8:	8b 01       	movw	r16, r22
    6eea:	ec 01       	movw	r28, r24
    6eec:	fb 01       	movw	r30, r22
    6eee:	00 84       	ldd	r0, Z+8	; 0x08
    6ef0:	f1 85       	ldd	r31, Z+9	; 0x09
    6ef2:	e0 2d       	mov	r30, r0
    6ef4:	19 95       	eicall
    6ef6:	89 2b       	or	r24, r25
    6ef8:	e1 f6       	brne	.-72     	; 0x6eb2 <fputc+0x10>
    6efa:	d8 01       	movw	r26, r16
    6efc:	16 96       	adiw	r26, 0x06	; 6
    6efe:	8d 91       	ld	r24, X+
    6f00:	9c 91       	ld	r25, X
    6f02:	17 97       	sbiw	r26, 0x07	; 7
    6f04:	01 96       	adiw	r24, 0x01	; 1
    6f06:	16 96       	adiw	r26, 0x06	; 6
    6f08:	8d 93       	st	X+, r24
    6f0a:	9c 93       	st	X, r25
    6f0c:	17 97       	sbiw	r26, 0x07	; 7
    6f0e:	ce 01       	movw	r24, r28
    6f10:	df 91       	pop	r29
    6f12:	cf 91       	pop	r28
    6f14:	1f 91       	pop	r17
    6f16:	0f 91       	pop	r16
    6f18:	08 95       	ret

00006f1a <fwrite>:
    6f1a:	8f 92       	push	r8
    6f1c:	9f 92       	push	r9
    6f1e:	af 92       	push	r10
    6f20:	bf 92       	push	r11
    6f22:	cf 92       	push	r12
    6f24:	df 92       	push	r13
    6f26:	ef 92       	push	r14
    6f28:	ff 92       	push	r15
    6f2a:	0f 93       	push	r16
    6f2c:	1f 93       	push	r17
    6f2e:	cf 93       	push	r28
    6f30:	df 93       	push	r29
    6f32:	5b 01       	movw	r10, r22
    6f34:	4a 01       	movw	r8, r20
    6f36:	79 01       	movw	r14, r18
    6f38:	d9 01       	movw	r26, r18
    6f3a:	13 96       	adiw	r26, 0x03	; 3
    6f3c:	2c 91       	ld	r18, X
    6f3e:	21 ff       	sbrs	r18, 1
    6f40:	1d c0       	rjmp	.+58     	; 0x6f7c <fwrite+0x62>
    6f42:	c0 e0       	ldi	r28, 0x00	; 0
    6f44:	d0 e0       	ldi	r29, 0x00	; 0
    6f46:	c8 15       	cp	r28, r8
    6f48:	d9 05       	cpc	r29, r9
    6f4a:	d9 f0       	breq	.+54     	; 0x6f82 <fwrite+0x68>
    6f4c:	8c 01       	movw	r16, r24
    6f4e:	6c 01       	movw	r12, r24
    6f50:	ca 0c       	add	r12, r10
    6f52:	db 1c       	adc	r13, r11
    6f54:	c8 01       	movw	r24, r16
    6f56:	0c 15       	cp	r16, r12
    6f58:	1d 05       	cpc	r17, r13
    6f5a:	71 f0       	breq	.+28     	; 0x6f78 <fwrite+0x5e>
    6f5c:	0f 5f       	subi	r16, 0xFF	; 255
    6f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f60:	d7 01       	movw	r26, r14
    6f62:	18 96       	adiw	r26, 0x08	; 8
    6f64:	ed 91       	ld	r30, X+
    6f66:	fc 91       	ld	r31, X
    6f68:	19 97       	sbiw	r26, 0x09	; 9
    6f6a:	b7 01       	movw	r22, r14
    6f6c:	dc 01       	movw	r26, r24
    6f6e:	8c 91       	ld	r24, X
    6f70:	19 95       	eicall
    6f72:	89 2b       	or	r24, r25
    6f74:	79 f3       	breq	.-34     	; 0x6f54 <fwrite+0x3a>
    6f76:	05 c0       	rjmp	.+10     	; 0x6f82 <fwrite+0x68>
    6f78:	21 96       	adiw	r28, 0x01	; 1
    6f7a:	e5 cf       	rjmp	.-54     	; 0x6f46 <fwrite+0x2c>
    6f7c:	80 e0       	ldi	r24, 0x00	; 0
    6f7e:	90 e0       	ldi	r25, 0x00	; 0
    6f80:	01 c0       	rjmp	.+2      	; 0x6f84 <fwrite+0x6a>
    6f82:	ce 01       	movw	r24, r28
    6f84:	df 91       	pop	r29
    6f86:	cf 91       	pop	r28
    6f88:	1f 91       	pop	r17
    6f8a:	0f 91       	pop	r16
    6f8c:	ff 90       	pop	r15
    6f8e:	ef 90       	pop	r14
    6f90:	df 90       	pop	r13
    6f92:	cf 90       	pop	r12
    6f94:	bf 90       	pop	r11
    6f96:	af 90       	pop	r10
    6f98:	9f 90       	pop	r9
    6f9a:	8f 90       	pop	r8
    6f9c:	08 95       	ret

00006f9e <snprintf>:
    6f9e:	0f 93       	push	r16
    6fa0:	1f 93       	push	r17
    6fa2:	cf 93       	push	r28
    6fa4:	df 93       	push	r29
    6fa6:	cd b7       	in	r28, 0x3d	; 61
    6fa8:	de b7       	in	r29, 0x3e	; 62
    6faa:	2e 97       	sbiw	r28, 0x0e	; 14
    6fac:	cd bf       	out	0x3d, r28	; 61
    6fae:	de bf       	out	0x3e, r29	; 62
    6fb0:	0e 89       	ldd	r16, Y+22	; 0x16
    6fb2:	1f 89       	ldd	r17, Y+23	; 0x17
    6fb4:	88 8d       	ldd	r24, Y+24	; 0x18
    6fb6:	99 8d       	ldd	r25, Y+25	; 0x19
    6fb8:	26 e0       	ldi	r18, 0x06	; 6
    6fba:	2c 83       	std	Y+4, r18	; 0x04
    6fbc:	09 83       	std	Y+1, r16	; 0x01
    6fbe:	1a 83       	std	Y+2, r17	; 0x02
    6fc0:	97 ff       	sbrs	r25, 7
    6fc2:	02 c0       	rjmp	.+4      	; 0x6fc8 <snprintf+0x2a>
    6fc4:	80 e0       	ldi	r24, 0x00	; 0
    6fc6:	90 e8       	ldi	r25, 0x80	; 128
    6fc8:	01 97       	sbiw	r24, 0x01	; 1
    6fca:	8d 83       	std	Y+5, r24	; 0x05
    6fcc:	9e 83       	std	Y+6, r25	; 0x06
    6fce:	ae 01       	movw	r20, r28
    6fd0:	44 5e       	subi	r20, 0xE4	; 228
    6fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    6fd4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    6fd6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    6fd8:	ce 01       	movw	r24, r28
    6fda:	01 96       	adiw	r24, 0x01	; 1
    6fdc:	0e 94 2f 38 	call	0x705e	; 0x705e <vfprintf>
    6fe0:	4d 81       	ldd	r20, Y+5	; 0x05
    6fe2:	5e 81       	ldd	r21, Y+6	; 0x06
    6fe4:	57 fd       	sbrc	r21, 7
    6fe6:	0a c0       	rjmp	.+20     	; 0x6ffc <snprintf+0x5e>
    6fe8:	2f 81       	ldd	r18, Y+7	; 0x07
    6fea:	38 85       	ldd	r19, Y+8	; 0x08
    6fec:	42 17       	cp	r20, r18
    6fee:	53 07       	cpc	r21, r19
    6ff0:	0c f4       	brge	.+2      	; 0x6ff4 <snprintf+0x56>
    6ff2:	9a 01       	movw	r18, r20
    6ff4:	f8 01       	movw	r30, r16
    6ff6:	e2 0f       	add	r30, r18
    6ff8:	f3 1f       	adc	r31, r19
    6ffa:	10 82       	st	Z, r1
    6ffc:	2e 96       	adiw	r28, 0x0e	; 14
    6ffe:	cd bf       	out	0x3d, r28	; 61
    7000:	de bf       	out	0x3e, r29	; 62
    7002:	df 91       	pop	r29
    7004:	cf 91       	pop	r28
    7006:	1f 91       	pop	r17
    7008:	0f 91       	pop	r16
    700a:	08 95       	ret

0000700c <sprintf>:
    700c:	0f 93       	push	r16
    700e:	1f 93       	push	r17
    7010:	cf 93       	push	r28
    7012:	df 93       	push	r29
    7014:	cd b7       	in	r28, 0x3d	; 61
    7016:	de b7       	in	r29, 0x3e	; 62
    7018:	2e 97       	sbiw	r28, 0x0e	; 14
    701a:	cd bf       	out	0x3d, r28	; 61
    701c:	de bf       	out	0x3e, r29	; 62
    701e:	0e 89       	ldd	r16, Y+22	; 0x16
    7020:	1f 89       	ldd	r17, Y+23	; 0x17
    7022:	86 e0       	ldi	r24, 0x06	; 6
    7024:	8c 83       	std	Y+4, r24	; 0x04
    7026:	09 83       	std	Y+1, r16	; 0x01
    7028:	1a 83       	std	Y+2, r17	; 0x02
    702a:	8f ef       	ldi	r24, 0xFF	; 255
    702c:	9f e7       	ldi	r25, 0x7F	; 127
    702e:	8d 83       	std	Y+5, r24	; 0x05
    7030:	9e 83       	std	Y+6, r25	; 0x06
    7032:	ae 01       	movw	r20, r28
    7034:	46 5e       	subi	r20, 0xE6	; 230
    7036:	5f 4f       	sbci	r21, 0xFF	; 255
    7038:	68 8d       	ldd	r22, Y+24	; 0x18
    703a:	79 8d       	ldd	r23, Y+25	; 0x19
    703c:	ce 01       	movw	r24, r28
    703e:	01 96       	adiw	r24, 0x01	; 1
    7040:	0e 94 2f 38 	call	0x705e	; 0x705e <vfprintf>
    7044:	ef 81       	ldd	r30, Y+7	; 0x07
    7046:	f8 85       	ldd	r31, Y+8	; 0x08
    7048:	e0 0f       	add	r30, r16
    704a:	f1 1f       	adc	r31, r17
    704c:	10 82       	st	Z, r1
    704e:	2e 96       	adiw	r28, 0x0e	; 14
    7050:	cd bf       	out	0x3d, r28	; 61
    7052:	de bf       	out	0x3e, r29	; 62
    7054:	df 91       	pop	r29
    7056:	cf 91       	pop	r28
    7058:	1f 91       	pop	r17
    705a:	0f 91       	pop	r16
    705c:	08 95       	ret

0000705e <vfprintf>:
    705e:	2f 92       	push	r2
    7060:	3f 92       	push	r3
    7062:	4f 92       	push	r4
    7064:	5f 92       	push	r5
    7066:	6f 92       	push	r6
    7068:	7f 92       	push	r7
    706a:	8f 92       	push	r8
    706c:	9f 92       	push	r9
    706e:	af 92       	push	r10
    7070:	bf 92       	push	r11
    7072:	cf 92       	push	r12
    7074:	df 92       	push	r13
    7076:	ef 92       	push	r14
    7078:	ff 92       	push	r15
    707a:	0f 93       	push	r16
    707c:	1f 93       	push	r17
    707e:	cf 93       	push	r28
    7080:	df 93       	push	r29
    7082:	cd b7       	in	r28, 0x3d	; 61
    7084:	de b7       	in	r29, 0x3e	; 62
    7086:	2b 97       	sbiw	r28, 0x0b	; 11
    7088:	cd bf       	out	0x3d, r28	; 61
    708a:	de bf       	out	0x3e, r29	; 62
    708c:	6c 01       	movw	r12, r24
    708e:	7b 01       	movw	r14, r22
    7090:	8a 01       	movw	r16, r20
    7092:	fc 01       	movw	r30, r24
    7094:	16 82       	std	Z+6, r1	; 0x06
    7096:	17 82       	std	Z+7, r1	; 0x07
    7098:	83 81       	ldd	r24, Z+3	; 0x03
    709a:	81 ff       	sbrs	r24, 1
    709c:	cc c1       	rjmp	.+920    	; 0x7436 <vfprintf+0x3d8>
    709e:	ce 01       	movw	r24, r28
    70a0:	01 96       	adiw	r24, 0x01	; 1
    70a2:	3c 01       	movw	r6, r24
    70a4:	f6 01       	movw	r30, r12
    70a6:	93 81       	ldd	r25, Z+3	; 0x03
    70a8:	f7 01       	movw	r30, r14
    70aa:	93 fd       	sbrc	r25, 3
    70ac:	85 91       	lpm	r24, Z+
    70ae:	93 ff       	sbrs	r25, 3
    70b0:	81 91       	ld	r24, Z+
    70b2:	7f 01       	movw	r14, r30
    70b4:	88 23       	and	r24, r24
    70b6:	09 f4       	brne	.+2      	; 0x70ba <vfprintf+0x5c>
    70b8:	ba c1       	rjmp	.+884    	; 0x742e <vfprintf+0x3d0>
    70ba:	85 32       	cpi	r24, 0x25	; 37
    70bc:	39 f4       	brne	.+14     	; 0x70cc <vfprintf+0x6e>
    70be:	93 fd       	sbrc	r25, 3
    70c0:	85 91       	lpm	r24, Z+
    70c2:	93 ff       	sbrs	r25, 3
    70c4:	81 91       	ld	r24, Z+
    70c6:	7f 01       	movw	r14, r30
    70c8:	85 32       	cpi	r24, 0x25	; 37
    70ca:	29 f4       	brne	.+10     	; 0x70d6 <vfprintf+0x78>
    70cc:	b6 01       	movw	r22, r12
    70ce:	90 e0       	ldi	r25, 0x00	; 0
    70d0:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    70d4:	e7 cf       	rjmp	.-50     	; 0x70a4 <vfprintf+0x46>
    70d6:	91 2c       	mov	r9, r1
    70d8:	21 2c       	mov	r2, r1
    70da:	31 2c       	mov	r3, r1
    70dc:	ff e1       	ldi	r31, 0x1F	; 31
    70de:	f3 15       	cp	r31, r3
    70e0:	d8 f0       	brcs	.+54     	; 0x7118 <vfprintf+0xba>
    70e2:	8b 32       	cpi	r24, 0x2B	; 43
    70e4:	79 f0       	breq	.+30     	; 0x7104 <vfprintf+0xa6>
    70e6:	38 f4       	brcc	.+14     	; 0x70f6 <vfprintf+0x98>
    70e8:	80 32       	cpi	r24, 0x20	; 32
    70ea:	79 f0       	breq	.+30     	; 0x710a <vfprintf+0xac>
    70ec:	83 32       	cpi	r24, 0x23	; 35
    70ee:	a1 f4       	brne	.+40     	; 0x7118 <vfprintf+0xba>
    70f0:	23 2d       	mov	r18, r3
    70f2:	20 61       	ori	r18, 0x10	; 16
    70f4:	1d c0       	rjmp	.+58     	; 0x7130 <vfprintf+0xd2>
    70f6:	8d 32       	cpi	r24, 0x2D	; 45
    70f8:	61 f0       	breq	.+24     	; 0x7112 <vfprintf+0xb4>
    70fa:	80 33       	cpi	r24, 0x30	; 48
    70fc:	69 f4       	brne	.+26     	; 0x7118 <vfprintf+0xba>
    70fe:	23 2d       	mov	r18, r3
    7100:	21 60       	ori	r18, 0x01	; 1
    7102:	16 c0       	rjmp	.+44     	; 0x7130 <vfprintf+0xd2>
    7104:	83 2d       	mov	r24, r3
    7106:	82 60       	ori	r24, 0x02	; 2
    7108:	38 2e       	mov	r3, r24
    710a:	e3 2d       	mov	r30, r3
    710c:	e4 60       	ori	r30, 0x04	; 4
    710e:	3e 2e       	mov	r3, r30
    7110:	2a c0       	rjmp	.+84     	; 0x7166 <vfprintf+0x108>
    7112:	f3 2d       	mov	r31, r3
    7114:	f8 60       	ori	r31, 0x08	; 8
    7116:	1d c0       	rjmp	.+58     	; 0x7152 <vfprintf+0xf4>
    7118:	37 fc       	sbrc	r3, 7
    711a:	2d c0       	rjmp	.+90     	; 0x7176 <vfprintf+0x118>
    711c:	20 ed       	ldi	r18, 0xD0	; 208
    711e:	28 0f       	add	r18, r24
    7120:	2a 30       	cpi	r18, 0x0A	; 10
    7122:	40 f0       	brcs	.+16     	; 0x7134 <vfprintf+0xd6>
    7124:	8e 32       	cpi	r24, 0x2E	; 46
    7126:	b9 f4       	brne	.+46     	; 0x7156 <vfprintf+0xf8>
    7128:	36 fc       	sbrc	r3, 6
    712a:	81 c1       	rjmp	.+770    	; 0x742e <vfprintf+0x3d0>
    712c:	23 2d       	mov	r18, r3
    712e:	20 64       	ori	r18, 0x40	; 64
    7130:	32 2e       	mov	r3, r18
    7132:	19 c0       	rjmp	.+50     	; 0x7166 <vfprintf+0x108>
    7134:	36 fe       	sbrs	r3, 6
    7136:	06 c0       	rjmp	.+12     	; 0x7144 <vfprintf+0xe6>
    7138:	8a e0       	ldi	r24, 0x0A	; 10
    713a:	98 9e       	mul	r9, r24
    713c:	20 0d       	add	r18, r0
    713e:	11 24       	eor	r1, r1
    7140:	92 2e       	mov	r9, r18
    7142:	11 c0       	rjmp	.+34     	; 0x7166 <vfprintf+0x108>
    7144:	ea e0       	ldi	r30, 0x0A	; 10
    7146:	2e 9e       	mul	r2, r30
    7148:	20 0d       	add	r18, r0
    714a:	11 24       	eor	r1, r1
    714c:	22 2e       	mov	r2, r18
    714e:	f3 2d       	mov	r31, r3
    7150:	f0 62       	ori	r31, 0x20	; 32
    7152:	3f 2e       	mov	r3, r31
    7154:	08 c0       	rjmp	.+16     	; 0x7166 <vfprintf+0x108>
    7156:	8c 36       	cpi	r24, 0x6C	; 108
    7158:	21 f4       	brne	.+8      	; 0x7162 <vfprintf+0x104>
    715a:	83 2d       	mov	r24, r3
    715c:	80 68       	ori	r24, 0x80	; 128
    715e:	38 2e       	mov	r3, r24
    7160:	02 c0       	rjmp	.+4      	; 0x7166 <vfprintf+0x108>
    7162:	88 36       	cpi	r24, 0x68	; 104
    7164:	41 f4       	brne	.+16     	; 0x7176 <vfprintf+0x118>
    7166:	f7 01       	movw	r30, r14
    7168:	93 fd       	sbrc	r25, 3
    716a:	85 91       	lpm	r24, Z+
    716c:	93 ff       	sbrs	r25, 3
    716e:	81 91       	ld	r24, Z+
    7170:	7f 01       	movw	r14, r30
    7172:	81 11       	cpse	r24, r1
    7174:	b3 cf       	rjmp	.-154    	; 0x70dc <vfprintf+0x7e>
    7176:	98 2f       	mov	r25, r24
    7178:	9f 7d       	andi	r25, 0xDF	; 223
    717a:	95 54       	subi	r25, 0x45	; 69
    717c:	93 30       	cpi	r25, 0x03	; 3
    717e:	28 f4       	brcc	.+10     	; 0x718a <vfprintf+0x12c>
    7180:	0c 5f       	subi	r16, 0xFC	; 252
    7182:	1f 4f       	sbci	r17, 0xFF	; 255
    7184:	9f e3       	ldi	r25, 0x3F	; 63
    7186:	99 83       	std	Y+1, r25	; 0x01
    7188:	0d c0       	rjmp	.+26     	; 0x71a4 <vfprintf+0x146>
    718a:	83 36       	cpi	r24, 0x63	; 99
    718c:	31 f0       	breq	.+12     	; 0x719a <vfprintf+0x13c>
    718e:	83 37       	cpi	r24, 0x73	; 115
    7190:	71 f0       	breq	.+28     	; 0x71ae <vfprintf+0x150>
    7192:	83 35       	cpi	r24, 0x53	; 83
    7194:	09 f0       	breq	.+2      	; 0x7198 <vfprintf+0x13a>
    7196:	59 c0       	rjmp	.+178    	; 0x724a <vfprintf+0x1ec>
    7198:	21 c0       	rjmp	.+66     	; 0x71dc <vfprintf+0x17e>
    719a:	f8 01       	movw	r30, r16
    719c:	80 81       	ld	r24, Z
    719e:	89 83       	std	Y+1, r24	; 0x01
    71a0:	0e 5f       	subi	r16, 0xFE	; 254
    71a2:	1f 4f       	sbci	r17, 0xFF	; 255
    71a4:	88 24       	eor	r8, r8
    71a6:	83 94       	inc	r8
    71a8:	91 2c       	mov	r9, r1
    71aa:	53 01       	movw	r10, r6
    71ac:	13 c0       	rjmp	.+38     	; 0x71d4 <vfprintf+0x176>
    71ae:	28 01       	movw	r4, r16
    71b0:	f2 e0       	ldi	r31, 0x02	; 2
    71b2:	4f 0e       	add	r4, r31
    71b4:	51 1c       	adc	r5, r1
    71b6:	f8 01       	movw	r30, r16
    71b8:	a0 80       	ld	r10, Z
    71ba:	b1 80       	ldd	r11, Z+1	; 0x01
    71bc:	36 fe       	sbrs	r3, 6
    71be:	03 c0       	rjmp	.+6      	; 0x71c6 <vfprintf+0x168>
    71c0:	69 2d       	mov	r22, r9
    71c2:	70 e0       	ldi	r23, 0x00	; 0
    71c4:	02 c0       	rjmp	.+4      	; 0x71ca <vfprintf+0x16c>
    71c6:	6f ef       	ldi	r22, 0xFF	; 255
    71c8:	7f ef       	ldi	r23, 0xFF	; 255
    71ca:	c5 01       	movw	r24, r10
    71cc:	0e 94 41 3a 	call	0x7482	; 0x7482 <strnlen>
    71d0:	4c 01       	movw	r8, r24
    71d2:	82 01       	movw	r16, r4
    71d4:	f3 2d       	mov	r31, r3
    71d6:	ff 77       	andi	r31, 0x7F	; 127
    71d8:	3f 2e       	mov	r3, r31
    71da:	16 c0       	rjmp	.+44     	; 0x7208 <vfprintf+0x1aa>
    71dc:	28 01       	movw	r4, r16
    71de:	22 e0       	ldi	r18, 0x02	; 2
    71e0:	42 0e       	add	r4, r18
    71e2:	51 1c       	adc	r5, r1
    71e4:	f8 01       	movw	r30, r16
    71e6:	a0 80       	ld	r10, Z
    71e8:	b1 80       	ldd	r11, Z+1	; 0x01
    71ea:	36 fe       	sbrs	r3, 6
    71ec:	03 c0       	rjmp	.+6      	; 0x71f4 <vfprintf+0x196>
    71ee:	69 2d       	mov	r22, r9
    71f0:	70 e0       	ldi	r23, 0x00	; 0
    71f2:	02 c0       	rjmp	.+4      	; 0x71f8 <vfprintf+0x19a>
    71f4:	6f ef       	ldi	r22, 0xFF	; 255
    71f6:	7f ef       	ldi	r23, 0xFF	; 255
    71f8:	c5 01       	movw	r24, r10
    71fa:	0e 94 36 3a 	call	0x746c	; 0x746c <strnlen_P>
    71fe:	4c 01       	movw	r8, r24
    7200:	f3 2d       	mov	r31, r3
    7202:	f0 68       	ori	r31, 0x80	; 128
    7204:	3f 2e       	mov	r3, r31
    7206:	82 01       	movw	r16, r4
    7208:	33 fc       	sbrc	r3, 3
    720a:	1b c0       	rjmp	.+54     	; 0x7242 <vfprintf+0x1e4>
    720c:	82 2d       	mov	r24, r2
    720e:	90 e0       	ldi	r25, 0x00	; 0
    7210:	88 16       	cp	r8, r24
    7212:	99 06       	cpc	r9, r25
    7214:	b0 f4       	brcc	.+44     	; 0x7242 <vfprintf+0x1e4>
    7216:	b6 01       	movw	r22, r12
    7218:	80 e2       	ldi	r24, 0x20	; 32
    721a:	90 e0       	ldi	r25, 0x00	; 0
    721c:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    7220:	2a 94       	dec	r2
    7222:	f4 cf       	rjmp	.-24     	; 0x720c <vfprintf+0x1ae>
    7224:	f5 01       	movw	r30, r10
    7226:	37 fc       	sbrc	r3, 7
    7228:	85 91       	lpm	r24, Z+
    722a:	37 fe       	sbrs	r3, 7
    722c:	81 91       	ld	r24, Z+
    722e:	5f 01       	movw	r10, r30
    7230:	b6 01       	movw	r22, r12
    7232:	90 e0       	ldi	r25, 0x00	; 0
    7234:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    7238:	21 10       	cpse	r2, r1
    723a:	2a 94       	dec	r2
    723c:	21 e0       	ldi	r18, 0x01	; 1
    723e:	82 1a       	sub	r8, r18
    7240:	91 08       	sbc	r9, r1
    7242:	81 14       	cp	r8, r1
    7244:	91 04       	cpc	r9, r1
    7246:	71 f7       	brne	.-36     	; 0x7224 <vfprintf+0x1c6>
    7248:	e8 c0       	rjmp	.+464    	; 0x741a <vfprintf+0x3bc>
    724a:	84 36       	cpi	r24, 0x64	; 100
    724c:	11 f0       	breq	.+4      	; 0x7252 <vfprintf+0x1f4>
    724e:	89 36       	cpi	r24, 0x69	; 105
    7250:	41 f5       	brne	.+80     	; 0x72a2 <vfprintf+0x244>
    7252:	f8 01       	movw	r30, r16
    7254:	37 fe       	sbrs	r3, 7
    7256:	07 c0       	rjmp	.+14     	; 0x7266 <vfprintf+0x208>
    7258:	60 81       	ld	r22, Z
    725a:	71 81       	ldd	r23, Z+1	; 0x01
    725c:	82 81       	ldd	r24, Z+2	; 0x02
    725e:	93 81       	ldd	r25, Z+3	; 0x03
    7260:	0c 5f       	subi	r16, 0xFC	; 252
    7262:	1f 4f       	sbci	r17, 0xFF	; 255
    7264:	08 c0       	rjmp	.+16     	; 0x7276 <vfprintf+0x218>
    7266:	60 81       	ld	r22, Z
    7268:	71 81       	ldd	r23, Z+1	; 0x01
    726a:	07 2e       	mov	r0, r23
    726c:	00 0c       	add	r0, r0
    726e:	88 0b       	sbc	r24, r24
    7270:	99 0b       	sbc	r25, r25
    7272:	0e 5f       	subi	r16, 0xFE	; 254
    7274:	1f 4f       	sbci	r17, 0xFF	; 255
    7276:	f3 2d       	mov	r31, r3
    7278:	ff 76       	andi	r31, 0x6F	; 111
    727a:	3f 2e       	mov	r3, r31
    727c:	97 ff       	sbrs	r25, 7
    727e:	09 c0       	rjmp	.+18     	; 0x7292 <vfprintf+0x234>
    7280:	90 95       	com	r25
    7282:	80 95       	com	r24
    7284:	70 95       	com	r23
    7286:	61 95       	neg	r22
    7288:	7f 4f       	sbci	r23, 0xFF	; 255
    728a:	8f 4f       	sbci	r24, 0xFF	; 255
    728c:	9f 4f       	sbci	r25, 0xFF	; 255
    728e:	f0 68       	ori	r31, 0x80	; 128
    7290:	3f 2e       	mov	r3, r31
    7292:	2a e0       	ldi	r18, 0x0A	; 10
    7294:	30 e0       	ldi	r19, 0x00	; 0
    7296:	a3 01       	movw	r20, r6
    7298:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__ultoa_invert>
    729c:	88 2e       	mov	r8, r24
    729e:	86 18       	sub	r8, r6
    72a0:	45 c0       	rjmp	.+138    	; 0x732c <vfprintf+0x2ce>
    72a2:	85 37       	cpi	r24, 0x75	; 117
    72a4:	31 f4       	brne	.+12     	; 0x72b2 <vfprintf+0x254>
    72a6:	23 2d       	mov	r18, r3
    72a8:	2f 7e       	andi	r18, 0xEF	; 239
    72aa:	b2 2e       	mov	r11, r18
    72ac:	2a e0       	ldi	r18, 0x0A	; 10
    72ae:	30 e0       	ldi	r19, 0x00	; 0
    72b0:	25 c0       	rjmp	.+74     	; 0x72fc <vfprintf+0x29e>
    72b2:	93 2d       	mov	r25, r3
    72b4:	99 7f       	andi	r25, 0xF9	; 249
    72b6:	b9 2e       	mov	r11, r25
    72b8:	8f 36       	cpi	r24, 0x6F	; 111
    72ba:	c1 f0       	breq	.+48     	; 0x72ec <vfprintf+0x28e>
    72bc:	18 f4       	brcc	.+6      	; 0x72c4 <vfprintf+0x266>
    72be:	88 35       	cpi	r24, 0x58	; 88
    72c0:	79 f0       	breq	.+30     	; 0x72e0 <vfprintf+0x282>
    72c2:	b5 c0       	rjmp	.+362    	; 0x742e <vfprintf+0x3d0>
    72c4:	80 37       	cpi	r24, 0x70	; 112
    72c6:	19 f0       	breq	.+6      	; 0x72ce <vfprintf+0x270>
    72c8:	88 37       	cpi	r24, 0x78	; 120
    72ca:	21 f0       	breq	.+8      	; 0x72d4 <vfprintf+0x276>
    72cc:	b0 c0       	rjmp	.+352    	; 0x742e <vfprintf+0x3d0>
    72ce:	e9 2f       	mov	r30, r25
    72d0:	e0 61       	ori	r30, 0x10	; 16
    72d2:	be 2e       	mov	r11, r30
    72d4:	b4 fe       	sbrs	r11, 4
    72d6:	0d c0       	rjmp	.+26     	; 0x72f2 <vfprintf+0x294>
    72d8:	fb 2d       	mov	r31, r11
    72da:	f4 60       	ori	r31, 0x04	; 4
    72dc:	bf 2e       	mov	r11, r31
    72de:	09 c0       	rjmp	.+18     	; 0x72f2 <vfprintf+0x294>
    72e0:	34 fe       	sbrs	r3, 4
    72e2:	0a c0       	rjmp	.+20     	; 0x72f8 <vfprintf+0x29a>
    72e4:	29 2f       	mov	r18, r25
    72e6:	26 60       	ori	r18, 0x06	; 6
    72e8:	b2 2e       	mov	r11, r18
    72ea:	06 c0       	rjmp	.+12     	; 0x72f8 <vfprintf+0x29a>
    72ec:	28 e0       	ldi	r18, 0x08	; 8
    72ee:	30 e0       	ldi	r19, 0x00	; 0
    72f0:	05 c0       	rjmp	.+10     	; 0x72fc <vfprintf+0x29e>
    72f2:	20 e1       	ldi	r18, 0x10	; 16
    72f4:	30 e0       	ldi	r19, 0x00	; 0
    72f6:	02 c0       	rjmp	.+4      	; 0x72fc <vfprintf+0x29e>
    72f8:	20 e1       	ldi	r18, 0x10	; 16
    72fa:	32 e0       	ldi	r19, 0x02	; 2
    72fc:	f8 01       	movw	r30, r16
    72fe:	b7 fe       	sbrs	r11, 7
    7300:	07 c0       	rjmp	.+14     	; 0x7310 <vfprintf+0x2b2>
    7302:	60 81       	ld	r22, Z
    7304:	71 81       	ldd	r23, Z+1	; 0x01
    7306:	82 81       	ldd	r24, Z+2	; 0x02
    7308:	93 81       	ldd	r25, Z+3	; 0x03
    730a:	0c 5f       	subi	r16, 0xFC	; 252
    730c:	1f 4f       	sbci	r17, 0xFF	; 255
    730e:	06 c0       	rjmp	.+12     	; 0x731c <vfprintf+0x2be>
    7310:	60 81       	ld	r22, Z
    7312:	71 81       	ldd	r23, Z+1	; 0x01
    7314:	80 e0       	ldi	r24, 0x00	; 0
    7316:	90 e0       	ldi	r25, 0x00	; 0
    7318:	0e 5f       	subi	r16, 0xFE	; 254
    731a:	1f 4f       	sbci	r17, 0xFF	; 255
    731c:	a3 01       	movw	r20, r6
    731e:	0e 94 4c 3a 	call	0x7498	; 0x7498 <__ultoa_invert>
    7322:	88 2e       	mov	r8, r24
    7324:	86 18       	sub	r8, r6
    7326:	fb 2d       	mov	r31, r11
    7328:	ff 77       	andi	r31, 0x7F	; 127
    732a:	3f 2e       	mov	r3, r31
    732c:	36 fe       	sbrs	r3, 6
    732e:	0d c0       	rjmp	.+26     	; 0x734a <vfprintf+0x2ec>
    7330:	23 2d       	mov	r18, r3
    7332:	2e 7f       	andi	r18, 0xFE	; 254
    7334:	a2 2e       	mov	r10, r18
    7336:	89 14       	cp	r8, r9
    7338:	58 f4       	brcc	.+22     	; 0x7350 <vfprintf+0x2f2>
    733a:	34 fe       	sbrs	r3, 4
    733c:	0b c0       	rjmp	.+22     	; 0x7354 <vfprintf+0x2f6>
    733e:	32 fc       	sbrc	r3, 2
    7340:	09 c0       	rjmp	.+18     	; 0x7354 <vfprintf+0x2f6>
    7342:	83 2d       	mov	r24, r3
    7344:	8e 7e       	andi	r24, 0xEE	; 238
    7346:	a8 2e       	mov	r10, r24
    7348:	05 c0       	rjmp	.+10     	; 0x7354 <vfprintf+0x2f6>
    734a:	b8 2c       	mov	r11, r8
    734c:	a3 2c       	mov	r10, r3
    734e:	03 c0       	rjmp	.+6      	; 0x7356 <vfprintf+0x2f8>
    7350:	b8 2c       	mov	r11, r8
    7352:	01 c0       	rjmp	.+2      	; 0x7356 <vfprintf+0x2f8>
    7354:	b9 2c       	mov	r11, r9
    7356:	a4 fe       	sbrs	r10, 4
    7358:	0f c0       	rjmp	.+30     	; 0x7378 <vfprintf+0x31a>
    735a:	fe 01       	movw	r30, r28
    735c:	e8 0d       	add	r30, r8
    735e:	f1 1d       	adc	r31, r1
    7360:	80 81       	ld	r24, Z
    7362:	80 33       	cpi	r24, 0x30	; 48
    7364:	21 f4       	brne	.+8      	; 0x736e <vfprintf+0x310>
    7366:	9a 2d       	mov	r25, r10
    7368:	99 7e       	andi	r25, 0xE9	; 233
    736a:	a9 2e       	mov	r10, r25
    736c:	09 c0       	rjmp	.+18     	; 0x7380 <vfprintf+0x322>
    736e:	a2 fe       	sbrs	r10, 2
    7370:	06 c0       	rjmp	.+12     	; 0x737e <vfprintf+0x320>
    7372:	b3 94       	inc	r11
    7374:	b3 94       	inc	r11
    7376:	04 c0       	rjmp	.+8      	; 0x7380 <vfprintf+0x322>
    7378:	8a 2d       	mov	r24, r10
    737a:	86 78       	andi	r24, 0x86	; 134
    737c:	09 f0       	breq	.+2      	; 0x7380 <vfprintf+0x322>
    737e:	b3 94       	inc	r11
    7380:	a3 fc       	sbrc	r10, 3
    7382:	11 c0       	rjmp	.+34     	; 0x73a6 <vfprintf+0x348>
    7384:	a0 fe       	sbrs	r10, 0
    7386:	06 c0       	rjmp	.+12     	; 0x7394 <vfprintf+0x336>
    7388:	b2 14       	cp	r11, r2
    738a:	88 f4       	brcc	.+34     	; 0x73ae <vfprintf+0x350>
    738c:	28 0c       	add	r2, r8
    738e:	92 2c       	mov	r9, r2
    7390:	9b 18       	sub	r9, r11
    7392:	0e c0       	rjmp	.+28     	; 0x73b0 <vfprintf+0x352>
    7394:	b2 14       	cp	r11, r2
    7396:	60 f4       	brcc	.+24     	; 0x73b0 <vfprintf+0x352>
    7398:	b6 01       	movw	r22, r12
    739a:	80 e2       	ldi	r24, 0x20	; 32
    739c:	90 e0       	ldi	r25, 0x00	; 0
    739e:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    73a2:	b3 94       	inc	r11
    73a4:	f7 cf       	rjmp	.-18     	; 0x7394 <vfprintf+0x336>
    73a6:	b2 14       	cp	r11, r2
    73a8:	18 f4       	brcc	.+6      	; 0x73b0 <vfprintf+0x352>
    73aa:	2b 18       	sub	r2, r11
    73ac:	02 c0       	rjmp	.+4      	; 0x73b2 <vfprintf+0x354>
    73ae:	98 2c       	mov	r9, r8
    73b0:	21 2c       	mov	r2, r1
    73b2:	a4 fe       	sbrs	r10, 4
    73b4:	10 c0       	rjmp	.+32     	; 0x73d6 <vfprintf+0x378>
    73b6:	b6 01       	movw	r22, r12
    73b8:	80 e3       	ldi	r24, 0x30	; 48
    73ba:	90 e0       	ldi	r25, 0x00	; 0
    73bc:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    73c0:	a2 fe       	sbrs	r10, 2
    73c2:	17 c0       	rjmp	.+46     	; 0x73f2 <vfprintf+0x394>
    73c4:	a1 fc       	sbrc	r10, 1
    73c6:	03 c0       	rjmp	.+6      	; 0x73ce <vfprintf+0x370>
    73c8:	88 e7       	ldi	r24, 0x78	; 120
    73ca:	90 e0       	ldi	r25, 0x00	; 0
    73cc:	02 c0       	rjmp	.+4      	; 0x73d2 <vfprintf+0x374>
    73ce:	88 e5       	ldi	r24, 0x58	; 88
    73d0:	90 e0       	ldi	r25, 0x00	; 0
    73d2:	b6 01       	movw	r22, r12
    73d4:	0c c0       	rjmp	.+24     	; 0x73ee <vfprintf+0x390>
    73d6:	8a 2d       	mov	r24, r10
    73d8:	86 78       	andi	r24, 0x86	; 134
    73da:	59 f0       	breq	.+22     	; 0x73f2 <vfprintf+0x394>
    73dc:	a1 fe       	sbrs	r10, 1
    73de:	02 c0       	rjmp	.+4      	; 0x73e4 <vfprintf+0x386>
    73e0:	8b e2       	ldi	r24, 0x2B	; 43
    73e2:	01 c0       	rjmp	.+2      	; 0x73e6 <vfprintf+0x388>
    73e4:	80 e2       	ldi	r24, 0x20	; 32
    73e6:	a7 fc       	sbrc	r10, 7
    73e8:	8d e2       	ldi	r24, 0x2D	; 45
    73ea:	b6 01       	movw	r22, r12
    73ec:	90 e0       	ldi	r25, 0x00	; 0
    73ee:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    73f2:	89 14       	cp	r8, r9
    73f4:	38 f4       	brcc	.+14     	; 0x7404 <vfprintf+0x3a6>
    73f6:	b6 01       	movw	r22, r12
    73f8:	80 e3       	ldi	r24, 0x30	; 48
    73fa:	90 e0       	ldi	r25, 0x00	; 0
    73fc:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    7400:	9a 94       	dec	r9
    7402:	f7 cf       	rjmp	.-18     	; 0x73f2 <vfprintf+0x394>
    7404:	8a 94       	dec	r8
    7406:	f3 01       	movw	r30, r6
    7408:	e8 0d       	add	r30, r8
    740a:	f1 1d       	adc	r31, r1
    740c:	80 81       	ld	r24, Z
    740e:	b6 01       	movw	r22, r12
    7410:	90 e0       	ldi	r25, 0x00	; 0
    7412:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    7416:	81 10       	cpse	r8, r1
    7418:	f5 cf       	rjmp	.-22     	; 0x7404 <vfprintf+0x3a6>
    741a:	22 20       	and	r2, r2
    741c:	09 f4       	brne	.+2      	; 0x7420 <vfprintf+0x3c2>
    741e:	42 ce       	rjmp	.-892    	; 0x70a4 <vfprintf+0x46>
    7420:	b6 01       	movw	r22, r12
    7422:	80 e2       	ldi	r24, 0x20	; 32
    7424:	90 e0       	ldi	r25, 0x00	; 0
    7426:	0e 94 51 37 	call	0x6ea2	; 0x6ea2 <fputc>
    742a:	2a 94       	dec	r2
    742c:	f6 cf       	rjmp	.-20     	; 0x741a <vfprintf+0x3bc>
    742e:	f6 01       	movw	r30, r12
    7430:	86 81       	ldd	r24, Z+6	; 0x06
    7432:	97 81       	ldd	r25, Z+7	; 0x07
    7434:	02 c0       	rjmp	.+4      	; 0x743a <vfprintf+0x3dc>
    7436:	8f ef       	ldi	r24, 0xFF	; 255
    7438:	9f ef       	ldi	r25, 0xFF	; 255
    743a:	2b 96       	adiw	r28, 0x0b	; 11
    743c:	cd bf       	out	0x3d, r28	; 61
    743e:	de bf       	out	0x3e, r29	; 62
    7440:	df 91       	pop	r29
    7442:	cf 91       	pop	r28
    7444:	1f 91       	pop	r17
    7446:	0f 91       	pop	r16
    7448:	ff 90       	pop	r15
    744a:	ef 90       	pop	r14
    744c:	df 90       	pop	r13
    744e:	cf 90       	pop	r12
    7450:	bf 90       	pop	r11
    7452:	af 90       	pop	r10
    7454:	9f 90       	pop	r9
    7456:	8f 90       	pop	r8
    7458:	7f 90       	pop	r7
    745a:	6f 90       	pop	r6
    745c:	5f 90       	pop	r5
    745e:	4f 90       	pop	r4
    7460:	3f 90       	pop	r3
    7462:	2f 90       	pop	r2
    7464:	08 95       	ret

00007466 <__ctype_isfalse>:
    7466:	99 27       	eor	r25, r25
    7468:	88 27       	eor	r24, r24

0000746a <__ctype_istrue>:
    746a:	08 95       	ret

0000746c <strnlen_P>:
    746c:	fc 01       	movw	r30, r24
    746e:	05 90       	lpm	r0, Z+
    7470:	61 50       	subi	r22, 0x01	; 1
    7472:	70 40       	sbci	r23, 0x00	; 0
    7474:	01 10       	cpse	r0, r1
    7476:	d8 f7       	brcc	.-10     	; 0x746e <strnlen_P+0x2>
    7478:	80 95       	com	r24
    747a:	90 95       	com	r25
    747c:	8e 0f       	add	r24, r30
    747e:	9f 1f       	adc	r25, r31
    7480:	08 95       	ret

00007482 <strnlen>:
    7482:	fc 01       	movw	r30, r24
    7484:	61 50       	subi	r22, 0x01	; 1
    7486:	70 40       	sbci	r23, 0x00	; 0
    7488:	01 90       	ld	r0, Z+
    748a:	01 10       	cpse	r0, r1
    748c:	d8 f7       	brcc	.-10     	; 0x7484 <strnlen+0x2>
    748e:	80 95       	com	r24
    7490:	90 95       	com	r25
    7492:	8e 0f       	add	r24, r30
    7494:	9f 1f       	adc	r25, r31
    7496:	08 95       	ret

00007498 <__ultoa_invert>:
    7498:	fa 01       	movw	r30, r20
    749a:	aa 27       	eor	r26, r26
    749c:	28 30       	cpi	r18, 0x08	; 8
    749e:	51 f1       	breq	.+84     	; 0x74f4 <__ultoa_invert+0x5c>
    74a0:	20 31       	cpi	r18, 0x10	; 16
    74a2:	81 f1       	breq	.+96     	; 0x7504 <__ultoa_invert+0x6c>
    74a4:	e8 94       	clt
    74a6:	6f 93       	push	r22
    74a8:	6e 7f       	andi	r22, 0xFE	; 254
    74aa:	6e 5f       	subi	r22, 0xFE	; 254
    74ac:	7f 4f       	sbci	r23, 0xFF	; 255
    74ae:	8f 4f       	sbci	r24, 0xFF	; 255
    74b0:	9f 4f       	sbci	r25, 0xFF	; 255
    74b2:	af 4f       	sbci	r26, 0xFF	; 255
    74b4:	b1 e0       	ldi	r27, 0x01	; 1
    74b6:	3e d0       	rcall	.+124    	; 0x7534 <__ultoa_invert+0x9c>
    74b8:	b4 e0       	ldi	r27, 0x04	; 4
    74ba:	3c d0       	rcall	.+120    	; 0x7534 <__ultoa_invert+0x9c>
    74bc:	67 0f       	add	r22, r23
    74be:	78 1f       	adc	r23, r24
    74c0:	89 1f       	adc	r24, r25
    74c2:	9a 1f       	adc	r25, r26
    74c4:	a1 1d       	adc	r26, r1
    74c6:	68 0f       	add	r22, r24
    74c8:	79 1f       	adc	r23, r25
    74ca:	8a 1f       	adc	r24, r26
    74cc:	91 1d       	adc	r25, r1
    74ce:	a1 1d       	adc	r26, r1
    74d0:	6a 0f       	add	r22, r26
    74d2:	71 1d       	adc	r23, r1
    74d4:	81 1d       	adc	r24, r1
    74d6:	91 1d       	adc	r25, r1
    74d8:	a1 1d       	adc	r26, r1
    74da:	20 d0       	rcall	.+64     	; 0x751c <__ultoa_invert+0x84>
    74dc:	09 f4       	brne	.+2      	; 0x74e0 <__ultoa_invert+0x48>
    74de:	68 94       	set
    74e0:	3f 91       	pop	r19
    74e2:	2a e0       	ldi	r18, 0x0A	; 10
    74e4:	26 9f       	mul	r18, r22
    74e6:	11 24       	eor	r1, r1
    74e8:	30 19       	sub	r19, r0
    74ea:	30 5d       	subi	r19, 0xD0	; 208
    74ec:	31 93       	st	Z+, r19
    74ee:	de f6       	brtc	.-74     	; 0x74a6 <__ultoa_invert+0xe>
    74f0:	cf 01       	movw	r24, r30
    74f2:	08 95       	ret
    74f4:	46 2f       	mov	r20, r22
    74f6:	47 70       	andi	r20, 0x07	; 7
    74f8:	40 5d       	subi	r20, 0xD0	; 208
    74fa:	41 93       	st	Z+, r20
    74fc:	b3 e0       	ldi	r27, 0x03	; 3
    74fe:	0f d0       	rcall	.+30     	; 0x751e <__ultoa_invert+0x86>
    7500:	c9 f7       	brne	.-14     	; 0x74f4 <__ultoa_invert+0x5c>
    7502:	f6 cf       	rjmp	.-20     	; 0x74f0 <__ultoa_invert+0x58>
    7504:	46 2f       	mov	r20, r22
    7506:	4f 70       	andi	r20, 0x0F	; 15
    7508:	40 5d       	subi	r20, 0xD0	; 208
    750a:	4a 33       	cpi	r20, 0x3A	; 58
    750c:	18 f0       	brcs	.+6      	; 0x7514 <__ultoa_invert+0x7c>
    750e:	49 5d       	subi	r20, 0xD9	; 217
    7510:	31 fd       	sbrc	r19, 1
    7512:	40 52       	subi	r20, 0x20	; 32
    7514:	41 93       	st	Z+, r20
    7516:	02 d0       	rcall	.+4      	; 0x751c <__ultoa_invert+0x84>
    7518:	a9 f7       	brne	.-22     	; 0x7504 <__ultoa_invert+0x6c>
    751a:	ea cf       	rjmp	.-44     	; 0x74f0 <__ultoa_invert+0x58>
    751c:	b4 e0       	ldi	r27, 0x04	; 4
    751e:	a6 95       	lsr	r26
    7520:	97 95       	ror	r25
    7522:	87 95       	ror	r24
    7524:	77 95       	ror	r23
    7526:	67 95       	ror	r22
    7528:	ba 95       	dec	r27
    752a:	c9 f7       	brne	.-14     	; 0x751e <__ultoa_invert+0x86>
    752c:	00 97       	sbiw	r24, 0x00	; 0
    752e:	61 05       	cpc	r22, r1
    7530:	71 05       	cpc	r23, r1
    7532:	08 95       	ret
    7534:	9b 01       	movw	r18, r22
    7536:	ac 01       	movw	r20, r24
    7538:	0a 2e       	mov	r0, r26
    753a:	06 94       	lsr	r0
    753c:	57 95       	ror	r21
    753e:	47 95       	ror	r20
    7540:	37 95       	ror	r19
    7542:	27 95       	ror	r18
    7544:	ba 95       	dec	r27
    7546:	c9 f7       	brne	.-14     	; 0x753a <__ultoa_invert+0xa2>
    7548:	62 0f       	add	r22, r18
    754a:	73 1f       	adc	r23, r19
    754c:	84 1f       	adc	r24, r20
    754e:	95 1f       	adc	r25, r21
    7550:	a0 1d       	adc	r26, r0
    7552:	08 95       	ret

00007554 <eeprom_read_block>:
    7554:	e0 ec       	ldi	r30, 0xC0	; 192
    7556:	f1 e0       	ldi	r31, 0x01	; 1
    7558:	a7 85       	ldd	r26, Z+15	; 0x0f
    755a:	a7 fd       	sbrc	r26, 7
    755c:	fd cf       	rjmp	.-6      	; 0x7558 <eeprom_read_block+0x4>
    755e:	a4 85       	ldd	r26, Z+12	; 0x0c
    7560:	a8 60       	ori	r26, 0x08	; 8
    7562:	a4 87       	std	Z+12, r26	; 0x0c
    7564:	60 50       	subi	r22, 0x00	; 0
    7566:	70 4f       	sbci	r23, 0xF0	; 240
    7568:	0c 94 1b 37 	jmp	0x6e36	; 0x6e36 <memcpy>

0000756c <eeprom_update_block>:
    756c:	dc 01       	movw	r26, r24
    756e:	a4 0f       	add	r26, r20
    7570:	b5 1f       	adc	r27, r21
    7572:	41 50       	subi	r20, 0x01	; 1
    7574:	50 40       	sbci	r21, 0x00	; 0
    7576:	48 f0       	brcs	.+18     	; 0x758a <eeprom_update_block+0x1e>
    7578:	cb 01       	movw	r24, r22
    757a:	84 0f       	add	r24, r20
    757c:	95 1f       	adc	r25, r21
    757e:	2e 91       	ld	r18, -X
    7580:	0e 94 c7 3a 	call	0x758e	; 0x758e <eeprom_update_r18>
    7584:	41 50       	subi	r20, 0x01	; 1
    7586:	50 40       	sbci	r21, 0x00	; 0
    7588:	d0 f7       	brcc	.-12     	; 0x757e <eeprom_update_block+0x12>
    758a:	08 95       	ret

0000758c <eeprom_update_byte>:
    758c:	26 2f       	mov	r18, r22

0000758e <eeprom_update_r18>:
    758e:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <eeprom_mapen>
    7592:	00 80       	ld	r0, Z
    7594:	02 16       	cp	r0, r18
    7596:	19 f0       	breq	.+6      	; 0x759e <eeprom_update_r18+0x10>
    7598:	0e 94 d2 3a 	call	0x75a4	; 0x75a4 <eeprom_write_r18>
    759c:	01 97       	sbiw	r24, 0x01	; 1
    759e:	01 97       	sbiw	r24, 0x01	; 1
    75a0:	08 95       	ret

000075a2 <eeprom_write_byte>:
    75a2:	26 2f       	mov	r18, r22

000075a4 <eeprom_write_r18>:
    75a4:	e0 ec       	ldi	r30, 0xC0	; 192
    75a6:	f1 e0       	ldi	r31, 0x01	; 1
    75a8:	37 85       	ldd	r19, Z+15	; 0x0f
    75aa:	37 fd       	sbrc	r19, 7
    75ac:	fd cf       	rjmp	.-6      	; 0x75a8 <eeprom_write_r18+0x4>
    75ae:	34 85       	ldd	r19, Z+12	; 0x0c
    75b0:	37 7f       	andi	r19, 0xF7	; 247
    75b2:	34 87       	std	Z+12, r19	; 0x0c
    75b4:	37 85       	ldd	r19, Z+15	; 0x0f
    75b6:	31 ff       	sbrs	r19, 1
    75b8:	09 c0       	rjmp	.+18     	; 0x75cc <eeprom_write_r18+0x28>
    75ba:	36 e3       	ldi	r19, 0x36	; 54
    75bc:	32 87       	std	Z+10, r19	; 0x0a
    75be:	38 ed       	ldi	r19, 0xD8	; 216
    75c0:	34 bf       	out	0x34, r19	; 52
    75c2:	31 e0       	ldi	r19, 0x01	; 1
    75c4:	33 87       	std	Z+11, r19	; 0x0b
    75c6:	37 85       	ldd	r19, Z+15	; 0x0f
    75c8:	37 fd       	sbrc	r19, 7
    75ca:	fd cf       	rjmp	.-6      	; 0x75c6 <eeprom_write_r18+0x22>
    75cc:	33 e3       	ldi	r19, 0x33	; 51
    75ce:	32 87       	std	Z+10, r19	; 0x0a
    75d0:	80 83       	st	Z, r24
    75d2:	91 83       	std	Z+1, r25	; 0x01
    75d4:	12 82       	std	Z+2, r1	; 0x02
    75d6:	24 83       	std	Z+4, r18	; 0x04
    75d8:	25 e3       	ldi	r18, 0x35	; 53
    75da:	22 87       	std	Z+10, r18	; 0x0a
    75dc:	28 ed       	ldi	r18, 0xD8	; 216
    75de:	31 e0       	ldi	r19, 0x01	; 1
    75e0:	24 bf       	out	0x34, r18	; 52
    75e2:	33 87       	std	Z+11, r19	; 0x0b
    75e4:	01 96       	adiw	r24, 0x01	; 1
    75e6:	08 95       	ret

000075e8 <eeprom_read_byte>:
    75e8:	03 d0       	rcall	.+6      	; 0x75f0 <eeprom_mapen>
    75ea:	80 81       	ld	r24, Z
    75ec:	99 27       	eor	r25, r25
    75ee:	08 95       	ret

000075f0 <eeprom_mapen>:
    75f0:	e0 ec       	ldi	r30, 0xC0	; 192
    75f2:	f1 e0       	ldi	r31, 0x01	; 1
    75f4:	37 85       	ldd	r19, Z+15	; 0x0f
    75f6:	37 fd       	sbrc	r19, 7
    75f8:	fd cf       	rjmp	.-6      	; 0x75f4 <eeprom_mapen+0x4>
    75fa:	34 85       	ldd	r19, Z+12	; 0x0c
    75fc:	38 60       	ori	r19, 0x08	; 8
    75fe:	34 87       	std	Z+12, r19	; 0x0c
    7600:	fc 01       	movw	r30, r24
    7602:	e0 50       	subi	r30, 0x00	; 0
    7604:	f0 4f       	sbci	r31, 0xF0	; 240
    7606:	08 95       	ret

00007608 <__udivmodsi4>:
    7608:	a1 e2       	ldi	r26, 0x21	; 33
    760a:	1a 2e       	mov	r1, r26
    760c:	aa 1b       	sub	r26, r26
    760e:	bb 1b       	sub	r27, r27
    7610:	fd 01       	movw	r30, r26
    7612:	0d c0       	rjmp	.+26     	; 0x762e <__udivmodsi4_ep>

00007614 <__udivmodsi4_loop>:
    7614:	aa 1f       	adc	r26, r26
    7616:	bb 1f       	adc	r27, r27
    7618:	ee 1f       	adc	r30, r30
    761a:	ff 1f       	adc	r31, r31
    761c:	a2 17       	cp	r26, r18
    761e:	b3 07       	cpc	r27, r19
    7620:	e4 07       	cpc	r30, r20
    7622:	f5 07       	cpc	r31, r21
    7624:	20 f0       	brcs	.+8      	; 0x762e <__udivmodsi4_ep>
    7626:	a2 1b       	sub	r26, r18
    7628:	b3 0b       	sbc	r27, r19
    762a:	e4 0b       	sbc	r30, r20
    762c:	f5 0b       	sbc	r31, r21

0000762e <__udivmodsi4_ep>:
    762e:	66 1f       	adc	r22, r22
    7630:	77 1f       	adc	r23, r23
    7632:	88 1f       	adc	r24, r24
    7634:	99 1f       	adc	r25, r25
    7636:	1a 94       	dec	r1
    7638:	69 f7       	brne	.-38     	; 0x7614 <__udivmodsi4_loop>
    763a:	60 95       	com	r22
    763c:	70 95       	com	r23
    763e:	80 95       	com	r24
    7640:	90 95       	com	r25
    7642:	9b 01       	movw	r18, r22
    7644:	ac 01       	movw	r20, r24
    7646:	bd 01       	movw	r22, r26
    7648:	cf 01       	movw	r24, r30
    764a:	08 95       	ret

0000764c <_exit>:
    764c:	f8 94       	cli

0000764e <__stop_program>:
    764e:	ff cf       	rjmp	.-2      	; 0x764e <__stop_program>
