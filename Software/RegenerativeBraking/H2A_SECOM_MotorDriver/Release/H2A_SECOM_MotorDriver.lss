
H2A_SECOM_MotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000007a0  00802000  00007918  000079ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006f8  008027a0  008027a0  0000814c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000814c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000081a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  000081e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c1d6  00000000  00000000  00008668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004940  00000000  00000000  0001483e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039e4  00000000  00000000  0001917e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012a4  00000000  00000000  0001cb64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000069c5  00000000  00000000  0001de08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005809  00000000  00000000  000247cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  00029fd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 01 	jmp	0x35e	; 0x35e <__ctors_end>
       4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
       8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
       c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      10:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      14:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      18:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      1c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      20:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      24:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      28:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      2c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      30:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      34:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      38:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      3c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      40:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      44:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      48:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      4c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      50:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      54:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      58:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      5c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      60:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      64:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      68:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      6c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      70:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      74:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      78:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      7c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      80:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      84:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      88:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      8c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      90:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      94:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      98:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      9c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      ac:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      bc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      cc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      d0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      d4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      d8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      dc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      e0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      e4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      e8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      ec:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      f0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      f4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      f8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      fc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     100:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     104:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     108:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     10c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     110:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     114:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     118:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     11c:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <__vector_71>
     120:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     124:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     128:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     12c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     130:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     134:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     138:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     13c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     140:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     144:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     148:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     14c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     150:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     154:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     158:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     15c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     160:	0c 94 23 2d 	jmp	0x5a46	; 0x5a46 <__vector_88>
     164:	0c 94 4b 2d 	jmp	0x5a96	; 0x5a96 <__vector_89>
     168:	0c 94 7d 2d 	jmp	0x5afa	; 0x5afa <__vector_90>
     16c:	0c 94 9a 2d 	jmp	0x5b34	; 0x5b34 <__vector_91>
     170:	0c 94 c2 2d 	jmp	0x5b84	; 0x5b84 <__vector_92>
     174:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     178:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     17c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     180:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     184:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     188:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     18c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     190:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     194:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     198:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     19c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1a0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1a4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1a8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1ac:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1b0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1b4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1b8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1bc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1c0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1c4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1c8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1cc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1d0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1d4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1d8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1dc:	0c 94 f4 2d 	jmp	0x5be8	; 0x5be8 <__vector_119>
     1e0:	0c 94 1c 2e 	jmp	0x5c38	; 0x5c38 <__vector_120>
     1e4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1e8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1ec:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1f0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1f4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1f8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 86 09 	jmp	0x130c	; 0x130c <GetMotorDriverTemp>
     200:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <GetSupercapEnergy>
     204:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <GetSupercapPower>
     208:	0c 94 95 2b 	jmp	0x572a	; 0x572a <AcceptDataGPSDirection>
     20c:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <GetSupercapVoltage>
     210:	0c 94 95 0e 	jmp	0x1d2a	; 0x1d2a <GetWheelSpeedH2A>
     214:	0c 94 be 09 	jmp	0x137c	; 0x137c <GetDiodeStatus>
     218:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <GetFuelCellCurrent>
     21c:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <GetMotorVoltage>
     220:	0c 94 45 09 	jmp	0x128a	; 0x128a <GetFullPowerButtonStatus>
     224:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <GetFuelCellEnergy>
     228:	0c 94 00 0a 	jmp	0x1400	; 0x1400 <GetTimeSnapshot>
     22c:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <GetWheelDistance>
     230:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <GetFuelCellVoltage>
     234:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <CoreAnalogTakeSnapshot485>
     238:	0c 94 8e 2b 	jmp	0x571c	; 0x571c <AcceptDataGPSPosition>
     23c:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <Ctrl_putchar>
     240:	0c 94 46 0c 	jmp	0x188c	; 0x188c <GetFuelCellPower>
     244:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <GetMotorCurrent>
     248:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <GetSupercapCurrent>
     24c:	0c 94 a3 2b 	jmp	0x5746	; 0x5746 <AcceptDataGPSTime>
     250:	0c 94 38 0e 	jmp	0x1c70	; 0x1c70 <GetWheelSpeedEVA>
     254:	0c 94 04 09 	jmp	0x1208	; 0x1208 <GetCruiseControlButtonStatus>
     258:	0c 94 9c 2b 	jmp	0x5738	; 0x5738 <AcceptDataGPSSpeed>

0000025c <__trampolines_end>:
     25c:	6e 61       	ori	r22, 0x1E	; 30
     25e:	6e 00       	.word	0x006e	; ????

00000260 <__c.2240>:
     260:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     270:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     280:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     290:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2a0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2b0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2c0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2d0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2e0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2f0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     300:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     310:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     320:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     330:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     340:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     350:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000035e <__ctors_end>:
     35e:	11 24       	eor	r1, r1
     360:	1f be       	out	0x3f, r1	; 63
     362:	cf ef       	ldi	r28, 0xFF	; 255
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df e5       	ldi	r29, 0x5F	; 95
     368:	de bf       	out	0x3e, r29	; 62
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	0c bf       	out	0x3c, r16	; 60

0000036e <__do_copy_data>:
     36e:	17 e2       	ldi	r17, 0x27	; 39
     370:	a0 e0       	ldi	r26, 0x00	; 0
     372:	b0 e2       	ldi	r27, 0x20	; 32
     374:	e8 e1       	ldi	r30, 0x18	; 24
     376:	f9 e7       	ldi	r31, 0x79	; 121
     378:	00 e0       	ldi	r16, 0x00	; 0
     37a:	0b bf       	out	0x3b, r16	; 59
     37c:	02 c0       	rjmp	.+4      	; 0x382 <__do_copy_data+0x14>
     37e:	07 90       	elpm	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	a0 3a       	cpi	r26, 0xA0	; 160
     384:	b1 07       	cpc	r27, r17
     386:	d9 f7       	brne	.-10     	; 0x37e <__do_copy_data+0x10>

00000388 <__do_clear_bss>:
     388:	2e e2       	ldi	r18, 0x2E	; 46
     38a:	a0 ea       	ldi	r26, 0xA0	; 160
     38c:	b7 e2       	ldi	r27, 0x27	; 39
     38e:	01 c0       	rjmp	.+2      	; 0x392 <.do_clear_bss_start>

00000390 <.do_clear_bss_loop>:
     390:	1d 92       	st	X+, r1

00000392 <.do_clear_bss_start>:
     392:	a8 39       	cpi	r26, 0x98	; 152
     394:	b2 07       	cpc	r27, r18
     396:	e1 f7       	brne	.-8      	; 0x390 <.do_clear_bss_loop>
     398:	0e 94 c1 05 	call	0xb82	; 0xb82 <main>
     39c:	0c 94 8a 3c 	jmp	0x7914	; 0x7914 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a4 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     3a4:	0f 93       	push	r16
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	2f b7       	in	r18, 0x3f	; 63
     3b2:	29 83       	std	Y+1, r18	; 0x01
     3b4:	f8 94       	cli
     3b6:	1b be       	out	0x3b, r1	; 59
     3b8:	fc 01       	movw	r30, r24
     3ba:	08 ed       	ldi	r16, 0xD8	; 216
     3bc:	04 bf       	out	0x34, r16	; 52
     3be:	60 83       	st	Z, r22
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	8f bf       	out	0x3f, r24	; 63
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	0f 91       	pop	r16
     3cc:	08 95       	ret

000003ce <CLKSYS_XOSC_Config>:
     3ce:	61 11       	cpse	r22, r1
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <CLKSYS_XOSC_Config+0x8>
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <CLKSYS_XOSC_Config+0xa>
     3d6:	90 e2       	ldi	r25, 0x20	; 32
     3d8:	84 2b       	or	r24, r20
     3da:	98 2b       	or	r25, r24
     3dc:	90 93 52 00 	sts	0x0052, r25	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     3e0:	08 95       	ret

000003e2 <CLKSYS_PLL_Config>:
     3e2:	6f 71       	andi	r22, 0x1F	; 31
     3e4:	86 2b       	or	r24, r22
     3e6:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     3ea:	08 95       	ret

000003ec <CLKSYS_Disable>:
     3ec:	e0 e5       	ldi	r30, 0x50	; 80
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	90 81       	ld	r25, Z
     3f2:	28 2f       	mov	r18, r24
     3f4:	20 95       	com	r18
     3f6:	92 23       	and	r25, r18
     3f8:	90 83       	st	Z, r25
     3fa:	90 81       	ld	r25, Z
     3fc:	89 23       	and	r24, r25
     3fe:	08 95       	ret

00000400 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     408:	00 e4       	ldi	r16, 0x40	; 64
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	f8 01       	movw	r30, r16
     40e:	60 81       	ld	r22, Z
     410:	68 7f       	andi	r22, 0xF8	; 248
     412:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     41c:	f8 01       	movw	r30, r16
     41e:	80 81       	ld	r24, Z
	return clkCtrl;
}
     420:	8c 23       	and	r24, r28
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <InitSlave>:
 *
 */
void freeSlave (){

	free(sOwnSensor);
	free(sWantedSensor);
     42a:	80 93 fe 27 	sts	0x27FE, r24	; 0x8027fe <sMyAdress>
     42e:	90 93 ff 27 	sts	0x27FF, r25	; 0x8027ff <sMyAdress+0x1>
     432:	10 92 fc 27 	sts	0x27FC, r1	; 0x8027fc <sNumOwnSensor>
     436:	10 92 fd 27 	sts	0x27FD, r1	; 0x8027fd <sNumOwnSensor+0x1>
     43a:	10 92 fa 27 	sts	0x27FA, r1	; 0x8027fa <sNumWantedSensor>
     43e:	10 92 fb 27 	sts	0x27FB, r1	; 0x8027fb <sNumWantedSensor+0x1>
     442:	10 92 f8 27 	sts	0x27F8, r1	; 0x8027f8 <sOwnSensor>
     446:	10 92 f9 27 	sts	0x27F9, r1	; 0x8027f9 <sOwnSensor+0x1>
     44a:	10 92 f6 27 	sts	0x27F6, r1	; 0x8027f6 <sWantedSensor>
     44e:	10 92 f7 27 	sts	0x27F7, r1	; 0x8027f7 <sWantedSensor+0x1>
     452:	08 95       	ret

00000454 <AddSlaveOwnSensor>:
     454:	6f 92       	push	r6
     456:	7f 92       	push	r7
     458:	8f 92       	push	r8
     45a:	9f 92       	push	r9
     45c:	af 92       	push	r10
     45e:	bf 92       	push	r11
     460:	cf 92       	push	r12
     462:	df 92       	push	r13
     464:	ef 92       	push	r14
     466:	ff 92       	push	r15
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	4c 01       	movw	r8, r24
     472:	6b 01       	movw	r12, r22
     474:	5a 01       	movw	r10, r20
     476:	79 01       	movw	r14, r18
     478:	00 91 fc 27 	lds	r16, 0x27FC	; 0x8027fc <sNumOwnSensor>
     47c:	10 91 fd 27 	lds	r17, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     480:	0f 5f       	subi	r16, 0xFF	; 255
     482:	1f 4f       	sbci	r17, 0xFF	; 255
     484:	8b e0       	ldi	r24, 0x0B	; 11
     486:	80 9f       	mul	r24, r16
     488:	30 01       	movw	r6, r0
     48a:	81 9f       	mul	r24, r17
     48c:	70 0c       	add	r7, r0
     48e:	11 24       	eor	r1, r1
     490:	b3 01       	movw	r22, r6
     492:	80 91 f8 27 	lds	r24, 0x27F8	; 0x8027f8 <sOwnSensor>
     496:	90 91 f9 27 	lds	r25, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     49a:	0e 94 97 37 	call	0x6f2e	; 0x6f2e <realloc>
     49e:	80 93 f8 27 	sts	0x27F8, r24	; 0x8027f8 <sOwnSensor>
     4a2:	90 93 f9 27 	sts	0x27F9, r25	; 0x8027f9 <sOwnSensor+0x1>
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	d1 f0       	breq	.+52     	; 0x4de <AddSlaveOwnSensor+0x8a>
     4aa:	2b e0       	ldi	r18, 0x0B	; 11
     4ac:	62 1a       	sub	r6, r18
     4ae:	71 08       	sbc	r7, r1
     4b0:	ec 01       	movw	r28, r24
     4b2:	c6 0d       	add	r28, r6
     4b4:	d7 1d       	adc	r29, r7
     4b6:	44 e0       	ldi	r20, 0x04	; 4
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	b4 01       	movw	r22, r8
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 ae 3a 	call	0x755c	; 0x755c <strncpy>
     4c2:	1c 82       	std	Y+4, r1	; 0x04
     4c4:	a9 86       	std	Y+9, r10	; 0x09
     4c6:	ba 86       	std	Y+10, r11	; 0x0a
     4c8:	cf 82       	std	Y+7, r12	; 0x07
     4ca:	d8 86       	std	Y+8, r13	; 0x08
     4cc:	ed 82       	std	Y+5, r14	; 0x05
     4ce:	fe 82       	std	Y+6, r15	; 0x06
     4d0:	00 93 fc 27 	sts	0x27FC, r16	; 0x8027fc <sNumOwnSensor>
     4d4:	10 93 fd 27 	sts	0x27FD, r17	; 0x8027fd <sNumOwnSensor+0x1>
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <AddSlaveOwnSensor+0x8e>
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	bf 90       	pop	r11
     4f4:	af 90       	pop	r10
     4f6:	9f 90       	pop	r9
     4f8:	8f 90       	pop	r8
     4fa:	7f 90       	pop	r7
     4fc:	6f 90       	pop	r6
     4fe:	08 95       	ret

00000500 <AddWantedSensor>:
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	5c 01       	movw	r10, r24
     516:	6b 01       	movw	r12, r22
     518:	e0 90 fa 27 	lds	r14, 0x27FA	; 0x8027fa <sNumWantedSensor>
     51c:	f0 90 fb 27 	lds	r15, 0x27FB	; 0x8027fb <sNumWantedSensor+0x1>
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	e8 1a       	sub	r14, r24
     524:	f8 0a       	sbc	r15, r24
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	8e 9d       	mul	r24, r14
     52a:	80 01       	movw	r16, r0
     52c:	8f 9d       	mul	r24, r15
     52e:	10 0d       	add	r17, r0
     530:	11 24       	eor	r1, r1
     532:	b8 01       	movw	r22, r16
     534:	80 91 f6 27 	lds	r24, 0x27F6	; 0x8027f6 <sWantedSensor>
     538:	90 91 f7 27 	lds	r25, 0x27F7	; 0x8027f7 <sWantedSensor+0x1>
     53c:	0e 94 97 37 	call	0x6f2e	; 0x6f2e <realloc>
     540:	80 93 f6 27 	sts	0x27F6, r24	; 0x8027f6 <sWantedSensor>
     544:	90 93 f7 27 	sts	0x27F7, r25	; 0x8027f7 <sWantedSensor+0x1>
     548:	00 97       	sbiw	r24, 0x00	; 0
     54a:	a9 f0       	breq	.+42     	; 0x576 <AddWantedSensor+0x76>
     54c:	07 50       	subi	r16, 0x07	; 7
     54e:	11 09       	sbc	r17, r1
     550:	ec 01       	movw	r28, r24
     552:	c0 0f       	add	r28, r16
     554:	d1 1f       	adc	r29, r17
     556:	44 e0       	ldi	r20, 0x04	; 4
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	b5 01       	movw	r22, r10
     55c:	ce 01       	movw	r24, r28
     55e:	0e 94 ae 3a 	call	0x755c	; 0x755c <strncpy>
     562:	1c 82       	std	Y+4, r1	; 0x04
     564:	cd 82       	std	Y+5, r12	; 0x05
     566:	de 82       	std	Y+6, r13	; 0x06
     568:	e0 92 fa 27 	sts	0x27FA, r14	; 0x8027fa <sNumWantedSensor>
     56c:	f0 92 fb 27 	sts	0x27FB, r15	; 0x8027fb <sNumWantedSensor+0x1>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	02 c0       	rjmp	.+4      	; 0x57a <AddWantedSensor+0x7a>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	1f 91       	pop	r17
     580:	0f 91       	pop	r16
     582:	ff 90       	pop	r15
     584:	ef 90       	pop	r14
     586:	df 90       	pop	r13
     588:	cf 90       	pop	r12
     58a:	bf 90       	pop	r11
     58c:	af 90       	pop	r10
     58e:	08 95       	ret

00000590 <HandleSnapshot>:
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
    }
}

//update value of sensors of sensors of a slave
void HandleSnapshot(){
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	c0 e0       	ldi	r28, 0x00	; 0
     59e:	d0 e0       	ldi	r29, 0x00	; 0
     5a0:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sNumOwnSensor>
     5a4:	90 91 fd 27 	lds	r25, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     5a8:	c8 17       	cp	r28, r24
     5aa:	d9 07       	cpc	r29, r25
     5ac:	94 f4       	brge	.+36     	; 0x5d2 <HandleSnapshot+0x42>
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
     5ae:	80 91 f8 27 	lds	r24, 0x27F8	; 0x8027f8 <sOwnSensor>
     5b2:	90 91 f9 27 	lds	r25, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     5b6:	80 0f       	add	r24, r16
     5b8:	91 1f       	adc	r25, r17
     5ba:	dc 01       	movw	r26, r24
     5bc:	19 96       	adiw	r26, 0x09	; 9
     5be:	ed 91       	ld	r30, X+
     5c0:	fc 91       	ld	r31, X
     5c2:	1a 97       	sbiw	r26, 0x0a	; 10
     5c4:	30 97       	sbiw	r30, 0x00	; 0
     5c6:	09 f0       	breq	.+2      	; 0x5ca <HandleSnapshot+0x3a>
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
     5c8:	19 95       	eicall
//update value of sensors of sensors of a slave
void HandleSnapshot(){

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     5ca:	21 96       	adiw	r28, 0x01	; 1
     5cc:	05 5f       	subi	r16, 0xF5	; 245
     5ce:	1f 4f       	sbci	r17, 0xFF	; 255
     5d0:	e7 cf       	rjmp	.-50     	; 0x5a0 <HandleSnapshot+0x10>
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
	}
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	08 95       	ret

000005dc <HandleCmdS.constprop.1>:
 *
 * \param 1 response      :  the buffer where the response is saved
 * \param 2 dataFromMaster: the received message from the master
 *
 */
static void HandleCmdS(char* response, char* dataFromMaster){
     5dc:	8f 92       	push	r8
     5de:	9f 92       	push	r9
     5e0:	af 92       	push	r10
     5e2:	bf 92       	push	r11
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	25 97       	sbiw	r28, 0x05	; 5
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	8c 01       	movw	r16, r24
	int position=0, err =0;
	char adr[SUBADR_LENG];

	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
     5fe:	bc 01       	movw	r22, r24
     600:	68 5f       	subi	r22, 0xF8	; 248
     602:	7f 4f       	sbci	r23, 0xFF	; 255
     604:	44 e0       	ldi	r20, 0x04	; 4
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	ce 01       	movw	r24, r28
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	0e 94 ae 3a 	call	0x755c	; 0x755c <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     610:	1d 82       	std	Y+5, r1	; 0x05

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){
     612:	44 e0       	ldi	r20, 0x04	; 4
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	64 ec       	ldi	r22, 0xC4	; 196
     618:	70 e2       	ldi	r23, 0x20	; 32
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	0e 94 a0 3a 	call	0x7540	; 0x7540 <strncmp>
     622:	89 2b       	or	r24, r25
     624:	99 f0       	breq	.+38     	; 0x64c <HandleCmdS.constprop.1+0x70>

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     626:	80 90 fa 27 	lds	r8, 0x27FA	; 0x8027fa <sNumWantedSensor>
     62a:	90 90 fb 27 	lds	r9, 0x27FB	; 0x8027fb <sNumWantedSensor+0x1>
		if(/*!strncmp(adressSensor,sWantedSensor[i].subadress,SUBADR_LENG-1)*/ FindSensorOK( adressSensor, sWantedSensor[i].subadress )){
     62e:	40 91 f6 27 	lds	r20, 0x27F6	; 0x8027f6 <sWantedSensor>
     632:	50 91 f7 27 	lds	r21, 0x27F7	; 0x8027f7 <sWantedSensor+0x1>
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     636:	79 81       	ldd	r23, Y+1	; 0x01
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     638:	fa 80       	ldd	r15, Y+2	; 0x02
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     63a:	eb 80       	ldd	r14, Y+3	; 0x03
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     63c:	dc 80       	ldd	r13, Y+4	; 0x04
     63e:	fa 01       	movw	r30, r20
     640:	33 96       	adiw	r30, 0x03	; 3
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	9f ef       	ldi	r25, 0xFF	; 255
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	10 c0       	rjmp	.+32     	; 0x66c <HandleCmdS.constprop.1+0x90>
	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){

		HandleSnapshot();
     64c:	0e 94 c8 02 	call	0x590	; 0x590 <HandleSnapshot>
     650:	7d c0       	rjmp	.+250    	; 0x74c <HandleCmdS.constprop.1+0x170>
     652:	5f 01       	movw	r10, r30
     654:	63 e0       	ldi	r22, 0x03	; 3
     656:	a6 1a       	sub	r10, r22
     658:	b1 08       	sbc	r11, r1
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     65a:	d5 01       	movw	r26, r10
     65c:	6c 91       	ld	r22, X
     65e:	6a 32       	cpi	r22, 0x2A	; 42
     660:	49 f0       	breq	.+18     	; 0x674 <HandleCmdS.constprop.1+0x98>
     662:	67 17       	cp	r22, r23
     664:	39 f0       	breq	.+14     	; 0x674 <HandleCmdS.constprop.1+0x98>

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     666:	2f 5f       	subi	r18, 0xFF	; 255
     668:	3f 4f       	sbci	r19, 0xFF	; 255
     66a:	37 96       	adiw	r30, 0x07	; 7
     66c:	28 15       	cp	r18, r8
     66e:	39 05       	cpc	r19, r9
     670:	84 f3       	brlt	.-32     	; 0x652 <HandleCmdS.constprop.1+0x76>
     672:	1b c0       	rjmp	.+54     	; 0x6aa <HandleCmdS.constprop.1+0xce>
     674:	5f 01       	movw	r10, r30
     676:	b2 e0       	ldi	r27, 0x02	; 2
     678:	ab 1a       	sub	r10, r27
     67a:	b1 08       	sbc	r11, r1

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     67c:	d5 01       	movw	r26, r10
     67e:	6c 91       	ld	r22, X
     680:	6a 32       	cpi	r22, 0x2A	; 42
     682:	11 f0       	breq	.+4      	; 0x688 <HandleCmdS.constprop.1+0xac>
     684:	6f 11       	cpse	r22, r15
     686:	ef cf       	rjmp	.-34     	; 0x666 <HandleCmdS.constprop.1+0x8a>
     688:	5f 01       	movw	r10, r30
     68a:	b1 e0       	ldi	r27, 0x01	; 1
     68c:	ab 1a       	sub	r10, r27
     68e:	b1 08       	sbc	r11, r1
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     690:	d5 01       	movw	r26, r10
     692:	6c 91       	ld	r22, X
     694:	6a 32       	cpi	r22, 0x2A	; 42
     696:	11 f0       	breq	.+4      	; 0x69c <HandleCmdS.constprop.1+0xc0>
     698:	6e 11       	cpse	r22, r14
     69a:	e5 cf       	rjmp	.-54     	; 0x666 <HandleCmdS.constprop.1+0x8a>
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     69c:	60 81       	ld	r22, Z
     69e:	6a 32       	cpi	r22, 0x2A	; 42
     6a0:	11 f0       	breq	.+4      	; 0x6a6 <HandleCmdS.constprop.1+0xca>
     6a2:	6d 11       	cpse	r22, r13
     6a4:	e0 cf       	rjmp	.-64     	; 0x666 <HandleCmdS.constprop.1+0x8a>
     6a6:	c9 01       	movw	r24, r18
     6a8:	de cf       	rjmp	.-68     	; 0x666 <HandleCmdS.constprop.1+0x8a>

		HandleSnapshot();
	}
	else{
		position = FindWantedSensorIndex(adr);
		if(position != -1){
     6aa:	8f 3f       	cpi	r24, 0xFF	; 255
     6ac:	bf ef       	ldi	r27, 0xFF	; 255
     6ae:	9b 07       	cpc	r25, r27
     6b0:	89 f1       	breq	.+98     	; 0x714 <HandleCmdS.constprop.1+0x138>
			err = (*sWantedSensor[position].fpSetData)(adr,dataFromMaster + SETDATA_POS);
     6b2:	67 e0       	ldi	r22, 0x07	; 7
     6b4:	68 9f       	mul	r22, r24
     6b6:	90 01       	movw	r18, r0
     6b8:	69 9f       	mul	r22, r25
     6ba:	30 0d       	add	r19, r0
     6bc:	11 24       	eor	r1, r1
     6be:	fa 01       	movw	r30, r20
     6c0:	e2 0f       	add	r30, r18
     6c2:	f3 1f       	adc	r31, r19
     6c4:	b8 01       	movw	r22, r16
     6c6:	64 5f       	subi	r22, 0xF4	; 244
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	05 80       	ldd	r0, Z+5	; 0x05
     6cc:	f6 81       	ldd	r31, Z+6	; 0x06
     6ce:	e0 2d       	mov	r30, r0
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	19 95       	eicall
     6d6:	30 91 ff 27 	lds	r19, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     6da:	20 91 fe 27 	lds	r18, 0x27FE	; 0x8027fe <sMyAdress>

			if(err==0){
     6de:	89 2b       	or	r24, r25
     6e0:	71 f4       	brne	.+28     	; 0x6fe <HandleCmdS.constprop.1+0x122>
				snprintf(response,MAXDATA-1,"$%03dSOK",sMyAdress);
     6e2:	3f 93       	push	r19
     6e4:	2f 93       	push	r18
     6e6:	89 ec       	ldi	r24, 0xC9	; 201
     6e8:	90 e2       	ldi	r25, 0x20	; 32
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	1f 92       	push	r1
     6f0:	8d e4       	ldi	r24, 0x4D	; 77
     6f2:	8f 93       	push	r24
     6f4:	82 ea       	ldi	r24, 0xA2	; 162
     6f6:	97 e2       	ldi	r25, 0x27	; 39
     6f8:	9f 93       	push	r25
     6fa:	8f 93       	push	r24
     6fc:	23 c0       	rjmp	.+70     	; 0x744 <HandleCmdS.constprop.1+0x168>
			}
			else{
				snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault'",sMyAdress);
     6fe:	e2 ea       	ldi	r30, 0xA2	; 162
     700:	f7 e2       	ldi	r31, 0x27	; 39
     702:	df 01       	movw	r26, r30
     704:	0d 90       	ld	r0, X+
     706:	00 20       	and	r0, r0
     708:	e9 f7       	brne	.-6      	; 0x704 <HandleCmdS.constprop.1+0x128>
     70a:	3f 93       	push	r19
     70c:	2f 93       	push	r18
     70e:	82 ed       	ldi	r24, 0xD2	; 210
     710:	90 e2       	ldi	r25, 0x20	; 32
     712:	0e c0       	rjmp	.+28     	; 0x730 <HandleCmdS.constprop.1+0x154>
			}
		}
		else{
			snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault wrong sensor'",sMyAdress);
     714:	e2 ea       	ldi	r30, 0xA2	; 162
     716:	f7 e2       	ldi	r31, 0x27	; 39
     718:	df 01       	movw	r26, r30
     71a:	0d 90       	ld	r0, X+
     71c:	00 20       	and	r0, r0
     71e:	e9 f7       	brne	.-6      	; 0x71a <HandleCmdS.constprop.1+0x13e>
     720:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     724:	8f 93       	push	r24
     726:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     72a:	8f 93       	push	r24
     72c:	81 ee       	ldi	r24, 0xE1	; 225
     72e:	90 e2       	ldi	r25, 0x20	; 32
     730:	9f 93       	push	r25
     732:	8f 93       	push	r24
     734:	81 ef       	ldi	r24, 0xF1	; 241
     736:	97 e2       	ldi	r25, 0x27	; 39
     738:	8a 1b       	sub	r24, r26
     73a:	9b 0b       	sbc	r25, r27
     73c:	9f 93       	push	r25
     73e:	8f 93       	push	r24
     740:	ff 93       	push	r31
     742:	ef 93       	push	r30
     744:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	de bf       	out	0x3e, r29	; 62
		}
	}
}
     74c:	25 96       	adiw	r28, 0x05	; 5
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	de bf       	out	0x3e, r29	; 62
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	9f 90       	pop	r9
     766:	8f 90       	pop	r8
     768:	08 95       	ret

0000076a <SendLineRS485>:
 *
 * \param 1 data : data from the slave
 *
 */

void SendLineRS485(char* data){
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	ec 01       	movw	r28, r24

	while(*data != '\0'){
     770:	89 91       	ld	r24, Y+
     772:	88 23       	and	r24, r24
     774:	19 f0       	breq	.+6      	; 0x77c <SendLineRS485+0x12>
		WriteByte_Comm485(*data++);
     776:	0e 94 67 2c 	call	0x58ce	; 0x58ce <WriteByte_Comm485>
     77a:	fa cf       	rjmp	.-12     	; 0x770 <SendLineRS485+0x6>
	}
	// add \r\n to the sentence
	WriteByte_Comm485(0x0D);
     77c:	8d e0       	ldi	r24, 0x0D	; 13
     77e:	0e 94 67 2c 	call	0x58ce	; 0x58ce <WriteByte_Comm485>
	WriteByte_Comm485(0x0A);
     782:	8a e0       	ldi	r24, 0x0A	; 10
}
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
	while(*data != '\0'){
		WriteByte_Comm485(*data++);
	}
	// add \r\n to the sentence
	WriteByte_Comm485(0x0D);
	WriteByte_Comm485(0x0A);
     788:	0c 94 67 2c 	jmp	0x58ce	; 0x58ce <WriteByte_Comm485>

0000078c <ReadLineRS45>:
 *
 * \param 1 data : data from the master
 *
 */

uint8_t ReadLineRS45( char *Data ){
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	ec 01       	movw	r28, r24
		else if( Data[0] == SLAVESENTENCE || Data[0] == MASTERSENTENCE ){
			len = strlen(Data);
			if(len < MAXCHARACTERSSENTENCE - 1) {
				Data[len] = getKarakter;
				Data[len + 1] = '\0';
				if( getKarakter == 0x0A ){
     794:	10 e0       	ldi	r17, 0x00	; 0

uint8_t ReadLineRS45( char *Data ){
	static char getKarakter;
	uint8_t len, returnValue = 0;

	while( CanRead_Comm485() != 0 && returnValue == 0 ){
     796:	0e 94 3a 2c 	call	0x5874	; 0x5874 <CanRead_Comm485>
     79a:	88 23       	and	r24, r24
     79c:	29 f1       	breq	.+74     	; 0x7e8 <ReadLineRS45+0x5c>
     79e:	11 11       	cpse	r17, r1
     7a0:	22 c0       	rjmp	.+68     	; 0x7e6 <ReadLineRS45+0x5a>
		getKarakter = (char )ReadByte_Comm485();
     7a2:	0e 94 43 2c 	call	0x5886	; 0x5886 <ReadByte_Comm485>
     7a6:	80 93 f5 27 	sts	0x27F5, r24	; 0x8027f5 <getKarakter.4457>
		if( getKarakter == SLAVESENTENCE || getKarakter == MASTERSENTENCE ){
     7aa:	9d ed       	ldi	r25, 0xDD	; 221
     7ac:	98 0f       	add	r25, r24
     7ae:	92 30       	cpi	r25, 0x02	; 2
     7b0:	18 f4       	brcc	.+6      	; 0x7b8 <ReadLineRS45+0x2c>
			Data[0] = getKarakter;
     7b2:	88 83       	st	Y, r24
			Data[1] = '\0';
     7b4:	19 82       	std	Y+1, r1	; 0x01
     7b6:	ef cf       	rjmp	.-34     	; 0x796 <ReadLineRS45+0xa>
		}
		else if( Data[0] == SLAVESENTENCE || Data[0] == MASTERSENTENCE ){
     7b8:	98 81       	ld	r25, Y
     7ba:	93 52       	subi	r25, 0x23	; 35
     7bc:	92 30       	cpi	r25, 0x02	; 2
     7be:	58 f7       	brcc	.-42     	; 0x796 <ReadLineRS45+0xa>
			len = strlen(Data);
     7c0:	fe 01       	movw	r30, r28
     7c2:	01 90       	ld	r0, Z+
     7c4:	00 20       	and	r0, r0
     7c6:	e9 f7       	brne	.-6      	; 0x7c2 <ReadLineRS45+0x36>
     7c8:	31 97       	sbiw	r30, 0x01	; 1
     7ca:	ec 1b       	sub	r30, r28
     7cc:	fd 0b       	sbc	r31, r29
			if(len < MAXCHARACTERSSENTENCE - 1) {
     7ce:	e2 35       	cpi	r30, 0x52	; 82
     7d0:	10 f7       	brcc	.-60     	; 0x796 <ReadLineRS45+0xa>
				Data[len] = getKarakter;
     7d2:	9e 01       	movw	r18, r28
     7d4:	2e 0f       	add	r18, r30
     7d6:	31 1d       	adc	r19, r1
     7d8:	f9 01       	movw	r30, r18
     7da:	80 83       	st	Z, r24
				Data[len + 1] = '\0';
     7dc:	11 82       	std	Z+1, r1	; 0x01
				if( getKarakter == 0x0A ){
     7de:	11 e0       	ldi	r17, 0x01	; 1
     7e0:	8a 30       	cpi	r24, 0x0A	; 10
     7e2:	c1 f6       	brne	.-80     	; 0x794 <ReadLineRS45+0x8>
     7e4:	d8 cf       	rjmp	.-80     	; 0x796 <ReadLineRS45+0xa>
     7e6:	11 e0       	ldi	r17, 0x01	; 1
				}
			}			
		}
	}
	return returnValue;
}
     7e8:	81 2f       	mov	r24, r17
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	08 95       	ret

000007f2 <ScanDataInSlave>:
 * \return 0: if there is a fault in the adress of the slave
 *            or the checksum of the master or the message is not from the master
 *            else
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
     7f2:	4f 92       	push	r4
     7f4:	5f 92       	push	r5
     7f6:	6f 92       	push	r6
     7f8:	7f 92       	push	r7
     7fa:	8f 92       	push	r8
     7fc:	9f 92       	push	r9
     7fe:	af 92       	push	r10
     800:	bf 92       	push	r11
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	25 97       	sbiw	r28, 0x05	; 5
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	8c 01       	movw	r16, r24
 * \return adress of the slave in integer
 *
 */
static int GetAdressFromMaster (char* dataMaster){

   return strtol(dataMaster + 1,NULL,10);
     81e:	4a e0       	ldi	r20, 0x0A	; 10
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	0e 94 80 38 	call	0x7100	; 0x7100 <strtol>
     82c:	56 2e       	mov	r5, r22
     82e:	47 2e       	mov	r4, r23
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
	int err = 0;
    int adress = GetAdressFromMaster(dataFromMaster);
    char cmd = dataFromMaster[COMMAND];
     830:	f8 01       	movw	r30, r16
     832:	84 81       	ldd	r24, Z+4	; 0x04
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     834:	90 81       	ld	r25, Z
     836:	93 32       	cpi	r25, 0x23	; 35
     838:	09 f0       	breq	.+2      	; 0x83c <ScanDataInSlave+0x4a>
     83a:	8e c1       	rjmp	.+796    	; 0xb58 <ScanDataInSlave+0x366>
 * \return adress of the slave in integer
 *
 */
static int GetAdressFromMaster (char* dataMaster){

   return strtol(dataMaster + 1,NULL,10);
     83c:	25 2d       	mov	r18, r5
     83e:	34 2d       	mov	r19, r4
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     840:	40 91 fe 27 	lds	r20, 0x27FE	; 0x8027fe <sMyAdress>
     844:	50 91 ff 27 	lds	r21, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     848:	24 17       	cp	r18, r20
     84a:	35 07       	cpc	r19, r21
     84c:	19 f0       	breq	.+6      	; 0x854 <ScanDataInSlave+0x62>
     84e:	23 2b       	or	r18, r19
     850:	19 f0       	breq	.+6      	; 0x858 <ScanDataInSlave+0x66>
     852:	82 c1       	rjmp	.+772    	; 0xb58 <ScanDataInSlave+0x366>
       err = 0;
    }
    else{
	 if(adress == BROADCAST) {
     854:	23 2b       	or	r18, r19
     856:	39 f4       	brne	.+14     	; 0x866 <ScanDataInSlave+0x74>
		if(cmd =='S'){
     858:	83 35       	cpi	r24, 0x53	; 83
     85a:	09 f0       	breq	.+2      	; 0x85e <ScanDataInSlave+0x6c>
     85c:	79 c1       	rjmp	.+754    	; 0xb50 <ScanDataInSlave+0x35e>
			HandleCmdS(responseSlave,dataFromMaster);
     85e:	c8 01       	movw	r24, r16
     860:	0e 94 ee 02 	call	0x5dc	; 0x5dc <HandleCmdS.constprop.1>
     864:	75 c1       	rjmp	.+746    	; 0xb50 <ScanDataInSlave+0x35e>
		}
		err =1;
	 }
	 else{

      switch(cmd){
     866:	89 34       	cpi	r24, 0x49	; 73
     868:	b9 f1       	breq	.+110    	; 0x8d8 <ScanDataInSlave+0xe6>
     86a:	f8 f4       	brcc	.+62     	; 0x8aa <ScanDataInSlave+0xb8>
     86c:	81 34       	cpi	r24, 0x41	; 65
     86e:	21 f1       	breq	.+72     	; 0x8b8 <ScanDataInSlave+0xc6>
     870:	87 34       	cpi	r24, 0x47	; 71
     872:	09 f0       	breq	.+2      	; 0x876 <ScanDataInSlave+0x84>
     874:	42 c1       	rjmp	.+644    	; 0xafa <ScanDataInSlave+0x308>
 */
static void HandleCmdG(char* response, char* dataFromMaster){
    int sensorIndex, err;
    char adr[SUBADR_LENG];

    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
     876:	44 e0       	ldi	r20, 0x04	; 4
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	b8 01       	movw	r22, r16
     87c:	6b 5f       	subi	r22, 0xFB	; 251
     87e:	7f 4f       	sbci	r23, 0xFF	; 255
     880:	fe 01       	movw	r30, r28
     882:	31 96       	adiw	r30, 0x01	; 1
     884:	7f 01       	movw	r14, r30
     886:	cf 01       	movw	r24, r30
     888:	0e 94 ae 3a 	call	0x755c	; 0x755c <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     88c:	1d 82       	std	Y+5, r1	; 0x05

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     88e:	60 90 fc 27 	lds	r6, 0x27FC	; 0x8027fc <sNumOwnSensor>
     892:	70 90 fd 27 	lds	r7, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     896:	80 90 f8 27 	lds	r8, 0x27F8	; 0x8027f8 <sOwnSensor>
     89a:	90 90 f9 27 	lds	r9, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
 *					 -1 if sensor is not found
 */

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;
     89e:	aa 24       	eor	r10, r10
     8a0:	aa 94       	dec	r10
     8a2:	ba 2c       	mov	r11, r10

	for(i=0; i < sNumOwnSensor; i++){
     8a4:	c1 2c       	mov	r12, r1
     8a6:	d1 2c       	mov	r13, r1
     8a8:	c8 c0       	rjmp	.+400    	; 0xa3a <ScanDataInSlave+0x248>
		}
		err =1;
	 }
	 else{

      switch(cmd){
     8aa:	83 35       	cpi	r24, 0x53	; 83
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <ScanDataInSlave+0xbe>
     8ae:	22 c1       	rjmp	.+580    	; 0xaf4 <ScanDataInSlave+0x302>
     8b0:	87 35       	cpi	r24, 0x57	; 87
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <ScanDataInSlave+0xc4>
     8b4:	61 c0       	rjmp	.+194    	; 0x978 <ScanDataInSlave+0x186>
     8b6:	21 c1       	rjmp	.+578    	; 0xafa <ScanDataInSlave+0x308>
 * \param 1 response : the buffer where the response is saved
 *
 */
static void HandleCmdA(char* response){

    snprintf(response,MAXDATA-1,"$%03dA'Slave available'",sMyAdress);
     8b8:	4f 92       	push	r4
     8ba:	5f 92       	push	r5
     8bc:	8d ef       	ldi	r24, 0xFD	; 253
     8be:	90 e2       	ldi	r25, 0x20	; 32
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	1f 92       	push	r1
     8c6:	8d e4       	ldi	r24, 0x4D	; 77
     8c8:	8f 93       	push	r24
     8ca:	82 ea       	ldi	r24, 0xA2	; 162
     8cc:	97 e2       	ldi	r25, 0x27	; 39
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
     8d6:	87 c0       	rjmp	.+270    	; 0x9e6 <ScanDataInSlave+0x1f4>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     8d8:	4a e0       	ldi	r20, 0x0A	; 10
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	c8 01       	movw	r24, r16
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	0e 94 80 38 	call	0x7100	; 0x7100 <strtol>
 *
 */
static void HandleCmdI(char* response, char* dataFromMaster){
	static int index =0;

	index = GetIndexFromMaster(dataFromMaster);
     8e8:	60 93 a0 27 	sts	0x27A0, r22	; 0x8027a0 <__data_end>
     8ec:	70 93 a1 27 	sts	0x27A1, r23	; 0x8027a1 <__data_end+0x1>
     8f0:	30 91 ff 27 	lds	r19, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     8f4:	20 91 fe 27 	lds	r18, 0x27FE	; 0x8027fe <sMyAdress>

    if(index > 0 && index <= sNumOwnSensor) {
     8f8:	16 16       	cp	r1, r22
     8fa:	17 06       	cpc	r1, r23
     8fc:	74 f5       	brge	.+92     	; 0x95a <ScanDataInSlave+0x168>
     8fe:	e0 91 fc 27 	lds	r30, 0x27FC	; 0x8027fc <sNumOwnSensor>
     902:	f0 91 fd 27 	lds	r31, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     906:	e6 17       	cp	r30, r22
     908:	f7 07       	cpc	r31, r23
     90a:	3c f1       	brlt	.+78     	; 0x95a <ScanDataInSlave+0x168>
        snprintf(response,MAXDATA-1,"$%03dI%02d%s,%02d'Sensor %d'",sMyAdress,index,sOwnSensor[index-1].subadress,sOwnSensor[index-1].measure_interval,index);
     90c:	4b e0       	ldi	r20, 0x0B	; 11
     90e:	46 9f       	mul	r20, r22
     910:	f0 01       	movw	r30, r0
     912:	47 9f       	mul	r20, r23
     914:	f0 0d       	add	r31, r0
     916:	11 24       	eor	r1, r1
     918:	3b 97       	sbiw	r30, 0x0b	; 11
     91a:	40 91 f8 27 	lds	r20, 0x27F8	; 0x8027f8 <sOwnSensor>
     91e:	50 91 f9 27 	lds	r21, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     922:	e4 0f       	add	r30, r20
     924:	f5 1f       	adc	r31, r21
     926:	7f 93       	push	r23
     928:	6f 93       	push	r22
     92a:	46 81       	ldd	r20, Z+6	; 0x06
     92c:	4f 93       	push	r20
     92e:	45 81       	ldd	r20, Z+5	; 0x05
     930:	4f 93       	push	r20
     932:	ff 93       	push	r31
     934:	ef 93       	push	r30
     936:	7f 93       	push	r23
     938:	6f 93       	push	r22
     93a:	3f 93       	push	r19
     93c:	2f 93       	push	r18
     93e:	85 e1       	ldi	r24, 0x15	; 21
     940:	91 e2       	ldi	r25, 0x21	; 33
     942:	9f 93       	push	r25
     944:	8f 93       	push	r24
     946:	1f 92       	push	r1
     948:	8d e4       	ldi	r24, 0x4D	; 77
     94a:	8f 93       	push	r24
     94c:	82 ea       	ldi	r24, 0xA2	; 162
     94e:	97 e2       	ldi	r25, 0x27	; 39
     950:	9f 93       	push	r25
     952:	8f 93       	push	r24
     954:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
     958:	46 c0       	rjmp	.+140    	; 0x9e6 <ScanDataInSlave+0x1f4>
    }
// the slave sends 0000,0000 if all the sensors that exists are already given
    else{
        sprintf(response,"$%03dI%02d0000,0000'No sensor'", sMyAdress,index);
     95a:	7f 93       	push	r23
     95c:	6f 93       	push	r22
     95e:	3f 93       	push	r19
     960:	2f 93       	push	r18
     962:	82 e3       	ldi	r24, 0x32	; 50
     964:	91 e2       	ldi	r25, 0x21	; 33
     966:	9f 93       	push	r25
     968:	8f 93       	push	r24
     96a:	82 ea       	ldi	r24, 0xA2	; 162
     96c:	97 e2       	ldi	r25, 0x27	; 39
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	0e 94 73 3b 	call	0x76e6	; 0x76e6 <sprintf>
     976:	37 c0       	rjmp	.+110    	; 0x9e6 <ScanDataInSlave+0x1f4>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     978:	4a e0       	ldi	r20, 0x0A	; 10
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	c8 01       	movw	r24, r16
     982:	05 96       	adiw	r24, 0x05	; 5
     984:	0e 94 80 38 	call	0x7100	; 0x7100 <strtol>
     988:	50 91 ff 27 	lds	r21, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     98c:	40 91 fe 27 	lds	r20, 0x27FE	; 0x8027fe <sMyAdress>
 */
static void HandleCmdW(char* response, char* dataFromMaster){

    int index = GetIndexFromMaster(dataFromMaster);

    if(index > 0 && index <= sNumWantedSensor){
     990:	16 16       	cp	r1, r22
     992:	17 06       	cpc	r1, r23
     994:	5c f5       	brge	.+86     	; 0x9ec <ScanDataInSlave+0x1fa>
     996:	e0 91 fa 27 	lds	r30, 0x27FA	; 0x8027fa <sNumWantedSensor>
     99a:	f0 91 fb 27 	lds	r31, 0x27FB	; 0x8027fb <sNumWantedSensor+0x1>
     99e:	e6 17       	cp	r30, r22
     9a0:	f7 07       	cpc	r31, r23
     9a2:	24 f1       	brlt	.+72     	; 0x9ec <ScanDataInSlave+0x1fa>
        snprintf(response,MAXDATA-1,"$%03dW%02d%s'Wants slave'",sMyAdress,index,sWantedSensor[index-1].subadress);
     9a4:	e7 e0       	ldi	r30, 0x07	; 7
     9a6:	e6 9f       	mul	r30, r22
     9a8:	90 01       	movw	r18, r0
     9aa:	e7 9f       	mul	r30, r23
     9ac:	30 0d       	add	r19, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	27 50       	subi	r18, 0x07	; 7
     9b2:	31 09       	sbc	r19, r1
     9b4:	e0 91 f6 27 	lds	r30, 0x27F6	; 0x8027f6 <sWantedSensor>
     9b8:	f0 91 f7 27 	lds	r31, 0x27F7	; 0x8027f7 <sWantedSensor+0x1>
     9bc:	2e 0f       	add	r18, r30
     9be:	3f 1f       	adc	r19, r31
     9c0:	3f 93       	push	r19
     9c2:	2f 93       	push	r18
     9c4:	7f 93       	push	r23
     9c6:	6f 93       	push	r22
     9c8:	5f 93       	push	r21
     9ca:	4f 93       	push	r20
     9cc:	81 e5       	ldi	r24, 0x51	; 81
     9ce:	91 e2       	ldi	r25, 0x21	; 33
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	1f 92       	push	r1
     9d6:	8d e4       	ldi	r24, 0x4D	; 77
     9d8:	8f 93       	push	r24
     9da:	82 ea       	ldi	r24, 0xA2	; 162
     9dc:	97 e2       	ldi	r25, 0x27	; 39
     9de:	9f 93       	push	r25
     9e0:	8f 93       	push	r24
     9e2:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	87 c0       	rjmp	.+270    	; 0xafa <ScanDataInSlave+0x308>
    }
// the slave sends 0000 if all sensor that exists in the buffer are given
    else {
       snprintf(response,MAXDATA-1,"$%03dW%02d0000'All done'", sMyAdress,index);
     9ec:	7f 93       	push	r23
     9ee:	6f 93       	push	r22
     9f0:	5f 93       	push	r21
     9f2:	4f 93       	push	r20
     9f4:	8b e6       	ldi	r24, 0x6B	; 107
     9f6:	91 e2       	ldi	r25, 0x21	; 33
     9f8:	9f 93       	push	r25
     9fa:	8f 93       	push	r24
     9fc:	1f 92       	push	r1
     9fe:	8d e4       	ldi	r24, 0x4D	; 77
     a00:	8f 93       	push	r24
     a02:	82 ea       	ldi	r24, 0xA2	; 162
     a04:	97 e2       	ldi	r25, 0x27	; 39
     a06:	9f 93       	push	r25
     a08:	8f 93       	push	r24
     a0a:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
     a0e:	eb cf       	rjmp	.-42     	; 0x9e6 <ScanDataInSlave+0x1f4>
static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
		if(!strncmp(adressSensor,sOwnSensor[i].subadress,strlen(adressSensor))){
     a10:	f7 01       	movw	r30, r14
     a12:	01 90       	ld	r0, Z+
     a14:	00 20       	and	r0, r0
     a16:	e9 f7       	brne	.-6      	; 0xa12 <ScanDataInSlave+0x220>
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	af 01       	movw	r20, r30
     a1c:	4e 19       	sub	r20, r14
     a1e:	5f 09       	sbc	r21, r15
     a20:	b4 01       	movw	r22, r8
     a22:	c7 01       	movw	r24, r14
     a24:	0e 94 a0 3a 	call	0x7540	; 0x7540 <strncmp>
     a28:	89 2b       	or	r24, r25
     a2a:	09 f4       	brne	.+2      	; 0xa2e <ScanDataInSlave+0x23c>
     a2c:	56 01       	movw	r10, r12

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     a2e:	ff ef       	ldi	r31, 0xFF	; 255
     a30:	cf 1a       	sub	r12, r31
     a32:	df 0a       	sbc	r13, r31
     a34:	8b e0       	ldi	r24, 0x0B	; 11
     a36:	88 0e       	add	r8, r24
     a38:	91 1c       	adc	r9, r1
     a3a:	c6 14       	cp	r12, r6
     a3c:	d7 04       	cpc	r13, r7
     a3e:	44 f3       	brlt	.-48     	; 0xa10 <ScanDataInSlave+0x21e>
    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

    sensorIndex = FindOwnSensorIndex(adr);

    if(sensorIndex !=-1){
     a40:	9f ef       	ldi	r25, 0xFF	; 255
     a42:	a9 16       	cp	r10, r25
     a44:	b9 06       	cpc	r11, r25
     a46:	09 f4       	brne	.+2      	; 0xa4a <ScanDataInSlave+0x258>
     a48:	42 c0       	rjmp	.+132    	; 0xace <ScanDataInSlave+0x2dc>
		//sensorIndex is -1 if sensor not found
        sprintf(response,"$%03dG",sMyAdress);
     a4a:	4f 92       	push	r4
     a4c:	5f 92       	push	r5
     a4e:	84 e8       	ldi	r24, 0x84	; 132
     a50:	91 e2       	ldi	r25, 0x21	; 33
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	82 ea       	ldi	r24, 0xA2	; 162
     a58:	c8 2e       	mov	r12, r24
     a5a:	87 e2       	ldi	r24, 0x27	; 39
     a5c:	d8 2e       	mov	r13, r24
     a5e:	df 92       	push	r13
     a60:	cf 92       	push	r12
     a62:	0e 94 73 3b 	call	0x76e6	; 0x76e6 <sprintf>
        err= sOwnSensor[sensorIndex].fpGetData(adr,response + strlen(response), MAXDATA-1-strlen(response) );
     a66:	f6 01       	movw	r30, r12
     a68:	01 90       	ld	r0, Z+
     a6a:	00 20       	and	r0, r0
     a6c:	e9 f7       	brne	.-6      	; 0xa68 <ScanDataInSlave+0x276>
     a6e:	31 97       	sbiw	r30, 0x01	; 1
     a70:	bf 01       	movw	r22, r30
     a72:	62 5a       	subi	r22, 0xA2	; 162
     a74:	77 42       	sbci	r23, 0x27	; 39
     a76:	2b e0       	ldi	r18, 0x0B	; 11
     a78:	2a 9d       	mul	r18, r10
     a7a:	c0 01       	movw	r24, r0
     a7c:	2b 9d       	mul	r18, r11
     a7e:	90 0d       	add	r25, r0
     a80:	11 24       	eor	r1, r1
     a82:	e0 91 f8 27 	lds	r30, 0x27F8	; 0x8027f8 <sOwnSensor>
     a86:	f0 91 f9 27 	lds	r31, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     a8a:	e8 0f       	add	r30, r24
     a8c:	f9 1f       	adc	r31, r25
     a8e:	4d e4       	ldi	r20, 0x4D	; 77
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	46 1b       	sub	r20, r22
     a94:	57 0b       	sbc	r21, r23
     a96:	6e 55       	subi	r22, 0x5E	; 94
     a98:	78 4d       	sbci	r23, 0xD8	; 216
     a9a:	07 80       	ldd	r0, Z+7	; 0x07
     a9c:	f0 85       	ldd	r31, Z+8	; 0x08
     a9e:	e0 2d       	mov	r30, r0
     aa0:	c7 01       	movw	r24, r14
     aa2:	19 95       	eicall
        if(err){
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	89 2b       	or	r24, r25
     ab2:	19 f1       	breq	.+70     	; 0xafa <ScanDataInSlave+0x308>
			sprintf(response,"$%03dGF'Memory fault'",sMyAdress);
     ab4:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     ab8:	8f 93       	push	r24
     aba:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     abe:	8f 93       	push	r24
     ac0:	8b e8       	ldi	r24, 0x8B	; 139
     ac2:	91 e2       	ldi	r25, 0x21	; 33
     ac4:	9f 93       	push	r25
     ac6:	8f 93       	push	r24
     ac8:	df 92       	push	r13
     aca:	cf 92       	push	r12
     acc:	0a c0       	rjmp	.+20     	; 0xae2 <ScanDataInSlave+0x2f0>
		}
    }
    else{
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
     ace:	4f 92       	push	r4
     ad0:	5f 92       	push	r5
     ad2:	81 ea       	ldi	r24, 0xA1	; 161
     ad4:	91 e2       	ldi	r25, 0x21	; 33
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	82 ea       	ldi	r24, 0xA2	; 162
     adc:	97 e2       	ldi	r25, 0x27	; 39
     ade:	9f 93       	push	r25
     ae0:	8f 93       	push	r24
     ae2:	0e 94 73 3b 	call	0x76e6	; 0x76e6 <sprintf>
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	0f 90       	pop	r0
     af2:	03 c0       	rjmp	.+6      	; 0xafa <ScanDataInSlave+0x308>
                break;

      case 'G': HandleCmdG(responseSlave,dataFromMaster);
                break;

      case 'S': HandleCmdS(responseSlave,dataFromMaster);
     af4:	c8 01       	movw	r24, r16
     af6:	0e 94 ee 02 	call	0x5dc	; 0x5dc <HandleCmdS.constprop.1>
     afa:	e3 ea       	ldi	r30, 0xA3	; 163
     afc:	f7 e2       	ldi	r31, 0x27	; 39
 *
 * \return checksum value
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
     afe:	80 e0       	ldi	r24, 0x00	; 0
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     b00:	91 91       	ld	r25, Z+
     b02:	95 32       	cpi	r25, 0x25	; 37
     b04:	09 f5       	brne	.+66     	; 0xb48 <ScanDataInSlave+0x356>
                break;

      default:  break;
    }
    // add '%' and the checksum to the sentence and then send it through the line of the RS485
    snprintf(responseSlave+strlen(responseSlave),MAXCHARACTERSSENTENCE-strlen(responseSlave),"%%%02X",DataChecksum(responseSlave));
     b06:	e2 ea       	ldi	r30, 0xA2	; 162
     b08:	f7 e2       	ldi	r31, 0x27	; 39
     b0a:	01 90       	ld	r0, Z+
     b0c:	00 20       	and	r0, r0
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <ScanDataInSlave+0x318>
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	e2 5a       	subi	r30, 0xA2	; 162
     b14:	f7 42       	sbci	r31, 0x27	; 39
     b16:	1f 92       	push	r1
     b18:	8f 93       	push	r24
     b1a:	8b eb       	ldi	r24, 0xBB	; 187
     b1c:	91 e2       	ldi	r25, 0x21	; 33
     b1e:	9f 93       	push	r25
     b20:	8f 93       	push	r24
     b22:	83 e5       	ldi	r24, 0x53	; 83
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	8e 1b       	sub	r24, r30
     b28:	9f 0b       	sbc	r25, r31
     b2a:	9f 93       	push	r25
     b2c:	8f 93       	push	r24
     b2e:	ee 55       	subi	r30, 0x5E	; 94
     b30:	f8 4d       	sbci	r31, 0xD8	; 216
     b32:	ff 93       	push	r31
     b34:	ef 93       	push	r30
     b36:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    SendLineRS485(responseSlave);
     b3a:	82 ea       	ldi	r24, 0xA2	; 162
     b3c:	97 e2       	ldi	r25, 0x27	; 39
     b3e:	0e 94 b5 03 	call	0x76a	; 0x76a <SendLineRS485>
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <ScanDataInSlave+0x35e>
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     b48:	99 23       	and	r25, r25
     b4a:	e9 f2       	breq	.-70     	; 0xb06 <ScanDataInSlave+0x314>
		sChecksum^=*dataMaster++;
     b4c:	89 27       	eor	r24, r25
     b4e:	d8 cf       	rjmp	.-80     	; 0xb00 <ScanDataInSlave+0x30e>
    // add '%' and the checksum to the sentence and then send it through the line of the RS485
    snprintf(responseSlave+strlen(responseSlave),MAXCHARACTERSSENTENCE-strlen(responseSlave),"%%%02X",DataChecksum(responseSlave));
    SendLineRS485(responseSlave);
    err =1;
	}
	dataFromMaster[0] = '\0';
     b50:	f8 01       	movw	r30, r16
     b52:	10 82       	st	Z, r1
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	01 c0       	rjmp	.+2      	; 0xb5a <ScanDataInSlave+0x368>
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
       err = 0;
     b58:	80 e0       	ldi	r24, 0x00	; 0
    err =1;
	}
	dataFromMaster[0] = '\0';
	}
	return err;
}
     b5a:	25 96       	adiw	r28, 0x05	; 5
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	af 90       	pop	r10
     b74:	9f 90       	pop	r9
     b76:	8f 90       	pop	r8
     b78:	7f 90       	pop	r7
     b7a:	6f 90       	pop	r6
     b7c:	5f 90       	pop	r5
     b7e:	4f 90       	pop	r4
     b80:	08 95       	ret

00000b82 <main>:
}


static void InitClocks(void)
{
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc, 0, OSC_XOSCSEL_XTAL_16KCLK_gc );
     b82:	4b e0       	ldi	r20, 0x0B	; 11
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	80 ec       	ldi	r24, 0xC0	; 192
     b88:	0e 94 e7 01 	call	0x3ce	; 0x3ce <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
     b8c:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
// do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     b96:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     b9a:	83 ff       	sbrs	r24, 3
     b9c:	fc cf       	rjmp	.-8      	; 0xb96 <main+0x14>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     b9e:	62 e0       	ldi	r22, 0x02	; 2
     ba0:	80 ec       	ldi	r24, 0xC0	; 192
     ba2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     ba6:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
     baa:	80 61       	ori	r24, 0x10	; 16
     bac:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     bb0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
     bb4:	84 ff       	sbrs	r24, 4
     bb6:	fc cf       	rjmp	.-8      	; 0xbb0 <main+0x2e>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	0e 94 00 02 	call	0x400	; 0x400 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <CLKSYS_Disable>
	CLKSYS_Disable( OSC_RC32MEN_bm );
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <CLKSYS_Disable>
	
} /* InitClocks */


static void InitIO(void) {
	PORTC.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm;
     bca:	8f e7       	ldi	r24, 0x7F	; 127
     bcc:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
	PORTC.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     bd0:	80 e1       	ldi	r24, 0x10	; 16
     bd2:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <__TEXT_REGION_LENGTH__+0x700650>
	
	PORTD.DIRCLR = PIN0_bm;
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
	PORTD.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     bdc:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
		
	PORTE.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN6_bm | PIN7_bm;
     be0:	8f ec       	ldi	r24, 0xCF	; 207
     be2:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x700680>
	PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     be6:	8f e0       	ldi	r24, 0x0F	; 15
     be8:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
	
	PORTF.DIR = PIN0_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
     bec:	89 ef       	ldi	r24, 0xF9	; 249
     bee:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <__TEXT_REGION_LENGTH__+0x7006a0>
	PORTF.OUTCLR = PIN3_bm | PIN4_bm | PIN5_bm;
     bf2:	88 e3       	ldi	r24, 0x38	; 56
     bf4:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
	static char slaveData[MAXCHARACTERSSENTENCE];
	
	InitClocks();
	InitIO();
	InitUtil();
     bf8:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <InitUtil>
	InitTimer();
     bfc:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <InitTimer>
	InitSerial();
     c00:	0e 94 e0 2b 	call	0x57c0	; 0x57c0 <InitSerial>
	InitSlave(GetBusID());
     c04:	0e 94 77 2e 	call	0x5cee	; 0x5cee <GetBusID>
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 15 02 	call	0x42a	; 0x42a <InitSlave>
	InitCoreAnalog();
     c0e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <InitCoreAnalog>
	Init9DOF();
     c12:	0e 94 80 07 	call	0xf00	; 0xf00 <Init9DOF>
	InitReadBussensors();
     c16:	0e 94 aa 2b 	call	0x5754	; 0x5754 <InitReadBussensors>
	
	sei();
     c1a:	78 94       	sei
	
	PrintResetHeader(&gCtrl_IO);
     c1c:	86 e5       	ldi	r24, 0x56	; 86
     c1e:	90 e2       	ldi	r25, 0x20	; 32
     c20:	0e 94 bb 23 	call	0x4776	; 0x4776 <PrintResetHeader>
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
     c24:	c0 e0       	ldi	r28, 0x00	; 0
     c26:	d0 e0       	ldi	r29, 0x00	; 0
#define ESC_TIMEOUT			(CYCLES_PER_SECOND)
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
     c28:	81 2c       	mov	r8, r1
     c2a:	91 2c       	mov	r9, r1
     c2c:	54 01       	movw	r10, r8
     c2e:	41 2c       	mov	r4, r1
     c30:	51 2c       	mov	r5, r1
     c32:	32 01       	movw	r6, r4

		/* Handle the slave code */
		if(CanRead_Comm485())
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     c34:	10 e3       	ldi	r17, 0x30	; 48
	
	sei();
	
	PrintResetHeader(&gCtrl_IO);
	while(1) {
		Process9DOF();
     c36:	0e 94 c0 07 	call	0xf80	; 0xf80 <Process9DOF>
		
		if(CanRead_Ctrl()) {
     c3a:	0e 94 a5 2c 	call	0x594a	; 0x594a <CanRead_Ctrl>
     c3e:	88 23       	and	r24, r24
     c40:	b9 f0       	breq	.+46     	; 0xc70 <main+0xee>
			switch(ReadByte_Ctrl()) {
     c42:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
     c46:	83 34       	cpi	r24, 0x43	; 67
     c48:	51 f0       	breq	.+20     	; 0xc5e <main+0xdc>
     c4a:	83 36       	cpi	r24, 0x63	; 99
     c4c:	41 f0       	breq	.+16     	; 0xc5e <main+0xdc>
     c4e:	8b 31       	cpi	r24, 0x1B	; 27
     c50:	51 f4       	brne	.+20     	; 0xc66 <main+0xe4>
				case 0x1B:
					/* ESC -- sync character for avrdude. The programmer is trying to talk to us, so reset the chip */
					CCPWrite( &RST.CTRL, RST_SWRST_bm );
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	89 e7       	ldi	r24, 0x79	; 121
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <CCPWrite>
					break;
     c5c:	04 c0       	rjmp	.+8      	; 0xc66 <main+0xe4>
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
     c5e:	86 e5       	ldi	r24, 0x56	; 86
     c60:	90 e2       	ldi	r25, 0x20	; 32
     c62:	0e 94 b1 11 	call	0x2362	; 0x2362 <CalibrateChannel>
					break;
			}
			escTimeoutActive = 1;
			prev = GetSessionCycleCount();
     c66:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <GetSessionCycleCount>
     c6a:	2b 01       	movw	r4, r22
     c6c:	3c 01       	movw	r6, r24
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
					break;
			}
			escTimeoutActive = 1;
     c6e:	c1 e0       	ldi	r28, 0x01	; 1
			prev = GetSessionCycleCount();
		}
		now = GetSessionCycleCount();
     c70:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <GetSessionCycleCount>
     c74:	6b 01       	movw	r12, r22
     c76:	7c 01       	movw	r14, r24
		if(escTimeoutActive) {
     c78:	cc 23       	and	r28, r28
     c7a:	31 f1       	breq	.+76     	; 0xcc8 <main+0x146>
			if(now - prev >= ESC_TIMEOUT)
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	84 19       	sub	r24, r4
     c82:	95 09       	sbc	r25, r5
     c84:	a6 09       	sbc	r26, r6
     c86:	b7 09       	sbc	r27, r7
     c88:	88 38       	cpi	r24, 0x88	; 136
     c8a:	93 41       	sbci	r25, 0x13	; 19
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	d8 f4       	brcc	.+54     	; 0xcc8 <main+0x146>
     c92:	c1 e0       	ldi	r28, 0x01	; 1
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <main+0x11c>
					if(now - prevIDPrint >= PRINT_ID_INTERVAL) {
						prevIDPrint += PRINT_ID_INTERVAL;
						PrintResetHeader(&gCtrl_IO);
					}
					else {
						TakeSnapshot();
     c96:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <TakeSnapshot>
     c9a:	c0 e0       	ldi	r28, 0x00	; 0
						debugPrintstate = DEBUGPRINT_ANALOG;
     c9c:	d1 e0       	ldi	r29, 0x01	; 1
					debugPrintstate = DEBUGPRINT_START;
			}
		}

		/* Handle the slave code */
		if(CanRead_Comm485())
     c9e:	0e 94 3a 2c 	call	0x5874	; 0x5874 <CanRead_Comm485>
     ca2:	88 23       	and	r24, r24
     ca4:	19 f0       	breq	.+6      	; 0xcac <main+0x12a>
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
     ca6:	10 93 a6 06 	sts	0x06A6, r17	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <main+0x12e>
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     cac:	10 93 a5 06 	sts	0x06A5, r17	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
		if ( ReadLineRS45( slaveData ) == 1 ){
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	98 e2       	ldi	r25, 0x28	; 40
     cb4:	0e 94 c6 03 	call	0x78c	; 0x78c <ReadLineRS45>
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	09 f0       	breq	.+2      	; 0xcbe <main+0x13c>
     cbc:	bc cf       	rjmp	.-136    	; 0xc36 <main+0xb4>
			ScanDataInSlave(slaveData);
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	98 e2       	ldi	r25, 0x28	; 40
     cc2:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <ScanDataInSlave>
     cc6:	b7 cf       	rjmp	.-146    	; 0xc36 <main+0xb4>
			if(now - prev >= ESC_TIMEOUT)
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
     cc8:	0e 94 c3 2c 	call	0x5986	; 0x5986 <CanWrite_Ctrl>
     ccc:	86 39       	cpi	r24, 0x96	; 150
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <main+0x150>
     cd0:	47 c0       	rjmp	.+142    	; 0xd60 <main+0x1de>
			switch(debugPrintstate) {
     cd2:	d2 30       	cpi	r29, 0x02	; 2
     cd4:	d9 f1       	breq	.+118    	; 0xd4c <main+0x1ca>
     cd6:	28 f4       	brcc	.+10     	; 0xce2 <main+0x160>
     cd8:	dd 23       	and	r29, r29
     cda:	81 f0       	breq	.+32     	; 0xcfc <main+0x17a>
     cdc:	d1 30       	cpi	r29, 0x01	; 1
     cde:	31 f1       	breq	.+76     	; 0xd2c <main+0x1aa>
     ce0:	3c c0       	rjmp	.+120    	; 0xd5a <main+0x1d8>
     ce2:	d3 30       	cpi	r29, 0x03	; 3
     ce4:	d1 f5       	brne	.+116    	; 0xd5a <main+0x1d8>
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_BUS;
					break;
				case DEBUGPRINT_BUS:
					PrintBussensors(&gCtrl_IO);
     ce6:	86 e5       	ldi	r24, 0x56	; 86
     ce8:	90 e2       	ldi	r25, 0x20	; 32
     cea:	0e 94 c2 2b 	call	0x5784	; 0x5784 <PrintBussensors>
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
     cee:	66 e5       	ldi	r22, 0x56	; 86
     cf0:	70 e2       	ldi	r23, 0x20	; 32
     cf2:	82 ec       	ldi	r24, 0xC2	; 194
     cf4:	91 e2       	ldi	r25, 0x21	; 33
     cf6:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
     cfa:	2f c0       	rjmp	.+94     	; 0xd5a <main+0x1d8>

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
				case DEBUGPRINT_START:
					if(now - prevIDPrint >= PRINT_ID_INTERVAL) {
     cfc:	c8 18       	sub	r12, r8
     cfe:	d9 08       	sbc	r13, r9
     d00:	ea 08       	sbc	r14, r10
     d02:	fb 08       	sbc	r15, r11
     d04:	80 ec       	ldi	r24, 0xC0	; 192
     d06:	c8 16       	cp	r12, r24
     d08:	86 ec       	ldi	r24, 0xC6	; 198
     d0a:	d8 06       	cpc	r13, r24
     d0c:	8d e2       	ldi	r24, 0x2D	; 45
     d0e:	e8 06       	cpc	r14, r24
     d10:	f1 04       	cpc	r15, r1
     d12:	08 f2       	brcs	.-126    	; 0xc96 <main+0x114>
						prevIDPrint += PRINT_ID_INTERVAL;
     d14:	20 ec       	ldi	r18, 0xC0	; 192
     d16:	82 0e       	add	r8, r18
     d18:	26 ec       	ldi	r18, 0xC6	; 198
     d1a:	92 1e       	adc	r9, r18
     d1c:	2d e2       	ldi	r18, 0x2D	; 45
     d1e:	a2 1e       	adc	r10, r18
     d20:	b1 1c       	adc	r11, r1
						PrintResetHeader(&gCtrl_IO);
     d22:	86 e5       	ldi	r24, 0x56	; 86
     d24:	90 e2       	ldi	r25, 0x20	; 32
     d26:	0e 94 bb 23 	call	0x4776	; 0x4776 <PrintResetHeader>
     d2a:	1a c0       	rjmp	.+52     	; 0xd60 <main+0x1de>
						TakeSnapshot();
						debugPrintstate = DEBUGPRINT_ANALOG;
					}
					break;
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
     d2c:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
     d30:	80 73       	andi	r24, 0x30	; 48
     d32:	29 f4       	brne	.+10     	; 0xd3e <main+0x1bc>
						PrintCSV_H2A(&gCtrl_IO);
     d34:	86 e5       	ldi	r24, 0x56	; 86
     d36:	90 e2       	ldi	r25, 0x20	; 32
     d38:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <PrintCSV_H2A>
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <main+0x1c4>
					}
					else {
						PrintCSV_EVA(&gCtrl_IO);
     d3e:	86 e5       	ldi	r24, 0x56	; 86
     d40:	90 e2       	ldi	r25, 0x20	; 32
     d42:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <PrintCSV_EVA>
     d46:	c0 e0       	ldi	r28, 0x00	; 0
					}
					debugPrintstate = DEBUGPRINT_9DOF;
     d48:	d2 e0       	ldi	r29, 0x02	; 2
     d4a:	a9 cf       	rjmp	.-174    	; 0xc9e <main+0x11c>
					break;
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
     d4c:	86 e5       	ldi	r24, 0x56	; 86
     d4e:	90 e2       	ldi	r25, 0x20	; 32
     d50:	0e 94 44 08 	call	0x1088	; 0x1088 <PrintCSV_9DOF>
					debugPrintstate = DEBUGPRINT_BUS;
					break;
     d54:	c0 e0       	ldi	r28, 0x00	; 0
					}
					debugPrintstate = DEBUGPRINT_9DOF;
					break;
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_BUS;
     d56:	d3 e0       	ldi	r29, 0x03	; 3
					break;
     d58:	a2 cf       	rjmp	.-188    	; 0xc9e <main+0x11c>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     d5a:	c0 e0       	ldi	r28, 0x00	; 0
					PrintBussensors(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
				default:
					debugPrintstate = DEBUGPRINT_START;
     d5c:	d0 e0       	ldi	r29, 0x00	; 0
     d5e:	9f cf       	rjmp	.-194    	; 0xc9e <main+0x11c>
     d60:	c0 e0       	ldi	r28, 0x00	; 0
     d62:	9d cf       	rjmp	.-198    	; 0xc9e <main+0x11c>

00000d64 <S9DOFWrite>:


static void S9DOFWrite(char Address, char Data, uint8_t xm_or_g) {
	uint8_t bit = 0, i;

	if (xm_or_g == SELECT_G)
     d64:	41 30       	cpi	r20, 0x01	; 1
     d66:	19 f4       	brne	.+6      	; 0xd6e <S9DOFWrite+0xa>
		CS_G_POORT.OUTCLR = CS_G;
     d68:	40 93 46 06 	sts	0x0646, r20	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <S9DOFWrite+0x10>
	else 
		CS_XM_POORT.OUTCLR = CS_XM;
     d6e:	90 e8       	ldi	r25, 0x80	; 128
     d70:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		);
	
} /* PrintCSV_9DOF */


static void S9DOFWrite(char Address, char Data, uint8_t xm_or_g) {
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
		CS_G_POORT.OUTCLR = CS_G;
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
		bit = ((Address << i) & 0x80);
     d78:	90 e0       	ldi	r25, 0x00	; 0
		if (bit) {
			SDA_POORT.OUTSET = SDA;
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     d7a:	70 e4       	ldi	r23, 0x40	; 64
		}
		SCL_POORT.OUTCLR = SCL;
     d7c:	51 e0       	ldi	r21, 0x01	; 1
		CS_G_POORT.OUTCLR = CS_G;
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
		bit = ((Address << i) & 0x80);
     d7e:	fc 01       	movw	r30, r24
     d80:	02 2e       	mov	r0, r18
     d82:	01 c0       	rjmp	.+2      	; 0xd86 <S9DOFWrite+0x22>
     d84:	ee 0f       	add	r30, r30
     d86:	0a 94       	dec	r0
     d88:	ea f7       	brpl	.-6      	; 0xd84 <S9DOFWrite+0x20>
		if (bit) {
     d8a:	e7 ff       	sbrs	r30, 7
     d8c:	03 c0       	rjmp	.+6      	; 0xd94 <S9DOFWrite+0x30>
			SDA_POORT.OUTSET = SDA;
     d8e:	70 93 85 06 	sts	0x0685, r23	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <S9DOFWrite+0x34>
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     d94:	70 93 86 06 	sts	0x0686, r23	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		}
		SCL_POORT.OUTCLR = SCL;
     d98:	50 93 66 06 	sts	0x0666, r21	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		SCL_POORT.OUTSET = SCL;
     d9c:	50 93 65 06 	sts	0x0665, r21	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     da0:	2f 5f       	subi	r18, 0xFF	; 255
     da2:	3f 4f       	sbci	r19, 0xFF	; 255
	if (xm_or_g == SELECT_G)
		CS_G_POORT.OUTCLR = CS_G;
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
     da4:	28 30       	cpi	r18, 0x08	; 8
     da6:	31 05       	cpc	r19, r1
     da8:	51 f7       	brne	.-44     	; 0xd7e <S9DOFWrite+0x1a>
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
		bit = ((Data << i) & 0x80);
     dae:	70 e0       	ldi	r23, 0x00	; 0
		if (bit) {
			SDA_POORT.OUTSET = SDA;
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     db0:	30 e4       	ldi	r19, 0x40	; 64
		}
		SCL_POORT.OUTCLR = SCL;
     db2:	21 e0       	ldi	r18, 0x01	; 1
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
		bit = ((Data << i) & 0x80);
     db4:	fb 01       	movw	r30, r22
     db6:	08 2e       	mov	r0, r24
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <S9DOFWrite+0x58>
     dba:	ee 0f       	add	r30, r30
     dbc:	0a 94       	dec	r0
     dbe:	ea f7       	brpl	.-6      	; 0xdba <S9DOFWrite+0x56>
		if (bit) {
     dc0:	e7 ff       	sbrs	r30, 7
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <S9DOFWrite+0x66>
			SDA_POORT.OUTSET = SDA;
     dc4:	30 93 85 06 	sts	0x0685, r19	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <S9DOFWrite+0x6a>
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     dca:	30 93 86 06 	sts	0x0686, r19	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		}
		SCL_POORT.OUTCLR = SCL;
     dce:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		SCL_POORT.OUTSET = SCL;
     dd2:	20 93 65 06 	sts	0x0665, r18	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     dd6:	01 96       	adiw	r24, 0x01	; 1
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
     dd8:	88 30       	cpi	r24, 0x08	; 8
     dda:	91 05       	cpc	r25, r1
     ddc:	59 f7       	brne	.-42     	; 0xdb4 <S9DOFWrite+0x50>
		}
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}

	if (xm_or_g == SELECT_G)
     dde:	41 30       	cpi	r20, 0x01	; 1
     de0:	19 f4       	brne	.+6      	; 0xde8 <S9DOFWrite+0x84>
		CS_G_POORT.OUTSET = CS_G;
     de2:	40 93 45 06 	sts	0x0645, r20	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     de6:	08 95       	ret
	else 
		CS_XM_POORT.OUTSET = CS_XM;
     de8:	80 e8       	ldi	r24, 0x80	; 128
     dea:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     dee:	08 95       	ret

00000df0 <S9DOFRead.constprop.0>:
		
} /* S9DOFWrite */


static uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;

	if (xm_or_g == SELECT_G)
     df8:	61 30       	cpi	r22, 0x01	; 1
     dfa:	19 f4       	brne	.+6      	; 0xe02 <S9DOFRead.constprop.0+0x12>
		CS_G_POORT.OUTCLR = CS_G;
     dfc:	60 93 46 06 	sts	0x0646, r22	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     e00:	03 c0       	rjmp	.+6      	; 0xe08 <S9DOFRead.constprop.0+0x18>
	else 
		CS_XM_POORT.OUTCLR = CS_XM;
     e02:	90 e8       	ldi	r25, 0x80	; 128
     e04:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>

	Address |= 0x80;
     e08:	80 68       	ori	r24, 0x80	; 128
     e0a:	a0 e0       	ldi	r26, 0x00	; 0
     e0c:	b0 e0       	ldi	r27, 0x00	; 0

	for(i = 0; i < 8; i++) {
		bit = !!((Address << i) & 0x80);
     e0e:	90 e0       	ldi	r25, 0x00	; 0
		if (bit) {
			SDA_POORT.OUTSET = SDA;
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     e10:	30 e4       	ldi	r19, 0x40	; 64
		}
		SCL_POORT.OUTCLR = SCL;
     e12:	21 e0       	ldi	r18, 0x01	; 1
		CS_XM_POORT.OUTCLR = CS_XM;

	Address |= 0x80;

	for(i = 0; i < 8; i++) {
		bit = !!((Address << i) & 0x80);
     e14:	ac 01       	movw	r20, r24
     e16:	0a 2e       	mov	r0, r26
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <S9DOFRead.constprop.0+0x2c>
     e1a:	44 0f       	add	r20, r20
     e1c:	0a 94       	dec	r0
     e1e:	ea f7       	brpl	.-6      	; 0xe1a <S9DOFRead.constprop.0+0x2a>
		if (bit) {
     e20:	47 ff       	sbrs	r20, 7
     e22:	03 c0       	rjmp	.+6      	; 0xe2a <S9DOFRead.constprop.0+0x3a>
			SDA_POORT.OUTSET = SDA;
     e24:	30 93 85 06 	sts	0x0685, r19	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <S9DOFRead.constprop.0+0x3e>
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     e2a:	30 93 86 06 	sts	0x0686, r19	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		}
		SCL_POORT.OUTCLR = SCL;
     e2e:	20 93 66 06 	sts	0x0666, r18	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		SCL_POORT.OUTSET = SCL;
     e32:	20 93 65 06 	sts	0x0665, r18	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     e36:	11 96       	adiw	r26, 0x01	; 1
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	Address |= 0x80;

	for(i = 0; i < 8; i++) {
     e38:	a8 30       	cpi	r26, 0x08	; 8
     e3a:	b1 05       	cpc	r27, r1
     e3c:	59 f7       	brne	.-42     	; 0xe14 <S9DOFRead.constprop.0+0x24>
			SDA_POORT.OUTCLR = SDA;
		}
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;
     e3e:	80 e4       	ldi	r24, 0x40	; 64
     e40:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
     e44:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
static uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
     e4a:	e0 e0       	ldi	r30, 0x00	; 0
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>

		if(SDO_G_POORT.IN & SDO_G)
     e54:	40 91 a8 06 	lds	r20, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
			bitG = 1;
		else 
			bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;
     e58:	ee 0f       	add	r30, r30
     e5a:	ff 1f       	adc	r31, r31
     e5c:	ff 27       	eor	r31, r31
     e5e:	41 70       	andi	r20, 0x01	; 1
     e60:	c4 2f       	mov	r28, r20
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	d4 2f       	mov	r29, r20
     e66:	ec 2b       	or	r30, r28
     e68:	fd 2b       	or	r31, r29

		if(SDO_XM_POORT.IN & SDO_XM)
     e6a:	40 91 88 06 	lds	r20, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
			bitXM = 1;
		else
			bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	33 27       	eor	r19, r19
			bitG = 1;
		else 
			bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;

		if(SDO_XM_POORT.IN & SDO_XM)
     e74:	04 2e       	mov	r0, r20
     e76:	00 0c       	add	r0, r0
     e78:	55 0b       	sbc	r21, r21
     e7a:	44 27       	eor	r20, r20
     e7c:	55 0f       	add	r21, r21
     e7e:	44 1f       	adc	r20, r20
     e80:	55 27       	eor	r21, r21
			bitXM = 1;
		else
			bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
     e82:	24 2b       	or	r18, r20
     e84:	35 2b       	or	r19, r21

		SCL_POORT.OUTSET = SCL;
     e86:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     e8a:	91 50       	subi	r25, 0x01	; 1
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
     e8c:	09 f7       	brne	.-62     	; 0xe50 <S9DOFRead.constprop.0+0x60>
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
			SCL_POORT.OUTCLR = SCL;
     e96:	71 e0       	ldi	r23, 0x01	; 1
     e98:	70 93 66 06 	sts	0x0666, r23	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
     e9c:	c0 91 a8 06 	lds	r28, 0x06A8	; 0x8006a8 <__TEXT_REGION_LENGTH__+0x7006a8>
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	99 27       	eor	r25, r25
     ea6:	0c 2f       	mov	r16, r28
     ea8:	01 70       	andi	r16, 0x01	; 1
     eaa:	10 e0       	ldi	r17, 0x00	; 0
     eac:	80 2b       	or	r24, r16
     eae:	91 2b       	or	r25, r17

			if(SDO_XM_POORT.IN & SDO_XM)
     eb0:	c0 91 88 06 	lds	r28, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
				bitXM = 1;
			else 
				bitXM = 0;
			byte2GyroXM = ((byte2GyroXM &0x7F)<<1)|bitXM;
     eb4:	44 0f       	add	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	55 27       	eor	r21, r21

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;

			if(SDO_XM_POORT.IN & SDO_XM)
     eba:	0c 2e       	mov	r0, r28
     ebc:	00 0c       	add	r0, r0
     ebe:	dd 0b       	sbc	r29, r29
     ec0:	cc 27       	eor	r28, r28
     ec2:	dd 0f       	add	r29, r29
     ec4:	cc 1f       	adc	r28, r28
     ec6:	dd 27       	eor	r29, r29
				bitXM = 1;
			else 
				bitXM = 0;
			byte2GyroXM = ((byte2GyroXM &0x7F)<<1)|bitXM;
     ec8:	4c 2b       	or	r20, r28
     eca:	5d 2b       	or	r21, r29

			SCL_POORT.OUTSET = SCL;
     ecc:	70 93 65 06 	sts	0x0665, r23	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
     ed0:	11 97       	sbiw	r26, 0x01	; 1

		SCL_POORT.OUTSET = SCL;
	}

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
     ed2:	11 f7       	brne	.-60     	; 0xe98 <S9DOFRead.constprop.0+0xa8>

			SCL_POORT.OUTSET = SCL;
		}
	}

	if (xm_or_g == SELECT_G)
     ed4:	61 30       	cpi	r22, 0x01	; 1
     ed6:	41 f4       	brne	.+16     	; 0xee8 <S9DOFRead.constprop.0+0xf8>
		CS_G_POORT.OUTSET = CS_G;
     ed8:	60 93 45 06 	sts	0x0645, r22	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	else 
		CS_XM_POORT.OUTSET = CS_XM;

	if (xm_or_g == SELECT_G) 
		data = (((uint16_t) byte2GyroG) << 8) | byteGyroG;
     edc:	78 2f       	mov	r23, r24
     ede:	66 27       	eor	r22, r22
     ee0:	cb 01       	movw	r24, r22
     ee2:	8e 2b       	or	r24, r30
     ee4:	9f 2b       	or	r25, r31
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <S9DOFRead.constprop.0+0x106>
	}

	if (xm_or_g == SELECT_G)
		CS_G_POORT.OUTSET = CS_G;
	else 
		CS_XM_POORT.OUTSET = CS_XM;
     ee8:	80 e8       	ldi	r24, 0x80	; 128
     eea:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	if (xm_or_g == SELECT_G) 
		data = (((uint16_t) byte2GyroG) << 8) | byteGyroG;
	else 
		data = (((uint16_t) byte2GyroXM) << 8) | byteGyroXM;
     eee:	94 2f       	mov	r25, r20
     ef0:	88 27       	eor	r24, r24
     ef2:	82 2b       	or	r24, r18
     ef4:	93 2b       	or	r25, r19

	return data;
}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	08 95       	ret

00000f00 <Init9DOF>:

static void S9DOFWrite(char Address, char Data, uint8_t xm_or_g);
static uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g);


void Init9DOF(void) {
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
	
	SDA_POORT.DIRSET	=	SDA;
     f04:	a0 e8       	ldi	r26, 0x80	; 128
     f06:	b6 e0       	ldi	r27, 0x06	; 6
     f08:	20 e4       	ldi	r18, 0x40	; 64
     f0a:	11 96       	adiw	r26, 0x01	; 1
     f0c:	2c 93       	st	X, r18
     f0e:	11 97       	sbiw	r26, 0x01	; 1
	CS_G_POORT.DIRSET	=	CS_G;
     f10:	e0 e4       	ldi	r30, 0x40	; 64
     f12:	f6 e0       	ldi	r31, 0x06	; 6
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	81 83       	std	Z+1, r24	; 0x01
	CS_XM_POORT.DIRSET	=	CS_XM;
     f18:	90 e8       	ldi	r25, 0x80	; 128
     f1a:	91 83       	std	Z+1, r25	; 0x01
	SCL_POORT.DIRSET	=	SCL;
     f1c:	c0 e6       	ldi	r28, 0x60	; 96
     f1e:	d6 e0       	ldi	r29, 0x06	; 6
     f20:	89 83       	std	Y+1, r24	; 0x01

	SCL_POORT.OUTSET	=	SCL;
     f22:	8d 83       	std	Y+5, r24	; 0x05
	SDA_POORT.OUTCLR	=	SDA;
     f24:	16 96       	adiw	r26, 0x06	; 6
     f26:	2c 93       	st	X, r18
     f28:	16 97       	sbiw	r26, 0x06	; 6
	CS_G_POORT.OUTSET	=	CS_G;
     f2a:	85 83       	std	Z+5, r24	; 0x05
	CS_XM_POORT.OUTSET	=	CS_XM;
     f2c:	95 83       	std	Z+5, r25	; 0x05

	SDO_G_POORT.DIRCLR	=	SDO_G;
     f2e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
	SDO_XM_POORT.DIRCLR	=	SDO_XM;
     f32:	12 96       	adiw	r26, 0x02	; 2
     f34:	9c 93       	st	X, r25

	S9DOFWrite(0x20, 0x47, SELECT_XM);
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	67 e4       	ldi	r22, 0x47	; 71
     f3a:	80 e2       	ldi	r24, 0x20	; 32
     f3c:	0e 94 b2 06 	call	0xd64	; 0xd64 <S9DOFWrite>
	S9DOFWrite(0x21, 0x08, SELECT_XM);
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	68 e0       	ldi	r22, 0x08	; 8
     f44:	81 e2       	ldi	r24, 0x21	; 33
     f46:	0e 94 b2 06 	call	0xd64	; 0xd64 <S9DOFWrite>
	S9DOFWrite(0x24, 0x94, SELECT_XM);//was 0x10
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	64 e9       	ldi	r22, 0x94	; 148
     f4e:	84 e2       	ldi	r24, 0x24	; 36
     f50:	0e 94 b2 06 	call	0xd64	; 0xd64 <S9DOFWrite>
	S9DOFWrite(0x25, 0x20, SELECT_XM);
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	60 e2       	ldi	r22, 0x20	; 32
     f58:	85 e2       	ldi	r24, 0x25	; 37
     f5a:	0e 94 b2 06 	call	0xd64	; 0xd64 <S9DOFWrite>
	S9DOFWrite(0x26, 0x00, SELECT_XM);
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	86 e2       	ldi	r24, 0x26	; 38
     f64:	0e 94 b2 06 	call	0xd64	; 0xd64 <S9DOFWrite>

	S9DOFWrite(0x20, 0x8F, SELECT_G);
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	6f e8       	ldi	r22, 0x8F	; 143
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	0e 94 b2 06 	call	0xd64	; 0xd64 <S9DOFWrite>
	S9DOFWrite(0x21, 0x00, SELECT_G);
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	81 e2       	ldi	r24, 0x21	; 33
	
} /* Init9DOF */
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
	S9DOFWrite(0x24, 0x94, SELECT_XM);//was 0x10
	S9DOFWrite(0x25, 0x20, SELECT_XM);
	S9DOFWrite(0x26, 0x00, SELECT_XM);

	S9DOFWrite(0x20, 0x8F, SELECT_G);
	S9DOFWrite(0x21, 0x00, SELECT_G);
     f7c:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <S9DOFWrite>

00000f80 <Process9DOF>:
	
} /* Init9DOF */


void Process9DOF(void) {
     f80:	08 95       	ret

00000f82 <GyroGetTemp>:


float GyroGetTemp(void) {
	int16_t data = 0;

	data = (int16_t)S9DOFRead(0xC5,2,SELECT_XM);
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	85 ec       	ldi	r24, 0xC5	; 197
     f86:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <S9DOFRead.constprop.0>

	return data / 8.0f;
     f8a:	bc 01       	movw	r22, r24
     f8c:	99 0f       	add	r25, r25
     f8e:	88 0b       	sbc	r24, r24
     f90:	99 0b       	sbc	r25, r25
     f92:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	5e e3       	ldi	r21, 0x3E	; 62
     f9e:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
}
     fa2:	08 95       	ret

00000fa4 <GyroGetMagnetic>:


float GyroGetMagnetic(uint8_t X_Y_Z)
{
	int16_t data = 0;
	if (X_Y_Z == GET_X)
     fa4:	81 11       	cpse	r24, r1
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <GyroGetMagnetic+0xa>
	{
		data = (int16_t) S9DOFRead(0xC8,2,SELECT_XM);
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <GyroGetMagnetic+0x1c>
	}
	if (X_Y_Z == GET_Y)
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	19 f4       	brne	.+6      	; 0xfb8 <GyroGetMagnetic+0x14>
	{
		data = (int16_t) S9DOFRead(0xCA,2,SELECT_XM);
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	8a ec       	ldi	r24, 0xCA	; 202
     fb6:	04 c0       	rjmp	.+8      	; 0xfc0 <GyroGetMagnetic+0x1c>
	}
	if (X_Y_Z == GET_Z)
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	29 f4       	brne	.+10     	; 0xfc6 <GyroGetMagnetic+0x22>
	{
		data = (int16_t) S9DOFRead(0xCC,2,SELECT_XM);
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	8c ec       	ldi	r24, 0xCC	; 204
     fc0:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <S9DOFRead.constprop.0>
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GyroGetMagnetic+0x26>
}


float GyroGetMagnetic(uint8_t X_Y_Z)
{
	int16_t data = 0;
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	90 e0       	ldi	r25, 0x00	; 0
		data = (int16_t) S9DOFRead(0xCC,2,SELECT_XM);
	}

//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = ((float)data / 1000)*LSM9DS0_MAG_MGAUSS_4GAUSS;
     fca:	bc 01       	movw	r22, r24
     fcc:	99 0f       	add	r25, r25
     fce:	88 0b       	sbc	r24, r24
     fd0:	99 0b       	sbc	r25, r25
     fd2:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	4a e7       	ldi	r20, 0x7A	; 122
     fdc:	54 e4       	ldi	r21, 0x44	; 68
     fde:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
     fe2:	2a e0       	ldi	r18, 0x0A	; 10
     fe4:	37 ed       	ldi	r19, 0xD7	; 215
     fe6:	43 e2       	ldi	r20, 0x23	; 35
     fe8:	5e e3       	ldi	r21, 0x3E	; 62
     fea:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>

	return return_data;
}
     fee:	08 95       	ret

00000ff0 <GyroGetAcceleration>:


float GyroGetAcceleration(uint8_t X_Y_Z) {
	int16_t data = 0;
	
	if (X_Y_Z == GET_X)
     ff0:	81 11       	cpse	r24, r1
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <GyroGetAcceleration+0xa>
	{
		data = (int16_t) S9DOFRead(0xE8,2,SELECT_XM);
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	88 ee       	ldi	r24, 0xE8	; 232
     ff8:	09 c0       	rjmp	.+18     	; 0x100c <GyroGetAcceleration+0x1c>
	}
	if (X_Y_Z == GET_Y)
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	19 f4       	brne	.+6      	; 0x1004 <GyroGetAcceleration+0x14>
	{
		data = (int16_t) S9DOFRead(0xEA,2,SELECT_XM);
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	8a ee       	ldi	r24, 0xEA	; 234
    1002:	04 c0       	rjmp	.+8      	; 0x100c <GyroGetAcceleration+0x1c>
	}
	if (X_Y_Z == GET_Z)
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	29 f4       	brne	.+10     	; 0x1012 <GyroGetAcceleration+0x22>
	{
		data = (int16_t) S9DOFRead(0xEC,2,SELECT_XM);
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	8c ee       	ldi	r24, 0xEC	; 236
    100c:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <S9DOFRead.constprop.0>
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GyroGetAcceleration+0x26>
	return return_data;
}


float GyroGetAcceleration(uint8_t X_Y_Z) {
	int16_t data = 0;
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
		data = (int16_t) S9DOFRead(0xEC,2,SELECT_XM);
	}

	//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = (((float)data / 1000) * SENSORS_GRAVITY_EARTH)*LSM9DS0_ACCEL_MG_LSB_4G; // factor voor
    1016:	bc 01       	movw	r22, r24
    1018:	99 0f       	add	r25, r25
    101a:	88 0b       	sbc	r24, r24
    101c:	99 0b       	sbc	r25, r25
    101e:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	4a e7       	ldi	r20, 0x7A	; 122
    1028:	54 e4       	ldi	r21, 0x44	; 68
    102a:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    102e:	23 ec       	ldi	r18, 0xC3	; 195
    1030:	35 ef       	ldi	r19, 0xF5	; 245
    1032:	4c e1       	ldi	r20, 0x1C	; 28
    1034:	51 e4       	ldi	r21, 0x41	; 65
    1036:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    103a:	23 e2       	ldi	r18, 0x23	; 35
    103c:	3b ed       	ldi	r19, 0xDB	; 219
    103e:	49 ef       	ldi	r20, 0xF9	; 249
    1040:	5d e3       	ldi	r21, 0x3D	; 61
    1042:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>

	return return_data;
}
    1046:	08 95       	ret

00001048 <GyroGetGyro>:


float GyroGetGyro(uint8_t X_Y_Z) {
	int16_t data = 0;

	if (X_Y_Z == GET_X)
    1048:	81 11       	cpse	r24, r1
    104a:	03 c0       	rjmp	.+6      	; 0x1052 <GyroGetGyro+0xa>
	{
		data = (int16_t) S9DOFRead(0x68,2,SELECT_G);
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	88 e6       	ldi	r24, 0x68	; 104
    1050:	09 c0       	rjmp	.+18     	; 0x1064 <GyroGetGyro+0x1c>
	}
	if (X_Y_Z == GET_Y)
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	19 f4       	brne	.+6      	; 0x105c <GyroGetGyro+0x14>
	{
		data = (int16_t) S9DOFRead(0x6A,2,SELECT_G);
    1056:	61 e0       	ldi	r22, 0x01	; 1
    1058:	8a e6       	ldi	r24, 0x6A	; 106
    105a:	04 c0       	rjmp	.+8      	; 0x1064 <GyroGetGyro+0x1c>
	}
	if (X_Y_Z == GET_Z)
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	29 f4       	brne	.+10     	; 0x106a <GyroGetGyro+0x22>
	{
		data = (int16_t) S9DOFRead(0x6C,2,SELECT_G);
    1060:	61 e0       	ldi	r22, 0x01	; 1
    1062:	8c e6       	ldi	r24, 0x6C	; 108
    1064:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <S9DOFRead.constprop.0>
    1068:	02 c0       	rjmp	.+4      	; 0x106e <GyroGetGyro+0x26>
	return return_data;
}


float GyroGetGyro(uint8_t X_Y_Z) {
	int16_t data = 0;
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
		data = (int16_t) S9DOFRead(0x6C,2,SELECT_G);
	}

//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = ((float)data)*LSM9DS0_GYRO_DPS_DIGIT_245DPS;
    106e:	bc 01       	movw	r22, r24
    1070:	99 0f       	add	r25, r25
    1072:	88 0b       	sbc	r24, r24
    1074:	99 0b       	sbc	r25, r25
    1076:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    107a:	29 e2       	ldi	r18, 0x29	; 41
    107c:	3c e5       	ldi	r19, 0x5C	; 92
    107e:	4f e0       	ldi	r20, 0x0F	; 15
    1080:	5c e3       	ldi	r21, 0x3C	; 60
    1082:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>

	return return_data;
}
    1086:	08 95       	ret

00001088 <PrintCSV_9DOF>:
void Process9DOF(void) {
	
} /* Process9DOF */


void PrintCSV_9DOF(FILE *fd) {
    1088:	2f 92       	push	r2
    108a:	3f 92       	push	r3
    108c:	4f 92       	push	r4
    108e:	5f 92       	push	r5
    1090:	6f 92       	push	r6
    1092:	7f 92       	push	r7
    1094:	8f 92       	push	r8
    1096:	9f 92       	push	r9
    1098:	af 92       	push	r10
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	66 97       	sbiw	r28, 0x16	; 22
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	8f 87       	std	Y+15, r24	; 0x0f
    10b8:	98 8b       	std	Y+16, r25	; 0x10
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
		GyroGetTemp()
    10ba:	0e 94 c1 07 	call	0xf82	; 0xf82 <GyroGetTemp>
    10be:	9b 01       	movw	r18, r22
    10c0:	ac 01       	movw	r20, r24
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	29 8b       	std	Y+17, r18	; 0x11
    10c6:	3a 8b       	std	Y+18, r19	; 0x12
    10c8:	4b 8b       	std	Y+19, r20	; 0x13
    10ca:	5c 8b       	std	Y+20, r21	; 0x14
    10cc:	0e 94 24 08 	call	0x1048	; 0x1048 <GyroGetGyro>
    10d0:	56 2e       	mov	r5, r22
    10d2:	47 2e       	mov	r4, r23
    10d4:	38 2e       	mov	r3, r24
    10d6:	29 2e       	mov	r2, r25
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	0e 94 24 08 	call	0x1048	; 0x1048 <GyroGetGyro>
    10de:	96 2e       	mov	r9, r22
    10e0:	87 2e       	mov	r8, r23
    10e2:	78 2e       	mov	r7, r24
    10e4:	69 2e       	mov	r6, r25
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	0e 94 24 08 	call	0x1048	; 0x1048 <GyroGetGyro>
    10ec:	69 83       	std	Y+1, r22	; 0x01
    10ee:	7a 83       	std	Y+2, r23	; 0x02
    10f0:	b8 2e       	mov	r11, r24
    10f2:	a9 2e       	mov	r10, r25
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <GyroGetMagnetic>
    10fa:	6b 83       	std	Y+3, r22	; 0x03
    10fc:	7c 83       	std	Y+4, r23	; 0x04
    10fe:	8d 83       	std	Y+5, r24	; 0x05
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <GyroGetMagnetic>
    1108:	6f 83       	std	Y+7, r22	; 0x07
    110a:	78 87       	std	Y+8, r23	; 0x08
    110c:	89 87       	std	Y+9, r24	; 0x09
    110e:	9a 87       	std	Y+10, r25	; 0x0a
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <GyroGetMagnetic>
    1116:	6b 87       	std	Y+11, r22	; 0x0b
    1118:	7c 87       	std	Y+12, r23	; 0x0c
    111a:	8d 87       	std	Y+13, r24	; 0x0d
    111c:	9e 87       	std	Y+14, r25	; 0x0e
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	0e 94 f8 07 	call	0xff0	; 0xff0 <GyroGetAcceleration>
    1124:	f6 2e       	mov	r15, r22
    1126:	e7 2e       	mov	r14, r23
    1128:	d8 2e       	mov	r13, r24
    112a:	c9 2e       	mov	r12, r25
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	0e 94 f8 07 	call	0xff0	; 0xff0 <GyroGetAcceleration>
    1132:	6d 8b       	std	Y+21, r22	; 0x15
    1134:	7e 8b       	std	Y+22, r23	; 0x16
    1136:	18 2f       	mov	r17, r24
    1138:	09 2f       	mov	r16, r25
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	0e 94 f8 07 	call	0xff0	; 0xff0 <GyroGetAcceleration>


void PrintCSV_9DOF(FILE *fd) {
	
	// Dummy print for now. Format will be: Accel[XYZ],Magneto[XYZ],Gyro[XYZ],Temp
	fprintf(fd, "%.3f,%.3f,%.3f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,",
    1140:	5c 89       	ldd	r21, Y+20	; 0x14
    1142:	5f 93       	push	r21
    1144:	4b 89       	ldd	r20, Y+19	; 0x13
    1146:	4f 93       	push	r20
    1148:	3a 89       	ldd	r19, Y+18	; 0x12
    114a:	3f 93       	push	r19
    114c:	29 89       	ldd	r18, Y+17	; 0x11
    114e:	2f 93       	push	r18
    1150:	2f 92       	push	r2
    1152:	3f 92       	push	r3
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	2a 81       	ldd	r18, Y+2	; 0x02
    1166:	2f 93       	push	r18
    1168:	29 81       	ldd	r18, Y+1	; 0x01
    116a:	2f 93       	push	r18
    116c:	2e 81       	ldd	r18, Y+6	; 0x06
    116e:	2f 93       	push	r18
    1170:	2d 81       	ldd	r18, Y+5	; 0x05
    1172:	2f 93       	push	r18
    1174:	2c 81       	ldd	r18, Y+4	; 0x04
    1176:	2f 93       	push	r18
    1178:	2b 81       	ldd	r18, Y+3	; 0x03
    117a:	2f 93       	push	r18
    117c:	2a 85       	ldd	r18, Y+10	; 0x0a
    117e:	2f 93       	push	r18
    1180:	29 85       	ldd	r18, Y+9	; 0x09
    1182:	2f 93       	push	r18
    1184:	28 85       	ldd	r18, Y+8	; 0x08
    1186:	2f 93       	push	r18
    1188:	2f 81       	ldd	r18, Y+7	; 0x07
    118a:	2f 93       	push	r18
    118c:	2e 85       	ldd	r18, Y+14	; 0x0e
    118e:	2f 93       	push	r18
    1190:	2d 85       	ldd	r18, Y+13	; 0x0d
    1192:	2f 93       	push	r18
    1194:	2c 85       	ldd	r18, Y+12	; 0x0c
    1196:	2f 93       	push	r18
    1198:	2b 85       	ldd	r18, Y+11	; 0x0b
    119a:	2f 93       	push	r18
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	2e 89       	ldd	r18, Y+22	; 0x16
    11aa:	2f 93       	push	r18
    11ac:	2d 89       	ldd	r18, Y+21	; 0x15
    11ae:	2f 93       	push	r18
    11b0:	9f 93       	push	r25
    11b2:	8f 93       	push	r24
    11b4:	7f 93       	push	r23
    11b6:	6f 93       	push	r22
    11b8:	86 ec       	ldi	r24, 0xC6	; 198
    11ba:	91 e2       	ldi	r25, 0x21	; 33
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	28 89       	ldd	r18, Y+16	; 0x10
    11c2:	2f 93       	push	r18
    11c4:	2f 85       	ldd	r18, Y+15	; 0x0f
    11c6:	2f 93       	push	r18
    11c8:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	de bf       	out	0x3e, r29	; 62
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
		GyroGetTemp()
#endif
		);
	
} /* PrintCSV_9DOF */
    11d0:	66 96       	adiw	r28, 0x16	; 22
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	de bf       	out	0x3e, r29	; 62
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	bf 90       	pop	r11
    11e8:	af 90       	pop	r10
    11ea:	9f 90       	pop	r9
    11ec:	8f 90       	pop	r8
    11ee:	7f 90       	pop	r7
    11f0:	6f 90       	pop	r6
    11f2:	5f 90       	pop	r5
    11f4:	4f 90       	pop	r4
    11f6:	3f 90       	pop	r3
    11f8:	2f 90       	pop	r2
    11fa:	08 95       	ret

000011fc <CoreAnalogTakeSnapshot485>:

uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
	
} /* IsSnapshotCoreAnalogDone */
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 93 e9 28 	sts	0x28E9, r24	; 0x8028e9 <sTakeSnapshot485>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	08 95       	ret

00001208 <GetCruiseControlButtonStatus>:
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	eb 01       	movw	r28, r22
    1214:	8a 01       	movw	r16, r20
    1216:	60 91 56 29 	lds	r22, 0x2956	; 0x802956 <sSensorDataSnapshot485+0x68>
    121a:	70 91 57 29 	lds	r23, 0x2957	; 0x802957 <sSensorDataSnapshot485+0x69>
    121e:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <sSensorDataSnapshot485+0x6a>
    1222:	90 91 59 29 	lds	r25, 0x2959	; 0x802959 <sSensorDataSnapshot485+0x6b>
    1226:	f0 90 50 29 	lds	r15, 0x2950	; 0x802950 <sSensorDataSnapshot485+0x62>
    122a:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e4       	ldi	r19, 0x40	; 64
    1232:	4c e9       	ldi	r20, 0x9C	; 156
    1234:	55 e4       	ldi	r21, 0x45	; 69
    1236:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    123a:	9f 93       	push	r25
    123c:	8f 93       	push	r24
    123e:	7f 93       	push	r23
    1240:	6f 93       	push	r22
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	f1 10       	cpse	r15, r1
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	1f 92       	push	r1
    124a:	8f 93       	push	r24
    124c:	89 ef       	ldi	r24, 0xF9	; 249
    124e:	91 e2       	ldi	r25, 0x21	; 33
    1250:	9f 93       	push	r25
    1252:	8f 93       	push	r24
    1254:	1f 93       	push	r17
    1256:	0f 93       	push	r16
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1260:	2d b7       	in	r18, 0x3d	; 61
    1262:	3e b7       	in	r19, 0x3e	; 62
    1264:	24 5f       	subi	r18, 0xF4	; 244
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	2d bf       	out	0x3d, r18	; 61
    126a:	3e bf       	out	0x3e, r19	; 62
    126c:	80 17       	cp	r24, r16
    126e:	91 07       	cpc	r25, r17
    1270:	24 f0       	brlt	.+8      	; 0x127a <GetCruiseControlButtonStatus+0x72>
    1272:	18 82       	st	Y, r1
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GetCruiseControlButtonStatus+0x76>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	1f 91       	pop	r17
    1284:	0f 91       	pop	r16
    1286:	ff 90       	pop	r15
    1288:	08 95       	ret

0000128a <GetFullPowerButtonStatus>:
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	eb 01       	movw	r28, r22
    1296:	8a 01       	movw	r16, r20
    1298:	60 91 52 29 	lds	r22, 0x2952	; 0x802952 <sSensorDataSnapshot485+0x64>
    129c:	70 91 53 29 	lds	r23, 0x2953	; 0x802953 <sSensorDataSnapshot485+0x65>
    12a0:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <sSensorDataSnapshot485+0x66>
    12a4:	90 91 55 29 	lds	r25, 0x2955	; 0x802955 <sSensorDataSnapshot485+0x67>
    12a8:	f0 90 4f 29 	lds	r15, 0x294F	; 0x80294f <sSensorDataSnapshot485+0x61>
    12ac:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e4       	ldi	r19, 0x40	; 64
    12b4:	4c e9       	ldi	r20, 0x9C	; 156
    12b6:	55 e4       	ldi	r21, 0x45	; 69
    12b8:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    12bc:	9f 93       	push	r25
    12be:	8f 93       	push	r24
    12c0:	7f 93       	push	r23
    12c2:	6f 93       	push	r22
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	f1 10       	cpse	r15, r1
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	1f 92       	push	r1
    12cc:	8f 93       	push	r24
    12ce:	89 ef       	ldi	r24, 0xF9	; 249
    12d0:	91 e2       	ldi	r25, 0x21	; 33
    12d2:	9f 93       	push	r25
    12d4:	8f 93       	push	r24
    12d6:	1f 93       	push	r17
    12d8:	0f 93       	push	r16
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    12e2:	2d b7       	in	r18, 0x3d	; 61
    12e4:	3e b7       	in	r19, 0x3e	; 62
    12e6:	24 5f       	subi	r18, 0xF4	; 244
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	2d bf       	out	0x3d, r18	; 61
    12ec:	3e bf       	out	0x3e, r19	; 62
    12ee:	80 17       	cp	r24, r16
    12f0:	91 07       	cpc	r25, r17
    12f2:	24 f0       	brlt	.+8      	; 0x12fc <GetFullPowerButtonStatus+0x72>
    12f4:	18 82       	st	Y, r1
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GetFullPowerButtonStatus+0x76>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	08 95       	ret

0000130c <GetMotorDriverTemp>:
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	eb 01       	movw	r28, r22
    1316:	8a 01       	movw	r16, r20
    1318:	60 91 1b 29 	lds	r22, 0x291B	; 0x80291b <sSensorDataSnapshot485+0x2d>
    131c:	70 91 1c 29 	lds	r23, 0x291C	; 0x80291c <sSensorDataSnapshot485+0x2e>
    1320:	80 91 1d 29 	lds	r24, 0x291D	; 0x80291d <sSensorDataSnapshot485+0x2f>
    1324:	90 91 1e 29 	lds	r25, 0x291E	; 0x80291e <sSensorDataSnapshot485+0x30>
    1328:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e2       	ldi	r20, 0x20	; 32
    1332:	59 e4       	ldi	r21, 0x49	; 73
    1334:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1338:	9f 93       	push	r25
    133a:	8f 93       	push	r24
    133c:	7f 93       	push	r23
    133e:	6f 93       	push	r22
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	92 e2       	ldi	r25, 0x22	; 34
    1344:	9f 93       	push	r25
    1346:	8f 93       	push	r24
    1348:	1f 93       	push	r17
    134a:	0f 93       	push	r16
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1354:	2d b7       	in	r18, 0x3d	; 61
    1356:	3e b7       	in	r19, 0x3e	; 62
    1358:	26 5f       	subi	r18, 0xF6	; 246
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	2d bf       	out	0x3d, r18	; 61
    135e:	3e bf       	out	0x3e, r19	; 62
    1360:	80 17       	cp	r24, r16
    1362:	91 07       	cpc	r25, r17
    1364:	24 f0       	brlt	.+8      	; 0x136e <GetMotorDriverTemp+0x62>
    1366:	18 82       	st	Y, r1
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <GetMotorDriverTemp+0x66>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <GetDiodeStatus>:
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	eb 01       	movw	r28, r22
    1388:	8a 01       	movw	r16, r20
    138a:	60 91 17 29 	lds	r22, 0x2917	; 0x802917 <sSensorDataSnapshot485+0x29>
    138e:	70 91 18 29 	lds	r23, 0x2918	; 0x802918 <sSensorDataSnapshot485+0x2a>
    1392:	80 91 19 29 	lds	r24, 0x2919	; 0x802919 <sSensorDataSnapshot485+0x2b>
    1396:	90 91 1a 29 	lds	r25, 0x291A	; 0x80291a <sSensorDataSnapshot485+0x2c>
    139a:	f0 90 16 29 	lds	r15, 0x2916	; 0x802916 <sSensorDataSnapshot485+0x28>
    139e:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e4       	ldi	r19, 0x40	; 64
    13a6:	4c e9       	ldi	r20, 0x9C	; 156
    13a8:	55 e4       	ldi	r21, 0x45	; 69
    13aa:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    13ae:	9f 93       	push	r25
    13b0:	8f 93       	push	r24
    13b2:	7f 93       	push	r23
    13b4:	6f 93       	push	r22
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	f1 10       	cpse	r15, r1
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <GetDiodeStatus+0x42>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	1f 92       	push	r1
    13c0:	8f 93       	push	r24
    13c2:	89 ef       	ldi	r24, 0xF9	; 249
    13c4:	91 e2       	ldi	r25, 0x21	; 33
    13c6:	9f 93       	push	r25
    13c8:	8f 93       	push	r24
    13ca:	1f 93       	push	r17
    13cc:	0f 93       	push	r16
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    13d6:	2d b7       	in	r18, 0x3d	; 61
    13d8:	3e b7       	in	r19, 0x3e	; 62
    13da:	24 5f       	subi	r18, 0xF4	; 244
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	2d bf       	out	0x3d, r18	; 61
    13e0:	3e bf       	out	0x3e, r19	; 62
    13e2:	80 17       	cp	r24, r16
    13e4:	91 07       	cpc	r25, r17
    13e6:	24 f0       	brlt	.+8      	; 0x13f0 <GetDiodeStatus+0x74>
    13e8:	18 82       	st	Y, r1
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <GetDiodeStatus+0x78>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	08 95       	ret

00001400 <GetTimeSnapshot>:
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	eb 01       	movw	r28, r22
    140a:	8a 01       	movw	r16, r20
    140c:	60 91 ea 28 	lds	r22, 0x28EA	; 0x8028ea <sSessionCycleCountSnapshot485>
    1410:	70 91 eb 28 	lds	r23, 0x28EB	; 0x8028eb <sSessionCycleCountSnapshot485+0x1>
    1414:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <sSessionCycleCountSnapshot485+0x2>
    1418:	90 91 ed 28 	lds	r25, 0x28ED	; 0x8028ed <sSessionCycleCountSnapshot485+0x3>
    141c:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e4       	ldi	r19, 0x40	; 64
    1424:	4c e9       	ldi	r20, 0x9C	; 156
    1426:	55 e4       	ldi	r21, 0x45	; 69
    1428:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    142c:	9f 93       	push	r25
    142e:	8f 93       	push	r24
    1430:	7f 93       	push	r23
    1432:	6f 93       	push	r22
    1434:	8c ef       	ldi	r24, 0xFC	; 252
    1436:	91 e2       	ldi	r25, 0x21	; 33
    1438:	9f 93       	push	r25
    143a:	8f 93       	push	r24
    143c:	1f 93       	push	r17
    143e:	0f 93       	push	r16
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1448:	2d b7       	in	r18, 0x3d	; 61
    144a:	3e b7       	in	r19, 0x3e	; 62
    144c:	26 5f       	subi	r18, 0xF6	; 246
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	2d bf       	out	0x3d, r18	; 61
    1452:	3e bf       	out	0x3e, r19	; 62
    1454:	80 17       	cp	r24, r16
    1456:	91 07       	cpc	r25, r17
    1458:	24 f0       	brlt	.+8      	; 0x1462 <GetTimeSnapshot+0x62>
    145a:	18 82       	st	Y, r1
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GetTimeSnapshot+0x66>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	08 95       	ret

00001470 <GetSupercapEnergy>:
    1470:	4f 92       	push	r4
    1472:	5f 92       	push	r5
    1474:	6f 92       	push	r6
    1476:	7f 92       	push	r7
    1478:	8f 92       	push	r8
    147a:	9f 92       	push	r9
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	8b 01       	movw	r16, r22
    1492:	ea 01       	movw	r28, r20
    1494:	20 91 0e 29 	lds	r18, 0x290E	; 0x80290e <sSensorDataSnapshot485+0x20>
    1498:	30 91 0f 29 	lds	r19, 0x290F	; 0x80290f <sSensorDataSnapshot485+0x21>
    149c:	40 91 10 29 	lds	r20, 0x2910	; 0x802910 <sSensorDataSnapshot485+0x22>
    14a0:	50 91 11 29 	lds	r21, 0x2911	; 0x802911 <sSensorDataSnapshot485+0x23>
    14a4:	60 91 12 29 	lds	r22, 0x2912	; 0x802912 <sSensorDataSnapshot485+0x24>
    14a8:	70 91 13 29 	lds	r23, 0x2913	; 0x802913 <sSensorDataSnapshot485+0x25>
    14ac:	80 91 14 29 	lds	r24, 0x2914	; 0x802914 <sSensorDataSnapshot485+0x26>
    14b0:	90 91 15 29 	lds	r25, 0x2915	; 0x802915 <sSensorDataSnapshot485+0x27>
    14b4:	40 90 f5 29 	lds	r4, 0x29F5	; 0x8029f5 <sCal+0x10>
    14b8:	50 90 f6 29 	lds	r5, 0x29F6	; 0x8029f6 <sCal+0x11>
    14bc:	60 90 f7 29 	lds	r6, 0x29F7	; 0x8029f7 <sCal+0x12>
    14c0:	70 90 f8 29 	lds	r7, 0x29F8	; 0x8029f8 <sCal+0x13>
    14c4:	80 90 f9 29 	lds	r8, 0x29F9	; 0x8029f9 <sCal+0x14>
    14c8:	90 90 fa 29 	lds	r9, 0x29FA	; 0x8029fa <sCal+0x15>
    14cc:	a0 90 fb 29 	lds	r10, 0x29FB	; 0x8029fb <sCal+0x16>
    14d0:	b0 90 fc 29 	lds	r11, 0x29FC	; 0x8029fc <sCal+0x17>
    14d4:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__floatdisf>
    14d8:	6b 01       	movw	r12, r22
    14da:	7c 01       	movw	r14, r24
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e4       	ldi	r19, 0x40	; 64
    14e0:	4c e9       	ldi	r20, 0x9C	; 156
    14e2:	55 e4       	ldi	r21, 0x45	; 69
    14e4:	c3 01       	movw	r24, r6
    14e6:	b2 01       	movw	r22, r4
    14e8:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    14ec:	a5 01       	movw	r20, r10
    14ee:	94 01       	movw	r18, r8
    14f0:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    14f4:	9b 01       	movw	r18, r22
    14f6:	ac 01       	movw	r20, r24
    14f8:	c7 01       	movw	r24, r14
    14fa:	b6 01       	movw	r22, r12
    14fc:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1500:	9f 93       	push	r25
    1502:	8f 93       	push	r24
    1504:	7f 93       	push	r23
    1506:	6f 93       	push	r22
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	92 e2       	ldi	r25, 0x22	; 34
    150c:	9f 93       	push	r25
    150e:	8f 93       	push	r24
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	1f 93       	push	r17
    1516:	0f 93       	push	r16
    1518:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    151c:	ed b7       	in	r30, 0x3d	; 61
    151e:	fe b7       	in	r31, 0x3e	; 62
    1520:	3a 96       	adiw	r30, 0x0a	; 10
    1522:	ed bf       	out	0x3d, r30	; 61
    1524:	fe bf       	out	0x3e, r31	; 62
    1526:	8c 17       	cp	r24, r28
    1528:	9d 07       	cpc	r25, r29
    152a:	2c f0       	brlt	.+10     	; 0x1536 <GetSupercapEnergy+0xc6>
    152c:	f8 01       	movw	r30, r16
    152e:	10 82       	st	Z, r1
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <GetSupercapEnergy+0xca>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	bf 90       	pop	r11
    154c:	af 90       	pop	r10
    154e:	9f 90       	pop	r9
    1550:	8f 90       	pop	r8
    1552:	7f 90       	pop	r7
    1554:	6f 90       	pop	r6
    1556:	5f 90       	pop	r5
    1558:	4f 90       	pop	r4
    155a:	08 95       	ret

0000155c <GetSupercapPower>:
    155c:	4f 92       	push	r4
    155e:	5f 92       	push	r5
    1560:	6f 92       	push	r6
    1562:	7f 92       	push	r7
    1564:	8f 92       	push	r8
    1566:	9f 92       	push	r9
    1568:	af 92       	push	r10
    156a:	bf 92       	push	r11
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	8b 01       	movw	r16, r22
    157e:	ea 01       	movw	r28, r20
    1580:	60 91 02 29 	lds	r22, 0x2902	; 0x802902 <sSensorDataSnapshot485+0x14>
    1584:	70 91 03 29 	lds	r23, 0x2903	; 0x802903 <sSensorDataSnapshot485+0x15>
    1588:	80 91 04 29 	lds	r24, 0x2904	; 0x802904 <sSensorDataSnapshot485+0x16>
    158c:	90 91 05 29 	lds	r25, 0x2905	; 0x802905 <sSensorDataSnapshot485+0x17>
    1590:	40 90 f5 29 	lds	r4, 0x29F5	; 0x8029f5 <sCal+0x10>
    1594:	50 90 f6 29 	lds	r5, 0x29F6	; 0x8029f6 <sCal+0x11>
    1598:	60 90 f7 29 	lds	r6, 0x29F7	; 0x8029f7 <sCal+0x12>
    159c:	70 90 f8 29 	lds	r7, 0x29F8	; 0x8029f8 <sCal+0x13>
    15a0:	80 90 f9 29 	lds	r8, 0x29F9	; 0x8029f9 <sCal+0x14>
    15a4:	90 90 fa 29 	lds	r9, 0x29FA	; 0x8029fa <sCal+0x15>
    15a8:	a0 90 fb 29 	lds	r10, 0x29FB	; 0x8029fb <sCal+0x16>
    15ac:	b0 90 fc 29 	lds	r11, 0x29FC	; 0x8029fc <sCal+0x17>
    15b0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    15b4:	6b 01       	movw	r12, r22
    15b6:	7c 01       	movw	r14, r24
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	53 e4       	ldi	r21, 0x43	; 67
    15c0:	c3 01       	movw	r24, r6
    15c2:	b2 01       	movw	r22, r4
    15c4:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    15c8:	a5 01       	movw	r20, r10
    15ca:	94 01       	movw	r18, r8
    15cc:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    15d0:	9b 01       	movw	r18, r22
    15d2:	ac 01       	movw	r20, r24
    15d4:	c7 01       	movw	r24, r14
    15d6:	b6 01       	movw	r22, r12
    15d8:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    15dc:	9f 93       	push	r25
    15de:	8f 93       	push	r24
    15e0:	7f 93       	push	r23
    15e2:	6f 93       	push	r22
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	92 e2       	ldi	r25, 0x22	; 34
    15e8:	9f 93       	push	r25
    15ea:	8f 93       	push	r24
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	1f 93       	push	r17
    15f2:	0f 93       	push	r16
    15f4:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    15f8:	ed b7       	in	r30, 0x3d	; 61
    15fa:	fe b7       	in	r31, 0x3e	; 62
    15fc:	3a 96       	adiw	r30, 0x0a	; 10
    15fe:	ed bf       	out	0x3d, r30	; 61
    1600:	fe bf       	out	0x3e, r31	; 62
    1602:	8c 17       	cp	r24, r28
    1604:	9d 07       	cpc	r25, r29
    1606:	2c f0       	brlt	.+10     	; 0x1612 <GetSupercapPower+0xb6>
    1608:	f8 01       	movw	r30, r16
    160a:	10 82       	st	Z, r1
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GetSupercapPower+0xba>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	cf 90       	pop	r12
    1626:	bf 90       	pop	r11
    1628:	af 90       	pop	r10
    162a:	9f 90       	pop	r9
    162c:	8f 90       	pop	r8
    162e:	7f 90       	pop	r7
    1630:	6f 90       	pop	r6
    1632:	5f 90       	pop	r5
    1634:	4f 90       	pop	r4
    1636:	08 95       	ret

00001638 <GetSupercapCurrent>:
    1638:	8f 92       	push	r8
    163a:	9f 92       	push	r9
    163c:	af 92       	push	r10
    163e:	bf 92       	push	r11
    1640:	cf 92       	push	r12
    1642:	df 92       	push	r13
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	eb 01       	movw	r28, r22
    1652:	8a 01       	movw	r16, r20
    1654:	60 91 fa 28 	lds	r22, 0x28FA	; 0x8028fa <sSensorDataSnapshot485+0xc>
    1658:	70 91 fb 28 	lds	r23, 0x28FB	; 0x8028fb <sSensorDataSnapshot485+0xd>
    165c:	80 91 fc 28 	lds	r24, 0x28FC	; 0x8028fc <sSensorDataSnapshot485+0xe>
    1660:	90 91 fd 28 	lds	r25, 0x28FD	; 0x8028fd <sSensorDataSnapshot485+0xf>
    1664:	80 90 f9 29 	lds	r8, 0x29F9	; 0x8029f9 <sCal+0x14>
    1668:	90 90 fa 29 	lds	r9, 0x29FA	; 0x8029fa <sCal+0x15>
    166c:	a0 90 fb 29 	lds	r10, 0x29FB	; 0x8029fb <sCal+0x16>
    1670:	b0 90 fc 29 	lds	r11, 0x29FC	; 0x8029fc <sCal+0x17>
    1674:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    1678:	6b 01       	movw	r12, r22
    167a:	7c 01       	movw	r14, r24
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	57 e4       	ldi	r21, 0x47	; 71
    1684:	c5 01       	movw	r24, r10
    1686:	b4 01       	movw	r22, r8
    1688:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    168c:	9b 01       	movw	r18, r22
    168e:	ac 01       	movw	r20, r24
    1690:	c7 01       	movw	r24, r14
    1692:	b6 01       	movw	r22, r12
    1694:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1698:	9f 93       	push	r25
    169a:	8f 93       	push	r24
    169c:	7f 93       	push	r23
    169e:	6f 93       	push	r22
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	92 e2       	ldi	r25, 0x22	; 34
    16a4:	9f 93       	push	r25
    16a6:	8f 93       	push	r24
    16a8:	1f 93       	push	r17
    16aa:	0f 93       	push	r16
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    16b4:	2d b7       	in	r18, 0x3d	; 61
    16b6:	3e b7       	in	r19, 0x3e	; 62
    16b8:	26 5f       	subi	r18, 0xF6	; 246
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	2d bf       	out	0x3d, r18	; 61
    16be:	3e bf       	out	0x3e, r19	; 62
    16c0:	80 17       	cp	r24, r16
    16c2:	91 07       	cpc	r25, r17
    16c4:	24 f0       	brlt	.+8      	; 0x16ce <GetSupercapCurrent+0x96>
    16c6:	18 82       	st	Y, r1
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <GetSupercapCurrent+0x9a>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	8f 90       	pop	r8
    16ea:	08 95       	ret

000016ec <GetSupercapVoltage>:
    16ec:	8f 92       	push	r8
    16ee:	9f 92       	push	r9
    16f0:	af 92       	push	r10
    16f2:	bf 92       	push	r11
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	eb 01       	movw	r28, r22
    1706:	8a 01       	movw	r16, r20
    1708:	60 91 f6 28 	lds	r22, 0x28F6	; 0x8028f6 <sSensorDataSnapshot485+0x8>
    170c:	70 91 f7 28 	lds	r23, 0x28F7	; 0x8028f7 <sSensorDataSnapshot485+0x9>
    1710:	80 91 f8 28 	lds	r24, 0x28F8	; 0x8028f8 <sSensorDataSnapshot485+0xa>
    1714:	90 91 f9 28 	lds	r25, 0x28F9	; 0x8028f9 <sSensorDataSnapshot485+0xb>
    1718:	80 90 f5 29 	lds	r8, 0x29F5	; 0x8029f5 <sCal+0x10>
    171c:	90 90 f6 29 	lds	r9, 0x29F6	; 0x8029f6 <sCal+0x11>
    1720:	a0 90 f7 29 	lds	r10, 0x29F7	; 0x8029f7 <sCal+0x12>
    1724:	b0 90 f8 29 	lds	r11, 0x29F8	; 0x8029f8 <sCal+0x13>
    1728:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    172c:	6b 01       	movw	r12, r22
    172e:	7c 01       	movw	r14, r24
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	c5 01       	movw	r24, r10
    173a:	b4 01       	movw	r22, r8
    173c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    1740:	9b 01       	movw	r18, r22
    1742:	ac 01       	movw	r20, r24
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    174c:	9f 93       	push	r25
    174e:	8f 93       	push	r24
    1750:	7f 93       	push	r23
    1752:	6f 93       	push	r22
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	92 e2       	ldi	r25, 0x22	; 34
    1758:	9f 93       	push	r25
    175a:	8f 93       	push	r24
    175c:	1f 93       	push	r17
    175e:	0f 93       	push	r16
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1768:	2d b7       	in	r18, 0x3d	; 61
    176a:	3e b7       	in	r19, 0x3e	; 62
    176c:	26 5f       	subi	r18, 0xF6	; 246
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	2d bf       	out	0x3d, r18	; 61
    1772:	3e bf       	out	0x3e, r19	; 62
    1774:	80 17       	cp	r24, r16
    1776:	91 07       	cpc	r25, r17
    1778:	24 f0       	brlt	.+8      	; 0x1782 <GetSupercapVoltage+0x96>
    177a:	18 82       	st	Y, r1
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GetSupercapVoltage+0x9a>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	9f 90       	pop	r9
    179c:	8f 90       	pop	r8
    179e:	08 95       	ret

000017a0 <GetFuelCellEnergy>:
    17a0:	4f 92       	push	r4
    17a2:	5f 92       	push	r5
    17a4:	6f 92       	push	r6
    17a6:	7f 92       	push	r7
    17a8:	8f 92       	push	r8
    17aa:	9f 92       	push	r9
    17ac:	af 92       	push	r10
    17ae:	bf 92       	push	r11
    17b0:	cf 92       	push	r12
    17b2:	df 92       	push	r13
    17b4:	ef 92       	push	r14
    17b6:	ff 92       	push	r15
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	8b 01       	movw	r16, r22
    17c2:	ea 01       	movw	r28, r20
    17c4:	20 91 06 29 	lds	r18, 0x2906	; 0x802906 <sSensorDataSnapshot485+0x18>
    17c8:	30 91 07 29 	lds	r19, 0x2907	; 0x802907 <sSensorDataSnapshot485+0x19>
    17cc:	40 91 08 29 	lds	r20, 0x2908	; 0x802908 <sSensorDataSnapshot485+0x1a>
    17d0:	50 91 09 29 	lds	r21, 0x2909	; 0x802909 <sSensorDataSnapshot485+0x1b>
    17d4:	60 91 0a 29 	lds	r22, 0x290A	; 0x80290a <sSensorDataSnapshot485+0x1c>
    17d8:	70 91 0b 29 	lds	r23, 0x290B	; 0x80290b <sSensorDataSnapshot485+0x1d>
    17dc:	80 91 0c 29 	lds	r24, 0x290C	; 0x80290c <sSensorDataSnapshot485+0x1e>
    17e0:	90 91 0d 29 	lds	r25, 0x290D	; 0x80290d <sSensorDataSnapshot485+0x1f>
    17e4:	40 90 ed 29 	lds	r4, 0x29ED	; 0x8029ed <sCal+0x8>
    17e8:	50 90 ee 29 	lds	r5, 0x29EE	; 0x8029ee <sCal+0x9>
    17ec:	60 90 ef 29 	lds	r6, 0x29EF	; 0x8029ef <sCal+0xa>
    17f0:	70 90 f0 29 	lds	r7, 0x29F0	; 0x8029f0 <sCal+0xb>
    17f4:	80 90 f1 29 	lds	r8, 0x29F1	; 0x8029f1 <sCal+0xc>
    17f8:	90 90 f2 29 	lds	r9, 0x29F2	; 0x8029f2 <sCal+0xd>
    17fc:	a0 90 f3 29 	lds	r10, 0x29F3	; 0x8029f3 <sCal+0xe>
    1800:	b0 90 f4 29 	lds	r11, 0x29F4	; 0x8029f4 <sCal+0xf>
    1804:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__floatdisf>
    1808:	6b 01       	movw	r12, r22
    180a:	7c 01       	movw	r14, r24
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e4       	ldi	r19, 0x40	; 64
    1810:	4c e9       	ldi	r20, 0x9C	; 156
    1812:	55 e4       	ldi	r21, 0x45	; 69
    1814:	c3 01       	movw	r24, r6
    1816:	b2 01       	movw	r22, r4
    1818:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    181c:	a5 01       	movw	r20, r10
    181e:	94 01       	movw	r18, r8
    1820:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	c7 01       	movw	r24, r14
    182a:	b6 01       	movw	r22, r12
    182c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1830:	9f 93       	push	r25
    1832:	8f 93       	push	r24
    1834:	7f 93       	push	r23
    1836:	6f 93       	push	r22
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	92 e2       	ldi	r25, 0x22	; 34
    183c:	9f 93       	push	r25
    183e:	8f 93       	push	r24
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	1f 93       	push	r17
    1846:	0f 93       	push	r16
    1848:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    184c:	ed b7       	in	r30, 0x3d	; 61
    184e:	fe b7       	in	r31, 0x3e	; 62
    1850:	3a 96       	adiw	r30, 0x0a	; 10
    1852:	ed bf       	out	0x3d, r30	; 61
    1854:	fe bf       	out	0x3e, r31	; 62
    1856:	8c 17       	cp	r24, r28
    1858:	9d 07       	cpc	r25, r29
    185a:	2c f0       	brlt	.+10     	; 0x1866 <GetFuelCellEnergy+0xc6>
    185c:	f8 01       	movw	r30, r16
    185e:	10 82       	st	Z, r1
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GetFuelCellEnergy+0xca>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	ff 90       	pop	r15
    1874:	ef 90       	pop	r14
    1876:	df 90       	pop	r13
    1878:	cf 90       	pop	r12
    187a:	bf 90       	pop	r11
    187c:	af 90       	pop	r10
    187e:	9f 90       	pop	r9
    1880:	8f 90       	pop	r8
    1882:	7f 90       	pop	r7
    1884:	6f 90       	pop	r6
    1886:	5f 90       	pop	r5
    1888:	4f 90       	pop	r4
    188a:	08 95       	ret

0000188c <GetFuelCellPower>:
    188c:	4f 92       	push	r4
    188e:	5f 92       	push	r5
    1890:	6f 92       	push	r6
    1892:	7f 92       	push	r7
    1894:	8f 92       	push	r8
    1896:	9f 92       	push	r9
    1898:	af 92       	push	r10
    189a:	bf 92       	push	r11
    189c:	cf 92       	push	r12
    189e:	df 92       	push	r13
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	8b 01       	movw	r16, r22
    18ae:	ea 01       	movw	r28, r20
    18b0:	60 91 fe 28 	lds	r22, 0x28FE	; 0x8028fe <sSensorDataSnapshot485+0x10>
    18b4:	70 91 ff 28 	lds	r23, 0x28FF	; 0x8028ff <sSensorDataSnapshot485+0x11>
    18b8:	80 91 00 29 	lds	r24, 0x2900	; 0x802900 <sSensorDataSnapshot485+0x12>
    18bc:	90 91 01 29 	lds	r25, 0x2901	; 0x802901 <sSensorDataSnapshot485+0x13>
    18c0:	40 90 ed 29 	lds	r4, 0x29ED	; 0x8029ed <sCal+0x8>
    18c4:	50 90 ee 29 	lds	r5, 0x29EE	; 0x8029ee <sCal+0x9>
    18c8:	60 90 ef 29 	lds	r6, 0x29EF	; 0x8029ef <sCal+0xa>
    18cc:	70 90 f0 29 	lds	r7, 0x29F0	; 0x8029f0 <sCal+0xb>
    18d0:	80 90 f1 29 	lds	r8, 0x29F1	; 0x8029f1 <sCal+0xc>
    18d4:	90 90 f2 29 	lds	r9, 0x29F2	; 0x8029f2 <sCal+0xd>
    18d8:	a0 90 f3 29 	lds	r10, 0x29F3	; 0x8029f3 <sCal+0xe>
    18dc:	b0 90 f4 29 	lds	r11, 0x29F4	; 0x8029f4 <sCal+0xf>
    18e0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    18e4:	6b 01       	movw	r12, r22
    18e6:	7c 01       	movw	r14, r24
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	53 e4       	ldi	r21, 0x43	; 67
    18f0:	c3 01       	movw	r24, r6
    18f2:	b2 01       	movw	r22, r4
    18f4:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    18f8:	a5 01       	movw	r20, r10
    18fa:	94 01       	movw	r18, r8
    18fc:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    1900:	9b 01       	movw	r18, r22
    1902:	ac 01       	movw	r20, r24
    1904:	c7 01       	movw	r24, r14
    1906:	b6 01       	movw	r22, r12
    1908:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	7f 93       	push	r23
    1912:	6f 93       	push	r22
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	92 e2       	ldi	r25, 0x22	; 34
    1918:	9f 93       	push	r25
    191a:	8f 93       	push	r24
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	1f 93       	push	r17
    1922:	0f 93       	push	r16
    1924:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1928:	ed b7       	in	r30, 0x3d	; 61
    192a:	fe b7       	in	r31, 0x3e	; 62
    192c:	3a 96       	adiw	r30, 0x0a	; 10
    192e:	ed bf       	out	0x3d, r30	; 61
    1930:	fe bf       	out	0x3e, r31	; 62
    1932:	8c 17       	cp	r24, r28
    1934:	9d 07       	cpc	r25, r29
    1936:	2c f0       	brlt	.+10     	; 0x1942 <GetFuelCellPower+0xb6>
    1938:	f8 01       	movw	r30, r16
    193a:	10 82       	st	Z, r1
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <GetFuelCellPower+0xba>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	df 90       	pop	r13
    1954:	cf 90       	pop	r12
    1956:	bf 90       	pop	r11
    1958:	af 90       	pop	r10
    195a:	9f 90       	pop	r9
    195c:	8f 90       	pop	r8
    195e:	7f 90       	pop	r7
    1960:	6f 90       	pop	r6
    1962:	5f 90       	pop	r5
    1964:	4f 90       	pop	r4
    1966:	08 95       	ret

00001968 <GetFuelCellCurrent>:
    1968:	8f 92       	push	r8
    196a:	9f 92       	push	r9
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	eb 01       	movw	r28, r22
    1982:	8a 01       	movw	r16, r20
    1984:	60 91 f2 28 	lds	r22, 0x28F2	; 0x8028f2 <sSensorDataSnapshot485+0x4>
    1988:	70 91 f3 28 	lds	r23, 0x28F3	; 0x8028f3 <sSensorDataSnapshot485+0x5>
    198c:	80 91 f4 28 	lds	r24, 0x28F4	; 0x8028f4 <sSensorDataSnapshot485+0x6>
    1990:	90 91 f5 28 	lds	r25, 0x28F5	; 0x8028f5 <sSensorDataSnapshot485+0x7>
    1994:	80 90 f1 29 	lds	r8, 0x29F1	; 0x8029f1 <sCal+0xc>
    1998:	90 90 f2 29 	lds	r9, 0x29F2	; 0x8029f2 <sCal+0xd>
    199c:	a0 90 f3 29 	lds	r10, 0x29F3	; 0x8029f3 <sCal+0xe>
    19a0:	b0 90 f4 29 	lds	r11, 0x29F4	; 0x8029f4 <sCal+0xf>
    19a4:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	57 e4       	ldi	r21, 0x47	; 71
    19b4:	c5 01       	movw	r24, r10
    19b6:	b4 01       	movw	r22, r8
    19b8:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    19bc:	9b 01       	movw	r18, r22
    19be:	ac 01       	movw	r20, r24
    19c0:	c7 01       	movw	r24, r14
    19c2:	b6 01       	movw	r22, r12
    19c4:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    19c8:	9f 93       	push	r25
    19ca:	8f 93       	push	r24
    19cc:	7f 93       	push	r23
    19ce:	6f 93       	push	r22
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	92 e2       	ldi	r25, 0x22	; 34
    19d4:	9f 93       	push	r25
    19d6:	8f 93       	push	r24
    19d8:	1f 93       	push	r17
    19da:	0f 93       	push	r16
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    19e4:	2d b7       	in	r18, 0x3d	; 61
    19e6:	3e b7       	in	r19, 0x3e	; 62
    19e8:	26 5f       	subi	r18, 0xF6	; 246
    19ea:	3f 4f       	sbci	r19, 0xFF	; 255
    19ec:	2d bf       	out	0x3d, r18	; 61
    19ee:	3e bf       	out	0x3e, r19	; 62
    19f0:	80 17       	cp	r24, r16
    19f2:	91 07       	cpc	r25, r17
    19f4:	24 f0       	brlt	.+8      	; 0x19fe <GetFuelCellCurrent+0x96>
    19f6:	18 82       	st	Y, r1
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <GetFuelCellCurrent+0x9a>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	df 90       	pop	r13
    1a10:	cf 90       	pop	r12
    1a12:	bf 90       	pop	r11
    1a14:	af 90       	pop	r10
    1a16:	9f 90       	pop	r9
    1a18:	8f 90       	pop	r8
    1a1a:	08 95       	ret

00001a1c <GetFuelCellVoltage>:
    1a1c:	8f 92       	push	r8
    1a1e:	9f 92       	push	r9
    1a20:	af 92       	push	r10
    1a22:	bf 92       	push	r11
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	eb 01       	movw	r28, r22
    1a36:	8a 01       	movw	r16, r20
    1a38:	60 91 ee 28 	lds	r22, 0x28EE	; 0x8028ee <sSensorDataSnapshot485>
    1a3c:	70 91 ef 28 	lds	r23, 0x28EF	; 0x8028ef <sSensorDataSnapshot485+0x1>
    1a40:	80 91 f0 28 	lds	r24, 0x28F0	; 0x8028f0 <sSensorDataSnapshot485+0x2>
    1a44:	90 91 f1 28 	lds	r25, 0x28F1	; 0x8028f1 <sSensorDataSnapshot485+0x3>
    1a48:	80 90 ed 29 	lds	r8, 0x29ED	; 0x8029ed <sCal+0x8>
    1a4c:	90 90 ee 29 	lds	r9, 0x29EE	; 0x8029ee <sCal+0x9>
    1a50:	a0 90 ef 29 	lds	r10, 0x29EF	; 0x8029ef <sCal+0xa>
    1a54:	b0 90 f0 29 	lds	r11, 0x29F0	; 0x8029f0 <sCal+0xb>
    1a58:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    1a5c:	6b 01       	movw	r12, r22
    1a5e:	7c 01       	movw	r14, r24
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e8       	ldi	r20, 0x80	; 128
    1a66:	57 e4       	ldi	r21, 0x47	; 71
    1a68:	c5 01       	movw	r24, r10
    1a6a:	b4 01       	movw	r22, r8
    1a6c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    1a70:	9b 01       	movw	r18, r22
    1a72:	ac 01       	movw	r20, r24
    1a74:	c7 01       	movw	r24, r14
    1a76:	b6 01       	movw	r22, r12
    1a78:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1a7c:	9f 93       	push	r25
    1a7e:	8f 93       	push	r24
    1a80:	7f 93       	push	r23
    1a82:	6f 93       	push	r22
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	92 e2       	ldi	r25, 0x22	; 34
    1a88:	9f 93       	push	r25
    1a8a:	8f 93       	push	r24
    1a8c:	1f 93       	push	r17
    1a8e:	0f 93       	push	r16
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1a98:	2d b7       	in	r18, 0x3d	; 61
    1a9a:	3e b7       	in	r19, 0x3e	; 62
    1a9c:	26 5f       	subi	r18, 0xF6	; 246
    1a9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa0:	2d bf       	out	0x3d, r18	; 61
    1aa2:	3e bf       	out	0x3e, r19	; 62
    1aa4:	80 17       	cp	r24, r16
    1aa6:	91 07       	cpc	r25, r17
    1aa8:	24 f0       	brlt	.+8      	; 0x1ab2 <GetFuelCellVoltage+0x96>
    1aaa:	18 82       	st	Y, r1
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <GetFuelCellVoltage+0x9a>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	bf 90       	pop	r11
    1ac8:	af 90       	pop	r10
    1aca:	9f 90       	pop	r9
    1acc:	8f 90       	pop	r8
    1ace:	08 95       	ret

00001ad0 <GetMotorCurrent>:
    1ad0:	0f 93       	push	r16
    1ad2:	1f 93       	push	r17
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	eb 01       	movw	r28, r22
    1ada:	8a 01       	movw	r16, r20
    1adc:	60 91 23 29 	lds	r22, 0x2923	; 0x802923 <sSensorDataSnapshot485+0x35>
    1ae0:	70 91 24 29 	lds	r23, 0x2924	; 0x802924 <sSensorDataSnapshot485+0x36>
    1ae4:	80 91 25 29 	lds	r24, 0x2925	; 0x802925 <sSensorDataSnapshot485+0x37>
    1ae8:	90 91 26 29 	lds	r25, 0x2926	; 0x802926 <sSensorDataSnapshot485+0x38>
    1aec:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	48 e4       	ldi	r20, 0x48	; 72
    1af6:	5b e4       	ldi	r21, 0x4B	; 75
    1af8:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a e7       	ldi	r20, 0x7A	; 122
    1b02:	5c e4       	ldi	r21, 0x4C	; 76
    1b04:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1b08:	9f 93       	push	r25
    1b0a:	8f 93       	push	r24
    1b0c:	7f 93       	push	r23
    1b0e:	6f 93       	push	r22
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	92 e2       	ldi	r25, 0x22	; 34
    1b14:	9f 93       	push	r25
    1b16:	8f 93       	push	r24
    1b18:	1f 93       	push	r17
    1b1a:	0f 93       	push	r16
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1b24:	2d b7       	in	r18, 0x3d	; 61
    1b26:	3e b7       	in	r19, 0x3e	; 62
    1b28:	26 5f       	subi	r18, 0xF6	; 246
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	2d bf       	out	0x3d, r18	; 61
    1b2e:	3e bf       	out	0x3e, r19	; 62
    1b30:	80 17       	cp	r24, r16
    1b32:	91 07       	cpc	r25, r17
    1b34:	24 f0       	brlt	.+8      	; 0x1b3e <GetMotorCurrent+0x6e>
    1b36:	18 82       	st	Y, r1
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <GetMotorCurrent+0x72>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret

00001b4c <GetMotorVoltage>:
    1b4c:	8f 92       	push	r8
    1b4e:	9f 92       	push	r9
    1b50:	af 92       	push	r10
    1b52:	bf 92       	push	r11
    1b54:	cf 92       	push	r12
    1b56:	df 92       	push	r13
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	eb 01       	movw	r28, r22
    1b66:	8a 01       	movw	r16, r20
    1b68:	60 91 1f 29 	lds	r22, 0x291F	; 0x80291f <sSensorDataSnapshot485+0x31>
    1b6c:	70 91 20 29 	lds	r23, 0x2920	; 0x802920 <sSensorDataSnapshot485+0x32>
    1b70:	80 91 21 29 	lds	r24, 0x2921	; 0x802921 <sSensorDataSnapshot485+0x33>
    1b74:	90 91 22 29 	lds	r25, 0x2922	; 0x802922 <sSensorDataSnapshot485+0x34>
    1b78:	80 90 05 2a 	lds	r8, 0x2A05	; 0x802a05 <sCal+0x20>
    1b7c:	90 90 06 2a 	lds	r9, 0x2A06	; 0x802a06 <sCal+0x21>
    1b80:	a0 90 07 2a 	lds	r10, 0x2A07	; 0x802a07 <sCal+0x22>
    1b84:	b0 90 08 2a 	lds	r11, 0x2A08	; 0x802a08 <sCal+0x23>
    1b88:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    1b8c:	6b 01       	movw	r12, r22
    1b8e:	7c 01       	movw	r14, r24
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e8       	ldi	r20, 0x80	; 128
    1b96:	57 e4       	ldi	r21, 0x47	; 71
    1b98:	c5 01       	movw	r24, r10
    1b9a:	b4 01       	movw	r22, r8
    1b9c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    1ba0:	9b 01       	movw	r18, r22
    1ba2:	ac 01       	movw	r20, r24
    1ba4:	c7 01       	movw	r24, r14
    1ba6:	b6 01       	movw	r22, r12
    1ba8:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1bac:	9f 93       	push	r25
    1bae:	8f 93       	push	r24
    1bb0:	7f 93       	push	r23
    1bb2:	6f 93       	push	r22
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	92 e2       	ldi	r25, 0x22	; 34
    1bb8:	9f 93       	push	r25
    1bba:	8f 93       	push	r24
    1bbc:	1f 93       	push	r17
    1bbe:	0f 93       	push	r16
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1bc8:	2d b7       	in	r18, 0x3d	; 61
    1bca:	3e b7       	in	r19, 0x3e	; 62
    1bcc:	26 5f       	subi	r18, 0xF6	; 246
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	2d bf       	out	0x3d, r18	; 61
    1bd2:	3e bf       	out	0x3e, r19	; 62
    1bd4:	80 17       	cp	r24, r16
    1bd6:	91 07       	cpc	r25, r17
    1bd8:	24 f0       	brlt	.+8      	; 0x1be2 <GetMotorVoltage+0x96>
    1bda:	18 82       	st	Y, r1
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <GetMotorVoltage+0x9a>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	ff 90       	pop	r15
    1bf0:	ef 90       	pop	r14
    1bf2:	df 90       	pop	r13
    1bf4:	cf 90       	pop	r12
    1bf6:	bf 90       	pop	r11
    1bf8:	af 90       	pop	r10
    1bfa:	9f 90       	pop	r9
    1bfc:	8f 90       	pop	r8
    1bfe:	08 95       	ret

00001c00 <GetWheelDistance>:
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	eb 01       	movw	r28, r22
    1c0a:	8a 01       	movw	r16, r20
    1c0c:	60 91 4b 29 	lds	r22, 0x294B	; 0x80294b <sSensorDataSnapshot485+0x5d>
    1c10:	70 91 4c 29 	lds	r23, 0x294C	; 0x80294c <sSensorDataSnapshot485+0x5e>
    1c14:	80 91 4d 29 	lds	r24, 0x294D	; 0x80294d <sSensorDataSnapshot485+0x5f>
    1c18:	90 91 4e 29 	lds	r25, 0x294E	; 0x80294e <sSensorDataSnapshot485+0x60>
    1c1c:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    1c20:	2f ed       	ldi	r18, 0xDF	; 223
    1c22:	36 e9       	ldi	r19, 0x96	; 150
    1c24:	45 e9       	ldi	r20, 0x95	; 149
    1c26:	5d e3       	ldi	r21, 0x3D	; 61
    1c28:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    1c2c:	9f 93       	push	r25
    1c2e:	8f 93       	push	r24
    1c30:	7f 93       	push	r23
    1c32:	6f 93       	push	r22
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	92 e2       	ldi	r25, 0x22	; 34
    1c38:	9f 93       	push	r25
    1c3a:	8f 93       	push	r24
    1c3c:	1f 93       	push	r17
    1c3e:	0f 93       	push	r16
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1c48:	2d b7       	in	r18, 0x3d	; 61
    1c4a:	3e b7       	in	r19, 0x3e	; 62
    1c4c:	26 5f       	subi	r18, 0xF6	; 246
    1c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c50:	2d bf       	out	0x3d, r18	; 61
    1c52:	3e bf       	out	0x3e, r19	; 62
    1c54:	80 17       	cp	r24, r16
    1c56:	91 07       	cpc	r25, r17
    1c58:	24 f0       	brlt	.+8      	; 0x1c62 <GetWheelDistance+0x62>
    1c5a:	18 82       	st	Y, r1
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <GetWheelDistance+0x66>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <GetWheelSpeedEVA>:
    1c70:	cf 92       	push	r12
    1c72:	df 92       	push	r13
    1c74:	ef 92       	push	r14
    1c76:	ff 92       	push	r15
    1c78:	0f 93       	push	r16
    1c7a:	1f 93       	push	r17
    1c7c:	cf 93       	push	r28
    1c7e:	df 93       	push	r29
    1c80:	eb 01       	movw	r28, r22
    1c82:	8a 01       	movw	r16, r20
    1c84:	60 91 47 29 	lds	r22, 0x2947	; 0x802947 <sSensorDataSnapshot485+0x59>
    1c88:	70 91 48 29 	lds	r23, 0x2948	; 0x802948 <sSensorDataSnapshot485+0x5a>
    1c8c:	80 91 49 29 	lds	r24, 0x2949	; 0x802949 <sSensorDataSnapshot485+0x5b>
    1c90:	90 91 4a 29 	lds	r25, 0x294A	; 0x80294a <sSensorDataSnapshot485+0x5c>
    1c94:	61 15       	cp	r22, r1
    1c96:	71 05       	cpc	r23, r1
    1c98:	81 05       	cpc	r24, r1
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	e1 f0       	breq	.+56     	; 0x1cd6 <GetWheelSpeedEVA+0x66>
    1c9e:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e8       	ldi	r20, 0x80	; 128
    1ca8:	57 e3       	ldi	r21, 0x37	; 55
    1caa:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    1cae:	9b 01       	movw	r18, r22
    1cb0:	ac 01       	movw	r20, r24
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	78 e5       	ldi	r23, 0x58	; 88
    1cb6:	84 ea       	ldi	r24, 0xA4	; 164
    1cb8:	94 e4       	ldi	r25, 0x44	; 68
    1cba:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1cbe:	f6 2e       	mov	r15, r22
    1cc0:	e7 2e       	mov	r14, r23
    1cc2:	d8 2e       	mov	r13, r24
    1cc4:	c9 2e       	mov	r12, r25
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	40 e8       	ldi	r20, 0x80	; 128
    1ccc:	5f e3       	ldi	r21, 0x3F	; 63
    1cce:	0e 94 2c 30 	call	0x6058	; 0x6058 <__cmpsf2>
    1cd2:	87 ff       	sbrs	r24, 7
    1cd4:	04 c0       	rjmp	.+8      	; 0x1cde <GetWheelSpeedEVA+0x6e>
    1cd6:	f1 2c       	mov	r15, r1
    1cd8:	e1 2c       	mov	r14, r1
    1cda:	d1 2c       	mov	r13, r1
    1cdc:	c1 2c       	mov	r12, r1
    1cde:	cf 92       	push	r12
    1ce0:	df 92       	push	r13
    1ce2:	ef 92       	push	r14
    1ce4:	ff 92       	push	r15
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	92 e2       	ldi	r25, 0x22	; 34
    1cea:	9f 93       	push	r25
    1cec:	8f 93       	push	r24
    1cee:	1f 93       	push	r17
    1cf0:	0f 93       	push	r16
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1cfa:	2d b7       	in	r18, 0x3d	; 61
    1cfc:	3e b7       	in	r19, 0x3e	; 62
    1cfe:	26 5f       	subi	r18, 0xF6	; 246
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	2d bf       	out	0x3d, r18	; 61
    1d04:	3e bf       	out	0x3e, r19	; 62
    1d06:	80 17       	cp	r24, r16
    1d08:	91 07       	cpc	r25, r17
    1d0a:	24 f0       	brlt	.+8      	; 0x1d14 <GetWheelSpeedEVA+0xa4>
    1d0c:	18 82       	st	Y, r1
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <GetWheelSpeedEVA+0xa8>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	08 95       	ret

00001d2a <GetWheelSpeedH2A>:
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	eb 01       	movw	r28, r22
    1d3c:	8a 01       	movw	r16, r20
    1d3e:	60 91 47 29 	lds	r22, 0x2947	; 0x802947 <sSensorDataSnapshot485+0x59>
    1d42:	70 91 48 29 	lds	r23, 0x2948	; 0x802948 <sSensorDataSnapshot485+0x5a>
    1d46:	80 91 49 29 	lds	r24, 0x2949	; 0x802949 <sSensorDataSnapshot485+0x5b>
    1d4a:	90 91 4a 29 	lds	r25, 0x294A	; 0x80294a <sSensorDataSnapshot485+0x5c>
    1d4e:	61 15       	cp	r22, r1
    1d50:	71 05       	cpc	r23, r1
    1d52:	81 05       	cpc	r24, r1
    1d54:	91 05       	cpc	r25, r1
    1d56:	e1 f0       	breq	.+56     	; 0x1d90 <GetWheelSpeedH2A+0x66>
    1d58:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	57 e3       	ldi	r21, 0x37	; 55
    1d64:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    1d68:	9b 01       	movw	r18, r22
    1d6a:	ac 01       	movw	r20, r24
    1d6c:	60 e0       	ldi	r22, 0x00	; 0
    1d6e:	70 e8       	ldi	r23, 0x80	; 128
    1d70:	8b e8       	ldi	r24, 0x8B	; 139
    1d72:	94 e4       	ldi	r25, 0x44	; 68
    1d74:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    1d78:	f6 2e       	mov	r15, r22
    1d7a:	e7 2e       	mov	r14, r23
    1d7c:	d8 2e       	mov	r13, r24
    1d7e:	c9 2e       	mov	r12, r25
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e8       	ldi	r20, 0x80	; 128
    1d86:	5f e3       	ldi	r21, 0x3F	; 63
    1d88:	0e 94 2c 30 	call	0x6058	; 0x6058 <__cmpsf2>
    1d8c:	87 ff       	sbrs	r24, 7
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <GetWheelSpeedH2A+0x6e>
    1d90:	f1 2c       	mov	r15, r1
    1d92:	e1 2c       	mov	r14, r1
    1d94:	d1 2c       	mov	r13, r1
    1d96:	c1 2c       	mov	r12, r1
    1d98:	cf 92       	push	r12
    1d9a:	df 92       	push	r13
    1d9c:	ef 92       	push	r14
    1d9e:	ff 92       	push	r15
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	92 e2       	ldi	r25, 0x22	; 34
    1da4:	9f 93       	push	r25
    1da6:	8f 93       	push	r24
    1da8:	1f 93       	push	r17
    1daa:	0f 93       	push	r16
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	0e 94 3c 3b 	call	0x7678	; 0x7678 <snprintf>
    1db4:	2d b7       	in	r18, 0x3d	; 61
    1db6:	3e b7       	in	r19, 0x3e	; 62
    1db8:	26 5f       	subi	r18, 0xF6	; 246
    1dba:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbc:	2d bf       	out	0x3d, r18	; 61
    1dbe:	3e bf       	out	0x3e, r19	; 62
    1dc0:	80 17       	cp	r24, r16
    1dc2:	91 07       	cpc	r25, r17
    1dc4:	24 f0       	brlt	.+8      	; 0x1dce <GetWheelSpeedH2A+0xa4>
    1dc6:	18 82       	st	Y, r1
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <GetWheelSpeedH2A+0xa8>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	08 95       	ret

00001de4 <InitCoreAnalog>:
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	80 e2       	ldi	r24, 0x20	; 32
    1dec:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    1df0:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__TEXT_REGION_LENGTH__+0x70020c>
    1df4:	81 e2       	ldi	r24, 0x21	; 33
    1df6:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    1dfa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <__TEXT_REGION_LENGTH__+0x70020d>
    1dfe:	84 e2       	ldi	r24, 0x24	; 36
    1e00:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    1e04:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__TEXT_REGION_LENGTH__+0x70024c>
    1e08:	85 e2       	ldi	r24, 0x25	; 37
    1e0a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    1e0e:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <__TEXT_REGION_LENGTH__+0x70024d>
    1e12:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    1e16:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    1e1a:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__TEXT_REGION_LENGTH__+0x700624>
    1e1e:	10 92 20 06 	sts	0x0620, r1	; 0x800620 <__TEXT_REGION_LENGTH__+0x700620>
    1e22:	87 e0       	ldi	r24, 0x07	; 7
    1e24:	80 93 10 06 	sts	0x0610, r24	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    1e28:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
    1e2c:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <__TEXT_REGION_LENGTH__+0x700612>
    1e30:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <__TEXT_REGION_LENGTH__+0x700613>
    1e34:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <__TEXT_REGION_LENGTH__+0x700614>
    1e38:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <__TEXT_REGION_LENGTH__+0x700615>
    1e3c:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <__TEXT_REGION_LENGTH__+0x700616>
    1e40:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <__TEXT_REGION_LENGTH__+0x700630>
    1e44:	80 93 31 06 	sts	0x0631, r24	; 0x800631 <__TEXT_REGION_LENGTH__+0x700631>
    1e48:	80 93 32 06 	sts	0x0632, r24	; 0x800632 <__TEXT_REGION_LENGTH__+0x700632>
    1e4c:	80 93 33 06 	sts	0x0633, r24	; 0x800633 <__TEXT_REGION_LENGTH__+0x700633>
    1e50:	80 93 34 06 	sts	0x0634, r24	; 0x800634 <__TEXT_REGION_LENGTH__+0x700634>
    1e54:	80 93 35 06 	sts	0x0635, r24	; 0x800635 <__TEXT_REGION_LENGTH__+0x700635>
    1e58:	80 93 36 06 	sts	0x0636, r24	; 0x800636 <__TEXT_REGION_LENGTH__+0x700636>
    1e5c:	80 93 37 06 	sts	0x0637, r24	; 0x800637 <__TEXT_REGION_LENGTH__+0x700637>
    1e60:	10 e1       	ldi	r17, 0x10	; 16
    1e62:	10 93 17 06 	sts	0x0617, r17	; 0x800617 <__TEXT_REGION_LENGTH__+0x700617>
    1e66:	10 93 01 02 	sts	0x0201, r17	; 0x800201 <__TEXT_REGION_LENGTH__+0x700201>
    1e6a:	50 e2       	ldi	r21, 0x20	; 32
    1e6c:	50 93 02 02 	sts	0x0202, r21	; 0x800202 <__TEXT_REGION_LENGTH__+0x700202>
    1e70:	46 ec       	ldi	r20, 0xC6	; 198
    1e72:	40 93 03 02 	sts	0x0203, r20	; 0x800203 <__TEXT_REGION_LENGTH__+0x700203>
    1e76:	33 e0       	ldi	r19, 0x03	; 3
    1e78:	30 93 04 02 	sts	0x0204, r19	; 0x800204 <__TEXT_REGION_LENGTH__+0x700204>
    1e7c:	c2 e0       	ldi	r28, 0x02	; 2
    1e7e:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <__TEXT_REGION_LENGTH__+0x700220>
    1e82:	c0 93 28 02 	sts	0x0228, r28	; 0x800228 <__TEXT_REGION_LENGTH__+0x700228>
    1e86:	c0 93 30 02 	sts	0x0230, r28	; 0x800230 <__TEXT_REGION_LENGTH__+0x700230>
    1e8a:	c0 93 38 02 	sts	0x0238, r28	; 0x800238 <__TEXT_REGION_LENGTH__+0x700238>
    1e8e:	89 e2       	ldi	r24, 0x29	; 41
    1e90:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
    1e94:	99 e1       	ldi	r25, 0x19	; 25
    1e96:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <__TEXT_REGION_LENGTH__+0x700229>
    1e9a:	91 e3       	ldi	r25, 0x31	; 49
    1e9c:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <__TEXT_REGION_LENGTH__+0x700231>
    1ea0:	21 e6       	ldi	r18, 0x61	; 97
    1ea2:	20 93 39 02 	sts	0x0239, r18	; 0x800239 <__TEXT_REGION_LENGTH__+0x700239>
    1ea6:	d1 e0       	ldi	r29, 0x01	; 1
    1ea8:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <__TEXT_REGION_LENGTH__+0x700222>
    1eac:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__TEXT_REGION_LENGTH__+0x700200>
    1eb0:	10 93 41 02 	sts	0x0241, r17	; 0x800241 <__TEXT_REGION_LENGTH__+0x700241>
    1eb4:	50 93 42 02 	sts	0x0242, r21	; 0x800242 <__TEXT_REGION_LENGTH__+0x700242>
    1eb8:	40 93 43 02 	sts	0x0243, r20	; 0x800243 <__TEXT_REGION_LENGTH__+0x700243>
    1ebc:	30 93 44 02 	sts	0x0244, r19	; 0x800244 <__TEXT_REGION_LENGTH__+0x700244>
    1ec0:	c0 93 60 02 	sts	0x0260, r28	; 0x800260 <__TEXT_REGION_LENGTH__+0x700260>
    1ec4:	c0 93 68 02 	sts	0x0268, r28	; 0x800268 <__TEXT_REGION_LENGTH__+0x700268>
    1ec8:	c0 93 70 02 	sts	0x0270, r28	; 0x800270 <__TEXT_REGION_LENGTH__+0x700270>
    1ecc:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <__TEXT_REGION_LENGTH__+0x700278>
    1ed0:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <__TEXT_REGION_LENGTH__+0x700261>
    1ed4:	21 e5       	ldi	r18, 0x51	; 81
    1ed6:	20 93 69 02 	sts	0x0269, r18	; 0x800269 <__TEXT_REGION_LENGTH__+0x700269>
    1eda:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <__TEXT_REGION_LENGTH__+0x700271>
    1ede:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__TEXT_REGION_LENGTH__+0x700279>
    1ee2:	d0 93 40 02 	sts	0x0240, r29	; 0x800240 <__TEXT_REGION_LENGTH__+0x700240>
    1ee6:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1eea:	81 60       	ori	r24, 0x01	; 1
    1eec:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    1ef0:	8b ea       	ldi	r24, 0xAB	; 171
    1ef2:	9a ea       	ldi	r25, 0xAA	; 170
    1ef4:	a6 e2       	ldi	r26, 0x26	; 38
    1ef6:	b2 e4       	ldi	r27, 0x42	; 66
    1ef8:	80 93 ed 29 	sts	0x29ED, r24	; 0x8029ed <sCal+0x8>
    1efc:	90 93 ee 29 	sts	0x29EE, r25	; 0x8029ee <sCal+0x9>
    1f00:	a0 93 ef 29 	sts	0x29EF, r26	; 0x8029ef <sCal+0xa>
    1f04:	b0 93 f0 29 	sts	0x29F0, r27	; 0x8029f0 <sCal+0xb>
    1f08:	47 e2       	ldi	r20, 0x27	; 39
    1f0a:	51 e1       	ldi	r21, 0x11	; 17
    1f0c:	64 eb       	ldi	r22, 0xB4	; 180
    1f0e:	72 e4       	ldi	r23, 0x42	; 66
    1f10:	40 93 f1 29 	sts	0x29F1, r20	; 0x8029f1 <sCal+0xc>
    1f14:	50 93 f2 29 	sts	0x29F2, r21	; 0x8029f2 <sCal+0xd>
    1f18:	60 93 f3 29 	sts	0x29F3, r22	; 0x8029f3 <sCal+0xe>
    1f1c:	70 93 f4 29 	sts	0x29F4, r23	; 0x8029f4 <sCal+0xf>
    1f20:	80 93 f5 29 	sts	0x29F5, r24	; 0x8029f5 <sCal+0x10>
    1f24:	90 93 f6 29 	sts	0x29F6, r25	; 0x8029f6 <sCal+0x11>
    1f28:	a0 93 f7 29 	sts	0x29F7, r26	; 0x8029f7 <sCal+0x12>
    1f2c:	b0 93 f8 29 	sts	0x29F8, r27	; 0x8029f8 <sCal+0x13>
    1f30:	4f e1       	ldi	r20, 0x1F	; 31
    1f32:	5e e8       	ldi	r21, 0x8E	; 142
    1f34:	60 eb       	ldi	r22, 0xB0	; 176
    1f36:	72 e4       	ldi	r23, 0x42	; 66
    1f38:	40 93 f9 29 	sts	0x29F9, r20	; 0x8029f9 <sCal+0x14>
    1f3c:	50 93 fa 29 	sts	0x29FA, r21	; 0x8029fa <sCal+0x15>
    1f40:	60 93 fb 29 	sts	0x29FB, r22	; 0x8029fb <sCal+0x16>
    1f44:	70 93 fc 29 	sts	0x29FC, r23	; 0x8029fc <sCal+0x17>
    1f48:	80 93 05 2a 	sts	0x2A05, r24	; 0x802a05 <sCal+0x20>
    1f4c:	90 93 06 2a 	sts	0x2A06, r25	; 0x802a06 <sCal+0x21>
    1f50:	a0 93 07 2a 	sts	0x2A07, r26	; 0x802a07 <sCal+0x22>
    1f54:	b0 93 08 2a 	sts	0x2A08, r27	; 0x802a08 <sCal+0x23>
    1f58:	4d e5       	ldi	r20, 0x5D	; 93
    1f5a:	55 e8       	ldi	r21, 0x85	; 133
    1f5c:	6f e6       	ldi	r22, 0x6F	; 111
    1f5e:	72 e4       	ldi	r23, 0x42	; 66
    1f60:	40 93 09 2a 	sts	0x2A09, r20	; 0x802a09 <sCal+0x24>
    1f64:	50 93 0a 2a 	sts	0x2A0A, r21	; 0x802a0a <sCal+0x25>
    1f68:	60 93 0b 2a 	sts	0x2A0B, r22	; 0x802a0b <sCal+0x26>
    1f6c:	70 93 0c 2a 	sts	0x2A0C, r23	; 0x802a0c <sCal+0x27>
    1f70:	80 93 0d 2a 	sts	0x2A0D, r24	; 0x802a0d <sCal+0x28>
    1f74:	90 93 0e 2a 	sts	0x2A0E, r25	; 0x802a0e <sCal+0x29>
    1f78:	a0 93 0f 2a 	sts	0x2A0F, r26	; 0x802a0f <sCal+0x2a>
    1f7c:	b0 93 10 2a 	sts	0x2A10, r27	; 0x802a10 <sCal+0x2b>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a8 e4       	ldi	r26, 0x48	; 72
    1f86:	b2 e4       	ldi	r27, 0x42	; 66
    1f88:	80 93 11 2a 	sts	0x2A11, r24	; 0x802a11 <sCal+0x2c>
    1f8c:	90 93 12 2a 	sts	0x2A12, r25	; 0x802a12 <sCal+0x2d>
    1f90:	a0 93 13 2a 	sts	0x2A13, r26	; 0x802a13 <sCal+0x2e>
    1f94:	b0 93 14 2a 	sts	0x2A14, r27	; 0x802a14 <sCal+0x2f>
    1f98:	44 e0       	ldi	r20, 0x04	; 4
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	8d ee       	ldi	r24, 0xED	; 237
    1fa2:	99 e2       	ldi	r25, 0x29	; 41
    1fa4:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    1fa8:	44 e0       	ldi	r20, 0x04	; 4
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	60 e1       	ldi	r22, 0x10	; 16
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	81 ef       	ldi	r24, 0xF1	; 241
    1fb2:	99 e2       	ldi	r25, 0x29	; 41
    1fb4:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    1fb8:	44 e0       	ldi	r20, 0x04	; 4
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	60 e2       	ldi	r22, 0x20	; 32
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	8d ee       	ldi	r24, 0xED	; 237
    1fc2:	99 e2       	ldi	r25, 0x29	; 41
    1fc4:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    1fc8:	44 e0       	ldi	r20, 0x04	; 4
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	60 e3       	ldi	r22, 0x30	; 48
    1fce:	70 e0       	ldi	r23, 0x00	; 0
    1fd0:	81 ef       	ldi	r24, 0xF1	; 241
    1fd2:	99 e2       	ldi	r25, 0x29	; 41
    1fd4:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    1fd8:	42 e0       	ldi	r20, 0x02	; 2
    1fda:	50 e0       	ldi	r21, 0x00	; 0
    1fdc:	60 e4       	ldi	r22, 0x40	; 64
    1fde:	70 e0       	ldi	r23, 0x00	; 0
    1fe0:	85 ee       	ldi	r24, 0xE5	; 229
    1fe2:	99 e2       	ldi	r25, 0x29	; 41
    1fe4:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    1fe8:	42 e0       	ldi	r20, 0x02	; 2
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	64 e4       	ldi	r22, 0x44	; 68
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	87 ee       	ldi	r24, 0xE7	; 231
    1ff2:	99 e2       	ldi	r25, 0x29	; 41
    1ff4:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    1ff8:	42 e0       	ldi	r20, 0x02	; 2
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	68 e4       	ldi	r22, 0x48	; 72
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	89 ee       	ldi	r24, 0xE9	; 233
    2002:	99 e2       	ldi	r25, 0x29	; 41
    2004:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2008:	42 e0       	ldi	r20, 0x02	; 2
    200a:	50 e0       	ldi	r21, 0x00	; 0
    200c:	6c e4       	ldi	r22, 0x4C	; 76
    200e:	70 e0       	ldi	r23, 0x00	; 0
    2010:	8b ee       	ldi	r24, 0xEB	; 235
    2012:	99 e2       	ldi	r25, 0x29	; 41
    2014:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2018:	44 e0       	ldi	r20, 0x04	; 4
    201a:	50 e0       	ldi	r21, 0x00	; 0
    201c:	60 e5       	ldi	r22, 0x50	; 80
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	85 e0       	ldi	r24, 0x05	; 5
    2022:	9a e2       	ldi	r25, 0x2A	; 42
    2024:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2028:	44 e0       	ldi	r20, 0x04	; 4
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	60 e6       	ldi	r22, 0x60	; 96
    202e:	70 e0       	ldi	r23, 0x00	; 0
    2030:	89 e0       	ldi	r24, 0x09	; 9
    2032:	9a e2       	ldi	r25, 0x2A	; 42
    2034:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2038:	44 e0       	ldi	r20, 0x04	; 4
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	60 e7       	ldi	r22, 0x70	; 112
    203e:	70 e0       	ldi	r23, 0x00	; 0
    2040:	8d e0       	ldi	r24, 0x0D	; 13
    2042:	9a e2       	ldi	r25, 0x2A	; 42
    2044:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2048:	44 e0       	ldi	r20, 0x04	; 4
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	60 e8       	ldi	r22, 0x80	; 128
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	81 e1       	ldi	r24, 0x11	; 17
    2052:	9a e2       	ldi	r25, 0x2A	; 42
    2054:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2058:	42 e0       	ldi	r20, 0x02	; 2
    205a:	50 e0       	ldi	r21, 0x00	; 0
    205c:	60 e9       	ldi	r22, 0x90	; 144
    205e:	70 e0       	ldi	r23, 0x00	; 0
    2060:	8d ef       	ldi	r24, 0xFD	; 253
    2062:	99 e2       	ldi	r25, 0x29	; 41
    2064:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2068:	42 e0       	ldi	r20, 0x02	; 2
    206a:	50 e0       	ldi	r21, 0x00	; 0
    206c:	64 e9       	ldi	r22, 0x94	; 148
    206e:	70 e0       	ldi	r23, 0x00	; 0
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	99 e2       	ldi	r25, 0x29	; 41
    2074:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2078:	42 e0       	ldi	r20, 0x02	; 2
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	68 e9       	ldi	r22, 0x98	; 152
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	9a e2       	ldi	r25, 0x2A	; 42
    2084:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2088:	42 e0       	ldi	r20, 0x02	; 2
    208a:	50 e0       	ldi	r21, 0x00	; 0
    208c:	6c e9       	ldi	r22, 0x9C	; 156
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	83 e0       	ldi	r24, 0x03	; 3
    2092:	9a e2       	ldi	r25, 0x2A	; 42
    2094:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2098:	85 e0       	ldi	r24, 0x05	; 5
    209a:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__TEXT_REGION_LENGTH__+0x700320>
    209e:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__TEXT_REGION_LENGTH__+0x700321>
    20a2:	10 93 22 03 	sts	0x0322, r17	; 0x800322 <__TEXT_REGION_LENGTH__+0x700322>
    20a6:	8e ea       	ldi	r24, 0xAE	; 174
    20a8:	95 e0       	ldi	r25, 0x05	; 5
    20aa:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <__TEXT_REGION_LENGTH__+0x700338>
    20ae:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <__TEXT_REGION_LENGTH__+0x700339>
    20b2:	10 92 01 08 	sts	0x0801, r1	; 0x800801 <__TEXT_REGION_LENGTH__+0x700801>
    20b6:	10 92 03 08 	sts	0x0803, r1	; 0x800803 <__TEXT_REGION_LENGTH__+0x700803>
    20ba:	10 92 04 08 	sts	0x0804, r1	; 0x800804 <__TEXT_REGION_LENGTH__+0x700804>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	99 e1       	ldi	r25, 0x19	; 25
    20c2:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    20c6:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    20ca:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    20ce:	10 92 07 08 	sts	0x0807, r1	; 0x800807 <__TEXT_REGION_LENGTH__+0x700807>
    20d2:	10 92 20 08 	sts	0x0820, r1	; 0x800820 <__TEXT_REGION_LENGTH__+0x700820>
    20d6:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <__TEXT_REGION_LENGTH__+0x700821>
    20da:	d0 93 00 08 	sts	0x0800, r29	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    20de:	80 ec       	ldi	r24, 0xC0	; 192
    20e0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
    20e4:	8c e0       	ldi	r24, 0x0C	; 12
    20e6:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <__TEXT_REGION_LENGTH__+0x700840>
    20ea:	10 92 41 08 	sts	0x0841, r1	; 0x800841 <__TEXT_REGION_LENGTH__+0x700841>
    20ee:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <__TEXT_REGION_LENGTH__+0x700843>
    20f2:	10 92 44 08 	sts	0x0844, r1	; 0x800844 <__TEXT_REGION_LENGTH__+0x700844>
    20f6:	10 92 46 08 	sts	0x0846, r1	; 0x800846 <__TEXT_REGION_LENGTH__+0x700846>
    20fa:	10 92 47 08 	sts	0x0847, r1	; 0x800847 <__TEXT_REGION_LENGTH__+0x700847>
    20fe:	d0 93 48 08 	sts	0x0848, r29	; 0x800848 <__TEXT_REGION_LENGTH__+0x700848>
    2102:	8f ef       	ldi	r24, 0xFF	; 255
    2104:	9f ef       	ldi	r25, 0xFF	; 255
    2106:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x700866>
    210a:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <__TEXT_REGION_LENGTH__+0x700867>
    210e:	80 e4       	ldi	r24, 0x40	; 64
    2110:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    2114:	d0 93 56 06 	sts	0x0656, r29	; 0x800656 <__TEXT_REGION_LENGTH__+0x700656>
    2118:	86 e6       	ldi	r24, 0x66	; 102
    211a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__TEXT_REGION_LENGTH__+0x700184>
    211e:	c0 93 8c 01 	sts	0x018C, r28	; 0x80018c <__TEXT_REGION_LENGTH__+0x70018c>
    2122:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2126:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    212a:	90 73       	andi	r25, 0x30	; 48
    212c:	90 32       	cpi	r25, 0x20	; 32
    212e:	21 f0       	breq	.+8      	; 0x2138 <InitCoreAnalog+0x354>
    2130:	80 73       	andi	r24, 0x30	; 48
    2132:	80 31       	cpi	r24, 0x10	; 16
    2134:	09 f0       	breq	.+2      	; 0x2138 <InitCoreAnalog+0x354>
    2136:	47 c0       	rjmp	.+142    	; 0x21c6 <InitCoreAnalog+0x3e2>
    2138:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    213c:	80 73       	andi	r24, 0x30	; 48
    213e:	80 31       	cpi	r24, 0x10	; 16
    2140:	19 f0       	breq	.+6      	; 0x2148 <InitCoreAnalog+0x364>
    2142:	8b e0       	ldi	r24, 0x0B	; 11
    2144:	92 e2       	ldi	r25, 0x22	; 34
    2146:	02 c0       	rjmp	.+4      	; 0x214c <InitCoreAnalog+0x368>
    2148:	86 e0       	ldi	r24, 0x06	; 6
    214a:	92 e2       	ldi	r25, 0x22	; 34
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4e ef       	ldi	r20, 0xFE	; 254
    2152:	58 e0       	ldi	r21, 0x08	; 8
    2154:	68 e3       	ldi	r22, 0x38	; 56
    2156:	7e e0       	ldi	r23, 0x0E	; 14
    2158:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    215c:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2160:	80 73       	andi	r24, 0x30	; 48
    2162:	80 31       	cpi	r24, 0x10	; 16
    2164:	19 f0       	breq	.+6      	; 0x216c <InitCoreAnalog+0x388>
    2166:	85 e1       	ldi	r24, 0x15	; 21
    2168:	92 e2       	ldi	r25, 0x22	; 34
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <InitCoreAnalog+0x38c>
    216c:	80 e1       	ldi	r24, 0x10	; 16
    216e:	92 e2       	ldi	r25, 0x22	; 34
    2170:	21 e0       	ldi	r18, 0x01	; 1
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	50 e0       	ldi	r21, 0x00	; 0
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	7e e0       	ldi	r23, 0x0E	; 14
    217c:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2180:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2184:	80 73       	andi	r24, 0x30	; 48
    2186:	80 31       	cpi	r24, 0x10	; 16
    2188:	19 f0       	breq	.+6      	; 0x2190 <InitCoreAnalog+0x3ac>
    218a:	8f e1       	ldi	r24, 0x1F	; 31
    218c:	92 e2       	ldi	r25, 0x22	; 34
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <InitCoreAnalog+0x3b0>
    2190:	8a e1       	ldi	r24, 0x1A	; 26
    2192:	92 e2       	ldi	r25, 0x22	; 34
    2194:	21 e0       	ldi	r18, 0x01	; 1
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	66 ea       	ldi	r22, 0xA6	; 166
    219e:	7d e0       	ldi	r23, 0x0D	; 13
    21a0:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    21a4:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    21a8:	80 73       	andi	r24, 0x30	; 48
    21aa:	80 31       	cpi	r24, 0x10	; 16
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <InitCoreAnalog+0x3d0>
    21ae:	89 e2       	ldi	r24, 0x29	; 41
    21b0:	92 e2       	ldi	r25, 0x22	; 34
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <InitCoreAnalog+0x3d4>
    21b4:	84 e2       	ldi	r24, 0x24	; 36
    21b6:	92 e2       	ldi	r25, 0x22	; 34
    21b8:	21 e0       	ldi	r18, 0x01	; 1
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	68 e6       	ldi	r22, 0x68	; 104
    21c2:	7d e0       	ldi	r23, 0x0D	; 13
    21c4:	ad c0       	rjmp	.+346    	; 0x2320 <InitCoreAnalog+0x53c>
    21c6:	21 e0       	ldi	r18, 0x01	; 1
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	6e e0       	ldi	r22, 0x0E	; 14
    21d0:	7d e0       	ldi	r23, 0x0D	; 13
    21d2:	8e e2       	ldi	r24, 0x2E	; 46
    21d4:	92 e2       	ldi	r25, 0x22	; 34
    21d6:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    21da:	21 e0       	ldi	r18, 0x01	; 1
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	64 eb       	ldi	r22, 0xB4	; 180
    21e4:	7c e0       	ldi	r23, 0x0C	; 12
    21e6:	83 e3       	ldi	r24, 0x33	; 51
    21e8:	92 e2       	ldi	r25, 0x22	; 34
    21ea:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    21ee:	21 e0       	ldi	r18, 0x01	; 1
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	66 e4       	ldi	r22, 0x46	; 70
    21f8:	7c e0       	ldi	r23, 0x0C	; 12
    21fa:	88 e3       	ldi	r24, 0x38	; 56
    21fc:	92 e2       	ldi	r25, 0x22	; 34
    21fe:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2202:	25 e0       	ldi	r18, 0x05	; 5
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	50 e0       	ldi	r21, 0x00	; 0
    220a:	60 ed       	ldi	r22, 0xD0	; 208
    220c:	7b e0       	ldi	r23, 0x0B	; 11
    220e:	8d e3       	ldi	r24, 0x3D	; 61
    2210:	92 e2       	ldi	r25, 0x22	; 34
    2212:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2216:	21 e0       	ldi	r18, 0x01	; 1
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	66 e7       	ldi	r22, 0x76	; 118
    2220:	7b e0       	ldi	r23, 0x0B	; 11
    2222:	82 e4       	ldi	r24, 0x42	; 66
    2224:	92 e2       	ldi	r25, 0x22	; 34
    2226:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    222a:	21 e0       	ldi	r18, 0x01	; 1
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	6c e1       	ldi	r22, 0x1C	; 28
    2234:	7b e0       	ldi	r23, 0x0B	; 11
    2236:	87 e4       	ldi	r24, 0x47	; 71
    2238:	92 e2       	ldi	r25, 0x22	; 34
    223a:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    223e:	21 e0       	ldi	r18, 0x01	; 1
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	6e ea       	ldi	r22, 0xAE	; 174
    2248:	7a e0       	ldi	r23, 0x0A	; 10
    224a:	8c e4       	ldi	r24, 0x4C	; 76
    224c:	92 e2       	ldi	r25, 0x22	; 34
    224e:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2252:	25 e0       	ldi	r18, 0x05	; 5
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	68 e3       	ldi	r22, 0x38	; 56
    225c:	7a e0       	ldi	r23, 0x0A	; 10
    225e:	81 e5       	ldi	r24, 0x51	; 81
    2260:	92 e2       	ldi	r25, 0x22	; 34
    2262:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2266:	21 e0       	ldi	r18, 0x01	; 1
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	7a e0       	ldi	r23, 0x0A	; 10
    2272:	86 e5       	ldi	r24, 0x56	; 86
    2274:	92 e2       	ldi	r25, 0x22	; 34
    2276:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    227a:	2a e0       	ldi	r18, 0x0A	; 10
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	50 e0       	ldi	r21, 0x00	; 0
    2282:	6e eb       	ldi	r22, 0xBE	; 190
    2284:	79 e0       	ldi	r23, 0x09	; 9
    2286:	8b e5       	ldi	r24, 0x5B	; 91
    2288:	92 e2       	ldi	r25, 0x22	; 34
    228a:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    228e:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2292:	80 73       	andi	r24, 0x30	; 48
    2294:	09 f0       	breq	.+2      	; 0x2298 <InitCoreAnalog+0x4b4>
    2296:	46 c0       	rjmp	.+140    	; 0x2324 <InitCoreAnalog+0x540>
    2298:	21 e0       	ldi	r18, 0x01	; 1
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4e ef       	ldi	r20, 0xFE	; 254
    229e:	58 e0       	ldi	r21, 0x08	; 8
    22a0:	65 e9       	ldi	r22, 0x95	; 149
    22a2:	7e e0       	ldi	r23, 0x0E	; 14
    22a4:	86 e0       	ldi	r24, 0x06	; 6
    22a6:	92 e2       	ldi	r25, 0x22	; 34
    22a8:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    22ac:	21 e0       	ldi	r18, 0x01	; 1
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	7e e0       	ldi	r23, 0x0E	; 14
    22b8:	80 e1       	ldi	r24, 0x10	; 16
    22ba:	92 e2       	ldi	r25, 0x22	; 34
    22bc:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    22c0:	21 e0       	ldi	r18, 0x01	; 1
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	66 ea       	ldi	r22, 0xA6	; 166
    22ca:	7d e0       	ldi	r23, 0x0D	; 13
    22cc:	8a e1       	ldi	r24, 0x1A	; 26
    22ce:	92 e2       	ldi	r25, 0x22	; 34
    22d0:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    22d4:	21 e0       	ldi	r18, 0x01	; 1
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	68 e6       	ldi	r22, 0x68	; 104
    22de:	7d e0       	ldi	r23, 0x0D	; 13
    22e0:	84 e2       	ldi	r24, 0x24	; 36
    22e2:	92 e2       	ldi	r25, 0x22	; 34
    22e4:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    22e8:	2a e0       	ldi	r18, 0x0A	; 10
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	66 e8       	ldi	r22, 0x86	; 134
    22f2:	79 e0       	ldi	r23, 0x09	; 9
    22f4:	80 e6       	ldi	r24, 0x60	; 96
    22f6:	92 e2       	ldi	r25, 0x22	; 34
    22f8:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    22fc:	25 e0       	ldi	r18, 0x05	; 5
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	65 e4       	ldi	r22, 0x45	; 69
    2306:	79 e0       	ldi	r23, 0x09	; 9
    2308:	85 e6       	ldi	r24, 0x65	; 101
    230a:	92 e2       	ldi	r25, 0x22	; 34
    230c:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2310:	25 e0       	ldi	r18, 0x05	; 5
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	64 e0       	ldi	r22, 0x04	; 4
    231a:	79 e0       	ldi	r23, 0x09	; 9
    231c:	8a e6       	ldi	r24, 0x6A	; 106
    231e:	92 e2       	ldi	r25, 0x22	; 34
    2320:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2324:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2328:	80 73       	andi	r24, 0x30	; 48
    232a:	80 31       	cpi	r24, 0x10	; 16
    232c:	29 f0       	breq	.+10     	; 0x2338 <InitCoreAnalog+0x554>
    232e:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2332:	80 73       	andi	r24, 0x30	; 48
    2334:	80 32       	cpi	r24, 0x20	; 32
    2336:	29 f4       	brne	.+10     	; 0x2342 <InitCoreAnalog+0x55e>
    2338:	86 e6       	ldi	r24, 0x66	; 102
    233a:	96 ea       	ldi	r25, 0xA6	; 166
    233c:	a7 e5       	ldi	r26, 0x57	; 87
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	04 c0       	rjmp	.+8      	; 0x234a <InitCoreAnalog+0x566>
    2342:	86 e6       	ldi	r24, 0x66	; 102
    2344:	96 e6       	ldi	r25, 0x66	; 102
    2346:	aa e4       	ldi	r26, 0x4A	; 74
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <sCC2MinSpeed>
    234e:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <sCC2MinSpeed+0x1>
    2352:	a0 93 e2 28 	sts	0x28E2, r26	; 0x8028e2 <sCC2MinSpeed+0x2>
    2356:	b0 93 e3 28 	sts	0x28E3, r27	; 0x8028e3 <sCC2MinSpeed+0x3>
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	08 95       	ret

00002362 <CalibrateChannel>:
    2362:	2f 92       	push	r2
    2364:	3f 92       	push	r3
    2366:	4f 92       	push	r4
    2368:	5f 92       	push	r5
    236a:	6f 92       	push	r6
    236c:	7f 92       	push	r7
    236e:	8f 92       	push	r8
    2370:	9f 92       	push	r9
    2372:	af 92       	push	r10
    2374:	bf 92       	push	r11
    2376:	cf 92       	push	r12
    2378:	df 92       	push	r13
    237a:	ef 92       	push	r14
    237c:	ff 92       	push	r15
    237e:	0f 93       	push	r16
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	c8 5a       	subi	r28, 0xA8	; 168
    238c:	d1 09       	sbc	r29, r1
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	de bf       	out	0x3e, r29	; 62
    2392:	1c 01       	movw	r2, r24
    2394:	80 e6       	ldi	r24, 0x60	; 96
    2396:	e4 e6       	ldi	r30, 0x64	; 100
    2398:	f0 e2       	ldi	r31, 0x20	; 32
    239a:	de 01       	movw	r26, r28
    239c:	11 96       	adiw	r26, 0x01	; 1
    239e:	01 90       	ld	r0, Z+
    23a0:	0d 92       	st	X+, r0
    23a2:	8a 95       	dec	r24
    23a4:	e1 f7       	brne	.-8      	; 0x239e <CalibrateChannel+0x3c>
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	80 93 67 29 	sts	0x2967, r24	; 0x802967 <sTakeSnapshot>
    23ac:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>
    23b0:	81 11       	cpse	r24, r1
    23b2:	fc cf       	rjmp	.-8      	; 0x23ac <CalibrateChannel+0x4a>
    23b4:	80 91 c9 29 	lds	r24, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5d>
    23b8:	90 91 ca 29 	lds	r25, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5e>
    23bc:	a0 91 cb 29 	lds	r26, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x5f>
    23c0:	b0 91 cc 29 	lds	r27, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x60>
    23c4:	b1 01       	movw	r22, r2
    23c6:	85 36       	cpi	r24, 0x65	; 101
    23c8:	91 05       	cpc	r25, r1
    23ca:	a1 05       	cpc	r26, r1
    23cc:	b1 05       	cpc	r27, r1
    23ce:	18 f0       	brcs	.+6      	; 0x23d6 <CalibrateChannel+0x74>
    23d0:	85 e7       	ldi	r24, 0x75	; 117
    23d2:	92 e2       	ldi	r25, 0x22	; 34
    23d4:	20 c2       	rjmp	.+1088   	; 0x2816 <CalibrateChannel+0x4b4>
    23d6:	88 eb       	ldi	r24, 0xB8	; 184
    23d8:	92 e2       	ldi	r25, 0x22	; 34
    23da:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
    23de:	0c e0       	ldi	r16, 0x0C	; 12
    23e0:	29 ef       	ldi	r18, 0xF9	; 249
    23e2:	e2 2e       	mov	r14, r18
    23e4:	22 e2       	ldi	r18, 0x22	; 34
    23e6:	f2 2e       	mov	r15, r18
    23e8:	b1 01       	movw	r22, r2
    23ea:	81 ed       	ldi	r24, 0xD1	; 209
    23ec:	92 e2       	ldi	r25, 0x22	; 34
    23ee:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
    23f2:	10 e0       	ldi	r17, 0x00	; 0
    23f4:	81 2f       	mov	r24, r17
    23f6:	01 2e       	mov	r0, r17
    23f8:	00 0c       	add	r0, r0
    23fa:	99 0b       	sbc	r25, r25
    23fc:	20 91 68 06 	lds	r18, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2400:	30 91 68 06 	lds	r19, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2404:	30 73       	andi	r19, 0x30	; 48
    2406:	30 32       	cpi	r19, 0x20	; 32
    2408:	31 f0       	breq	.+12     	; 0x2416 <CalibrateChannel+0xb4>
    240a:	20 73       	andi	r18, 0x30	; 48
    240c:	20 31       	cpi	r18, 0x10	; 16
    240e:	19 f0       	breq	.+6      	; 0x2416 <CalibrateChannel+0xb4>
    2410:	28 e0       	ldi	r18, 0x08	; 8
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	02 c0       	rjmp	.+4      	; 0x241a <CalibrateChannel+0xb8>
    2416:	24 e0       	ldi	r18, 0x04	; 4
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	82 17       	cp	r24, r18
    241c:	93 07       	cpc	r25, r19
    241e:	e4 f4       	brge	.+56     	; 0x2458 <CalibrateChannel+0xf6>
    2420:	08 9f       	mul	r16, r24
    2422:	f0 01       	movw	r30, r0
    2424:	09 9f       	mul	r16, r25
    2426:	f0 0d       	add	r31, r0
    2428:	11 24       	eor	r1, r1
    242a:	21 e0       	ldi	r18, 0x01	; 1
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	2c 0f       	add	r18, r28
    2430:	3d 1f       	adc	r19, r29
    2432:	e2 0f       	add	r30, r18
    2434:	f3 1f       	adc	r31, r19
    2436:	21 81       	ldd	r18, Z+1	; 0x01
    2438:	2f 93       	push	r18
    243a:	20 81       	ld	r18, Z
    243c:	2f 93       	push	r18
    243e:	01 96       	adiw	r24, 0x01	; 1
    2440:	9f 93       	push	r25
    2442:	8f 93       	push	r24
    2444:	ff 92       	push	r15
    2446:	ef 92       	push	r14
    2448:	3f 92       	push	r3
    244a:	2f 92       	push	r2
    244c:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    2450:	1f 5f       	subi	r17, 0xFF	; 255
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	ce cf       	rjmp	.-100    	; 0x23f4 <CalibrateChannel+0x92>
    2458:	b1 01       	movw	r22, r2
    245a:	85 e0       	ldi	r24, 0x05	; 5
    245c:	93 e2       	ldi	r25, 0x23	; 35
    245e:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
    2462:	0e 94 a5 2c 	call	0x594a	; 0x594a <CanRead_Ctrl>
    2466:	88 23       	and	r24, r24
    2468:	19 f0       	breq	.+6      	; 0x2470 <CalibrateChannel+0x10e>
    246a:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
    246e:	f9 cf       	rjmp	.-14     	; 0x2462 <CalibrateChannel+0x100>
    2470:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
    2474:	9f ec       	ldi	r25, 0xCF	; 207
    2476:	d9 2e       	mov	r13, r25
    2478:	d8 0e       	add	r13, r24
    247a:	b1 01       	movw	r22, r2
    247c:	87 e7       	ldi	r24, 0x77	; 119
    247e:	94 e2       	ldi	r25, 0x24	; 36
    2480:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
    2484:	d1 16       	cp	r13, r17
    2486:	14 f4       	brge	.+4      	; 0x248c <CalibrateChannel+0x12a>
    2488:	d7 fe       	sbrs	r13, 7
    248a:	06 c0       	rjmp	.+12     	; 0x2498 <CalibrateChannel+0x136>
    248c:	b1 01       	movw	r22, r2
    248e:	89 e0       	ldi	r24, 0x09	; 9
    2490:	93 e2       	ldi	r25, 0x23	; 35
    2492:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
    2496:	a8 cf       	rjmp	.-176    	; 0x23e8 <CalibrateChannel+0x86>
    2498:	ad 2d       	mov	r26, r13
    249a:	0d 2c       	mov	r0, r13
    249c:	00 0c       	add	r0, r0
    249e:	bb 0b       	sbc	r27, r27
    24a0:	c3 56       	subi	r28, 0x63	; 99
    24a2:	df 4f       	sbci	r29, 0xFF	; 255
    24a4:	a8 83       	st	Y, r26
    24a6:	b9 83       	std	Y+1, r27	; 0x01
    24a8:	cd 59       	subi	r28, 0x9D	; 157
    24aa:	d0 40       	sbci	r29, 0x00	; 0
    24ac:	bd 2d       	mov	r27, r13
    24ae:	ec e0       	ldi	r30, 0x0C	; 12
    24b0:	be 02       	muls	r27, r30
    24b2:	80 01       	movw	r16, r0
    24b4:	11 24       	eor	r1, r1
    24b6:	e1 e0       	ldi	r30, 0x01	; 1
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	ec 0f       	add	r30, r28
    24bc:	fd 1f       	adc	r31, r29
    24be:	e0 0f       	add	r30, r16
    24c0:	f1 1f       	adc	r31, r17
    24c2:	20 81       	ld	r18, Z
    24c4:	cd 55       	subi	r28, 0x5D	; 93
    24c6:	df 4f       	sbci	r29, 0xFF	; 255
    24c8:	28 83       	st	Y, r18
    24ca:	c3 5a       	subi	r28, 0xA3	; 163
    24cc:	d0 40       	sbci	r29, 0x00	; 0
    24ce:	31 81       	ldd	r19, Z+1	; 0x01
    24d0:	cc 55       	subi	r28, 0x5C	; 92
    24d2:	df 4f       	sbci	r29, 0xFF	; 255
    24d4:	38 83       	st	Y, r19
    24d6:	c4 5a       	subi	r28, 0xA4	; 164
    24d8:	d0 40       	sbci	r29, 0x00	; 0
    24da:	3f 93       	push	r19
    24dc:	2f 93       	push	r18
    24de:	8a e2       	ldi	r24, 0x2A	; 42
    24e0:	93 e2       	ldi	r25, 0x23	; 35
    24e2:	9f 93       	push	r25
    24e4:	8f 93       	push	r24
    24e6:	3f 92       	push	r3
    24e8:	2f 92       	push	r2
    24ea:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    24ee:	1f 92       	push	r1
    24f0:	85 e0       	ldi	r24, 0x05	; 5
    24f2:	8f 93       	push	r24
    24f4:	83 e4       	ldi	r24, 0x43	; 67
    24f6:	93 e2       	ldi	r25, 0x23	; 35
    24f8:	9f 93       	push	r25
    24fa:	8f 93       	push	r24
    24fc:	3f 92       	push	r3
    24fe:	2f 92       	push	r2
    2500:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    2504:	cd bf       	out	0x3d, r28	; 61
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	c1 57       	subi	r28, 0x71	; 113
    250a:	df 4f       	sbci	r29, 0xFF	; 255
    250c:	18 82       	st	Y, r1
    250e:	cf 58       	subi	r28, 0x8F	; 143
    2510:	d0 40       	sbci	r29, 0x00	; 0
    2512:	9d 2d       	mov	r25, r13
    2514:	91 70       	andi	r25, 0x01	; 1
    2516:	cb 56       	subi	r28, 0x6B	; 107
    2518:	df 4f       	sbci	r29, 0xFF	; 255
    251a:	98 83       	st	Y, r25
    251c:	c5 59       	subi	r28, 0x95	; 149
    251e:	d0 40       	sbci	r29, 0x00	; 0
    2520:	a1 e0       	ldi	r26, 0x01	; 1
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	ac 0f       	add	r26, r28
    2526:	bd 1f       	adc	r27, r29
    2528:	0a 0f       	add	r16, r26
    252a:	1b 1f       	adc	r17, r27
    252c:	f8 01       	movw	r30, r16
    252e:	32 96       	adiw	r30, 0x02	; 2
    2530:	c9 56       	subi	r28, 0x69	; 105
    2532:	df 4f       	sbci	r29, 0xFF	; 255
    2534:	e8 83       	st	Y, r30
    2536:	f9 83       	std	Y+1, r31	; 0x01
    2538:	c7 59       	subi	r28, 0x97	; 151
    253a:	d0 40       	sbci	r29, 0x00	; 0
    253c:	98 01       	movw	r18, r16
    253e:	2c 5f       	subi	r18, 0xFC	; 252
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	c7 56       	subi	r28, 0x67	; 103
    2544:	df 4f       	sbci	r29, 0xFF	; 255
    2546:	28 83       	st	Y, r18
    2548:	39 83       	std	Y+1, r19	; 0x01
    254a:	c9 59       	subi	r28, 0x99	; 153
    254c:	d0 40       	sbci	r29, 0x00	; 0
    254e:	0e 94 a5 2c 	call	0x594a	; 0x594a <CanRead_Ctrl>
    2552:	88 23       	and	r24, r24
    2554:	19 f0       	breq	.+6      	; 0x255c <CalibrateChannel+0x1fa>
    2556:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
    255a:	f9 cf       	rjmp	.-14     	; 0x254e <CalibrateChannel+0x1ec>
    255c:	cb 56       	subi	r28, 0x6B	; 107
    255e:	df 4f       	sbci	r29, 0xFF	; 255
    2560:	38 81       	ld	r19, Y
    2562:	c5 59       	subi	r28, 0x95	; 149
    2564:	d0 40       	sbci	r29, 0x00	; 0
    2566:	31 11       	cpse	r19, r1
    2568:	03 c0       	rjmp	.+6      	; 0x2570 <CalibrateChannel+0x20e>
    256a:	82 e7       	ldi	r24, 0x72	; 114
    256c:	92 e2       	ldi	r25, 0x22	; 34
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <CalibrateChannel+0x212>
    2570:	8f e6       	ldi	r24, 0x6F	; 111
    2572:	92 e2       	ldi	r25, 0x22	; 34
    2574:	c1 57       	subi	r28, 0x71	; 113
    2576:	df 4f       	sbci	r29, 0xFF	; 255
    2578:	a8 81       	ld	r26, Y
    257a:	cf 58       	subi	r28, 0x8F	; 143
    257c:	d0 40       	sbci	r29, 0x00	; 0
    257e:	0a 2f       	mov	r16, r26
    2580:	aa 0f       	add	r26, r26
    2582:	11 0b       	sbc	r17, r17
    2584:	9f 93       	push	r25
    2586:	8f 93       	push	r24
    2588:	c8 01       	movw	r24, r16
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	9f 93       	push	r25
    258e:	8f 93       	push	r24
    2590:	a1 e7       	ldi	r26, 0x71	; 113
    2592:	b3 e2       	ldi	r27, 0x23	; 35
    2594:	bf 93       	push	r27
    2596:	af 93       	push	r26
    2598:	3f 92       	push	r3
    259a:	2f 92       	push	r2
    259c:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	a9 01       	movw	r20, r18
    25aa:	c8 55       	subi	r28, 0x58	; 88
    25ac:	df 4f       	sbci	r29, 0xFF	; 255
    25ae:	28 83       	st	Y, r18
    25b0:	c8 5a       	subi	r28, 0xA8	; 168
    25b2:	d0 40       	sbci	r29, 0x00	; 0
    25b4:	cb 55       	subi	r28, 0x5B	; 91
    25b6:	df 4f       	sbci	r29, 0xFF	; 255
    25b8:	38 83       	st	Y, r19
    25ba:	c5 5a       	subi	r28, 0xA5	; 165
    25bc:	d0 40       	sbci	r29, 0x00	; 0
    25be:	ca 55       	subi	r28, 0x5A	; 90
    25c0:	df 4f       	sbci	r29, 0xFF	; 255
    25c2:	48 83       	st	Y, r20
    25c4:	c6 5a       	subi	r28, 0xA6	; 166
    25c6:	d0 40       	sbci	r29, 0x00	; 0
    25c8:	c9 55       	subi	r28, 0x59	; 89
    25ca:	df 4f       	sbci	r29, 0xFF	; 255
    25cc:	58 83       	st	Y, r21
    25ce:	c7 5a       	subi	r28, 0xA7	; 167
    25d0:	d0 40       	sbci	r29, 0x00	; 0
    25d2:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
    25d6:	f8 2e       	mov	r15, r24
    25d8:	08 2e       	mov	r0, r24
    25da:	00 0c       	add	r0, r0
    25dc:	99 0b       	sbc	r25, r25
    25de:	bc 01       	movw	r22, r24
    25e0:	60 53       	subi	r22, 0x30	; 48
    25e2:	71 09       	sbc	r23, r1
    25e4:	c8 55       	subi	r28, 0x58	; 88
    25e6:	df 4f       	sbci	r29, 0xFF	; 255
    25e8:	28 81       	ld	r18, Y
    25ea:	c8 5a       	subi	r28, 0xA8	; 168
    25ec:	d0 40       	sbci	r29, 0x00	; 0
    25ee:	cb 55       	subi	r28, 0x5B	; 91
    25f0:	df 4f       	sbci	r29, 0xFF	; 255
    25f2:	38 81       	ld	r19, Y
    25f4:	c5 5a       	subi	r28, 0xA5	; 165
    25f6:	d0 40       	sbci	r29, 0x00	; 0
    25f8:	ca 55       	subi	r28, 0x5A	; 90
    25fa:	df 4f       	sbci	r29, 0xFF	; 255
    25fc:	48 81       	ld	r20, Y
    25fe:	c6 5a       	subi	r28, 0xA6	; 166
    2600:	d0 40       	sbci	r29, 0x00	; 0
    2602:	c9 55       	subi	r28, 0x59	; 89
    2604:	df 4f       	sbci	r29, 0xFF	; 255
    2606:	58 81       	ld	r21, Y
    2608:	c7 5a       	subi	r28, 0xA7	; 167
    260a:	d0 40       	sbci	r29, 0x00	; 0
    260c:	6a 30       	cpi	r22, 0x0A	; 10
    260e:	71 05       	cpc	r23, r1
    2610:	68 f5       	brcc	.+90     	; 0x266c <CalibrateChannel+0x30a>
    2612:	b1 01       	movw	r22, r2
    2614:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    2618:	aa e0       	ldi	r26, 0x0A	; 10
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	c8 55       	subi	r28, 0x58	; 88
    261e:	df 4f       	sbci	r29, 0xFF	; 255
    2620:	28 81       	ld	r18, Y
    2622:	c8 5a       	subi	r28, 0xA8	; 168
    2624:	d0 40       	sbci	r29, 0x00	; 0
    2626:	cb 55       	subi	r28, 0x5B	; 91
    2628:	df 4f       	sbci	r29, 0xFF	; 255
    262a:	38 81       	ld	r19, Y
    262c:	c5 5a       	subi	r28, 0xA5	; 165
    262e:	d0 40       	sbci	r29, 0x00	; 0
    2630:	ca 55       	subi	r28, 0x5A	; 90
    2632:	df 4f       	sbci	r29, 0xFF	; 255
    2634:	48 81       	ld	r20, Y
    2636:	c6 5a       	subi	r28, 0xA6	; 166
    2638:	d0 40       	sbci	r29, 0x00	; 0
    263a:	c9 55       	subi	r28, 0x59	; 89
    263c:	df 4f       	sbci	r29, 0xFF	; 255
    263e:	58 81       	ld	r21, Y
    2640:	c7 5a       	subi	r28, 0xA7	; 167
    2642:	d0 40       	sbci	r29, 0x00	; 0
    2644:	0e 94 56 36 	call	0x6cac	; 0x6cac <__muluhisi3>
    2648:	cf 2c       	mov	r12, r15
    264a:	ff 0c       	add	r15, r15
    264c:	dd 08       	sbc	r13, r13
    264e:	ee 08       	sbc	r14, r14
    2650:	ff 08       	sbc	r15, r15
    2652:	4b 01       	movw	r8, r22
    2654:	5c 01       	movw	r10, r24
    2656:	8c 0c       	add	r8, r12
    2658:	9d 1c       	adc	r9, r13
    265a:	ae 1c       	adc	r10, r14
    265c:	bf 1c       	adc	r11, r15
    265e:	a5 01       	movw	r20, r10
    2660:	94 01       	movw	r18, r8
    2662:	20 53       	subi	r18, 0x30	; 48
    2664:	31 09       	sbc	r19, r1
    2666:	41 09       	sbc	r20, r1
    2668:	51 09       	sbc	r21, r1
    266a:	9f cf       	rjmp	.-194    	; 0x25aa <CalibrateChannel+0x248>
    266c:	ca 01       	movw	r24, r20
    266e:	b9 01       	movw	r22, r18
    2670:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	4a e7       	ldi	r20, 0x7A	; 122
    267a:	54 e4       	ldi	r21, 0x44	; 68
    267c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    2680:	4b 01       	movw	r8, r22
    2682:	5c 01       	movw	r10, r24
    2684:	00 0f       	add	r16, r16
    2686:	11 1f       	adc	r17, r17
    2688:	00 0f       	add	r16, r16
    268a:	11 1f       	adc	r17, r17
    268c:	e1 e6       	ldi	r30, 0x61	; 97
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	ec 0f       	add	r30, r28
    2692:	fd 1f       	adc	r31, r29
    2694:	e0 0f       	add	r30, r16
    2696:	f1 1f       	adc	r31, r17
    2698:	88 2d       	mov	r24, r8
    269a:	99 2d       	mov	r25, r9
    269c:	aa 2d       	mov	r26, r10
    269e:	bb 2d       	mov	r27, r11
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	80 93 67 29 	sts	0x2967, r24	; 0x802967 <sTakeSnapshot>
    26ae:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>
    26b2:	81 11       	cpse	r24, r1
    26b4:	fc cf       	rjmp	.-8      	; 0x26ae <CalibrateChannel+0x34c>
    26b6:	c9 56       	subi	r28, 0x69	; 105
    26b8:	df 4f       	sbci	r29, 0xFF	; 255
    26ba:	a8 81       	ld	r26, Y
    26bc:	b9 81       	ldd	r27, Y+1	; 0x01
    26be:	c7 59       	subi	r28, 0x97	; 151
    26c0:	d0 40       	sbci	r29, 0x00	; 0
    26c2:	ed 91       	ld	r30, X+
    26c4:	fc 91       	ld	r31, X
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e8       	ldi	r20, 0x80	; 128
    26d8:	57 e3       	ldi	r21, 0x37	; 55
    26da:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    26de:	6b 01       	movw	r12, r22
    26e0:	7c 01       	movw	r14, r24
    26e2:	e5 e7       	ldi	r30, 0x75	; 117
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	ec 0f       	add	r30, r28
    26e8:	fd 1f       	adc	r31, r29
    26ea:	e0 0f       	add	r30, r16
    26ec:	f1 1f       	adc	r31, r17
    26ee:	60 83       	st	Z, r22
    26f0:	71 83       	std	Z+1, r23	; 0x01
    26f2:	82 83       	std	Z+2, r24	; 0x02
    26f4:	93 83       	std	Z+3, r25	; 0x03
    26f6:	c7 56       	subi	r28, 0x67	; 103
    26f8:	df 4f       	sbci	r29, 0xFF	; 255
    26fa:	e8 81       	ld	r30, Y
    26fc:	f9 81       	ldd	r31, Y+1	; 0x01
    26fe:	c9 59       	subi	r28, 0x99	; 153
    2700:	d0 40       	sbci	r29, 0x00	; 0
    2702:	01 90       	ld	r0, Z+
    2704:	f0 81       	ld	r31, Z
    2706:	e0 2d       	mov	r30, r0
    2708:	cd 56       	subi	r28, 0x6D	; 109
    270a:	df 4f       	sbci	r29, 0xFF	; 255
    270c:	e8 83       	st	Y, r30
    270e:	f9 83       	std	Y+1, r31	; 0x01
    2710:	c3 59       	subi	r28, 0x93	; 147
    2712:	d0 40       	sbci	r29, 0x00	; 0
    2714:	40 80       	ld	r4, Z
    2716:	51 80       	ldd	r5, Z+1	; 0x01
    2718:	62 80       	ldd	r6, Z+2	; 0x02
    271a:	73 80       	ldd	r7, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a e7       	ldi	r20, 0x7A	; 122
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    2728:	9f 93       	push	r25
    272a:	8f 93       	push	r24
    272c:	7f 93       	push	r23
    272e:	6f 93       	push	r22
    2730:	a3 01       	movw	r20, r6
    2732:	92 01       	movw	r18, r4
    2734:	c7 01       	movw	r24, r14
    2736:	b6 01       	movw	r22, r12
    2738:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    273c:	9f 93       	push	r25
    273e:	8f 93       	push	r24
    2740:	7f 93       	push	r23
    2742:	6f 93       	push	r22
    2744:	bf 92       	push	r11
    2746:	af 92       	push	r10
    2748:	9f 92       	push	r9
    274a:	8f 92       	push	r8
    274c:	a6 ea       	ldi	r26, 0xA6	; 166
    274e:	b3 e2       	ldi	r27, 0x23	; 35
    2750:	bf 93       	push	r27
    2752:	af 93       	push	r26
    2754:	3f 92       	push	r3
    2756:	2f 92       	push	r2
    2758:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    275c:	cd bf       	out	0x3d, r28	; 61
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
    2764:	18 2f       	mov	r17, r24
    2766:	89 37       	cpi	r24, 0x79	; 121
    2768:	09 f0       	breq	.+2      	; 0x276c <CalibrateChannel+0x40a>
    276a:	58 c0       	rjmp	.+176    	; 0x281c <CalibrateChannel+0x4ba>
    276c:	81 2f       	mov	r24, r17
    276e:	01 2e       	mov	r0, r17
    2770:	00 0c       	add	r0, r0
    2772:	99 0b       	sbc	r25, r25
    2774:	9f 93       	push	r25
    2776:	1f 93       	push	r17
    2778:	8a ef       	ldi	r24, 0xFA	; 250
    277a:	93 e2       	ldi	r25, 0x23	; 35
    277c:	9f 93       	push	r25
    277e:	8f 93       	push	r24
    2780:	3f 92       	push	r3
    2782:	2f 92       	push	r2
    2784:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	1b 31       	cpi	r17, 0x1B	; 27
    2796:	09 f4       	brne	.+2      	; 0x279a <CalibrateChannel+0x438>
    2798:	8c c2       	rjmp	.+1304   	; 0x2cb2 <CalibrateChannel+0x950>
    279a:	1f 7d       	andi	r17, 0xDF	; 223
    279c:	c1 57       	subi	r28, 0x71	; 113
    279e:	df 4f       	sbci	r29, 0xFF	; 255
    27a0:	38 81       	ld	r19, Y
    27a2:	cf 58       	subi	r28, 0x8F	; 143
    27a4:	d0 40       	sbci	r29, 0x00	; 0
    27a6:	19 35       	cpi	r17, 0x59	; 89
    27a8:	09 f0       	breq	.+2      	; 0x27ac <CalibrateChannel+0x44a>
    27aa:	4e c0       	rjmp	.+156    	; 0x2848 <CalibrateChannel+0x4e6>
    27ac:	3f 5f       	subi	r19, 0xFF	; 255
    27ae:	c1 57       	subi	r28, 0x71	; 113
    27b0:	df 4f       	sbci	r29, 0xFF	; 255
    27b2:	38 83       	st	Y, r19
    27b4:	cf 58       	subi	r28, 0x8F	; 143
    27b6:	d0 40       	sbci	r29, 0x00	; 0
    27b8:	35 30       	cpi	r19, 0x05	; 5
    27ba:	0c f0       	brlt	.+2      	; 0x27be <CalibrateChannel+0x45c>
    27bc:	48 c0       	rjmp	.+144    	; 0x284e <CalibrateChannel+0x4ec>
    27be:	b1 01       	movw	r22, r2
    27c0:	8f ef       	ldi	r24, 0xFF	; 255
    27c2:	93 e2       	ldi	r25, 0x23	; 35
    27c4:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
    27c8:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
    27cc:	18 2f       	mov	r17, r24
    27ce:	89 37       	cpi	r24, 0x79	; 121
    27d0:	91 f5       	brne	.+100    	; 0x2836 <CalibrateChannel+0x4d4>
    27d2:	81 2f       	mov	r24, r17
    27d4:	01 2e       	mov	r0, r17
    27d6:	00 0c       	add	r0, r0
    27d8:	99 0b       	sbc	r25, r25
    27da:	9f 93       	push	r25
    27dc:	1f 93       	push	r17
    27de:	8a ef       	ldi	r24, 0xFA	; 250
    27e0:	93 e2       	ldi	r25, 0x23	; 35
    27e2:	9f 93       	push	r25
    27e4:	8f 93       	push	r24
    27e6:	3f 92       	push	r3
    27e8:	2f 92       	push	r2
    27ea:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    27ee:	1f 7d       	andi	r17, 0xDF	; 223
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	19 35       	cpi	r17, 0x59	; 89
    27fe:	09 f4       	brne	.+2      	; 0x2802 <CalibrateChannel+0x4a0>
    2800:	a6 ce       	rjmp	.-692    	; 0x254e <CalibrateChannel+0x1ec>
    2802:	c1 57       	subi	r28, 0x71	; 113
    2804:	df 4f       	sbci	r29, 0xFF	; 255
    2806:	88 81       	ld	r24, Y
    2808:	cf 58       	subi	r28, 0x8F	; 143
    280a:	d0 40       	sbci	r29, 0x00	; 0
    280c:	82 30       	cpi	r24, 0x02	; 2
    280e:	fc f4       	brge	.+62     	; 0x284e <CalibrateChannel+0x4ec>
    2810:	b1 01       	movw	r22, r2
    2812:	87 e2       	ldi	r24, 0x27	; 39
    2814:	94 e2       	ldi	r25, 0x24	; 36
    2816:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
    281a:	54 c2       	rjmp	.+1192   	; 0x2cc4 <CalibrateChannel+0x962>
    281c:	89 35       	cpi	r24, 0x59	; 89
    281e:	09 f4       	brne	.+2      	; 0x2822 <CalibrateChannel+0x4c0>
    2820:	a5 cf       	rjmp	.-182    	; 0x276c <CalibrateChannel+0x40a>
    2822:	8e 36       	cpi	r24, 0x6E	; 110
    2824:	09 f4       	brne	.+2      	; 0x2828 <CalibrateChannel+0x4c6>
    2826:	a2 cf       	rjmp	.-188    	; 0x276c <CalibrateChannel+0x40a>
    2828:	8e 34       	cpi	r24, 0x4E	; 78
    282a:	09 f4       	brne	.+2      	; 0x282e <CalibrateChannel+0x4cc>
    282c:	9f cf       	rjmp	.-194    	; 0x276c <CalibrateChannel+0x40a>
    282e:	8b 31       	cpi	r24, 0x1B	; 27
    2830:	09 f0       	breq	.+2      	; 0x2834 <CalibrateChannel+0x4d2>
    2832:	96 cf       	rjmp	.-212    	; 0x2760 <CalibrateChannel+0x3fe>
    2834:	9b cf       	rjmp	.-202    	; 0x276c <CalibrateChannel+0x40a>
    2836:	89 35       	cpi	r24, 0x59	; 89
    2838:	61 f2       	breq	.-104    	; 0x27d2 <CalibrateChannel+0x470>
    283a:	8e 36       	cpi	r24, 0x6E	; 110
    283c:	51 f2       	breq	.-108    	; 0x27d2 <CalibrateChannel+0x470>
    283e:	8e 34       	cpi	r24, 0x4E	; 78
    2840:	41 f2       	breq	.-112    	; 0x27d2 <CalibrateChannel+0x470>
    2842:	8b 31       	cpi	r24, 0x1B	; 27
    2844:	09 f6       	brne	.-126    	; 0x27c8 <CalibrateChannel+0x466>
    2846:	c5 cf       	rjmp	.-118    	; 0x27d2 <CalibrateChannel+0x470>
    2848:	35 30       	cpi	r19, 0x05	; 5
    284a:	0c f4       	brge	.+2      	; 0x284e <CalibrateChannel+0x4ec>
    284c:	80 ce       	rjmp	.-768    	; 0x254e <CalibrateChannel+0x1ec>
    284e:	de 01       	movw	r26, r28
    2850:	af 59       	subi	r26, 0x9F	; 159
    2852:	bf 4f       	sbci	r27, 0xFF	; 255
    2854:	cb 56       	subi	r28, 0x6B	; 107
    2856:	df 4f       	sbci	r29, 0xFF	; 255
    2858:	a8 83       	st	Y, r26
    285a:	b9 83       	std	Y+1, r27	; 0x01
    285c:	c5 59       	subi	r28, 0x95	; 149
    285e:	d0 40       	sbci	r29, 0x00	; 0
    2860:	fe 01       	movw	r30, r28
    2862:	eb 58       	subi	r30, 0x8B	; 139
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	c9 56       	subi	r28, 0x69	; 105
    2868:	df 4f       	sbci	r29, 0xFF	; 255
    286a:	e8 83       	st	Y, r30
    286c:	f9 83       	std	Y+1, r31	; 0x01
    286e:	c7 59       	subi	r28, 0x97	; 151
    2870:	d0 40       	sbci	r29, 0x00	; 0
    2872:	8f 01       	movw	r16, r30
    2874:	7d 01       	movw	r14, r26
    2876:	81 2c       	mov	r8, r1
    2878:	91 2c       	mov	r9, r1
    287a:	54 01       	movw	r10, r8
    287c:	24 01       	movw	r4, r8
    287e:	35 01       	movw	r6, r10
    2880:	d1 2c       	mov	r13, r1
    2882:	d7 01       	movw	r26, r14
    2884:	2d 91       	ld	r18, X+
    2886:	3d 91       	ld	r19, X+
    2888:	4d 91       	ld	r20, X+
    288a:	5d 91       	ld	r21, X+
    288c:	7d 01       	movw	r14, r26
    288e:	c3 01       	movw	r24, r6
    2890:	b2 01       	movw	r22, r4
    2892:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__addsf3>
    2896:	2b 01       	movw	r4, r22
    2898:	3c 01       	movw	r6, r24
    289a:	f8 01       	movw	r30, r16
    289c:	21 91       	ld	r18, Z+
    289e:	31 91       	ld	r19, Z+
    28a0:	41 91       	ld	r20, Z+
    28a2:	51 91       	ld	r21, Z+
    28a4:	8f 01       	movw	r16, r30
    28a6:	c5 01       	movw	r24, r10
    28a8:	b4 01       	movw	r22, r8
    28aa:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__addsf3>
    28ae:	4b 01       	movw	r8, r22
    28b0:	5c 01       	movw	r10, r24
    28b2:	d3 94       	inc	r13
    28b4:	c1 57       	subi	r28, 0x71	; 113
    28b6:	df 4f       	sbci	r29, 0xFF	; 255
    28b8:	f8 81       	ld	r31, Y
    28ba:	cf 58       	subi	r28, 0x8F	; 143
    28bc:	d0 40       	sbci	r29, 0x00	; 0
    28be:	df 16       	cp	r13, r31
    28c0:	04 f3       	brlt	.-64     	; 0x2882 <CalibrateChannel+0x520>
    28c2:	6f 2f       	mov	r22, r31
    28c4:	ff 0f       	add	r31, r31
    28c6:	77 0b       	sbc	r23, r23
    28c8:	88 0b       	sbc	r24, r24
    28ca:	99 0b       	sbc	r25, r25
    28cc:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    28d0:	6b 01       	movw	r12, r22
    28d2:	7c 01       	movw	r14, r24
    28d4:	9b 01       	movw	r18, r22
    28d6:	ac 01       	movw	r20, r24
    28d8:	c3 01       	movw	r24, r6
    28da:	b2 01       	movw	r22, r4
    28dc:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    28e0:	c7 56       	subi	r28, 0x67	; 103
    28e2:	df 4f       	sbci	r29, 0xFF	; 255
    28e4:	68 83       	st	Y, r22
    28e6:	79 83       	std	Y+1, r23	; 0x01
    28e8:	8a 83       	std	Y+2, r24	; 0x02
    28ea:	9b 83       	std	Y+3, r25	; 0x03
    28ec:	c9 59       	subi	r28, 0x99	; 153
    28ee:	d0 40       	sbci	r29, 0x00	; 0
    28f0:	a7 01       	movw	r20, r14
    28f2:	96 01       	movw	r18, r12
    28f4:	c5 01       	movw	r24, r10
    28f6:	b4 01       	movw	r22, r8
    28f8:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    28fc:	c1 56       	subi	r28, 0x61	; 97
    28fe:	df 4f       	sbci	r29, 0xFF	; 255
    2900:	68 83       	st	Y, r22
    2902:	79 83       	std	Y+1, r23	; 0x01
    2904:	8a 83       	std	Y+2, r24	; 0x02
    2906:	9b 83       	std	Y+3, r25	; 0x03
    2908:	cf 59       	subi	r28, 0x9F	; 159
    290a:	d0 40       	sbci	r29, 0x00	; 0
    290c:	c1 2c       	mov	r12, r1
    290e:	d1 2c       	mov	r13, r1
    2910:	76 01       	movw	r14, r12
    2912:	46 01       	movw	r8, r12
    2914:	57 01       	movw	r10, r14
    2916:	10 e0       	ldi	r17, 0x00	; 0
    2918:	cb 56       	subi	r28, 0x6B	; 107
    291a:	df 4f       	sbci	r29, 0xFF	; 255
    291c:	a8 81       	ld	r26, Y
    291e:	b9 81       	ldd	r27, Y+1	; 0x01
    2920:	c5 59       	subi	r28, 0x95	; 149
    2922:	d0 40       	sbci	r29, 0x00	; 0
    2924:	6d 91       	ld	r22, X+
    2926:	7d 91       	ld	r23, X+
    2928:	8d 91       	ld	r24, X+
    292a:	9d 91       	ld	r25, X+
    292c:	cb 56       	subi	r28, 0x6B	; 107
    292e:	df 4f       	sbci	r29, 0xFF	; 255
    2930:	a8 83       	st	Y, r26
    2932:	b9 83       	std	Y+1, r27	; 0x01
    2934:	c5 59       	subi	r28, 0x95	; 149
    2936:	d0 40       	sbci	r29, 0x00	; 0
    2938:	c7 56       	subi	r28, 0x67	; 103
    293a:	df 4f       	sbci	r29, 0xFF	; 255
    293c:	28 81       	ld	r18, Y
    293e:	39 81       	ldd	r19, Y+1	; 0x01
    2940:	4a 81       	ldd	r20, Y+2	; 0x02
    2942:	5b 81       	ldd	r21, Y+3	; 0x03
    2944:	c9 59       	subi	r28, 0x99	; 153
    2946:	d0 40       	sbci	r29, 0x00	; 0
    2948:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <__subsf3>
    294c:	2b 01       	movw	r4, r22
    294e:	3c 01       	movw	r6, r24
    2950:	9b 01       	movw	r18, r22
    2952:	ac 01       	movw	r20, r24
    2954:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    2958:	9b 01       	movw	r18, r22
    295a:	ac 01       	movw	r20, r24
    295c:	c5 01       	movw	r24, r10
    295e:	b4 01       	movw	r22, r8
    2960:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__addsf3>
    2964:	4b 01       	movw	r8, r22
    2966:	5c 01       	movw	r10, r24
    2968:	c9 56       	subi	r28, 0x69	; 105
    296a:	df 4f       	sbci	r29, 0xFF	; 255
    296c:	e8 81       	ld	r30, Y
    296e:	f9 81       	ldd	r31, Y+1	; 0x01
    2970:	c7 59       	subi	r28, 0x97	; 151
    2972:	d0 40       	sbci	r29, 0x00	; 0
    2974:	61 91       	ld	r22, Z+
    2976:	71 91       	ld	r23, Z+
    2978:	81 91       	ld	r24, Z+
    297a:	91 91       	ld	r25, Z+
    297c:	c9 56       	subi	r28, 0x69	; 105
    297e:	df 4f       	sbci	r29, 0xFF	; 255
    2980:	e8 83       	st	Y, r30
    2982:	f9 83       	std	Y+1, r31	; 0x01
    2984:	c7 59       	subi	r28, 0x97	; 151
    2986:	d0 40       	sbci	r29, 0x00	; 0
    2988:	c1 56       	subi	r28, 0x61	; 97
    298a:	df 4f       	sbci	r29, 0xFF	; 255
    298c:	28 81       	ld	r18, Y
    298e:	39 81       	ldd	r19, Y+1	; 0x01
    2990:	4a 81       	ldd	r20, Y+2	; 0x02
    2992:	5b 81       	ldd	r21, Y+3	; 0x03
    2994:	cf 59       	subi	r28, 0x9F	; 159
    2996:	d0 40       	sbci	r29, 0x00	; 0
    2998:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <__subsf3>
    299c:	9b 01       	movw	r18, r22
    299e:	ac 01       	movw	r20, r24
    29a0:	c3 01       	movw	r24, r6
    29a2:	b2 01       	movw	r22, r4
    29a4:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    29a8:	9b 01       	movw	r18, r22
    29aa:	ac 01       	movw	r20, r24
    29ac:	c7 01       	movw	r24, r14
    29ae:	b6 01       	movw	r22, r12
    29b0:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__addsf3>
    29b4:	6b 01       	movw	r12, r22
    29b6:	7c 01       	movw	r14, r24
    29b8:	1f 5f       	subi	r17, 0xFF	; 255
    29ba:	c1 57       	subi	r28, 0x71	; 113
    29bc:	df 4f       	sbci	r29, 0xFF	; 255
    29be:	f8 81       	ld	r31, Y
    29c0:	cf 58       	subi	r28, 0x8F	; 143
    29c2:	d0 40       	sbci	r29, 0x00	; 0
    29c4:	1f 17       	cp	r17, r31
    29c6:	0c f4       	brge	.+2      	; 0x29ca <CalibrateChannel+0x668>
    29c8:	a7 cf       	rjmp	.-178    	; 0x2918 <CalibrateChannel+0x5b6>
    29ca:	a5 01       	movw	r20, r10
    29cc:	94 01       	movw	r18, r8
    29ce:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    29d2:	6b 01       	movw	r12, r22
    29d4:	7c 01       	movw	r14, r24
    29d6:	c7 56       	subi	r28, 0x67	; 103
    29d8:	df 4f       	sbci	r29, 0xFF	; 255
    29da:	28 81       	ld	r18, Y
    29dc:	39 81       	ldd	r19, Y+1	; 0x01
    29de:	4a 81       	ldd	r20, Y+2	; 0x02
    29e0:	5b 81       	ldd	r21, Y+3	; 0x03
    29e2:	c9 59       	subi	r28, 0x99	; 153
    29e4:	d0 40       	sbci	r29, 0x00	; 0
    29e6:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    29ea:	9b 01       	movw	r18, r22
    29ec:	ac 01       	movw	r20, r24
    29ee:	c1 56       	subi	r28, 0x61	; 97
    29f0:	df 4f       	sbci	r29, 0xFF	; 255
    29f2:	68 81       	ld	r22, Y
    29f4:	79 81       	ldd	r23, Y+1	; 0x01
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	9b 81       	ldd	r25, Y+3	; 0x03
    29fa:	cf 59       	subi	r28, 0x9F	; 159
    29fc:	d0 40       	sbci	r29, 0x00	; 0
    29fe:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <__subsf3>
    2a02:	4b 01       	movw	r8, r22
    2a04:	5c 01       	movw	r10, r24
    2a06:	0e 94 a5 2c 	call	0x594a	; 0x594a <CanRead_Ctrl>
    2a0a:	88 23       	and	r24, r24
    2a0c:	19 f0       	breq	.+6      	; 0x2a14 <CalibrateChannel+0x6b2>
    2a0e:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
    2a12:	f9 cf       	rjmp	.-14     	; 0x2a06 <CalibrateChannel+0x6a4>
    2a14:	cc 55       	subi	r28, 0x5C	; 92
    2a16:	df 4f       	sbci	r29, 0xFF	; 255
    2a18:	28 81       	ld	r18, Y
    2a1a:	c4 5a       	subi	r28, 0xA4	; 164
    2a1c:	d0 40       	sbci	r29, 0x00	; 0
    2a1e:	2f 93       	push	r18
    2a20:	cd 55       	subi	r28, 0x5D	; 93
    2a22:	df 4f       	sbci	r29, 0xFF	; 255
    2a24:	38 81       	ld	r19, Y
    2a26:	c3 5a       	subi	r28, 0xA3	; 163
    2a28:	d0 40       	sbci	r29, 0x00	; 0
    2a2a:	3f 93       	push	r19
    2a2c:	8a e7       	ldi	r24, 0x7A	; 122
    2a2e:	94 e2       	ldi	r25, 0x24	; 36
    2a30:	9f 93       	push	r25
    2a32:	8f 93       	push	r24
    2a34:	3f 92       	push	r3
    2a36:	2f 92       	push	r2
    2a38:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    2a3c:	cd 56       	subi	r28, 0x6D	; 109
    2a3e:	df 4f       	sbci	r29, 0xFF	; 255
    2a40:	a8 81       	ld	r26, Y
    2a42:	b9 81       	ldd	r27, Y+1	; 0x01
    2a44:	c3 59       	subi	r28, 0x93	; 147
    2a46:	d0 40       	sbci	r29, 0x00	; 0
    2a48:	8d 91       	ld	r24, X+
    2a4a:	9d 91       	ld	r25, X+
    2a4c:	0d 90       	ld	r0, X+
    2a4e:	bc 91       	ld	r27, X
    2a50:	a0 2d       	mov	r26, r0
    2a52:	c1 57       	subi	r28, 0x71	; 113
    2a54:	df 4f       	sbci	r29, 0xFF	; 255
    2a56:	88 83       	st	Y, r24
    2a58:	99 83       	std	Y+1, r25	; 0x01
    2a5a:	aa 83       	std	Y+2, r26	; 0x02
    2a5c:	bb 83       	std	Y+3, r27	; 0x03
    2a5e:	cf 58       	subi	r28, 0x8F	; 143
    2a60:	d0 40       	sbci	r29, 0x00	; 0
    2a62:	8c e0       	ldi	r24, 0x0C	; 12
    2a64:	c3 56       	subi	r28, 0x63	; 99
    2a66:	df 4f       	sbci	r29, 0xFF	; 255
    2a68:	28 81       	ld	r18, Y
    2a6a:	39 81       	ldd	r19, Y+1	; 0x01
    2a6c:	cd 59       	subi	r28, 0x9D	; 157
    2a6e:	d0 40       	sbci	r29, 0x00	; 0
    2a70:	82 9f       	mul	r24, r18
    2a72:	f0 01       	movw	r30, r0
    2a74:	83 9f       	mul	r24, r19
    2a76:	f0 0d       	add	r31, r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	ec 0f       	add	r30, r28
    2a7c:	fd 1f       	adc	r31, r29
    2a7e:	07 81       	ldd	r16, Z+7	; 0x07
    2a80:	10 85       	ldd	r17, Z+8	; 0x08
    2a82:	d8 01       	movw	r26, r16
    2a84:	6d 90       	ld	r6, X+
    2a86:	7c 90       	ld	r7, X
    2a88:	11 97       	sbiw	r26, 0x01	; 1
    2a8a:	4d 90       	ld	r4, X+
    2a8c:	5c 90       	ld	r5, X
    2a8e:	c5 01       	movw	r24, r10
    2a90:	b4 01       	movw	r22, r8
    2a92:	0e 94 4c 32 	call	0x6498	; 0x6498 <round>
    2a96:	4b 01       	movw	r8, r22
    2a98:	5c 01       	movw	r10, r24
    2a9a:	ce 56       	subi	r28, 0x6E	; 110
    2a9c:	df 4f       	sbci	r29, 0xFF	; 255
    2a9e:	b8 81       	ld	r27, Y
    2aa0:	c2 59       	subi	r28, 0x92	; 146
    2aa2:	d0 40       	sbci	r29, 0x00	; 0
    2aa4:	bf 93       	push	r27
    2aa6:	cf 56       	subi	r28, 0x6F	; 111
    2aa8:	df 4f       	sbci	r29, 0xFF	; 255
    2aaa:	e8 81       	ld	r30, Y
    2aac:	c1 59       	subi	r28, 0x91	; 145
    2aae:	d0 40       	sbci	r29, 0x00	; 0
    2ab0:	ef 93       	push	r30
    2ab2:	c0 57       	subi	r28, 0x70	; 112
    2ab4:	df 4f       	sbci	r29, 0xFF	; 255
    2ab6:	f8 81       	ld	r31, Y
    2ab8:	c0 59       	subi	r28, 0x90	; 144
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	ff 93       	push	r31
    2abe:	c1 57       	subi	r28, 0x71	; 113
    2ac0:	df 4f       	sbci	r29, 0xFF	; 255
    2ac2:	28 81       	ld	r18, Y
    2ac4:	cf 58       	subi	r28, 0x8F	; 143
    2ac6:	d0 40       	sbci	r29, 0x00	; 0
    2ac8:	2f 93       	push	r18
    2aca:	ff 92       	push	r15
    2acc:	ef 92       	push	r14
    2ace:	df 92       	push	r13
    2ad0:	cf 92       	push	r12
    2ad2:	7f 92       	push	r7
    2ad4:	6f 92       	push	r6
    2ad6:	b2 01       	movw	r22, r4
    2ad8:	55 0c       	add	r5, r5
    2ada:	88 0b       	sbc	r24, r24
    2adc:	99 0b       	sbc	r25, r25
    2ade:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    2ae2:	a5 01       	movw	r20, r10
    2ae4:	94 01       	movw	r18, r8
    2ae6:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__addsf3>
    2aea:	9f 93       	push	r25
    2aec:	8f 93       	push	r24
    2aee:	7f 93       	push	r23
    2af0:	6f 93       	push	r22
    2af2:	8e e9       	ldi	r24, 0x9E	; 158
    2af4:	94 e2       	ldi	r25, 0x24	; 36
    2af6:	9f 93       	push	r25
    2af8:	8f 93       	push	r24
    2afa:	3f 92       	push	r3
    2afc:	2f 92       	push	r2
    2afe:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0e 94 ae 2c 	call	0x595c	; 0x595c <ReadByte_Ctrl>
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	89 37       	cpi	r24, 0x79	; 121
    2b0e:	41 f0       	breq	.+16     	; 0x2b20 <CalibrateChannel+0x7be>
    2b10:	89 35       	cpi	r24, 0x59	; 89
    2b12:	31 f0       	breq	.+12     	; 0x2b20 <CalibrateChannel+0x7be>
    2b14:	8e 36       	cpi	r24, 0x6E	; 110
    2b16:	21 f0       	breq	.+8      	; 0x2b20 <CalibrateChannel+0x7be>
    2b18:	8e 34       	cpi	r24, 0x4E	; 78
    2b1a:	11 f0       	breq	.+4      	; 0x2b20 <CalibrateChannel+0x7be>
    2b1c:	8b 31       	cpi	r24, 0x1B	; 27
    2b1e:	99 f7       	brne	.-26     	; 0x2b06 <CalibrateChannel+0x7a4>
    2b20:	82 2f       	mov	r24, r18
    2b22:	02 2e       	mov	r0, r18
    2b24:	00 0c       	add	r0, r0
    2b26:	99 0b       	sbc	r25, r25
    2b28:	9f 93       	push	r25
    2b2a:	2f 93       	push	r18
    2b2c:	8a ef       	ldi	r24, 0xFA	; 250
    2b2e:	93 e2       	ldi	r25, 0x23	; 35
    2b30:	9f 93       	push	r25
    2b32:	8f 93       	push	r24
    2b34:	3f 92       	push	r3
    2b36:	2f 92       	push	r2
    2b38:	c8 55       	subi	r28, 0x58	; 88
    2b3a:	df 4f       	sbci	r29, 0xFF	; 255
    2b3c:	28 83       	st	Y, r18
    2b3e:	c8 5a       	subi	r28, 0xA8	; 168
    2b40:	d0 40       	sbci	r29, 0x00	; 0
    2b42:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    2b46:	c8 55       	subi	r28, 0x58	; 88
    2b48:	df 4f       	sbci	r29, 0xFF	; 255
    2b4a:	28 81       	ld	r18, Y
    2b4c:	c8 5a       	subi	r28, 0xA8	; 168
    2b4e:	d0 40       	sbci	r29, 0x00	; 0
    2b50:	2f 7d       	andi	r18, 0xDF	; 223
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	29 35       	cpi	r18, 0x59	; 89
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <CalibrateChannel+0x802>
    2b62:	b0 c0       	rjmp	.+352    	; 0x2cc4 <CalibrateChannel+0x962>
    2b64:	d8 01       	movw	r26, r16
    2b66:	6d 91       	ld	r22, X+
    2b68:	7c 91       	ld	r23, X
    2b6a:	07 2e       	mov	r0, r23
    2b6c:	00 0c       	add	r0, r0
    2b6e:	88 0b       	sbc	r24, r24
    2b70:	99 0b       	sbc	r25, r25
    2b72:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    2b76:	a5 01       	movw	r20, r10
    2b78:	94 01       	movw	r18, r8
    2b7a:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__addsf3>
    2b7e:	0e 94 a3 30 	call	0x6146	; 0x6146 <__fixsfsi>
    2b82:	f8 01       	movw	r30, r16
    2b84:	60 83       	st	Z, r22
    2b86:	71 83       	std	Z+1, r23	; 0x01
    2b88:	cd 56       	subi	r28, 0x6D	; 109
    2b8a:	df 4f       	sbci	r29, 0xFF	; 255
    2b8c:	a8 81       	ld	r26, Y
    2b8e:	b9 81       	ldd	r27, Y+1	; 0x01
    2b90:	c3 59       	subi	r28, 0x93	; 147
    2b92:	d0 40       	sbci	r29, 0x00	; 0
    2b94:	cd 92       	st	X+, r12
    2b96:	dd 92       	st	X+, r13
    2b98:	ed 92       	st	X+, r14
    2b9a:	fc 92       	st	X, r15
    2b9c:	13 97       	sbiw	r26, 0x03	; 3
    2b9e:	8c e0       	ldi	r24, 0x0C	; 12
    2ba0:	c3 56       	subi	r28, 0x63	; 99
    2ba2:	df 4f       	sbci	r29, 0xFF	; 255
    2ba4:	e8 81       	ld	r30, Y
    2ba6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ba8:	cd 59       	subi	r28, 0x9D	; 157
    2baa:	d0 40       	sbci	r29, 0x00	; 0
    2bac:	8e 9f       	mul	r24, r30
    2bae:	70 01       	movw	r14, r0
    2bb0:	8f 9f       	mul	r24, r31
    2bb2:	f0 0c       	add	r15, r0
    2bb4:	11 24       	eor	r1, r1
    2bb6:	21 e0       	ldi	r18, 0x01	; 1
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	2c 0f       	add	r18, r28
    2bbc:	3d 1f       	adc	r19, r29
    2bbe:	e2 0e       	add	r14, r18
    2bc0:	f3 1e       	adc	r15, r19
    2bc2:	d7 01       	movw	r26, r14
    2bc4:	1a 96       	adiw	r26, 0x0a	; 10
    2bc6:	cd 90       	ld	r12, X+
    2bc8:	dc 90       	ld	r13, X
    2bca:	1b 97       	sbiw	r26, 0x0b	; 11
    2bcc:	42 e0       	ldi	r20, 0x02	; 2
    2bce:	50 e0       	ldi	r21, 0x00	; 0
    2bd0:	b6 01       	movw	r22, r12
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <UpdateEEPROM>
    2bd8:	f7 01       	movw	r30, r14
    2bda:	e0 84       	ldd	r14, Z+8	; 0x08
    2bdc:	f1 84       	ldd	r15, Z+9	; 0x09
    2bde:	44 e0       	ldi	r20, 0x04	; 4
    2be0:	50 e0       	ldi	r21, 0x00	; 0
    2be2:	b7 01       	movw	r22, r14
    2be4:	cd 56       	subi	r28, 0x6D	; 109
    2be6:	df 4f       	sbci	r29, 0xFF	; 255
    2be8:	88 81       	ld	r24, Y
    2bea:	99 81       	ldd	r25, Y+1	; 0x01
    2bec:	c3 59       	subi	r28, 0x93	; 147
    2bee:	d0 40       	sbci	r29, 0x00	; 0
    2bf0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <UpdateEEPROM>
    2bf4:	cd 56       	subi	r28, 0x6D	; 109
    2bf6:	df 4f       	sbci	r29, 0xFF	; 255
    2bf8:	e8 81       	ld	r30, Y
    2bfa:	f9 81       	ldd	r31, Y+1	; 0x01
    2bfc:	c3 59       	subi	r28, 0x93	; 147
    2bfe:	d0 40       	sbci	r29, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	a2 81       	ldd	r26, Z+2	; 0x02
    2c06:	b3 81       	ldd	r27, Z+3	; 0x03
    2c08:	f8 01       	movw	r30, r16
    2c0a:	20 81       	ld	r18, Z
    2c0c:	31 81       	ldd	r19, Z+1	; 0x01
    2c0e:	bf 93       	push	r27
    2c10:	af 93       	push	r26
    2c12:	9f 93       	push	r25
    2c14:	8f 93       	push	r24
    2c16:	3f 93       	push	r19
    2c18:	2f 93       	push	r18
    2c1a:	85 ee       	ldi	r24, 0xE5	; 229
    2c1c:	94 e2       	ldi	r25, 0x24	; 36
    2c1e:	9f 93       	push	r25
    2c20:	8f 93       	push	r24
    2c22:	3f 92       	push	r3
    2c24:	2f 92       	push	r2
    2c26:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    2c2a:	42 e0       	ldi	r20, 0x02	; 2
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	b6 01       	movw	r22, r12
    2c30:	ce 01       	movw	r24, r28
    2c32:	83 57       	subi	r24, 0x73	; 115
    2c34:	9f 4f       	sbci	r25, 0xFF	; 255
    2c36:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2c3a:	44 e0       	ldi	r20, 0x04	; 4
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	b7 01       	movw	r22, r14
    2c40:	ce 01       	movw	r24, r28
    2c42:	87 57       	subi	r24, 0x77	; 119
    2c44:	9f 4f       	sbci	r25, 0xFF	; 255
    2c46:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TryReadEEPROM>
    2c4a:	c4 57       	subi	r28, 0x74	; 116
    2c4c:	df 4f       	sbci	r29, 0xFF	; 255
    2c4e:	88 81       	ld	r24, Y
    2c50:	cc 58       	subi	r28, 0x8C	; 140
    2c52:	d0 40       	sbci	r29, 0x00	; 0
    2c54:	8f 93       	push	r24
    2c56:	c5 57       	subi	r28, 0x75	; 117
    2c58:	df 4f       	sbci	r29, 0xFF	; 255
    2c5a:	88 81       	ld	r24, Y
    2c5c:	cb 58       	subi	r28, 0x8B	; 139
    2c5e:	d0 40       	sbci	r29, 0x00	; 0
    2c60:	8f 93       	push	r24
    2c62:	c6 57       	subi	r28, 0x76	; 118
    2c64:	df 4f       	sbci	r29, 0xFF	; 255
    2c66:	88 81       	ld	r24, Y
    2c68:	ca 58       	subi	r28, 0x8A	; 138
    2c6a:	d0 40       	sbci	r29, 0x00	; 0
    2c6c:	8f 93       	push	r24
    2c6e:	c7 57       	subi	r28, 0x77	; 119
    2c70:	df 4f       	sbci	r29, 0xFF	; 255
    2c72:	88 81       	ld	r24, Y
    2c74:	c9 58       	subi	r28, 0x89	; 137
    2c76:	d0 40       	sbci	r29, 0x00	; 0
    2c78:	8f 93       	push	r24
    2c7a:	c2 57       	subi	r28, 0x72	; 114
    2c7c:	df 4f       	sbci	r29, 0xFF	; 255
    2c7e:	88 81       	ld	r24, Y
    2c80:	ce 58       	subi	r28, 0x8E	; 142
    2c82:	d0 40       	sbci	r29, 0x00	; 0
    2c84:	8f 93       	push	r24
    2c86:	c3 57       	subi	r28, 0x73	; 115
    2c88:	df 4f       	sbci	r29, 0xFF	; 255
    2c8a:	88 81       	ld	r24, Y
    2c8c:	cd 58       	subi	r28, 0x8D	; 141
    2c8e:	d0 40       	sbci	r29, 0x00	; 0
    2c90:	8f 93       	push	r24
    2c92:	8b e0       	ldi	r24, 0x0B	; 11
    2c94:	95 e2       	ldi	r25, 0x25	; 37
    2c96:	9f 93       	push	r25
    2c98:	8f 93       	push	r24
    2c9a:	3f 92       	push	r3
    2c9c:	2f 92       	push	r2
    2c9e:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    2ca2:	b1 01       	movw	r22, r2
    2ca4:	81 e3       	ldi	r24, 0x31	; 49
    2ca6:	95 e2       	ldi	r25, 0x25	; 37
    2ca8:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	09 c0       	rjmp	.+18     	; 0x2cc4 <CalibrateChannel+0x962>
    2cb2:	c1 57       	subi	r28, 0x71	; 113
    2cb4:	df 4f       	sbci	r29, 0xFF	; 255
    2cb6:	88 81       	ld	r24, Y
    2cb8:	cf 58       	subi	r28, 0x8F	; 143
    2cba:	d0 40       	sbci	r29, 0x00	; 0
    2cbc:	85 30       	cpi	r24, 0x05	; 5
    2cbe:	0c f4       	brge	.+2      	; 0x2cc2 <CalibrateChannel+0x960>
    2cc0:	a0 cd       	rjmp	.-1216   	; 0x2802 <CalibrateChannel+0x4a0>
    2cc2:	c5 cd       	rjmp	.-1142   	; 0x284e <CalibrateChannel+0x4ec>
    2cc4:	c8 55       	subi	r28, 0x58	; 88
    2cc6:	df 4f       	sbci	r29, 0xFF	; 255
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	df 90       	pop	r13
    2cda:	cf 90       	pop	r12
    2cdc:	bf 90       	pop	r11
    2cde:	af 90       	pop	r10
    2ce0:	9f 90       	pop	r9
    2ce2:	8f 90       	pop	r8
    2ce4:	7f 90       	pop	r7
    2ce6:	6f 90       	pop	r6
    2ce8:	5f 90       	pop	r5
    2cea:	4f 90       	pop	r4
    2cec:	3f 90       	pop	r3
    2cee:	2f 90       	pop	r2
    2cf0:	08 95       	ret

00002cf2 <TakeSnapshot>:
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	80 93 67 29 	sts	0x2967, r24	; 0x802967 <sTakeSnapshot>
    2cf8:	08 95       	ret

00002cfa <GetSessionCycleCount>:


uint32_t GetSessionCycleCount(void) {
    2cfa:	0f 93       	push	r16
    2cfc:	1f 93       	push	r17
	
	uint32_t res, prev;
	
	res = sSessionCycleCount;
    2cfe:	60 91 e5 28 	lds	r22, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    2d02:	70 91 e6 28 	lds	r23, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    2d06:	80 91 e7 28 	lds	r24, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    2d0a:	90 91 e8 28 	lds	r25, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
	
	do {
		prev = res;
		res = sSessionCycleCount;
    2d0e:	00 91 e5 28 	lds	r16, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    2d12:	10 91 e6 28 	lds	r17, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    2d16:	20 91 e7 28 	lds	r18, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    2d1a:	30 91 e8 28 	lds	r19, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
	} while (res != prev);
    2d1e:	06 17       	cp	r16, r22
    2d20:	17 07       	cpc	r17, r23
    2d22:	28 07       	cpc	r18, r24
    2d24:	39 07       	cpc	r19, r25
    2d26:	19 f0       	breq	.+6      	; 0x2d2e <GetSessionCycleCount+0x34>
    2d28:	c9 01       	movw	r24, r18
    2d2a:	b8 01       	movw	r22, r16
    2d2c:	f0 cf       	rjmp	.-32     	; 0x2d0e <GetSessionCycleCount+0x14>
	
	return res;
	
} /* GetSessionCycleCount */
    2d2e:	1f 91       	pop	r17
    2d30:	0f 91       	pop	r16
    2d32:	08 95       	ret

00002d34 <PrintCSV_H2A>:

	return res;
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
    2d34:	2f 92       	push	r2
    2d36:	3f 92       	push	r3
    2d38:	4f 92       	push	r4
    2d3a:	5f 92       	push	r5
    2d3c:	6f 92       	push	r6
    2d3e:	7f 92       	push	r7
    2d40:	8f 92       	push	r8
    2d42:	9f 92       	push	r9
    2d44:	af 92       	push	r10
    2d46:	bf 92       	push	r11
    2d48:	cf 92       	push	r12
    2d4a:	df 92       	push	r13
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	df 93       	push	r29
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	c1 5d       	subi	r28, 0xD1	; 209
    2d5e:	d1 09       	sbc	r29, r1
    2d60:	cd bf       	out	0x3d, r28	; 61
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	c6 54       	subi	r28, 0x46	; 70
    2d66:	df 4f       	sbci	r29, 0xFF	; 255
    2d68:	88 83       	st	Y, r24
    2d6a:	ca 5b       	subi	r28, 0xBA	; 186
    2d6c:	d0 40       	sbci	r29, 0x00	; 0
    2d6e:	c5 54       	subi	r28, 0x45	; 69
    2d70:	df 4f       	sbci	r29, 0xFF	; 255
    2d72:	98 83       	st	Y, r25
    2d74:	cb 5b       	subi	r28, 0xBB	; 187
    2d76:	d0 40       	sbci	r29, 0x00	; 0
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    2d78:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    2d7c:	81 11       	cpse	r24, r1
    2d7e:	fc cf       	rjmp	.-8      	; 0x2d78 <PrintCSV_H2A+0x44>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
    2d80:	60 91 d8 29 	lds	r22, 0x29D8	; 0x8029d8 <sSensorDataSnapshot+0x6c>
    2d84:	70 91 d9 29 	lds	r23, 0x29D9	; 0x8029d9 <sSensorDataSnapshot+0x6d>
    2d88:	80 91 da 29 	lds	r24, 0x29DA	; 0x8029da <sSensorDataSnapshot+0x6e>
    2d8c:	90 91 db 29 	lds	r25, 0x29DB	; 0x8029db <sSensorDataSnapshot+0x6f>
    2d90:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e4       	ldi	r19, 0x40	; 64
    2d98:	4c e9       	ldi	r20, 0x9C	; 156
    2d9a:	55 e4       	ldi	r21, 0x45	; 69
    2d9c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    2da0:	c4 54       	subi	r28, 0x44	; 68
    2da2:	df 4f       	sbci	r29, 0xFF	; 255
    2da4:	68 83       	st	Y, r22
    2da6:	cc 5b       	subi	r28, 0xBC	; 188
    2da8:	d0 40       	sbci	r29, 0x00	; 0
    2daa:	c3 54       	subi	r28, 0x43	; 67
    2dac:	df 4f       	sbci	r29, 0xFF	; 255
    2dae:	78 83       	st	Y, r23
    2db0:	cd 5b       	subi	r28, 0xBD	; 189
    2db2:	d0 40       	sbci	r29, 0x00	; 0
    2db4:	c2 54       	subi	r28, 0x42	; 66
    2db6:	df 4f       	sbci	r29, 0xFF	; 255
    2db8:	88 83       	st	Y, r24
    2dba:	ce 5b       	subi	r28, 0xBE	; 190
    2dbc:	d0 40       	sbci	r29, 0x00	; 0
    2dbe:	c1 54       	subi	r28, 0x41	; 65
    2dc0:	df 4f       	sbci	r29, 0xFF	; 255
    2dc2:	98 83       	st	Y, r25
    2dc4:	cf 5b       	subi	r28, 0xBF	; 191
    2dc6:	d0 40       	sbci	r29, 0x00	; 0
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
    2dc8:	20 91 cf 29 	lds	r18, 0x29CF	; 0x8029cf <sSensorDataSnapshot+0x63>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2dcc:	91 e0       	ldi	r25, 0x01	; 1
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	21 11       	cpse	r18, r1
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	ce 56       	subi	r28, 0x6E	; 110
    2dd6:	df 4f       	sbci	r29, 0xFF	; 255
    2dd8:	98 83       	st	Y, r25
    2dda:	c2 59       	subi	r28, 0x92	; 146
    2ddc:	d0 40       	sbci	r29, 0x00	; 0
    2dde:	cd 56       	subi	r28, 0x6D	; 109
    2de0:	df 4f       	sbci	r29, 0xFF	; 255
    2de2:	88 83       	st	Y, r24
    2de4:	c3 59       	subi	r28, 0x93	; 147
    2de6:	d0 40       	sbci	r29, 0x00	; 0
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    2de8:	80 91 e0 29 	lds	r24, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x74>
    2dec:	90 91 e1 29 	lds	r25, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x75>
    2df0:	a0 91 e2 29 	lds	r26, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x76>
    2df4:	b0 91 e3 29 	lds	r27, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x77>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2df8:	89 2b       	or	r24, r25
    2dfa:	8a 2b       	or	r24, r26
    2dfc:	8b 2b       	or	r24, r27
    2dfe:	e9 f0       	breq	.+58     	; 0x2e3a <PrintCSV_H2A+0x106>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    2e00:	60 91 e0 29 	lds	r22, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x74>
    2e04:	70 91 e1 29 	lds	r23, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x75>
    2e08:	80 91 e2 29 	lds	r24, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x76>
    2e0c:	90 91 e3 29 	lds	r25, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x77>
    2e10:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	57 e3       	ldi	r21, 0x37	; 55
    2e1c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    2e20:	9b 01       	movw	r18, r22
    2e22:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2e24:	60 e0       	ldi	r22, 0x00	; 0
    2e26:	70 e8       	ldi	r23, 0x80	; 128
    2e28:	8b e8       	ldi	r24, 0x8B	; 139
    2e2a:	94 e4       	ldi	r25, 0x44	; 68
    2e2c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    2e30:	06 2f       	mov	r16, r22
    2e32:	27 2e       	mov	r2, r23
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	04 c0       	rjmp	.+8      	; 0x2e42 <PrintCSV_H2A+0x10e>
    2e3a:	00 e0       	ldi	r16, 0x00	; 0
    2e3c:	21 2c       	mov	r2, r1
    2e3e:	19 82       	std	Y+1, r1	; 0x01
    2e40:	1a 82       	std	Y+2, r1	; 0x02
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    2e42:	20 91 e4 29 	lds	r18, 0x29E4	; 0x8029e4 <sSensorDataSnapshot+0x78>
    2e46:	2b 83       	std	Y+3, r18	; 0x03
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    2e48:	60 91 d4 29 	lds	r22, 0x29D4	; 0x8029d4 <sSensorDataSnapshot+0x68>
    2e4c:	70 91 d5 29 	lds	r23, 0x29D5	; 0x8029d5 <sSensorDataSnapshot+0x69>
    2e50:	80 91 d6 29 	lds	r24, 0x29D6	; 0x8029d6 <sSensorDataSnapshot+0x6a>
    2e54:	90 91 d7 29 	lds	r25, 0x29D7	; 0x8029d7 <sSensorDataSnapshot+0x6b>
    2e58:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e4       	ldi	r19, 0x40	; 64
    2e60:	4c e9       	ldi	r20, 0x9C	; 156
    2e62:	55 e4       	ldi	r21, 0x45	; 69
    2e64:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    2e68:	c0 54       	subi	r28, 0x40	; 64
    2e6a:	df 4f       	sbci	r29, 0xFF	; 255
    2e6c:	68 83       	st	Y, r22
    2e6e:	c0 5c       	subi	r28, 0xC0	; 192
    2e70:	d0 40       	sbci	r29, 0x00	; 0
    2e72:	cf 53       	subi	r28, 0x3F	; 63
    2e74:	df 4f       	sbci	r29, 0xFF	; 255
    2e76:	78 83       	st	Y, r23
    2e78:	c1 5c       	subi	r28, 0xC1	; 193
    2e7a:	d0 40       	sbci	r29, 0x00	; 0
    2e7c:	ce 53       	subi	r28, 0x3E	; 62
    2e7e:	df 4f       	sbci	r29, 0xFF	; 255
    2e80:	88 83       	st	Y, r24
    2e82:	c2 5c       	subi	r28, 0xC2	; 194
    2e84:	d0 40       	sbci	r29, 0x00	; 0
    2e86:	cd 53       	subi	r28, 0x3D	; 61
    2e88:	df 4f       	sbci	r29, 0xFF	; 255
    2e8a:	98 83       	st	Y, r25
    2e8c:	c3 5c       	subi	r28, 0xC3	; 195
    2e8e:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    2e90:	20 91 ce 29 	lds	r18, 0x29CE	; 0x8029ce <sSensorDataSnapshot+0x62>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2e94:	91 e0       	ldi	r25, 0x01	; 1
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	21 11       	cpse	r18, r1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	cc 56       	subi	r28, 0x6C	; 108
    2e9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ea0:	98 83       	st	Y, r25
    2ea2:	c4 59       	subi	r28, 0x94	; 148
    2ea4:	d0 40       	sbci	r29, 0x00	; 0
    2ea6:	cb 56       	subi	r28, 0x6B	; 107
    2ea8:	df 4f       	sbci	r29, 0xFF	; 255
    2eaa:	88 83       	st	Y, r24
    2eac:	c5 59       	subi	r28, 0x95	; 149
    2eae:	d0 40       	sbci	r29, 0x00	; 0
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    2eb0:	60 91 d0 29 	lds	r22, 0x29D0	; 0x8029d0 <sSensorDataSnapshot+0x64>
    2eb4:	70 91 d1 29 	lds	r23, 0x29D1	; 0x8029d1 <sSensorDataSnapshot+0x65>
    2eb8:	80 91 d2 29 	lds	r24, 0x29D2	; 0x8029d2 <sSensorDataSnapshot+0x66>
    2ebc:	90 91 d3 29 	lds	r25, 0x29D3	; 0x8029d3 <sSensorDataSnapshot+0x67>
    2ec0:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e4       	ldi	r19, 0x40	; 64
    2ec8:	4c e9       	ldi	r20, 0x9C	; 156
    2eca:	55 e4       	ldi	r21, 0x45	; 69
    2ecc:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    2ed0:	cc 53       	subi	r28, 0x3C	; 60
    2ed2:	df 4f       	sbci	r29, 0xFF	; 255
    2ed4:	68 83       	st	Y, r22
    2ed6:	c4 5c       	subi	r28, 0xC4	; 196
    2ed8:	d0 40       	sbci	r29, 0x00	; 0
    2eda:	cb 53       	subi	r28, 0x3B	; 59
    2edc:	df 4f       	sbci	r29, 0xFF	; 255
    2ede:	78 83       	st	Y, r23
    2ee0:	c5 5c       	subi	r28, 0xC5	; 197
    2ee2:	d0 40       	sbci	r29, 0x00	; 0
    2ee4:	ca 53       	subi	r28, 0x3A	; 58
    2ee6:	df 4f       	sbci	r29, 0xFF	; 255
    2ee8:	88 83       	st	Y, r24
    2eea:	c6 5c       	subi	r28, 0xC6	; 198
    2eec:	d0 40       	sbci	r29, 0x00	; 0
    2eee:	c9 53       	subi	r28, 0x39	; 57
    2ef0:	df 4f       	sbci	r29, 0xFF	; 255
    2ef2:	98 83       	st	Y, r25
    2ef4:	c7 5c       	subi	r28, 0xC7	; 199
    2ef6:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
    2ef8:	20 91 cd 29 	lds	r18, 0x29CD	; 0x8029cd <sSensorDataSnapshot+0x61>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2efc:	91 e0       	ldi	r25, 0x01	; 1
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	21 11       	cpse	r18, r1
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	ca 56       	subi	r28, 0x6A	; 106
    2f06:	df 4f       	sbci	r29, 0xFF	; 255
    2f08:	98 83       	st	Y, r25
    2f0a:	c6 59       	subi	r28, 0x96	; 150
    2f0c:	d0 40       	sbci	r29, 0x00	; 0
    2f0e:	c9 56       	subi	r28, 0x69	; 105
    2f10:	df 4f       	sbci	r29, 0xFF	; 255
    2f12:	88 83       	st	Y, r24
    2f14:	c7 59       	subi	r28, 0x97	; 151
    2f16:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
    2f18:	60 91 95 29 	lds	r22, 0x2995	; 0x802995 <sSensorDataSnapshot+0x29>
    2f1c:	70 91 96 29 	lds	r23, 0x2996	; 0x802996 <sSensorDataSnapshot+0x2a>
    2f20:	80 91 97 29 	lds	r24, 0x2997	; 0x802997 <sSensorDataSnapshot+0x2b>
    2f24:	90 91 98 29 	lds	r25, 0x2998	; 0x802998 <sSensorDataSnapshot+0x2c>
    2f28:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e4       	ldi	r19, 0x40	; 64
    2f30:	4c e9       	ldi	r20, 0x9C	; 156
    2f32:	55 e4       	ldi	r21, 0x45	; 69
    2f34:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    2f38:	c8 53       	subi	r28, 0x38	; 56
    2f3a:	df 4f       	sbci	r29, 0xFF	; 255
    2f3c:	68 83       	st	Y, r22
    2f3e:	c8 5c       	subi	r28, 0xC8	; 200
    2f40:	d0 40       	sbci	r29, 0x00	; 0
    2f42:	c7 53       	subi	r28, 0x37	; 55
    2f44:	df 4f       	sbci	r29, 0xFF	; 255
    2f46:	78 83       	st	Y, r23
    2f48:	c9 5c       	subi	r28, 0xC9	; 201
    2f4a:	d0 40       	sbci	r29, 0x00	; 0
    2f4c:	c6 53       	subi	r28, 0x36	; 54
    2f4e:	df 4f       	sbci	r29, 0xFF	; 255
    2f50:	88 83       	st	Y, r24
    2f52:	ca 5c       	subi	r28, 0xCA	; 202
    2f54:	d0 40       	sbci	r29, 0x00	; 0
    2f56:	c5 53       	subi	r28, 0x35	; 53
    2f58:	df 4f       	sbci	r29, 0xFF	; 255
    2f5a:	98 83       	st	Y, r25
    2f5c:	cb 5c       	subi	r28, 0xCB	; 203
    2f5e:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
    2f60:	20 91 94 29 	lds	r18, 0x2994	; 0x802994 <sSensorDataSnapshot+0x28>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2f64:	91 e0       	ldi	r25, 0x01	; 1
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	21 11       	cpse	r18, r1
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <PrintCSV_H2A+0x23a>
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	c8 56       	subi	r28, 0x68	; 104
    2f70:	df 4f       	sbci	r29, 0xFF	; 255
    2f72:	98 83       	st	Y, r25
    2f74:	c8 59       	subi	r28, 0x98	; 152
    2f76:	d0 40       	sbci	r29, 0x00	; 0
    2f78:	c7 56       	subi	r28, 0x67	; 103
    2f7a:	df 4f       	sbci	r29, 0xFF	; 255
    2f7c:	88 83       	st	Y, r24
    2f7e:	c9 59       	subi	r28, 0x99	; 153
    2f80:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
    2f82:	60 91 c9 29 	lds	r22, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5d>
    2f86:	70 91 ca 29 	lds	r23, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5e>
    2f8a:	80 91 cb 29 	lds	r24, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x5f>
    2f8e:	90 91 cc 29 	lds	r25, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x60>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    2f92:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
    2f96:	27 eb       	ldi	r18, 0xB7	; 183
    2f98:	33 ef       	ldi	r19, 0xF3	; 243
    2f9a:	4d e7       	ldi	r20, 0x7D	; 125
    2f9c:	5d e3       	ldi	r21, 0x3D	; 61
    2f9e:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    2fa2:	c4 53       	subi	r28, 0x34	; 52
    2fa4:	df 4f       	sbci	r29, 0xFF	; 255
    2fa6:	68 83       	st	Y, r22
    2fa8:	cc 5c       	subi	r28, 0xCC	; 204
    2faa:	d0 40       	sbci	r29, 0x00	; 0
    2fac:	c3 53       	subi	r28, 0x33	; 51
    2fae:	df 4f       	sbci	r29, 0xFF	; 255
    2fb0:	78 83       	st	Y, r23
    2fb2:	cd 5c       	subi	r28, 0xCD	; 205
    2fb4:	d0 40       	sbci	r29, 0x00	; 0
    2fb6:	c2 53       	subi	r28, 0x32	; 50
    2fb8:	df 4f       	sbci	r29, 0xFF	; 255
    2fba:	88 83       	st	Y, r24
    2fbc:	ce 5c       	subi	r28, 0xCE	; 206
    2fbe:	d0 40       	sbci	r29, 0x00	; 0
    2fc0:	c1 53       	subi	r28, 0x31	; 49
    2fc2:	df 4f       	sbci	r29, 0xFF	; 255
    2fc4:	98 83       	st	Y, r25
    2fc6:	cf 5c       	subi	r28, 0xCF	; 207
    2fc8:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
    2fca:	60 91 c5 29 	lds	r22, 0x29C5	; 0x8029c5 <sSensorDataSnapshot+0x59>
    2fce:	70 91 c6 29 	lds	r23, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5a>
    2fd2:	80 91 c7 29 	lds	r24, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5b>
    2fd6:	90 91 c8 29 	lds	r25, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5c>

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    2fda:	61 15       	cp	r22, r1
    2fdc:	71 05       	cpc	r23, r1
    2fde:	81 05       	cpc	r24, r1
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	21 f1       	breq	.+72     	; 0x302c <PrintCSV_H2A+0x2f8>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    2fe4:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	57 e3       	ldi	r21, 0x37	; 55
    2ff0:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    2ff4:	9b 01       	movw	r18, r22
    2ff6:	ac 01       	movw	r20, r24
    2ff8:	60 e0       	ldi	r22, 0x00	; 0
    2ffa:	70 e8       	ldi	r23, 0x80	; 128
    2ffc:	8b e8       	ldi	r24, 0x8B	; 139
    2ffe:	94 e4       	ldi	r25, 0x44	; 68
    3000:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3004:	36 2e       	mov	r3, r22
    3006:	c0 53       	subi	r28, 0x30	; 48
    3008:	df 4f       	sbci	r29, 0xFF	; 255
    300a:	78 83       	st	Y, r23
    300c:	c0 5d       	subi	r28, 0xD0	; 208
    300e:	d0 40       	sbci	r29, 0x00	; 0
    3010:	cf 52       	subi	r28, 0x2F	; 47
    3012:	df 4f       	sbci	r29, 0xFF	; 255
    3014:	88 83       	st	Y, r24
    3016:	c1 5d       	subi	r28, 0xD1	; 209
    3018:	d0 40       	sbci	r29, 0x00	; 0
    301a:	19 2f       	mov	r17, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e8       	ldi	r20, 0x80	; 128
    3022:	5f e3       	ldi	r21, 0x3F	; 63
    3024:	0e 94 2c 30 	call	0x6058	; 0x6058 <__cmpsf2>
    3028:	87 ff       	sbrs	r24, 7
    302a:	0c c0       	rjmp	.+24     	; 0x3044 <PrintCSV_H2A+0x310>
		res = 0.0f;
	}
	else
	res = 0.0f;
    302c:	31 2c       	mov	r3, r1
    302e:	c0 53       	subi	r28, 0x30	; 48
    3030:	df 4f       	sbci	r29, 0xFF	; 255
    3032:	18 82       	st	Y, r1
    3034:	c0 5d       	subi	r28, 0xD0	; 208
    3036:	d0 40       	sbci	r29, 0x00	; 0
    3038:	cf 52       	subi	r28, 0x2F	; 47
    303a:	df 4f       	sbci	r29, 0xFF	; 255
    303c:	18 82       	st	Y, r1
    303e:	c1 5d       	subi	r28, 0xD1	; 209
    3040:	d0 40       	sbci	r29, 0x00	; 0
    3042:	10 e0       	ldi	r17, 0x00	; 0
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    3044:	60 91 de 29 	lds	r22, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x72>
    3048:	70 91 df 29 	lds	r23, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x73>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    304c:	80 91 dc 29 	lds	r24, 0x29DC	; 0x8029dc <sSensorDataSnapshot+0x70>
    3050:	90 91 dd 29 	lds	r25, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x71>
    3054:	8c 83       	std	Y+4, r24	; 0x04
    3056:	9d 83       	std	Y+5, r25	; 0x05
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    3058:	c0 90 99 29 	lds	r12, 0x2999	; 0x802999 <sSensorDataSnapshot+0x2d>
    305c:	d0 90 9a 29 	lds	r13, 0x299A	; 0x80299a <sSensorDataSnapshot+0x2e>
    3060:	e0 90 9b 29 	lds	r14, 0x299B	; 0x80299b <sSensorDataSnapshot+0x2f>
    3064:	f0 90 9c 29 	lds	r15, 0x299C	; 0x80299c <sSensorDataSnapshot+0x30>
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    3068:	90 91 bd 29 	lds	r25, 0x29BD	; 0x8029bd <sSensorDataSnapshot+0x51>
    306c:	c6 56       	subi	r28, 0x66	; 102
    306e:	df 4f       	sbci	r29, 0xFF	; 255
    3070:	98 83       	st	Y, r25
    3072:	ca 59       	subi	r28, 0x9A	; 154
    3074:	d0 40       	sbci	r29, 0x00	; 0
    3076:	a0 91 be 29 	lds	r26, 0x29BE	; 0x8029be <sSensorDataSnapshot+0x52>
    307a:	c5 56       	subi	r28, 0x65	; 101
    307c:	df 4f       	sbci	r29, 0xFF	; 255
    307e:	a8 83       	st	Y, r26
    3080:	cb 59       	subi	r28, 0x9B	; 155
    3082:	d0 40       	sbci	r29, 0x00	; 0
    3084:	b0 91 bf 29 	lds	r27, 0x29BF	; 0x8029bf <sSensorDataSnapshot+0x53>
    3088:	c4 56       	subi	r28, 0x64	; 100
    308a:	df 4f       	sbci	r29, 0xFF	; 255
    308c:	b8 83       	st	Y, r27
    308e:	cc 59       	subi	r28, 0x9C	; 156
    3090:	d0 40       	sbci	r29, 0x00	; 0
    3092:	e0 91 c0 29 	lds	r30, 0x29C0	; 0x8029c0 <sSensorDataSnapshot+0x54>
    3096:	c3 56       	subi	r28, 0x63	; 99
    3098:	df 4f       	sbci	r29, 0xFF	; 255
    309a:	e8 83       	st	Y, r30
    309c:	cd 59       	subi	r28, 0x9D	; 157
    309e:	d0 40       	sbci	r29, 0x00	; 0
    30a0:	f0 91 c1 29 	lds	r31, 0x29C1	; 0x8029c1 <sSensorDataSnapshot+0x55>
    30a4:	c2 56       	subi	r28, 0x62	; 98
    30a6:	df 4f       	sbci	r29, 0xFF	; 255
    30a8:	f8 83       	st	Y, r31
    30aa:	ce 59       	subi	r28, 0x9E	; 158
    30ac:	d0 40       	sbci	r29, 0x00	; 0
    30ae:	20 91 c2 29 	lds	r18, 0x29C2	; 0x8029c2 <sSensorDataSnapshot+0x56>
    30b2:	c1 56       	subi	r28, 0x61	; 97
    30b4:	df 4f       	sbci	r29, 0xFF	; 255
    30b6:	28 83       	st	Y, r18
    30b8:	cf 59       	subi	r28, 0x9F	; 159
    30ba:	d0 40       	sbci	r29, 0x00	; 0
    30bc:	30 91 c3 29 	lds	r19, 0x29C3	; 0x8029c3 <sSensorDataSnapshot+0x57>
    30c0:	c0 56       	subi	r28, 0x60	; 96
    30c2:	df 4f       	sbci	r29, 0xFF	; 255
    30c4:	38 83       	st	Y, r19
    30c6:	c0 5a       	subi	r28, 0xA0	; 160
    30c8:	d0 40       	sbci	r29, 0x00	; 0
    30ca:	80 91 c4 29 	lds	r24, 0x29C4	; 0x8029c4 <sSensorDataSnapshot+0x58>
    30ce:	cf 55       	subi	r28, 0x5F	; 95
    30d0:	df 4f       	sbci	r29, 0xFF	; 255
    30d2:	88 83       	st	Y, r24
    30d4:	c1 5a       	subi	r28, 0xA1	; 161
    30d6:	d0 40       	sbci	r29, 0x00	; 0
    30d8:	40 90 0d 2a 	lds	r4, 0x2A0D	; 0x802a0d <sCal+0x28>
    30dc:	50 90 0e 2a 	lds	r5, 0x2A0E	; 0x802a0e <sCal+0x29>
    30e0:	60 90 0f 2a 	lds	r6, 0x2A0F	; 0x802a0f <sCal+0x2a>
    30e4:	70 90 10 2a 	lds	r7, 0x2A10	; 0x802a10 <sCal+0x2b>
    30e8:	80 90 11 2a 	lds	r8, 0x2A11	; 0x802a11 <sCal+0x2c>
    30ec:	90 90 12 2a 	lds	r9, 0x2A12	; 0x802a12 <sCal+0x2d>
    30f0:	a0 90 13 2a 	lds	r10, 0x2A13	; 0x802a13 <sCal+0x2e>
    30f4:	b0 90 14 2a 	lds	r11, 0x2A14	; 0x802a14 <sCal+0x2f>
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    30f8:	80 91 b1 29 	lds	r24, 0x29B1	; 0x8029b1 <sSensorDataSnapshot+0x45>
    30fc:	90 91 b2 29 	lds	r25, 0x29B2	; 0x8029b2 <sSensorDataSnapshot+0x46>
    3100:	a0 91 b3 29 	lds	r26, 0x29B3	; 0x8029b3 <sSensorDataSnapshot+0x47>
    3104:	b0 91 b4 29 	lds	r27, 0x29B4	; 0x8029b4 <sSensorDataSnapshot+0x48>
    3108:	8e 83       	std	Y+6, r24	; 0x06
    310a:	9f 83       	std	Y+7, r25	; 0x07
    310c:	a8 87       	std	Y+8, r26	; 0x08
    310e:	b9 87       	std	Y+9, r27	; 0x09
    3110:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <sCal+0x28>
    3114:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <sCal+0x29>
    3118:	a0 91 0f 2a 	lds	r26, 0x2A0F	; 0x802a0f <sCal+0x2a>
    311c:	b0 91 10 2a 	lds	r27, 0x2A10	; 0x802a10 <sCal+0x2b>
    3120:	8a 87       	std	Y+10, r24	; 0x0a
    3122:	9b 87       	std	Y+11, r25	; 0x0b
    3124:	ac 87       	std	Y+12, r26	; 0x0c
    3126:	bd 87       	std	Y+13, r27	; 0x0d
    3128:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <sCal+0x2c>
    312c:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <sCal+0x2d>
    3130:	a0 91 13 2a 	lds	r26, 0x2A13	; 0x802a13 <sCal+0x2e>
    3134:	b0 91 14 2a 	lds	r27, 0x2A14	; 0x802a14 <sCal+0x2f>
    3138:	8e 87       	std	Y+14, r24	; 0x0e
    313a:	9f 87       	std	Y+15, r25	; 0x0f
    313c:	a8 8b       	std	Y+16, r26	; 0x10
    313e:	b9 8b       	std	Y+17, r27	; 0x11
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    3140:	80 91 a9 29 	lds	r24, 0x29A9	; 0x8029a9 <sSensorDataSnapshot+0x3d>
    3144:	90 91 aa 29 	lds	r25, 0x29AA	; 0x8029aa <sSensorDataSnapshot+0x3e>
    3148:	a0 91 ab 29 	lds	r26, 0x29AB	; 0x8029ab <sSensorDataSnapshot+0x3f>
    314c:	b0 91 ac 29 	lds	r27, 0x29AC	; 0x8029ac <sSensorDataSnapshot+0x40>
    3150:	8a 8b       	std	Y+18, r24	; 0x12
    3152:	9b 8b       	std	Y+19, r25	; 0x13
    3154:	ac 8b       	std	Y+20, r26	; 0x14
    3156:	bd 8b       	std	Y+21, r27	; 0x15
    3158:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <sCal+0x2c>
    315c:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <sCal+0x2d>
    3160:	a0 91 13 2a 	lds	r26, 0x2A13	; 0x802a13 <sCal+0x2e>
    3164:	b0 91 14 2a 	lds	r27, 0x2A14	; 0x802a14 <sCal+0x2f>
    3168:	8e 8b       	std	Y+22, r24	; 0x16
    316a:	9f 8b       	std	Y+23, r25	; 0x17
    316c:	a8 8f       	std	Y+24, r26	; 0x18
    316e:	b9 8f       	std	Y+25, r27	; 0x19
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    3170:	80 91 a5 29 	lds	r24, 0x29A5	; 0x8029a5 <sSensorDataSnapshot+0x39>
    3174:	90 91 a6 29 	lds	r25, 0x29A6	; 0x8029a6 <sSensorDataSnapshot+0x3a>
    3178:	a0 91 a7 29 	lds	r26, 0x29A7	; 0x8029a7 <sSensorDataSnapshot+0x3b>
    317c:	b0 91 a8 29 	lds	r27, 0x29A8	; 0x8029a8 <sSensorDataSnapshot+0x3c>
    3180:	8a 8f       	std	Y+26, r24	; 0x1a
    3182:	9b 8f       	std	Y+27, r25	; 0x1b
    3184:	ac 8f       	std	Y+28, r26	; 0x1c
    3186:	bd 8f       	std	Y+29, r27	; 0x1d
    3188:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <sCal+0x28>
    318c:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <sCal+0x29>
    3190:	a0 91 0f 2a 	lds	r26, 0x2A0F	; 0x802a0f <sCal+0x2a>
    3194:	b0 91 10 2a 	lds	r27, 0x2A10	; 0x802a10 <sCal+0x2b>
    3198:	8e 8f       	std	Y+30, r24	; 0x1e
    319a:	9f 8f       	std	Y+31, r25	; 0x1f
    319c:	a8 a3       	std	Y+32, r26	; 0x20
    319e:	b9 a3       	std	Y+33, r27	; 0x21
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    31a0:	90 91 b5 29 	lds	r25, 0x29B5	; 0x8029b5 <sSensorDataSnapshot+0x49>
    31a4:	ce 55       	subi	r28, 0x5E	; 94
    31a6:	df 4f       	sbci	r29, 0xFF	; 255
    31a8:	98 83       	st	Y, r25
    31aa:	c2 5a       	subi	r28, 0xA2	; 162
    31ac:	d0 40       	sbci	r29, 0x00	; 0
    31ae:	a0 91 b6 29 	lds	r26, 0x29B6	; 0x8029b6 <sSensorDataSnapshot+0x4a>
    31b2:	cd 55       	subi	r28, 0x5D	; 93
    31b4:	df 4f       	sbci	r29, 0xFF	; 255
    31b6:	a8 83       	st	Y, r26
    31b8:	c3 5a       	subi	r28, 0xA3	; 163
    31ba:	d0 40       	sbci	r29, 0x00	; 0
    31bc:	b0 91 b7 29 	lds	r27, 0x29B7	; 0x8029b7 <sSensorDataSnapshot+0x4b>
    31c0:	cc 55       	subi	r28, 0x5C	; 92
    31c2:	df 4f       	sbci	r29, 0xFF	; 255
    31c4:	b8 83       	st	Y, r27
    31c6:	c4 5a       	subi	r28, 0xA4	; 164
    31c8:	d0 40       	sbci	r29, 0x00	; 0
    31ca:	e0 91 b8 29 	lds	r30, 0x29B8	; 0x8029b8 <sSensorDataSnapshot+0x4c>
    31ce:	cb 55       	subi	r28, 0x5B	; 91
    31d0:	df 4f       	sbci	r29, 0xFF	; 255
    31d2:	e8 83       	st	Y, r30
    31d4:	c5 5a       	subi	r28, 0xA5	; 165
    31d6:	d0 40       	sbci	r29, 0x00	; 0
    31d8:	f0 91 b9 29 	lds	r31, 0x29B9	; 0x8029b9 <sSensorDataSnapshot+0x4d>
    31dc:	ca 55       	subi	r28, 0x5A	; 90
    31de:	df 4f       	sbci	r29, 0xFF	; 255
    31e0:	f8 83       	st	Y, r31
    31e2:	c6 5a       	subi	r28, 0xA6	; 166
    31e4:	d0 40       	sbci	r29, 0x00	; 0
    31e6:	20 91 ba 29 	lds	r18, 0x29BA	; 0x8029ba <sSensorDataSnapshot+0x4e>
    31ea:	c9 55       	subi	r28, 0x59	; 89
    31ec:	df 4f       	sbci	r29, 0xFF	; 255
    31ee:	28 83       	st	Y, r18
    31f0:	c7 5a       	subi	r28, 0xA7	; 167
    31f2:	d0 40       	sbci	r29, 0x00	; 0
    31f4:	30 91 bb 29 	lds	r19, 0x29BB	; 0x8029bb <sSensorDataSnapshot+0x4f>
    31f8:	c8 55       	subi	r28, 0x58	; 88
    31fa:	df 4f       	sbci	r29, 0xFF	; 255
    31fc:	38 83       	st	Y, r19
    31fe:	c8 5a       	subi	r28, 0xA8	; 168
    3200:	d0 40       	sbci	r29, 0x00	; 0
    3202:	80 91 bc 29 	lds	r24, 0x29BC	; 0x8029bc <sSensorDataSnapshot+0x50>
    3206:	c7 55       	subi	r28, 0x57	; 87
    3208:	df 4f       	sbci	r29, 0xFF	; 255
    320a:	88 83       	st	Y, r24
    320c:	c9 5a       	subi	r28, 0xA9	; 169
    320e:	d0 40       	sbci	r29, 0x00	; 0
    3210:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    3214:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    3218:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    321c:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    3220:	8a a3       	std	Y+34, r24	; 0x22
    3222:	9b a3       	std	Y+35, r25	; 0x23
    3224:	ac a3       	std	Y+36, r26	; 0x24
    3226:	bd a3       	std	Y+37, r27	; 0x25
    3228:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    322c:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    3230:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    3234:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    3238:	8e a3       	std	Y+38, r24	; 0x26
    323a:	9f a3       	std	Y+39, r25	; 0x27
    323c:	a8 a7       	std	Y+40, r26	; 0x28
    323e:	b9 a7       	std	Y+41, r27	; 0x29
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3240:	80 91 ad 29 	lds	r24, 0x29AD	; 0x8029ad <sSensorDataSnapshot+0x41>
    3244:	90 91 ae 29 	lds	r25, 0x29AE	; 0x8029ae <sSensorDataSnapshot+0x42>
    3248:	a0 91 af 29 	lds	r26, 0x29AF	; 0x8029af <sSensorDataSnapshot+0x43>
    324c:	b0 91 b0 29 	lds	r27, 0x29B0	; 0x8029b0 <sSensorDataSnapshot+0x44>
    3250:	8a a7       	std	Y+42, r24	; 0x2a
    3252:	9b a7       	std	Y+43, r25	; 0x2b
    3254:	ac a7       	std	Y+44, r26	; 0x2c
    3256:	bd a7       	std	Y+45, r27	; 0x2d
    3258:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    325c:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    3260:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    3264:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    3268:	8e a7       	std	Y+46, r24	; 0x2e
    326a:	9f a7       	std	Y+47, r25	; 0x2f
    326c:	a8 ab       	std	Y+48, r26	; 0x30
    326e:	b9 ab       	std	Y+49, r27	; 0x31
    3270:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    3274:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    3278:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    327c:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    3280:	8a ab       	std	Y+50, r24	; 0x32
    3282:	9b ab       	std	Y+51, r25	; 0x33
    3284:	ac ab       	std	Y+52, r26	; 0x34
    3286:	bd ab       	std	Y+53, r27	; 0x35
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    3288:	80 91 a1 29 	lds	r24, 0x29A1	; 0x8029a1 <sSensorDataSnapshot+0x35>
    328c:	90 91 a2 29 	lds	r25, 0x29A2	; 0x8029a2 <sSensorDataSnapshot+0x36>
    3290:	a0 91 a3 29 	lds	r26, 0x29A3	; 0x8029a3 <sSensorDataSnapshot+0x37>
    3294:	b0 91 a4 29 	lds	r27, 0x29A4	; 0x8029a4 <sSensorDataSnapshot+0x38>
    3298:	8e ab       	std	Y+54, r24	; 0x36
    329a:	9f ab       	std	Y+55, r25	; 0x37
    329c:	a8 af       	std	Y+56, r26	; 0x38
    329e:	b9 af       	std	Y+57, r27	; 0x39
    32a0:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    32a4:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    32a8:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    32ac:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    32b0:	8a af       	std	Y+58, r24	; 0x3a
    32b2:	9b af       	std	Y+59, r25	; 0x3b
    32b4:	ac af       	std	Y+60, r26	; 0x3c
    32b6:	bd af       	std	Y+61, r27	; 0x3d
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    32b8:	80 91 9d 29 	lds	r24, 0x299D	; 0x80299d <sSensorDataSnapshot+0x31>
    32bc:	90 91 9e 29 	lds	r25, 0x299E	; 0x80299e <sSensorDataSnapshot+0x32>
    32c0:	a0 91 9f 29 	lds	r26, 0x299F	; 0x80299f <sSensorDataSnapshot+0x33>
    32c4:	b0 91 a0 29 	lds	r27, 0x29A0	; 0x8029a0 <sSensorDataSnapshot+0x34>
    32c8:	22 96       	adiw	r28, 0x02	; 2
    32ca:	8c af       	std	Y+60, r24	; 0x3c
    32cc:	9d af       	std	Y+61, r25	; 0x3d
    32ce:	ae af       	std	Y+62, r26	; 0x3e
    32d0:	bf af       	std	Y+63, r27	; 0x3f
    32d2:	22 97       	sbiw	r28, 0x02	; 2
    32d4:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    32d8:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    32dc:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    32e0:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    32e4:	26 96       	adiw	r28, 0x06	; 6
    32e6:	8c af       	std	Y+60, r24	; 0x3c
    32e8:	9d af       	std	Y+61, r25	; 0x3d
    32ea:	ae af       	std	Y+62, r26	; 0x3e
    32ec:	bf af       	std	Y+63, r27	; 0x3f
    32ee:	26 97       	sbiw	r28, 0x06	; 6
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
    32f0:	90 91 8c 29 	lds	r25, 0x298C	; 0x80298c <sSensorDataSnapshot+0x20>
    32f4:	c6 55       	subi	r28, 0x56	; 86
    32f6:	df 4f       	sbci	r29, 0xFF	; 255
    32f8:	98 83       	st	Y, r25
    32fa:	ca 5a       	subi	r28, 0xAA	; 170
    32fc:	d0 40       	sbci	r29, 0x00	; 0
    32fe:	a0 91 8d 29 	lds	r26, 0x298D	; 0x80298d <sSensorDataSnapshot+0x21>
    3302:	c5 55       	subi	r28, 0x55	; 85
    3304:	df 4f       	sbci	r29, 0xFF	; 255
    3306:	a8 83       	st	Y, r26
    3308:	cb 5a       	subi	r28, 0xAB	; 171
    330a:	d0 40       	sbci	r29, 0x00	; 0
    330c:	b0 91 8e 29 	lds	r27, 0x298E	; 0x80298e <sSensorDataSnapshot+0x22>
    3310:	c4 55       	subi	r28, 0x54	; 84
    3312:	df 4f       	sbci	r29, 0xFF	; 255
    3314:	b8 83       	st	Y, r27
    3316:	cc 5a       	subi	r28, 0xAC	; 172
    3318:	d0 40       	sbci	r29, 0x00	; 0
    331a:	e0 91 8f 29 	lds	r30, 0x298F	; 0x80298f <sSensorDataSnapshot+0x23>
    331e:	c3 55       	subi	r28, 0x53	; 83
    3320:	df 4f       	sbci	r29, 0xFF	; 255
    3322:	e8 83       	st	Y, r30
    3324:	cd 5a       	subi	r28, 0xAD	; 173
    3326:	d0 40       	sbci	r29, 0x00	; 0
    3328:	f0 91 90 29 	lds	r31, 0x2990	; 0x802990 <sSensorDataSnapshot+0x24>
    332c:	c2 55       	subi	r28, 0x52	; 82
    332e:	df 4f       	sbci	r29, 0xFF	; 255
    3330:	f8 83       	st	Y, r31
    3332:	ce 5a       	subi	r28, 0xAE	; 174
    3334:	d0 40       	sbci	r29, 0x00	; 0
    3336:	20 91 91 29 	lds	r18, 0x2991	; 0x802991 <sSensorDataSnapshot+0x25>
    333a:	c1 55       	subi	r28, 0x51	; 81
    333c:	df 4f       	sbci	r29, 0xFF	; 255
    333e:	28 83       	st	Y, r18
    3340:	cf 5a       	subi	r28, 0xAF	; 175
    3342:	d0 40       	sbci	r29, 0x00	; 0
    3344:	30 91 92 29 	lds	r19, 0x2992	; 0x802992 <sSensorDataSnapshot+0x26>
    3348:	c0 55       	subi	r28, 0x50	; 80
    334a:	df 4f       	sbci	r29, 0xFF	; 255
    334c:	38 83       	st	Y, r19
    334e:	c0 5b       	subi	r28, 0xB0	; 176
    3350:	d0 40       	sbci	r29, 0x00	; 0
    3352:	80 91 93 29 	lds	r24, 0x2993	; 0x802993 <sSensorDataSnapshot+0x27>
    3356:	cf 54       	subi	r28, 0x4F	; 79
    3358:	df 4f       	sbci	r29, 0xFF	; 255
    335a:	88 83       	st	Y, r24
    335c:	c1 5b       	subi	r28, 0xB1	; 177
    335e:	d0 40       	sbci	r29, 0x00	; 0
    3360:	80 91 f5 29 	lds	r24, 0x29F5	; 0x8029f5 <sCal+0x10>
    3364:	90 91 f6 29 	lds	r25, 0x29F6	; 0x8029f6 <sCal+0x11>
    3368:	a0 91 f7 29 	lds	r26, 0x29F7	; 0x8029f7 <sCal+0x12>
    336c:	b0 91 f8 29 	lds	r27, 0x29F8	; 0x8029f8 <sCal+0x13>
    3370:	2a 96       	adiw	r28, 0x0a	; 10
    3372:	8c af       	std	Y+60, r24	; 0x3c
    3374:	9d af       	std	Y+61, r25	; 0x3d
    3376:	ae af       	std	Y+62, r26	; 0x3e
    3378:	bf af       	std	Y+63, r27	; 0x3f
    337a:	2a 97       	sbiw	r28, 0x0a	; 10
    337c:	80 91 f9 29 	lds	r24, 0x29F9	; 0x8029f9 <sCal+0x14>
    3380:	90 91 fa 29 	lds	r25, 0x29FA	; 0x8029fa <sCal+0x15>
    3384:	a0 91 fb 29 	lds	r26, 0x29FB	; 0x8029fb <sCal+0x16>
    3388:	b0 91 fc 29 	lds	r27, 0x29FC	; 0x8029fc <sCal+0x17>
    338c:	2e 96       	adiw	r28, 0x0e	; 14
    338e:	8c af       	std	Y+60, r24	; 0x3c
    3390:	9d af       	std	Y+61, r25	; 0x3d
    3392:	ae af       	std	Y+62, r26	; 0x3e
    3394:	bf af       	std	Y+63, r27	; 0x3f
    3396:	2e 97       	sbiw	r28, 0x0e	; 14
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
    3398:	80 91 80 29 	lds	r24, 0x2980	; 0x802980 <sSensorDataSnapshot+0x14>
    339c:	90 91 81 29 	lds	r25, 0x2981	; 0x802981 <sSensorDataSnapshot+0x15>
    33a0:	a0 91 82 29 	lds	r26, 0x2982	; 0x802982 <sSensorDataSnapshot+0x16>
    33a4:	b0 91 83 29 	lds	r27, 0x2983	; 0x802983 <sSensorDataSnapshot+0x17>
    33a8:	62 96       	adiw	r28, 0x12	; 18
    33aa:	8c af       	std	Y+60, r24	; 0x3c
    33ac:	9d af       	std	Y+61, r25	; 0x3d
    33ae:	ae af       	std	Y+62, r26	; 0x3e
    33b0:	bf af       	std	Y+63, r27	; 0x3f
    33b2:	62 97       	sbiw	r28, 0x12	; 18
    33b4:	80 91 f5 29 	lds	r24, 0x29F5	; 0x8029f5 <sCal+0x10>
    33b8:	90 91 f6 29 	lds	r25, 0x29F6	; 0x8029f6 <sCal+0x11>
    33bc:	a0 91 f7 29 	lds	r26, 0x29F7	; 0x8029f7 <sCal+0x12>
    33c0:	b0 91 f8 29 	lds	r27, 0x29F8	; 0x8029f8 <sCal+0x13>
    33c4:	66 96       	adiw	r28, 0x16	; 22
    33c6:	8c af       	std	Y+60, r24	; 0x3c
    33c8:	9d af       	std	Y+61, r25	; 0x3d
    33ca:	ae af       	std	Y+62, r26	; 0x3e
    33cc:	bf af       	std	Y+63, r27	; 0x3f
    33ce:	66 97       	sbiw	r28, 0x16	; 22
    33d0:	80 91 f9 29 	lds	r24, 0x29F9	; 0x8029f9 <sCal+0x14>
    33d4:	90 91 fa 29 	lds	r25, 0x29FA	; 0x8029fa <sCal+0x15>
    33d8:	a0 91 fb 29 	lds	r26, 0x29FB	; 0x8029fb <sCal+0x16>
    33dc:	b0 91 fc 29 	lds	r27, 0x29FC	; 0x8029fc <sCal+0x17>
    33e0:	6a 96       	adiw	r28, 0x1a	; 26
    33e2:	8c af       	std	Y+60, r24	; 0x3c
    33e4:	9d af       	std	Y+61, r25	; 0x3d
    33e6:	ae af       	std	Y+62, r26	; 0x3e
    33e8:	bf af       	std	Y+63, r27	; 0x3f
    33ea:	6a 97       	sbiw	r28, 0x1a	; 26
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
    33ec:	80 91 78 29 	lds	r24, 0x2978	; 0x802978 <sSensorDataSnapshot+0xc>
    33f0:	90 91 79 29 	lds	r25, 0x2979	; 0x802979 <sSensorDataSnapshot+0xd>
    33f4:	a0 91 7a 29 	lds	r26, 0x297A	; 0x80297a <sSensorDataSnapshot+0xe>
    33f8:	b0 91 7b 29 	lds	r27, 0x297B	; 0x80297b <sSensorDataSnapshot+0xf>
    33fc:	6e 96       	adiw	r28, 0x1e	; 30
    33fe:	8c af       	std	Y+60, r24	; 0x3c
    3400:	9d af       	std	Y+61, r25	; 0x3d
    3402:	ae af       	std	Y+62, r26	; 0x3e
    3404:	bf af       	std	Y+63, r27	; 0x3f
    3406:	6e 97       	sbiw	r28, 0x1e	; 30
    3408:	80 91 f9 29 	lds	r24, 0x29F9	; 0x8029f9 <sCal+0x14>
    340c:	90 91 fa 29 	lds	r25, 0x29FA	; 0x8029fa <sCal+0x15>
    3410:	a0 91 fb 29 	lds	r26, 0x29FB	; 0x8029fb <sCal+0x16>
    3414:	b0 91 fc 29 	lds	r27, 0x29FC	; 0x8029fc <sCal+0x17>
    3418:	a2 96       	adiw	r28, 0x22	; 34
    341a:	8c af       	std	Y+60, r24	; 0x3c
    341c:	9d af       	std	Y+61, r25	; 0x3d
    341e:	ae af       	std	Y+62, r26	; 0x3e
    3420:	bf af       	std	Y+63, r27	; 0x3f
    3422:	a2 97       	sbiw	r28, 0x22	; 34
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
    3424:	80 91 74 29 	lds	r24, 0x2974	; 0x802974 <sSensorDataSnapshot+0x8>
    3428:	90 91 75 29 	lds	r25, 0x2975	; 0x802975 <sSensorDataSnapshot+0x9>
    342c:	a0 91 76 29 	lds	r26, 0x2976	; 0x802976 <sSensorDataSnapshot+0xa>
    3430:	b0 91 77 29 	lds	r27, 0x2977	; 0x802977 <sSensorDataSnapshot+0xb>
    3434:	a6 96       	adiw	r28, 0x26	; 38
    3436:	8c af       	std	Y+60, r24	; 0x3c
    3438:	9d af       	std	Y+61, r25	; 0x3d
    343a:	ae af       	std	Y+62, r26	; 0x3e
    343c:	bf af       	std	Y+63, r27	; 0x3f
    343e:	a6 97       	sbiw	r28, 0x26	; 38
    3440:	80 91 f5 29 	lds	r24, 0x29F5	; 0x8029f5 <sCal+0x10>
    3444:	90 91 f6 29 	lds	r25, 0x29F6	; 0x8029f6 <sCal+0x11>
    3448:	a0 91 f7 29 	lds	r26, 0x29F7	; 0x8029f7 <sCal+0x12>
    344c:	b0 91 f8 29 	lds	r27, 0x29F8	; 0x8029f8 <sCal+0x13>
    3450:	aa 96       	adiw	r28, 0x2a	; 42
    3452:	8c af       	std	Y+60, r24	; 0x3c
    3454:	9d af       	std	Y+61, r25	; 0x3d
    3456:	ae af       	std	Y+62, r26	; 0x3e
    3458:	bf af       	std	Y+63, r27	; 0x3f
    345a:	aa 97       	sbiw	r28, 0x2a	; 42
	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
    345c:	90 91 84 29 	lds	r25, 0x2984	; 0x802984 <sSensorDataSnapshot+0x18>
    3460:	ce 54       	subi	r28, 0x4E	; 78
    3462:	df 4f       	sbci	r29, 0xFF	; 255
    3464:	98 83       	st	Y, r25
    3466:	c2 5b       	subi	r28, 0xB2	; 178
    3468:	d0 40       	sbci	r29, 0x00	; 0
    346a:	a0 91 85 29 	lds	r26, 0x2985	; 0x802985 <sSensorDataSnapshot+0x19>
    346e:	cd 54       	subi	r28, 0x4D	; 77
    3470:	df 4f       	sbci	r29, 0xFF	; 255
    3472:	a8 83       	st	Y, r26
    3474:	c3 5b       	subi	r28, 0xB3	; 179
    3476:	d0 40       	sbci	r29, 0x00	; 0
    3478:	b0 91 86 29 	lds	r27, 0x2986	; 0x802986 <sSensorDataSnapshot+0x1a>
    347c:	cc 54       	subi	r28, 0x4C	; 76
    347e:	df 4f       	sbci	r29, 0xFF	; 255
    3480:	b8 83       	st	Y, r27
    3482:	c4 5b       	subi	r28, 0xB4	; 180
    3484:	d0 40       	sbci	r29, 0x00	; 0
    3486:	e0 91 87 29 	lds	r30, 0x2987	; 0x802987 <sSensorDataSnapshot+0x1b>
    348a:	cb 54       	subi	r28, 0x4B	; 75
    348c:	df 4f       	sbci	r29, 0xFF	; 255
    348e:	e8 83       	st	Y, r30
    3490:	c5 5b       	subi	r28, 0xB5	; 181
    3492:	d0 40       	sbci	r29, 0x00	; 0
    3494:	f0 91 88 29 	lds	r31, 0x2988	; 0x802988 <sSensorDataSnapshot+0x1c>
    3498:	ca 54       	subi	r28, 0x4A	; 74
    349a:	df 4f       	sbci	r29, 0xFF	; 255
    349c:	f8 83       	st	Y, r31
    349e:	c6 5b       	subi	r28, 0xB6	; 182
    34a0:	d0 40       	sbci	r29, 0x00	; 0
    34a2:	20 91 89 29 	lds	r18, 0x2989	; 0x802989 <sSensorDataSnapshot+0x1d>
    34a6:	c9 54       	subi	r28, 0x49	; 73
    34a8:	df 4f       	sbci	r29, 0xFF	; 255
    34aa:	28 83       	st	Y, r18
    34ac:	c7 5b       	subi	r28, 0xB7	; 183
    34ae:	d0 40       	sbci	r29, 0x00	; 0
    34b0:	30 91 8a 29 	lds	r19, 0x298A	; 0x80298a <sSensorDataSnapshot+0x1e>
    34b4:	c8 54       	subi	r28, 0x48	; 72
    34b6:	df 4f       	sbci	r29, 0xFF	; 255
    34b8:	38 83       	st	Y, r19
    34ba:	c8 5b       	subi	r28, 0xB8	; 184
    34bc:	d0 40       	sbci	r29, 0x00	; 0
    34be:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <sSensorDataSnapshot+0x1f>
    34c2:	c7 54       	subi	r28, 0x47	; 71
    34c4:	df 4f       	sbci	r29, 0xFF	; 255
    34c6:	88 83       	st	Y, r24
    34c8:	c9 5b       	subi	r28, 0xB9	; 185
    34ca:	d0 40       	sbci	r29, 0x00	; 0
    34cc:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <sCal+0x8>
    34d0:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <sCal+0x9>
    34d4:	a0 91 ef 29 	lds	r26, 0x29EF	; 0x8029ef <sCal+0xa>
    34d8:	b0 91 f0 29 	lds	r27, 0x29F0	; 0x8029f0 <sCal+0xb>
    34dc:	ae 96       	adiw	r28, 0x2e	; 46
    34de:	8c af       	std	Y+60, r24	; 0x3c
    34e0:	9d af       	std	Y+61, r25	; 0x3d
    34e2:	ae af       	std	Y+62, r26	; 0x3e
    34e4:	bf af       	std	Y+63, r27	; 0x3f
    34e6:	ae 97       	sbiw	r28, 0x2e	; 46
    34e8:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <sCal+0xc>
    34ec:	90 91 f2 29 	lds	r25, 0x29F2	; 0x8029f2 <sCal+0xd>
    34f0:	a0 91 f3 29 	lds	r26, 0x29F3	; 0x8029f3 <sCal+0xe>
    34f4:	b0 91 f4 29 	lds	r27, 0x29F4	; 0x8029f4 <sCal+0xf>
    34f8:	e2 96       	adiw	r28, 0x32	; 50
    34fa:	8c af       	std	Y+60, r24	; 0x3c
    34fc:	9d af       	std	Y+61, r25	; 0x3d
    34fe:	ae af       	std	Y+62, r26	; 0x3e
    3500:	bf af       	std	Y+63, r27	; 0x3f
    3502:	e2 97       	sbiw	r28, 0x32	; 50

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
    3504:	80 91 7c 29 	lds	r24, 0x297C	; 0x80297c <sSensorDataSnapshot+0x10>
    3508:	90 91 7d 29 	lds	r25, 0x297D	; 0x80297d <sSensorDataSnapshot+0x11>
    350c:	a0 91 7e 29 	lds	r26, 0x297E	; 0x80297e <sSensorDataSnapshot+0x12>
    3510:	b0 91 7f 29 	lds	r27, 0x297F	; 0x80297f <sSensorDataSnapshot+0x13>
    3514:	e6 96       	adiw	r28, 0x36	; 54
    3516:	8c af       	std	Y+60, r24	; 0x3c
    3518:	9d af       	std	Y+61, r25	; 0x3d
    351a:	ae af       	std	Y+62, r26	; 0x3e
    351c:	bf af       	std	Y+63, r27	; 0x3f
    351e:	e6 97       	sbiw	r28, 0x36	; 54
    3520:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <sCal+0x8>
    3524:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <sCal+0x9>
    3528:	a0 91 ef 29 	lds	r26, 0x29EF	; 0x8029ef <sCal+0xa>
    352c:	b0 91 f0 29 	lds	r27, 0x29F0	; 0x8029f0 <sCal+0xb>
    3530:	ea 96       	adiw	r28, 0x3a	; 58
    3532:	8c af       	std	Y+60, r24	; 0x3c
    3534:	9d af       	std	Y+61, r25	; 0x3d
    3536:	ae af       	std	Y+62, r26	; 0x3e
    3538:	bf af       	std	Y+63, r27	; 0x3f
    353a:	ea 97       	sbiw	r28, 0x3a	; 58
    353c:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <sCal+0xc>
    3540:	90 91 f2 29 	lds	r25, 0x29F2	; 0x8029f2 <sCal+0xd>
    3544:	a0 91 f3 29 	lds	r26, 0x29F3	; 0x8029f3 <sCal+0xe>
    3548:	b0 91 f4 29 	lds	r27, 0x29F4	; 0x8029f4 <sCal+0xf>
    354c:	ee 96       	adiw	r28, 0x3e	; 62
    354e:	8c af       	std	Y+60, r24	; 0x3c
    3550:	9d af       	std	Y+61, r25	; 0x3d
    3552:	ae af       	std	Y+62, r26	; 0x3e
    3554:	bf af       	std	Y+63, r27	; 0x3f
    3556:	ee 97       	sbiw	r28, 0x3e	; 62
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
    3558:	80 91 70 29 	lds	r24, 0x2970	; 0x802970 <sSensorDataSnapshot+0x4>
    355c:	90 91 71 29 	lds	r25, 0x2971	; 0x802971 <sSensorDataSnapshot+0x5>
    3560:	a0 91 72 29 	lds	r26, 0x2972	; 0x802972 <sSensorDataSnapshot+0x6>
    3564:	b0 91 73 29 	lds	r27, 0x2973	; 0x802973 <sSensorDataSnapshot+0x7>
    3568:	c2 58       	subi	r28, 0x82	; 130
    356a:	df 4f       	sbci	r29, 0xFF	; 255
    356c:	88 83       	st	Y, r24
    356e:	99 83       	std	Y+1, r25	; 0x01
    3570:	aa 83       	std	Y+2, r26	; 0x02
    3572:	bb 83       	std	Y+3, r27	; 0x03
    3574:	ce 57       	subi	r28, 0x7E	; 126
    3576:	d0 40       	sbci	r29, 0x00	; 0
    3578:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <sCal+0xc>
    357c:	90 91 f2 29 	lds	r25, 0x29F2	; 0x8029f2 <sCal+0xd>
    3580:	a0 91 f3 29 	lds	r26, 0x29F3	; 0x8029f3 <sCal+0xe>
    3584:	b0 91 f4 29 	lds	r27, 0x29F4	; 0x8029f4 <sCal+0xf>
    3588:	ce 57       	subi	r28, 0x7E	; 126
    358a:	df 4f       	sbci	r29, 0xFF	; 255
    358c:	88 83       	st	Y, r24
    358e:	99 83       	std	Y+1, r25	; 0x01
    3590:	aa 83       	std	Y+2, r26	; 0x02
    3592:	bb 83       	std	Y+3, r27	; 0x03
    3594:	c2 58       	subi	r28, 0x82	; 130
    3596:	d0 40       	sbci	r29, 0x00	; 0
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
    3598:	80 91 6c 29 	lds	r24, 0x296C	; 0x80296c <sSensorDataSnapshot>
    359c:	90 91 6d 29 	lds	r25, 0x296D	; 0x80296d <sSensorDataSnapshot+0x1>
    35a0:	a0 91 6e 29 	lds	r26, 0x296E	; 0x80296e <sSensorDataSnapshot+0x2>
    35a4:	b0 91 6f 29 	lds	r27, 0x296F	; 0x80296f <sSensorDataSnapshot+0x3>
    35a8:	ca 57       	subi	r28, 0x7A	; 122
    35aa:	df 4f       	sbci	r29, 0xFF	; 255
    35ac:	88 83       	st	Y, r24
    35ae:	99 83       	std	Y+1, r25	; 0x01
    35b0:	aa 83       	std	Y+2, r26	; 0x02
    35b2:	bb 83       	std	Y+3, r27	; 0x03
    35b4:	c6 58       	subi	r28, 0x86	; 134
    35b6:	d0 40       	sbci	r29, 0x00	; 0
    35b8:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <sCal+0x8>
    35bc:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <sCal+0x9>
    35c0:	a0 91 ef 29 	lds	r26, 0x29EF	; 0x8029ef <sCal+0xa>
    35c4:	b0 91 f0 29 	lds	r27, 0x29F0	; 0x8029f0 <sCal+0xb>
    35c8:	c6 57       	subi	r28, 0x76	; 118
    35ca:	df 4f       	sbci	r29, 0xFF	; 255
    35cc:	88 83       	st	Y, r24
    35ce:	99 83       	std	Y+1, r25	; 0x01
    35d0:	aa 83       	std	Y+2, r26	; 0x02
    35d2:	bb 83       	std	Y+3, r27	; 0x03
    35d4:	ca 58       	subi	r28, 0x8A	; 138
    35d6:	d0 40       	sbci	r29, 0x00	; 0
void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    35d8:	80 91 68 29 	lds	r24, 0x2968	; 0x802968 <sSessionCycleCountSnapshot>
    35dc:	90 91 69 29 	lds	r25, 0x2969	; 0x802969 <sSessionCycleCountSnapshot+0x1>
    35e0:	a0 91 6a 29 	lds	r26, 0x296A	; 0x80296a <sSessionCycleCountSnapshot+0x2>
    35e4:	b0 91 6b 29 	lds	r27, 0x296B	; 0x80296b <sSessionCycleCountSnapshot+0x3>
    35e8:	c2 57       	subi	r28, 0x72	; 114
    35ea:	df 4f       	sbci	r29, 0xFF	; 255
    35ec:	88 83       	st	Y, r24
    35ee:	99 83       	std	Y+1, r25	; 0x01
    35f0:	aa 83       	std	Y+2, r26	; 0x02
    35f2:	bb 83       	std	Y+3, r27	; 0x03
    35f4:	ce 58       	subi	r28, 0x8E	; 142
    35f6:	d0 40       	sbci	r29, 0x00	; 0

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    35f8:	c1 54       	subi	r28, 0x41	; 65
    35fa:	df 4f       	sbci	r29, 0xFF	; 255
    35fc:	98 81       	ld	r25, Y
    35fe:	cf 5b       	subi	r28, 0xBF	; 191
    3600:	d0 40       	sbci	r29, 0x00	; 0
    3602:	9f 93       	push	r25
    3604:	c2 54       	subi	r28, 0x42	; 66
    3606:	df 4f       	sbci	r29, 0xFF	; 255
    3608:	a8 81       	ld	r26, Y
    360a:	ce 5b       	subi	r28, 0xBE	; 190
    360c:	d0 40       	sbci	r29, 0x00	; 0
    360e:	af 93       	push	r26
    3610:	c3 54       	subi	r28, 0x43	; 67
    3612:	df 4f       	sbci	r29, 0xFF	; 255
    3614:	b8 81       	ld	r27, Y
    3616:	cd 5b       	subi	r28, 0xBD	; 189
    3618:	d0 40       	sbci	r29, 0x00	; 0
    361a:	bf 93       	push	r27
    361c:	c4 54       	subi	r28, 0x44	; 68
    361e:	df 4f       	sbci	r29, 0xFF	; 255
    3620:	e8 81       	ld	r30, Y
    3622:	cc 5b       	subi	r28, 0xBC	; 188
    3624:	d0 40       	sbci	r29, 0x00	; 0
    3626:	ef 93       	push	r30
    3628:	cd 56       	subi	r28, 0x6D	; 109
    362a:	df 4f       	sbci	r29, 0xFF	; 255
    362c:	f8 81       	ld	r31, Y
    362e:	c3 59       	subi	r28, 0x93	; 147
    3630:	d0 40       	sbci	r29, 0x00	; 0
    3632:	ff 93       	push	r31
    3634:	ce 56       	subi	r28, 0x6E	; 110
    3636:	df 4f       	sbci	r29, 0xFF	; 255
    3638:	28 81       	ld	r18, Y
    363a:	c2 59       	subi	r28, 0x92	; 146
    363c:	d0 40       	sbci	r29, 0x00	; 0
    363e:	2f 93       	push	r18
    3640:	3a 81       	ldd	r19, Y+2	; 0x02
    3642:	3f 93       	push	r19
    3644:	89 81       	ldd	r24, Y+1	; 0x01
    3646:	8f 93       	push	r24
    3648:	2f 92       	push	r2
    364a:	0f 93       	push	r16
    364c:	1f 92       	push	r1
    364e:	9b 81       	ldd	r25, Y+3	; 0x03
    3650:	9f 93       	push	r25
    3652:	cd 53       	subi	r28, 0x3D	; 61
    3654:	df 4f       	sbci	r29, 0xFF	; 255
    3656:	a8 81       	ld	r26, Y
    3658:	c3 5c       	subi	r28, 0xC3	; 195
    365a:	d0 40       	sbci	r29, 0x00	; 0
    365c:	af 93       	push	r26
    365e:	ce 53       	subi	r28, 0x3E	; 62
    3660:	df 4f       	sbci	r29, 0xFF	; 255
    3662:	b8 81       	ld	r27, Y
    3664:	c2 5c       	subi	r28, 0xC2	; 194
    3666:	d0 40       	sbci	r29, 0x00	; 0
    3668:	bf 93       	push	r27
    366a:	cf 53       	subi	r28, 0x3F	; 63
    366c:	df 4f       	sbci	r29, 0xFF	; 255
    366e:	e8 81       	ld	r30, Y
    3670:	c1 5c       	subi	r28, 0xC1	; 193
    3672:	d0 40       	sbci	r29, 0x00	; 0
    3674:	ef 93       	push	r30
    3676:	c0 54       	subi	r28, 0x40	; 64
    3678:	df 4f       	sbci	r29, 0xFF	; 255
    367a:	f8 81       	ld	r31, Y
    367c:	c0 5c       	subi	r28, 0xC0	; 192
    367e:	d0 40       	sbci	r29, 0x00	; 0
    3680:	ff 93       	push	r31
    3682:	cb 56       	subi	r28, 0x6B	; 107
    3684:	df 4f       	sbci	r29, 0xFF	; 255
    3686:	28 81       	ld	r18, Y
    3688:	c5 59       	subi	r28, 0x95	; 149
    368a:	d0 40       	sbci	r29, 0x00	; 0
    368c:	2f 93       	push	r18
    368e:	cc 56       	subi	r28, 0x6C	; 108
    3690:	df 4f       	sbci	r29, 0xFF	; 255
    3692:	38 81       	ld	r19, Y
    3694:	c4 59       	subi	r28, 0x94	; 148
    3696:	d0 40       	sbci	r29, 0x00	; 0
    3698:	3f 93       	push	r19
    369a:	c9 53       	subi	r28, 0x39	; 57
    369c:	df 4f       	sbci	r29, 0xFF	; 255
    369e:	88 81       	ld	r24, Y
    36a0:	c7 5c       	subi	r28, 0xC7	; 199
    36a2:	d0 40       	sbci	r29, 0x00	; 0
    36a4:	8f 93       	push	r24
    36a6:	ca 53       	subi	r28, 0x3A	; 58
    36a8:	df 4f       	sbci	r29, 0xFF	; 255
    36aa:	98 81       	ld	r25, Y
    36ac:	c6 5c       	subi	r28, 0xC6	; 198
    36ae:	d0 40       	sbci	r29, 0x00	; 0
    36b0:	9f 93       	push	r25
    36b2:	cb 53       	subi	r28, 0x3B	; 59
    36b4:	df 4f       	sbci	r29, 0xFF	; 255
    36b6:	a8 81       	ld	r26, Y
    36b8:	c5 5c       	subi	r28, 0xC5	; 197
    36ba:	d0 40       	sbci	r29, 0x00	; 0
    36bc:	af 93       	push	r26
    36be:	cc 53       	subi	r28, 0x3C	; 60
    36c0:	df 4f       	sbci	r29, 0xFF	; 255
    36c2:	b8 81       	ld	r27, Y
    36c4:	c4 5c       	subi	r28, 0xC4	; 196
    36c6:	d0 40       	sbci	r29, 0x00	; 0
    36c8:	bf 93       	push	r27
    36ca:	c9 56       	subi	r28, 0x69	; 105
    36cc:	df 4f       	sbci	r29, 0xFF	; 255
    36ce:	e8 81       	ld	r30, Y
    36d0:	c7 59       	subi	r28, 0x97	; 151
    36d2:	d0 40       	sbci	r29, 0x00	; 0
    36d4:	ef 93       	push	r30
    36d6:	ca 56       	subi	r28, 0x6A	; 106
    36d8:	df 4f       	sbci	r29, 0xFF	; 255
    36da:	f8 81       	ld	r31, Y
    36dc:	c6 59       	subi	r28, 0x96	; 150
    36de:	d0 40       	sbci	r29, 0x00	; 0
    36e0:	ff 93       	push	r31
    36e2:	c5 53       	subi	r28, 0x35	; 53
    36e4:	df 4f       	sbci	r29, 0xFF	; 255
    36e6:	28 81       	ld	r18, Y
    36e8:	cb 5c       	subi	r28, 0xCB	; 203
    36ea:	d0 40       	sbci	r29, 0x00	; 0
    36ec:	2f 93       	push	r18
    36ee:	c6 53       	subi	r28, 0x36	; 54
    36f0:	df 4f       	sbci	r29, 0xFF	; 255
    36f2:	38 81       	ld	r19, Y
    36f4:	ca 5c       	subi	r28, 0xCA	; 202
    36f6:	d0 40       	sbci	r29, 0x00	; 0
    36f8:	3f 93       	push	r19
    36fa:	c7 53       	subi	r28, 0x37	; 55
    36fc:	df 4f       	sbci	r29, 0xFF	; 255
    36fe:	88 81       	ld	r24, Y
    3700:	c9 5c       	subi	r28, 0xC9	; 201
    3702:	d0 40       	sbci	r29, 0x00	; 0
    3704:	8f 93       	push	r24
    3706:	c8 53       	subi	r28, 0x38	; 56
    3708:	df 4f       	sbci	r29, 0xFF	; 255
    370a:	98 81       	ld	r25, Y
    370c:	c8 5c       	subi	r28, 0xC8	; 200
    370e:	d0 40       	sbci	r29, 0x00	; 0
    3710:	9f 93       	push	r25
    3712:	c7 56       	subi	r28, 0x67	; 103
    3714:	df 4f       	sbci	r29, 0xFF	; 255
    3716:	a8 81       	ld	r26, Y
    3718:	c9 59       	subi	r28, 0x99	; 153
    371a:	d0 40       	sbci	r29, 0x00	; 0
    371c:	af 93       	push	r26
    371e:	c8 56       	subi	r28, 0x68	; 104
    3720:	df 4f       	sbci	r29, 0xFF	; 255
    3722:	b8 81       	ld	r27, Y
    3724:	c8 59       	subi	r28, 0x98	; 152
    3726:	d0 40       	sbci	r29, 0x00	; 0
    3728:	bf 93       	push	r27
    372a:	c1 53       	subi	r28, 0x31	; 49
    372c:	df 4f       	sbci	r29, 0xFF	; 255
    372e:	e8 81       	ld	r30, Y
    3730:	cf 5c       	subi	r28, 0xCF	; 207
    3732:	d0 40       	sbci	r29, 0x00	; 0
    3734:	ef 93       	push	r30
    3736:	c2 53       	subi	r28, 0x32	; 50
    3738:	df 4f       	sbci	r29, 0xFF	; 255
    373a:	f8 81       	ld	r31, Y
    373c:	ce 5c       	subi	r28, 0xCE	; 206
    373e:	d0 40       	sbci	r29, 0x00	; 0
    3740:	ff 93       	push	r31
    3742:	c3 53       	subi	r28, 0x33	; 51
    3744:	df 4f       	sbci	r29, 0xFF	; 255
    3746:	28 81       	ld	r18, Y
    3748:	cd 5c       	subi	r28, 0xCD	; 205
    374a:	d0 40       	sbci	r29, 0x00	; 0
    374c:	2f 93       	push	r18
    374e:	c4 53       	subi	r28, 0x34	; 52
    3750:	df 4f       	sbci	r29, 0xFF	; 255
    3752:	38 81       	ld	r19, Y
    3754:	cc 5c       	subi	r28, 0xCC	; 204
    3756:	d0 40       	sbci	r29, 0x00	; 0
    3758:	3f 93       	push	r19
    375a:	1f 93       	push	r17
    375c:	cf 52       	subi	r28, 0x2F	; 47
    375e:	df 4f       	sbci	r29, 0xFF	; 255
    3760:	88 81       	ld	r24, Y
    3762:	c1 5d       	subi	r28, 0xD1	; 209
    3764:	d0 40       	sbci	r29, 0x00	; 0
    3766:	8f 93       	push	r24
    3768:	c0 53       	subi	r28, 0x30	; 48
    376a:	df 4f       	sbci	r29, 0xFF	; 255
    376c:	98 81       	ld	r25, Y
    376e:	c0 5d       	subi	r28, 0xD0	; 208
    3770:	d0 40       	sbci	r29, 0x00	; 0
    3772:	9f 93       	push	r25
    3774:	3f 92       	push	r3
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    377e:	23 e3       	ldi	r18, 0x33	; 51
    3780:	33 e3       	ldi	r19, 0x33	; 51
    3782:	43 e2       	ldi	r20, 0x23	; 35
    3784:	54 e4       	ldi	r21, 0x44	; 68
    3786:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    378a:	9f 93       	push	r25
    378c:	8f 93       	push	r24
    378e:	7f 93       	push	r23
    3790:	6f 93       	push	r22
    3792:	ac 81       	ldd	r26, Y+4	; 0x04
    3794:	bd 81       	ldd	r27, Y+5	; 0x05
    3796:	bd 01       	movw	r22, r26
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    37a0:	27 e1       	ldi	r18, 0x17	; 23
    37a2:	37 eb       	ldi	r19, 0xB7	; 183
    37a4:	41 ed       	ldi	r20, 0xD1	; 209
    37a6:	5e e3       	ldi	r21, 0x3E	; 62
    37a8:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    37ac:	9f 93       	push	r25
    37ae:	8f 93       	push	r24
    37b0:	7f 93       	push	r23
    37b2:	6f 93       	push	r22
    37b4:	c7 01       	movw	r24, r14
    37b6:	b6 01       	movw	r22, r12
    37b8:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    37bc:	20 e0       	ldi	r18, 0x00	; 0
    37be:	30 e0       	ldi	r19, 0x00	; 0
    37c0:	40 e2       	ldi	r20, 0x20	; 32
    37c2:	59 e4       	ldi	r21, 0x49	; 73
    37c4:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    37c8:	9f 93       	push	r25
    37ca:	8f 93       	push	r24
    37cc:	7f 93       	push	r23
    37ce:	6f 93       	push	r22
    37d0:	c6 56       	subi	r28, 0x66	; 102
    37d2:	df 4f       	sbci	r29, 0xFF	; 255
    37d4:	28 81       	ld	r18, Y
    37d6:	ca 59       	subi	r28, 0x9A	; 154
    37d8:	d0 40       	sbci	r29, 0x00	; 0
    37da:	c5 56       	subi	r28, 0x65	; 101
    37dc:	df 4f       	sbci	r29, 0xFF	; 255
    37de:	38 81       	ld	r19, Y
    37e0:	cb 59       	subi	r28, 0x9B	; 155
    37e2:	d0 40       	sbci	r29, 0x00	; 0
    37e4:	c4 56       	subi	r28, 0x64	; 100
    37e6:	df 4f       	sbci	r29, 0xFF	; 255
    37e8:	48 81       	ld	r20, Y
    37ea:	cc 59       	subi	r28, 0x9C	; 156
    37ec:	d0 40       	sbci	r29, 0x00	; 0
    37ee:	c3 56       	subi	r28, 0x63	; 99
    37f0:	df 4f       	sbci	r29, 0xFF	; 255
    37f2:	58 81       	ld	r21, Y
    37f4:	cd 59       	subi	r28, 0x9D	; 157
    37f6:	d0 40       	sbci	r29, 0x00	; 0
    37f8:	c2 56       	subi	r28, 0x62	; 98
    37fa:	df 4f       	sbci	r29, 0xFF	; 255
    37fc:	68 81       	ld	r22, Y
    37fe:	ce 59       	subi	r28, 0x9E	; 158
    3800:	d0 40       	sbci	r29, 0x00	; 0
    3802:	c1 56       	subi	r28, 0x61	; 97
    3804:	df 4f       	sbci	r29, 0xFF	; 255
    3806:	78 81       	ld	r23, Y
    3808:	cf 59       	subi	r28, 0x9F	; 159
    380a:	d0 40       	sbci	r29, 0x00	; 0
    380c:	c0 56       	subi	r28, 0x60	; 96
    380e:	df 4f       	sbci	r29, 0xFF	; 255
    3810:	88 81       	ld	r24, Y
    3812:	c0 5a       	subi	r28, 0xA0	; 160
    3814:	d0 40       	sbci	r29, 0x00	; 0
    3816:	cf 55       	subi	r28, 0x5F	; 95
    3818:	df 4f       	sbci	r29, 0xFF	; 255
    381a:	98 81       	ld	r25, Y
    381c:	c1 5a       	subi	r28, 0xA1	; 161
    381e:	d0 40       	sbci	r29, 0x00	; 0
    3820:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__floatdisf>
    3824:	6b 01       	movw	r12, r22
    3826:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e4       	ldi	r19, 0x40	; 64
    382c:	4c e9       	ldi	r20, 0x9C	; 156
    382e:	55 e4       	ldi	r21, 0x45	; 69
    3830:	c3 01       	movw	r24, r6
    3832:	b2 01       	movw	r22, r4
    3834:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3838:	a5 01       	movw	r20, r10
    383a:	94 01       	movw	r18, r8
    383c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3840:	9b 01       	movw	r18, r22
    3842:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3844:	c7 01       	movw	r24, r14
    3846:	b6 01       	movw	r22, r12
    3848:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    384c:	9f 93       	push	r25
    384e:	8f 93       	push	r24
    3850:	7f 93       	push	r23
    3852:	6f 93       	push	r22
    3854:	6e 81       	ldd	r22, Y+6	; 0x06
    3856:	7f 81       	ldd	r23, Y+7	; 0x07
    3858:	88 85       	ldd	r24, Y+8	; 0x08
    385a:	99 85       	ldd	r25, Y+9	; 0x09
    385c:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3860:	6b 01       	movw	r12, r22
    3862:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	30 e0       	ldi	r19, 0x00	; 0
    3868:	40 e8       	ldi	r20, 0x80	; 128
    386a:	53 e4       	ldi	r21, 0x43	; 67
    386c:	6a 85       	ldd	r22, Y+10	; 0x0a
    386e:	7b 85       	ldd	r23, Y+11	; 0x0b
    3870:	8c 85       	ldd	r24, Y+12	; 0x0c
    3872:	9d 85       	ldd	r25, Y+13	; 0x0d
    3874:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3878:	2e 85       	ldd	r18, Y+14	; 0x0e
    387a:	3f 85       	ldd	r19, Y+15	; 0x0f
    387c:	48 89       	ldd	r20, Y+16	; 0x10
    387e:	59 89       	ldd	r21, Y+17	; 0x11
    3880:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3884:	9b 01       	movw	r18, r22
    3886:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3888:	c7 01       	movw	r24, r14
    388a:	b6 01       	movw	r22, r12
    388c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3890:	9f 93       	push	r25
    3892:	8f 93       	push	r24
    3894:	7f 93       	push	r23
    3896:	6f 93       	push	r22
    3898:	6a 89       	ldd	r22, Y+18	; 0x12
    389a:	7b 89       	ldd	r23, Y+19	; 0x13
    389c:	8c 89       	ldd	r24, Y+20	; 0x14
    389e:	9d 89       	ldd	r25, Y+21	; 0x15
    38a0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    38a4:	6b 01       	movw	r12, r22
    38a6:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e8       	ldi	r20, 0x80	; 128
    38ae:	57 e4       	ldi	r21, 0x47	; 71
    38b0:	6e 89       	ldd	r22, Y+22	; 0x16
    38b2:	7f 89       	ldd	r23, Y+23	; 0x17
    38b4:	88 8d       	ldd	r24, Y+24	; 0x18
    38b6:	99 8d       	ldd	r25, Y+25	; 0x19
    38b8:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    38bc:	9b 01       	movw	r18, r22
    38be:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    38c0:	c7 01       	movw	r24, r14
    38c2:	b6 01       	movw	r22, r12
    38c4:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    38c8:	9f 93       	push	r25
    38ca:	8f 93       	push	r24
    38cc:	7f 93       	push	r23
    38ce:	6f 93       	push	r22
    38d0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    38d2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    38d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38d8:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    38dc:	6b 01       	movw	r12, r22
    38de:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	40 e8       	ldi	r20, 0x80	; 128
    38e6:	57 e4       	ldi	r21, 0x47	; 71
    38e8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    38ea:	7f 8d       	ldd	r23, Y+31	; 0x1f
    38ec:	88 a1       	ldd	r24, Y+32	; 0x20
    38ee:	99 a1       	ldd	r25, Y+33	; 0x21
    38f0:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    38f4:	9b 01       	movw	r18, r22
    38f6:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    38f8:	c7 01       	movw	r24, r14
    38fa:	b6 01       	movw	r22, r12
    38fc:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3900:	9f 93       	push	r25
    3902:	8f 93       	push	r24
    3904:	7f 93       	push	r23
    3906:	6f 93       	push	r22
    3908:	ce 55       	subi	r28, 0x5E	; 94
    390a:	df 4f       	sbci	r29, 0xFF	; 255
    390c:	28 81       	ld	r18, Y
    390e:	c2 5a       	subi	r28, 0xA2	; 162
    3910:	d0 40       	sbci	r29, 0x00	; 0
    3912:	cd 55       	subi	r28, 0x5D	; 93
    3914:	df 4f       	sbci	r29, 0xFF	; 255
    3916:	38 81       	ld	r19, Y
    3918:	c3 5a       	subi	r28, 0xA3	; 163
    391a:	d0 40       	sbci	r29, 0x00	; 0
    391c:	cc 55       	subi	r28, 0x5C	; 92
    391e:	df 4f       	sbci	r29, 0xFF	; 255
    3920:	48 81       	ld	r20, Y
    3922:	c4 5a       	subi	r28, 0xA4	; 164
    3924:	d0 40       	sbci	r29, 0x00	; 0
    3926:	cb 55       	subi	r28, 0x5B	; 91
    3928:	df 4f       	sbci	r29, 0xFF	; 255
    392a:	58 81       	ld	r21, Y
    392c:	c5 5a       	subi	r28, 0xA5	; 165
    392e:	d0 40       	sbci	r29, 0x00	; 0
    3930:	ca 55       	subi	r28, 0x5A	; 90
    3932:	df 4f       	sbci	r29, 0xFF	; 255
    3934:	68 81       	ld	r22, Y
    3936:	c6 5a       	subi	r28, 0xA6	; 166
    3938:	d0 40       	sbci	r29, 0x00	; 0
    393a:	c9 55       	subi	r28, 0x59	; 89
    393c:	df 4f       	sbci	r29, 0xFF	; 255
    393e:	78 81       	ld	r23, Y
    3940:	c7 5a       	subi	r28, 0xA7	; 167
    3942:	d0 40       	sbci	r29, 0x00	; 0
    3944:	c8 55       	subi	r28, 0x58	; 88
    3946:	df 4f       	sbci	r29, 0xFF	; 255
    3948:	88 81       	ld	r24, Y
    394a:	c8 5a       	subi	r28, 0xA8	; 168
    394c:	d0 40       	sbci	r29, 0x00	; 0
    394e:	c7 55       	subi	r28, 0x57	; 87
    3950:	df 4f       	sbci	r29, 0xFF	; 255
    3952:	98 81       	ld	r25, Y
    3954:	c9 5a       	subi	r28, 0xA9	; 169
    3956:	d0 40       	sbci	r29, 0x00	; 0
    3958:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__floatdisf>
    395c:	6b 01       	movw	r12, r22
    395e:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e4       	ldi	r19, 0x40	; 64
    3964:	4c e9       	ldi	r20, 0x9C	; 156
    3966:	55 e4       	ldi	r21, 0x45	; 69
    3968:	6a a1       	ldd	r22, Y+34	; 0x22
    396a:	7b a1       	ldd	r23, Y+35	; 0x23
    396c:	8c a1       	ldd	r24, Y+36	; 0x24
    396e:	9d a1       	ldd	r25, Y+37	; 0x25
    3970:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3974:	2e a1       	ldd	r18, Y+38	; 0x26
    3976:	3f a1       	ldd	r19, Y+39	; 0x27
    3978:	48 a5       	ldd	r20, Y+40	; 0x28
    397a:	59 a5       	ldd	r21, Y+41	; 0x29
    397c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3980:	9b 01       	movw	r18, r22
    3982:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3984:	c7 01       	movw	r24, r14
    3986:	b6 01       	movw	r22, r12
    3988:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    398c:	9f 93       	push	r25
    398e:	8f 93       	push	r24
    3990:	7f 93       	push	r23
    3992:	6f 93       	push	r22
    3994:	6a a5       	ldd	r22, Y+42	; 0x2a
    3996:	7b a5       	ldd	r23, Y+43	; 0x2b
    3998:	8c a5       	ldd	r24, Y+44	; 0x2c
    399a:	9d a5       	ldd	r25, Y+45	; 0x2d
    399c:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    39a0:	6b 01       	movw	r12, r22
    39a2:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    39a4:	20 e0       	ldi	r18, 0x00	; 0
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	40 e8       	ldi	r20, 0x80	; 128
    39aa:	53 e4       	ldi	r21, 0x43	; 67
    39ac:	6e a5       	ldd	r22, Y+46	; 0x2e
    39ae:	7f a5       	ldd	r23, Y+47	; 0x2f
    39b0:	88 a9       	ldd	r24, Y+48	; 0x30
    39b2:	99 a9       	ldd	r25, Y+49	; 0x31
    39b4:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    39b8:	2a a9       	ldd	r18, Y+50	; 0x32
    39ba:	3b a9       	ldd	r19, Y+51	; 0x33
    39bc:	4c a9       	ldd	r20, Y+52	; 0x34
    39be:	5d a9       	ldd	r21, Y+53	; 0x35
    39c0:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    39c4:	9b 01       	movw	r18, r22
    39c6:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    39c8:	c7 01       	movw	r24, r14
    39ca:	b6 01       	movw	r22, r12
    39cc:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    39d0:	9f 93       	push	r25
    39d2:	8f 93       	push	r24
    39d4:	7f 93       	push	r23
    39d6:	6f 93       	push	r22
    39d8:	6e a9       	ldd	r22, Y+54	; 0x36
    39da:	7f a9       	ldd	r23, Y+55	; 0x37
    39dc:	88 ad       	ldd	r24, Y+56	; 0x38
    39de:	99 ad       	ldd	r25, Y+57	; 0x39
    39e0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    39e4:	6b 01       	movw	r12, r22
    39e6:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e8       	ldi	r20, 0x80	; 128
    39ee:	57 e4       	ldi	r21, 0x47	; 71
    39f0:	6a ad       	ldd	r22, Y+58	; 0x3a
    39f2:	7b ad       	ldd	r23, Y+59	; 0x3b
    39f4:	8c ad       	ldd	r24, Y+60	; 0x3c
    39f6:	9d ad       	ldd	r25, Y+61	; 0x3d
    39f8:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    39fc:	9b 01       	movw	r18, r22
    39fe:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3a00:	c7 01       	movw	r24, r14
    3a02:	b6 01       	movw	r22, r12
    3a04:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3a08:	9f 93       	push	r25
    3a0a:	8f 93       	push	r24
    3a0c:	7f 93       	push	r23
    3a0e:	6f 93       	push	r22
    3a10:	22 96       	adiw	r28, 0x02	; 2
    3a12:	6c ad       	ldd	r22, Y+60	; 0x3c
    3a14:	7d ad       	ldd	r23, Y+61	; 0x3d
    3a16:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a18:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a1a:	22 97       	sbiw	r28, 0x02	; 2
    3a1c:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3a20:	6b 01       	movw	r12, r22
    3a22:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    3a24:	20 e0       	ldi	r18, 0x00	; 0
    3a26:	30 e0       	ldi	r19, 0x00	; 0
    3a28:	40 e8       	ldi	r20, 0x80	; 128
    3a2a:	57 e4       	ldi	r21, 0x47	; 71
    3a2c:	26 96       	adiw	r28, 0x06	; 6
    3a2e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3a30:	7d ad       	ldd	r23, Y+61	; 0x3d
    3a32:	8e ad       	ldd	r24, Y+62	; 0x3e
    3a34:	9f ad       	ldd	r25, Y+63	; 0x3f
    3a36:	26 97       	sbiw	r28, 0x06	; 6
    3a38:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3a3c:	9b 01       	movw	r18, r22
    3a3e:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3a40:	c7 01       	movw	r24, r14
    3a42:	b6 01       	movw	r22, r12
    3a44:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3a48:	9f 93       	push	r25
    3a4a:	8f 93       	push	r24
    3a4c:	7f 93       	push	r23
    3a4e:	6f 93       	push	r22
    3a50:	c6 55       	subi	r28, 0x56	; 86
    3a52:	df 4f       	sbci	r29, 0xFF	; 255
    3a54:	28 81       	ld	r18, Y
    3a56:	ca 5a       	subi	r28, 0xAA	; 170
    3a58:	d0 40       	sbci	r29, 0x00	; 0
    3a5a:	c5 55       	subi	r28, 0x55	; 85
    3a5c:	df 4f       	sbci	r29, 0xFF	; 255
    3a5e:	38 81       	ld	r19, Y
    3a60:	cb 5a       	subi	r28, 0xAB	; 171
    3a62:	d0 40       	sbci	r29, 0x00	; 0
    3a64:	c4 55       	subi	r28, 0x54	; 84
    3a66:	df 4f       	sbci	r29, 0xFF	; 255
    3a68:	48 81       	ld	r20, Y
    3a6a:	cc 5a       	subi	r28, 0xAC	; 172
    3a6c:	d0 40       	sbci	r29, 0x00	; 0
    3a6e:	c3 55       	subi	r28, 0x53	; 83
    3a70:	df 4f       	sbci	r29, 0xFF	; 255
    3a72:	58 81       	ld	r21, Y
    3a74:	cd 5a       	subi	r28, 0xAD	; 173
    3a76:	d0 40       	sbci	r29, 0x00	; 0
    3a78:	c2 55       	subi	r28, 0x52	; 82
    3a7a:	df 4f       	sbci	r29, 0xFF	; 255
    3a7c:	68 81       	ld	r22, Y
    3a7e:	ce 5a       	subi	r28, 0xAE	; 174
    3a80:	d0 40       	sbci	r29, 0x00	; 0
    3a82:	c1 55       	subi	r28, 0x51	; 81
    3a84:	df 4f       	sbci	r29, 0xFF	; 255
    3a86:	78 81       	ld	r23, Y
    3a88:	cf 5a       	subi	r28, 0xAF	; 175
    3a8a:	d0 40       	sbci	r29, 0x00	; 0
    3a8c:	c0 55       	subi	r28, 0x50	; 80
    3a8e:	df 4f       	sbci	r29, 0xFF	; 255
    3a90:	88 81       	ld	r24, Y
    3a92:	c0 5b       	subi	r28, 0xB0	; 176
    3a94:	d0 40       	sbci	r29, 0x00	; 0
    3a96:	cf 54       	subi	r28, 0x4F	; 79
    3a98:	df 4f       	sbci	r29, 0xFF	; 255
    3a9a:	98 81       	ld	r25, Y
    3a9c:	c1 5b       	subi	r28, 0xB1	; 177
    3a9e:	d0 40       	sbci	r29, 0x00	; 0
    3aa0:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__floatdisf>
    3aa4:	6b 01       	movw	r12, r22
    3aa6:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
    3aa8:	20 e0       	ldi	r18, 0x00	; 0
    3aaa:	30 e4       	ldi	r19, 0x40	; 64
    3aac:	4c e9       	ldi	r20, 0x9C	; 156
    3aae:	55 e4       	ldi	r21, 0x45	; 69
    3ab0:	2a 96       	adiw	r28, 0x0a	; 10
    3ab2:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ab4:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ab6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ab8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3aba:	2a 97       	sbiw	r28, 0x0a	; 10
    3abc:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3ac0:	2e 96       	adiw	r28, 0x0e	; 14
    3ac2:	2c ad       	ldd	r18, Y+60	; 0x3c
    3ac4:	3d ad       	ldd	r19, Y+61	; 0x3d
    3ac6:	4e ad       	ldd	r20, Y+62	; 0x3e
    3ac8:	5f ad       	ldd	r21, Y+63	; 0x3f
    3aca:	2e 97       	sbiw	r28, 0x0e	; 14
    3acc:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3ad0:	9b 01       	movw	r18, r22
    3ad2:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3ad4:	c7 01       	movw	r24, r14
    3ad6:	b6 01       	movw	r22, r12
    3ad8:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3adc:	9f 93       	push	r25
    3ade:	8f 93       	push	r24
    3ae0:	7f 93       	push	r23
    3ae2:	6f 93       	push	r22
    3ae4:	62 96       	adiw	r28, 0x12	; 18
    3ae6:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ae8:	7d ad       	ldd	r23, Y+61	; 0x3d
    3aea:	8e ad       	ldd	r24, Y+62	; 0x3e
    3aec:	9f ad       	ldd	r25, Y+63	; 0x3f
    3aee:	62 97       	sbiw	r28, 0x12	; 18
    3af0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3af4:	6b 01       	movw	r12, r22
    3af6:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	53 e4       	ldi	r21, 0x43	; 67
    3b00:	66 96       	adiw	r28, 0x16	; 22
    3b02:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b04:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b06:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b08:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b0a:	66 97       	sbiw	r28, 0x16	; 22
    3b0c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3b10:	6a 96       	adiw	r28, 0x1a	; 26
    3b12:	2c ad       	ldd	r18, Y+60	; 0x3c
    3b14:	3d ad       	ldd	r19, Y+61	; 0x3d
    3b16:	4e ad       	ldd	r20, Y+62	; 0x3e
    3b18:	5f ad       	ldd	r21, Y+63	; 0x3f
    3b1a:	6a 97       	sbiw	r28, 0x1a	; 26
    3b1c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3b20:	9b 01       	movw	r18, r22
    3b22:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3b24:	c7 01       	movw	r24, r14
    3b26:	b6 01       	movw	r22, r12
    3b28:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3b2c:	9f 93       	push	r25
    3b2e:	8f 93       	push	r24
    3b30:	7f 93       	push	r23
    3b32:	6f 93       	push	r22
    3b34:	6e 96       	adiw	r28, 0x1e	; 30
    3b36:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b38:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b3e:	6e 97       	sbiw	r28, 0x1e	; 30
    3b40:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3b44:	6b 01       	movw	r12, r22
    3b46:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	40 e8       	ldi	r20, 0x80	; 128
    3b4e:	57 e4       	ldi	r21, 0x47	; 71
    3b50:	a2 96       	adiw	r28, 0x22	; 34
    3b52:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b54:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b56:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b58:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b5a:	a2 97       	sbiw	r28, 0x22	; 34
    3b5c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3b60:	9b 01       	movw	r18, r22
    3b62:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3b64:	c7 01       	movw	r24, r14
    3b66:	b6 01       	movw	r22, r12
    3b68:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3b6c:	9f 93       	push	r25
    3b6e:	8f 93       	push	r24
    3b70:	7f 93       	push	r23
    3b72:	6f 93       	push	r22
    3b74:	a6 96       	adiw	r28, 0x26	; 38
    3b76:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b78:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b7e:	a6 97       	sbiw	r28, 0x26	; 38
    3b80:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3b84:	6b 01       	movw	r12, r22
    3b86:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	30 e0       	ldi	r19, 0x00	; 0
    3b8c:	40 e8       	ldi	r20, 0x80	; 128
    3b8e:	57 e4       	ldi	r21, 0x47	; 71
    3b90:	aa 96       	adiw	r28, 0x2a	; 42
    3b92:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b94:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b96:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b98:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b9a:	aa 97       	sbiw	r28, 0x2a	; 42
    3b9c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3ba0:	9b 01       	movw	r18, r22
    3ba2:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	b6 01       	movw	r22, r12
    3ba8:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3bac:	9f 93       	push	r25
    3bae:	8f 93       	push	r24
    3bb0:	7f 93       	push	r23
    3bb2:	6f 93       	push	r22
    3bb4:	ce 54       	subi	r28, 0x4E	; 78
    3bb6:	df 4f       	sbci	r29, 0xFF	; 255
    3bb8:	28 81       	ld	r18, Y
    3bba:	c2 5b       	subi	r28, 0xB2	; 178
    3bbc:	d0 40       	sbci	r29, 0x00	; 0
    3bbe:	cd 54       	subi	r28, 0x4D	; 77
    3bc0:	df 4f       	sbci	r29, 0xFF	; 255
    3bc2:	38 81       	ld	r19, Y
    3bc4:	c3 5b       	subi	r28, 0xB3	; 179
    3bc6:	d0 40       	sbci	r29, 0x00	; 0
    3bc8:	cc 54       	subi	r28, 0x4C	; 76
    3bca:	df 4f       	sbci	r29, 0xFF	; 255
    3bcc:	48 81       	ld	r20, Y
    3bce:	c4 5b       	subi	r28, 0xB4	; 180
    3bd0:	d0 40       	sbci	r29, 0x00	; 0
    3bd2:	cb 54       	subi	r28, 0x4B	; 75
    3bd4:	df 4f       	sbci	r29, 0xFF	; 255
    3bd6:	58 81       	ld	r21, Y
    3bd8:	c5 5b       	subi	r28, 0xB5	; 181
    3bda:	d0 40       	sbci	r29, 0x00	; 0
    3bdc:	ca 54       	subi	r28, 0x4A	; 74
    3bde:	df 4f       	sbci	r29, 0xFF	; 255
    3be0:	68 81       	ld	r22, Y
    3be2:	c6 5b       	subi	r28, 0xB6	; 182
    3be4:	d0 40       	sbci	r29, 0x00	; 0
    3be6:	c9 54       	subi	r28, 0x49	; 73
    3be8:	df 4f       	sbci	r29, 0xFF	; 255
    3bea:	78 81       	ld	r23, Y
    3bec:	c7 5b       	subi	r28, 0xB7	; 183
    3bee:	d0 40       	sbci	r29, 0x00	; 0
    3bf0:	c8 54       	subi	r28, 0x48	; 72
    3bf2:	df 4f       	sbci	r29, 0xFF	; 255
    3bf4:	88 81       	ld	r24, Y
    3bf6:	c8 5b       	subi	r28, 0xB8	; 184
    3bf8:	d0 40       	sbci	r29, 0x00	; 0
    3bfa:	c7 54       	subi	r28, 0x47	; 71
    3bfc:	df 4f       	sbci	r29, 0xFF	; 255
    3bfe:	98 81       	ld	r25, Y
    3c00:	c9 5b       	subi	r28, 0xB9	; 185
    3c02:	d0 40       	sbci	r29, 0x00	; 0
    3c04:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__floatdisf>
    3c08:	6b 01       	movw	r12, r22
    3c0a:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
    3c0c:	20 e0       	ldi	r18, 0x00	; 0
    3c0e:	30 e4       	ldi	r19, 0x40	; 64
    3c10:	4c e9       	ldi	r20, 0x9C	; 156
    3c12:	55 e4       	ldi	r21, 0x45	; 69
    3c14:	ae 96       	adiw	r28, 0x2e	; 46
    3c16:	6c ad       	ldd	r22, Y+60	; 0x3c
    3c18:	7d ad       	ldd	r23, Y+61	; 0x3d
    3c1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c1e:	ae 97       	sbiw	r28, 0x2e	; 46
    3c20:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3c24:	e2 96       	adiw	r28, 0x32	; 50
    3c26:	2c ad       	ldd	r18, Y+60	; 0x3c
    3c28:	3d ad       	ldd	r19, Y+61	; 0x3d
    3c2a:	4e ad       	ldd	r20, Y+62	; 0x3e
    3c2c:	5f ad       	ldd	r21, Y+63	; 0x3f
    3c2e:	e2 97       	sbiw	r28, 0x32	; 50
    3c30:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3c34:	9b 01       	movw	r18, r22
    3c36:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3c38:	c7 01       	movw	r24, r14
    3c3a:	b6 01       	movw	r22, r12
    3c3c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3c40:	9f 93       	push	r25
    3c42:	8f 93       	push	r24
    3c44:	7f 93       	push	r23
    3c46:	6f 93       	push	r22
    3c48:	e6 96       	adiw	r28, 0x36	; 54
    3c4a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3c4c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3c4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c50:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c52:	e6 97       	sbiw	r28, 0x36	; 54
    3c54:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3c58:	6b 01       	movw	r12, r22
    3c5a:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e8       	ldi	r20, 0x80	; 128
    3c62:	53 e4       	ldi	r21, 0x43	; 67
    3c64:	ea 96       	adiw	r28, 0x3a	; 58
    3c66:	6c ad       	ldd	r22, Y+60	; 0x3c
    3c68:	7d ad       	ldd	r23, Y+61	; 0x3d
    3c6a:	8e ad       	ldd	r24, Y+62	; 0x3e
    3c6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c6e:	ea 97       	sbiw	r28, 0x3a	; 58
    3c70:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3c74:	ee 96       	adiw	r28, 0x3e	; 62
    3c76:	2c ad       	ldd	r18, Y+60	; 0x3c
    3c78:	3d ad       	ldd	r19, Y+61	; 0x3d
    3c7a:	4e ad       	ldd	r20, Y+62	; 0x3e
    3c7c:	5f ad       	ldd	r21, Y+63	; 0x3f
    3c7e:	ee 97       	sbiw	r28, 0x3e	; 62
    3c80:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3c84:	9b 01       	movw	r18, r22
    3c86:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3c88:	c7 01       	movw	r24, r14
    3c8a:	b6 01       	movw	r22, r12
    3c8c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3c90:	9f 93       	push	r25
    3c92:	8f 93       	push	r24
    3c94:	7f 93       	push	r23
    3c96:	6f 93       	push	r22
    3c98:	c2 58       	subi	r28, 0x82	; 130
    3c9a:	df 4f       	sbci	r29, 0xFF	; 255
    3c9c:	68 81       	ld	r22, Y
    3c9e:	79 81       	ldd	r23, Y+1	; 0x01
    3ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca4:	ce 57       	subi	r28, 0x7E	; 126
    3ca6:	d0 40       	sbci	r29, 0x00	; 0
    3ca8:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3cac:	6b 01       	movw	r12, r22
    3cae:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e8       	ldi	r20, 0x80	; 128
    3cb6:	57 e4       	ldi	r21, 0x47	; 71
    3cb8:	ce 57       	subi	r28, 0x7E	; 126
    3cba:	df 4f       	sbci	r29, 0xFF	; 255
    3cbc:	68 81       	ld	r22, Y
    3cbe:	79 81       	ldd	r23, Y+1	; 0x01
    3cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc4:	c2 58       	subi	r28, 0x82	; 130
    3cc6:	d0 40       	sbci	r29, 0x00	; 0
    3cc8:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3ccc:	9b 01       	movw	r18, r22
    3cce:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3cd0:	c7 01       	movw	r24, r14
    3cd2:	b6 01       	movw	r22, r12
    3cd4:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3cd8:	9f 93       	push	r25
    3cda:	8f 93       	push	r24
    3cdc:	7f 93       	push	r23
    3cde:	6f 93       	push	r22
    3ce0:	ca 57       	subi	r28, 0x7A	; 122
    3ce2:	df 4f       	sbci	r29, 0xFF	; 255
    3ce4:	68 81       	ld	r22, Y
    3ce6:	79 81       	ldd	r23, Y+1	; 0x01
    3ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cea:	9b 81       	ldd	r25, Y+3	; 0x03
    3cec:	c6 58       	subi	r28, 0x86	; 134
    3cee:	d0 40       	sbci	r29, 0x00	; 0
    3cf0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3cf4:	6b 01       	movw	r12, r22
    3cf6:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
    3cf8:	20 e0       	ldi	r18, 0x00	; 0
    3cfa:	30 e0       	ldi	r19, 0x00	; 0
    3cfc:	40 e8       	ldi	r20, 0x80	; 128
    3cfe:	57 e4       	ldi	r21, 0x47	; 71
    3d00:	c6 57       	subi	r28, 0x76	; 118
    3d02:	df 4f       	sbci	r29, 0xFF	; 255
    3d04:	68 81       	ld	r22, Y
    3d06:	79 81       	ldd	r23, Y+1	; 0x01
    3d08:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d0c:	ca 58       	subi	r28, 0x8A	; 138
    3d0e:	d0 40       	sbci	r29, 0x00	; 0
    3d10:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3d14:	9b 01       	movw	r18, r22
    3d16:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3d18:	c7 01       	movw	r24, r14
    3d1a:	b6 01       	movw	r22, r12
    3d1c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3d20:	9f 93       	push	r25
    3d22:	8f 93       	push	r24
    3d24:	7f 93       	push	r23
    3d26:	6f 93       	push	r22
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    3d28:	c2 57       	subi	r28, 0x72	; 114
    3d2a:	df 4f       	sbci	r29, 0xFF	; 255
    3d2c:	68 81       	ld	r22, Y
    3d2e:	79 81       	ldd	r23, Y+1	; 0x01
    3d30:	8a 81       	ldd	r24, Y+2	; 0x02
    3d32:	9b 81       	ldd	r25, Y+3	; 0x03
    3d34:	ce 58       	subi	r28, 0x8E	; 142
    3d36:	d0 40       	sbci	r29, 0x00	; 0
    3d38:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e4       	ldi	r19, 0x40	; 64
    3d40:	4c e9       	ldi	r20, 0x9C	; 156
    3d42:	55 e4       	ldi	r21, 0x45	; 69
    3d44:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3d48:	9f 93       	push	r25
    3d4a:	8f 93       	push	r24
    3d4c:	7f 93       	push	r23
    3d4e:	6f 93       	push	r22
    3d50:	8e ec       	ldi	r24, 0xCE	; 206
    3d52:	95 e2       	ldi	r25, 0x25	; 37
    3d54:	9f 93       	push	r25
    3d56:	8f 93       	push	r24
    3d58:	c5 54       	subi	r28, 0x45	; 69
    3d5a:	df 4f       	sbci	r29, 0xFF	; 255
    3d5c:	b8 81       	ld	r27, Y
    3d5e:	cb 5b       	subi	r28, 0xBB	; 187
    3d60:	d0 40       	sbci	r29, 0x00	; 0
    3d62:	bf 93       	push	r27
    3d64:	c6 54       	subi	r28, 0x46	; 70
    3d66:	df 4f       	sbci	r29, 0xFF	; 255
    3d68:	e8 81       	ld	r30, Y
    3d6a:	ca 5b       	subi	r28, 0xBA	; 186
    3d6c:	d0 40       	sbci	r29, 0x00	; 0
    3d6e:	ef 93       	push	r30
    3d70:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	de bf       	out	0x3e, r29	; 62
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_H2A */
    3d78:	cf 52       	subi	r28, 0x2F	; 47
    3d7a:	df 4f       	sbci	r29, 0xFF	; 255
    3d7c:	cd bf       	out	0x3d, r28	; 61
    3d7e:	de bf       	out	0x3e, r29	; 62
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	1f 91       	pop	r17
    3d86:	0f 91       	pop	r16
    3d88:	ff 90       	pop	r15
    3d8a:	ef 90       	pop	r14
    3d8c:	df 90       	pop	r13
    3d8e:	cf 90       	pop	r12
    3d90:	bf 90       	pop	r11
    3d92:	af 90       	pop	r10
    3d94:	9f 90       	pop	r9
    3d96:	8f 90       	pop	r8
    3d98:	7f 90       	pop	r7
    3d9a:	6f 90       	pop	r6
    3d9c:	5f 90       	pop	r5
    3d9e:	4f 90       	pop	r4
    3da0:	3f 90       	pop	r3
    3da2:	2f 90       	pop	r2
    3da4:	08 95       	ret

00003da6 <PrintCSV_EVA>:




void PrintCSV_EVA(FILE *fp) {
    3da6:	2f 92       	push	r2
    3da8:	3f 92       	push	r3
    3daa:	4f 92       	push	r4
    3dac:	5f 92       	push	r5
    3dae:	6f 92       	push	r6
    3db0:	7f 92       	push	r7
    3db2:	8f 92       	push	r8
    3db4:	9f 92       	push	r9
    3db6:	af 92       	push	r10
    3db8:	bf 92       	push	r11
    3dba:	cf 92       	push	r12
    3dbc:	df 92       	push	r13
    3dbe:	ef 92       	push	r14
    3dc0:	ff 92       	push	r15
    3dc2:	0f 93       	push	r16
    3dc4:	1f 93       	push	r17
    3dc6:	cf 93       	push	r28
    3dc8:	df 93       	push	r29
    3dca:	cd b7       	in	r28, 0x3d	; 61
    3dcc:	de b7       	in	r29, 0x3e	; 62
    3dce:	c3 58       	subi	r28, 0x83	; 131
    3dd0:	d1 09       	sbc	r29, r1
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	de bf       	out	0x3e, r29	; 62
    3dd6:	e1 96       	adiw	r28, 0x31	; 49
    3dd8:	8f af       	std	Y+63, r24	; 0x3f
    3dda:	e1 97       	sbiw	r28, 0x31	; 49
    3ddc:	e2 96       	adiw	r28, 0x32	; 50
    3dde:	9f af       	std	Y+63, r25	; 0x3f
    3de0:	e2 97       	sbiw	r28, 0x32	; 50
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    3de2:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>



void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    3de6:	81 11       	cpse	r24, r1
    3de8:	fc cf       	rjmp	.-8      	; 0x3de2 <PrintCSV_EVA+0x3c>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
    3dea:	60 91 d8 29 	lds	r22, 0x29D8	; 0x8029d8 <sSensorDataSnapshot+0x6c>
    3dee:	70 91 d9 29 	lds	r23, 0x29D9	; 0x8029d9 <sSensorDataSnapshot+0x6d>
    3df2:	80 91 da 29 	lds	r24, 0x29DA	; 0x8029da <sSensorDataSnapshot+0x6e>
    3df6:	90 91 db 29 	lds	r25, 0x29DB	; 0x8029db <sSensorDataSnapshot+0x6f>
    3dfa:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    3dfe:	20 e0       	ldi	r18, 0x00	; 0
    3e00:	30 e4       	ldi	r19, 0x40	; 64
    3e02:	4c e9       	ldi	r20, 0x9C	; 156
    3e04:	55 e4       	ldi	r21, 0x45	; 69
    3e06:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3e0a:	e3 96       	adiw	r28, 0x33	; 51
    3e0c:	6f af       	std	Y+63, r22	; 0x3f
    3e0e:	e3 97       	sbiw	r28, 0x33	; 51
    3e10:	e4 96       	adiw	r28, 0x34	; 52
    3e12:	7f af       	std	Y+63, r23	; 0x3f
    3e14:	e4 97       	sbiw	r28, 0x34	; 52
    3e16:	e5 96       	adiw	r28, 0x35	; 53
    3e18:	8f af       	std	Y+63, r24	; 0x3f
    3e1a:	e5 97       	sbiw	r28, 0x35	; 53
    3e1c:	e6 96       	adiw	r28, 0x36	; 54
    3e1e:	9f af       	std	Y+63, r25	; 0x3f
    3e20:	e6 97       	sbiw	r28, 0x36	; 54
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
    3e22:	20 91 cf 29 	lds	r18, 0x29CF	; 0x8029cf <sSensorDataSnapshot+0x63>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e26:	91 e0       	ldi	r25, 0x01	; 1
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	21 11       	cpse	r18, r1
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	6b 96       	adiw	r28, 0x1b	; 27
    3e30:	9f af       	std	Y+63, r25	; 0x3f
    3e32:	6b 97       	sbiw	r28, 0x1b	; 27
    3e34:	6c 96       	adiw	r28, 0x1c	; 28
    3e36:	8f af       	std	Y+63, r24	; 0x3f
    3e38:	6c 97       	sbiw	r28, 0x1c	; 28
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    3e3a:	80 91 e0 29 	lds	r24, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x74>
    3e3e:	90 91 e1 29 	lds	r25, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x75>
    3e42:	a0 91 e2 29 	lds	r26, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x76>
    3e46:	b0 91 e3 29 	lds	r27, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x77>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e4a:	89 2b       	or	r24, r25
    3e4c:	8a 2b       	or	r24, r26
    3e4e:	8b 2b       	or	r24, r27
    3e50:	e9 f0       	breq	.+58     	; 0x3e8c <PrintCSV_EVA+0xe6>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    3e52:	60 91 e0 29 	lds	r22, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x74>
    3e56:	70 91 e1 29 	lds	r23, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x75>
    3e5a:	80 91 e2 29 	lds	r24, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x76>
    3e5e:	90 91 e3 29 	lds	r25, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x77>
    3e62:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	40 e8       	ldi	r20, 0x80	; 128
    3e6c:	57 e3       	ldi	r21, 0x37	; 55
    3e6e:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3e72:	9b 01       	movw	r18, r22
    3e74:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e76:	60 e0       	ldi	r22, 0x00	; 0
    3e78:	78 e5       	ldi	r23, 0x58	; 88
    3e7a:	84 ea       	ldi	r24, 0xA4	; 164
    3e7c:	94 e4       	ldi	r25, 0x44	; 68
    3e7e:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3e82:	16 2f       	mov	r17, r22
    3e84:	37 2e       	mov	r3, r23
    3e86:	89 83       	std	Y+1, r24	; 0x01
    3e88:	9a 83       	std	Y+2, r25	; 0x02
    3e8a:	04 c0       	rjmp	.+8      	; 0x3e94 <PrintCSV_EVA+0xee>
    3e8c:	10 e0       	ldi	r17, 0x00	; 0
    3e8e:	31 2c       	mov	r3, r1
    3e90:	19 82       	std	Y+1, r1	; 0x01
    3e92:	1a 82       	std	Y+2, r1	; 0x02
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    3e94:	20 91 e4 29 	lds	r18, 0x29E4	; 0x8029e4 <sSensorDataSnapshot+0x78>
    3e98:	2b 83       	std	Y+3, r18	; 0x03
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    3e9a:	60 91 d4 29 	lds	r22, 0x29D4	; 0x8029d4 <sSensorDataSnapshot+0x68>
    3e9e:	70 91 d5 29 	lds	r23, 0x29D5	; 0x8029d5 <sSensorDataSnapshot+0x69>
    3ea2:	80 91 d6 29 	lds	r24, 0x29D6	; 0x8029d6 <sSensorDataSnapshot+0x6a>
    3ea6:	90 91 d7 29 	lds	r25, 0x29D7	; 0x8029d7 <sSensorDataSnapshot+0x6b>
    3eaa:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    3eae:	20 e0       	ldi	r18, 0x00	; 0
    3eb0:	30 e4       	ldi	r19, 0x40	; 64
    3eb2:	4c e9       	ldi	r20, 0x9C	; 156
    3eb4:	55 e4       	ldi	r21, 0x45	; 69
    3eb6:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3eba:	e7 96       	adiw	r28, 0x37	; 55
    3ebc:	6f af       	std	Y+63, r22	; 0x3f
    3ebe:	e7 97       	sbiw	r28, 0x37	; 55
    3ec0:	e8 96       	adiw	r28, 0x38	; 56
    3ec2:	7f af       	std	Y+63, r23	; 0x3f
    3ec4:	e8 97       	sbiw	r28, 0x38	; 56
    3ec6:	e9 96       	adiw	r28, 0x39	; 57
    3ec8:	8f af       	std	Y+63, r24	; 0x3f
    3eca:	e9 97       	sbiw	r28, 0x39	; 57
    3ecc:	ea 96       	adiw	r28, 0x3a	; 58
    3ece:	9f af       	std	Y+63, r25	; 0x3f
    3ed0:	ea 97       	sbiw	r28, 0x3a	; 58
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    3ed2:	20 91 ce 29 	lds	r18, 0x29CE	; 0x8029ce <sSensorDataSnapshot+0x62>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3ed6:	91 e0       	ldi	r25, 0x01	; 1
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	21 11       	cpse	r18, r1
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	6d 96       	adiw	r28, 0x1d	; 29
    3ee0:	9f af       	std	Y+63, r25	; 0x3f
    3ee2:	6d 97       	sbiw	r28, 0x1d	; 29
    3ee4:	6e 96       	adiw	r28, 0x1e	; 30
    3ee6:	8f af       	std	Y+63, r24	; 0x3f
    3ee8:	6e 97       	sbiw	r28, 0x1e	; 30
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    3eea:	60 91 d0 29 	lds	r22, 0x29D0	; 0x8029d0 <sSensorDataSnapshot+0x64>
    3eee:	70 91 d1 29 	lds	r23, 0x29D1	; 0x8029d1 <sSensorDataSnapshot+0x65>
    3ef2:	80 91 d2 29 	lds	r24, 0x29D2	; 0x8029d2 <sSensorDataSnapshot+0x66>
    3ef6:	90 91 d3 29 	lds	r25, 0x29D3	; 0x8029d3 <sSensorDataSnapshot+0x67>
    3efa:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e4       	ldi	r19, 0x40	; 64
    3f02:	4c e9       	ldi	r20, 0x9C	; 156
    3f04:	55 e4       	ldi	r21, 0x45	; 69
    3f06:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3f0a:	eb 96       	adiw	r28, 0x3b	; 59
    3f0c:	6f af       	std	Y+63, r22	; 0x3f
    3f0e:	eb 97       	sbiw	r28, 0x3b	; 59
    3f10:	ec 96       	adiw	r28, 0x3c	; 60
    3f12:	7f af       	std	Y+63, r23	; 0x3f
    3f14:	ec 97       	sbiw	r28, 0x3c	; 60
    3f16:	ed 96       	adiw	r28, 0x3d	; 61
    3f18:	8f af       	std	Y+63, r24	; 0x3f
    3f1a:	ed 97       	sbiw	r28, 0x3d	; 61
    3f1c:	ee 96       	adiw	r28, 0x3e	; 62
    3f1e:	9f af       	std	Y+63, r25	; 0x3f
    3f20:	ee 97       	sbiw	r28, 0x3e	; 62
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
    3f22:	20 91 cd 29 	lds	r18, 0x29CD	; 0x8029cd <sSensorDataSnapshot+0x61>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3f26:	91 e0       	ldi	r25, 0x01	; 1
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	21 11       	cpse	r18, r1
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	6f 96       	adiw	r28, 0x1f	; 31
    3f30:	9f af       	std	Y+63, r25	; 0x3f
    3f32:	6f 97       	sbiw	r28, 0x1f	; 31
    3f34:	a0 96       	adiw	r28, 0x20	; 32
    3f36:	8f af       	std	Y+63, r24	; 0x3f
    3f38:	a0 97       	sbiw	r28, 0x20	; 32
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
    3f3a:	60 91 c9 29 	lds	r22, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5d>
    3f3e:	70 91 ca 29 	lds	r23, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5e>
    3f42:	80 91 cb 29 	lds	r24, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x5f>
    3f46:	90 91 cc 29 	lds	r25, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x60>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3f4a:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
    3f4e:	2f ed       	ldi	r18, 0xDF	; 223
    3f50:	36 e9       	ldi	r19, 0x96	; 150
    3f52:	45 e9       	ldi	r20, 0x95	; 149
    3f54:	5d e3       	ldi	r21, 0x3D	; 61
    3f56:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3f5a:	ef 96       	adiw	r28, 0x3f	; 63
    3f5c:	6f af       	std	Y+63, r22	; 0x3f
    3f5e:	ef 97       	sbiw	r28, 0x3f	; 63
    3f60:	c1 58       	subi	r28, 0x81	; 129
    3f62:	df 4f       	sbci	r29, 0xFF	; 255
    3f64:	78 83       	st	Y, r23
    3f66:	cf 57       	subi	r28, 0x7F	; 127
    3f68:	d0 40       	sbci	r29, 0x00	; 0
    3f6a:	c0 58       	subi	r28, 0x80	; 128
    3f6c:	df 4f       	sbci	r29, 0xFF	; 255
    3f6e:	88 83       	st	Y, r24
    3f70:	c0 58       	subi	r28, 0x80	; 128
    3f72:	d0 40       	sbci	r29, 0x00	; 0
    3f74:	cf 57       	subi	r28, 0x7F	; 127
    3f76:	df 4f       	sbci	r29, 0xFF	; 255
    3f78:	98 83       	st	Y, r25
    3f7a:	c1 58       	subi	r28, 0x81	; 129
    3f7c:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
    3f7e:	60 91 c5 29 	lds	r22, 0x29C5	; 0x8029c5 <sSensorDataSnapshot+0x59>
    3f82:	70 91 c6 29 	lds	r23, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5a>
    3f86:	80 91 c7 29 	lds	r24, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5b>
    3f8a:	90 91 c8 29 	lds	r25, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5c>

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    3f8e:	61 15       	cp	r22, r1
    3f90:	71 05       	cpc	r23, r1
    3f92:	81 05       	cpc	r24, r1
    3f94:	91 05       	cpc	r25, r1
    3f96:	21 f1       	breq	.+72     	; 0x3fe0 <PrintCSV_EVA+0x23a>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    3f98:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	40 e8       	ldi	r20, 0x80	; 128
    3fa2:	57 e3       	ldi	r21, 0x37	; 55
    3fa4:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    3fa8:	9b 01       	movw	r18, r22
    3faa:	ac 01       	movw	r20, r24
    3fac:	60 e0       	ldi	r22, 0x00	; 0
    3fae:	78 e5       	ldi	r23, 0x58	; 88
    3fb0:	84 ea       	ldi	r24, 0xA4	; 164
    3fb2:	94 e4       	ldi	r25, 0x44	; 68
    3fb4:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    3fb8:	ce 57       	subi	r28, 0x7E	; 126
    3fba:	df 4f       	sbci	r29, 0xFF	; 255
    3fbc:	68 83       	st	Y, r22
    3fbe:	c2 58       	subi	r28, 0x82	; 130
    3fc0:	d0 40       	sbci	r29, 0x00	; 0
    3fc2:	cd 57       	subi	r28, 0x7D	; 125
    3fc4:	df 4f       	sbci	r29, 0xFF	; 255
    3fc6:	78 83       	st	Y, r23
    3fc8:	c3 58       	subi	r28, 0x83	; 131
    3fca:	d0 40       	sbci	r29, 0x00	; 0
    3fcc:	28 2e       	mov	r2, r24
    3fce:	09 2f       	mov	r16, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e8       	ldi	r20, 0x80	; 128
    3fd6:	5f e3       	ldi	r21, 0x3F	; 63
    3fd8:	0e 94 2c 30 	call	0x6058	; 0x6058 <__cmpsf2>
    3fdc:	87 ff       	sbrs	r24, 7
    3fde:	0c c0       	rjmp	.+24     	; 0x3ff8 <PrintCSV_EVA+0x252>
		res = 0.0f;
	}
	else
	res = 0.0f;
    3fe0:	ce 57       	subi	r28, 0x7E	; 126
    3fe2:	df 4f       	sbci	r29, 0xFF	; 255
    3fe4:	18 82       	st	Y, r1
    3fe6:	c2 58       	subi	r28, 0x82	; 130
    3fe8:	d0 40       	sbci	r29, 0x00	; 0
    3fea:	cd 57       	subi	r28, 0x7D	; 125
    3fec:	df 4f       	sbci	r29, 0xFF	; 255
    3fee:	18 82       	st	Y, r1
    3ff0:	c3 58       	subi	r28, 0x83	; 131
    3ff2:	d0 40       	sbci	r29, 0x00	; 0
    3ff4:	21 2c       	mov	r2, r1
    3ff6:	00 e0       	ldi	r16, 0x00	; 0
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    3ff8:	60 91 de 29 	lds	r22, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x72>
    3ffc:	70 91 df 29 	lds	r23, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x73>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    4000:	80 91 dc 29 	lds	r24, 0x29DC	; 0x8029dc <sSensorDataSnapshot+0x70>
    4004:	90 91 dd 29 	lds	r25, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x71>
    4008:	8c 83       	std	Y+4, r24	; 0x04
    400a:	9d 83       	std	Y+5, r25	; 0x05
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    400c:	c0 90 99 29 	lds	r12, 0x2999	; 0x802999 <sSensorDataSnapshot+0x2d>
    4010:	d0 90 9a 29 	lds	r13, 0x299A	; 0x80299a <sSensorDataSnapshot+0x2e>
    4014:	e0 90 9b 29 	lds	r14, 0x299B	; 0x80299b <sSensorDataSnapshot+0x2f>
    4018:	f0 90 9c 29 	lds	r15, 0x299C	; 0x80299c <sSensorDataSnapshot+0x30>
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    401c:	90 91 bd 29 	lds	r25, 0x29BD	; 0x8029bd <sSensorDataSnapshot+0x51>
    4020:	a1 96       	adiw	r28, 0x21	; 33
    4022:	9f af       	std	Y+63, r25	; 0x3f
    4024:	a1 97       	sbiw	r28, 0x21	; 33
    4026:	a0 91 be 29 	lds	r26, 0x29BE	; 0x8029be <sSensorDataSnapshot+0x52>
    402a:	a2 96       	adiw	r28, 0x22	; 34
    402c:	af af       	std	Y+63, r26	; 0x3f
    402e:	a2 97       	sbiw	r28, 0x22	; 34
    4030:	b0 91 bf 29 	lds	r27, 0x29BF	; 0x8029bf <sSensorDataSnapshot+0x53>
    4034:	a3 96       	adiw	r28, 0x23	; 35
    4036:	bf af       	std	Y+63, r27	; 0x3f
    4038:	a3 97       	sbiw	r28, 0x23	; 35
    403a:	e0 91 c0 29 	lds	r30, 0x29C0	; 0x8029c0 <sSensorDataSnapshot+0x54>
    403e:	a4 96       	adiw	r28, 0x24	; 36
    4040:	ef af       	std	Y+63, r30	; 0x3f
    4042:	a4 97       	sbiw	r28, 0x24	; 36
    4044:	f0 91 c1 29 	lds	r31, 0x29C1	; 0x8029c1 <sSensorDataSnapshot+0x55>
    4048:	a5 96       	adiw	r28, 0x25	; 37
    404a:	ff af       	std	Y+63, r31	; 0x3f
    404c:	a5 97       	sbiw	r28, 0x25	; 37
    404e:	20 91 c2 29 	lds	r18, 0x29C2	; 0x8029c2 <sSensorDataSnapshot+0x56>
    4052:	a6 96       	adiw	r28, 0x26	; 38
    4054:	2f af       	std	Y+63, r18	; 0x3f
    4056:	a6 97       	sbiw	r28, 0x26	; 38
    4058:	30 91 c3 29 	lds	r19, 0x29C3	; 0x8029c3 <sSensorDataSnapshot+0x57>
    405c:	a7 96       	adiw	r28, 0x27	; 39
    405e:	3f af       	std	Y+63, r19	; 0x3f
    4060:	a7 97       	sbiw	r28, 0x27	; 39
    4062:	80 91 c4 29 	lds	r24, 0x29C4	; 0x8029c4 <sSensorDataSnapshot+0x58>
    4066:	a8 96       	adiw	r28, 0x28	; 40
    4068:	8f af       	std	Y+63, r24	; 0x3f
    406a:	a8 97       	sbiw	r28, 0x28	; 40
    406c:	40 90 0d 2a 	lds	r4, 0x2A0D	; 0x802a0d <sCal+0x28>
    4070:	50 90 0e 2a 	lds	r5, 0x2A0E	; 0x802a0e <sCal+0x29>
    4074:	60 90 0f 2a 	lds	r6, 0x2A0F	; 0x802a0f <sCal+0x2a>
    4078:	70 90 10 2a 	lds	r7, 0x2A10	; 0x802a10 <sCal+0x2b>
    407c:	80 90 11 2a 	lds	r8, 0x2A11	; 0x802a11 <sCal+0x2c>
    4080:	90 90 12 2a 	lds	r9, 0x2A12	; 0x802a12 <sCal+0x2d>
    4084:	a0 90 13 2a 	lds	r10, 0x2A13	; 0x802a13 <sCal+0x2e>
    4088:	b0 90 14 2a 	lds	r11, 0x2A14	; 0x802a14 <sCal+0x2f>
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    408c:	80 91 b1 29 	lds	r24, 0x29B1	; 0x8029b1 <sSensorDataSnapshot+0x45>
    4090:	90 91 b2 29 	lds	r25, 0x29B2	; 0x8029b2 <sSensorDataSnapshot+0x46>
    4094:	a0 91 b3 29 	lds	r26, 0x29B3	; 0x8029b3 <sSensorDataSnapshot+0x47>
    4098:	b0 91 b4 29 	lds	r27, 0x29B4	; 0x8029b4 <sSensorDataSnapshot+0x48>
    409c:	8e 83       	std	Y+6, r24	; 0x06
    409e:	9f 83       	std	Y+7, r25	; 0x07
    40a0:	a8 87       	std	Y+8, r26	; 0x08
    40a2:	b9 87       	std	Y+9, r27	; 0x09
    40a4:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <sCal+0x28>
    40a8:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <sCal+0x29>
    40ac:	a0 91 0f 2a 	lds	r26, 0x2A0F	; 0x802a0f <sCal+0x2a>
    40b0:	b0 91 10 2a 	lds	r27, 0x2A10	; 0x802a10 <sCal+0x2b>
    40b4:	8a 87       	std	Y+10, r24	; 0x0a
    40b6:	9b 87       	std	Y+11, r25	; 0x0b
    40b8:	ac 87       	std	Y+12, r26	; 0x0c
    40ba:	bd 87       	std	Y+13, r27	; 0x0d
    40bc:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <sCal+0x2c>
    40c0:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <sCal+0x2d>
    40c4:	a0 91 13 2a 	lds	r26, 0x2A13	; 0x802a13 <sCal+0x2e>
    40c8:	b0 91 14 2a 	lds	r27, 0x2A14	; 0x802a14 <sCal+0x2f>
    40cc:	8e 87       	std	Y+14, r24	; 0x0e
    40ce:	9f 87       	std	Y+15, r25	; 0x0f
    40d0:	a8 8b       	std	Y+16, r26	; 0x10
    40d2:	b9 8b       	std	Y+17, r27	; 0x11
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    40d4:	80 91 a9 29 	lds	r24, 0x29A9	; 0x8029a9 <sSensorDataSnapshot+0x3d>
    40d8:	90 91 aa 29 	lds	r25, 0x29AA	; 0x8029aa <sSensorDataSnapshot+0x3e>
    40dc:	a0 91 ab 29 	lds	r26, 0x29AB	; 0x8029ab <sSensorDataSnapshot+0x3f>
    40e0:	b0 91 ac 29 	lds	r27, 0x29AC	; 0x8029ac <sSensorDataSnapshot+0x40>
    40e4:	8a 8b       	std	Y+18, r24	; 0x12
    40e6:	9b 8b       	std	Y+19, r25	; 0x13
    40e8:	ac 8b       	std	Y+20, r26	; 0x14
    40ea:	bd 8b       	std	Y+21, r27	; 0x15
    40ec:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <sCal+0x2c>
    40f0:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <sCal+0x2d>
    40f4:	a0 91 13 2a 	lds	r26, 0x2A13	; 0x802a13 <sCal+0x2e>
    40f8:	b0 91 14 2a 	lds	r27, 0x2A14	; 0x802a14 <sCal+0x2f>
    40fc:	8e 8b       	std	Y+22, r24	; 0x16
    40fe:	9f 8b       	std	Y+23, r25	; 0x17
    4100:	a8 8f       	std	Y+24, r26	; 0x18
    4102:	b9 8f       	std	Y+25, r27	; 0x19
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    4104:	80 91 a5 29 	lds	r24, 0x29A5	; 0x8029a5 <sSensorDataSnapshot+0x39>
    4108:	90 91 a6 29 	lds	r25, 0x29A6	; 0x8029a6 <sSensorDataSnapshot+0x3a>
    410c:	a0 91 a7 29 	lds	r26, 0x29A7	; 0x8029a7 <sSensorDataSnapshot+0x3b>
    4110:	b0 91 a8 29 	lds	r27, 0x29A8	; 0x8029a8 <sSensorDataSnapshot+0x3c>
    4114:	8a 8f       	std	Y+26, r24	; 0x1a
    4116:	9b 8f       	std	Y+27, r25	; 0x1b
    4118:	ac 8f       	std	Y+28, r26	; 0x1c
    411a:	bd 8f       	std	Y+29, r27	; 0x1d
    411c:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <sCal+0x28>
    4120:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <sCal+0x29>
    4124:	a0 91 0f 2a 	lds	r26, 0x2A0F	; 0x802a0f <sCal+0x2a>
    4128:	b0 91 10 2a 	lds	r27, 0x2A10	; 0x802a10 <sCal+0x2b>
    412c:	8e 8f       	std	Y+30, r24	; 0x1e
    412e:	9f 8f       	std	Y+31, r25	; 0x1f
    4130:	a8 a3       	std	Y+32, r26	; 0x20
    4132:	b9 a3       	std	Y+33, r27	; 0x21
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    4134:	90 91 b5 29 	lds	r25, 0x29B5	; 0x8029b5 <sSensorDataSnapshot+0x49>
    4138:	a9 96       	adiw	r28, 0x29	; 41
    413a:	9f af       	std	Y+63, r25	; 0x3f
    413c:	a9 97       	sbiw	r28, 0x29	; 41
    413e:	a0 91 b6 29 	lds	r26, 0x29B6	; 0x8029b6 <sSensorDataSnapshot+0x4a>
    4142:	aa 96       	adiw	r28, 0x2a	; 42
    4144:	af af       	std	Y+63, r26	; 0x3f
    4146:	aa 97       	sbiw	r28, 0x2a	; 42
    4148:	b0 91 b7 29 	lds	r27, 0x29B7	; 0x8029b7 <sSensorDataSnapshot+0x4b>
    414c:	ab 96       	adiw	r28, 0x2b	; 43
    414e:	bf af       	std	Y+63, r27	; 0x3f
    4150:	ab 97       	sbiw	r28, 0x2b	; 43
    4152:	e0 91 b8 29 	lds	r30, 0x29B8	; 0x8029b8 <sSensorDataSnapshot+0x4c>
    4156:	ac 96       	adiw	r28, 0x2c	; 44
    4158:	ef af       	std	Y+63, r30	; 0x3f
    415a:	ac 97       	sbiw	r28, 0x2c	; 44
    415c:	f0 91 b9 29 	lds	r31, 0x29B9	; 0x8029b9 <sSensorDataSnapshot+0x4d>
    4160:	ad 96       	adiw	r28, 0x2d	; 45
    4162:	ff af       	std	Y+63, r31	; 0x3f
    4164:	ad 97       	sbiw	r28, 0x2d	; 45
    4166:	20 91 ba 29 	lds	r18, 0x29BA	; 0x8029ba <sSensorDataSnapshot+0x4e>
    416a:	ae 96       	adiw	r28, 0x2e	; 46
    416c:	2f af       	std	Y+63, r18	; 0x3f
    416e:	ae 97       	sbiw	r28, 0x2e	; 46
    4170:	30 91 bb 29 	lds	r19, 0x29BB	; 0x8029bb <sSensorDataSnapshot+0x4f>
    4174:	af 96       	adiw	r28, 0x2f	; 47
    4176:	3f af       	std	Y+63, r19	; 0x3f
    4178:	af 97       	sbiw	r28, 0x2f	; 47
    417a:	80 91 bc 29 	lds	r24, 0x29BC	; 0x8029bc <sSensorDataSnapshot+0x50>
    417e:	e0 96       	adiw	r28, 0x30	; 48
    4180:	8f af       	std	Y+63, r24	; 0x3f
    4182:	e0 97       	sbiw	r28, 0x30	; 48
    4184:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    4188:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    418c:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    4190:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    4194:	8a a3       	std	Y+34, r24	; 0x22
    4196:	9b a3       	std	Y+35, r25	; 0x23
    4198:	ac a3       	std	Y+36, r26	; 0x24
    419a:	bd a3       	std	Y+37, r27	; 0x25
    419c:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    41a0:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    41a4:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    41a8:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    41ac:	8e a3       	std	Y+38, r24	; 0x26
    41ae:	9f a3       	std	Y+39, r25	; 0x27
    41b0:	a8 a7       	std	Y+40, r26	; 0x28
    41b2:	b9 a7       	std	Y+41, r27	; 0x29
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    41b4:	80 91 ad 29 	lds	r24, 0x29AD	; 0x8029ad <sSensorDataSnapshot+0x41>
    41b8:	90 91 ae 29 	lds	r25, 0x29AE	; 0x8029ae <sSensorDataSnapshot+0x42>
    41bc:	a0 91 af 29 	lds	r26, 0x29AF	; 0x8029af <sSensorDataSnapshot+0x43>
    41c0:	b0 91 b0 29 	lds	r27, 0x29B0	; 0x8029b0 <sSensorDataSnapshot+0x44>
    41c4:	8a a7       	std	Y+42, r24	; 0x2a
    41c6:	9b a7       	std	Y+43, r25	; 0x2b
    41c8:	ac a7       	std	Y+44, r26	; 0x2c
    41ca:	bd a7       	std	Y+45, r27	; 0x2d
    41cc:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    41d0:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    41d4:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    41d8:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    41dc:	8e a7       	std	Y+46, r24	; 0x2e
    41de:	9f a7       	std	Y+47, r25	; 0x2f
    41e0:	a8 ab       	std	Y+48, r26	; 0x30
    41e2:	b9 ab       	std	Y+49, r27	; 0x31
    41e4:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    41e8:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    41ec:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    41f0:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    41f4:	8a ab       	std	Y+50, r24	; 0x32
    41f6:	9b ab       	std	Y+51, r25	; 0x33
    41f8:	ac ab       	std	Y+52, r26	; 0x34
    41fa:	bd ab       	std	Y+53, r27	; 0x35
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    41fc:	80 91 a1 29 	lds	r24, 0x29A1	; 0x8029a1 <sSensorDataSnapshot+0x35>
    4200:	90 91 a2 29 	lds	r25, 0x29A2	; 0x8029a2 <sSensorDataSnapshot+0x36>
    4204:	a0 91 a3 29 	lds	r26, 0x29A3	; 0x8029a3 <sSensorDataSnapshot+0x37>
    4208:	b0 91 a4 29 	lds	r27, 0x29A4	; 0x8029a4 <sSensorDataSnapshot+0x38>
    420c:	8e ab       	std	Y+54, r24	; 0x36
    420e:	9f ab       	std	Y+55, r25	; 0x37
    4210:	a8 af       	std	Y+56, r26	; 0x38
    4212:	b9 af       	std	Y+57, r27	; 0x39
    4214:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    4218:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    421c:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    4220:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    4224:	8a af       	std	Y+58, r24	; 0x3a
    4226:	9b af       	std	Y+59, r25	; 0x3b
    4228:	ac af       	std	Y+60, r26	; 0x3c
    422a:	bd af       	std	Y+61, r27	; 0x3d
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    422c:	80 91 9d 29 	lds	r24, 0x299D	; 0x80299d <sSensorDataSnapshot+0x31>
    4230:	90 91 9e 29 	lds	r25, 0x299E	; 0x80299e <sSensorDataSnapshot+0x32>
    4234:	a0 91 9f 29 	lds	r26, 0x299F	; 0x80299f <sSensorDataSnapshot+0x33>
    4238:	b0 91 a0 29 	lds	r27, 0x29A0	; 0x8029a0 <sSensorDataSnapshot+0x34>
    423c:	22 96       	adiw	r28, 0x02	; 2
    423e:	8c af       	std	Y+60, r24	; 0x3c
    4240:	9d af       	std	Y+61, r25	; 0x3d
    4242:	ae af       	std	Y+62, r26	; 0x3e
    4244:	bf af       	std	Y+63, r27	; 0x3f
    4246:	22 97       	sbiw	r28, 0x02	; 2
    4248:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    424c:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    4250:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    4254:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    4258:	26 96       	adiw	r28, 0x06	; 6
    425a:	8c af       	std	Y+60, r24	; 0x3c
    425c:	9d af       	std	Y+61, r25	; 0x3d
    425e:	ae af       	std	Y+62, r26	; 0x3e
    4260:	bf af       	std	Y+63, r27	; 0x3f
    4262:	26 97       	sbiw	r28, 0x06	; 6
	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
    4264:	80 91 70 29 	lds	r24, 0x2970	; 0x802970 <sSensorDataSnapshot+0x4>
    4268:	90 91 71 29 	lds	r25, 0x2971	; 0x802971 <sSensorDataSnapshot+0x5>
    426c:	a0 91 72 29 	lds	r26, 0x2972	; 0x802972 <sSensorDataSnapshot+0x6>
    4270:	b0 91 73 29 	lds	r27, 0x2973	; 0x802973 <sSensorDataSnapshot+0x7>
    4274:	2a 96       	adiw	r28, 0x0a	; 10
    4276:	8c af       	std	Y+60, r24	; 0x3c
    4278:	9d af       	std	Y+61, r25	; 0x3d
    427a:	ae af       	std	Y+62, r26	; 0x3e
    427c:	bf af       	std	Y+63, r27	; 0x3f
    427e:	2a 97       	sbiw	r28, 0x0a	; 10

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
    4280:	80 91 6c 29 	lds	r24, 0x296C	; 0x80296c <sSensorDataSnapshot>
    4284:	90 91 6d 29 	lds	r25, 0x296D	; 0x80296d <sSensorDataSnapshot+0x1>
    4288:	a0 91 6e 29 	lds	r26, 0x296E	; 0x80296e <sSensorDataSnapshot+0x2>
    428c:	b0 91 6f 29 	lds	r27, 0x296F	; 0x80296f <sSensorDataSnapshot+0x3>
    4290:	2e 96       	adiw	r28, 0x0e	; 14
    4292:	8c af       	std	Y+60, r24	; 0x3c
    4294:	9d af       	std	Y+61, r25	; 0x3d
    4296:	ae af       	std	Y+62, r26	; 0x3e
    4298:	bf af       	std	Y+63, r27	; 0x3f
    429a:	2e 97       	sbiw	r28, 0x0e	; 14
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
    429c:	80 91 78 29 	lds	r24, 0x2978	; 0x802978 <sSensorDataSnapshot+0xc>
    42a0:	90 91 79 29 	lds	r25, 0x2979	; 0x802979 <sSensorDataSnapshot+0xd>
    42a4:	a0 91 7a 29 	lds	r26, 0x297A	; 0x80297a <sSensorDataSnapshot+0xe>
    42a8:	b0 91 7b 29 	lds	r27, 0x297B	; 0x80297b <sSensorDataSnapshot+0xf>
    42ac:	62 96       	adiw	r28, 0x12	; 18
    42ae:	8c af       	std	Y+60, r24	; 0x3c
    42b0:	9d af       	std	Y+61, r25	; 0x3d
    42b2:	ae af       	std	Y+62, r26	; 0x3e
    42b4:	bf af       	std	Y+63, r27	; 0x3f
    42b6:	62 97       	sbiw	r28, 0x12	; 18
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
    42b8:	80 91 74 29 	lds	r24, 0x2974	; 0x802974 <sSensorDataSnapshot+0x8>
    42bc:	90 91 75 29 	lds	r25, 0x2975	; 0x802975 <sSensorDataSnapshot+0x9>
    42c0:	a0 91 76 29 	lds	r26, 0x2976	; 0x802976 <sSensorDataSnapshot+0xa>
    42c4:	b0 91 77 29 	lds	r27, 0x2977	; 0x802977 <sSensorDataSnapshot+0xb>
    42c8:	66 96       	adiw	r28, 0x16	; 22
    42ca:	8c af       	std	Y+60, r24	; 0x3c
    42cc:	9d af       	std	Y+61, r25	; 0x3d
    42ce:	ae af       	std	Y+62, r26	; 0x3e
    42d0:	bf af       	std	Y+63, r27	; 0x3f
    42d2:	66 97       	sbiw	r28, 0x16	; 22
void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    42d4:	80 91 68 29 	lds	r24, 0x2968	; 0x802968 <sSessionCycleCountSnapshot>
    42d8:	90 91 69 29 	lds	r25, 0x2969	; 0x802969 <sSessionCycleCountSnapshot+0x1>
    42dc:	a0 91 6a 29 	lds	r26, 0x296A	; 0x80296a <sSessionCycleCountSnapshot+0x2>
    42e0:	b0 91 6b 29 	lds	r27, 0x296B	; 0x80296b <sSessionCycleCountSnapshot+0x3>
    42e4:	6a 96       	adiw	r28, 0x1a	; 26
    42e6:	8c af       	std	Y+60, r24	; 0x3c
    42e8:	9d af       	std	Y+61, r25	; 0x3d
    42ea:	ae af       	std	Y+62, r26	; 0x3e
    42ec:	bf af       	std	Y+63, r27	; 0x3f
    42ee:	6a 97       	sbiw	r28, 0x1a	; 26

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    42f0:	e6 96       	adiw	r28, 0x36	; 54
    42f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    42f4:	e6 97       	sbiw	r28, 0x36	; 54
    42f6:	9f 93       	push	r25
    42f8:	e5 96       	adiw	r28, 0x35	; 53
    42fa:	af ad       	ldd	r26, Y+63	; 0x3f
    42fc:	e5 97       	sbiw	r28, 0x35	; 53
    42fe:	af 93       	push	r26
    4300:	e4 96       	adiw	r28, 0x34	; 52
    4302:	bf ad       	ldd	r27, Y+63	; 0x3f
    4304:	e4 97       	sbiw	r28, 0x34	; 52
    4306:	bf 93       	push	r27
    4308:	e3 96       	adiw	r28, 0x33	; 51
    430a:	ef ad       	ldd	r30, Y+63	; 0x3f
    430c:	e3 97       	sbiw	r28, 0x33	; 51
    430e:	ef 93       	push	r30
    4310:	6c 96       	adiw	r28, 0x1c	; 28
    4312:	ff ad       	ldd	r31, Y+63	; 0x3f
    4314:	6c 97       	sbiw	r28, 0x1c	; 28
    4316:	ff 93       	push	r31
    4318:	6b 96       	adiw	r28, 0x1b	; 27
    431a:	2f ad       	ldd	r18, Y+63	; 0x3f
    431c:	6b 97       	sbiw	r28, 0x1b	; 27
    431e:	2f 93       	push	r18
    4320:	3a 81       	ldd	r19, Y+2	; 0x02
    4322:	3f 93       	push	r19
    4324:	89 81       	ldd	r24, Y+1	; 0x01
    4326:	8f 93       	push	r24
    4328:	3f 92       	push	r3
    432a:	1f 93       	push	r17
    432c:	1f 92       	push	r1
    432e:	9b 81       	ldd	r25, Y+3	; 0x03
    4330:	9f 93       	push	r25
    4332:	ea 96       	adiw	r28, 0x3a	; 58
    4334:	af ad       	ldd	r26, Y+63	; 0x3f
    4336:	ea 97       	sbiw	r28, 0x3a	; 58
    4338:	af 93       	push	r26
    433a:	e9 96       	adiw	r28, 0x39	; 57
    433c:	bf ad       	ldd	r27, Y+63	; 0x3f
    433e:	e9 97       	sbiw	r28, 0x39	; 57
    4340:	bf 93       	push	r27
    4342:	e8 96       	adiw	r28, 0x38	; 56
    4344:	ef ad       	ldd	r30, Y+63	; 0x3f
    4346:	e8 97       	sbiw	r28, 0x38	; 56
    4348:	ef 93       	push	r30
    434a:	e7 96       	adiw	r28, 0x37	; 55
    434c:	ff ad       	ldd	r31, Y+63	; 0x3f
    434e:	e7 97       	sbiw	r28, 0x37	; 55
    4350:	ff 93       	push	r31
    4352:	6e 96       	adiw	r28, 0x1e	; 30
    4354:	2f ad       	ldd	r18, Y+63	; 0x3f
    4356:	6e 97       	sbiw	r28, 0x1e	; 30
    4358:	2f 93       	push	r18
    435a:	6d 96       	adiw	r28, 0x1d	; 29
    435c:	3f ad       	ldd	r19, Y+63	; 0x3f
    435e:	6d 97       	sbiw	r28, 0x1d	; 29
    4360:	3f 93       	push	r19
    4362:	ee 96       	adiw	r28, 0x3e	; 62
    4364:	8f ad       	ldd	r24, Y+63	; 0x3f
    4366:	ee 97       	sbiw	r28, 0x3e	; 62
    4368:	8f 93       	push	r24
    436a:	ed 96       	adiw	r28, 0x3d	; 61
    436c:	9f ad       	ldd	r25, Y+63	; 0x3f
    436e:	ed 97       	sbiw	r28, 0x3d	; 61
    4370:	9f 93       	push	r25
    4372:	ec 96       	adiw	r28, 0x3c	; 60
    4374:	af ad       	ldd	r26, Y+63	; 0x3f
    4376:	ec 97       	sbiw	r28, 0x3c	; 60
    4378:	af 93       	push	r26
    437a:	eb 96       	adiw	r28, 0x3b	; 59
    437c:	bf ad       	ldd	r27, Y+63	; 0x3f
    437e:	eb 97       	sbiw	r28, 0x3b	; 59
    4380:	bf 93       	push	r27
    4382:	a0 96       	adiw	r28, 0x20	; 32
    4384:	ef ad       	ldd	r30, Y+63	; 0x3f
    4386:	a0 97       	sbiw	r28, 0x20	; 32
    4388:	ef 93       	push	r30
    438a:	6f 96       	adiw	r28, 0x1f	; 31
    438c:	ff ad       	ldd	r31, Y+63	; 0x3f
    438e:	6f 97       	sbiw	r28, 0x1f	; 31
    4390:	ff 93       	push	r31
    4392:	cf 57       	subi	r28, 0x7F	; 127
    4394:	df 4f       	sbci	r29, 0xFF	; 255
    4396:	28 81       	ld	r18, Y
    4398:	c1 58       	subi	r28, 0x81	; 129
    439a:	d0 40       	sbci	r29, 0x00	; 0
    439c:	2f 93       	push	r18
    439e:	c0 58       	subi	r28, 0x80	; 128
    43a0:	df 4f       	sbci	r29, 0xFF	; 255
    43a2:	38 81       	ld	r19, Y
    43a4:	c0 58       	subi	r28, 0x80	; 128
    43a6:	d0 40       	sbci	r29, 0x00	; 0
    43a8:	3f 93       	push	r19
    43aa:	c1 58       	subi	r28, 0x81	; 129
    43ac:	df 4f       	sbci	r29, 0xFF	; 255
    43ae:	88 81       	ld	r24, Y
    43b0:	cf 57       	subi	r28, 0x7F	; 127
    43b2:	d0 40       	sbci	r29, 0x00	; 0
    43b4:	8f 93       	push	r24
    43b6:	ef 96       	adiw	r28, 0x3f	; 63
    43b8:	9f ad       	ldd	r25, Y+63	; 0x3f
    43ba:	ef 97       	sbiw	r28, 0x3f	; 63
    43bc:	9f 93       	push	r25
    43be:	0f 93       	push	r16
    43c0:	2f 92       	push	r2
    43c2:	cd 57       	subi	r28, 0x7D	; 125
    43c4:	df 4f       	sbci	r29, 0xFF	; 255
    43c6:	a8 81       	ld	r26, Y
    43c8:	c3 58       	subi	r28, 0x83	; 131
    43ca:	d0 40       	sbci	r29, 0x00	; 0
    43cc:	af 93       	push	r26
    43ce:	ce 57       	subi	r28, 0x7E	; 126
    43d0:	df 4f       	sbci	r29, 0xFF	; 255
    43d2:	b8 81       	ld	r27, Y
    43d4:	c2 58       	subi	r28, 0x82	; 130
    43d6:	d0 40       	sbci	r29, 0x00	; 0
    43d8:	bf 93       	push	r27
    43da:	80 e0       	ldi	r24, 0x00	; 0
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    43e2:	23 e3       	ldi	r18, 0x33	; 51
    43e4:	33 e3       	ldi	r19, 0x33	; 51
    43e6:	43 e2       	ldi	r20, 0x23	; 35
    43e8:	54 e4       	ldi	r21, 0x44	; 68
    43ea:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    43ee:	9f 93       	push	r25
    43f0:	8f 93       	push	r24
    43f2:	7f 93       	push	r23
    43f4:	6f 93       	push	r22
    43f6:	ec 81       	ldd	r30, Y+4	; 0x04
    43f8:	fd 81       	ldd	r31, Y+5	; 0x05
    43fa:	bf 01       	movw	r22, r30
    43fc:	80 e0       	ldi	r24, 0x00	; 0
    43fe:	90 e0       	ldi	r25, 0x00	; 0
    4400:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    4404:	27 e1       	ldi	r18, 0x17	; 23
    4406:	37 eb       	ldi	r19, 0xB7	; 183
    4408:	41 ed       	ldi	r20, 0xD1	; 209
    440a:	5e e3       	ldi	r21, 0x3E	; 62
    440c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4410:	9f 93       	push	r25
    4412:	8f 93       	push	r24
    4414:	7f 93       	push	r23
    4416:	6f 93       	push	r22
    4418:	c7 01       	movw	r24, r14
    441a:	b6 01       	movw	r22, r12
    441c:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e2       	ldi	r20, 0x20	; 32
    4426:	59 e4       	ldi	r21, 0x49	; 73
    4428:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    442c:	9f 93       	push	r25
    442e:	8f 93       	push	r24
    4430:	7f 93       	push	r23
    4432:	6f 93       	push	r22
    4434:	a1 96       	adiw	r28, 0x21	; 33
    4436:	2f ad       	ldd	r18, Y+63	; 0x3f
    4438:	a1 97       	sbiw	r28, 0x21	; 33
    443a:	a2 96       	adiw	r28, 0x22	; 34
    443c:	3f ad       	ldd	r19, Y+63	; 0x3f
    443e:	a2 97       	sbiw	r28, 0x22	; 34
    4440:	a3 96       	adiw	r28, 0x23	; 35
    4442:	4f ad       	ldd	r20, Y+63	; 0x3f
    4444:	a3 97       	sbiw	r28, 0x23	; 35
    4446:	a4 96       	adiw	r28, 0x24	; 36
    4448:	5f ad       	ldd	r21, Y+63	; 0x3f
    444a:	a4 97       	sbiw	r28, 0x24	; 36
    444c:	a5 96       	adiw	r28, 0x25	; 37
    444e:	6f ad       	ldd	r22, Y+63	; 0x3f
    4450:	a5 97       	sbiw	r28, 0x25	; 37
    4452:	a6 96       	adiw	r28, 0x26	; 38
    4454:	7f ad       	ldd	r23, Y+63	; 0x3f
    4456:	a6 97       	sbiw	r28, 0x26	; 38
    4458:	a7 96       	adiw	r28, 0x27	; 39
    445a:	8f ad       	ldd	r24, Y+63	; 0x3f
    445c:	a7 97       	sbiw	r28, 0x27	; 39
    445e:	a8 96       	adiw	r28, 0x28	; 40
    4460:	9f ad       	ldd	r25, Y+63	; 0x3f
    4462:	a8 97       	sbiw	r28, 0x28	; 40
    4464:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__floatdisf>
    4468:	6b 01       	movw	r12, r22
    446a:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e4       	ldi	r19, 0x40	; 64
    4470:	4c e9       	ldi	r20, 0x9C	; 156
    4472:	55 e4       	ldi	r21, 0x45	; 69
    4474:	c3 01       	movw	r24, r6
    4476:	b2 01       	movw	r22, r4
    4478:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    447c:	a5 01       	movw	r20, r10
    447e:	94 01       	movw	r18, r8
    4480:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    4484:	9b 01       	movw	r18, r22
    4486:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4488:	c7 01       	movw	r24, r14
    448a:	b6 01       	movw	r22, r12
    448c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    4490:	9f 93       	push	r25
    4492:	8f 93       	push	r24
    4494:	7f 93       	push	r23
    4496:	6f 93       	push	r22
    4498:	6e 81       	ldd	r22, Y+6	; 0x06
    449a:	7f 81       	ldd	r23, Y+7	; 0x07
    449c:	88 85       	ldd	r24, Y+8	; 0x08
    449e:	99 85       	ldd	r25, Y+9	; 0x09
    44a0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    44a4:	6b 01       	movw	r12, r22
    44a6:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	30 e0       	ldi	r19, 0x00	; 0
    44ac:	40 e8       	ldi	r20, 0x80	; 128
    44ae:	53 e4       	ldi	r21, 0x43	; 67
    44b0:	6a 85       	ldd	r22, Y+10	; 0x0a
    44b2:	7b 85       	ldd	r23, Y+11	; 0x0b
    44b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    44b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    44b8:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    44bc:	2e 85       	ldd	r18, Y+14	; 0x0e
    44be:	3f 85       	ldd	r19, Y+15	; 0x0f
    44c0:	48 89       	ldd	r20, Y+16	; 0x10
    44c2:	59 89       	ldd	r21, Y+17	; 0x11
    44c4:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    44c8:	9b 01       	movw	r18, r22
    44ca:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    44cc:	c7 01       	movw	r24, r14
    44ce:	b6 01       	movw	r22, r12
    44d0:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    44d4:	9f 93       	push	r25
    44d6:	8f 93       	push	r24
    44d8:	7f 93       	push	r23
    44da:	6f 93       	push	r22
    44dc:	6a 89       	ldd	r22, Y+18	; 0x12
    44de:	7b 89       	ldd	r23, Y+19	; 0x13
    44e0:	8c 89       	ldd	r24, Y+20	; 0x14
    44e2:	9d 89       	ldd	r25, Y+21	; 0x15
    44e4:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    44e8:	6b 01       	movw	r12, r22
    44ea:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	40 e8       	ldi	r20, 0x80	; 128
    44f2:	57 e4       	ldi	r21, 0x47	; 71
    44f4:	6e 89       	ldd	r22, Y+22	; 0x16
    44f6:	7f 89       	ldd	r23, Y+23	; 0x17
    44f8:	88 8d       	ldd	r24, Y+24	; 0x18
    44fa:	99 8d       	ldd	r25, Y+25	; 0x19
    44fc:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    4500:	9b 01       	movw	r18, r22
    4502:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4504:	c7 01       	movw	r24, r14
    4506:	b6 01       	movw	r22, r12
    4508:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    450c:	9f 93       	push	r25
    450e:	8f 93       	push	r24
    4510:	7f 93       	push	r23
    4512:	6f 93       	push	r22
    4514:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4516:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4518:	8c 8d       	ldd	r24, Y+28	; 0x1c
    451a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    451c:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    4520:	6b 01       	movw	r12, r22
    4522:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    4524:	20 e0       	ldi	r18, 0x00	; 0
    4526:	30 e0       	ldi	r19, 0x00	; 0
    4528:	40 e8       	ldi	r20, 0x80	; 128
    452a:	57 e4       	ldi	r21, 0x47	; 71
    452c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    452e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    4530:	88 a1       	ldd	r24, Y+32	; 0x20
    4532:	99 a1       	ldd	r25, Y+33	; 0x21
    4534:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    4538:	9b 01       	movw	r18, r22
    453a:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    453c:	c7 01       	movw	r24, r14
    453e:	b6 01       	movw	r22, r12
    4540:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    4544:	9f 93       	push	r25
    4546:	8f 93       	push	r24
    4548:	7f 93       	push	r23
    454a:	6f 93       	push	r22
    454c:	a9 96       	adiw	r28, 0x29	; 41
    454e:	2f ad       	ldd	r18, Y+63	; 0x3f
    4550:	a9 97       	sbiw	r28, 0x29	; 41
    4552:	aa 96       	adiw	r28, 0x2a	; 42
    4554:	3f ad       	ldd	r19, Y+63	; 0x3f
    4556:	aa 97       	sbiw	r28, 0x2a	; 42
    4558:	ab 96       	adiw	r28, 0x2b	; 43
    455a:	4f ad       	ldd	r20, Y+63	; 0x3f
    455c:	ab 97       	sbiw	r28, 0x2b	; 43
    455e:	ac 96       	adiw	r28, 0x2c	; 44
    4560:	5f ad       	ldd	r21, Y+63	; 0x3f
    4562:	ac 97       	sbiw	r28, 0x2c	; 44
    4564:	ad 96       	adiw	r28, 0x2d	; 45
    4566:	6f ad       	ldd	r22, Y+63	; 0x3f
    4568:	ad 97       	sbiw	r28, 0x2d	; 45
    456a:	ae 96       	adiw	r28, 0x2e	; 46
    456c:	7f ad       	ldd	r23, Y+63	; 0x3f
    456e:	ae 97       	sbiw	r28, 0x2e	; 46
    4570:	af 96       	adiw	r28, 0x2f	; 47
    4572:	8f ad       	ldd	r24, Y+63	; 0x3f
    4574:	af 97       	sbiw	r28, 0x2f	; 47
    4576:	e0 96       	adiw	r28, 0x30	; 48
    4578:	9f ad       	ldd	r25, Y+63	; 0x3f
    457a:	e0 97       	sbiw	r28, 0x30	; 48
    457c:	0e 94 d9 30 	call	0x61b2	; 0x61b2 <__floatdisf>
    4580:	6b 01       	movw	r12, r22
    4582:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e4       	ldi	r19, 0x40	; 64
    4588:	4c e9       	ldi	r20, 0x9C	; 156
    458a:	55 e4       	ldi	r21, 0x45	; 69
    458c:	6a a1       	ldd	r22, Y+34	; 0x22
    458e:	7b a1       	ldd	r23, Y+35	; 0x23
    4590:	8c a1       	ldd	r24, Y+36	; 0x24
    4592:	9d a1       	ldd	r25, Y+37	; 0x25
    4594:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    4598:	2e a1       	ldd	r18, Y+38	; 0x26
    459a:	3f a1       	ldd	r19, Y+39	; 0x27
    459c:	48 a5       	ldd	r20, Y+40	; 0x28
    459e:	59 a5       	ldd	r21, Y+41	; 0x29
    45a0:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    45a4:	9b 01       	movw	r18, r22
    45a6:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    45a8:	c7 01       	movw	r24, r14
    45aa:	b6 01       	movw	r22, r12
    45ac:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    45b0:	9f 93       	push	r25
    45b2:	8f 93       	push	r24
    45b4:	7f 93       	push	r23
    45b6:	6f 93       	push	r22
    45b8:	6a a5       	ldd	r22, Y+42	; 0x2a
    45ba:	7b a5       	ldd	r23, Y+43	; 0x2b
    45bc:	8c a5       	ldd	r24, Y+44	; 0x2c
    45be:	9d a5       	ldd	r25, Y+45	; 0x2d
    45c0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    45c4:	6b 01       	movw	r12, r22
    45c6:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	40 e8       	ldi	r20, 0x80	; 128
    45ce:	53 e4       	ldi	r21, 0x43	; 67
    45d0:	6e a5       	ldd	r22, Y+46	; 0x2e
    45d2:	7f a5       	ldd	r23, Y+47	; 0x2f
    45d4:	88 a9       	ldd	r24, Y+48	; 0x30
    45d6:	99 a9       	ldd	r25, Y+49	; 0x31
    45d8:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    45dc:	2a a9       	ldd	r18, Y+50	; 0x32
    45de:	3b a9       	ldd	r19, Y+51	; 0x33
    45e0:	4c a9       	ldd	r20, Y+52	; 0x34
    45e2:	5d a9       	ldd	r21, Y+53	; 0x35
    45e4:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    45e8:	9b 01       	movw	r18, r22
    45ea:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    45ec:	c7 01       	movw	r24, r14
    45ee:	b6 01       	movw	r22, r12
    45f0:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    45f4:	9f 93       	push	r25
    45f6:	8f 93       	push	r24
    45f8:	7f 93       	push	r23
    45fa:	6f 93       	push	r22
    45fc:	6e a9       	ldd	r22, Y+54	; 0x36
    45fe:	7f a9       	ldd	r23, Y+55	; 0x37
    4600:	88 ad       	ldd	r24, Y+56	; 0x38
    4602:	99 ad       	ldd	r25, Y+57	; 0x39
    4604:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    4608:	6b 01       	movw	r12, r22
    460a:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	30 e0       	ldi	r19, 0x00	; 0
    4610:	40 e8       	ldi	r20, 0x80	; 128
    4612:	57 e4       	ldi	r21, 0x47	; 71
    4614:	6a ad       	ldd	r22, Y+58	; 0x3a
    4616:	7b ad       	ldd	r23, Y+59	; 0x3b
    4618:	8c ad       	ldd	r24, Y+60	; 0x3c
    461a:	9d ad       	ldd	r25, Y+61	; 0x3d
    461c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    4620:	9b 01       	movw	r18, r22
    4622:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4624:	c7 01       	movw	r24, r14
    4626:	b6 01       	movw	r22, r12
    4628:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    462c:	9f 93       	push	r25
    462e:	8f 93       	push	r24
    4630:	7f 93       	push	r23
    4632:	6f 93       	push	r22
    4634:	22 96       	adiw	r28, 0x02	; 2
    4636:	6c ad       	ldd	r22, Y+60	; 0x3c
    4638:	7d ad       	ldd	r23, Y+61	; 0x3d
    463a:	8e ad       	ldd	r24, Y+62	; 0x3e
    463c:	9f ad       	ldd	r25, Y+63	; 0x3f
    463e:	22 97       	sbiw	r28, 0x02	; 2
    4640:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
    4644:	6b 01       	movw	r12, r22
    4646:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e8       	ldi	r20, 0x80	; 128
    464e:	57 e4       	ldi	r21, 0x47	; 71
    4650:	26 96       	adiw	r28, 0x06	; 6
    4652:	6c ad       	ldd	r22, Y+60	; 0x3c
    4654:	7d ad       	ldd	r23, Y+61	; 0x3d
    4656:	8e ad       	ldd	r24, Y+62	; 0x3e
    4658:	9f ad       	ldd	r25, Y+63	; 0x3f
    465a:	26 97       	sbiw	r28, 0x06	; 6
    465c:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>
    4660:	9b 01       	movw	r18, r22
    4662:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4664:	c7 01       	movw	r24, r14
    4666:	b6 01       	movw	r22, r12
    4668:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>
    466c:	9f 93       	push	r25
    466e:	8f 93       	push	r24
    4670:	7f 93       	push	r23
    4672:	6f 93       	push	r22
    4674:	2a 96       	adiw	r28, 0x0a	; 10
    4676:	6c ad       	ldd	r22, Y+60	; 0x3c
    4678:	7d ad       	ldd	r23, Y+61	; 0x3d
    467a:	8e ad       	ldd	r24, Y+62	; 0x3e
    467c:	9f ad       	ldd	r25, Y+63	; 0x3f
    467e:	2a 97       	sbiw	r28, 0x0a	; 10
    4680:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
    4684:	25 e5       	ldi	r18, 0x55	; 85
    4686:	35 e5       	ldi	r19, 0x55	; 85
    4688:	45 e8       	ldi	r20, 0x85	; 133
    468a:	59 e4       	ldi	r21, 0x49	; 73
    468c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4690:	9f 93       	push	r25
    4692:	8f 93       	push	r24
    4694:	7f 93       	push	r23
    4696:	6f 93       	push	r22
    4698:	2e 96       	adiw	r28, 0x0e	; 14
    469a:	6c ad       	ldd	r22, Y+60	; 0x3c
    469c:	7d ad       	ldd	r23, Y+61	; 0x3d
    469e:	8e ad       	ldd	r24, Y+62	; 0x3e
    46a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    46a2:	2e 97       	sbiw	r28, 0x0e	; 14
    46a4:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
    46a8:	25 e5       	ldi	r18, 0x55	; 85
    46aa:	35 e5       	ldi	r19, 0x55	; 85
    46ac:	45 e8       	ldi	r20, 0x85	; 133
    46ae:	59 e4       	ldi	r21, 0x49	; 73
    46b0:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    46b4:	9f 93       	push	r25
    46b6:	8f 93       	push	r24
    46b8:	7f 93       	push	r23
    46ba:	6f 93       	push	r22
    46bc:	62 96       	adiw	r28, 0x12	; 18
    46be:	6c ad       	ldd	r22, Y+60	; 0x3c
    46c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    46c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    46c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    46c6:	62 97       	sbiw	r28, 0x12	; 18
    46c8:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	40 e8       	ldi	r20, 0x80	; 128
    46d2:	57 e3       	ldi	r21, 0x37	; 55
    46d4:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    46d8:	9f 93       	push	r25
    46da:	8f 93       	push	r24
    46dc:	7f 93       	push	r23
    46de:	6f 93       	push	r22
    46e0:	66 96       	adiw	r28, 0x16	; 22
    46e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    46e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    46e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    46e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    46ea:	66 97       	sbiw	r28, 0x16	; 22
    46ec:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	40 e8       	ldi	r20, 0x80	; 128
    46f6:	57 e3       	ldi	r21, 0x37	; 55
    46f8:	0e 94 df 31 	call	0x63be	; 0x63be <__mulsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    46fc:	9f 93       	push	r25
    46fe:	8f 93       	push	r24
    4700:	7f 93       	push	r23
    4702:	6f 93       	push	r22
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    4704:	6a 96       	adiw	r28, 0x1a	; 26
    4706:	6c ad       	ldd	r22, Y+60	; 0x3c
    4708:	7d ad       	ldd	r23, Y+61	; 0x3d
    470a:	8e ad       	ldd	r24, Y+62	; 0x3e
    470c:	9f ad       	ldd	r25, Y+63	; 0x3f
    470e:	6a 97       	sbiw	r28, 0x1a	; 26
    4710:	0e 94 df 30 	call	0x61be	; 0x61be <__floatunsisf>
    4714:	20 e0       	ldi	r18, 0x00	; 0
    4716:	30 e4       	ldi	r19, 0x40	; 64
    4718:	4c e9       	ldi	r20, 0x9C	; 156
    471a:	55 e4       	ldi	r21, 0x45	; 69
    471c:	0e 94 31 30 	call	0x6062	; 0x6062 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4720:	9f 93       	push	r25
    4722:	8f 93       	push	r24
    4724:	7f 93       	push	r23
    4726:	6f 93       	push	r22
    4728:	8c e6       	ldi	r24, 0x6C	; 108
    472a:	96 e2       	ldi	r25, 0x26	; 38
    472c:	9f 93       	push	r25
    472e:	8f 93       	push	r24
    4730:	e2 96       	adiw	r28, 0x32	; 50
    4732:	ff ad       	ldd	r31, Y+63	; 0x3f
    4734:	e2 97       	sbiw	r28, 0x32	; 50
    4736:	ff 93       	push	r31
    4738:	e1 96       	adiw	r28, 0x31	; 49
    473a:	2f ad       	ldd	r18, Y+63	; 0x3f
    473c:	e1 97       	sbiw	r28, 0x31	; 49
    473e:	2f 93       	push	r18
    4740:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    4744:	cd bf       	out	0x3d, r28	; 61
    4746:	de bf       	out	0x3e, r29	; 62
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_EVA */
    4748:	cd 57       	subi	r28, 0x7D	; 125
    474a:	df 4f       	sbci	r29, 0xFF	; 255
    474c:	cd bf       	out	0x3d, r28	; 61
    474e:	de bf       	out	0x3e, r29	; 62
    4750:	df 91       	pop	r29
    4752:	cf 91       	pop	r28
    4754:	1f 91       	pop	r17
    4756:	0f 91       	pop	r16
    4758:	ff 90       	pop	r15
    475a:	ef 90       	pop	r14
    475c:	df 90       	pop	r13
    475e:	cf 90       	pop	r12
    4760:	bf 90       	pop	r11
    4762:	af 90       	pop	r10
    4764:	9f 90       	pop	r9
    4766:	8f 90       	pop	r8
    4768:	7f 90       	pop	r7
    476a:	6f 90       	pop	r6
    476c:	5f 90       	pop	r5
    476e:	4f 90       	pop	r4
    4770:	3f 90       	pop	r3
    4772:	2f 90       	pop	r2
    4774:	08 95       	ret

00004776 <PrintResetHeader>:


void PrintResetHeader(FILE *fp) {
    4776:	cf 93       	push	r28
    4778:	df 93       	push	r29
    477a:	d8 2f       	mov	r29, r24
    477c:	c9 2f       	mov	r28, r25
	
	fprintf(fp, "# HvA SECOM Motor driver board ");
    477e:	68 2f       	mov	r22, r24
    4780:	79 2f       	mov	r23, r25
    4782:	8e ee       	ldi	r24, 0xEE	; 238
    4784:	96 e2       	ldi	r25, 0x26	; 38
    4786:	0e 94 10 3b 	call	0x7620	; 0x7620 <fputs>
	PrintBoardType(fp);
    478a:	8d 2f       	mov	r24, r29
    478c:	9c 2f       	mov	r25, r28
    478e:	0e 94 88 2e 	call	0x5d10	; 0x5d10 <PrintBoardType>
	fprintf(fp, "busID %d cpu ", GetBusID());
    4792:	0e 94 77 2e 	call	0x5cee	; 0x5cee <GetBusID>
    4796:	1f 92       	push	r1
    4798:	8f 93       	push	r24
    479a:	8e e0       	ldi	r24, 0x0E	; 14
    479c:	97 e2       	ldi	r25, 0x27	; 39
    479e:	9f 93       	push	r25
    47a0:	8f 93       	push	r24
    47a2:	cf 93       	push	r28
    47a4:	df 93       	push	r29
    47a6:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
	PrintProcessorID(fp);
    47aa:	8d 2f       	mov	r24, r29
    47ac:	9c 2f       	mov	r25, r28
    47ae:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <PrintProcessorID>
	fprintf(fp, "# code " __DATE__ " " __TIME__ "\r\n");
    47b2:	0f 90       	pop	r0
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	0f 90       	pop	r0
    47bc:	0f 90       	pop	r0
    47be:	6d 2f       	mov	r22, r29
    47c0:	7c 2f       	mov	r23, r28
    47c2:	8c e1       	ldi	r24, 0x1C	; 28
    47c4:	97 e2       	ldi	r25, 0x27	; 39
	
} /* PrintResetHeader */
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
	
	fprintf(fp, "# HvA SECOM Motor driver board ");
	PrintBoardType(fp);
	fprintf(fp, "busID %d cpu ", GetBusID());
	PrintProcessorID(fp);
	fprintf(fp, "# code " __DATE__ " " __TIME__ "\r\n");
    47ca:	0c 94 10 3b 	jmp	0x7620	; 0x7620 <fputs>

000047ce <__vector_71>:
	}
	
} /* ISRReadADC_EVA */


ISR(ADCA_CH0_vect) {
    47ce:	1f 92       	push	r1
    47d0:	0f 92       	push	r0
    47d2:	0f b6       	in	r0, 0x3f	; 63
    47d4:	0f 92       	push	r0
    47d6:	11 24       	eor	r1, r1
    47d8:	0b b6       	in	r0, 0x3b	; 59
    47da:	0f 92       	push	r0
    47dc:	2f 92       	push	r2
    47de:	3f 92       	push	r3
    47e0:	4f 92       	push	r4
    47e2:	5f 92       	push	r5
    47e4:	7f 92       	push	r7
    47e6:	8f 92       	push	r8
    47e8:	9f 92       	push	r9
    47ea:	af 92       	push	r10
    47ec:	bf 92       	push	r11
    47ee:	cf 92       	push	r12
    47f0:	df 92       	push	r13
    47f2:	ef 92       	push	r14
    47f4:	ff 92       	push	r15
    47f6:	0f 93       	push	r16
    47f8:	1f 93       	push	r17
    47fa:	2f 93       	push	r18
    47fc:	3f 93       	push	r19
    47fe:	4f 93       	push	r20
    4800:	5f 93       	push	r21
    4802:	6f 93       	push	r22
    4804:	7f 93       	push	r23
    4806:	8f 93       	push	r24
    4808:	9f 93       	push	r25
    480a:	af 93       	push	r26
    480c:	bf 93       	push	r27
    480e:	cf 93       	push	r28
    4810:	df 93       	push	r29
    4812:	ef 93       	push	r30
    4814:	ff 93       	push	r31

	static int32_t sCCPrevPulseInterval;

	int16_t spRawSample, driverTempSample, motorVoltageSample, motorCurrentSample, inVoltageSample, inCurrentSample;
	int32_t inPower, motorPower;
	uint8_t selCCPin = PORTC.IN & PIN2_bm, selCC2Pin = PORTC.IN & PIN5_bm, selFPPin = PORTC.IN & PIN4_bm, pwmEn = !(PORTC.IN & PIN1_bm), pwm = PORTC.IN & PIN6_bm;
    4816:	f0 91 48 06 	lds	r31, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    481a:	f4 70       	andi	r31, 0x04	; 4
    481c:	e0 91 48 06 	lds	r30, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    4820:	e0 72       	andi	r30, 0x20	; 32
    4822:	c0 91 48 06 	lds	r28, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    4826:	c0 71       	andi	r28, 0x10	; 16
    4828:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    482c:	82 70       	andi	r24, 0x02	; 2
    482e:	98 2e       	mov	r9, r24
    4830:	70 90 48 06 	lds	r7, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
	uint8_t curPWMCycles = TCC1.CNTL;
    4834:	d0 91 60 08 	lds	r29, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
	
	if(I_AM_EVA_L || I_AM_EVA_R)
    4838:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    483c:	80 73       	andi	r24, 0x30	; 48
    483e:	80 31       	cpi	r24, 0x10	; 16
    4840:	31 f0       	breq	.+12     	; 0x484e <__vector_71+0x80>
    4842:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4846:	80 73       	andi	r24, 0x30	; 48
    4848:	80 32       	cpi	r24, 0x20	; 32
    484a:	09 f0       	breq	.+2      	; 0x484e <__vector_71+0x80>
    484c:	f5 c0       	rjmp	.+490    	; 0x4a38 <__vector_71+0x26a>
} /* ISRReadADC_H2A */


static inline void ISRReadADC_EVA(void) {
	
	int16_t motorTempFront = ADCA.CH0RES, motorTempRear, angSample, angFSSample;
    484e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    4852:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>

	uint8_t selRegenPin = !(PORTC.IN & PIN5_bm);
    4856:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    485a:	25 fb       	bst	r18, 5
    485c:	22 27       	eor	r18, r18
    485e:	20 f9       	bld	r18, 0
    4860:	31 e0       	ldi	r19, 0x01	; 1
    4862:	23 27       	eor	r18, r19
	
	FILTER32(motorTempFront, sSensorData.adc.eva.motorTempFrontFiltered);
    4864:	40 91 63 28 	lds	r20, 0x2863	; 0x802863 <sSensorData>
    4868:	50 91 64 28 	lds	r21, 0x2864	; 0x802864 <sSensorData+0x1>
    486c:	60 91 65 28 	lds	r22, 0x2865	; 0x802865 <sSensorData+0x2>
    4870:	70 91 66 28 	lds	r23, 0x2866	; 0x802866 <sSensorData+0x3>
    4874:	c5 2e       	mov	r12, r21
    4876:	d6 2e       	mov	r13, r22
    4878:	e7 2e       	mov	r14, r23
    487a:	ff 24       	eor	r15, r15
    487c:	e7 fc       	sbrc	r14, 7
    487e:	fa 94       	dec	r15
    4880:	4c 19       	sub	r20, r12
    4882:	5d 09       	sbc	r21, r13
    4884:	6e 09       	sbc	r22, r14
    4886:	7f 09       	sbc	r23, r15
    4888:	09 2e       	mov	r0, r25
    488a:	00 0c       	add	r0, r0
    488c:	aa 0b       	sbc	r26, r26
    488e:	bb 0b       	sbc	r27, r27
    4890:	ba 2f       	mov	r27, r26
    4892:	a9 2f       	mov	r26, r25
    4894:	98 2f       	mov	r25, r24
    4896:	88 27       	eor	r24, r24
    4898:	84 0f       	add	r24, r20
    489a:	95 1f       	adc	r25, r21
    489c:	a6 1f       	adc	r26, r22
    489e:	b7 1f       	adc	r27, r23
    48a0:	80 93 63 28 	sts	0x2863, r24	; 0x802863 <sSensorData>
    48a4:	90 93 64 28 	sts	0x2864, r25	; 0x802864 <sSensorData+0x1>
    48a8:	a0 93 65 28 	sts	0x2865, r26	; 0x802865 <sSensorData+0x2>
    48ac:	b0 93 66 28 	sts	0x2866, r27	; 0x802866 <sSensorData+0x3>
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    48b0:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    48b4:	80 ff       	sbrs	r24, 0
    48b6:	fc cf       	rjmp	.-8      	; 0x48b0 <__vector_71+0xe2>
	ADCB.CH0.INTFLAGS = 0x01;
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
	motorTempRear = ADCB.CH0RES;
    48be:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <__TEXT_REGION_LENGTH__+0x700250>
    48c2:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <__TEXT_REGION_LENGTH__+0x700251>
	FILTER32(motorTempRear, sSensorData.adc.eva.motorTempRearFiltered);
    48c6:	40 91 67 28 	lds	r20, 0x2867	; 0x802867 <sSensorData+0x4>
    48ca:	50 91 68 28 	lds	r21, 0x2868	; 0x802868 <sSensorData+0x5>
    48ce:	60 91 69 28 	lds	r22, 0x2869	; 0x802869 <sSensorData+0x6>
    48d2:	70 91 6a 28 	lds	r23, 0x286A	; 0x80286a <sSensorData+0x7>
    48d6:	c5 2e       	mov	r12, r21
    48d8:	d6 2e       	mov	r13, r22
    48da:	e7 2e       	mov	r14, r23
    48dc:	ff 24       	eor	r15, r15
    48de:	e7 fc       	sbrc	r14, 7
    48e0:	fa 94       	dec	r15
    48e2:	4c 19       	sub	r20, r12
    48e4:	5d 09       	sbc	r21, r13
    48e6:	6e 09       	sbc	r22, r14
    48e8:	7f 09       	sbc	r23, r15
    48ea:	09 2e       	mov	r0, r25
    48ec:	00 0c       	add	r0, r0
    48ee:	aa 0b       	sbc	r26, r26
    48f0:	bb 0b       	sbc	r27, r27
    48f2:	ba 2f       	mov	r27, r26
    48f4:	a9 2f       	mov	r26, r25
    48f6:	98 2f       	mov	r25, r24
    48f8:	88 27       	eor	r24, r24
    48fa:	84 0f       	add	r24, r20
    48fc:	95 1f       	adc	r25, r21
    48fe:	a6 1f       	adc	r26, r22
    4900:	b7 1f       	adc	r27, r23
    4902:	80 93 67 28 	sts	0x2867, r24	; 0x802867 <sSensorData+0x4>
    4906:	90 93 68 28 	sts	0x2868, r25	; 0x802868 <sSensorData+0x5>
    490a:	a0 93 69 28 	sts	0x2869, r26	; 0x802869 <sSensorData+0x6>
    490e:	b0 93 6a 28 	sts	0x286A, r27	; 0x80286a <sSensorData+0x7>
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ;
    4912:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
    4916:	80 ff       	sbrs	r24, 0
    4918:	fc cf       	rjmp	.-8      	; 0x4912 <__vector_71+0x144>
	ADCA.CH1.INTFLAGS = 0x01;
    491a:	81 e0       	ldi	r24, 0x01	; 1
    491c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
	angSample = ADCA.CH1RES;
    4920:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
    4924:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
	FILTER32(angSample, sSensorData.adc.eva.angSenseFiltered);
    4928:	40 91 6b 28 	lds	r20, 0x286B	; 0x80286b <sSensorData+0x8>
    492c:	50 91 6c 28 	lds	r21, 0x286C	; 0x80286c <sSensorData+0x9>
    4930:	60 91 6d 28 	lds	r22, 0x286D	; 0x80286d <sSensorData+0xa>
    4934:	70 91 6e 28 	lds	r23, 0x286E	; 0x80286e <sSensorData+0xb>
    4938:	c5 2e       	mov	r12, r21
    493a:	d6 2e       	mov	r13, r22
    493c:	e7 2e       	mov	r14, r23
    493e:	ff 24       	eor	r15, r15
    4940:	e7 fc       	sbrc	r14, 7
    4942:	fa 94       	dec	r15
    4944:	4c 19       	sub	r20, r12
    4946:	5d 09       	sbc	r21, r13
    4948:	6e 09       	sbc	r22, r14
    494a:	7f 09       	sbc	r23, r15
    494c:	09 2e       	mov	r0, r25
    494e:	00 0c       	add	r0, r0
    4950:	aa 0b       	sbc	r26, r26
    4952:	bb 0b       	sbc	r27, r27
    4954:	ba 2f       	mov	r27, r26
    4956:	a9 2f       	mov	r26, r25
    4958:	98 2f       	mov	r25, r24
    495a:	88 27       	eor	r24, r24
    495c:	84 0f       	add	r24, r20
    495e:	95 1f       	adc	r25, r21
    4960:	a6 1f       	adc	r26, r22
    4962:	b7 1f       	adc	r27, r23
    4964:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <sSensorData+0x8>
    4968:	90 93 6c 28 	sts	0x286C, r25	; 0x80286c <sSensorData+0x9>
    496c:	a0 93 6d 28 	sts	0x286D, r26	; 0x80286d <sSensorData+0xa>
    4970:	b0 93 6e 28 	sts	0x286E, r27	; 0x80286e <sSensorData+0xb>
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4974:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <__TEXT_REGION_LENGTH__+0x70026b>
    4978:	80 ff       	sbrs	r24, 0
    497a:	fc cf       	rjmp	.-8      	; 0x4974 <__vector_71+0x1a6>
	ADCB.CH1.INTFLAGS = 0x01;
    497c:	81 e0       	ldi	r24, 0x01	; 1
    497e:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <__TEXT_REGION_LENGTH__+0x70026b>
	angFSSample = ADCB.CH1RES;
    4982:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <__TEXT_REGION_LENGTH__+0x700252>
    4986:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <__TEXT_REGION_LENGTH__+0x700253>
	FILTER32(angFSSample, sSensorData.adc.eva.angFSFiltered);
    498a:	40 91 6f 28 	lds	r20, 0x286F	; 0x80286f <sSensorData+0xc>
    498e:	50 91 70 28 	lds	r21, 0x2870	; 0x802870 <sSensorData+0xd>
    4992:	60 91 71 28 	lds	r22, 0x2871	; 0x802871 <sSensorData+0xe>
    4996:	70 91 72 28 	lds	r23, 0x2872	; 0x802872 <sSensorData+0xf>
    499a:	c5 2e       	mov	r12, r21
    499c:	d6 2e       	mov	r13, r22
    499e:	e7 2e       	mov	r14, r23
    49a0:	ff 24       	eor	r15, r15
    49a2:	e7 fc       	sbrc	r14, 7
    49a4:	fa 94       	dec	r15
    49a6:	4c 19       	sub	r20, r12
    49a8:	5d 09       	sbc	r21, r13
    49aa:	6e 09       	sbc	r22, r14
    49ac:	7f 09       	sbc	r23, r15
    49ae:	09 2e       	mov	r0, r25
    49b0:	00 0c       	add	r0, r0
    49b2:	aa 0b       	sbc	r26, r26
    49b4:	bb 0b       	sbc	r27, r27
    49b6:	ba 2f       	mov	r27, r26
    49b8:	a9 2f       	mov	r26, r25
    49ba:	98 2f       	mov	r25, r24
    49bc:	88 27       	eor	r24, r24
    49be:	84 0f       	add	r24, r20
    49c0:	95 1f       	adc	r25, r21
    49c2:	a6 1f       	adc	r26, r22
    49c4:	b7 1f       	adc	r27, r23
    49c6:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <sSensorData+0xc>
    49ca:	90 93 70 28 	sts	0x2870, r25	; 0x802870 <sSensorData+0xd>
    49ce:	a0 93 71 28 	sts	0x2871, r26	; 0x802871 <sSensorData+0xe>
    49d2:	b0 93 72 28 	sts	0x2872, r27	; 0x802872 <sSensorData+0xf>

//	Regen braking is off for the EVA for now; pin is re-used for CC turbo boost
	if(sSensorData.adc.eva.regBrakeState != selRegenPin) {
    49d6:	82 2f       	mov	r24, r18
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	a0 e0       	ldi	r26, 0x00	; 0
    49dc:	b0 e0       	ldi	r27, 0x00	; 0
    49de:	40 91 73 28 	lds	r20, 0x2873	; 0x802873 <sSensorData+0x10>
    49e2:	50 91 74 28 	lds	r21, 0x2874	; 0x802874 <sSensorData+0x11>
    49e6:	60 91 75 28 	lds	r22, 0x2875	; 0x802875 <sSensorData+0x12>
    49ea:	70 91 76 28 	lds	r23, 0x2876	; 0x802876 <sSensorData+0x13>
    49ee:	48 17       	cp	r20, r24
    49f0:	59 07       	cpc	r21, r25
    49f2:	6a 07       	cpc	r22, r26
    49f4:	7b 07       	cpc	r23, r27
    49f6:	09 f4       	brne	.+2      	; 0x49fa <__vector_71+0x22c>
    49f8:	ba c1       	rjmp	.+884    	; 0x4d6e <__vector_71+0x5a0>
		SET_CC_DRIVE(REGBRAKE_LEVEL);
    49fa:	27 e0       	ldi	r18, 0x07	; 7
    49fc:	20 93 85 06 	sts	0x0685, r18	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
		PORTE.OUTSET = PIN3_bm;
    4a00:	28 e0       	ldi	r18, 0x08	; 8
    4a02:	20 93 85 06 	sts	0x0685, r18	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
		sSensorData.adc.eva.regBrakeState = selRegenPin;
    4a06:	80 93 73 28 	sts	0x2873, r24	; 0x802873 <sSensorData+0x10>
    4a0a:	90 93 74 28 	sts	0x2874, r25	; 0x802874 <sSensorData+0x11>
    4a0e:	a0 93 75 28 	sts	0x2875, r26	; 0x802875 <sSensorData+0x12>
    4a12:	b0 93 76 28 	sts	0x2876, r27	; 0x802876 <sSensorData+0x13>
		sSensorData.adc.eva.regBrakeTimestamp = sSessionCycleCount;
    4a16:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4a1a:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4a1e:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4a22:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4a26:	80 93 77 28 	sts	0x2877, r24	; 0x802877 <sSensorData+0x14>
    4a2a:	90 93 78 28 	sts	0x2878, r25	; 0x802878 <sSensorData+0x15>
    4a2e:	a0 93 79 28 	sts	0x2879, r26	; 0x802879 <sSensorData+0x16>
    4a32:	b0 93 7a 28 	sts	0x287A, r27	; 0x80287a <sSensorData+0x17>
    4a36:	9b c1       	rjmp	.+822    	; 0x4d6e <__vector_71+0x5a0>
	else { PORTE.OUTSET = ~(x) & CC_PINS;  PORTE.OUTCLR = ((x) & CC_PINS); } \
} while(0)

static inline void ISRReadADC_H2A(void) {

	int16_t fcVoltageSample = ADCA.CH0RES - sCal.fcVoltageOffset, fcCurrentSample, scVoltageSample, scCurrentSample;
    4a38:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    4a3c:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
    4a40:	80 91 e5 29 	lds	r24, 0x29E5	; 0x8029e5 <sCal>
    4a44:	90 91 e6 29 	lds	r25, 0x29E6	; 0x8029e6 <sCal+0x1>
    4a48:	28 1b       	sub	r18, r24
    4a4a:	39 0b       	sbc	r19, r25
	int32_t fcPower, scPower;

	uint8_t idealDiodePin = PORTE.IN & PIN4_bm;
    4a4c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    4a50:	80 71       	andi	r24, 0x10	; 16
    4a52:	88 2e       	mov	r8, r24
	
	FILTER32(fcVoltageSample, sSensorData.adc.h2a.fcVoltageFiltered);
    4a54:	80 91 63 28 	lds	r24, 0x2863	; 0x802863 <sSensorData>
    4a58:	90 91 64 28 	lds	r25, 0x2864	; 0x802864 <sSensorData+0x1>
    4a5c:	a0 91 65 28 	lds	r26, 0x2865	; 0x802865 <sSensorData+0x2>
    4a60:	b0 91 66 28 	lds	r27, 0x2866	; 0x802866 <sSensorData+0x3>
    4a64:	49 2f       	mov	r20, r25
    4a66:	5a 2f       	mov	r21, r26
    4a68:	6b 2f       	mov	r22, r27
    4a6a:	77 27       	eor	r23, r23
    4a6c:	67 fd       	sbrc	r22, 7
    4a6e:	7a 95       	dec	r23
    4a70:	1c 01       	movw	r2, r24
    4a72:	2d 01       	movw	r4, r26
    4a74:	24 1a       	sub	r2, r20
    4a76:	35 0a       	sbc	r3, r21
    4a78:	46 0a       	sbc	r4, r22
    4a7a:	57 0a       	sbc	r5, r23
    4a7c:	c9 01       	movw	r24, r18
    4a7e:	03 2e       	mov	r0, r19
    4a80:	00 0c       	add	r0, r0
    4a82:	aa 0b       	sbc	r26, r26
    4a84:	bb 0b       	sbc	r27, r27
    4a86:	ba 2f       	mov	r27, r26
    4a88:	a9 2f       	mov	r26, r25
    4a8a:	98 2f       	mov	r25, r24
    4a8c:	88 27       	eor	r24, r24
    4a8e:	82 0d       	add	r24, r2
    4a90:	93 1d       	adc	r25, r3
    4a92:	a4 1d       	adc	r26, r4
    4a94:	b5 1d       	adc	r27, r5
    4a96:	80 93 63 28 	sts	0x2863, r24	; 0x802863 <sSensorData>
    4a9a:	90 93 64 28 	sts	0x2864, r25	; 0x802864 <sSensorData+0x1>
    4a9e:	a0 93 65 28 	sts	0x2865, r26	; 0x802865 <sSensorData+0x2>
    4aa2:	b0 93 66 28 	sts	0x2866, r27	; 0x802866 <sSensorData+0x3>
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    4aa6:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
    4aaa:	80 ff       	sbrs	r24, 0
    4aac:	fc cf       	rjmp	.-8      	; 0x4aa6 <__vector_71+0x2d8>
	ADCB.CH0.INTFLAGS = 0x01;
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <__TEXT_REGION_LENGTH__+0x700263>
	fcCurrentSample = ADCB.CH0RES - sCal.fcCurrentOffset;
    4ab4:	40 91 50 02 	lds	r20, 0x0250	; 0x800250 <__TEXT_REGION_LENGTH__+0x700250>
    4ab8:	50 91 51 02 	lds	r21, 0x0251	; 0x800251 <__TEXT_REGION_LENGTH__+0x700251>
    4abc:	80 91 e7 29 	lds	r24, 0x29E7	; 0x8029e7 <sCal+0x2>
    4ac0:	90 91 e8 29 	lds	r25, 0x29E8	; 0x8029e8 <sCal+0x3>
    4ac4:	48 1b       	sub	r20, r24
    4ac6:	59 0b       	sbc	r21, r25
	FILTER32(fcCurrentSample, sSensorData.adc.h2a.fcCurrentFiltered);
    4ac8:	80 91 67 28 	lds	r24, 0x2867	; 0x802867 <sSensorData+0x4>
    4acc:	90 91 68 28 	lds	r25, 0x2868	; 0x802868 <sSensorData+0x5>
    4ad0:	a0 91 69 28 	lds	r26, 0x2869	; 0x802869 <sSensorData+0x6>
    4ad4:	b0 91 6a 28 	lds	r27, 0x286A	; 0x80286a <sSensorData+0x7>
    4ad8:	c9 2e       	mov	r12, r25
    4ada:	da 2e       	mov	r13, r26
    4adc:	eb 2e       	mov	r14, r27
    4ade:	ff 24       	eor	r15, r15
    4ae0:	e7 fc       	sbrc	r14, 7
    4ae2:	fa 94       	dec	r15
    4ae4:	1c 01       	movw	r2, r24
    4ae6:	2d 01       	movw	r4, r26
    4ae8:	2c 18       	sub	r2, r12
    4aea:	3d 08       	sbc	r3, r13
    4aec:	4e 08       	sbc	r4, r14
    4aee:	5f 08       	sbc	r5, r15
    4af0:	ca 01       	movw	r24, r20
    4af2:	05 2e       	mov	r0, r21
    4af4:	00 0c       	add	r0, r0
    4af6:	aa 0b       	sbc	r26, r26
    4af8:	bb 0b       	sbc	r27, r27
    4afa:	ba 2f       	mov	r27, r26
    4afc:	a9 2f       	mov	r26, r25
    4afe:	98 2f       	mov	r25, r24
    4b00:	88 27       	eor	r24, r24
    4b02:	82 0d       	add	r24, r2
    4b04:	93 1d       	adc	r25, r3
    4b06:	a4 1d       	adc	r26, r4
    4b08:	b5 1d       	adc	r27, r5
    4b0a:	80 93 67 28 	sts	0x2867, r24	; 0x802867 <sSensorData+0x4>
    4b0e:	90 93 68 28 	sts	0x2868, r25	; 0x802868 <sSensorData+0x5>
    4b12:	a0 93 69 28 	sts	0x2869, r26	; 0x802869 <sSensorData+0x6>
    4b16:	b0 93 6a 28 	sts	0x286A, r27	; 0x80286a <sSensorData+0x7>
	
	fcPower = ((int32_t) fcVoltageSample) * ((int32_t) fcCurrentSample);
    4b1a:	da 01       	movw	r26, r20
    4b1c:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulhisi3>
	FILTER32PWR(fcPower, sSensorData.adc.h2a.fcPowerFiltered);
    4b20:	00 91 73 28 	lds	r16, 0x2873	; 0x802873 <sSensorData+0x10>
    4b24:	10 91 74 28 	lds	r17, 0x2874	; 0x802874 <sSensorData+0x11>
    4b28:	20 91 75 28 	lds	r18, 0x2875	; 0x802875 <sSensorData+0x12>
    4b2c:	30 91 76 28 	lds	r19, 0x2876	; 0x802876 <sSensorData+0x13>
    4b30:	c1 2e       	mov	r12, r17
    4b32:	d2 2e       	mov	r13, r18
    4b34:	e3 2e       	mov	r14, r19
    4b36:	ff 24       	eor	r15, r15
    4b38:	e7 fc       	sbrc	r14, 7
    4b3a:	fa 94       	dec	r15
    4b3c:	0c 19       	sub	r16, r12
    4b3e:	1d 09       	sbc	r17, r13
    4b40:	2e 09       	sbc	r18, r14
    4b42:	3f 09       	sbc	r19, r15
    4b44:	06 0f       	add	r16, r22
    4b46:	17 1f       	adc	r17, r23
    4b48:	28 1f       	adc	r18, r24
    4b4a:	39 1f       	adc	r19, r25
    4b4c:	00 93 73 28 	sts	0x2873, r16	; 0x802873 <sSensorData+0x10>
    4b50:	10 93 74 28 	sts	0x2874, r17	; 0x802874 <sSensorData+0x11>
    4b54:	20 93 75 28 	sts	0x2875, r18	; 0x802875 <sSensorData+0x12>
    4b58:	30 93 76 28 	sts	0x2876, r19	; 0x802876 <sSensorData+0x13>
	sSensorData.adc.h2a.fcEnergy += fcPower;
    4b5c:	6b 01       	movw	r12, r22
    4b5e:	7c 01       	movw	r14, r24
    4b60:	ff 0c       	add	r15, r15
    4b62:	cc 08       	sbc	r12, r12
    4b64:	dc 2c       	mov	r13, r12
    4b66:	76 01       	movw	r14, r12
    4b68:	9b 01       	movw	r18, r22
    4b6a:	ac 01       	movw	r20, r24
    4b6c:	6c 2d       	mov	r22, r12
    4b6e:	7c 2d       	mov	r23, r12
    4b70:	8c 2d       	mov	r24, r12
    4b72:	9c 2d       	mov	r25, r12
    4b74:	a0 90 7b 28 	lds	r10, 0x287B	; 0x80287b <sSensorData+0x18>
    4b78:	b0 90 7c 28 	lds	r11, 0x287C	; 0x80287c <sSensorData+0x19>
    4b7c:	c0 90 7d 28 	lds	r12, 0x287D	; 0x80287d <sSensorData+0x1a>
    4b80:	d0 90 7e 28 	lds	r13, 0x287E	; 0x80287e <sSensorData+0x1b>
    4b84:	e0 90 7f 28 	lds	r14, 0x287F	; 0x80287f <sSensorData+0x1c>
    4b88:	f0 90 80 28 	lds	r15, 0x2880	; 0x802880 <sSensorData+0x1d>
    4b8c:	00 91 81 28 	lds	r16, 0x2881	; 0x802881 <sSensorData+0x1e>
    4b90:	10 91 82 28 	lds	r17, 0x2882	; 0x802882 <sSensorData+0x1f>
    4b94:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__adddi3>
    4b98:	20 93 7b 28 	sts	0x287B, r18	; 0x80287b <sSensorData+0x18>
    4b9c:	30 93 7c 28 	sts	0x287C, r19	; 0x80287c <sSensorData+0x19>
    4ba0:	40 93 7d 28 	sts	0x287D, r20	; 0x80287d <sSensorData+0x1a>
    4ba4:	50 93 7e 28 	sts	0x287E, r21	; 0x80287e <sSensorData+0x1b>
    4ba8:	60 93 7f 28 	sts	0x287F, r22	; 0x80287f <sSensorData+0x1c>
    4bac:	70 93 80 28 	sts	0x2880, r23	; 0x802880 <sSensorData+0x1d>
    4bb0:	80 93 81 28 	sts	0x2881, r24	; 0x802881 <sSensorData+0x1e>
    4bb4:	90 93 82 28 	sts	0x2882, r25	; 0x802882 <sSensorData+0x1f>
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ; /* Should also not be necessary, by this time the conversion should be long over */
    4bb8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
    4bbc:	80 ff       	sbrs	r24, 0
    4bbe:	fc cf       	rjmp	.-8      	; 0x4bb8 <__vector_71+0x3ea>
	ADCA.CH1.INTFLAGS = 0x01;
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
    4bc2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <__TEXT_REGION_LENGTH__+0x70022b>
	scVoltageSample = ADCA.CH1RES - sCal.scVoltageOffset;
    4bc6:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__TEXT_REGION_LENGTH__+0x700212>
    4bca:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__TEXT_REGION_LENGTH__+0x700213>
    4bce:	80 91 e9 29 	lds	r24, 0x29E9	; 0x8029e9 <sCal+0x4>
    4bd2:	90 91 ea 29 	lds	r25, 0x29EA	; 0x8029ea <sCal+0x5>
    4bd6:	28 1b       	sub	r18, r24
    4bd8:	39 0b       	sbc	r19, r25
	FILTER32(scVoltageSample, sSensorData.adc.h2a.scVoltageFiltered);
    4bda:	80 91 6b 28 	lds	r24, 0x286B	; 0x80286b <sSensorData+0x8>
    4bde:	90 91 6c 28 	lds	r25, 0x286C	; 0x80286c <sSensorData+0x9>
    4be2:	a0 91 6d 28 	lds	r26, 0x286D	; 0x80286d <sSensorData+0xa>
    4be6:	b0 91 6e 28 	lds	r27, 0x286E	; 0x80286e <sSensorData+0xb>
    4bea:	49 2f       	mov	r20, r25
    4bec:	5a 2f       	mov	r21, r26
    4bee:	6b 2f       	mov	r22, r27
    4bf0:	77 27       	eor	r23, r23
    4bf2:	67 fd       	sbrc	r22, 7
    4bf4:	7a 95       	dec	r23
    4bf6:	7c 01       	movw	r14, r24
    4bf8:	8d 01       	movw	r16, r26
    4bfa:	e4 1a       	sub	r14, r20
    4bfc:	f5 0a       	sbc	r15, r21
    4bfe:	06 0b       	sbc	r16, r22
    4c00:	17 0b       	sbc	r17, r23
    4c02:	b8 01       	movw	r22, r16
    4c04:	a7 01       	movw	r20, r14
    4c06:	c9 01       	movw	r24, r18
    4c08:	03 2e       	mov	r0, r19
    4c0a:	00 0c       	add	r0, r0
    4c0c:	aa 0b       	sbc	r26, r26
    4c0e:	bb 0b       	sbc	r27, r27
    4c10:	ba 2f       	mov	r27, r26
    4c12:	a9 2f       	mov	r26, r25
    4c14:	98 2f       	mov	r25, r24
    4c16:	88 27       	eor	r24, r24
    4c18:	84 0f       	add	r24, r20
    4c1a:	95 1f       	adc	r25, r21
    4c1c:	a6 1f       	adc	r26, r22
    4c1e:	b7 1f       	adc	r27, r23
    4c20:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <sSensorData+0x8>
    4c24:	90 93 6c 28 	sts	0x286C, r25	; 0x80286c <sSensorData+0x9>
    4c28:	a0 93 6d 28 	sts	0x286D, r26	; 0x80286d <sSensorData+0xa>
    4c2c:	b0 93 6e 28 	sts	0x286E, r27	; 0x80286e <sSensorData+0xb>
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4c30:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <__TEXT_REGION_LENGTH__+0x70026b>
    4c34:	80 ff       	sbrs	r24, 0
    4c36:	fc cf       	rjmp	.-8      	; 0x4c30 <__vector_71+0x462>
	ADCB.CH1.INTFLAGS = 0x01;
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <__TEXT_REGION_LENGTH__+0x70026b>
	scCurrentSample = ADCB.CH1RES - sCal.scCurrentOffset;
    4c3e:	40 91 52 02 	lds	r20, 0x0252	; 0x800252 <__TEXT_REGION_LENGTH__+0x700252>
    4c42:	50 91 53 02 	lds	r21, 0x0253	; 0x800253 <__TEXT_REGION_LENGTH__+0x700253>
    4c46:	80 91 eb 29 	lds	r24, 0x29EB	; 0x8029eb <sCal+0x6>
    4c4a:	90 91 ec 29 	lds	r25, 0x29EC	; 0x8029ec <sCal+0x7>
    4c4e:	48 1b       	sub	r20, r24
    4c50:	59 0b       	sbc	r21, r25
	FILTER32(scCurrentSample, sSensorData.adc.h2a.scCurrentFiltered);
    4c52:	80 91 6f 28 	lds	r24, 0x286F	; 0x80286f <sSensorData+0xc>
    4c56:	90 91 70 28 	lds	r25, 0x2870	; 0x802870 <sSensorData+0xd>
    4c5a:	a0 91 71 28 	lds	r26, 0x2871	; 0x802871 <sSensorData+0xe>
    4c5e:	b0 91 72 28 	lds	r27, 0x2872	; 0x802872 <sSensorData+0xf>
    4c62:	c9 2e       	mov	r12, r25
    4c64:	da 2e       	mov	r13, r26
    4c66:	eb 2e       	mov	r14, r27
    4c68:	ff 24       	eor	r15, r15
    4c6a:	e7 fc       	sbrc	r14, 7
    4c6c:	fa 94       	dec	r15
    4c6e:	1c 01       	movw	r2, r24
    4c70:	2d 01       	movw	r4, r26
    4c72:	2c 18       	sub	r2, r12
    4c74:	3d 08       	sbc	r3, r13
    4c76:	4e 08       	sbc	r4, r14
    4c78:	5f 08       	sbc	r5, r15
    4c7a:	ca 01       	movw	r24, r20
    4c7c:	05 2e       	mov	r0, r21
    4c7e:	00 0c       	add	r0, r0
    4c80:	aa 0b       	sbc	r26, r26
    4c82:	bb 0b       	sbc	r27, r27
    4c84:	ba 2f       	mov	r27, r26
    4c86:	a9 2f       	mov	r26, r25
    4c88:	98 2f       	mov	r25, r24
    4c8a:	88 27       	eor	r24, r24
    4c8c:	82 0d       	add	r24, r2
    4c8e:	93 1d       	adc	r25, r3
    4c90:	a4 1d       	adc	r26, r4
    4c92:	b5 1d       	adc	r27, r5
    4c94:	80 93 6f 28 	sts	0x286F, r24	; 0x80286f <sSensorData+0xc>
    4c98:	90 93 70 28 	sts	0x2870, r25	; 0x802870 <sSensorData+0xd>
    4c9c:	a0 93 71 28 	sts	0x2871, r26	; 0x802871 <sSensorData+0xe>
    4ca0:	b0 93 72 28 	sts	0x2872, r27	; 0x802872 <sSensorData+0xf>

	scPower = ((int32_t) scVoltageSample) * ((int32_t) scCurrentSample);
    4ca4:	da 01       	movw	r26, r20
    4ca6:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulhisi3>
	FILTER32PWR(scPower, sSensorData.adc.h2a.scPowerFiltered);
    4caa:	00 91 77 28 	lds	r16, 0x2877	; 0x802877 <sSensorData+0x14>
    4cae:	10 91 78 28 	lds	r17, 0x2878	; 0x802878 <sSensorData+0x15>
    4cb2:	20 91 79 28 	lds	r18, 0x2879	; 0x802879 <sSensorData+0x16>
    4cb6:	30 91 7a 28 	lds	r19, 0x287A	; 0x80287a <sSensorData+0x17>
    4cba:	c1 2e       	mov	r12, r17
    4cbc:	d2 2e       	mov	r13, r18
    4cbe:	e3 2e       	mov	r14, r19
    4cc0:	ff 24       	eor	r15, r15
    4cc2:	e7 fc       	sbrc	r14, 7
    4cc4:	fa 94       	dec	r15
    4cc6:	0c 19       	sub	r16, r12
    4cc8:	1d 09       	sbc	r17, r13
    4cca:	2e 09       	sbc	r18, r14
    4ccc:	3f 09       	sbc	r19, r15
    4cce:	06 0f       	add	r16, r22
    4cd0:	17 1f       	adc	r17, r23
    4cd2:	28 1f       	adc	r18, r24
    4cd4:	39 1f       	adc	r19, r25
    4cd6:	00 93 77 28 	sts	0x2877, r16	; 0x802877 <sSensorData+0x14>
    4cda:	10 93 78 28 	sts	0x2878, r17	; 0x802878 <sSensorData+0x15>
    4cde:	20 93 79 28 	sts	0x2879, r18	; 0x802879 <sSensorData+0x16>
    4ce2:	30 93 7a 28 	sts	0x287A, r19	; 0x80287a <sSensorData+0x17>
	sSensorData.adc.h2a.scEnergy += scPower;
    4ce6:	6b 01       	movw	r12, r22
    4ce8:	7c 01       	movw	r14, r24
    4cea:	ff 0c       	add	r15, r15
    4cec:	cc 08       	sbc	r12, r12
    4cee:	dc 2c       	mov	r13, r12
    4cf0:	76 01       	movw	r14, r12
    4cf2:	9b 01       	movw	r18, r22
    4cf4:	ac 01       	movw	r20, r24
    4cf6:	6c 2d       	mov	r22, r12
    4cf8:	7c 2d       	mov	r23, r12
    4cfa:	8c 2d       	mov	r24, r12
    4cfc:	9c 2d       	mov	r25, r12
    4cfe:	a0 90 83 28 	lds	r10, 0x2883	; 0x802883 <sSensorData+0x20>
    4d02:	b0 90 84 28 	lds	r11, 0x2884	; 0x802884 <sSensorData+0x21>
    4d06:	c0 90 85 28 	lds	r12, 0x2885	; 0x802885 <sSensorData+0x22>
    4d0a:	d0 90 86 28 	lds	r13, 0x2886	; 0x802886 <sSensorData+0x23>
    4d0e:	e0 90 87 28 	lds	r14, 0x2887	; 0x802887 <sSensorData+0x24>
    4d12:	f0 90 88 28 	lds	r15, 0x2888	; 0x802888 <sSensorData+0x25>
    4d16:	00 91 89 28 	lds	r16, 0x2889	; 0x802889 <sSensorData+0x26>
    4d1a:	10 91 8a 28 	lds	r17, 0x288A	; 0x80288a <sSensorData+0x27>
    4d1e:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__adddi3>
    4d22:	20 93 83 28 	sts	0x2883, r18	; 0x802883 <sSensorData+0x20>
    4d26:	30 93 84 28 	sts	0x2884, r19	; 0x802884 <sSensorData+0x21>
    4d2a:	40 93 85 28 	sts	0x2885, r20	; 0x802885 <sSensorData+0x22>
    4d2e:	50 93 86 28 	sts	0x2886, r21	; 0x802886 <sSensorData+0x23>
    4d32:	60 93 87 28 	sts	0x2887, r22	; 0x802887 <sSensorData+0x24>
    4d36:	70 93 88 28 	sts	0x2888, r23	; 0x802888 <sSensorData+0x25>
    4d3a:	80 93 89 28 	sts	0x2889, r24	; 0x802889 <sSensorData+0x26>
    4d3e:	90 93 8a 28 	sts	0x288A, r25	; 0x80288a <sSensorData+0x27>
	
	if(sSensorData.adc.h2a.idealDiodeState != idealDiodePin) {
    4d42:	80 91 8b 28 	lds	r24, 0x288B	; 0x80288b <sSensorData+0x28>
    4d46:	88 15       	cp	r24, r8
    4d48:	91 f0       	breq	.+36     	; 0x4d6e <__vector_71+0x5a0>
		sSensorData.adc.h2a.idealDiodeState = idealDiodePin;
    4d4a:	80 92 8b 28 	sts	0x288B, r8	; 0x80288b <sSensorData+0x28>
		sSensorData.adc.h2a.idealDiodeTimestamp = sSessionCycleCount;
    4d4e:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4d52:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4d56:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4d5a:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4d5e:	80 93 8c 28 	sts	0x288C, r24	; 0x80288c <sSensorData+0x29>
    4d62:	90 93 8d 28 	sts	0x288D, r25	; 0x80288d <sSensorData+0x2a>
    4d66:	a0 93 8e 28 	sts	0x288E, r26	; 0x80288e <sSensorData+0x2b>
    4d6a:	b0 93 8f 28 	sts	0x288F, r27	; 0x80288f <sSensorData+0x2c>
	if(I_AM_EVA_L || I_AM_EVA_R)
		ISRReadADC_EVA();
	else
		ISRReadADC_H2A();
	
	while(!(ADCA.CH2.INTFLAGS & 0x01)) ;
    4d6e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>
    4d72:	80 ff       	sbrs	r24, 0
    4d74:	fc cf       	rjmp	.-8      	; 0x4d6e <__vector_71+0x5a0>
	ADCA.CH2.INTFLAGS = 0x01;
    4d76:	91 e0       	ldi	r25, 0x01	; 1
    4d78:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <__TEXT_REGION_LENGTH__+0x700233>
	spRawSample = ADCA.CH2RES;
    4d7c:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <__TEXT_REGION_LENGTH__+0x700214>
    4d80:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <__TEXT_REGION_LENGTH__+0x700215>
    4d84:	80 91 61 28 	lds	r24, 0x2861	; 0x802861 <sSpeedSensorPreviousState.4807>
	if(spRawSample < SPEEDSENSOR_MIDWAY_VAL) {
    4d88:	27 3d       	cpi	r18, 0xD7	; 215
    4d8a:	32 40       	sbci	r19, 0x02	; 2
    4d8c:	84 f4       	brge	.+32     	; 0x4dae <__vector_71+0x5e0>
		sSpeedSensorPosDeglitchCounter = 0;
    4d8e:	10 92 62 28 	sts	0x2862, r1	; 0x802862 <sSpeedSensorPosDeglitchCounter.4808>
		if(sSpeedSensorPreviousState && ++sSpeedSensorNegDeglitchCounter >= SPEEDSENSOR_DEGLITCH)
    4d92:	88 23       	and	r24, r24
    4d94:	09 f4       	brne	.+2      	; 0x4d98 <__vector_71+0x5ca>
    4d96:	66 c0       	rjmp	.+204    	; 0x4e64 <__vector_71+0x696>
    4d98:	80 91 60 28 	lds	r24, 0x2860	; 0x802860 <sSpeedSensorNegDeglitchCounter.4809>
    4d9c:	8f 5f       	subi	r24, 0xFF	; 255
    4d9e:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <sSpeedSensorNegDeglitchCounter.4809>
    4da2:	85 30       	cpi	r24, 0x05	; 5
    4da4:	08 f4       	brcc	.+2      	; 0x4da8 <__vector_71+0x5da>
    4da6:	5e c0       	rjmp	.+188    	; 0x4e64 <__vector_71+0x696>
			sSpeedSensorPreviousState = 0;
    4da8:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <sSpeedSensorPreviousState.4807>
    4dac:	5b c0       	rjmp	.+182    	; 0x4e64 <__vector_71+0x696>
	}
	else {
		sSpeedSensorNegDeglitchCounter = 0;
    4dae:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <sSpeedSensorNegDeglitchCounter.4809>
		if(!sSpeedSensorPreviousState && ++sSpeedSensorPosDeglitchCounter >= SPEEDSENSOR_DEGLITCH) {
    4db2:	81 11       	cpse	r24, r1
    4db4:	57 c0       	rjmp	.+174    	; 0x4e64 <__vector_71+0x696>
    4db6:	80 91 62 28 	lds	r24, 0x2862	; 0x802862 <sSpeedSensorPosDeglitchCounter.4808>
    4dba:	8f 5f       	subi	r24, 0xFF	; 255
    4dbc:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <sSpeedSensorPosDeglitchCounter.4808>
    4dc0:	85 30       	cpi	r24, 0x05	; 5
    4dc2:	08 f4       	brcc	.+2      	; 0x4dc6 <__vector_71+0x5f8>
    4dc4:	4f c0       	rjmp	.+158    	; 0x4e64 <__vector_71+0x696>
			sSpeedSensorPreviousState = 1;
    4dc6:	90 93 61 28 	sts	0x2861, r25	; 0x802861 <sSpeedSensorPreviousState.4807>
			sSensorData.speedSensorPositivePulsesSeen++;
    4dca:	80 91 c0 28 	lds	r24, 0x28C0	; 0x8028c0 <sSensorData+0x5d>
    4dce:	90 91 c1 28 	lds	r25, 0x28C1	; 0x8028c1 <sSensorData+0x5e>
    4dd2:	a0 91 c2 28 	lds	r26, 0x28C2	; 0x8028c2 <sSensorData+0x5f>
    4dd6:	b0 91 c3 28 	lds	r27, 0x28C3	; 0x8028c3 <sSensorData+0x60>
    4dda:	01 96       	adiw	r24, 0x01	; 1
    4ddc:	a1 1d       	adc	r26, r1
    4dde:	b1 1d       	adc	r27, r1
    4de0:	80 93 c0 28 	sts	0x28C0, r24	; 0x8028c0 <sSensorData+0x5d>
    4de4:	90 93 c1 28 	sts	0x28C1, r25	; 0x8028c1 <sSensorData+0x5e>
    4de8:	a0 93 c2 28 	sts	0x28C2, r26	; 0x8028c2 <sSensorData+0x5f>
    4dec:	b0 93 c3 28 	sts	0x28C3, r27	; 0x8028c3 <sSensorData+0x60>
			if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp < SPEEDSENSOR_MAX_INTERVAL)
    4df0:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4df4:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4df8:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4dfc:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4e00:	40 91 5c 28 	lds	r20, 0x285C	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4806>
    4e04:	50 91 5d 28 	lds	r21, 0x285D	; 0x80285d <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x1>
    4e08:	60 91 5e 28 	lds	r22, 0x285E	; 0x80285e <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x2>
    4e0c:	70 91 5f 28 	lds	r23, 0x285F	; 0x80285f <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x3>
    4e10:	84 1b       	sub	r24, r20
    4e12:	95 0b       	sbc	r25, r21
    4e14:	a6 0b       	sbc	r26, r22
    4e16:	b7 0b       	sbc	r27, r23
    4e18:	82 38       	cpi	r24, 0x82	; 130
    4e1a:	96 40       	sbci	r25, 0x06	; 6
    4e1c:	a1 05       	cpc	r26, r1
    4e1e:	b1 05       	cpc	r27, r1
    4e20:	58 f4       	brcc	.+22     	; 0x4e38 <__vector_71+0x66a>
				sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    4e22:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4e26:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4e2a:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4e2e:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4e32:	84 1b       	sub	r24, r20
    4e34:	95 0b       	sbc	r25, r21
    4e36:	02 c0       	rjmp	.+4      	; 0x4e3c <__vector_71+0x66e>
			else
				sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    4e38:	82 e8       	ldi	r24, 0x82	; 130
    4e3a:	96 e0       	ldi	r25, 0x06	; 6
    4e3c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    4e40:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
			sSpeedSensorPreviousValidEdgeTimestamp = sSessionCycleCount;
    4e44:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4e48:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4e4c:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4e50:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4e54:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4806>
    4e58:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x1>
    4e5c:	a0 93 5e 28 	sts	0x285E, r26	; 0x80285e <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x2>
    4e60:	b0 93 5f 28 	sts	0x285F, r27	; 0x80285f <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x3>
		}
	}
	
	if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) SPEEDSENSOR_MAX_INTERVAL)
    4e64:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4e68:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4e6c:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4e70:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4e74:	40 91 5c 28 	lds	r20, 0x285C	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4806>
    4e78:	50 91 5d 28 	lds	r21, 0x285D	; 0x80285d <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x1>
    4e7c:	60 91 5e 28 	lds	r22, 0x285E	; 0x80285e <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x2>
    4e80:	70 91 5f 28 	lds	r23, 0x285F	; 0x80285f <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x3>
    4e84:	84 1b       	sub	r24, r20
    4e86:	95 0b       	sbc	r25, r21
    4e88:	a6 0b       	sbc	r26, r22
    4e8a:	b7 0b       	sbc	r27, r23
    4e8c:	83 38       	cpi	r24, 0x83	; 131
    4e8e:	96 40       	sbci	r25, 0x06	; 6
    4e90:	a1 05       	cpc	r26, r1
    4e92:	b1 05       	cpc	r27, r1
    4e94:	18 f0       	brcs	.+6      	; 0x4e9c <__vector_71+0x6ce>
		sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    4e96:	82 e8       	ldi	r24, 0x82	; 130
    4e98:	96 e0       	ldi	r25, 0x06	; 6
    4e9a:	23 c0       	rjmp	.+70     	; 0x4ee2 <__vector_71+0x714>
	else if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) sSpeedSensorLastValidInterval)
    4e9c:	00 91 e5 28 	lds	r16, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4ea0:	10 91 e6 28 	lds	r17, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4ea4:	20 91 e7 28 	lds	r18, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4ea8:	30 91 e8 28 	lds	r19, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4eac:	04 1b       	sub	r16, r20
    4eae:	15 0b       	sbc	r17, r21
    4eb0:	26 0b       	sbc	r18, r22
    4eb2:	37 0b       	sbc	r19, r23
    4eb4:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    4eb8:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
    4ebc:	09 2e       	mov	r0, r25
    4ebe:	00 0c       	add	r0, r0
    4ec0:	aa 0b       	sbc	r26, r26
    4ec2:	bb 0b       	sbc	r27, r27
    4ec4:	80 17       	cp	r24, r16
    4ec6:	91 07       	cpc	r25, r17
    4ec8:	a2 07       	cpc	r26, r18
    4eca:	b3 07       	cpc	r27, r19
    4ecc:	70 f4       	brcc	.+28     	; 0x4eea <__vector_71+0x71c>
		sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    4ece:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4ed2:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4ed6:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4eda:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4ede:	84 1b       	sub	r24, r20
    4ee0:	95 0b       	sbc	r25, r21
    4ee2:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    4ee6:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
		
	FILTER32(sSpeedSensorLastValidInterval, sSensorData.speedSensorPulseInterval);
    4eea:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <sSensorData+0x59>
    4eee:	90 91 bd 28 	lds	r25, 0x28BD	; 0x8028bd <sSensorData+0x5a>
    4ef2:	a0 91 be 28 	lds	r26, 0x28BE	; 0x8028be <sSensorData+0x5b>
    4ef6:	b0 91 bf 28 	lds	r27, 0x28BF	; 0x8028bf <sSensorData+0x5c>
    4efa:	49 2f       	mov	r20, r25
    4efc:	5a 2f       	mov	r21, r26
    4efe:	6b 2f       	mov	r22, r27
    4f00:	77 27       	eor	r23, r23
    4f02:	67 fd       	sbrc	r22, 7
    4f04:	7a 95       	dec	r23
    4f06:	1c 01       	movw	r2, r24
    4f08:	2d 01       	movw	r4, r26
    4f0a:	24 1a       	sub	r2, r20
    4f0c:	35 0a       	sbc	r3, r21
    4f0e:	46 0a       	sbc	r4, r22
    4f10:	57 0a       	sbc	r5, r23
    4f12:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    4f16:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
    4f1a:	09 2e       	mov	r0, r25
    4f1c:	00 0c       	add	r0, r0
    4f1e:	aa 0b       	sbc	r26, r26
    4f20:	bb 0b       	sbc	r27, r27
    4f22:	ba 2f       	mov	r27, r26
    4f24:	a9 2f       	mov	r26, r25
    4f26:	98 2f       	mov	r25, r24
    4f28:	88 27       	eor	r24, r24
    4f2a:	82 0d       	add	r24, r2
    4f2c:	93 1d       	adc	r25, r3
    4f2e:	a4 1d       	adc	r26, r4
    4f30:	b5 1d       	adc	r27, r5
    4f32:	80 93 bc 28 	sts	0x28BC, r24	; 0x8028bc <sSensorData+0x59>
    4f36:	90 93 bd 28 	sts	0x28BD, r25	; 0x8028bd <sSensorData+0x5a>
    4f3a:	a0 93 be 28 	sts	0x28BE, r26	; 0x8028be <sSensorData+0x5b>
    4f3e:	b0 93 bf 28 	sts	0x28BF, r27	; 0x8028bf <sSensorData+0x5c>

	while(!(ADCB.CH2.INTFLAGS & 0x01)) ;
    4f42:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <__TEXT_REGION_LENGTH__+0x700273>
    4f46:	80 ff       	sbrs	r24, 0
    4f48:	fc cf       	rjmp	.-8      	; 0x4f42 <__vector_71+0x774>
	ADCB.CH2.INTFLAGS = 0x01;
    4f4a:	81 e0       	ldi	r24, 0x01	; 1
    4f4c:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <__TEXT_REGION_LENGTH__+0x700273>
	driverTempSample = ADCB.CH2RES;
    4f50:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__TEXT_REGION_LENGTH__+0x700254>
    4f54:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <__TEXT_REGION_LENGTH__+0x700255>
	FILTER32(driverTempSample, sSensorData.driverTempFiltered);
    4f58:	40 91 90 28 	lds	r20, 0x2890	; 0x802890 <sSensorData+0x2d>
    4f5c:	50 91 91 28 	lds	r21, 0x2891	; 0x802891 <sSensorData+0x2e>
    4f60:	60 91 92 28 	lds	r22, 0x2892	; 0x802892 <sSensorData+0x2f>
    4f64:	70 91 93 28 	lds	r23, 0x2893	; 0x802893 <sSensorData+0x30>
    4f68:	05 2f       	mov	r16, r21
    4f6a:	16 2f       	mov	r17, r22
    4f6c:	27 2f       	mov	r18, r23
    4f6e:	33 27       	eor	r19, r19
    4f70:	27 fd       	sbrc	r18, 7
    4f72:	3a 95       	dec	r19
    4f74:	40 1b       	sub	r20, r16
    4f76:	51 0b       	sbc	r21, r17
    4f78:	62 0b       	sbc	r22, r18
    4f7a:	73 0b       	sbc	r23, r19
    4f7c:	09 2e       	mov	r0, r25
    4f7e:	00 0c       	add	r0, r0
    4f80:	aa 0b       	sbc	r26, r26
    4f82:	bb 0b       	sbc	r27, r27
    4f84:	ba 2f       	mov	r27, r26
    4f86:	a9 2f       	mov	r26, r25
    4f88:	98 2f       	mov	r25, r24
    4f8a:	88 27       	eor	r24, r24
    4f8c:	84 0f       	add	r24, r20
    4f8e:	95 1f       	adc	r25, r21
    4f90:	a6 1f       	adc	r26, r22
    4f92:	b7 1f       	adc	r27, r23
    4f94:	80 93 90 28 	sts	0x2890, r24	; 0x802890 <sSensorData+0x2d>
    4f98:	90 93 91 28 	sts	0x2891, r25	; 0x802891 <sSensorData+0x2e>
    4f9c:	a0 93 92 28 	sts	0x2892, r26	; 0x802892 <sSensorData+0x2f>
    4fa0:	b0 93 93 28 	sts	0x2893, r27	; 0x802893 <sSensorData+0x30>
	
	while(!(ADCA.CH3.INTFLAGS & 0x01)) ;
    4fa4:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <__TEXT_REGION_LENGTH__+0x70023b>
    4fa8:	80 ff       	sbrs	r24, 0
    4faa:	fc cf       	rjmp	.-8      	; 0x4fa4 <__vector_71+0x7d6>
	ADCA.CH3.INTFLAGS = 0x01;
    4fac:	81 e0       	ldi	r24, 0x01	; 1
    4fae:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <__TEXT_REGION_LENGTH__+0x70023b>
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
    4fb2:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <__TEXT_REGION_LENGTH__+0x70027b>
    4fb6:	80 ff       	sbrs	r24, 0
    4fb8:	fc cf       	rjmp	.-8      	; 0x4fb2 <__vector_71+0x7e4>
	ADCB.CH3.INTFLAGS = 0x01;
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <__TEXT_REGION_LENGTH__+0x70027b>
	if(sSamplingVin) {
    4fc0:	80 90 5b 28 	lds	r8, 0x285B	; 0x80285b <sSamplingVin.4801>
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
    4fc4:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__TEXT_REGION_LENGTH__+0x700216>
    4fc8:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__TEXT_REGION_LENGTH__+0x700217>
	
	while(!(ADCA.CH3.INTFLAGS & 0x01)) ;
	ADCA.CH3.INTFLAGS = 0x01;
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
	ADCB.CH3.INTFLAGS = 0x01;
	if(sSamplingVin) {
    4fcc:	88 20       	and	r8, r8
    4fce:	09 f4       	brne	.+2      	; 0x4fd2 <__vector_71+0x804>
    4fd0:	be c0       	rjmp	.+380    	; 0x514e <__vector_71+0x980>
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
    4fd2:	80 91 01 2a 	lds	r24, 0x2A01	; 0x802a01 <sCal+0x1c>
    4fd6:	90 91 02 2a 	lds	r25, 0x2A02	; 0x802a02 <sCal+0x1d>
    4fda:	28 1b       	sub	r18, r24
    4fdc:	39 0b       	sbc	r19, r25
		FILTER32(inVoltageSample, sSensorData.inVoltageFiltered);
    4fde:	80 91 9c 28 	lds	r24, 0x289C	; 0x80289c <sSensorData+0x39>
    4fe2:	90 91 9d 28 	lds	r25, 0x289D	; 0x80289d <sSensorData+0x3a>
    4fe6:	a0 91 9e 28 	lds	r26, 0x289E	; 0x80289e <sSensorData+0x3b>
    4fea:	b0 91 9f 28 	lds	r27, 0x289F	; 0x80289f <sSensorData+0x3c>
    4fee:	49 2f       	mov	r20, r25
    4ff0:	5a 2f       	mov	r21, r26
    4ff2:	6b 2f       	mov	r22, r27
    4ff4:	77 27       	eor	r23, r23
    4ff6:	67 fd       	sbrc	r22, 7
    4ff8:	7a 95       	dec	r23
    4ffa:	7c 01       	movw	r14, r24
    4ffc:	8d 01       	movw	r16, r26
    4ffe:	e4 1a       	sub	r14, r20
    5000:	f5 0a       	sbc	r15, r21
    5002:	06 0b       	sbc	r16, r22
    5004:	17 0b       	sbc	r17, r23
    5006:	b8 01       	movw	r22, r16
    5008:	a7 01       	movw	r20, r14
    500a:	c9 01       	movw	r24, r18
    500c:	03 2e       	mov	r0, r19
    500e:	00 0c       	add	r0, r0
    5010:	aa 0b       	sbc	r26, r26
    5012:	bb 0b       	sbc	r27, r27
    5014:	ba 2f       	mov	r27, r26
    5016:	a9 2f       	mov	r26, r25
    5018:	98 2f       	mov	r25, r24
    501a:	88 27       	eor	r24, r24
    501c:	84 0f       	add	r24, r20
    501e:	95 1f       	adc	r25, r21
    5020:	a6 1f       	adc	r26, r22
    5022:	b7 1f       	adc	r27, r23
    5024:	80 93 9c 28 	sts	0x289C, r24	; 0x80289c <sSensorData+0x39>
    5028:	90 93 9d 28 	sts	0x289D, r25	; 0x80289d <sSensorData+0x3a>
    502c:	a0 93 9e 28 	sts	0x289E, r26	; 0x80289e <sSensorData+0x3b>
    5030:	b0 93 9f 28 	sts	0x289F, r27	; 0x80289f <sSensorData+0x3c>
		inCurrentSample = ADCB.CH3RES - sCal.inCurrentOffset;
    5034:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <__TEXT_REGION_LENGTH__+0x700256>
    5038:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <__TEXT_REGION_LENGTH__+0x700257>
    503c:	80 91 03 2a 	lds	r24, 0x2A03	; 0x802a03 <sCal+0x1e>
    5040:	90 91 04 2a 	lds	r25, 0x2A04	; 0x802a04 <sCal+0x1f>
    5044:	48 1b       	sub	r20, r24
    5046:	59 0b       	sbc	r21, r25
		FILTER32(inCurrentSample, sSensorData.inCurrentFiltered);
    5048:	80 91 a0 28 	lds	r24, 0x28A0	; 0x8028a0 <sSensorData+0x3d>
    504c:	90 91 a1 28 	lds	r25, 0x28A1	; 0x8028a1 <sSensorData+0x3e>
    5050:	a0 91 a2 28 	lds	r26, 0x28A2	; 0x8028a2 <sSensorData+0x3f>
    5054:	b0 91 a3 28 	lds	r27, 0x28A3	; 0x8028a3 <sSensorData+0x40>
    5058:	c9 2e       	mov	r12, r25
    505a:	da 2e       	mov	r13, r26
    505c:	eb 2e       	mov	r14, r27
    505e:	ff 24       	eor	r15, r15
    5060:	e7 fc       	sbrc	r14, 7
    5062:	fa 94       	dec	r15
    5064:	1c 01       	movw	r2, r24
    5066:	2d 01       	movw	r4, r26
    5068:	2c 18       	sub	r2, r12
    506a:	3d 08       	sbc	r3, r13
    506c:	4e 08       	sbc	r4, r14
    506e:	5f 08       	sbc	r5, r15
    5070:	ca 01       	movw	r24, r20
    5072:	05 2e       	mov	r0, r21
    5074:	00 0c       	add	r0, r0
    5076:	aa 0b       	sbc	r26, r26
    5078:	bb 0b       	sbc	r27, r27
    507a:	ba 2f       	mov	r27, r26
    507c:	a9 2f       	mov	r26, r25
    507e:	98 2f       	mov	r25, r24
    5080:	88 27       	eor	r24, r24
    5082:	82 0d       	add	r24, r2
    5084:	93 1d       	adc	r25, r3
    5086:	a4 1d       	adc	r26, r4
    5088:	b5 1d       	adc	r27, r5
    508a:	80 93 a0 28 	sts	0x28A0, r24	; 0x8028a0 <sSensorData+0x3d>
    508e:	90 93 a1 28 	sts	0x28A1, r25	; 0x8028a1 <sSensorData+0x3e>
    5092:	a0 93 a2 28 	sts	0x28A2, r26	; 0x8028a2 <sSensorData+0x3f>
    5096:	b0 93 a3 28 	sts	0x28A3, r27	; 0x8028a3 <sSensorData+0x40>
		inPower = ((int32_t) inVoltageSample) * ((int32_t) inCurrentSample);
    509a:	da 01       	movw	r26, r20
    509c:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulhisi3>
		FILTER32PWR(inPower, sSensorData.inPowerFiltered);
    50a0:	00 91 a8 28 	lds	r16, 0x28A8	; 0x8028a8 <sSensorData+0x45>
    50a4:	10 91 a9 28 	lds	r17, 0x28A9	; 0x8028a9 <sSensorData+0x46>
    50a8:	20 91 aa 28 	lds	r18, 0x28AA	; 0x8028aa <sSensorData+0x47>
    50ac:	30 91 ab 28 	lds	r19, 0x28AB	; 0x8028ab <sSensorData+0x48>
    50b0:	c1 2e       	mov	r12, r17
    50b2:	d2 2e       	mov	r13, r18
    50b4:	e3 2e       	mov	r14, r19
    50b6:	ff 24       	eor	r15, r15
    50b8:	e7 fc       	sbrc	r14, 7
    50ba:	fa 94       	dec	r15
    50bc:	0c 19       	sub	r16, r12
    50be:	1d 09       	sbc	r17, r13
    50c0:	2e 09       	sbc	r18, r14
    50c2:	3f 09       	sbc	r19, r15
    50c4:	06 0f       	add	r16, r22
    50c6:	17 1f       	adc	r17, r23
    50c8:	28 1f       	adc	r18, r24
    50ca:	39 1f       	adc	r19, r25
    50cc:	00 93 a8 28 	sts	0x28A8, r16	; 0x8028a8 <sSensorData+0x45>
    50d0:	10 93 a9 28 	sts	0x28A9, r17	; 0x8028a9 <sSensorData+0x46>
    50d4:	20 93 aa 28 	sts	0x28AA, r18	; 0x8028aa <sSensorData+0x47>
    50d8:	30 93 ab 28 	sts	0x28AB, r19	; 0x8028ab <sSensorData+0x48>
		sSensorData.inEnergy +=  2 * inPower;
    50dc:	dc 01       	movw	r26, r24
    50de:	cb 01       	movw	r24, r22
    50e0:	88 0f       	add	r24, r24
    50e2:	99 1f       	adc	r25, r25
    50e4:	aa 1f       	adc	r26, r26
    50e6:	bb 1f       	adc	r27, r27
    50e8:	6c 01       	movw	r12, r24
    50ea:	7d 01       	movw	r14, r26
    50ec:	ff 0c       	add	r15, r15
    50ee:	cc 08       	sbc	r12, r12
    50f0:	dc 2c       	mov	r13, r12
    50f2:	76 01       	movw	r14, r12
    50f4:	9c 01       	movw	r18, r24
    50f6:	ad 01       	movw	r20, r26
    50f8:	6c 2d       	mov	r22, r12
    50fa:	7c 2d       	mov	r23, r12
    50fc:	8c 2d       	mov	r24, r12
    50fe:	9c 2d       	mov	r25, r12
    5100:	a0 90 b4 28 	lds	r10, 0x28B4	; 0x8028b4 <sSensorData+0x51>
    5104:	b0 90 b5 28 	lds	r11, 0x28B5	; 0x8028b5 <sSensorData+0x52>
    5108:	c0 90 b6 28 	lds	r12, 0x28B6	; 0x8028b6 <sSensorData+0x53>
    510c:	d0 90 b7 28 	lds	r13, 0x28B7	; 0x8028b7 <sSensorData+0x54>
    5110:	e0 90 b8 28 	lds	r14, 0x28B8	; 0x8028b8 <sSensorData+0x55>
    5114:	f0 90 b9 28 	lds	r15, 0x28B9	; 0x8028b9 <sSensorData+0x56>
    5118:	00 91 ba 28 	lds	r16, 0x28BA	; 0x8028ba <sSensorData+0x57>
    511c:	10 91 bb 28 	lds	r17, 0x28BB	; 0x8028bb <sSensorData+0x58>
    5120:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__adddi3>
    5124:	20 93 b4 28 	sts	0x28B4, r18	; 0x8028b4 <sSensorData+0x51>
    5128:	30 93 b5 28 	sts	0x28B5, r19	; 0x8028b5 <sSensorData+0x52>
    512c:	40 93 b6 28 	sts	0x28B6, r20	; 0x8028b6 <sSensorData+0x53>
    5130:	50 93 b7 28 	sts	0x28B7, r21	; 0x8028b7 <sSensorData+0x54>
    5134:	60 93 b8 28 	sts	0x28B8, r22	; 0x8028b8 <sSensorData+0x55>
    5138:	70 93 b9 28 	sts	0x28B9, r23	; 0x8028b9 <sSensorData+0x56>
    513c:	80 93 ba 28 	sts	0x28BA, r24	; 0x8028ba <sSensorData+0x57>
    5140:	90 93 bb 28 	sts	0x28BB, r25	; 0x8028bb <sSensorData+0x58>
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN12_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_VMOTOR on PB4 vs V33/2 on PA1 */
    5144:	81 e6       	ldi	r24, 0x61	; 97
    5146:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <__TEXT_REGION_LENGTH__+0x700239>
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_IMOTOR on PB5 vs V33/2 on PB1 */
    514a:	89 e2       	ldi	r24, 0x29	; 41
    514c:	bd c0       	rjmp	.+378    	; 0x52c8 <__vector_71+0xafa>
	}
	else {
		motorVoltageSample = ADCA.CH3RES - sCal.motorVoltageOffset;
    514e:	80 91 fd 29 	lds	r24, 0x29FD	; 0x8029fd <sCal+0x18>
    5152:	90 91 fe 29 	lds	r25, 0x29FE	; 0x8029fe <sCal+0x19>
    5156:	28 1b       	sub	r18, r24
    5158:	39 0b       	sbc	r19, r25
		FILTER32(motorVoltageSample, sSensorData.motorVoltageFiltered);	
    515a:	80 91 94 28 	lds	r24, 0x2894	; 0x802894 <sSensorData+0x31>
    515e:	90 91 95 28 	lds	r25, 0x2895	; 0x802895 <sSensorData+0x32>
    5162:	a0 91 96 28 	lds	r26, 0x2896	; 0x802896 <sSensorData+0x33>
    5166:	b0 91 97 28 	lds	r27, 0x2897	; 0x802897 <sSensorData+0x34>
    516a:	49 2f       	mov	r20, r25
    516c:	5a 2f       	mov	r21, r26
    516e:	6b 2f       	mov	r22, r27
    5170:	77 27       	eor	r23, r23
    5172:	67 fd       	sbrc	r22, 7
    5174:	7a 95       	dec	r23
    5176:	7c 01       	movw	r14, r24
    5178:	8d 01       	movw	r16, r26
    517a:	e4 1a       	sub	r14, r20
    517c:	f5 0a       	sbc	r15, r21
    517e:	06 0b       	sbc	r16, r22
    5180:	17 0b       	sbc	r17, r23
    5182:	b8 01       	movw	r22, r16
    5184:	a7 01       	movw	r20, r14
    5186:	c9 01       	movw	r24, r18
    5188:	03 2e       	mov	r0, r19
    518a:	00 0c       	add	r0, r0
    518c:	aa 0b       	sbc	r26, r26
    518e:	bb 0b       	sbc	r27, r27
    5190:	ba 2f       	mov	r27, r26
    5192:	a9 2f       	mov	r26, r25
    5194:	98 2f       	mov	r25, r24
    5196:	88 27       	eor	r24, r24
    5198:	84 0f       	add	r24, r20
    519a:	95 1f       	adc	r25, r21
    519c:	a6 1f       	adc	r26, r22
    519e:	b7 1f       	adc	r27, r23
    51a0:	80 93 94 28 	sts	0x2894, r24	; 0x802894 <sSensorData+0x31>
    51a4:	90 93 95 28 	sts	0x2895, r25	; 0x802895 <sSensorData+0x32>
    51a8:	a0 93 96 28 	sts	0x2896, r26	; 0x802896 <sSensorData+0x33>
    51ac:	b0 93 97 28 	sts	0x2897, r27	; 0x802897 <sSensorData+0x34>
		motorCurrentSample = ADCB.CH3RES - sCal.motorCurrentOffset;
    51b0:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <__TEXT_REGION_LENGTH__+0x700256>
    51b4:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <__TEXT_REGION_LENGTH__+0x700257>
    51b8:	80 91 ff 29 	lds	r24, 0x29FF	; 0x8029ff <sCal+0x1a>
    51bc:	90 91 00 2a 	lds	r25, 0x2A00	; 0x802a00 <sCal+0x1b>
    51c0:	48 1b       	sub	r20, r24
    51c2:	59 0b       	sbc	r21, r25
		FILTER32(motorCurrentSample, sSensorData.motorCurrentFiltered);
    51c4:	80 91 98 28 	lds	r24, 0x2898	; 0x802898 <sSensorData+0x35>
    51c8:	90 91 99 28 	lds	r25, 0x2899	; 0x802899 <sSensorData+0x36>
    51cc:	a0 91 9a 28 	lds	r26, 0x289A	; 0x80289a <sSensorData+0x37>
    51d0:	b0 91 9b 28 	lds	r27, 0x289B	; 0x80289b <sSensorData+0x38>
    51d4:	c9 2e       	mov	r12, r25
    51d6:	da 2e       	mov	r13, r26
    51d8:	eb 2e       	mov	r14, r27
    51da:	ff 24       	eor	r15, r15
    51dc:	e7 fc       	sbrc	r14, 7
    51de:	fa 94       	dec	r15
    51e0:	1c 01       	movw	r2, r24
    51e2:	2d 01       	movw	r4, r26
    51e4:	2c 18       	sub	r2, r12
    51e6:	3d 08       	sbc	r3, r13
    51e8:	4e 08       	sbc	r4, r14
    51ea:	5f 08       	sbc	r5, r15
    51ec:	ca 01       	movw	r24, r20
    51ee:	05 2e       	mov	r0, r21
    51f0:	00 0c       	add	r0, r0
    51f2:	aa 0b       	sbc	r26, r26
    51f4:	bb 0b       	sbc	r27, r27
    51f6:	ba 2f       	mov	r27, r26
    51f8:	a9 2f       	mov	r26, r25
    51fa:	98 2f       	mov	r25, r24
    51fc:	88 27       	eor	r24, r24
    51fe:	82 0d       	add	r24, r2
    5200:	93 1d       	adc	r25, r3
    5202:	a4 1d       	adc	r26, r4
    5204:	b5 1d       	adc	r27, r5
    5206:	80 93 98 28 	sts	0x2898, r24	; 0x802898 <sSensorData+0x35>
    520a:	90 93 99 28 	sts	0x2899, r25	; 0x802899 <sSensorData+0x36>
    520e:	a0 93 9a 28 	sts	0x289A, r26	; 0x80289a <sSensorData+0x37>
    5212:	b0 93 9b 28 	sts	0x289B, r27	; 0x80289b <sSensorData+0x38>
		motorPower = ((int32_t) motorVoltageSample) * ((int32_t) motorCurrentSample);
    5216:	da 01       	movw	r26, r20
    5218:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulhisi3>
		FILTER32PWR(motorPower, sSensorData.motorPowerFiltered);
    521c:	00 91 a4 28 	lds	r16, 0x28A4	; 0x8028a4 <sSensorData+0x41>
    5220:	10 91 a5 28 	lds	r17, 0x28A5	; 0x8028a5 <sSensorData+0x42>
    5224:	20 91 a6 28 	lds	r18, 0x28A6	; 0x8028a6 <sSensorData+0x43>
    5228:	30 91 a7 28 	lds	r19, 0x28A7	; 0x8028a7 <sSensorData+0x44>
    522c:	c1 2e       	mov	r12, r17
    522e:	d2 2e       	mov	r13, r18
    5230:	e3 2e       	mov	r14, r19
    5232:	ff 24       	eor	r15, r15
    5234:	e7 fc       	sbrc	r14, 7
    5236:	fa 94       	dec	r15
    5238:	0c 19       	sub	r16, r12
    523a:	1d 09       	sbc	r17, r13
    523c:	2e 09       	sbc	r18, r14
    523e:	3f 09       	sbc	r19, r15
    5240:	06 0f       	add	r16, r22
    5242:	17 1f       	adc	r17, r23
    5244:	28 1f       	adc	r18, r24
    5246:	39 1f       	adc	r19, r25
    5248:	00 93 a4 28 	sts	0x28A4, r16	; 0x8028a4 <sSensorData+0x41>
    524c:	10 93 a5 28 	sts	0x28A5, r17	; 0x8028a5 <sSensorData+0x42>
    5250:	20 93 a6 28 	sts	0x28A6, r18	; 0x8028a6 <sSensorData+0x43>
    5254:	30 93 a7 28 	sts	0x28A7, r19	; 0x8028a7 <sSensorData+0x44>
		sSensorData.motorEnergy += 2 * motorPower;
    5258:	dc 01       	movw	r26, r24
    525a:	cb 01       	movw	r24, r22
    525c:	88 0f       	add	r24, r24
    525e:	99 1f       	adc	r25, r25
    5260:	aa 1f       	adc	r26, r26
    5262:	bb 1f       	adc	r27, r27
    5264:	6c 01       	movw	r12, r24
    5266:	7d 01       	movw	r14, r26
    5268:	ff 0c       	add	r15, r15
    526a:	cc 08       	sbc	r12, r12
    526c:	dc 2c       	mov	r13, r12
    526e:	76 01       	movw	r14, r12
    5270:	9c 01       	movw	r18, r24
    5272:	ad 01       	movw	r20, r26
    5274:	6c 2d       	mov	r22, r12
    5276:	7c 2d       	mov	r23, r12
    5278:	8c 2d       	mov	r24, r12
    527a:	9c 2d       	mov	r25, r12
    527c:	a0 90 ac 28 	lds	r10, 0x28AC	; 0x8028ac <sSensorData+0x49>
    5280:	b0 90 ad 28 	lds	r11, 0x28AD	; 0x8028ad <sSensorData+0x4a>
    5284:	c0 90 ae 28 	lds	r12, 0x28AE	; 0x8028ae <sSensorData+0x4b>
    5288:	d0 90 af 28 	lds	r13, 0x28AF	; 0x8028af <sSensorData+0x4c>
    528c:	e0 90 b0 28 	lds	r14, 0x28B0	; 0x8028b0 <sSensorData+0x4d>
    5290:	f0 90 b1 28 	lds	r15, 0x28B1	; 0x8028b1 <sSensorData+0x4e>
    5294:	00 91 b2 28 	lds	r16, 0x28B2	; 0x8028b2 <sSensorData+0x4f>
    5298:	10 91 b3 28 	lds	r17, 0x28B3	; 0x8028b3 <sSensorData+0x50>
    529c:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <__adddi3>
    52a0:	20 93 ac 28 	sts	0x28AC, r18	; 0x8028ac <sSensorData+0x49>
    52a4:	30 93 ad 28 	sts	0x28AD, r19	; 0x8028ad <sSensorData+0x4a>
    52a8:	40 93 ae 28 	sts	0x28AE, r20	; 0x8028ae <sSensorData+0x4b>
    52ac:	50 93 af 28 	sts	0x28AF, r21	; 0x8028af <sSensorData+0x4c>
    52b0:	60 93 b0 28 	sts	0x28B0, r22	; 0x8028b0 <sSensorData+0x4d>
    52b4:	70 93 b1 28 	sts	0x28B1, r23	; 0x8028b1 <sSensorData+0x4e>
    52b8:	80 93 b2 28 	sts	0x28B2, r24	; 0x8028b2 <sSensorData+0x4f>
    52bc:	90 93 b3 28 	sts	0x28B3, r25	; 0x8028b3 <sSensorData+0x50>
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN11_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_Vin on PB3 vs V33/2 on PA1 */
    52c0:	89 e5       	ldi	r24, 0x59	; 89
    52c2:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <__TEXT_REGION_LENGTH__+0x700239>
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure Iin on PB7 vs V33/2 on PB1 */
    52c6:	89 e3       	ldi	r24, 0x39	; 57
    52c8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__TEXT_REGION_LENGTH__+0x700279>
	}
	sSamplingVin = !sSamplingVin;
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	81 10       	cpse	r8, r1
    52d0:	80 e0       	ldi	r24, 0x00	; 0
    52d2:	80 93 5b 28 	sts	0x285B, r24	; 0x80285b <sSamplingVin.4801>

	/* PWM frequency and duty cycle */
	if(pwmEn) {
    52d6:	91 10       	cpse	r9, r1
    52d8:	2b c0       	rjmp	.+86     	; 0x5330 <__vector_71+0xb62>
		sSensorData.pwmDutyCycle -= sSensorData.pwmDutyCycle >> 8;
    52da:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <sSensorData+0x72>
    52de:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <sSensorData+0x73>
    52e2:	29 2f       	mov	r18, r25
    52e4:	33 27       	eor	r19, r19
    52e6:	82 1b       	sub	r24, r18
    52e8:	93 0b       	sbc	r25, r19
		if(pwm)
    52ea:	76 fe       	sbrs	r7, 6
    52ec:	02 c0       	rjmp	.+4      	; 0x52f2 <__vector_71+0xb24>
			sSensorData.pwmDutyCycle += PWM_DC_FS;
    52ee:	81 50       	subi	r24, 0x01	; 1
    52f0:	9f 4f       	sbci	r25, 0xFF	; 255
    52f2:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <sSensorData+0x72>
    52f6:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <sSensorData+0x73>
		sSensorData.pwmFrequency -= sSensorData.pwmFrequency >> 8;
    52fa:	80 91 d3 28 	lds	r24, 0x28D3	; 0x8028d3 <sSensorData+0x70>
    52fe:	90 91 d4 28 	lds	r25, 0x28D4	; 0x8028d4 <sSensorData+0x71>
    5302:	29 2f       	mov	r18, r25
    5304:	33 27       	eor	r19, r19
    5306:	2c 01       	movw	r4, r24
    5308:	42 1a       	sub	r4, r18
    530a:	53 0a       	sbc	r5, r19
		sSensorData.pwmFrequency += (curPWMCycles - sPrevPWMCycles) << PWM_FREQ_FILTER_SHIFT;
    530c:	8d 2f       	mov	r24, r29
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	40 91 5a 28 	lds	r20, 0x285A	; 0x80285a <sPrevPWMCycles.4802>
    5314:	84 1b       	sub	r24, r20
    5316:	91 09       	sbc	r25, r1
    5318:	43 e0       	ldi	r20, 0x03	; 3
    531a:	88 0f       	add	r24, r24
    531c:	99 1f       	adc	r25, r25
    531e:	4a 95       	dec	r20
    5320:	e1 f7       	brne	.-8      	; 0x531a <__vector_71+0xb4c>
    5322:	84 0d       	add	r24, r4
    5324:	95 1d       	adc	r25, r5
    5326:	80 93 d3 28 	sts	0x28D3, r24	; 0x8028d3 <sSensorData+0x70>
    532a:	90 93 d4 28 	sts	0x28D4, r25	; 0x8028d4 <sSensorData+0x71>
    532e:	08 c0       	rjmp	.+16     	; 0x5340 <__vector_71+0xb72>
	}
	else {
		sSensorData.pwmDutyCycle = 0;
    5330:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <sSensorData+0x72>
    5334:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <sSensorData+0x73>
		sSensorData.pwmFrequency = 0;
    5338:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <sSensorData+0x70>
    533c:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <sSensorData+0x71>
	}
	sPrevPWMCycles = curPWMCycles;
    5340:	d0 93 5a 28 	sts	0x285A, r29	; 0x80285a <sPrevPWMCycles.4802>
	
	/* Pin states */
	if(sSensorData.selFPState != selFPPin) {
    5344:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <sSensorData+0x61>
    5348:	8c 17       	cp	r24, r28
    534a:	91 f0       	breq	.+36     	; 0x5370 <__vector_71+0xba2>
		sSensorData.selFPState = selFPPin;
    534c:	c0 93 c4 28 	sts	0x28C4, r28	; 0x8028c4 <sSensorData+0x61>
		sSensorData.selFPTimestamp = sSessionCycleCount;
    5350:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5354:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    5358:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    535c:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5360:	80 93 c7 28 	sts	0x28C7, r24	; 0x8028c7 <sSensorData+0x64>
    5364:	90 93 c8 28 	sts	0x28C8, r25	; 0x8028c8 <sSensorData+0x65>
    5368:	a0 93 c9 28 	sts	0x28C9, r26	; 0x8028c9 <sSensorData+0x66>
    536c:	b0 93 ca 28 	sts	0x28CA, r27	; 0x8028ca <sSensorData+0x67>
	}
	
	if(sSensorData.selCCState != selCCPin) {
    5370:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <sSensorData+0x62>
    5374:	8f 17       	cp	r24, r31
    5376:	09 f4       	brne	.+2      	; 0x537a <__vector_71+0xbac>
    5378:	45 c0       	rjmp	.+138    	; 0x5404 <__vector_71+0xc36>
		sSensorData.selCCState = selCCPin;
    537a:	f0 93 c5 28 	sts	0x28C5, r31	; 0x8028c5 <sSensorData+0x62>
		sSensorData.selCCTimestamp = sSessionCycleCount;
    537e:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5382:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    5386:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    538a:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    538e:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <sSensorData+0x68>
    5392:	90 93 cc 28 	sts	0x28CC, r25	; 0x8028cc <sSensorData+0x69>
    5396:	a0 93 cd 28 	sts	0x28CD, r26	; 0x8028cd <sSensorData+0x6a>
    539a:	b0 93 ce 28 	sts	0x28CE, r27	; 0x8028ce <sSensorData+0x6b>
		/* Did CC just get enabled? */
		if(!selCCPin && sSensorData.speedSensorPulseInterval < (((int32_t) CC_MAX_INTERVAL) << 16)) {
    539e:	f1 11       	cpse	r31, r1
    53a0:	2f c0       	rjmp	.+94     	; 0x5400 <__vector_71+0xc32>
    53a2:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <sSensorData+0x59>
    53a6:	90 91 bd 28 	lds	r25, 0x28BD	; 0x8028bd <sSensorData+0x5a>
    53aa:	a0 91 be 28 	lds	r26, 0x28BE	; 0x8028be <sSensorData+0x5b>
    53ae:	b0 91 bf 28 	lds	r27, 0x28BF	; 0x8028bf <sSensorData+0x5c>
    53b2:	00 97       	sbiw	r24, 0x00	; 0
    53b4:	00 ed       	ldi	r16, 0xD0	; 208
    53b6:	a0 07       	cpc	r26, r16
    53b8:	b1 05       	cpc	r27, r1
    53ba:	14 f5       	brge	.+68     	; 0x5400 <__vector_71+0xc32>
			sCCIsOn = 1;
    53bc:	21 e0       	ldi	r18, 0x01	; 1
    53be:	20 93 59 28 	sts	0x2859, r18	; 0x802859 <sCCIsOn.4803>
			sSensorData.ccPower = CC_DEFAULT_POWER;
    53c2:	22 e0       	ldi	r18, 0x02	; 2
    53c4:	20 93 db 28 	sts	0x28DB, r18	; 0x8028db <sSensorData+0x78>
			sCCPrevPulseInterval = sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    53c8:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <sSensorData+0x74>
    53cc:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <sSensorData+0x75>
    53d0:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <sSensorData+0x76>
    53d4:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <sSensorData+0x77>
    53d8:	80 93 55 28 	sts	0x2855, r24	; 0x802855 <sCCPrevPulseInterval.4810>
    53dc:	90 93 56 28 	sts	0x2856, r25	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    53e0:	a0 93 57 28 	sts	0x2857, r26	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    53e4:	b0 93 58 28 	sts	0x2858, r27	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
			sCCRunTimer = CC_REG_CYCLES;
    53e8:	88 e8       	ldi	r24, 0x88	; 136
    53ea:	93 e1       	ldi	r25, 0x13	; 19
    53ec:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <sCCRunTimer.4804>
    53f0:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <sCCRunTimer.4804+0x1>
			SET_CC_DRIVE(sSensorData.ccPower);
    53f4:	85 e0       	ldi	r24, 0x05	; 5
    53f6:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    53fa:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    53fe:	02 c0       	rjmp	.+4      	; 0x5404 <__vector_71+0xc36>
		}
		else
			sCCIsOn = 0;
    5400:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <sCCIsOn.4803>
	}

	if(sSensorData.selCC2State != selCC2Pin) {
    5404:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <sSensorData+0x63>
    5408:	8e 17       	cp	r24, r30
    540a:	09 f4       	brne	.+2      	; 0x540e <__vector_71+0xc40>
    540c:	6d c0       	rjmp	.+218    	; 0x54e8 <__vector_71+0xd1a>
		sSensorData.selCC2State = selCC2Pin;
    540e:	e0 93 c6 28 	sts	0x28C6, r30	; 0x8028c6 <sSensorData+0x63>
		sSensorData.selCC2Timestamp = sSessionCycleCount;
    5412:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5416:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    541a:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    541e:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5422:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <sSensorData+0x6c>
    5426:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <sSensorData+0x6d>
    542a:	a0 93 d1 28 	sts	0x28D1, r26	; 0x8028d1 <sSensorData+0x6e>
    542e:	b0 93 d2 28 	sts	0x28D2, r27	; 0x8028d2 <sSensorData+0x6f>
		/* Did CC2 just get enabled? */
		if(!selCC2Pin) {
    5432:	e1 11       	cpse	r30, r1
    5434:	57 c0       	rjmp	.+174    	; 0x54e4 <__vector_71+0xd16>
			sCCIsOn = 1;
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	80 93 59 28 	sts	0x2859, r24	; 0x802859 <sCCIsOn.4803>
			sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    543c:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <sSensorData+0x59>
    5440:	90 91 bd 28 	lds	r25, 0x28BD	; 0x8028bd <sSensorData+0x5a>
    5444:	a0 91 be 28 	lds	r26, 0x28BE	; 0x8028be <sSensorData+0x5b>
    5448:	b0 91 bf 28 	lds	r27, 0x28BF	; 0x8028bf <sSensorData+0x5c>
    544c:	80 93 55 28 	sts	0x2855, r24	; 0x802855 <sCCPrevPulseInterval.4810>
    5450:	90 93 56 28 	sts	0x2856, r25	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    5454:	a0 93 57 28 	sts	0x2857, r26	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    5458:	b0 93 58 28 	sts	0x2858, r27	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
			if(sSensorData.speedSensorPulseInterval > sCC2MinSpeed) { // Driving below minimum initial CC2 speed limit
    545c:	40 91 e0 28 	lds	r20, 0x28E0	; 0x8028e0 <sCC2MinSpeed>
    5460:	50 91 e1 28 	lds	r21, 0x28E1	; 0x8028e1 <sCC2MinSpeed+0x1>
    5464:	60 91 e2 28 	lds	r22, 0x28E2	; 0x8028e2 <sCC2MinSpeed+0x2>
    5468:	70 91 e3 28 	lds	r23, 0x28E3	; 0x8028e3 <sCC2MinSpeed+0x3>
    546c:	48 17       	cp	r20, r24
    546e:	59 07       	cpc	r21, r25
    5470:	6a 07       	cpc	r22, r26
    5472:	7b 07       	cpc	r23, r27
    5474:	94 f4       	brge	.+36     	; 0x549a <__vector_71+0xccc>
				sSensorData.ccTargetSpeed = sCC2MinSpeed;
    5476:	80 91 e0 28 	lds	r24, 0x28E0	; 0x8028e0 <sCC2MinSpeed>
    547a:	90 91 e1 28 	lds	r25, 0x28E1	; 0x8028e1 <sCC2MinSpeed+0x1>
    547e:	a0 91 e2 28 	lds	r26, 0x28E2	; 0x8028e2 <sCC2MinSpeed+0x2>
    5482:	b0 91 e3 28 	lds	r27, 0x28E3	; 0x8028e3 <sCC2MinSpeed+0x3>
    5486:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <sSensorData+0x74>
    548a:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <sSensorData+0x75>
    548e:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <sSensorData+0x76>
    5492:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <sSensorData+0x77>
				sSensorData.ccPower = CC_MAX_POWER;
    5496:	87 e0       	ldi	r24, 0x07	; 7
    5498:	09 c0       	rjmp	.+18     	; 0x54ac <__vector_71+0xcde>
			}
			else {
				sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    549a:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <sSensorData+0x74>
    549e:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <sSensorData+0x75>
    54a2:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <sSensorData+0x76>
    54a6:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <sSensorData+0x77>
				sSensorData.ccPower = CC_DEFAULT_POWER;
    54aa:	82 e0       	ldi	r24, 0x02	; 2
    54ac:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <sSensorData+0x78>
			}
			sCCRunTimer = CC_REG_CYCLES;
    54b0:	88 e8       	ldi	r24, 0x88	; 136
    54b2:	93 e1       	ldi	r25, 0x13	; 19
    54b4:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <sCCRunTimer.4804>
    54b8:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <sCCRunTimer.4804+0x1>
			SET_CC_DRIVE(sSensorData.ccPower);
    54bc:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <sSensorData+0x78>
    54c0:	81 11       	cpse	r24, r1
    54c2:	02 c0       	rjmp	.+4      	; 0x54c8 <__vector_71+0xcfa>
    54c4:	87 e0       	ldi	r24, 0x07	; 7
    54c6:	0b c0       	rjmp	.+22     	; 0x54de <__vector_71+0xd10>
    54c8:	87 30       	cpi	r24, 0x07	; 7
    54ca:	19 f4       	brne	.+6      	; 0x54d2 <__vector_71+0xd04>
    54cc:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    54d0:	0b c0       	rjmp	.+22     	; 0x54e8 <__vector_71+0xd1a>
    54d2:	98 2f       	mov	r25, r24
    54d4:	90 95       	com	r25
    54d6:	97 70       	andi	r25, 0x07	; 7
    54d8:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    54dc:	87 70       	andi	r24, 0x07	; 7
    54de:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    54e2:	02 c0       	rjmp	.+4      	; 0x54e8 <__vector_71+0xd1a>
		}
		else
			sCCIsOn = 0;
    54e4:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <sCCIsOn.4803>
	}
	
	if(sCCIsOn && !--sCCRunTimer) {
    54e8:	80 91 59 28 	lds	r24, 0x2859	; 0x802859 <sCCIsOn.4803>
    54ec:	88 23       	and	r24, r24
    54ee:	09 f4       	brne	.+2      	; 0x54f2 <__vector_71+0xd24>
    54f0:	84 c0       	rjmp	.+264    	; 0x55fa <__vector_71+0xe2c>
    54f2:	80 91 53 28 	lds	r24, 0x2853	; 0x802853 <sCCRunTimer.4804>
    54f6:	90 91 54 28 	lds	r25, 0x2854	; 0x802854 <sCCRunTimer.4804+0x1>
    54fa:	01 97       	sbiw	r24, 0x01	; 1
    54fc:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <sCCRunTimer.4804>
    5500:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <sCCRunTimer.4804+0x1>
    5504:	89 2b       	or	r24, r25
    5506:	09 f0       	breq	.+2      	; 0x550a <__vector_71+0xd3c>
    5508:	78 c0       	rjmp	.+240    	; 0x55fa <__vector_71+0xe2c>
		if(!selCC2Pin && sCC2TargetSpeedUpdate) {
    550a:	e1 11       	cpse	r30, r1
    550c:	16 c0       	rjmp	.+44     	; 0x553a <__vector_71+0xd6c>
    550e:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <sCC2TargetSpeedUpdate>
    5512:	88 23       	and	r24, r24
    5514:	91 f0       	breq	.+36     	; 0x553a <__vector_71+0xd6c>
			sSensorData.ccTargetSpeed = sCC2TargetSpeed;
    5516:	80 91 dc 28 	lds	r24, 0x28DC	; 0x8028dc <sCC2TargetSpeed>
    551a:	90 91 dd 28 	lds	r25, 0x28DD	; 0x8028dd <sCC2TargetSpeed+0x1>
    551e:	a0 91 de 28 	lds	r26, 0x28DE	; 0x8028de <sCC2TargetSpeed+0x2>
    5522:	b0 91 df 28 	lds	r27, 0x28DF	; 0x8028df <sCC2TargetSpeed+0x3>
    5526:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <sSensorData+0x74>
    552a:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <sSensorData+0x75>
    552e:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <sSensorData+0x76>
    5532:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <sSensorData+0x77>
			// Possibly adjust power levels here too, for faster convergence?
			sCC2TargetSpeedUpdate = 0;
    5536:	10 92 e4 28 	sts	0x28E4, r1	; 0x8028e4 <sCC2TargetSpeedUpdate>
		}
		if((sSensorData.speedSensorPulseInterval > sSensorData.ccTargetSpeed)
    553a:	40 91 bc 28 	lds	r20, 0x28BC	; 0x8028bc <sSensorData+0x59>
    553e:	50 91 bd 28 	lds	r21, 0x28BD	; 0x8028bd <sSensorData+0x5a>
    5542:	60 91 be 28 	lds	r22, 0x28BE	; 0x8028be <sSensorData+0x5b>
    5546:	70 91 bf 28 	lds	r23, 0x28BF	; 0x8028bf <sSensorData+0x5c>
    554a:	00 91 d7 28 	lds	r16, 0x28D7	; 0x8028d7 <sSensorData+0x74>
    554e:	10 91 d8 28 	lds	r17, 0x28D8	; 0x8028d8 <sSensorData+0x75>
    5552:	20 91 d9 28 	lds	r18, 0x28D9	; 0x8028d9 <sSensorData+0x76>
    5556:	30 91 da 28 	lds	r19, 0x28DA	; 0x8028da <sSensorData+0x77>
    555a:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <sSensorData+0x78>
    555e:	04 17       	cp	r16, r20
    5560:	15 07       	cpc	r17, r21
    5562:	26 07       	cpc	r18, r22
    5564:	37 07       	cpc	r19, r23
    5566:	8c f4       	brge	.+34     	; 0x558a <__vector_71+0xdbc>
			&& (sSensorData.speedSensorPulseInterval > sCCPrevPulseInterval) 
    5568:	00 91 55 28 	lds	r16, 0x2855	; 0x802855 <sCCPrevPulseInterval.4810>
    556c:	10 91 56 28 	lds	r17, 0x2856	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    5570:	20 91 57 28 	lds	r18, 0x2857	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    5574:	30 91 58 28 	lds	r19, 0x2858	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
    5578:	04 17       	cp	r16, r20
    557a:	15 07       	cpc	r17, r21
    557c:	26 07       	cpc	r18, r22
    557e:	37 07       	cpc	r19, r23
    5580:	dc f4       	brge	.+54     	; 0x55b8 <__vector_71+0xdea>
			&& (sSensorData.ccPower < CC_MAX_POWER))
    5582:	87 30       	cpi	r24, 0x07	; 7
    5584:	c8 f4       	brcc	.+50     	; 0x55b8 <__vector_71+0xdea>
				sSensorData.ccPower++;
    5586:	8f 5f       	subi	r24, 0xFF	; 255
    5588:	15 c0       	rjmp	.+42     	; 0x55b4 <__vector_71+0xde6>
		else if((sSensorData.speedSensorPulseInterval < sSensorData.ccTargetSpeed)
    558a:	40 17       	cp	r20, r16
    558c:	51 07       	cpc	r21, r17
    558e:	62 07       	cpc	r22, r18
    5590:	73 07       	cpc	r23, r19
    5592:	94 f4       	brge	.+36     	; 0x55b8 <__vector_71+0xdea>
			&& (sSensorData.speedSensorPulseInterval < sCCPrevPulseInterval)
    5594:	00 91 55 28 	lds	r16, 0x2855	; 0x802855 <sCCPrevPulseInterval.4810>
    5598:	10 91 56 28 	lds	r17, 0x2856	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    559c:	20 91 57 28 	lds	r18, 0x2857	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    55a0:	30 91 58 28 	lds	r19, 0x2858	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
    55a4:	40 17       	cp	r20, r16
    55a6:	51 07       	cpc	r21, r17
    55a8:	62 07       	cpc	r22, r18
    55aa:	73 07       	cpc	r23, r19
    55ac:	2c f4       	brge	.+10     	; 0x55b8 <__vector_71+0xdea>
			&& (sSensorData.ccPower > 0))
    55ae:	88 23       	and	r24, r24
    55b0:	19 f0       	breq	.+6      	; 0x55b8 <__vector_71+0xdea>
				sSensorData.ccPower--;
    55b2:	81 50       	subi	r24, 0x01	; 1
    55b4:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <sSensorData+0x78>
		SET_CC_DRIVE(sSensorData.ccPower);
    55b8:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <sSensorData+0x78>
    55bc:	81 11       	cpse	r24, r1
    55be:	02 c0       	rjmp	.+4      	; 0x55c4 <__vector_71+0xdf6>
    55c0:	87 e0       	ldi	r24, 0x07	; 7
    55c2:	0b c0       	rjmp	.+22     	; 0x55da <__vector_71+0xe0c>
    55c4:	87 30       	cpi	r24, 0x07	; 7
    55c6:	19 f4       	brne	.+6      	; 0x55ce <__vector_71+0xe00>
    55c8:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    55cc:	08 c0       	rjmp	.+16     	; 0x55de <__vector_71+0xe10>
    55ce:	98 2f       	mov	r25, r24
    55d0:	90 95       	com	r25
    55d2:	97 70       	andi	r25, 0x07	; 7
    55d4:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    55d8:	87 70       	andi	r24, 0x07	; 7
    55da:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
		sCCRunTimer = CC_REG_CYCLES;
    55de:	88 e8       	ldi	r24, 0x88	; 136
    55e0:	93 e1       	ldi	r25, 0x13	; 19
    55e2:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <sCCRunTimer.4804>
    55e6:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <sCCRunTimer.4804+0x1>
		sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    55ea:	40 93 55 28 	sts	0x2855, r20	; 0x802855 <sCCPrevPulseInterval.4810>
    55ee:	50 93 56 28 	sts	0x2856, r21	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    55f2:	60 93 57 28 	sts	0x2857, r22	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    55f6:	70 93 58 28 	sts	0x2858, r23	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
	}
	
	if(sTakeSnapshot485) {
    55fa:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <sTakeSnapshot485>
    55fe:	88 23       	and	r24, r24
    5600:	e1 f0       	breq	.+56     	; 0x563a <__vector_71+0xe6c>
		sSensorDataSnapshot485 = sSensorData;
    5602:	89 e7       	ldi	r24, 0x79	; 121
    5604:	e3 e6       	ldi	r30, 0x63	; 99
    5606:	f8 e2       	ldi	r31, 0x28	; 40
    5608:	ae ee       	ldi	r26, 0xEE	; 238
    560a:	b8 e2       	ldi	r27, 0x28	; 40
    560c:	01 90       	ld	r0, Z+
    560e:	0d 92       	st	X+, r0
    5610:	8a 95       	dec	r24
    5612:	e1 f7       	brne	.-8      	; 0x560c <__vector_71+0xe3e>
		sSessionCycleCountSnapshot485 = sSessionCycleCount;
    5614:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5618:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    561c:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5620:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5624:	80 93 ea 28 	sts	0x28EA, r24	; 0x8028ea <sSessionCycleCountSnapshot485>
    5628:	90 93 eb 28 	sts	0x28EB, r25	; 0x8028eb <sSessionCycleCountSnapshot485+0x1>
    562c:	a0 93 ec 28 	sts	0x28EC, r26	; 0x8028ec <sSessionCycleCountSnapshot485+0x2>
    5630:	b0 93 ed 28 	sts	0x28ED, r27	; 0x8028ed <sSessionCycleCountSnapshot485+0x3>
		
		sTakeSnapshot485 = 0;
    5634:	10 92 e9 28 	sts	0x28E9, r1	; 0x8028e9 <sTakeSnapshot485>
    5638:	1f c0       	rjmp	.+62     	; 0x5678 <__vector_71+0xeaa>
	}
	else if(sTakeSnapshot) { 
    563a:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>
    563e:	88 23       	and	r24, r24
    5640:	d9 f0       	breq	.+54     	; 0x5678 <__vector_71+0xeaa>
		sSensorDataSnapshot = sSensorData;
    5642:	89 e7       	ldi	r24, 0x79	; 121
    5644:	e3 e6       	ldi	r30, 0x63	; 99
    5646:	f8 e2       	ldi	r31, 0x28	; 40
    5648:	ac e6       	ldi	r26, 0x6C	; 108
    564a:	b9 e2       	ldi	r27, 0x29	; 41
    564c:	01 90       	ld	r0, Z+
    564e:	0d 92       	st	X+, r0
    5650:	8a 95       	dec	r24
    5652:	e1 f7       	brne	.-8      	; 0x564c <__vector_71+0xe7e>
		sSessionCycleCountSnapshot = sSessionCycleCount;
    5654:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5658:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    565c:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5660:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5664:	80 93 68 29 	sts	0x2968, r24	; 0x802968 <sSessionCycleCountSnapshot>
    5668:	90 93 69 29 	sts	0x2969, r25	; 0x802969 <sSessionCycleCountSnapshot+0x1>
    566c:	a0 93 6a 29 	sts	0x296A, r26	; 0x80296a <sSessionCycleCountSnapshot+0x2>
    5670:	b0 93 6b 29 	sts	0x296B, r27	; 0x80296b <sSessionCycleCountSnapshot+0x3>
		
		sTakeSnapshot = 0;
    5674:	10 92 67 29 	sts	0x2967, r1	; 0x802967 <sTakeSnapshot>
	}

	sSessionCycleCount++;
    5678:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    567c:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    5680:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5684:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5688:	01 96       	adiw	r24, 0x01	; 1
    568a:	a1 1d       	adc	r26, r1
    568c:	b1 1d       	adc	r27, r1
    568e:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <sSessionCycleCount>
    5692:	90 93 e6 28 	sts	0x28E6, r25	; 0x8028e6 <sSessionCycleCount+0x1>
    5696:	a0 93 e7 28 	sts	0x28E7, r26	; 0x8028e7 <sSessionCycleCount+0x2>
    569a:	b0 93 e8 28 	sts	0x28E8, r27	; 0x8028e8 <sSessionCycleCount+0x3>
		
} /* ISR(ADCA_CH0_vect) */
    569e:	ff 91       	pop	r31
    56a0:	ef 91       	pop	r30
    56a2:	df 91       	pop	r29
    56a4:	cf 91       	pop	r28
    56a6:	bf 91       	pop	r27
    56a8:	af 91       	pop	r26
    56aa:	9f 91       	pop	r25
    56ac:	8f 91       	pop	r24
    56ae:	7f 91       	pop	r23
    56b0:	6f 91       	pop	r22
    56b2:	5f 91       	pop	r21
    56b4:	4f 91       	pop	r20
    56b6:	3f 91       	pop	r19
    56b8:	2f 91       	pop	r18
    56ba:	1f 91       	pop	r17
    56bc:	0f 91       	pop	r16
    56be:	ff 90       	pop	r15
    56c0:	ef 90       	pop	r14
    56c2:	df 90       	pop	r13
    56c4:	cf 90       	pop	r12
    56c6:	bf 90       	pop	r11
    56c8:	af 90       	pop	r10
    56ca:	9f 90       	pop	r9
    56cc:	8f 90       	pop	r8
    56ce:	7f 90       	pop	r7
    56d0:	5f 90       	pop	r5
    56d2:	4f 90       	pop	r4
    56d4:	3f 90       	pop	r3
    56d6:	2f 90       	pop	r2
    56d8:	0f 90       	pop	r0
    56da:	0b be       	out	0x3b, r0	; 59
    56dc:	0f 90       	pop	r0
    56de:	0f be       	out	0x3f, r0	; 63
    56e0:	0f 90       	pop	r0
    56e2:	1f 90       	pop	r1
    56e4:	18 95       	reti

000056e6 <CopySensorData>:
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
    56e6:	fc 01       	movw	r30, r24
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    56ec:	db 01       	movw	r26, r22
    56ee:	4d 91       	ld	r20, X+
    56f0:	bd 01       	movw	r22, r26
    56f2:	54 2f       	mov	r21, r20
    56f4:	5d 7f       	andi	r21, 0xFD	; 253
    56f6:	55 32       	cpi	r21, 0x25	; 37
    56f8:	61 f0       	breq	.+24     	; 0x5712 <CopySensorData+0x2c>
    56fa:	44 23       	and	r20, r20
    56fc:	51 f0       	breq	.+20     	; 0x5712 <CopySensorData+0x2c>
		dest[i] = src[i];
    56fe:	41 93       	st	Z+, r20
    5700:	2f 5f       	subi	r18, 0xFF	; 255
    5702:	3f 4f       	sbci	r19, 0xFF	; 255


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    5704:	2e 34       	cpi	r18, 0x4E	; 78
    5706:	31 05       	cpc	r19, r1
    5708:	89 f7       	brne	.-30     	; 0x56ec <CopySensorData+0x6>
	}		
	
	if(i < MAXDATA)
		dest[i] = '\0';
	else
		dest[MAXDATA - 1] = '\0';
    570a:	fc 01       	movw	r30, r24
    570c:	e3 5b       	subi	r30, 0xB3	; 179
    570e:	ff 4f       	sbci	r31, 0xFF	; 255
    5710:	03 c0       	rjmp	.+6      	; 0x5718 <CopySensorData+0x32>
		dest[i] = src[i];
		i++;
	}		
	
	if(i < MAXDATA)
		dest[i] = '\0';
    5712:	fc 01       	movw	r30, r24
    5714:	e2 0f       	add	r30, r18
    5716:	f3 1f       	adc	r31, r19
	else
		dest[MAXDATA - 1] = '\0';
    5718:	10 82       	st	Z, r1
    571a:	08 95       	ret

0000571c <AcceptDataGPSPosition>:
} /* CopySensorData */


static int AcceptDataGPSPosition(const char *adr, char *inData) {
	
	CopySensorData(sGPSPos, inData);
    571c:	88 e0       	ldi	r24, 0x08	; 8
    571e:	90 e2       	ldi	r25, 0x20	; 32
    5720:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <CopySensorData>
	return 0;
	
} /* AcceptDataGPSPosition */
    5724:	80 e0       	ldi	r24, 0x00	; 0
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	08 95       	ret

0000572a <AcceptDataGPSDirection>:


static int AcceptDataGPSDirection(const char *adr, char *inData) {
	
	CopySensorData(sGPSDirection, inData);
    572a:	81 eb       	ldi	r24, 0xB1	; 177
    572c:	9a e2       	ldi	r25, 0x2A	; 42
    572e:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <CopySensorData>
	return 0;
	
} /* AcceptDataGPSDirection */
    5732:	80 e0       	ldi	r24, 0x00	; 0
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	08 95       	ret

00005738 <AcceptDataGPSSpeed>:


static int AcceptDataGPSSpeed(const char *adr, char *inData) {
	
	CopySensorData(sGPSSpeed, inData);
    5738:	83 e6       	ldi	r24, 0x63	; 99
    573a:	9a e2       	ldi	r25, 0x2A	; 42
    573c:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <CopySensorData>
	return 0;
	
} /* AcceptDataGPSSpeed */
    5740:	80 e0       	ldi	r24, 0x00	; 0
    5742:	90 e0       	ldi	r25, 0x00	; 0
    5744:	08 95       	ret

00005746 <AcceptDataGPSTime>:


static int AcceptDataGPSTime(const char *adr, char *inData) {
	
	CopySensorData(sGPSTime, inData);
    5746:	85 e1       	ldi	r24, 0x15	; 21
    5748:	9a e2       	ldi	r25, 0x2A	; 42
    574a:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <CopySensorData>
	return 0;
		
} /* AcceptDataGPSTime */
    574e:	80 e0       	ldi	r24, 0x00	; 0
    5750:	90 e0       	ldi	r25, 0x00	; 0
    5752:	08 95       	ret

00005754 <InitReadBussensors>:
static int AcceptDataGPSTime(const char *adr, char *inData);


void InitReadBussensors(void) {
	
	AddWantedSensor("LL01", AcceptDataGPSPosition);
    5754:	6e e8       	ldi	r22, 0x8E	; 142
    5756:	7b e2       	ldi	r23, 0x2B	; 43
    5758:	8a e3       	ldi	r24, 0x3A	; 58
    575a:	97 e2       	ldi	r25, 0x27	; 39
    575c:	0e 94 80 02 	call	0x500	; 0x500 <AddWantedSensor>
	AddWantedSensor("GR01", AcceptDataGPSDirection);
    5760:	65 e9       	ldi	r22, 0x95	; 149
    5762:	7b e2       	ldi	r23, 0x2B	; 43
    5764:	8f e3       	ldi	r24, 0x3F	; 63
    5766:	97 e2       	ldi	r25, 0x27	; 39
    5768:	0e 94 80 02 	call	0x500	; 0x500 <AddWantedSensor>
	AddWantedSensor("SG01", AcceptDataGPSSpeed);
    576c:	6c e9       	ldi	r22, 0x9C	; 156
    576e:	7b e2       	ldi	r23, 0x2B	; 43
    5770:	84 e4       	ldi	r24, 0x44	; 68
    5772:	97 e2       	ldi	r25, 0x27	; 39
    5774:	0e 94 80 02 	call	0x500	; 0x500 <AddWantedSensor>
	AddWantedSensor("GT01", AcceptDataGPSTime);
    5778:	63 ea       	ldi	r22, 0xA3	; 163
    577a:	7b e2       	ldi	r23, 0x2B	; 43
    577c:	89 e4       	ldi	r24, 0x49	; 73
    577e:	97 e2       	ldi	r25, 0x27	; 39
    5780:	0c 94 80 02 	jmp	0x500	; 0x500 <AddWantedSensor>

00005784 <PrintBussensors>:
} /* InitReadBussensors */


void PrintBussensors(FILE *fp) {
	
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
    5784:	25 e1       	ldi	r18, 0x15	; 21
    5786:	3a e2       	ldi	r19, 0x2A	; 42
    5788:	3f 93       	push	r19
    578a:	2f 93       	push	r18
    578c:	23 e6       	ldi	r18, 0x63	; 99
    578e:	3a e2       	ldi	r19, 0x2A	; 42
    5790:	3f 93       	push	r19
    5792:	2f 93       	push	r18
    5794:	21 eb       	ldi	r18, 0xB1	; 177
    5796:	3a e2       	ldi	r19, 0x2A	; 42
    5798:	3f 93       	push	r19
    579a:	2f 93       	push	r18
    579c:	28 e0       	ldi	r18, 0x08	; 8
    579e:	30 e2       	ldi	r19, 0x20	; 32
    57a0:	3f 93       	push	r19
    57a2:	2f 93       	push	r18
    57a4:	2e e4       	ldi	r18, 0x4E	; 78
    57a6:	37 e2       	ldi	r19, 0x27	; 39
    57a8:	3f 93       	push	r19
    57aa:	2f 93       	push	r18
    57ac:	9f 93       	push	r25
    57ae:	8f 93       	push	r24
    57b0:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    57b4:	8d b7       	in	r24, 0x3d	; 61
    57b6:	9e b7       	in	r25, 0x3e	; 62
    57b8:	0c 96       	adiw	r24, 0x0c	; 12
    57ba:	8d bf       	out	0x3d, r24	; 61
    57bc:	9e bf       	out	0x3e, r25	; 62
    57be:	08 95       	ret

000057c0 <InitSerial>:
	PMIC.CTRL = savePMIC & ~PMIC_LOLVLEN_bm;
	tx_fc_wridx = nextSlot;
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
	PMIC.CTRL = savePMIC;

} /* WriteByte_FC */
    57c0:	cf 93       	push	r28
    57c2:	df 93       	push	r29
    57c4:	f8 94       	cli
    57c6:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    57ca:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <__TEXT_REGION_LENGTH__+0x7008b4>
    57ce:	20 ea       	ldi	r18, 0xA0	; 160
    57d0:	39 e0       	ldi	r19, 0x09	; 9
    57d2:	d9 01       	movw	r26, r18
    57d4:	14 96       	adiw	r26, 0x04	; 4
    57d6:	1c 92       	st	X, r1
    57d8:	c0 eb       	ldi	r28, 0xB0	; 176
    57da:	d9 e0       	ldi	r29, 0x09	; 9
    57dc:	1c 82       	std	Y+4, r1	; 0x04
    57de:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
    57e2:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <__TEXT_REGION_LENGTH__+0x700ab4>
    57e6:	60 ea       	ldi	r22, 0xA0	; 160
    57e8:	7b e0       	ldi	r23, 0x0B	; 11
    57ea:	fb 01       	movw	r30, r22
    57ec:	14 82       	std	Z+4, r1	; 0x04
    57ee:	e0 e6       	ldi	r30, 0x60	; 96
    57f0:	f6 e0       	ldi	r31, 0x06	; 6
    57f2:	88 e1       	ldi	r24, 0x18	; 24
    57f4:	82 8b       	std	Z+18, r24	; 0x12
    57f6:	86 8b       	std	Z+22, r24	; 0x16
    57f8:	40 ea       	ldi	r20, 0xA0	; 160
    57fa:	56 e0       	ldi	r21, 0x06	; 6
    57fc:	da 01       	movw	r26, r20
    57fe:	52 96       	adiw	r26, 0x12	; 18
    5800:	8c 93       	st	X, r24
    5802:	52 97       	sbiw	r26, 0x12	; 18
    5804:	98 e8       	ldi	r25, 0x88	; 136
    5806:	95 83       	std	Z+5, r25	; 0x05
    5808:	92 e0       	ldi	r25, 0x02	; 2
    580a:	96 83       	std	Z+6, r25	; 0x06
    580c:	9a e8       	ldi	r25, 0x8A	; 138
    580e:	91 83       	std	Z+1, r25	; 0x01
    5810:	94 e4       	ldi	r25, 0x44	; 68
    5812:	92 83       	std	Z+2, r25	; 0x02
    5814:	98 e0       	ldi	r25, 0x08	; 8
    5816:	15 96       	adiw	r26, 0x05	; 5
    5818:	9c 93       	st	X, r25
    581a:	15 97       	sbiw	r26, 0x05	; 5
    581c:	11 96       	adiw	r26, 0x01	; 1
    581e:	9c 93       	st	X, r25
    5820:	11 97       	sbiw	r26, 0x01	; 1
    5822:	94 e0       	ldi	r25, 0x04	; 4
    5824:	12 96       	adiw	r26, 0x02	; 2
    5826:	9c 93       	st	X, r25
    5828:	90 e1       	ldi	r25, 0x10	; 16
    582a:	90 8b       	std	Z+16, r25	; 0x10
    582c:	94 8b       	std	Z+20, r25	; 0x14
    582e:	95 8b       	std	Z+21, r25	; 0x15
    5830:	45 ef       	ldi	r20, 0xF5	; 245
    5832:	f9 01       	movw	r30, r18
    5834:	46 83       	std	Z+6, r20	; 0x06
    5836:	90 eb       	ldi	r25, 0xB0	; 176
    5838:	97 83       	std	Z+7, r25	; 0x07
    583a:	4e 83       	std	Y+6, r20	; 0x06
    583c:	9f 83       	std	Y+7, r25	; 0x07
    583e:	9c e0       	ldi	r25, 0x0C	; 12
    5840:	db 01       	movw	r26, r22
    5842:	16 96       	adiw	r26, 0x06	; 6
    5844:	9c 93       	st	X, r25
    5846:	16 97       	sbiw	r26, 0x06	; 6
    5848:	92 eb       	ldi	r25, 0xB2	; 178
    584a:	17 96       	adiw	r26, 0x07	; 7
    584c:	9c 93       	st	X, r25
    584e:	17 97       	sbiw	r26, 0x07	; 7
    5850:	84 83       	std	Z+4, r24	; 0x04
    5852:	8c 83       	std	Y+4, r24	; 0x04
    5854:	14 96       	adiw	r26, 0x04	; 4
    5856:	8c 93       	st	X, r24
    5858:	14 97       	sbiw	r26, 0x04	; 4
    585a:	80 e2       	ldi	r24, 0x20	; 32
    585c:	83 83       	std	Z+3, r24	; 0x03
    585e:	8b 83       	std	Y+3, r24	; 0x03
    5860:	13 96       	adiw	r26, 0x03	; 3
    5862:	8c 93       	st	X, r24
    5864:	e0 ea       	ldi	r30, 0xA0	; 160
    5866:	f0 e0       	ldi	r31, 0x00	; 0
    5868:	82 81       	ldd	r24, Z+2	; 0x02
    586a:	83 60       	ori	r24, 0x03	; 3
    586c:	82 83       	std	Z+2, r24	; 0x02
    586e:	df 91       	pop	r29
    5870:	cf 91       	pop	r28
    5872:	08 95       	ret

00005874 <CanRead_Comm485>:
    5874:	80 91 cf 2d 	lds	r24, 0x2DCF	; 0x802dcf <rx_485_wridx>
    5878:	90 91 ce 2d 	lds	r25, 0x2DCE	; 0x802dce <rx_485_rdidx>
    587c:	89 17       	cp	r24, r25
    587e:	08 f4       	brcc	.+2      	; 0x5882 <CanRead_Comm485+0xe>
    5880:	8c 54       	subi	r24, 0x4C	; 76
    5882:	89 1b       	sub	r24, r25
    5884:	08 95       	ret

00005886 <ReadByte_Comm485>:
    5886:	cf 93       	push	r28
    5888:	c0 91 ce 2d 	lds	r28, 0x2DCE	; 0x802dce <rx_485_rdidx>
    588c:	0e 94 3a 2c 	call	0x5874	; 0x5874 <CanRead_Comm485>
    5890:	88 23       	and	r24, r24
    5892:	e1 f3       	breq	.-8      	; 0x588c <ReadByte_Comm485+0x6>
    5894:	ec 2f       	mov	r30, r28
    5896:	f0 e0       	ldi	r31, 0x00	; 0
    5898:	e6 5e       	subi	r30, 0xE6	; 230
    589a:	f2 4d       	sbci	r31, 0xD2	; 210
    589c:	80 81       	ld	r24, Z
    589e:	91 e0       	ldi	r25, 0x01	; 1
    58a0:	9c 0f       	add	r25, r28
    58a2:	94 3b       	cpi	r25, 0xB4	; 180
    58a4:	08 f0       	brcs	.+2      	; 0x58a8 <ReadByte_Comm485+0x22>
    58a6:	90 e0       	ldi	r25, 0x00	; 0
    58a8:	90 93 ce 2d 	sts	0x2DCE, r25	; 0x802dce <rx_485_rdidx>
    58ac:	cf 91       	pop	r28
    58ae:	08 95       	ret

000058b0 <CanWrite_Comm485>:
    58b0:	20 91 86 2e 	lds	r18, 0x2E86	; 0x802e86 <tx_485_wridx>
    58b4:	91 e0       	ldi	r25, 0x01	; 1
    58b6:	92 0f       	add	r25, r18
    58b8:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <tx_485_rdidx>
    58bc:	94 3b       	cpi	r25, 0xB4	; 180
    58be:	10 f0       	brcs	.+4      	; 0x58c4 <CanWrite_Comm485+0x14>
    58c0:	9d e4       	ldi	r25, 0x4D	; 77
    58c2:	92 0f       	add	r25, r18
    58c4:	89 17       	cp	r24, r25
    58c6:	08 f4       	brcc	.+2      	; 0x58ca <CanWrite_Comm485+0x1a>
    58c8:	8c 54       	subi	r24, 0x4C	; 76
    58ca:	89 1b       	sub	r24, r25
    58cc:	08 95       	ret

000058ce <WriteByte_Comm485>:
    58ce:	cf 93       	push	r28
    58d0:	df 93       	push	r29
    58d2:	d8 2f       	mov	r29, r24
    58d4:	c1 e2       	ldi	r28, 0x21	; 33
    58d6:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <CanWrite_Comm485>
    58da:	81 11       	cpse	r24, r1
    58dc:	03 c0       	rjmp	.+6      	; 0x58e4 <WriteByte_Comm485+0x16>
    58de:	c0 93 a3 09 	sts	0x09A3, r28	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
    58e2:	f9 cf       	rjmp	.-14     	; 0x58d6 <WriteByte_Comm485+0x8>
    58e4:	c0 91 86 2e 	lds	r28, 0x2E86	; 0x802e86 <tx_485_wridx>
    58e8:	ec 2f       	mov	r30, r28
    58ea:	f0 e0       	ldi	r31, 0x00	; 0
    58ec:	ef 52       	subi	r30, 0x2F	; 47
    58ee:	f2 4d       	sbci	r31, 0xD2	; 210
    58f0:	d0 83       	st	Z, r29
    58f2:	cf 5f       	subi	r28, 0xFF	; 255
    58f4:	c4 3b       	cpi	r28, 0xB4	; 180
    58f6:	08 f0       	brcs	.+2      	; 0x58fa <WriteByte_Comm485+0x2c>
    58f8:	c0 e0       	ldi	r28, 0x00	; 0
    58fa:	d0 91 a2 00 	lds	r29, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    58fe:	8d 2f       	mov	r24, r29
    5900:	8e 7f       	andi	r24, 0xFE	; 254
    5902:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5906:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <tx_485_busy>
    590a:	88 23       	and	r24, r24
    590c:	29 f0       	breq	.+10     	; 0x5918 <WriteByte_Comm485+0x4a>
    590e:	c0 93 86 2e 	sts	0x2E86, r28	; 0x802e86 <tx_485_wridx>
    5912:	d0 93 a2 00 	sts	0x00A2, r29	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5916:	16 c0       	rjmp	.+44     	; 0x5944 <WriteByte_Comm485+0x76>
    5918:	82 e0       	ldi	r24, 0x02	; 2
    591a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    591e:	0e 94 5e 2e 	call	0x5cbc	; 0x5cbc <GetTicks>
    5922:	21 e0       	ldi	r18, 0x01	; 1
    5924:	20 93 d0 2d 	sts	0x2DD0, r18	; 0x802dd0 <tx_485_busy>
    5928:	c0 93 86 2e 	sts	0x2E86, r28	; 0x802e86 <tx_485_wridx>
    592c:	20 e2       	ldi	r18, 0x20	; 32
    592e:	20 93 a3 09 	sts	0x09A3, r18	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
    5932:	d0 93 a2 00 	sts	0x00A2, r29	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5936:	63 e0       	ldi	r22, 0x03	; 3
    5938:	70 e0       	ldi	r23, 0x00	; 0
    593a:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <BusyWaitTillAfter>
    593e:	81 e2       	ldi	r24, 0x21	; 33
    5940:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
    5944:	df 91       	pop	r29
    5946:	cf 91       	pop	r28
    5948:	08 95       	ret

0000594a <CanRead_Ctrl>:
    594a:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <rx_ctrl_wridx>
    594e:	90 91 1c 2c 	lds	r25, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5952:	89 17       	cp	r24, r25
    5954:	08 f4       	brcc	.+2      	; 0x5958 <CanRead_Ctrl+0xe>
    5956:	80 5b       	subi	r24, 0xB0	; 176
    5958:	89 1b       	sub	r24, r25
    595a:	08 95       	ret

0000595c <ReadByte_Ctrl>:
    595c:	cf 93       	push	r28
    595e:	c0 91 1c 2c 	lds	r28, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5962:	0e 94 a5 2c 	call	0x594a	; 0x594a <CanRead_Ctrl>
    5966:	88 23       	and	r24, r24
    5968:	e1 f3       	breq	.-8      	; 0x5962 <ReadByte_Ctrl+0x6>
    596a:	ec 2f       	mov	r30, r28
    596c:	f0 e0       	ldi	r31, 0x00	; 0
    596e:	e4 53       	subi	r30, 0x34	; 52
    5970:	f4 4d       	sbci	r31, 0xD4	; 212
    5972:	80 81       	ld	r24, Z
    5974:	91 e0       	ldi	r25, 0x01	; 1
    5976:	9c 0f       	add	r25, r28
    5978:	90 35       	cpi	r25, 0x50	; 80
    597a:	08 f0       	brcs	.+2      	; 0x597e <ReadByte_Ctrl+0x22>
    597c:	90 e0       	ldi	r25, 0x00	; 0
    597e:	90 93 1c 2c 	sts	0x2C1C, r25	; 0x802c1c <rx_ctrl_rdidx>
    5982:	cf 91       	pop	r28
    5984:	08 95       	ret

00005986 <CanWrite_Ctrl>:
    5986:	20 91 19 2d 	lds	r18, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
    598a:	91 e0       	ldi	r25, 0x01	; 1
    598c:	92 0f       	add	r25, r18
    598e:	80 91 18 2d 	lds	r24, 0x2D18	; 0x802d18 <tx_ctrl_rdidx>
    5992:	9a 3f       	cpi	r25, 0xFA	; 250
    5994:	10 f0       	brcs	.+4      	; 0x599a <CanWrite_Ctrl+0x14>
    5996:	97 e0       	ldi	r25, 0x07	; 7
    5998:	92 0f       	add	r25, r18
    599a:	89 17       	cp	r24, r25
    599c:	08 f4       	brcc	.+2      	; 0x59a0 <CanWrite_Ctrl+0x1a>
    599e:	86 50       	subi	r24, 0x06	; 6
    59a0:	89 1b       	sub	r24, r25
    59a2:	08 95       	ret

000059a4 <WriteByte_Ctrl>:
    59a4:	cf 93       	push	r28
    59a6:	df 93       	push	r29
    59a8:	c8 2f       	mov	r28, r24
    59aa:	d1 e2       	ldi	r29, 0x21	; 33
    59ac:	0e 94 c3 2c 	call	0x5986	; 0x5986 <CanWrite_Ctrl>
    59b0:	81 11       	cpse	r24, r1
    59b2:	03 c0       	rjmp	.+6      	; 0x59ba <WriteByte_Ctrl+0x16>
    59b4:	d0 93 b3 09 	sts	0x09B3, r29	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    59b8:	f9 cf       	rjmp	.-14     	; 0x59ac <WriteByte_Ctrl+0x8>
    59ba:	90 91 19 2d 	lds	r25, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
    59be:	e9 2f       	mov	r30, r25
    59c0:	f0 e0       	ldi	r31, 0x00	; 0
    59c2:	e2 5e       	subi	r30, 0xE2	; 226
    59c4:	f3 4d       	sbci	r31, 0xD3	; 211
    59c6:	c0 83       	st	Z, r28
    59c8:	81 e0       	ldi	r24, 0x01	; 1
    59ca:	89 0f       	add	r24, r25
    59cc:	8a 3f       	cpi	r24, 0xFA	; 250
    59ce:	08 f0       	brcs	.+2      	; 0x59d2 <WriteByte_Ctrl+0x2e>
    59d0:	80 e0       	ldi	r24, 0x00	; 0
    59d2:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    59d6:	29 2f       	mov	r18, r25
    59d8:	2e 7f       	andi	r18, 0xFE	; 254
    59da:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    59de:	80 93 19 2d 	sts	0x2D19, r24	; 0x802d19 <tx_ctrl_wridx>
    59e2:	81 e2       	ldi	r24, 0x21	; 33
    59e4:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    59e8:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    59ec:	df 91       	pop	r29
    59ee:	cf 91       	pop	r28
    59f0:	08 95       	ret

000059f2 <Ctrl_putchar>:
    59f2:	cf 93       	push	r28
    59f4:	df 93       	push	r29
    59f6:	d8 2f       	mov	r29, r24
    59f8:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <WriteByte_Ctrl>
    59fc:	de 33       	cpi	r29, 0x3E	; 62
    59fe:	19 f4       	brne	.+6      	; 0x5a06 <Ctrl_putchar+0x14>
    5a00:	10 92 ff 2a 	sts	0x2AFF, r1	; 0x802aff <checksum.4192>
    5a04:	1b c0       	rjmp	.+54     	; 0x5a3c <Ctrl_putchar+0x4a>
    5a06:	c0 91 ff 2a 	lds	r28, 0x2AFF	; 0x802aff <checksum.4192>
    5a0a:	dc 33       	cpi	r29, 0x3C	; 60
    5a0c:	a1 f4       	brne	.+40     	; 0x5a36 <Ctrl_putchar+0x44>
    5a0e:	8c 2f       	mov	r24, r28
    5a10:	82 95       	swap	r24
    5a12:	8f 70       	andi	r24, 0x0F	; 15
    5a14:	8a 30       	cpi	r24, 0x0A	; 10
    5a16:	10 f4       	brcc	.+4      	; 0x5a1c <Ctrl_putchar+0x2a>
    5a18:	80 5d       	subi	r24, 0xD0	; 208
    5a1a:	01 c0       	rjmp	.+2      	; 0x5a1e <Ctrl_putchar+0x2c>
    5a1c:	89 5c       	subi	r24, 0xC9	; 201
    5a1e:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <WriteByte_Ctrl>
    5a22:	cf 70       	andi	r28, 0x0F	; 15
    5a24:	ca 30       	cpi	r28, 0x0A	; 10
    5a26:	10 f4       	brcc	.+4      	; 0x5a2c <Ctrl_putchar+0x3a>
    5a28:	80 e3       	ldi	r24, 0x30	; 48
    5a2a:	01 c0       	rjmp	.+2      	; 0x5a2e <Ctrl_putchar+0x3c>
    5a2c:	87 e3       	ldi	r24, 0x37	; 55
    5a2e:	8c 0f       	add	r24, r28
    5a30:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <WriteByte_Ctrl>
    5a34:	03 c0       	rjmp	.+6      	; 0x5a3c <Ctrl_putchar+0x4a>
    5a36:	cd 27       	eor	r28, r29
    5a38:	c0 93 ff 2a 	sts	0x2AFF, r28	; 0x802aff <checksum.4192>
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	df 91       	pop	r29
    5a42:	cf 91       	pop	r28
    5a44:	08 95       	ret

00005a46 <__vector_88>:


ISR(USARTD0_RXC_vect) {
    5a46:	1f 92       	push	r1
    5a48:	0f 92       	push	r0
    5a4a:	0f b6       	in	r0, 0x3f	; 63
    5a4c:	0f 92       	push	r0
    5a4e:	11 24       	eor	r1, r1
    5a50:	0b b6       	in	r0, 0x3b	; 59
    5a52:	0f 92       	push	r0
    5a54:	8f 93       	push	r24
    5a56:	9f 93       	push	r25
    5a58:	ef 93       	push	r30
    5a5a:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_485_wridx;
    5a5c:	80 91 cf 2d 	lds	r24, 0x2DCF	; 0x802dcf <rx_485_wridx>
	rx_485_buf[curSlot] = USARTD0.DATA;
    5a60:	e8 2f       	mov	r30, r24
    5a62:	f0 e0       	ldi	r31, 0x00	; 0
    5a64:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    5a68:	e6 5e       	subi	r30, 0xE6	; 230
    5a6a:	f2 4d       	sbci	r31, 0xD2	; 210
    5a6c:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5a6e:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_COMM485)
    5a70:	84 3b       	cpi	r24, 0xB4	; 180
    5a72:	08 f0       	brcs	.+2      	; 0x5a76 <__vector_88+0x30>
	nextSlot = 0;
    5a74:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_485_rdidx)
    5a76:	90 91 ce 2d 	lds	r25, 0x2DCE	; 0x802dce <rx_485_rdidx>
    5a7a:	89 13       	cpse	r24, r25
	rx_485_wridx = nextSlot;
    5a7c:	80 93 cf 2d 	sts	0x2DCF, r24	; 0x802dcf <rx_485_wridx>
	
} /* ISR(USARTD0_RXC_vect) */
    5a80:	ff 91       	pop	r31
    5a82:	ef 91       	pop	r30
    5a84:	9f 91       	pop	r25
    5a86:	8f 91       	pop	r24
    5a88:	0f 90       	pop	r0
    5a8a:	0b be       	out	0x3b, r0	; 59
    5a8c:	0f 90       	pop	r0
    5a8e:	0f be       	out	0x3f, r0	; 63
    5a90:	0f 90       	pop	r0
    5a92:	1f 90       	pop	r1
    5a94:	18 95       	reti

00005a96 <__vector_89>:


ISR(USARTD0_DRE_vect) {
    5a96:	1f 92       	push	r1
    5a98:	0f 92       	push	r0
    5a9a:	0f b6       	in	r0, 0x3f	; 63
    5a9c:	0f 92       	push	r0
    5a9e:	11 24       	eor	r1, r1
    5aa0:	0b b6       	in	r0, 0x3b	; 59
    5aa2:	0f 92       	push	r0
    5aa4:	2f 93       	push	r18
    5aa6:	8f 93       	push	r24
    5aa8:	9f 93       	push	r25
    5aaa:	ef 93       	push	r30
    5aac:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_485_rdidx;
    5aae:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <tx_485_rdidx>
	lastSlot = tx_485_wridx;
    5ab2:	90 91 86 2e 	lds	r25, 0x2E86	; 0x802e86 <tx_485_wridx>
	
	if(curSlot != lastSlot) {
    5ab6:	89 13       	cpse	r24, r25
    5ab8:	05 c0       	rjmp	.+10     	; 0x5ac4 <__vector_89+0x2e>
		USARTD0.DATA = tx_485_buf[curSlot];
		if(++nextSlot >= TXBUF_DEPTH_COMM485)
		nextSlot = 0;
	}
	if(nextSlot == lastSlot)
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_LO_gc | USART_DREINTLVL_OFF_gc;
    5aba:	84 e2       	ldi	r24, 0x24	; 36
    5abc:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
ISR(USARTD0_DRE_vect) {
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_485_rdidx;
	lastSlot = tx_485_wridx;
    5ac0:	89 2f       	mov	r24, r25
    5ac2:	0d c0       	rjmp	.+26     	; 0x5ade <__vector_89+0x48>
	
	if(curSlot != lastSlot) {
		USARTD0.DATA = tx_485_buf[curSlot];
    5ac4:	e8 2f       	mov	r30, r24
    5ac6:	f0 e0       	ldi	r31, 0x00	; 0
    5ac8:	ef 52       	subi	r30, 0x2F	; 47
    5aca:	f2 4d       	sbci	r31, 0xD2	; 210
    5acc:	20 81       	ld	r18, Z
    5ace:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
		if(++nextSlot >= TXBUF_DEPTH_COMM485)
    5ad2:	8f 5f       	subi	r24, 0xFF	; 255
    5ad4:	84 3b       	cpi	r24, 0xB4	; 180
    5ad6:	08 f0       	brcs	.+2      	; 0x5ada <__vector_89+0x44>
		nextSlot = 0;
    5ad8:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5ada:	89 17       	cp	r24, r25
    5adc:	71 f3       	breq	.-36     	; 0x5aba <__vector_89+0x24>
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_LO_gc | USART_DREINTLVL_OFF_gc;
	
	tx_485_rdidx = nextSlot;
    5ade:	80 93 85 2e 	sts	0x2E85, r24	; 0x802e85 <tx_485_rdidx>
	
} /* ISR(USARTD0_DRE_vect) */
    5ae2:	ff 91       	pop	r31
    5ae4:	ef 91       	pop	r30
    5ae6:	9f 91       	pop	r25
    5ae8:	8f 91       	pop	r24
    5aea:	2f 91       	pop	r18
    5aec:	0f 90       	pop	r0
    5aee:	0b be       	out	0x3b, r0	; 59
    5af0:	0f 90       	pop	r0
    5af2:	0f be       	out	0x3f, r0	; 63
    5af4:	0f 90       	pop	r0
    5af6:	1f 90       	pop	r1
    5af8:	18 95       	reti

00005afa <__vector_90>:


ISR(USARTD0_TXC_vect) {
    5afa:	1f 92       	push	r1
    5afc:	0f 92       	push	r0
    5afe:	0f b6       	in	r0, 0x3f	; 63
    5b00:	0f 92       	push	r0
    5b02:	11 24       	eor	r1, r1
    5b04:	8f 93       	push	r24
    5b06:	9f 93       	push	r25
	
	if(tx_485_rdidx == tx_485_wridx) {/* Still no bytes to tx ? */
    5b08:	90 91 85 2e 	lds	r25, 0x2E85	; 0x802e85 <tx_485_rdidx>
    5b0c:	80 91 86 2e 	lds	r24, 0x2E86	; 0x802e86 <tx_485_wridx>
    5b10:	98 13       	cpse	r25, r24
    5b12:	06 c0       	rjmp	.+12     	; 0x5b20 <__vector_90+0x26>
		PORTD.OUTCLR = PD_DRIVER_ENABLE_COMM485; /* Transmission complete; we can turn off the driver enable line */
    5b14:	82 e0       	ldi	r24, 0x02	; 2
    5b16:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		tx_485_busy = 0;
    5b1a:	10 92 d0 2d 	sts	0x2DD0, r1	; 0x802dd0 <tx_485_busy>
    5b1e:	03 c0       	rjmp	.+6      	; 0x5b26 <__vector_90+0x2c>
	}	
	else /* Re-enable TX ISR */
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    5b20:	81 e2       	ldi	r24, 0x21	; 33
    5b22:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
	
} /* ISR(USARTD0_TXC_vect) */
    5b26:	9f 91       	pop	r25
    5b28:	8f 91       	pop	r24
    5b2a:	0f 90       	pop	r0
    5b2c:	0f be       	out	0x3f, r0	; 63
    5b2e:	0f 90       	pop	r0
    5b30:	1f 90       	pop	r1
    5b32:	18 95       	reti

00005b34 <__vector_91>:


ISR(USARTD1_RXC_vect) {
    5b34:	1f 92       	push	r1
    5b36:	0f 92       	push	r0
    5b38:	0f b6       	in	r0, 0x3f	; 63
    5b3a:	0f 92       	push	r0
    5b3c:	11 24       	eor	r1, r1
    5b3e:	0b b6       	in	r0, 0x3b	; 59
    5b40:	0f 92       	push	r0
    5b42:	8f 93       	push	r24
    5b44:	9f 93       	push	r25
    5b46:	ef 93       	push	r30
    5b48:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_ctrl_wridx;
    5b4a:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <rx_ctrl_wridx>
	rx_ctrl_buf[curSlot] = USARTD1.DATA;
    5b4e:	e8 2f       	mov	r30, r24
    5b50:	f0 e0       	ldi	r31, 0x00	; 0
    5b52:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    5b56:	e4 53       	subi	r30, 0x34	; 52
    5b58:	f4 4d       	sbci	r31, 0xD4	; 212
    5b5a:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5b5c:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_CTRL)
    5b5e:	80 35       	cpi	r24, 0x50	; 80
    5b60:	08 f0       	brcs	.+2      	; 0x5b64 <__vector_91+0x30>
		nextSlot = 0;
    5b62:	80 e0       	ldi	r24, 0x00	; 0
		
	if(nextSlot != rx_ctrl_rdidx)
    5b64:	90 91 1c 2c 	lds	r25, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5b68:	89 13       	cpse	r24, r25
		rx_ctrl_wridx = nextSlot;
    5b6a:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <rx_ctrl_wridx>
	
} /* ISR(USARTD1_RXC_vect) */
    5b6e:	ff 91       	pop	r31
    5b70:	ef 91       	pop	r30
    5b72:	9f 91       	pop	r25
    5b74:	8f 91       	pop	r24
    5b76:	0f 90       	pop	r0
    5b78:	0b be       	out	0x3b, r0	; 59
    5b7a:	0f 90       	pop	r0
    5b7c:	0f be       	out	0x3f, r0	; 63
    5b7e:	0f 90       	pop	r0
    5b80:	1f 90       	pop	r1
    5b82:	18 95       	reti

00005b84 <__vector_92>:


ISR(USARTD1_DRE_vect) {
    5b84:	1f 92       	push	r1
    5b86:	0f 92       	push	r0
    5b88:	0f b6       	in	r0, 0x3f	; 63
    5b8a:	0f 92       	push	r0
    5b8c:	11 24       	eor	r1, r1
    5b8e:	0b b6       	in	r0, 0x3b	; 59
    5b90:	0f 92       	push	r0
    5b92:	2f 93       	push	r18
    5b94:	8f 93       	push	r24
    5b96:	9f 93       	push	r25
    5b98:	ef 93       	push	r30
    5b9a:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_ctrl_rdidx;
    5b9c:	80 91 18 2d 	lds	r24, 0x2D18	; 0x802d18 <tx_ctrl_rdidx>
	lastSlot = tx_ctrl_wridx;
    5ba0:	90 91 19 2d 	lds	r25, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
	
	if(curSlot != lastSlot) {
    5ba4:	89 13       	cpse	r24, r25
    5ba6:	05 c0       	rjmp	.+10     	; 0x5bb2 <__vector_92+0x2e>
		nextSlot = curSlot + 1;
		if(nextSlot >= TXBUF_DEPTH_CTRL)
			nextSlot = 0;
	}
	if(nextSlot == lastSlot)
		USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5ba8:	80 e2       	ldi	r24, 0x20	; 32
    5baa:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
ISR(USARTD1_DRE_vect) {
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_ctrl_rdidx;
	lastSlot = tx_ctrl_wridx;
    5bae:	89 2f       	mov	r24, r25
    5bb0:	0d c0       	rjmp	.+26     	; 0x5bcc <__vector_92+0x48>
	
	if(curSlot != lastSlot) {
		USARTD1.DATA = tx_ctrl_buf[curSlot];
    5bb2:	e8 2f       	mov	r30, r24
    5bb4:	f0 e0       	ldi	r31, 0x00	; 0
    5bb6:	e2 5e       	subi	r30, 0xE2	; 226
    5bb8:	f3 4d       	sbci	r31, 0xD3	; 211
    5bba:	20 81       	ld	r18, Z
    5bbc:	20 93 b0 09 	sts	0x09B0, r18	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
		nextSlot = curSlot + 1;
    5bc0:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_CTRL)
    5bc2:	8a 3f       	cpi	r24, 0xFA	; 250
    5bc4:	08 f0       	brcs	.+2      	; 0x5bc8 <__vector_92+0x44>
			nextSlot = 0;
    5bc6:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5bc8:	89 17       	cp	r24, r25
    5bca:	71 f3       	breq	.-36     	; 0x5ba8 <__vector_92+0x24>
		USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
	
	tx_ctrl_rdidx = nextSlot;
    5bcc:	80 93 18 2d 	sts	0x2D18, r24	; 0x802d18 <tx_ctrl_rdidx>
	
} /* ISR(USARTD1_DRE_vect) */
    5bd0:	ff 91       	pop	r31
    5bd2:	ef 91       	pop	r30
    5bd4:	9f 91       	pop	r25
    5bd6:	8f 91       	pop	r24
    5bd8:	2f 91       	pop	r18
    5bda:	0f 90       	pop	r0
    5bdc:	0b be       	out	0x3b, r0	; 59
    5bde:	0f 90       	pop	r0
    5be0:	0f be       	out	0x3f, r0	; 63
    5be2:	0f 90       	pop	r0
    5be4:	1f 90       	pop	r1
    5be6:	18 95       	reti

00005be8 <__vector_119>:


ISR(USARTF0_RXC_vect) {
    5be8:	1f 92       	push	r1
    5bea:	0f 92       	push	r0
    5bec:	0f b6       	in	r0, 0x3f	; 63
    5bee:	0f 92       	push	r0
    5bf0:	11 24       	eor	r1, r1
    5bf2:	0b b6       	in	r0, 0x3b	; 59
    5bf4:	0f 92       	push	r0
    5bf6:	8f 93       	push	r24
    5bf8:	9f 93       	push	r25
    5bfa:	ef 93       	push	r30
    5bfc:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_fc_wridx;
    5bfe:	80 91 65 2b 	lds	r24, 0x2B65	; 0x802b65 <rx_fc_wridx>
	rx_fc_buf[curSlot] = USARTF0.DATA;
    5c02:	e8 2f       	mov	r30, r24
    5c04:	f0 e0       	ldi	r31, 0x00	; 0
    5c06:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    5c0a:	e0 50       	subi	r30, 0x00	; 0
    5c0c:	f5 4d       	sbci	r31, 0xD5	; 213
    5c0e:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5c10:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_FC)
    5c12:	84 36       	cpi	r24, 0x64	; 100
    5c14:	08 f0       	brcs	.+2      	; 0x5c18 <__vector_119+0x30>
	nextSlot = 0;
    5c16:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_fc_rdidx)
    5c18:	90 91 64 2b 	lds	r25, 0x2B64	; 0x802b64 <rx_fc_rdidx>
    5c1c:	89 13       	cpse	r24, r25
	rx_fc_wridx = nextSlot;
    5c1e:	80 93 65 2b 	sts	0x2B65, r24	; 0x802b65 <rx_fc_wridx>
	
} /* ISR(USARTF0_RXC_vect) */
    5c22:	ff 91       	pop	r31
    5c24:	ef 91       	pop	r30
    5c26:	9f 91       	pop	r25
    5c28:	8f 91       	pop	r24
    5c2a:	0f 90       	pop	r0
    5c2c:	0b be       	out	0x3b, r0	; 59
    5c2e:	0f 90       	pop	r0
    5c30:	0f be       	out	0x3f, r0	; 63
    5c32:	0f 90       	pop	r0
    5c34:	1f 90       	pop	r1
    5c36:	18 95       	reti

00005c38 <__vector_120>:


ISR(USARTF0_DRE_vect) {
    5c38:	1f 92       	push	r1
    5c3a:	0f 92       	push	r0
    5c3c:	0f b6       	in	r0, 0x3f	; 63
    5c3e:	0f 92       	push	r0
    5c40:	11 24       	eor	r1, r1
    5c42:	0b b6       	in	r0, 0x3b	; 59
    5c44:	0f 92       	push	r0
    5c46:	2f 93       	push	r18
    5c48:	8f 93       	push	r24
    5c4a:	9f 93       	push	r25
    5c4c:	ef 93       	push	r30
    5c4e:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_fc_rdidx;
    5c50:	80 91 ca 2b 	lds	r24, 0x2BCA	; 0x802bca <tx_fc_rdidx>
	lastSlot = tx_fc_wridx;
    5c54:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <tx_fc_wridx>
	
	if(curSlot != lastSlot) {
    5c58:	89 13       	cpse	r24, r25
    5c5a:	05 c0       	rjmp	.+10     	; 0x5c66 <__vector_120+0x2e>
		nextSlot = curSlot + 1;
		if(nextSlot >= TXBUF_DEPTH_FC)
		nextSlot = 0;
	}
	if(nextSlot == lastSlot)
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5c5c:	80 e2       	ldi	r24, 0x20	; 32
    5c5e:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
ISR(USARTF0_DRE_vect) {
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_fc_rdidx;
	lastSlot = tx_fc_wridx;
    5c62:	89 2f       	mov	r24, r25
    5c64:	0d c0       	rjmp	.+26     	; 0x5c80 <__vector_120+0x48>
	
	if(curSlot != lastSlot) {
		USARTF0.DATA = tx_fc_buf[curSlot];
    5c66:	e8 2f       	mov	r30, r24
    5c68:	f0 e0       	ldi	r31, 0x00	; 0
    5c6a:	ea 59       	subi	r30, 0x9A	; 154
    5c6c:	f4 4d       	sbci	r31, 0xD4	; 212
    5c6e:	20 81       	ld	r18, Z
    5c70:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
		nextSlot = curSlot + 1;
    5c74:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_FC)
    5c76:	84 36       	cpi	r24, 0x64	; 100
    5c78:	08 f0       	brcs	.+2      	; 0x5c7c <__vector_120+0x44>
		nextSlot = 0;
    5c7a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5c7c:	89 17       	cp	r24, r25
    5c7e:	71 f3       	breq	.-36     	; 0x5c5c <__vector_120+0x24>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
	
	tx_fc_rdidx = nextSlot;
    5c80:	80 93 ca 2b 	sts	0x2BCA, r24	; 0x802bca <tx_fc_rdidx>
	
} /* ISR(USARTF0_DRE_vect) */
    5c84:	ff 91       	pop	r31
    5c86:	ef 91       	pop	r30
    5c88:	9f 91       	pop	r25
    5c8a:	8f 91       	pop	r24
    5c8c:	2f 91       	pop	r18
    5c8e:	0f 90       	pop	r0
    5c90:	0b be       	out	0x3b, r0	; 59
    5c92:	0f 90       	pop	r0
    5c94:	0f be       	out	0x3f, r0	; 63
    5c96:	0f 90       	pop	r0
    5c98:	1f 90       	pop	r1
    5c9a:	18 95       	reti

00005c9c <InitTimer>:
#include "md_ticktimer.h"


void InitTimer(void) {

	TCE0.CTRLA = TC_TC0_CLKSEL_DIV8_gc;
    5c9c:	e0 e0       	ldi	r30, 0x00	; 0
    5c9e:	fa e0       	ldi	r31, 0x0A	; 10
    5ca0:	84 e0       	ldi	r24, 0x04	; 4
    5ca2:	80 83       	st	Z, r24
	TCE0.CTRLB = 0x00; /* No input capture, normal mode */
    5ca4:	11 82       	std	Z+1, r1	; 0x01
	/* CTRLC is of no interest to us */
	TCE0.CTRLD = TC_TC1_EVACT_OFF_gc | TC_TC0_EVSEL_OFF_gc; /* No events */
    5ca6:	13 82       	std	Z+3, r1	; 0x03
	TCE0.CTRLE = 0x00; /* No byte mode */
    5ca8:	14 82       	std	Z+4, r1	; 0x04
	TCE0.PER = TICKTIMER_PERIOD;
    5caa:	8f ef       	ldi	r24, 0xFF	; 255
    5cac:	9f ef       	ldi	r25, 0xFF	; 255
    5cae:	86 a3       	std	Z+38, r24	; 0x26
    5cb0:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_TC0_ERRINTLVL_OFF_gc | TC_TC0_OVFINTLVL_OFF_gc; /* No interrupts (for now) */
    5cb2:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = 0x00; /* Disable Compare/Capture interrupts */
    5cb4:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    5cb6:	10 a2       	std	Z+32, r1	; 0x20
    5cb8:	11 a2       	std	Z+33, r1	; 0x21
    5cba:	08 95       	ret

00005cbc <GetTicks>:

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    5cbc:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    5cc0:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
} /* GetTicks */
    5cc4:	08 95       	ret

00005cc6 <BusyWaitTillAfter>:


timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
    5cc6:	9c 01       	movw	r18, r24
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
    5cc8:	66 0f       	add	r22, r22
    5cca:	77 1f       	adc	r23, r23
    5ccc:	66 0f       	add	r22, r22
    5cce:	77 1f       	adc	r23, r23
	TCE0.CNT = 0;

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    5cd0:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    5cd4:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
	
	do {
		now = GetTicks();
		if(now < then) // Fix wraparound
    5cd8:	82 17       	cp	r24, r18
    5cda:	93 07       	cpc	r25, r19
    5cdc:	08 f4       	brcc	.+2      	; 0x5ce0 <BusyWaitTillAfter+0x1a>
		now += TICKTIMER_PERIOD;
    5cde:	01 97       	sbiw	r24, 0x01	; 1
		delta = now - then;
    5ce0:	ac 01       	movw	r20, r24
    5ce2:	42 1b       	sub	r20, r18
    5ce4:	53 0b       	sbc	r21, r19
	} while(delta < tickWait);
    5ce6:	46 17       	cp	r20, r22
    5ce8:	57 07       	cpc	r21, r23
    5cea:	90 f3       	brcs	.-28     	; 0x5cd0 <BusyWaitTillAfter+0xa>
	
	return now;
	
} /* BusyWaitTillAfter */
    5cec:	08 95       	ret

00005cee <GetBusID>:

void FinishEEPROMOperations(void) {
	
	eeprom_busy_wait();
	
} /* FinishEEPROMOperations */
    5cee:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    5cf2:	80 73       	andi	r24, 0x30	; 48
    5cf4:	80 31       	cpi	r24, 0x10	; 16
    5cf6:	31 f0       	breq	.+12     	; 0x5d04 <GetBusID+0x16>
    5cf8:	80 32       	cpi	r24, 0x20	; 32
    5cfa:	31 f0       	breq	.+12     	; 0x5d08 <GetBusID+0x1a>
    5cfc:	88 23       	and	r24, r24
    5cfe:	31 f0       	breq	.+12     	; 0x5d0c <GetBusID+0x1e>
    5d00:	87 e0       	ldi	r24, 0x07	; 7
    5d02:	08 95       	ret
    5d04:	85 e0       	ldi	r24, 0x05	; 5
    5d06:	08 95       	ret
    5d08:	86 e0       	ldi	r24, 0x06	; 6
    5d0a:	08 95       	ret
    5d0c:	83 e0       	ldi	r24, 0x03	; 3
    5d0e:	08 95       	ret

00005d10 <PrintBoardType>:
    5d10:	bc 01       	movw	r22, r24
    5d12:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    5d16:	90 73       	andi	r25, 0x30	; 48
    5d18:	90 31       	cpi	r25, 0x10	; 16
    5d1a:	69 f0       	breq	.+26     	; 0x5d36 <PrintBoardType+0x26>
    5d1c:	28 f4       	brcc	.+10     	; 0x5d28 <PrintBoardType+0x18>
    5d1e:	91 11       	cpse	r25, r1
    5d20:	10 c0       	rjmp	.+32     	; 0x5d42 <PrintBoardType+0x32>
    5d22:	8b e5       	ldi	r24, 0x5B	; 91
    5d24:	97 e2       	ldi	r25, 0x27	; 39
    5d26:	0f c0       	rjmp	.+30     	; 0x5d46 <PrintBoardType+0x36>
    5d28:	90 32       	cpi	r25, 0x20	; 32
    5d2a:	41 f0       	breq	.+16     	; 0x5d3c <PrintBoardType+0x2c>
    5d2c:	90 33       	cpi	r25, 0x30	; 48
    5d2e:	49 f4       	brne	.+18     	; 0x5d42 <PrintBoardType+0x32>
    5d30:	82 e7       	ldi	r24, 0x72	; 114
    5d32:	97 e2       	ldi	r25, 0x27	; 39
    5d34:	08 c0       	rjmp	.+16     	; 0x5d46 <PrintBoardType+0x36>
    5d36:	8f e5       	ldi	r24, 0x5F	; 95
    5d38:	97 e2       	ldi	r25, 0x27	; 39
    5d3a:	05 c0       	rjmp	.+10     	; 0x5d46 <PrintBoardType+0x36>
    5d3c:	88 e6       	ldi	r24, 0x68	; 104
    5d3e:	97 e2       	ldi	r25, 0x27	; 39
    5d40:	02 c0       	rjmp	.+4      	; 0x5d46 <PrintBoardType+0x36>
    5d42:	82 e8       	ldi	r24, 0x82	; 130
    5d44:	97 e2       	ldi	r25, 0x27	; 39
    5d46:	0c 94 10 3b 	jmp	0x7620	; 0x7620 <fputs>

00005d4a <PrintProcessorID>:
    5d4a:	df 92       	push	r13
    5d4c:	ef 92       	push	r14
    5d4e:	ff 92       	push	r15
    5d50:	0f 93       	push	r16
    5d52:	1f 93       	push	r17
    5d54:	cf 93       	push	r28
    5d56:	df 93       	push	r29
    5d58:	18 2f       	mov	r17, r24
    5d5a:	09 2f       	mov	r16, r25
    5d5c:	30 91 93 00 	lds	r19, 0x0093	; 0x800093 <__TEXT_REGION_LENGTH__+0x700093>
    5d60:	20 91 92 00 	lds	r18, 0x0092	; 0x800092 <__TEXT_REGION_LENGTH__+0x700092>
    5d64:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    5d68:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    5d6c:	1f 92       	push	r1
    5d6e:	3f 93       	push	r19
    5d70:	1f 92       	push	r1
    5d72:	2f 93       	push	r18
    5d74:	1f 92       	push	r1
    5d76:	9f 93       	push	r25
    5d78:	1f 92       	push	r1
    5d7a:	8f 93       	push	r24
    5d7c:	8a e8       	ldi	r24, 0x8A	; 138
    5d7e:	97 e2       	ldi	r25, 0x27	; 39
    5d80:	9f 93       	push	r25
    5d82:	8f 93       	push	r24
    5d84:	0f 93       	push	r16
    5d86:	1f 93       	push	r17
    5d88:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    5d8c:	8d b7       	in	r24, 0x3d	; 61
    5d8e:	9e b7       	in	r25, 0x3e	; 62
    5d90:	0c 96       	adiw	r24, 0x0c	; 12
    5d92:	8d bf       	out	0x3d, r24	; 61
    5d94:	9e bf       	out	0x3e, r25	; 62
    5d96:	c7 e8       	ldi	r28, 0x87	; 135
    5d98:	de e2       	ldi	r29, 0x2E	; 46
    5d9a:	8d eb       	ldi	r24, 0xBD	; 189
    5d9c:	e8 2e       	mov	r14, r24
    5d9e:	81 e2       	ldi	r24, 0x21	; 33
    5da0:	f8 2e       	mov	r15, r24
    5da2:	dc 2e       	mov	r13, r28
    5da4:	9b e0       	ldi	r25, 0x0B	; 11
    5da6:	d9 0e       	add	r13, r25
    5da8:	89 91       	ld	r24, Y+
    5daa:	1f 92       	push	r1
    5dac:	8f 93       	push	r24
    5dae:	ff 92       	push	r15
    5db0:	ef 92       	push	r14
    5db2:	0f 93       	push	r16
    5db4:	1f 93       	push	r17
    5db6:	0e 94 c8 3a 	call	0x7590	; 0x7590 <fprintf>
    5dba:	0f 90       	pop	r0
    5dbc:	0f 90       	pop	r0
    5dbe:	0f 90       	pop	r0
    5dc0:	0f 90       	pop	r0
    5dc2:	0f 90       	pop	r0
    5dc4:	0f 90       	pop	r0
    5dc6:	dc 12       	cpse	r13, r28
    5dc8:	ef cf       	rjmp	.-34     	; 0x5da8 <PrintProcessorID+0x5e>
    5dca:	df 91       	pop	r29
    5dcc:	cf 91       	pop	r28
    5dce:	1f 91       	pop	r17
    5dd0:	0f 91       	pop	r16
    5dd2:	ff 90       	pop	r15
    5dd4:	ef 90       	pop	r14
    5dd6:	df 90       	pop	r13
    5dd8:	08 95       	ret

00005dda <TryReadEEPROM>:
    5dda:	ef 92       	push	r14
    5ddc:	ff 92       	push	r15
    5dde:	0f 93       	push	r16
    5de0:	1f 93       	push	r17
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
    5de6:	cd b7       	in	r28, 0x3d	; 61
    5de8:	de b7       	in	r29, 0x3e	; 62
    5dea:	28 97       	sbiw	r28, 0x08	; 8
    5dec:	cd bf       	out	0x3d, r28	; 61
    5dee:	de bf       	out	0x3e, r29	; 62
    5df0:	7c 01       	movw	r14, r24
    5df2:	8a 01       	movw	r16, r20
    5df4:	44 0f       	add	r20, r20
    5df6:	55 1f       	adc	r21, r21
    5df8:	ce 01       	movw	r24, r28
    5dfa:	01 96       	adiw	r24, 0x01	; 1
    5dfc:	0e 94 fe 3b 	call	0x77fc	; 0x77fc <eeprom_read_block>
    5e00:	80 e0       	ldi	r24, 0x00	; 0
    5e02:	90 e0       	ldi	r25, 0x00	; 0
    5e04:	29 2f       	mov	r18, r25
    5e06:	09 2e       	mov	r0, r25
    5e08:	00 0c       	add	r0, r0
    5e0a:	33 0b       	sbc	r19, r19
    5e0c:	20 17       	cp	r18, r16
    5e0e:	31 07       	cpc	r19, r17
    5e10:	b0 f4       	brcc	.+44     	; 0x5e3e <TryReadEEPROM+0x64>
    5e12:	81 11       	cpse	r24, r1
    5e14:	12 c0       	rjmp	.+36     	; 0x5e3a <TryReadEEPROM+0x60>
    5e16:	a1 e0       	ldi	r26, 0x01	; 1
    5e18:	b0 e0       	ldi	r27, 0x00	; 0
    5e1a:	ac 0f       	add	r26, r28
    5e1c:	bd 1f       	adc	r27, r29
    5e1e:	a2 0f       	add	r26, r18
    5e20:	b3 1f       	adc	r27, r19
    5e22:	fd 01       	movw	r30, r26
    5e24:	e0 0f       	add	r30, r16
    5e26:	f1 1f       	adc	r31, r17
    5e28:	40 81       	ld	r20, Z
    5e2a:	40 95       	com	r20
    5e2c:	81 e0       	ldi	r24, 0x01	; 1
    5e2e:	2c 91       	ld	r18, X
    5e30:	24 13       	cpse	r18, r20
    5e32:	01 c0       	rjmp	.+2      	; 0x5e36 <TryReadEEPROM+0x5c>
    5e34:	80 e0       	ldi	r24, 0x00	; 0
    5e36:	9f 5f       	subi	r25, 0xFF	; 255
    5e38:	e5 cf       	rjmp	.-54     	; 0x5e04 <TryReadEEPROM+0x2a>
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	17 c0       	rjmp	.+46     	; 0x5e6c <TryReadEEPROM+0x92>
    5e3e:	81 11       	cpse	r24, r1
    5e40:	15 c0       	rjmp	.+42     	; 0x5e6c <TryReadEEPROM+0x92>
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	29 2f       	mov	r18, r25
    5e46:	09 2e       	mov	r0, r25
    5e48:	00 0c       	add	r0, r0
    5e4a:	33 0b       	sbc	r19, r19
    5e4c:	20 17       	cp	r18, r16
    5e4e:	31 07       	cpc	r19, r17
    5e50:	68 f4       	brcc	.+26     	; 0x5e6c <TryReadEEPROM+0x92>
    5e52:	f7 01       	movw	r30, r14
    5e54:	e2 0f       	add	r30, r18
    5e56:	f3 1f       	adc	r31, r19
    5e58:	a1 e0       	ldi	r26, 0x01	; 1
    5e5a:	b0 e0       	ldi	r27, 0x00	; 0
    5e5c:	ac 0f       	add	r26, r28
    5e5e:	bd 1f       	adc	r27, r29
    5e60:	a2 0f       	add	r26, r18
    5e62:	b3 1f       	adc	r27, r19
    5e64:	2c 91       	ld	r18, X
    5e66:	20 83       	st	Z, r18
    5e68:	9f 5f       	subi	r25, 0xFF	; 255
    5e6a:	ec cf       	rjmp	.-40     	; 0x5e44 <TryReadEEPROM+0x6a>
    5e6c:	28 96       	adiw	r28, 0x08	; 8
    5e6e:	cd bf       	out	0x3d, r28	; 61
    5e70:	de bf       	out	0x3e, r29	; 62
    5e72:	df 91       	pop	r29
    5e74:	cf 91       	pop	r28
    5e76:	1f 91       	pop	r17
    5e78:	0f 91       	pop	r16
    5e7a:	ff 90       	pop	r15
    5e7c:	ef 90       	pop	r14
    5e7e:	08 95       	ret

00005e80 <UpdateEEPROM>:
    5e80:	0f 93       	push	r16
    5e82:	1f 93       	push	r17
    5e84:	cf 93       	push	r28
    5e86:	df 93       	push	r29
    5e88:	cd b7       	in	r28, 0x3d	; 61
    5e8a:	de b7       	in	r29, 0x3e	; 62
    5e8c:	28 97       	sbiw	r28, 0x08	; 8
    5e8e:	cd bf       	out	0x3d, r28	; 61
    5e90:	de bf       	out	0x3e, r29	; 62
    5e92:	8c 01       	movw	r16, r24
    5e94:	fb 01       	movw	r30, r22
    5e96:	70 e0       	ldi	r23, 0x00	; 0
    5e98:	27 2f       	mov	r18, r23
    5e9a:	07 2e       	mov	r0, r23
    5e9c:	00 0c       	add	r0, r0
    5e9e:	33 0b       	sbc	r19, r19
    5ea0:	24 17       	cp	r18, r20
    5ea2:	35 07       	cpc	r19, r21
    5ea4:	a0 f4       	brcc	.+40     	; 0x5ece <UpdateEEPROM+0x4e>
    5ea6:	c8 01       	movw	r24, r16
    5ea8:	82 0f       	add	r24, r18
    5eaa:	93 1f       	adc	r25, r19
    5eac:	dc 01       	movw	r26, r24
    5eae:	9c 91       	ld	r25, X
    5eb0:	a1 e0       	ldi	r26, 0x01	; 1
    5eb2:	b0 e0       	ldi	r27, 0x00	; 0
    5eb4:	ac 0f       	add	r26, r28
    5eb6:	bd 1f       	adc	r27, r29
    5eb8:	2a 0f       	add	r18, r26
    5eba:	3b 1f       	adc	r19, r27
    5ebc:	d9 01       	movw	r26, r18
    5ebe:	9c 93       	st	X, r25
    5ec0:	24 0f       	add	r18, r20
    5ec2:	35 1f       	adc	r19, r21
    5ec4:	90 95       	com	r25
    5ec6:	d9 01       	movw	r26, r18
    5ec8:	9c 93       	st	X, r25
    5eca:	7f 5f       	subi	r23, 0xFF	; 255
    5ecc:	e5 cf       	rjmp	.-54     	; 0x5e98 <UpdateEEPROM+0x18>
    5ece:	44 0f       	add	r20, r20
    5ed0:	55 1f       	adc	r21, r21
    5ed2:	bf 01       	movw	r22, r30
    5ed4:	ce 01       	movw	r24, r28
    5ed6:	01 96       	adiw	r24, 0x01	; 1
    5ed8:	0e 94 0a 3c 	call	0x7814	; 0x7814 <eeprom_update_block>
    5edc:	28 96       	adiw	r28, 0x08	; 8
    5ede:	cd bf       	out	0x3d, r28	; 61
    5ee0:	de bf       	out	0x3e, r29	; 62
    5ee2:	df 91       	pop	r29
    5ee4:	cf 91       	pop	r28
    5ee6:	1f 91       	pop	r17
    5ee8:	0f 91       	pop	r16
    5eea:	08 95       	ret

00005eec <ReadCalibrationByte>:


uint8_t ReadCalibrationByte(uint8_t index) {
	uint8_t result;
	
	NVM.CMD = NVM_CMD_READ_CALIB_ROW_gc;
    5eec:	a0 ec       	ldi	r26, 0xC0	; 192
    5eee:	b1 e0       	ldi	r27, 0x01	; 1
    5ef0:	92 e0       	ldi	r25, 0x02	; 2
    5ef2:	1a 96       	adiw	r26, 0x0a	; 10
    5ef4:	9c 93       	st	X, r25
    5ef6:	1a 97       	sbiw	r26, 0x0a	; 10
	result = pgm_read_byte(index);
    5ef8:	e8 2f       	mov	r30, r24
    5efa:	f0 e0       	ldi	r31, 0x00	; 0
    5efc:	84 91       	lpm	r24, Z
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    5efe:	1a 96       	adiw	r26, 0x0a	; 10
    5f00:	1c 92       	st	X, r1
	
	return result;
} /* ReadCalibrationByte */
    5f02:	08 95       	ret

00005f04 <InitUtil>:

#define PROCID_LEN 11

static uint8_t sProcID[PROCID_LEN];

void InitUtil(void) {
    5f04:	cf 93       	push	r28
    5f06:	df 93       	push	r29

	PORTD.DIRCLR = BOARDID_BIT1 | BOARDID_BIT0;
    5f08:	e0 e6       	ldi	r30, 0x60	; 96
    5f0a:	f6 e0       	ldi	r31, 0x06	; 6
    5f0c:	80 e3       	ldi	r24, 0x30	; 48
    5f0e:	82 83       	std	Z+2, r24	; 0x02

	PORTD.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    5f10:	80 e1       	ldi	r24, 0x10	; 16
    5f12:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    5f14:	85 8b       	std	Z+21, r24	; 0x15

	/* Read and save processor serial #. Source: http://www.avrfreaks.net/forum/tutc-introduction-offsetof-reading-xmega-sn */
	(void) ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ); 
    5f16:	88 e0       	ldi	r24, 0x08	; 8
    5f18:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
	/* First read after reset or possibly Power Up returns zero, so read then toss this value */ 

	sProcID[0] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ) ;
    5f1c:	88 e0       	ldi	r24, 0x08	; 8
    5f1e:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f22:	c7 e8       	ldi	r28, 0x87	; 135
    5f24:	de e2       	ldi	r29, 0x2E	; 46
    5f26:	88 83       	st	Y, r24
	sProcID[1] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM1 ) ) ;
    5f28:	89 e0       	ldi	r24, 0x09	; 9
    5f2a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f2e:	89 83       	std	Y+1, r24	; 0x01
	sProcID[2] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM2 ) ) ;
    5f30:	8a e0       	ldi	r24, 0x0A	; 10
    5f32:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f36:	8a 83       	std	Y+2, r24	; 0x02
	sProcID[3] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM3 ) ) ;
    5f38:	8b e0       	ldi	r24, 0x0B	; 11
    5f3a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f3e:	8b 83       	std	Y+3, r24	; 0x03
	sProcID[4] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM4 ) ) ;
    5f40:	8c e0       	ldi	r24, 0x0C	; 12
    5f42:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f46:	8c 83       	std	Y+4, r24	; 0x04
	sProcID[5] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM5 ) ) ;
    5f48:	8d e0       	ldi	r24, 0x0D	; 13
    5f4a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f4e:	8d 83       	std	Y+5, r24	; 0x05
	sProcID[6] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, WAFNUM ) ); 
    5f50:	80 e1       	ldi	r24, 0x10	; 16
    5f52:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f56:	8e 83       	std	Y+6, r24	; 0x06
	sProcID[7] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX0 ) ); 
    5f58:	82 e1       	ldi	r24, 0x12	; 18
    5f5a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f5e:	8f 83       	std	Y+7, r24	; 0x07
	sProcID[8] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX1 ) ); 
    5f60:	83 e1       	ldi	r24, 0x13	; 19
    5f62:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f66:	88 87       	std	Y+8, r24	; 0x08
	sProcID[9] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY0 ) ); 
    5f68:	84 e1       	ldi	r24, 0x14	; 20
    5f6a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f6e:	89 87       	std	Y+9, r24	; 0x09
	sProcID[10] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY1 ) );	
    5f70:	85 e1       	ldi	r24, 0x15	; 21
    5f72:	0e 94 76 2f 	call	0x5eec	; 0x5eec <ReadCalibrationByte>
    5f76:	8a 87       	std	Y+10, r24	; 0x0a

} /* InitUtil */
    5f78:	df 91       	pop	r29
    5f7a:	cf 91       	pop	r28
    5f7c:	08 95       	ret

00005f7e <__subsf3>:
    5f7e:	50 58       	subi	r21, 0x80	; 128

00005f80 <__addsf3>:
    5f80:	bb 27       	eor	r27, r27
    5f82:	aa 27       	eor	r26, r26
    5f84:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <__addsf3x>
    5f88:	0c 94 a5 31 	jmp	0x634a	; 0x634a <__fp_round>
    5f8c:	0e 94 97 31 	call	0x632e	; 0x632e <__fp_pscA>
    5f90:	38 f0       	brcs	.+14     	; 0x5fa0 <__addsf3+0x20>
    5f92:	0e 94 9e 31 	call	0x633c	; 0x633c <__fp_pscB>
    5f96:	20 f0       	brcs	.+8      	; 0x5fa0 <__addsf3+0x20>
    5f98:	39 f4       	brne	.+14     	; 0x5fa8 <__addsf3+0x28>
    5f9a:	9f 3f       	cpi	r25, 0xFF	; 255
    5f9c:	19 f4       	brne	.+6      	; 0x5fa4 <__addsf3+0x24>
    5f9e:	26 f4       	brtc	.+8      	; 0x5fa8 <__addsf3+0x28>
    5fa0:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__fp_nan>
    5fa4:	0e f4       	brtc	.+2      	; 0x5fa8 <__addsf3+0x28>
    5fa6:	e0 95       	com	r30
    5fa8:	e7 fb       	bst	r30, 7
    5faa:	0c 94 7e 31 	jmp	0x62fc	; 0x62fc <__fp_inf>

00005fae <__addsf3x>:
    5fae:	e9 2f       	mov	r30, r25
    5fb0:	0e 94 b6 31 	call	0x636c	; 0x636c <__fp_split3>
    5fb4:	58 f3       	brcs	.-42     	; 0x5f8c <__addsf3+0xc>
    5fb6:	ba 17       	cp	r27, r26
    5fb8:	62 07       	cpc	r22, r18
    5fba:	73 07       	cpc	r23, r19
    5fbc:	84 07       	cpc	r24, r20
    5fbe:	95 07       	cpc	r25, r21
    5fc0:	20 f0       	brcs	.+8      	; 0x5fca <__addsf3x+0x1c>
    5fc2:	79 f4       	brne	.+30     	; 0x5fe2 <__addsf3x+0x34>
    5fc4:	a6 f5       	brtc	.+104    	; 0x602e <__stack+0x2f>
    5fc6:	0c 94 d8 31 	jmp	0x63b0	; 0x63b0 <__fp_zero>
    5fca:	0e f4       	brtc	.+2      	; 0x5fce <__addsf3x+0x20>
    5fcc:	e0 95       	com	r30
    5fce:	0b 2e       	mov	r0, r27
    5fd0:	ba 2f       	mov	r27, r26
    5fd2:	a0 2d       	mov	r26, r0
    5fd4:	0b 01       	movw	r0, r22
    5fd6:	b9 01       	movw	r22, r18
    5fd8:	90 01       	movw	r18, r0
    5fda:	0c 01       	movw	r0, r24
    5fdc:	ca 01       	movw	r24, r20
    5fde:	a0 01       	movw	r20, r0
    5fe0:	11 24       	eor	r1, r1
    5fe2:	ff 27       	eor	r31, r31
    5fe4:	59 1b       	sub	r21, r25
    5fe6:	99 f0       	breq	.+38     	; 0x600e <__stack+0xf>
    5fe8:	59 3f       	cpi	r21, 0xF9	; 249
    5fea:	50 f4       	brcc	.+20     	; 0x6000 <__stack+0x1>
    5fec:	50 3e       	cpi	r21, 0xE0	; 224
    5fee:	68 f1       	brcs	.+90     	; 0x604a <__stack+0x4b>
    5ff0:	1a 16       	cp	r1, r26
    5ff2:	f0 40       	sbci	r31, 0x00	; 0
    5ff4:	a2 2f       	mov	r26, r18
    5ff6:	23 2f       	mov	r18, r19
    5ff8:	34 2f       	mov	r19, r20
    5ffa:	44 27       	eor	r20, r20
    5ffc:	58 5f       	subi	r21, 0xF8	; 248
    5ffe:	f3 cf       	rjmp	.-26     	; 0x5fe6 <__addsf3x+0x38>
    6000:	46 95       	lsr	r20
    6002:	37 95       	ror	r19
    6004:	27 95       	ror	r18
    6006:	a7 95       	ror	r26
    6008:	f0 40       	sbci	r31, 0x00	; 0
    600a:	53 95       	inc	r21
    600c:	c9 f7       	brne	.-14     	; 0x6000 <__stack+0x1>
    600e:	7e f4       	brtc	.+30     	; 0x602e <__stack+0x2f>
    6010:	1f 16       	cp	r1, r31
    6012:	ba 0b       	sbc	r27, r26
    6014:	62 0b       	sbc	r22, r18
    6016:	73 0b       	sbc	r23, r19
    6018:	84 0b       	sbc	r24, r20
    601a:	ba f0       	brmi	.+46     	; 0x604a <__stack+0x4b>
    601c:	91 50       	subi	r25, 0x01	; 1
    601e:	a1 f0       	breq	.+40     	; 0x6048 <__stack+0x49>
    6020:	ff 0f       	add	r31, r31
    6022:	bb 1f       	adc	r27, r27
    6024:	66 1f       	adc	r22, r22
    6026:	77 1f       	adc	r23, r23
    6028:	88 1f       	adc	r24, r24
    602a:	c2 f7       	brpl	.-16     	; 0x601c <__stack+0x1d>
    602c:	0e c0       	rjmp	.+28     	; 0x604a <__stack+0x4b>
    602e:	ba 0f       	add	r27, r26
    6030:	62 1f       	adc	r22, r18
    6032:	73 1f       	adc	r23, r19
    6034:	84 1f       	adc	r24, r20
    6036:	48 f4       	brcc	.+18     	; 0x604a <__stack+0x4b>
    6038:	87 95       	ror	r24
    603a:	77 95       	ror	r23
    603c:	67 95       	ror	r22
    603e:	b7 95       	ror	r27
    6040:	f7 95       	ror	r31
    6042:	9e 3f       	cpi	r25, 0xFE	; 254
    6044:	08 f0       	brcs	.+2      	; 0x6048 <__stack+0x49>
    6046:	b0 cf       	rjmp	.-160    	; 0x5fa8 <__addsf3+0x28>
    6048:	93 95       	inc	r25
    604a:	88 0f       	add	r24, r24
    604c:	08 f0       	brcs	.+2      	; 0x6050 <__stack+0x51>
    604e:	99 27       	eor	r25, r25
    6050:	ee 0f       	add	r30, r30
    6052:	97 95       	ror	r25
    6054:	87 95       	ror	r24
    6056:	08 95       	ret

00006058 <__cmpsf2>:
    6058:	0e 94 5a 31 	call	0x62b4	; 0x62b4 <__fp_cmp>
    605c:	08 f4       	brcc	.+2      	; 0x6060 <__cmpsf2+0x8>
    605e:	81 e0       	ldi	r24, 0x01	; 1
    6060:	08 95       	ret

00006062 <__divsf3>:
    6062:	0e 94 45 30 	call	0x608a	; 0x608a <__divsf3x>
    6066:	0c 94 a5 31 	jmp	0x634a	; 0x634a <__fp_round>
    606a:	0e 94 9e 31 	call	0x633c	; 0x633c <__fp_pscB>
    606e:	58 f0       	brcs	.+22     	; 0x6086 <__divsf3+0x24>
    6070:	0e 94 97 31 	call	0x632e	; 0x632e <__fp_pscA>
    6074:	40 f0       	brcs	.+16     	; 0x6086 <__divsf3+0x24>
    6076:	29 f4       	brne	.+10     	; 0x6082 <__divsf3+0x20>
    6078:	5f 3f       	cpi	r21, 0xFF	; 255
    607a:	29 f0       	breq	.+10     	; 0x6086 <__divsf3+0x24>
    607c:	0c 94 7e 31 	jmp	0x62fc	; 0x62fc <__fp_inf>
    6080:	51 11       	cpse	r21, r1
    6082:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__fp_szero>
    6086:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__fp_nan>

0000608a <__divsf3x>:
    608a:	0e 94 b6 31 	call	0x636c	; 0x636c <__fp_split3>
    608e:	68 f3       	brcs	.-38     	; 0x606a <__divsf3+0x8>

00006090 <__divsf3_pse>:
    6090:	99 23       	and	r25, r25
    6092:	b1 f3       	breq	.-20     	; 0x6080 <__divsf3+0x1e>
    6094:	55 23       	and	r21, r21
    6096:	91 f3       	breq	.-28     	; 0x607c <__divsf3+0x1a>
    6098:	95 1b       	sub	r25, r21
    609a:	55 0b       	sbc	r21, r21
    609c:	bb 27       	eor	r27, r27
    609e:	aa 27       	eor	r26, r26
    60a0:	62 17       	cp	r22, r18
    60a2:	73 07       	cpc	r23, r19
    60a4:	84 07       	cpc	r24, r20
    60a6:	38 f0       	brcs	.+14     	; 0x60b6 <__divsf3_pse+0x26>
    60a8:	9f 5f       	subi	r25, 0xFF	; 255
    60aa:	5f 4f       	sbci	r21, 0xFF	; 255
    60ac:	22 0f       	add	r18, r18
    60ae:	33 1f       	adc	r19, r19
    60b0:	44 1f       	adc	r20, r20
    60b2:	aa 1f       	adc	r26, r26
    60b4:	a9 f3       	breq	.-22     	; 0x60a0 <__divsf3_pse+0x10>
    60b6:	35 d0       	rcall	.+106    	; 0x6122 <__divsf3_pse+0x92>
    60b8:	0e 2e       	mov	r0, r30
    60ba:	3a f0       	brmi	.+14     	; 0x60ca <__divsf3_pse+0x3a>
    60bc:	e0 e8       	ldi	r30, 0x80	; 128
    60be:	32 d0       	rcall	.+100    	; 0x6124 <__divsf3_pse+0x94>
    60c0:	91 50       	subi	r25, 0x01	; 1
    60c2:	50 40       	sbci	r21, 0x00	; 0
    60c4:	e6 95       	lsr	r30
    60c6:	00 1c       	adc	r0, r0
    60c8:	ca f7       	brpl	.-14     	; 0x60bc <__divsf3_pse+0x2c>
    60ca:	2b d0       	rcall	.+86     	; 0x6122 <__divsf3_pse+0x92>
    60cc:	fe 2f       	mov	r31, r30
    60ce:	29 d0       	rcall	.+82     	; 0x6122 <__divsf3_pse+0x92>
    60d0:	66 0f       	add	r22, r22
    60d2:	77 1f       	adc	r23, r23
    60d4:	88 1f       	adc	r24, r24
    60d6:	bb 1f       	adc	r27, r27
    60d8:	26 17       	cp	r18, r22
    60da:	37 07       	cpc	r19, r23
    60dc:	48 07       	cpc	r20, r24
    60de:	ab 07       	cpc	r26, r27
    60e0:	b0 e8       	ldi	r27, 0x80	; 128
    60e2:	09 f0       	breq	.+2      	; 0x60e6 <__divsf3_pse+0x56>
    60e4:	bb 0b       	sbc	r27, r27
    60e6:	80 2d       	mov	r24, r0
    60e8:	bf 01       	movw	r22, r30
    60ea:	ff 27       	eor	r31, r31
    60ec:	93 58       	subi	r25, 0x83	; 131
    60ee:	5f 4f       	sbci	r21, 0xFF	; 255
    60f0:	3a f0       	brmi	.+14     	; 0x6100 <__divsf3_pse+0x70>
    60f2:	9e 3f       	cpi	r25, 0xFE	; 254
    60f4:	51 05       	cpc	r21, r1
    60f6:	78 f0       	brcs	.+30     	; 0x6116 <__divsf3_pse+0x86>
    60f8:	0c 94 7e 31 	jmp	0x62fc	; 0x62fc <__fp_inf>
    60fc:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__fp_szero>
    6100:	5f 3f       	cpi	r21, 0xFF	; 255
    6102:	e4 f3       	brlt	.-8      	; 0x60fc <__divsf3_pse+0x6c>
    6104:	98 3e       	cpi	r25, 0xE8	; 232
    6106:	d4 f3       	brlt	.-12     	; 0x60fc <__divsf3_pse+0x6c>
    6108:	86 95       	lsr	r24
    610a:	77 95       	ror	r23
    610c:	67 95       	ror	r22
    610e:	b7 95       	ror	r27
    6110:	f7 95       	ror	r31
    6112:	9f 5f       	subi	r25, 0xFF	; 255
    6114:	c9 f7       	brne	.-14     	; 0x6108 <__divsf3_pse+0x78>
    6116:	88 0f       	add	r24, r24
    6118:	91 1d       	adc	r25, r1
    611a:	96 95       	lsr	r25
    611c:	87 95       	ror	r24
    611e:	97 f9       	bld	r25, 7
    6120:	08 95       	ret
    6122:	e1 e0       	ldi	r30, 0x01	; 1
    6124:	66 0f       	add	r22, r22
    6126:	77 1f       	adc	r23, r23
    6128:	88 1f       	adc	r24, r24
    612a:	bb 1f       	adc	r27, r27
    612c:	62 17       	cp	r22, r18
    612e:	73 07       	cpc	r23, r19
    6130:	84 07       	cpc	r24, r20
    6132:	ba 07       	cpc	r27, r26
    6134:	20 f0       	brcs	.+8      	; 0x613e <__divsf3_pse+0xae>
    6136:	62 1b       	sub	r22, r18
    6138:	73 0b       	sbc	r23, r19
    613a:	84 0b       	sbc	r24, r20
    613c:	ba 0b       	sbc	r27, r26
    613e:	ee 1f       	adc	r30, r30
    6140:	88 f7       	brcc	.-30     	; 0x6124 <__divsf3_pse+0x94>
    6142:	e0 95       	com	r30
    6144:	08 95       	ret

00006146 <__fixsfsi>:
    6146:	0e 94 aa 30 	call	0x6154	; 0x6154 <__fixunssfsi>
    614a:	68 94       	set
    614c:	b1 11       	cpse	r27, r1
    614e:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__fp_szero>
    6152:	08 95       	ret

00006154 <__fixunssfsi>:
    6154:	0e 94 be 31 	call	0x637c	; 0x637c <__fp_splitA>
    6158:	88 f0       	brcs	.+34     	; 0x617c <__fixunssfsi+0x28>
    615a:	9f 57       	subi	r25, 0x7F	; 127
    615c:	98 f0       	brcs	.+38     	; 0x6184 <__fixunssfsi+0x30>
    615e:	b9 2f       	mov	r27, r25
    6160:	99 27       	eor	r25, r25
    6162:	b7 51       	subi	r27, 0x17	; 23
    6164:	b0 f0       	brcs	.+44     	; 0x6192 <__fixunssfsi+0x3e>
    6166:	e1 f0       	breq	.+56     	; 0x61a0 <__fixunssfsi+0x4c>
    6168:	66 0f       	add	r22, r22
    616a:	77 1f       	adc	r23, r23
    616c:	88 1f       	adc	r24, r24
    616e:	99 1f       	adc	r25, r25
    6170:	1a f0       	brmi	.+6      	; 0x6178 <__fixunssfsi+0x24>
    6172:	ba 95       	dec	r27
    6174:	c9 f7       	brne	.-14     	; 0x6168 <__fixunssfsi+0x14>
    6176:	14 c0       	rjmp	.+40     	; 0x61a0 <__fixunssfsi+0x4c>
    6178:	b1 30       	cpi	r27, 0x01	; 1
    617a:	91 f0       	breq	.+36     	; 0x61a0 <__fixunssfsi+0x4c>
    617c:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <__fp_zero>
    6180:	b1 e0       	ldi	r27, 0x01	; 1
    6182:	08 95       	ret
    6184:	0c 94 d8 31 	jmp	0x63b0	; 0x63b0 <__fp_zero>
    6188:	67 2f       	mov	r22, r23
    618a:	78 2f       	mov	r23, r24
    618c:	88 27       	eor	r24, r24
    618e:	b8 5f       	subi	r27, 0xF8	; 248
    6190:	39 f0       	breq	.+14     	; 0x61a0 <__fixunssfsi+0x4c>
    6192:	b9 3f       	cpi	r27, 0xF9	; 249
    6194:	cc f3       	brlt	.-14     	; 0x6188 <__fixunssfsi+0x34>
    6196:	86 95       	lsr	r24
    6198:	77 95       	ror	r23
    619a:	67 95       	ror	r22
    619c:	b3 95       	inc	r27
    619e:	d9 f7       	brne	.-10     	; 0x6196 <__fixunssfsi+0x42>
    61a0:	3e f4       	brtc	.+14     	; 0x61b0 <__fixunssfsi+0x5c>
    61a2:	90 95       	com	r25
    61a4:	80 95       	com	r24
    61a6:	70 95       	com	r23
    61a8:	61 95       	neg	r22
    61aa:	7f 4f       	sbci	r23, 0xFF	; 255
    61ac:	8f 4f       	sbci	r24, 0xFF	; 255
    61ae:	9f 4f       	sbci	r25, 0xFF	; 255
    61b0:	08 95       	ret

000061b2 <__floatdisf>:
    61b2:	97 fb       	bst	r25, 7
    61b4:	16 f4       	brtc	.+4      	; 0x61ba <__floatdisf+0x8>
    61b6:	0e 94 87 31 	call	0x630e	; 0x630e <__fp_negdi>
    61ba:	0c 94 1d 31 	jmp	0x623a	; 0x623a <__fp_di2sf>

000061be <__floatunsisf>:
    61be:	e8 94       	clt
    61c0:	09 c0       	rjmp	.+18     	; 0x61d4 <__floatsisf+0x12>

000061c2 <__floatsisf>:
    61c2:	97 fb       	bst	r25, 7
    61c4:	3e f4       	brtc	.+14     	; 0x61d4 <__floatsisf+0x12>
    61c6:	90 95       	com	r25
    61c8:	80 95       	com	r24
    61ca:	70 95       	com	r23
    61cc:	61 95       	neg	r22
    61ce:	7f 4f       	sbci	r23, 0xFF	; 255
    61d0:	8f 4f       	sbci	r24, 0xFF	; 255
    61d2:	9f 4f       	sbci	r25, 0xFF	; 255
    61d4:	99 23       	and	r25, r25
    61d6:	a9 f0       	breq	.+42     	; 0x6202 <__floatsisf+0x40>
    61d8:	f9 2f       	mov	r31, r25
    61da:	96 e9       	ldi	r25, 0x96	; 150
    61dc:	bb 27       	eor	r27, r27
    61de:	93 95       	inc	r25
    61e0:	f6 95       	lsr	r31
    61e2:	87 95       	ror	r24
    61e4:	77 95       	ror	r23
    61e6:	67 95       	ror	r22
    61e8:	b7 95       	ror	r27
    61ea:	f1 11       	cpse	r31, r1
    61ec:	f8 cf       	rjmp	.-16     	; 0x61de <__floatsisf+0x1c>
    61ee:	fa f4       	brpl	.+62     	; 0x622e <__floatsisf+0x6c>
    61f0:	bb 0f       	add	r27, r27
    61f2:	11 f4       	brne	.+4      	; 0x61f8 <__floatsisf+0x36>
    61f4:	60 ff       	sbrs	r22, 0
    61f6:	1b c0       	rjmp	.+54     	; 0x622e <__floatsisf+0x6c>
    61f8:	6f 5f       	subi	r22, 0xFF	; 255
    61fa:	7f 4f       	sbci	r23, 0xFF	; 255
    61fc:	8f 4f       	sbci	r24, 0xFF	; 255
    61fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6200:	16 c0       	rjmp	.+44     	; 0x622e <__floatsisf+0x6c>
    6202:	88 23       	and	r24, r24
    6204:	11 f0       	breq	.+4      	; 0x620a <__floatsisf+0x48>
    6206:	96 e9       	ldi	r25, 0x96	; 150
    6208:	11 c0       	rjmp	.+34     	; 0x622c <__floatsisf+0x6a>
    620a:	77 23       	and	r23, r23
    620c:	21 f0       	breq	.+8      	; 0x6216 <__floatsisf+0x54>
    620e:	9e e8       	ldi	r25, 0x8E	; 142
    6210:	87 2f       	mov	r24, r23
    6212:	76 2f       	mov	r23, r22
    6214:	05 c0       	rjmp	.+10     	; 0x6220 <__floatsisf+0x5e>
    6216:	66 23       	and	r22, r22
    6218:	71 f0       	breq	.+28     	; 0x6236 <__floatsisf+0x74>
    621a:	96 e8       	ldi	r25, 0x86	; 134
    621c:	86 2f       	mov	r24, r22
    621e:	70 e0       	ldi	r23, 0x00	; 0
    6220:	60 e0       	ldi	r22, 0x00	; 0
    6222:	2a f0       	brmi	.+10     	; 0x622e <__floatsisf+0x6c>
    6224:	9a 95       	dec	r25
    6226:	66 0f       	add	r22, r22
    6228:	77 1f       	adc	r23, r23
    622a:	88 1f       	adc	r24, r24
    622c:	da f7       	brpl	.-10     	; 0x6224 <__floatsisf+0x62>
    622e:	88 0f       	add	r24, r24
    6230:	96 95       	lsr	r25
    6232:	87 95       	ror	r24
    6234:	97 f9       	bld	r25, 7
    6236:	08 95       	ret

00006238 <__floatundisf>:
    6238:	e8 94       	clt

0000623a <__fp_di2sf>:
    623a:	f9 2f       	mov	r31, r25
    623c:	96 eb       	ldi	r25, 0xB6	; 182
    623e:	ff 23       	and	r31, r31
    6240:	81 f0       	breq	.+32     	; 0x6262 <__fp_di2sf+0x28>
    6242:	12 16       	cp	r1, r18
    6244:	13 06       	cpc	r1, r19
    6246:	14 06       	cpc	r1, r20
    6248:	44 0b       	sbc	r20, r20
    624a:	93 95       	inc	r25
    624c:	f6 95       	lsr	r31
    624e:	87 95       	ror	r24
    6250:	77 95       	ror	r23
    6252:	67 95       	ror	r22
    6254:	57 95       	ror	r21
    6256:	40 40       	sbci	r20, 0x00	; 0
    6258:	ff 23       	and	r31, r31
    625a:	b9 f7       	brne	.-18     	; 0x624a <__fp_di2sf+0x10>
    625c:	1b c0       	rjmp	.+54     	; 0x6294 <__fp_di2sf+0x5a>
    625e:	99 27       	eor	r25, r25
    6260:	08 95       	ret
    6262:	88 23       	and	r24, r24
    6264:	51 f4       	brne	.+20     	; 0x627a <__fp_di2sf+0x40>
    6266:	98 50       	subi	r25, 0x08	; 8
    6268:	d2 f7       	brpl	.-12     	; 0x625e <__fp_di2sf+0x24>
    626a:	87 2b       	or	r24, r23
    626c:	76 2f       	mov	r23, r22
    626e:	65 2f       	mov	r22, r21
    6270:	54 2f       	mov	r21, r20
    6272:	43 2f       	mov	r20, r19
    6274:	32 2f       	mov	r19, r18
    6276:	20 e0       	ldi	r18, 0x00	; 0
    6278:	b1 f3       	breq	.-20     	; 0x6266 <__fp_di2sf+0x2c>
    627a:	12 16       	cp	r1, r18
    627c:	13 06       	cpc	r1, r19
    627e:	14 06       	cpc	r1, r20
    6280:	44 0b       	sbc	r20, r20
    6282:	88 23       	and	r24, r24
    6284:	3a f0       	brmi	.+14     	; 0x6294 <__fp_di2sf+0x5a>
    6286:	9a 95       	dec	r25
    6288:	44 0f       	add	r20, r20
    628a:	55 1f       	adc	r21, r21
    628c:	66 1f       	adc	r22, r22
    628e:	77 1f       	adc	r23, r23
    6290:	88 1f       	adc	r24, r24
    6292:	ca f7       	brpl	.-14     	; 0x6286 <__fp_di2sf+0x4c>
    6294:	55 23       	and	r21, r21
    6296:	4a f4       	brpl	.+18     	; 0x62aa <__fp_di2sf+0x70>
    6298:	44 0f       	add	r20, r20
    629a:	55 1f       	adc	r21, r21
    629c:	11 f4       	brne	.+4      	; 0x62a2 <__fp_di2sf+0x68>
    629e:	60 ff       	sbrs	r22, 0
    62a0:	04 c0       	rjmp	.+8      	; 0x62aa <__fp_di2sf+0x70>
    62a2:	6f 5f       	subi	r22, 0xFF	; 255
    62a4:	7f 4f       	sbci	r23, 0xFF	; 255
    62a6:	8f 4f       	sbci	r24, 0xFF	; 255
    62a8:	9f 4f       	sbci	r25, 0xFF	; 255
    62aa:	88 0f       	add	r24, r24
    62ac:	96 95       	lsr	r25
    62ae:	87 95       	ror	r24
    62b0:	97 f9       	bld	r25, 7
    62b2:	08 95       	ret

000062b4 <__fp_cmp>:
    62b4:	99 0f       	add	r25, r25
    62b6:	00 08       	sbc	r0, r0
    62b8:	55 0f       	add	r21, r21
    62ba:	aa 0b       	sbc	r26, r26
    62bc:	e0 e8       	ldi	r30, 0x80	; 128
    62be:	fe ef       	ldi	r31, 0xFE	; 254
    62c0:	16 16       	cp	r1, r22
    62c2:	17 06       	cpc	r1, r23
    62c4:	e8 07       	cpc	r30, r24
    62c6:	f9 07       	cpc	r31, r25
    62c8:	c0 f0       	brcs	.+48     	; 0x62fa <__fp_cmp+0x46>
    62ca:	12 16       	cp	r1, r18
    62cc:	13 06       	cpc	r1, r19
    62ce:	e4 07       	cpc	r30, r20
    62d0:	f5 07       	cpc	r31, r21
    62d2:	98 f0       	brcs	.+38     	; 0x62fa <__fp_cmp+0x46>
    62d4:	62 1b       	sub	r22, r18
    62d6:	73 0b       	sbc	r23, r19
    62d8:	84 0b       	sbc	r24, r20
    62da:	95 0b       	sbc	r25, r21
    62dc:	39 f4       	brne	.+14     	; 0x62ec <__fp_cmp+0x38>
    62de:	0a 26       	eor	r0, r26
    62e0:	61 f0       	breq	.+24     	; 0x62fa <__fp_cmp+0x46>
    62e2:	23 2b       	or	r18, r19
    62e4:	24 2b       	or	r18, r20
    62e6:	25 2b       	or	r18, r21
    62e8:	21 f4       	brne	.+8      	; 0x62f2 <__fp_cmp+0x3e>
    62ea:	08 95       	ret
    62ec:	0a 26       	eor	r0, r26
    62ee:	09 f4       	brne	.+2      	; 0x62f2 <__fp_cmp+0x3e>
    62f0:	a1 40       	sbci	r26, 0x01	; 1
    62f2:	a6 95       	lsr	r26
    62f4:	8f ef       	ldi	r24, 0xFF	; 255
    62f6:	81 1d       	adc	r24, r1
    62f8:	81 1d       	adc	r24, r1
    62fa:	08 95       	ret

000062fc <__fp_inf>:
    62fc:	97 f9       	bld	r25, 7
    62fe:	9f 67       	ori	r25, 0x7F	; 127
    6300:	80 e8       	ldi	r24, 0x80	; 128
    6302:	70 e0       	ldi	r23, 0x00	; 0
    6304:	60 e0       	ldi	r22, 0x00	; 0
    6306:	08 95       	ret

00006308 <__fp_nan>:
    6308:	9f ef       	ldi	r25, 0xFF	; 255
    630a:	80 ec       	ldi	r24, 0xC0	; 192
    630c:	08 95       	ret

0000630e <__fp_negdi>:
    630e:	90 95       	com	r25
    6310:	80 95       	com	r24
    6312:	70 95       	com	r23
    6314:	60 95       	com	r22
    6316:	50 95       	com	r21
    6318:	40 95       	com	r20
    631a:	30 95       	com	r19
    631c:	21 95       	neg	r18
    631e:	3f 4f       	sbci	r19, 0xFF	; 255
    6320:	4f 4f       	sbci	r20, 0xFF	; 255
    6322:	5f 4f       	sbci	r21, 0xFF	; 255
    6324:	6f 4f       	sbci	r22, 0xFF	; 255
    6326:	7f 4f       	sbci	r23, 0xFF	; 255
    6328:	8f 4f       	sbci	r24, 0xFF	; 255
    632a:	9f 4f       	sbci	r25, 0xFF	; 255
    632c:	08 95       	ret

0000632e <__fp_pscA>:
    632e:	00 24       	eor	r0, r0
    6330:	0a 94       	dec	r0
    6332:	16 16       	cp	r1, r22
    6334:	17 06       	cpc	r1, r23
    6336:	18 06       	cpc	r1, r24
    6338:	09 06       	cpc	r0, r25
    633a:	08 95       	ret

0000633c <__fp_pscB>:
    633c:	00 24       	eor	r0, r0
    633e:	0a 94       	dec	r0
    6340:	12 16       	cp	r1, r18
    6342:	13 06       	cpc	r1, r19
    6344:	14 06       	cpc	r1, r20
    6346:	05 06       	cpc	r0, r21
    6348:	08 95       	ret

0000634a <__fp_round>:
    634a:	09 2e       	mov	r0, r25
    634c:	03 94       	inc	r0
    634e:	00 0c       	add	r0, r0
    6350:	11 f4       	brne	.+4      	; 0x6356 <__fp_round+0xc>
    6352:	88 23       	and	r24, r24
    6354:	52 f0       	brmi	.+20     	; 0x636a <__fp_round+0x20>
    6356:	bb 0f       	add	r27, r27
    6358:	40 f4       	brcc	.+16     	; 0x636a <__fp_round+0x20>
    635a:	bf 2b       	or	r27, r31
    635c:	11 f4       	brne	.+4      	; 0x6362 <__fp_round+0x18>
    635e:	60 ff       	sbrs	r22, 0
    6360:	04 c0       	rjmp	.+8      	; 0x636a <__fp_round+0x20>
    6362:	6f 5f       	subi	r22, 0xFF	; 255
    6364:	7f 4f       	sbci	r23, 0xFF	; 255
    6366:	8f 4f       	sbci	r24, 0xFF	; 255
    6368:	9f 4f       	sbci	r25, 0xFF	; 255
    636a:	08 95       	ret

0000636c <__fp_split3>:
    636c:	57 fd       	sbrc	r21, 7
    636e:	90 58       	subi	r25, 0x80	; 128
    6370:	44 0f       	add	r20, r20
    6372:	55 1f       	adc	r21, r21
    6374:	59 f0       	breq	.+22     	; 0x638c <__fp_splitA+0x10>
    6376:	5f 3f       	cpi	r21, 0xFF	; 255
    6378:	71 f0       	breq	.+28     	; 0x6396 <__fp_splitA+0x1a>
    637a:	47 95       	ror	r20

0000637c <__fp_splitA>:
    637c:	88 0f       	add	r24, r24
    637e:	97 fb       	bst	r25, 7
    6380:	99 1f       	adc	r25, r25
    6382:	61 f0       	breq	.+24     	; 0x639c <__fp_splitA+0x20>
    6384:	9f 3f       	cpi	r25, 0xFF	; 255
    6386:	79 f0       	breq	.+30     	; 0x63a6 <__fp_splitA+0x2a>
    6388:	87 95       	ror	r24
    638a:	08 95       	ret
    638c:	12 16       	cp	r1, r18
    638e:	13 06       	cpc	r1, r19
    6390:	14 06       	cpc	r1, r20
    6392:	55 1f       	adc	r21, r21
    6394:	f2 cf       	rjmp	.-28     	; 0x637a <__fp_split3+0xe>
    6396:	46 95       	lsr	r20
    6398:	f1 df       	rcall	.-30     	; 0x637c <__fp_splitA>
    639a:	08 c0       	rjmp	.+16     	; 0x63ac <__fp_splitA+0x30>
    639c:	16 16       	cp	r1, r22
    639e:	17 06       	cpc	r1, r23
    63a0:	18 06       	cpc	r1, r24
    63a2:	99 1f       	adc	r25, r25
    63a4:	f1 cf       	rjmp	.-30     	; 0x6388 <__fp_splitA+0xc>
    63a6:	86 95       	lsr	r24
    63a8:	71 05       	cpc	r23, r1
    63aa:	61 05       	cpc	r22, r1
    63ac:	08 94       	sec
    63ae:	08 95       	ret

000063b0 <__fp_zero>:
    63b0:	e8 94       	clt

000063b2 <__fp_szero>:
    63b2:	bb 27       	eor	r27, r27
    63b4:	66 27       	eor	r22, r22
    63b6:	77 27       	eor	r23, r23
    63b8:	cb 01       	movw	r24, r22
    63ba:	97 f9       	bld	r25, 7
    63bc:	08 95       	ret

000063be <__mulsf3>:
    63be:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <__mulsf3x>
    63c2:	0c 94 a5 31 	jmp	0x634a	; 0x634a <__fp_round>
    63c6:	0e 94 97 31 	call	0x632e	; 0x632e <__fp_pscA>
    63ca:	38 f0       	brcs	.+14     	; 0x63da <__mulsf3+0x1c>
    63cc:	0e 94 9e 31 	call	0x633c	; 0x633c <__fp_pscB>
    63d0:	20 f0       	brcs	.+8      	; 0x63da <__mulsf3+0x1c>
    63d2:	95 23       	and	r25, r21
    63d4:	11 f0       	breq	.+4      	; 0x63da <__mulsf3+0x1c>
    63d6:	0c 94 7e 31 	jmp	0x62fc	; 0x62fc <__fp_inf>
    63da:	0c 94 84 31 	jmp	0x6308	; 0x6308 <__fp_nan>
    63de:	11 24       	eor	r1, r1
    63e0:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__fp_szero>

000063e4 <__mulsf3x>:
    63e4:	0e 94 b6 31 	call	0x636c	; 0x636c <__fp_split3>
    63e8:	70 f3       	brcs	.-36     	; 0x63c6 <__mulsf3+0x8>

000063ea <__mulsf3_pse>:
    63ea:	95 9f       	mul	r25, r21
    63ec:	c1 f3       	breq	.-16     	; 0x63de <__mulsf3+0x20>
    63ee:	95 0f       	add	r25, r21
    63f0:	50 e0       	ldi	r21, 0x00	; 0
    63f2:	55 1f       	adc	r21, r21
    63f4:	62 9f       	mul	r22, r18
    63f6:	f0 01       	movw	r30, r0
    63f8:	72 9f       	mul	r23, r18
    63fa:	bb 27       	eor	r27, r27
    63fc:	f0 0d       	add	r31, r0
    63fe:	b1 1d       	adc	r27, r1
    6400:	63 9f       	mul	r22, r19
    6402:	aa 27       	eor	r26, r26
    6404:	f0 0d       	add	r31, r0
    6406:	b1 1d       	adc	r27, r1
    6408:	aa 1f       	adc	r26, r26
    640a:	64 9f       	mul	r22, r20
    640c:	66 27       	eor	r22, r22
    640e:	b0 0d       	add	r27, r0
    6410:	a1 1d       	adc	r26, r1
    6412:	66 1f       	adc	r22, r22
    6414:	82 9f       	mul	r24, r18
    6416:	22 27       	eor	r18, r18
    6418:	b0 0d       	add	r27, r0
    641a:	a1 1d       	adc	r26, r1
    641c:	62 1f       	adc	r22, r18
    641e:	73 9f       	mul	r23, r19
    6420:	b0 0d       	add	r27, r0
    6422:	a1 1d       	adc	r26, r1
    6424:	62 1f       	adc	r22, r18
    6426:	83 9f       	mul	r24, r19
    6428:	a0 0d       	add	r26, r0
    642a:	61 1d       	adc	r22, r1
    642c:	22 1f       	adc	r18, r18
    642e:	74 9f       	mul	r23, r20
    6430:	33 27       	eor	r19, r19
    6432:	a0 0d       	add	r26, r0
    6434:	61 1d       	adc	r22, r1
    6436:	23 1f       	adc	r18, r19
    6438:	84 9f       	mul	r24, r20
    643a:	60 0d       	add	r22, r0
    643c:	21 1d       	adc	r18, r1
    643e:	82 2f       	mov	r24, r18
    6440:	76 2f       	mov	r23, r22
    6442:	6a 2f       	mov	r22, r26
    6444:	11 24       	eor	r1, r1
    6446:	9f 57       	subi	r25, 0x7F	; 127
    6448:	50 40       	sbci	r21, 0x00	; 0
    644a:	9a f0       	brmi	.+38     	; 0x6472 <__mulsf3_pse+0x88>
    644c:	f1 f0       	breq	.+60     	; 0x648a <__mulsf3_pse+0xa0>
    644e:	88 23       	and	r24, r24
    6450:	4a f0       	brmi	.+18     	; 0x6464 <__mulsf3_pse+0x7a>
    6452:	ee 0f       	add	r30, r30
    6454:	ff 1f       	adc	r31, r31
    6456:	bb 1f       	adc	r27, r27
    6458:	66 1f       	adc	r22, r22
    645a:	77 1f       	adc	r23, r23
    645c:	88 1f       	adc	r24, r24
    645e:	91 50       	subi	r25, 0x01	; 1
    6460:	50 40       	sbci	r21, 0x00	; 0
    6462:	a9 f7       	brne	.-22     	; 0x644e <__mulsf3_pse+0x64>
    6464:	9e 3f       	cpi	r25, 0xFE	; 254
    6466:	51 05       	cpc	r21, r1
    6468:	80 f0       	brcs	.+32     	; 0x648a <__mulsf3_pse+0xa0>
    646a:	0c 94 7e 31 	jmp	0x62fc	; 0x62fc <__fp_inf>
    646e:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__fp_szero>
    6472:	5f 3f       	cpi	r21, 0xFF	; 255
    6474:	e4 f3       	brlt	.-8      	; 0x646e <__mulsf3_pse+0x84>
    6476:	98 3e       	cpi	r25, 0xE8	; 232
    6478:	d4 f3       	brlt	.-12     	; 0x646e <__mulsf3_pse+0x84>
    647a:	86 95       	lsr	r24
    647c:	77 95       	ror	r23
    647e:	67 95       	ror	r22
    6480:	b7 95       	ror	r27
    6482:	f7 95       	ror	r31
    6484:	e7 95       	ror	r30
    6486:	9f 5f       	subi	r25, 0xFF	; 255
    6488:	c1 f7       	brne	.-16     	; 0x647a <__mulsf3_pse+0x90>
    648a:	fe 2b       	or	r31, r30
    648c:	88 0f       	add	r24, r24
    648e:	91 1d       	adc	r25, r1
    6490:	96 95       	lsr	r25
    6492:	87 95       	ror	r24
    6494:	97 f9       	bld	r25, 7
    6496:	08 95       	ret

00006498 <round>:
    6498:	0e 94 be 31 	call	0x637c	; 0x637c <__fp_splitA>
    649c:	e8 f0       	brcs	.+58     	; 0x64d8 <round+0x40>
    649e:	9e 37       	cpi	r25, 0x7E	; 126
    64a0:	e8 f0       	brcs	.+58     	; 0x64dc <round+0x44>
    64a2:	96 39       	cpi	r25, 0x96	; 150
    64a4:	b8 f4       	brcc	.+46     	; 0x64d4 <round+0x3c>
    64a6:	9e 38       	cpi	r25, 0x8E	; 142
    64a8:	48 f4       	brcc	.+18     	; 0x64bc <round+0x24>
    64aa:	67 2f       	mov	r22, r23
    64ac:	78 2f       	mov	r23, r24
    64ae:	88 27       	eor	r24, r24
    64b0:	98 5f       	subi	r25, 0xF8	; 248
    64b2:	f9 cf       	rjmp	.-14     	; 0x64a6 <round+0xe>
    64b4:	86 95       	lsr	r24
    64b6:	77 95       	ror	r23
    64b8:	67 95       	ror	r22
    64ba:	93 95       	inc	r25
    64bc:	95 39       	cpi	r25, 0x95	; 149
    64be:	d0 f3       	brcs	.-12     	; 0x64b4 <round+0x1c>
    64c0:	b6 2f       	mov	r27, r22
    64c2:	b1 70       	andi	r27, 0x01	; 1
    64c4:	6b 0f       	add	r22, r27
    64c6:	71 1d       	adc	r23, r1
    64c8:	81 1d       	adc	r24, r1
    64ca:	20 f4       	brcc	.+8      	; 0x64d4 <round+0x3c>
    64cc:	87 95       	ror	r24
    64ce:	77 95       	ror	r23
    64d0:	67 95       	ror	r22
    64d2:	93 95       	inc	r25
    64d4:	0c 94 70 32 	jmp	0x64e0	; 0x64e0 <__fp_mintl>
    64d8:	0c 94 8b 32 	jmp	0x6516	; 0x6516 <__fp_mpack>
    64dc:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__fp_szero>

000064e0 <__fp_mintl>:
    64e0:	88 23       	and	r24, r24
    64e2:	71 f4       	brne	.+28     	; 0x6500 <__fp_mintl+0x20>
    64e4:	77 23       	and	r23, r23
    64e6:	21 f0       	breq	.+8      	; 0x64f0 <__fp_mintl+0x10>
    64e8:	98 50       	subi	r25, 0x08	; 8
    64ea:	87 2b       	or	r24, r23
    64ec:	76 2f       	mov	r23, r22
    64ee:	07 c0       	rjmp	.+14     	; 0x64fe <__fp_mintl+0x1e>
    64f0:	66 23       	and	r22, r22
    64f2:	11 f4       	brne	.+4      	; 0x64f8 <__fp_mintl+0x18>
    64f4:	99 27       	eor	r25, r25
    64f6:	0d c0       	rjmp	.+26     	; 0x6512 <__fp_mintl+0x32>
    64f8:	90 51       	subi	r25, 0x10	; 16
    64fa:	86 2b       	or	r24, r22
    64fc:	70 e0       	ldi	r23, 0x00	; 0
    64fe:	60 e0       	ldi	r22, 0x00	; 0
    6500:	2a f0       	brmi	.+10     	; 0x650c <__fp_mintl+0x2c>
    6502:	9a 95       	dec	r25
    6504:	66 0f       	add	r22, r22
    6506:	77 1f       	adc	r23, r23
    6508:	88 1f       	adc	r24, r24
    650a:	da f7       	brpl	.-10     	; 0x6502 <__fp_mintl+0x22>
    650c:	88 0f       	add	r24, r24
    650e:	96 95       	lsr	r25
    6510:	87 95       	ror	r24
    6512:	97 f9       	bld	r25, 7
    6514:	08 95       	ret

00006516 <__fp_mpack>:
    6516:	9f 3f       	cpi	r25, 0xFF	; 255
    6518:	31 f0       	breq	.+12     	; 0x6526 <__fp_mpack_finite+0xc>

0000651a <__fp_mpack_finite>:
    651a:	91 50       	subi	r25, 0x01	; 1
    651c:	20 f4       	brcc	.+8      	; 0x6526 <__fp_mpack_finite+0xc>
    651e:	87 95       	ror	r24
    6520:	77 95       	ror	r23
    6522:	67 95       	ror	r22
    6524:	b7 95       	ror	r27
    6526:	88 0f       	add	r24, r24
    6528:	91 1d       	adc	r25, r1
    652a:	96 95       	lsr	r25
    652c:	87 95       	ror	r24
    652e:	97 f9       	bld	r25, 7
    6530:	08 95       	ret

00006532 <vfprintf>:
    6532:	2f 92       	push	r2
    6534:	3f 92       	push	r3
    6536:	4f 92       	push	r4
    6538:	5f 92       	push	r5
    653a:	6f 92       	push	r6
    653c:	7f 92       	push	r7
    653e:	8f 92       	push	r8
    6540:	9f 92       	push	r9
    6542:	af 92       	push	r10
    6544:	bf 92       	push	r11
    6546:	cf 92       	push	r12
    6548:	df 92       	push	r13
    654a:	ef 92       	push	r14
    654c:	ff 92       	push	r15
    654e:	0f 93       	push	r16
    6550:	1f 93       	push	r17
    6552:	cf 93       	push	r28
    6554:	df 93       	push	r29
    6556:	cd b7       	in	r28, 0x3d	; 61
    6558:	de b7       	in	r29, 0x3e	; 62
    655a:	63 97       	sbiw	r28, 0x13	; 19
    655c:	cd bf       	out	0x3d, r28	; 61
    655e:	de bf       	out	0x3e, r29	; 62
    6560:	6c 01       	movw	r12, r24
    6562:	4b 01       	movw	r8, r22
    6564:	2a 01       	movw	r4, r20
    6566:	fc 01       	movw	r30, r24
    6568:	16 82       	std	Z+6, r1	; 0x06
    656a:	17 82       	std	Z+7, r1	; 0x07
    656c:	83 81       	ldd	r24, Z+3	; 0x03
    656e:	81 ff       	sbrs	r24, 1
    6570:	43 c3       	rjmp	.+1670   	; 0x6bf8 <vfprintf+0x6c6>
    6572:	ae 01       	movw	r20, r28
    6574:	4f 5f       	subi	r20, 0xFF	; 255
    6576:	5f 4f       	sbci	r21, 0xFF	; 255
    6578:	3a 01       	movw	r6, r20
    657a:	f6 01       	movw	r30, r12
    657c:	93 81       	ldd	r25, Z+3	; 0x03
    657e:	f4 01       	movw	r30, r8
    6580:	93 fd       	sbrc	r25, 3
    6582:	85 91       	lpm	r24, Z+
    6584:	93 ff       	sbrs	r25, 3
    6586:	81 91       	ld	r24, Z+
    6588:	4f 01       	movw	r8, r30
    658a:	88 23       	and	r24, r24
    658c:	09 f4       	brne	.+2      	; 0x6590 <vfprintf+0x5e>
    658e:	30 c3       	rjmp	.+1632   	; 0x6bf0 <vfprintf+0x6be>
    6590:	85 32       	cpi	r24, 0x25	; 37
    6592:	39 f4       	brne	.+14     	; 0x65a2 <vfprintf+0x70>
    6594:	93 fd       	sbrc	r25, 3
    6596:	85 91       	lpm	r24, Z+
    6598:	93 ff       	sbrs	r25, 3
    659a:	81 91       	ld	r24, Z+
    659c:	4f 01       	movw	r8, r30
    659e:	85 32       	cpi	r24, 0x25	; 37
    65a0:	39 f4       	brne	.+14     	; 0x65b0 <vfprintf+0x7e>
    65a2:	b6 01       	movw	r22, r12
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    65aa:	52 01       	movw	r10, r4
    65ac:	25 01       	movw	r4, r10
    65ae:	e5 cf       	rjmp	.-54     	; 0x657a <vfprintf+0x48>
    65b0:	10 e0       	ldi	r17, 0x00	; 0
    65b2:	f1 2c       	mov	r15, r1
    65b4:	20 e0       	ldi	r18, 0x00	; 0
    65b6:	20 32       	cpi	r18, 0x20	; 32
    65b8:	a0 f4       	brcc	.+40     	; 0x65e2 <vfprintf+0xb0>
    65ba:	8b 32       	cpi	r24, 0x2B	; 43
    65bc:	69 f0       	breq	.+26     	; 0x65d8 <vfprintf+0xa6>
    65be:	30 f4       	brcc	.+12     	; 0x65cc <vfprintf+0x9a>
    65c0:	80 32       	cpi	r24, 0x20	; 32
    65c2:	59 f0       	breq	.+22     	; 0x65da <vfprintf+0xa8>
    65c4:	83 32       	cpi	r24, 0x23	; 35
    65c6:	69 f4       	brne	.+26     	; 0x65e2 <vfprintf+0xb0>
    65c8:	20 61       	ori	r18, 0x10	; 16
    65ca:	2c c0       	rjmp	.+88     	; 0x6624 <vfprintf+0xf2>
    65cc:	8d 32       	cpi	r24, 0x2D	; 45
    65ce:	39 f0       	breq	.+14     	; 0x65de <vfprintf+0xac>
    65d0:	80 33       	cpi	r24, 0x30	; 48
    65d2:	39 f4       	brne	.+14     	; 0x65e2 <vfprintf+0xb0>
    65d4:	21 60       	ori	r18, 0x01	; 1
    65d6:	26 c0       	rjmp	.+76     	; 0x6624 <vfprintf+0xf2>
    65d8:	22 60       	ori	r18, 0x02	; 2
    65da:	24 60       	ori	r18, 0x04	; 4
    65dc:	23 c0       	rjmp	.+70     	; 0x6624 <vfprintf+0xf2>
    65de:	28 60       	ori	r18, 0x08	; 8
    65e0:	21 c0       	rjmp	.+66     	; 0x6624 <vfprintf+0xf2>
    65e2:	27 fd       	sbrc	r18, 7
    65e4:	27 c0       	rjmp	.+78     	; 0x6634 <vfprintf+0x102>
    65e6:	30 ed       	ldi	r19, 0xD0	; 208
    65e8:	38 0f       	add	r19, r24
    65ea:	3a 30       	cpi	r19, 0x0A	; 10
    65ec:	78 f4       	brcc	.+30     	; 0x660c <vfprintf+0xda>
    65ee:	26 ff       	sbrs	r18, 6
    65f0:	06 c0       	rjmp	.+12     	; 0x65fe <vfprintf+0xcc>
    65f2:	fa e0       	ldi	r31, 0x0A	; 10
    65f4:	1f 9f       	mul	r17, r31
    65f6:	30 0d       	add	r19, r0
    65f8:	11 24       	eor	r1, r1
    65fa:	13 2f       	mov	r17, r19
    65fc:	13 c0       	rjmp	.+38     	; 0x6624 <vfprintf+0xf2>
    65fe:	4a e0       	ldi	r20, 0x0A	; 10
    6600:	f4 9e       	mul	r15, r20
    6602:	30 0d       	add	r19, r0
    6604:	11 24       	eor	r1, r1
    6606:	f3 2e       	mov	r15, r19
    6608:	20 62       	ori	r18, 0x20	; 32
    660a:	0c c0       	rjmp	.+24     	; 0x6624 <vfprintf+0xf2>
    660c:	8e 32       	cpi	r24, 0x2E	; 46
    660e:	21 f4       	brne	.+8      	; 0x6618 <vfprintf+0xe6>
    6610:	26 fd       	sbrc	r18, 6
    6612:	ee c2       	rjmp	.+1500   	; 0x6bf0 <vfprintf+0x6be>
    6614:	20 64       	ori	r18, 0x40	; 64
    6616:	06 c0       	rjmp	.+12     	; 0x6624 <vfprintf+0xf2>
    6618:	8c 36       	cpi	r24, 0x6C	; 108
    661a:	11 f4       	brne	.+4      	; 0x6620 <vfprintf+0xee>
    661c:	20 68       	ori	r18, 0x80	; 128
    661e:	02 c0       	rjmp	.+4      	; 0x6624 <vfprintf+0xf2>
    6620:	88 36       	cpi	r24, 0x68	; 104
    6622:	41 f4       	brne	.+16     	; 0x6634 <vfprintf+0x102>
    6624:	f4 01       	movw	r30, r8
    6626:	93 fd       	sbrc	r25, 3
    6628:	85 91       	lpm	r24, Z+
    662a:	93 ff       	sbrs	r25, 3
    662c:	81 91       	ld	r24, Z+
    662e:	4f 01       	movw	r8, r30
    6630:	81 11       	cpse	r24, r1
    6632:	c1 cf       	rjmp	.-126    	; 0x65b6 <vfprintf+0x84>
    6634:	9b eb       	ldi	r25, 0xBB	; 187
    6636:	98 0f       	add	r25, r24
    6638:	93 30       	cpi	r25, 0x03	; 3
    663a:	18 f4       	brcc	.+6      	; 0x6642 <vfprintf+0x110>
    663c:	20 61       	ori	r18, 0x10	; 16
    663e:	80 5e       	subi	r24, 0xE0	; 224
    6640:	06 c0       	rjmp	.+12     	; 0x664e <vfprintf+0x11c>
    6642:	9b e9       	ldi	r25, 0x9B	; 155
    6644:	98 0f       	add	r25, r24
    6646:	93 30       	cpi	r25, 0x03	; 3
    6648:	08 f0       	brcs	.+2      	; 0x664c <vfprintf+0x11a>
    664a:	71 c1       	rjmp	.+738    	; 0x692e <vfprintf+0x3fc>
    664c:	2f 7e       	andi	r18, 0xEF	; 239
    664e:	26 ff       	sbrs	r18, 6
    6650:	16 e0       	ldi	r17, 0x06	; 6
    6652:	2f 73       	andi	r18, 0x3F	; 63
    6654:	32 2e       	mov	r3, r18
    6656:	85 36       	cpi	r24, 0x65	; 101
    6658:	19 f4       	brne	.+6      	; 0x6660 <vfprintf+0x12e>
    665a:	20 64       	ori	r18, 0x40	; 64
    665c:	32 2e       	mov	r3, r18
    665e:	08 c0       	rjmp	.+16     	; 0x6670 <vfprintf+0x13e>
    6660:	86 36       	cpi	r24, 0x66	; 102
    6662:	21 f4       	brne	.+8      	; 0x666c <vfprintf+0x13a>
    6664:	f2 2f       	mov	r31, r18
    6666:	f0 68       	ori	r31, 0x80	; 128
    6668:	3f 2e       	mov	r3, r31
    666a:	02 c0       	rjmp	.+4      	; 0x6670 <vfprintf+0x13e>
    666c:	11 11       	cpse	r17, r1
    666e:	11 50       	subi	r17, 0x01	; 1
    6670:	37 fe       	sbrs	r3, 7
    6672:	07 c0       	rjmp	.+14     	; 0x6682 <vfprintf+0x150>
    6674:	1c 33       	cpi	r17, 0x3C	; 60
    6676:	50 f4       	brcc	.+20     	; 0x668c <vfprintf+0x15a>
    6678:	ee 24       	eor	r14, r14
    667a:	e3 94       	inc	r14
    667c:	e1 0e       	add	r14, r17
    667e:	27 e0       	ldi	r18, 0x07	; 7
    6680:	0b c0       	rjmp	.+22     	; 0x6698 <vfprintf+0x166>
    6682:	18 30       	cpi	r17, 0x08	; 8
    6684:	38 f0       	brcs	.+14     	; 0x6694 <vfprintf+0x162>
    6686:	27 e0       	ldi	r18, 0x07	; 7
    6688:	17 e0       	ldi	r17, 0x07	; 7
    668a:	05 c0       	rjmp	.+10     	; 0x6696 <vfprintf+0x164>
    668c:	27 e0       	ldi	r18, 0x07	; 7
    668e:	4c e3       	ldi	r20, 0x3C	; 60
    6690:	e4 2e       	mov	r14, r20
    6692:	02 c0       	rjmp	.+4      	; 0x6698 <vfprintf+0x166>
    6694:	21 2f       	mov	r18, r17
    6696:	e1 2c       	mov	r14, r1
    6698:	52 01       	movw	r10, r4
    669a:	44 e0       	ldi	r20, 0x04	; 4
    669c:	a4 0e       	add	r10, r20
    669e:	b1 1c       	adc	r11, r1
    66a0:	f2 01       	movw	r30, r4
    66a2:	60 81       	ld	r22, Z
    66a4:	71 81       	ldd	r23, Z+1	; 0x01
    66a6:	82 81       	ldd	r24, Z+2	; 0x02
    66a8:	93 81       	ldd	r25, Z+3	; 0x03
    66aa:	0e 2d       	mov	r16, r14
    66ac:	a3 01       	movw	r20, r6
    66ae:	0e 94 ab 39 	call	0x7356	; 0x7356 <__ftoa_engine>
    66b2:	2c 01       	movw	r4, r24
    66b4:	09 81       	ldd	r16, Y+1	; 0x01
    66b6:	00 ff       	sbrs	r16, 0
    66b8:	02 c0       	rjmp	.+4      	; 0x66be <vfprintf+0x18c>
    66ba:	03 ff       	sbrs	r16, 3
    66bc:	07 c0       	rjmp	.+14     	; 0x66cc <vfprintf+0x19a>
    66be:	31 fc       	sbrc	r3, 1
    66c0:	08 c0       	rjmp	.+16     	; 0x66d2 <vfprintf+0x1a0>
    66c2:	32 fe       	sbrs	r3, 2
    66c4:	09 c0       	rjmp	.+18     	; 0x66d8 <vfprintf+0x1a6>
    66c6:	30 e2       	ldi	r19, 0x20	; 32
    66c8:	23 2e       	mov	r2, r19
    66ca:	07 c0       	rjmp	.+14     	; 0x66da <vfprintf+0x1a8>
    66cc:	2d e2       	ldi	r18, 0x2D	; 45
    66ce:	22 2e       	mov	r2, r18
    66d0:	04 c0       	rjmp	.+8      	; 0x66da <vfprintf+0x1a8>
    66d2:	9b e2       	ldi	r25, 0x2B	; 43
    66d4:	29 2e       	mov	r2, r25
    66d6:	01 c0       	rjmp	.+2      	; 0x66da <vfprintf+0x1a8>
    66d8:	21 2c       	mov	r2, r1
    66da:	80 2f       	mov	r24, r16
    66dc:	8c 70       	andi	r24, 0x0C	; 12
    66de:	19 f0       	breq	.+6      	; 0x66e6 <vfprintf+0x1b4>
    66e0:	21 10       	cpse	r2, r1
    66e2:	68 c2       	rjmp	.+1232   	; 0x6bb4 <vfprintf+0x682>
    66e4:	a8 c2       	rjmp	.+1360   	; 0x6c36 <vfprintf+0x704>
    66e6:	37 fe       	sbrs	r3, 7
    66e8:	0f c0       	rjmp	.+30     	; 0x6708 <vfprintf+0x1d6>
    66ea:	e4 0c       	add	r14, r4
    66ec:	04 ff       	sbrs	r16, 4
    66ee:	04 c0       	rjmp	.+8      	; 0x66f8 <vfprintf+0x1c6>
    66f0:	8a 81       	ldd	r24, Y+2	; 0x02
    66f2:	81 33       	cpi	r24, 0x31	; 49
    66f4:	09 f4       	brne	.+2      	; 0x66f8 <vfprintf+0x1c6>
    66f6:	ea 94       	dec	r14
    66f8:	1e 14       	cp	r1, r14
    66fa:	74 f5       	brge	.+92     	; 0x6758 <vfprintf+0x226>
    66fc:	f8 e0       	ldi	r31, 0x08	; 8
    66fe:	fe 15       	cp	r31, r14
    6700:	78 f5       	brcc	.+94     	; 0x6760 <vfprintf+0x22e>
    6702:	88 e0       	ldi	r24, 0x08	; 8
    6704:	e8 2e       	mov	r14, r24
    6706:	2c c0       	rjmp	.+88     	; 0x6760 <vfprintf+0x22e>
    6708:	36 fc       	sbrc	r3, 6
    670a:	2a c0       	rjmp	.+84     	; 0x6760 <vfprintf+0x22e>
    670c:	81 2f       	mov	r24, r17
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	84 15       	cp	r24, r4
    6712:	95 05       	cpc	r25, r5
    6714:	9c f0       	brlt	.+38     	; 0x673c <vfprintf+0x20a>
    6716:	2c ef       	ldi	r18, 0xFC	; 252
    6718:	42 16       	cp	r4, r18
    671a:	2f ef       	ldi	r18, 0xFF	; 255
    671c:	52 06       	cpc	r5, r18
    671e:	74 f0       	brlt	.+28     	; 0x673c <vfprintf+0x20a>
    6720:	43 2d       	mov	r20, r3
    6722:	40 68       	ori	r20, 0x80	; 128
    6724:	34 2e       	mov	r3, r20
    6726:	0a c0       	rjmp	.+20     	; 0x673c <vfprintf+0x20a>
    6728:	e2 e0       	ldi	r30, 0x02	; 2
    672a:	f0 e0       	ldi	r31, 0x00	; 0
    672c:	ec 0f       	add	r30, r28
    672e:	fd 1f       	adc	r31, r29
    6730:	e1 0f       	add	r30, r17
    6732:	f1 1d       	adc	r31, r1
    6734:	80 81       	ld	r24, Z
    6736:	80 33       	cpi	r24, 0x30	; 48
    6738:	19 f4       	brne	.+6      	; 0x6740 <vfprintf+0x20e>
    673a:	11 50       	subi	r17, 0x01	; 1
    673c:	11 11       	cpse	r17, r1
    673e:	f4 cf       	rjmp	.-24     	; 0x6728 <vfprintf+0x1f6>
    6740:	37 fe       	sbrs	r3, 7
    6742:	0e c0       	rjmp	.+28     	; 0x6760 <vfprintf+0x22e>
    6744:	ee 24       	eor	r14, r14
    6746:	e3 94       	inc	r14
    6748:	e1 0e       	add	r14, r17
    674a:	81 2f       	mov	r24, r17
    674c:	90 e0       	ldi	r25, 0x00	; 0
    674e:	48 16       	cp	r4, r24
    6750:	59 06       	cpc	r5, r25
    6752:	2c f4       	brge	.+10     	; 0x675e <vfprintf+0x22c>
    6754:	14 19       	sub	r17, r4
    6756:	04 c0       	rjmp	.+8      	; 0x6760 <vfprintf+0x22e>
    6758:	ee 24       	eor	r14, r14
    675a:	e3 94       	inc	r14
    675c:	01 c0       	rjmp	.+2      	; 0x6760 <vfprintf+0x22e>
    675e:	10 e0       	ldi	r17, 0x00	; 0
    6760:	37 fe       	sbrs	r3, 7
    6762:	06 c0       	rjmp	.+12     	; 0x6770 <vfprintf+0x23e>
    6764:	14 14       	cp	r1, r4
    6766:	15 04       	cpc	r1, r5
    6768:	34 f4       	brge	.+12     	; 0x6776 <vfprintf+0x244>
    676a:	c2 01       	movw	r24, r4
    676c:	01 96       	adiw	r24, 0x01	; 1
    676e:	05 c0       	rjmp	.+10     	; 0x677a <vfprintf+0x248>
    6770:	85 e0       	ldi	r24, 0x05	; 5
    6772:	90 e0       	ldi	r25, 0x00	; 0
    6774:	02 c0       	rjmp	.+4      	; 0x677a <vfprintf+0x248>
    6776:	81 e0       	ldi	r24, 0x01	; 1
    6778:	90 e0       	ldi	r25, 0x00	; 0
    677a:	21 10       	cpse	r2, r1
    677c:	01 96       	adiw	r24, 0x01	; 1
    677e:	11 23       	and	r17, r17
    6780:	31 f0       	breq	.+12     	; 0x678e <vfprintf+0x25c>
    6782:	21 2f       	mov	r18, r17
    6784:	30 e0       	ldi	r19, 0x00	; 0
    6786:	2f 5f       	subi	r18, 0xFF	; 255
    6788:	3f 4f       	sbci	r19, 0xFF	; 255
    678a:	82 0f       	add	r24, r18
    678c:	93 1f       	adc	r25, r19
    678e:	2f 2d       	mov	r18, r15
    6790:	30 e0       	ldi	r19, 0x00	; 0
    6792:	82 17       	cp	r24, r18
    6794:	93 07       	cpc	r25, r19
    6796:	14 f4       	brge	.+4      	; 0x679c <vfprintf+0x26a>
    6798:	f8 1a       	sub	r15, r24
    679a:	01 c0       	rjmp	.+2      	; 0x679e <vfprintf+0x26c>
    679c:	f1 2c       	mov	r15, r1
    679e:	83 2d       	mov	r24, r3
    67a0:	89 70       	andi	r24, 0x09	; 9
    67a2:	49 f4       	brne	.+18     	; 0x67b6 <vfprintf+0x284>
    67a4:	ff 20       	and	r15, r15
    67a6:	39 f0       	breq	.+14     	; 0x67b6 <vfprintf+0x284>
    67a8:	b6 01       	movw	r22, r12
    67aa:	80 e2       	ldi	r24, 0x20	; 32
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    67b2:	fa 94       	dec	r15
    67b4:	f7 cf       	rjmp	.-18     	; 0x67a4 <vfprintf+0x272>
    67b6:	22 20       	and	r2, r2
    67b8:	29 f0       	breq	.+10     	; 0x67c4 <vfprintf+0x292>
    67ba:	b6 01       	movw	r22, r12
    67bc:	82 2d       	mov	r24, r2
    67be:	90 e0       	ldi	r25, 0x00	; 0
    67c0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    67c4:	33 fc       	sbrc	r3, 3
    67c6:	09 c0       	rjmp	.+18     	; 0x67da <vfprintf+0x2a8>
    67c8:	ff 20       	and	r15, r15
    67ca:	39 f0       	breq	.+14     	; 0x67da <vfprintf+0x2a8>
    67cc:	b6 01       	movw	r22, r12
    67ce:	80 e3       	ldi	r24, 0x30	; 48
    67d0:	90 e0       	ldi	r25, 0x00	; 0
    67d2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    67d6:	fa 94       	dec	r15
    67d8:	f7 cf       	rjmp	.-18     	; 0x67c8 <vfprintf+0x296>
    67da:	37 fe       	sbrs	r3, 7
    67dc:	5a c0       	rjmp	.+180    	; 0x6892 <vfprintf+0x360>
    67de:	94 2d       	mov	r25, r4
    67e0:	85 2d       	mov	r24, r5
    67e2:	57 fe       	sbrs	r5, 7
    67e4:	02 c0       	rjmp	.+4      	; 0x67ea <vfprintf+0x2b8>
    67e6:	90 e0       	ldi	r25, 0x00	; 0
    67e8:	80 e0       	ldi	r24, 0x00	; 0
    67ea:	29 2e       	mov	r2, r25
    67ec:	38 2e       	mov	r3, r24
    67ee:	20 e0       	ldi	r18, 0x00	; 0
    67f0:	30 e0       	ldi	r19, 0x00	; 0
    67f2:	a2 01       	movw	r20, r4
    67f4:	4e 19       	sub	r20, r14
    67f6:	51 09       	sbc	r21, r1
    67f8:	4c 87       	std	Y+12, r20	; 0x0c
    67fa:	5d 87       	std	Y+13, r21	; 0x0d
    67fc:	a2 01       	movw	r20, r4
    67fe:	42 19       	sub	r20, r2
    6800:	53 09       	sbc	r21, r3
    6802:	4e 87       	std	Y+14, r20	; 0x0e
    6804:	5f 87       	std	Y+15, r21	; 0x0f
    6806:	61 2f       	mov	r22, r17
    6808:	70 e0       	ldi	r23, 0x00	; 0
    680a:	44 27       	eor	r20, r20
    680c:	55 27       	eor	r21, r21
    680e:	46 1b       	sub	r20, r22
    6810:	57 0b       	sbc	r21, r23
    6812:	48 8b       	std	Y+16, r20	; 0x10
    6814:	59 8b       	std	Y+17, r21	; 0x11
    6816:	5f ef       	ldi	r21, 0xFF	; 255
    6818:	25 16       	cp	r2, r21
    681a:	35 06       	cpc	r3, r21
    681c:	49 f4       	brne	.+18     	; 0x6830 <vfprintf+0x2fe>
    681e:	b6 01       	movw	r22, r12
    6820:	8e e2       	ldi	r24, 0x2E	; 46
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	2a 8b       	std	Y+18, r18	; 0x12
    6826:	3b 8b       	std	Y+19, r19	; 0x13
    6828:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    682c:	3b 89       	ldd	r19, Y+19	; 0x13
    682e:	2a 89       	ldd	r18, Y+18	; 0x12
    6830:	42 14       	cp	r4, r2
    6832:	53 04       	cpc	r5, r3
    6834:	6c f0       	brlt	.+26     	; 0x6850 <vfprintf+0x31e>
    6836:	4c 85       	ldd	r20, Y+12	; 0x0c
    6838:	5d 85       	ldd	r21, Y+13	; 0x0d
    683a:	42 15       	cp	r20, r2
    683c:	53 05       	cpc	r21, r3
    683e:	44 f4       	brge	.+16     	; 0x6850 <vfprintf+0x31e>
    6840:	ee 85       	ldd	r30, Y+14	; 0x0e
    6842:	ff 85       	ldd	r31, Y+15	; 0x0f
    6844:	e2 0f       	add	r30, r18
    6846:	f3 1f       	adc	r31, r19
    6848:	e6 0d       	add	r30, r6
    684a:	f7 1d       	adc	r31, r7
    684c:	81 81       	ldd	r24, Z+1	; 0x01
    684e:	01 c0       	rjmp	.+2      	; 0x6852 <vfprintf+0x320>
    6850:	80 e3       	ldi	r24, 0x30	; 48
    6852:	51 e0       	ldi	r21, 0x01	; 1
    6854:	25 1a       	sub	r2, r21
    6856:	31 08       	sbc	r3, r1
    6858:	2f 5f       	subi	r18, 0xFF	; 255
    685a:	3f 4f       	sbci	r19, 0xFF	; 255
    685c:	48 89       	ldd	r20, Y+16	; 0x10
    685e:	59 89       	ldd	r21, Y+17	; 0x11
    6860:	24 16       	cp	r2, r20
    6862:	35 06       	cpc	r3, r21
    6864:	4c f0       	brlt	.+18     	; 0x6878 <vfprintf+0x346>
    6866:	b6 01       	movw	r22, r12
    6868:	90 e0       	ldi	r25, 0x00	; 0
    686a:	2a 8b       	std	Y+18, r18	; 0x12
    686c:	3b 8b       	std	Y+19, r19	; 0x13
    686e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6872:	2a 89       	ldd	r18, Y+18	; 0x12
    6874:	3b 89       	ldd	r19, Y+19	; 0x13
    6876:	cf cf       	rjmp	.-98     	; 0x6816 <vfprintf+0x2e4>
    6878:	24 14       	cp	r2, r4
    687a:	35 04       	cpc	r3, r5
    687c:	39 f4       	brne	.+14     	; 0x688c <vfprintf+0x35a>
    687e:	9a 81       	ldd	r25, Y+2	; 0x02
    6880:	96 33       	cpi	r25, 0x36	; 54
    6882:	18 f4       	brcc	.+6      	; 0x688a <vfprintf+0x358>
    6884:	95 33       	cpi	r25, 0x35	; 53
    6886:	11 f4       	brne	.+4      	; 0x688c <vfprintf+0x35a>
    6888:	04 ff       	sbrs	r16, 4
    688a:	81 e3       	ldi	r24, 0x31	; 49
    688c:	b6 01       	movw	r22, r12
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	4b c0       	rjmp	.+150    	; 0x6928 <vfprintf+0x3f6>
    6892:	8a 81       	ldd	r24, Y+2	; 0x02
    6894:	81 33       	cpi	r24, 0x31	; 49
    6896:	09 f0       	breq	.+2      	; 0x689a <vfprintf+0x368>
    6898:	0f 7e       	andi	r16, 0xEF	; 239
    689a:	b6 01       	movw	r22, r12
    689c:	90 e0       	ldi	r25, 0x00	; 0
    689e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    68a2:	11 11       	cpse	r17, r1
    68a4:	05 c0       	rjmp	.+10     	; 0x68b0 <vfprintf+0x37e>
    68a6:	34 fc       	sbrc	r3, 4
    68a8:	18 c0       	rjmp	.+48     	; 0x68da <vfprintf+0x3a8>
    68aa:	85 e6       	ldi	r24, 0x65	; 101
    68ac:	90 e0       	ldi	r25, 0x00	; 0
    68ae:	17 c0       	rjmp	.+46     	; 0x68de <vfprintf+0x3ac>
    68b0:	b6 01       	movw	r22, r12
    68b2:	8e e2       	ldi	r24, 0x2E	; 46
    68b4:	90 e0       	ldi	r25, 0x00	; 0
    68b6:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    68ba:	82 e0       	ldi	r24, 0x02	; 2
    68bc:	ee 24       	eor	r14, r14
    68be:	e3 94       	inc	r14
    68c0:	e8 0e       	add	r14, r24
    68c2:	f3 01       	movw	r30, r6
    68c4:	e8 0f       	add	r30, r24
    68c6:	f1 1d       	adc	r31, r1
    68c8:	80 81       	ld	r24, Z
    68ca:	b6 01       	movw	r22, r12
    68cc:	90 e0       	ldi	r25, 0x00	; 0
    68ce:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    68d2:	11 50       	subi	r17, 0x01	; 1
    68d4:	8e 2d       	mov	r24, r14
    68d6:	91 f7       	brne	.-28     	; 0x68bc <vfprintf+0x38a>
    68d8:	e6 cf       	rjmp	.-52     	; 0x68a6 <vfprintf+0x374>
    68da:	85 e4       	ldi	r24, 0x45	; 69
    68dc:	90 e0       	ldi	r25, 0x00	; 0
    68de:	b6 01       	movw	r22, r12
    68e0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    68e4:	57 fc       	sbrc	r5, 7
    68e6:	05 c0       	rjmp	.+10     	; 0x68f2 <vfprintf+0x3c0>
    68e8:	41 14       	cp	r4, r1
    68ea:	51 04       	cpc	r5, r1
    68ec:	39 f4       	brne	.+14     	; 0x68fc <vfprintf+0x3ca>
    68ee:	04 ff       	sbrs	r16, 4
    68f0:	05 c0       	rjmp	.+10     	; 0x68fc <vfprintf+0x3ca>
    68f2:	51 94       	neg	r5
    68f4:	41 94       	neg	r4
    68f6:	51 08       	sbc	r5, r1
    68f8:	8d e2       	ldi	r24, 0x2D	; 45
    68fa:	01 c0       	rjmp	.+2      	; 0x68fe <vfprintf+0x3cc>
    68fc:	8b e2       	ldi	r24, 0x2B	; 43
    68fe:	b6 01       	movw	r22, r12
    6900:	90 e0       	ldi	r25, 0x00	; 0
    6902:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6906:	80 e3       	ldi	r24, 0x30	; 48
    6908:	9a e0       	ldi	r25, 0x0A	; 10
    690a:	49 16       	cp	r4, r25
    690c:	51 04       	cpc	r5, r1
    690e:	2c f0       	brlt	.+10     	; 0x691a <vfprintf+0x3e8>
    6910:	8f 5f       	subi	r24, 0xFF	; 255
    6912:	5a e0       	ldi	r21, 0x0A	; 10
    6914:	45 1a       	sub	r4, r21
    6916:	51 08       	sbc	r5, r1
    6918:	f7 cf       	rjmp	.-18     	; 0x6908 <vfprintf+0x3d6>
    691a:	b6 01       	movw	r22, r12
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6922:	b6 01       	movw	r22, r12
    6924:	c2 01       	movw	r24, r4
    6926:	c0 96       	adiw	r24, 0x30	; 48
    6928:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    692c:	57 c1       	rjmp	.+686    	; 0x6bdc <vfprintf+0x6aa>
    692e:	83 36       	cpi	r24, 0x63	; 99
    6930:	31 f0       	breq	.+12     	; 0x693e <vfprintf+0x40c>
    6932:	83 37       	cpi	r24, 0x73	; 115
    6934:	79 f0       	breq	.+30     	; 0x6954 <vfprintf+0x422>
    6936:	83 35       	cpi	r24, 0x53	; 83
    6938:	09 f0       	breq	.+2      	; 0x693c <vfprintf+0x40a>
    693a:	58 c0       	rjmp	.+176    	; 0x69ec <vfprintf+0x4ba>
    693c:	21 c0       	rjmp	.+66     	; 0x6980 <vfprintf+0x44e>
    693e:	52 01       	movw	r10, r4
    6940:	e2 e0       	ldi	r30, 0x02	; 2
    6942:	ae 0e       	add	r10, r30
    6944:	b1 1c       	adc	r11, r1
    6946:	f2 01       	movw	r30, r4
    6948:	80 81       	ld	r24, Z
    694a:	89 83       	std	Y+1, r24	; 0x01
    694c:	01 e0       	ldi	r16, 0x01	; 1
    694e:	10 e0       	ldi	r17, 0x00	; 0
    6950:	23 01       	movw	r4, r6
    6952:	14 c0       	rjmp	.+40     	; 0x697c <vfprintf+0x44a>
    6954:	52 01       	movw	r10, r4
    6956:	f2 e0       	ldi	r31, 0x02	; 2
    6958:	af 0e       	add	r10, r31
    695a:	b1 1c       	adc	r11, r1
    695c:	f2 01       	movw	r30, r4
    695e:	40 80       	ld	r4, Z
    6960:	51 80       	ldd	r5, Z+1	; 0x01
    6962:	26 ff       	sbrs	r18, 6
    6964:	03 c0       	rjmp	.+6      	; 0x696c <vfprintf+0x43a>
    6966:	61 2f       	mov	r22, r17
    6968:	70 e0       	ldi	r23, 0x00	; 0
    696a:	02 c0       	rjmp	.+4      	; 0x6970 <vfprintf+0x43e>
    696c:	6f ef       	ldi	r22, 0xFF	; 255
    696e:	7f ef       	ldi	r23, 0xFF	; 255
    6970:	c2 01       	movw	r24, r4
    6972:	2a 8b       	std	Y+18, r18	; 0x12
    6974:	0e 94 bd 3a 	call	0x757a	; 0x757a <strnlen>
    6978:	8c 01       	movw	r16, r24
    697a:	2a 89       	ldd	r18, Y+18	; 0x12
    697c:	2f 77       	andi	r18, 0x7F	; 127
    697e:	15 c0       	rjmp	.+42     	; 0x69aa <vfprintf+0x478>
    6980:	52 01       	movw	r10, r4
    6982:	f2 e0       	ldi	r31, 0x02	; 2
    6984:	af 0e       	add	r10, r31
    6986:	b1 1c       	adc	r11, r1
    6988:	f2 01       	movw	r30, r4
    698a:	40 80       	ld	r4, Z
    698c:	51 80       	ldd	r5, Z+1	; 0x01
    698e:	26 ff       	sbrs	r18, 6
    6990:	03 c0       	rjmp	.+6      	; 0x6998 <vfprintf+0x466>
    6992:	61 2f       	mov	r22, r17
    6994:	70 e0       	ldi	r23, 0x00	; 0
    6996:	02 c0       	rjmp	.+4      	; 0x699c <vfprintf+0x46a>
    6998:	6f ef       	ldi	r22, 0xFF	; 255
    699a:	7f ef       	ldi	r23, 0xFF	; 255
    699c:	c2 01       	movw	r24, r4
    699e:	2a 8b       	std	Y+18, r18	; 0x12
    69a0:	0e 94 8c 3a 	call	0x7518	; 0x7518 <strnlen_P>
    69a4:	8c 01       	movw	r16, r24
    69a6:	2a 89       	ldd	r18, Y+18	; 0x12
    69a8:	20 68       	ori	r18, 0x80	; 128
    69aa:	32 2e       	mov	r3, r18
    69ac:	23 fd       	sbrc	r18, 3
    69ae:	1a c0       	rjmp	.+52     	; 0x69e4 <vfprintf+0x4b2>
    69b0:	8f 2d       	mov	r24, r15
    69b2:	90 e0       	ldi	r25, 0x00	; 0
    69b4:	08 17       	cp	r16, r24
    69b6:	19 07       	cpc	r17, r25
    69b8:	a8 f4       	brcc	.+42     	; 0x69e4 <vfprintf+0x4b2>
    69ba:	b6 01       	movw	r22, r12
    69bc:	80 e2       	ldi	r24, 0x20	; 32
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    69c4:	fa 94       	dec	r15
    69c6:	f4 cf       	rjmp	.-24     	; 0x69b0 <vfprintf+0x47e>
    69c8:	f2 01       	movw	r30, r4
    69ca:	37 fc       	sbrc	r3, 7
    69cc:	85 91       	lpm	r24, Z+
    69ce:	37 fe       	sbrs	r3, 7
    69d0:	81 91       	ld	r24, Z+
    69d2:	2f 01       	movw	r4, r30
    69d4:	b6 01       	movw	r22, r12
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    69dc:	f1 10       	cpse	r15, r1
    69de:	fa 94       	dec	r15
    69e0:	01 50       	subi	r16, 0x01	; 1
    69e2:	11 09       	sbc	r17, r1
    69e4:	01 15       	cp	r16, r1
    69e6:	11 05       	cpc	r17, r1
    69e8:	79 f7       	brne	.-34     	; 0x69c8 <vfprintf+0x496>
    69ea:	f8 c0       	rjmp	.+496    	; 0x6bdc <vfprintf+0x6aa>
    69ec:	84 36       	cpi	r24, 0x64	; 100
    69ee:	11 f0       	breq	.+4      	; 0x69f4 <vfprintf+0x4c2>
    69f0:	89 36       	cpi	r24, 0x69	; 105
    69f2:	59 f5       	brne	.+86     	; 0x6a4a <vfprintf+0x518>
    69f4:	52 01       	movw	r10, r4
    69f6:	27 ff       	sbrs	r18, 7
    69f8:	09 c0       	rjmp	.+18     	; 0x6a0c <vfprintf+0x4da>
    69fa:	f4 e0       	ldi	r31, 0x04	; 4
    69fc:	af 0e       	add	r10, r31
    69fe:	b1 1c       	adc	r11, r1
    6a00:	f2 01       	movw	r30, r4
    6a02:	60 81       	ld	r22, Z
    6a04:	71 81       	ldd	r23, Z+1	; 0x01
    6a06:	82 81       	ldd	r24, Z+2	; 0x02
    6a08:	93 81       	ldd	r25, Z+3	; 0x03
    6a0a:	0a c0       	rjmp	.+20     	; 0x6a20 <vfprintf+0x4ee>
    6a0c:	f2 e0       	ldi	r31, 0x02	; 2
    6a0e:	af 0e       	add	r10, r31
    6a10:	b1 1c       	adc	r11, r1
    6a12:	f2 01       	movw	r30, r4
    6a14:	60 81       	ld	r22, Z
    6a16:	71 81       	ldd	r23, Z+1	; 0x01
    6a18:	07 2e       	mov	r0, r23
    6a1a:	00 0c       	add	r0, r0
    6a1c:	88 0b       	sbc	r24, r24
    6a1e:	99 0b       	sbc	r25, r25
    6a20:	2f 76       	andi	r18, 0x6F	; 111
    6a22:	32 2e       	mov	r3, r18
    6a24:	97 ff       	sbrs	r25, 7
    6a26:	09 c0       	rjmp	.+18     	; 0x6a3a <vfprintf+0x508>
    6a28:	90 95       	com	r25
    6a2a:	80 95       	com	r24
    6a2c:	70 95       	com	r23
    6a2e:	61 95       	neg	r22
    6a30:	7f 4f       	sbci	r23, 0xFF	; 255
    6a32:	8f 4f       	sbci	r24, 0xFF	; 255
    6a34:	9f 4f       	sbci	r25, 0xFF	; 255
    6a36:	20 68       	ori	r18, 0x80	; 128
    6a38:	32 2e       	mov	r3, r18
    6a3a:	2a e0       	ldi	r18, 0x0A	; 10
    6a3c:	30 e0       	ldi	r19, 0x00	; 0
    6a3e:	a3 01       	movw	r20, r6
    6a40:	0e 94 9d 3b 	call	0x773a	; 0x773a <__ultoa_invert>
    6a44:	e8 2e       	mov	r14, r24
    6a46:	e6 18       	sub	r14, r6
    6a48:	3f c0       	rjmp	.+126    	; 0x6ac8 <vfprintf+0x596>
    6a4a:	02 2f       	mov	r16, r18
    6a4c:	85 37       	cpi	r24, 0x75	; 117
    6a4e:	21 f4       	brne	.+8      	; 0x6a58 <vfprintf+0x526>
    6a50:	0f 7e       	andi	r16, 0xEF	; 239
    6a52:	2a e0       	ldi	r18, 0x0A	; 10
    6a54:	30 e0       	ldi	r19, 0x00	; 0
    6a56:	1d c0       	rjmp	.+58     	; 0x6a92 <vfprintf+0x560>
    6a58:	09 7f       	andi	r16, 0xF9	; 249
    6a5a:	8f 36       	cpi	r24, 0x6F	; 111
    6a5c:	91 f0       	breq	.+36     	; 0x6a82 <vfprintf+0x550>
    6a5e:	18 f4       	brcc	.+6      	; 0x6a66 <vfprintf+0x534>
    6a60:	88 35       	cpi	r24, 0x58	; 88
    6a62:	59 f0       	breq	.+22     	; 0x6a7a <vfprintf+0x548>
    6a64:	c5 c0       	rjmp	.+394    	; 0x6bf0 <vfprintf+0x6be>
    6a66:	80 37       	cpi	r24, 0x70	; 112
    6a68:	19 f0       	breq	.+6      	; 0x6a70 <vfprintf+0x53e>
    6a6a:	88 37       	cpi	r24, 0x78	; 120
    6a6c:	11 f0       	breq	.+4      	; 0x6a72 <vfprintf+0x540>
    6a6e:	c0 c0       	rjmp	.+384    	; 0x6bf0 <vfprintf+0x6be>
    6a70:	00 61       	ori	r16, 0x10	; 16
    6a72:	04 ff       	sbrs	r16, 4
    6a74:	09 c0       	rjmp	.+18     	; 0x6a88 <vfprintf+0x556>
    6a76:	04 60       	ori	r16, 0x04	; 4
    6a78:	07 c0       	rjmp	.+14     	; 0x6a88 <vfprintf+0x556>
    6a7a:	24 ff       	sbrs	r18, 4
    6a7c:	08 c0       	rjmp	.+16     	; 0x6a8e <vfprintf+0x55c>
    6a7e:	06 60       	ori	r16, 0x06	; 6
    6a80:	06 c0       	rjmp	.+12     	; 0x6a8e <vfprintf+0x55c>
    6a82:	28 e0       	ldi	r18, 0x08	; 8
    6a84:	30 e0       	ldi	r19, 0x00	; 0
    6a86:	05 c0       	rjmp	.+10     	; 0x6a92 <vfprintf+0x560>
    6a88:	20 e1       	ldi	r18, 0x10	; 16
    6a8a:	30 e0       	ldi	r19, 0x00	; 0
    6a8c:	02 c0       	rjmp	.+4      	; 0x6a92 <vfprintf+0x560>
    6a8e:	20 e1       	ldi	r18, 0x10	; 16
    6a90:	32 e0       	ldi	r19, 0x02	; 2
    6a92:	52 01       	movw	r10, r4
    6a94:	07 ff       	sbrs	r16, 7
    6a96:	09 c0       	rjmp	.+18     	; 0x6aaa <vfprintf+0x578>
    6a98:	f4 e0       	ldi	r31, 0x04	; 4
    6a9a:	af 0e       	add	r10, r31
    6a9c:	b1 1c       	adc	r11, r1
    6a9e:	f2 01       	movw	r30, r4
    6aa0:	60 81       	ld	r22, Z
    6aa2:	71 81       	ldd	r23, Z+1	; 0x01
    6aa4:	82 81       	ldd	r24, Z+2	; 0x02
    6aa6:	93 81       	ldd	r25, Z+3	; 0x03
    6aa8:	08 c0       	rjmp	.+16     	; 0x6aba <vfprintf+0x588>
    6aaa:	f2 e0       	ldi	r31, 0x02	; 2
    6aac:	af 0e       	add	r10, r31
    6aae:	b1 1c       	adc	r11, r1
    6ab0:	f2 01       	movw	r30, r4
    6ab2:	60 81       	ld	r22, Z
    6ab4:	71 81       	ldd	r23, Z+1	; 0x01
    6ab6:	80 e0       	ldi	r24, 0x00	; 0
    6ab8:	90 e0       	ldi	r25, 0x00	; 0
    6aba:	a3 01       	movw	r20, r6
    6abc:	0e 94 9d 3b 	call	0x773a	; 0x773a <__ultoa_invert>
    6ac0:	e8 2e       	mov	r14, r24
    6ac2:	e6 18       	sub	r14, r6
    6ac4:	0f 77       	andi	r16, 0x7F	; 127
    6ac6:	30 2e       	mov	r3, r16
    6ac8:	36 fe       	sbrs	r3, 6
    6aca:	0b c0       	rjmp	.+22     	; 0x6ae2 <vfprintf+0x5b0>
    6acc:	33 2d       	mov	r19, r3
    6ace:	3e 7f       	andi	r19, 0xFE	; 254
    6ad0:	e1 16       	cp	r14, r17
    6ad2:	50 f4       	brcc	.+20     	; 0x6ae8 <vfprintf+0x5b6>
    6ad4:	34 fe       	sbrs	r3, 4
    6ad6:	0a c0       	rjmp	.+20     	; 0x6aec <vfprintf+0x5ba>
    6ad8:	32 fc       	sbrc	r3, 2
    6ada:	08 c0       	rjmp	.+16     	; 0x6aec <vfprintf+0x5ba>
    6adc:	33 2d       	mov	r19, r3
    6ade:	3e 7e       	andi	r19, 0xEE	; 238
    6ae0:	05 c0       	rjmp	.+10     	; 0x6aec <vfprintf+0x5ba>
    6ae2:	0e 2d       	mov	r16, r14
    6ae4:	33 2d       	mov	r19, r3
    6ae6:	03 c0       	rjmp	.+6      	; 0x6aee <vfprintf+0x5bc>
    6ae8:	0e 2d       	mov	r16, r14
    6aea:	01 c0       	rjmp	.+2      	; 0x6aee <vfprintf+0x5bc>
    6aec:	01 2f       	mov	r16, r17
    6aee:	34 ff       	sbrs	r19, 4
    6af0:	0c c0       	rjmp	.+24     	; 0x6b0a <vfprintf+0x5d8>
    6af2:	fe 01       	movw	r30, r28
    6af4:	ee 0d       	add	r30, r14
    6af6:	f1 1d       	adc	r31, r1
    6af8:	80 81       	ld	r24, Z
    6afa:	80 33       	cpi	r24, 0x30	; 48
    6afc:	11 f4       	brne	.+4      	; 0x6b02 <vfprintf+0x5d0>
    6afe:	39 7e       	andi	r19, 0xE9	; 233
    6b00:	08 c0       	rjmp	.+16     	; 0x6b12 <vfprintf+0x5e0>
    6b02:	32 ff       	sbrs	r19, 2
    6b04:	05 c0       	rjmp	.+10     	; 0x6b10 <vfprintf+0x5de>
    6b06:	0e 5f       	subi	r16, 0xFE	; 254
    6b08:	04 c0       	rjmp	.+8      	; 0x6b12 <vfprintf+0x5e0>
    6b0a:	83 2f       	mov	r24, r19
    6b0c:	86 78       	andi	r24, 0x86	; 134
    6b0e:	09 f0       	breq	.+2      	; 0x6b12 <vfprintf+0x5e0>
    6b10:	0f 5f       	subi	r16, 0xFF	; 255
    6b12:	33 fd       	sbrc	r19, 3
    6b14:	13 c0       	rjmp	.+38     	; 0x6b3c <vfprintf+0x60a>
    6b16:	30 ff       	sbrs	r19, 0
    6b18:	06 c0       	rjmp	.+12     	; 0x6b26 <vfprintf+0x5f4>
    6b1a:	1e 2d       	mov	r17, r14
    6b1c:	0f 15       	cp	r16, r15
    6b1e:	18 f4       	brcc	.+6      	; 0x6b26 <vfprintf+0x5f4>
    6b20:	1f 0d       	add	r17, r15
    6b22:	10 1b       	sub	r17, r16
    6b24:	0f 2d       	mov	r16, r15
    6b26:	0f 15       	cp	r16, r15
    6b28:	68 f4       	brcc	.+26     	; 0x6b44 <vfprintf+0x612>
    6b2a:	b6 01       	movw	r22, r12
    6b2c:	80 e2       	ldi	r24, 0x20	; 32
    6b2e:	90 e0       	ldi	r25, 0x00	; 0
    6b30:	3b 8b       	std	Y+19, r19	; 0x13
    6b32:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6b36:	0f 5f       	subi	r16, 0xFF	; 255
    6b38:	3b 89       	ldd	r19, Y+19	; 0x13
    6b3a:	f5 cf       	rjmp	.-22     	; 0x6b26 <vfprintf+0x5f4>
    6b3c:	0f 15       	cp	r16, r15
    6b3e:	10 f4       	brcc	.+4      	; 0x6b44 <vfprintf+0x612>
    6b40:	f0 1a       	sub	r15, r16
    6b42:	01 c0       	rjmp	.+2      	; 0x6b46 <vfprintf+0x614>
    6b44:	f1 2c       	mov	r15, r1
    6b46:	34 ff       	sbrs	r19, 4
    6b48:	12 c0       	rjmp	.+36     	; 0x6b6e <vfprintf+0x63c>
    6b4a:	b6 01       	movw	r22, r12
    6b4c:	80 e3       	ldi	r24, 0x30	; 48
    6b4e:	90 e0       	ldi	r25, 0x00	; 0
    6b50:	3b 8b       	std	Y+19, r19	; 0x13
    6b52:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6b56:	3b 89       	ldd	r19, Y+19	; 0x13
    6b58:	32 ff       	sbrs	r19, 2
    6b5a:	17 c0       	rjmp	.+46     	; 0x6b8a <vfprintf+0x658>
    6b5c:	31 fd       	sbrc	r19, 1
    6b5e:	03 c0       	rjmp	.+6      	; 0x6b66 <vfprintf+0x634>
    6b60:	88 e7       	ldi	r24, 0x78	; 120
    6b62:	90 e0       	ldi	r25, 0x00	; 0
    6b64:	02 c0       	rjmp	.+4      	; 0x6b6a <vfprintf+0x638>
    6b66:	88 e5       	ldi	r24, 0x58	; 88
    6b68:	90 e0       	ldi	r25, 0x00	; 0
    6b6a:	b6 01       	movw	r22, r12
    6b6c:	0c c0       	rjmp	.+24     	; 0x6b86 <vfprintf+0x654>
    6b6e:	83 2f       	mov	r24, r19
    6b70:	86 78       	andi	r24, 0x86	; 134
    6b72:	59 f0       	breq	.+22     	; 0x6b8a <vfprintf+0x658>
    6b74:	31 ff       	sbrs	r19, 1
    6b76:	02 c0       	rjmp	.+4      	; 0x6b7c <vfprintf+0x64a>
    6b78:	8b e2       	ldi	r24, 0x2B	; 43
    6b7a:	01 c0       	rjmp	.+2      	; 0x6b7e <vfprintf+0x64c>
    6b7c:	80 e2       	ldi	r24, 0x20	; 32
    6b7e:	37 fd       	sbrc	r19, 7
    6b80:	8d e2       	ldi	r24, 0x2D	; 45
    6b82:	b6 01       	movw	r22, r12
    6b84:	90 e0       	ldi	r25, 0x00	; 0
    6b86:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6b8a:	e1 16       	cp	r14, r17
    6b8c:	38 f4       	brcc	.+14     	; 0x6b9c <vfprintf+0x66a>
    6b8e:	b6 01       	movw	r22, r12
    6b90:	80 e3       	ldi	r24, 0x30	; 48
    6b92:	90 e0       	ldi	r25, 0x00	; 0
    6b94:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6b98:	11 50       	subi	r17, 0x01	; 1
    6b9a:	f7 cf       	rjmp	.-18     	; 0x6b8a <vfprintf+0x658>
    6b9c:	ea 94       	dec	r14
    6b9e:	f3 01       	movw	r30, r6
    6ba0:	ee 0d       	add	r30, r14
    6ba2:	f1 1d       	adc	r31, r1
    6ba4:	80 81       	ld	r24, Z
    6ba6:	b6 01       	movw	r22, r12
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6bae:	e1 10       	cpse	r14, r1
    6bb0:	f5 cf       	rjmp	.-22     	; 0x6b9c <vfprintf+0x66a>
    6bb2:	14 c0       	rjmp	.+40     	; 0x6bdc <vfprintf+0x6aa>
    6bb4:	f4 e0       	ldi	r31, 0x04	; 4
    6bb6:	ff 15       	cp	r31, r15
    6bb8:	58 f5       	brcc	.+86     	; 0x6c10 <vfprintf+0x6de>
    6bba:	84 e0       	ldi	r24, 0x04	; 4
    6bbc:	f8 1a       	sub	r15, r24
    6bbe:	33 fe       	sbrs	r3, 3
    6bc0:	1e c0       	rjmp	.+60     	; 0x6bfe <vfprintf+0x6cc>
    6bc2:	21 10       	cpse	r2, r1
    6bc4:	26 c0       	rjmp	.+76     	; 0x6c12 <vfprintf+0x6e0>
    6bc6:	03 ff       	sbrs	r16, 3
    6bc8:	2a c0       	rjmp	.+84     	; 0x6c1e <vfprintf+0x6ec>
    6bca:	0c e5       	ldi	r16, 0x5C	; 92
    6bcc:	12 e0       	ldi	r17, 0x02	; 2
    6bce:	f3 2d       	mov	r31, r3
    6bd0:	f0 71       	andi	r31, 0x10	; 16
    6bd2:	3f 2e       	mov	r3, r31
    6bd4:	f8 01       	movw	r30, r16
    6bd6:	84 91       	lpm	r24, Z
    6bd8:	81 11       	cpse	r24, r1
    6bda:	24 c0       	rjmp	.+72     	; 0x6c24 <vfprintf+0x6f2>
    6bdc:	ff 20       	and	r15, r15
    6bde:	09 f4       	brne	.+2      	; 0x6be2 <vfprintf+0x6b0>
    6be0:	e5 cc       	rjmp	.-1590   	; 0x65ac <vfprintf+0x7a>
    6be2:	b6 01       	movw	r22, r12
    6be4:	80 e2       	ldi	r24, 0x20	; 32
    6be6:	90 e0       	ldi	r25, 0x00	; 0
    6be8:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6bec:	fa 94       	dec	r15
    6bee:	f6 cf       	rjmp	.-20     	; 0x6bdc <vfprintf+0x6aa>
    6bf0:	f6 01       	movw	r30, r12
    6bf2:	86 81       	ldd	r24, Z+6	; 0x06
    6bf4:	97 81       	ldd	r25, Z+7	; 0x07
    6bf6:	26 c0       	rjmp	.+76     	; 0x6c44 <vfprintf+0x712>
    6bf8:	8f ef       	ldi	r24, 0xFF	; 255
    6bfa:	9f ef       	ldi	r25, 0xFF	; 255
    6bfc:	23 c0       	rjmp	.+70     	; 0x6c44 <vfprintf+0x712>
    6bfe:	b6 01       	movw	r22, r12
    6c00:	80 e2       	ldi	r24, 0x20	; 32
    6c02:	90 e0       	ldi	r25, 0x00	; 0
    6c04:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6c08:	fa 94       	dec	r15
    6c0a:	f1 10       	cpse	r15, r1
    6c0c:	f8 cf       	rjmp	.-16     	; 0x6bfe <vfprintf+0x6cc>
    6c0e:	d9 cf       	rjmp	.-78     	; 0x6bc2 <vfprintf+0x690>
    6c10:	f1 2c       	mov	r15, r1
    6c12:	b6 01       	movw	r22, r12
    6c14:	82 2d       	mov	r24, r2
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6c1c:	d4 cf       	rjmp	.-88     	; 0x6bc6 <vfprintf+0x694>
    6c1e:	00 e6       	ldi	r16, 0x60	; 96
    6c20:	12 e0       	ldi	r17, 0x02	; 2
    6c22:	d5 cf       	rjmp	.-86     	; 0x6bce <vfprintf+0x69c>
    6c24:	31 10       	cpse	r3, r1
    6c26:	80 52       	subi	r24, 0x20	; 32
    6c28:	b6 01       	movw	r22, r12
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <fputc>
    6c30:	0f 5f       	subi	r16, 0xFF	; 255
    6c32:	1f 4f       	sbci	r17, 0xFF	; 255
    6c34:	cf cf       	rjmp	.-98     	; 0x6bd4 <vfprintf+0x6a2>
    6c36:	23 e0       	ldi	r18, 0x03	; 3
    6c38:	2f 15       	cp	r18, r15
    6c3a:	10 f4       	brcc	.+4      	; 0x6c40 <vfprintf+0x70e>
    6c3c:	83 e0       	ldi	r24, 0x03	; 3
    6c3e:	be cf       	rjmp	.-132    	; 0x6bbc <vfprintf+0x68a>
    6c40:	f1 2c       	mov	r15, r1
    6c42:	c1 cf       	rjmp	.-126    	; 0x6bc6 <vfprintf+0x694>
    6c44:	63 96       	adiw	r28, 0x13	; 19
    6c46:	cd bf       	out	0x3d, r28	; 61
    6c48:	de bf       	out	0x3e, r29	; 62
    6c4a:	df 91       	pop	r29
    6c4c:	cf 91       	pop	r28
    6c4e:	1f 91       	pop	r17
    6c50:	0f 91       	pop	r16
    6c52:	ff 90       	pop	r15
    6c54:	ef 90       	pop	r14
    6c56:	df 90       	pop	r13
    6c58:	cf 90       	pop	r12
    6c5a:	bf 90       	pop	r11
    6c5c:	af 90       	pop	r10
    6c5e:	9f 90       	pop	r9
    6c60:	8f 90       	pop	r8
    6c62:	7f 90       	pop	r7
    6c64:	6f 90       	pop	r6
    6c66:	5f 90       	pop	r5
    6c68:	4f 90       	pop	r4
    6c6a:	3f 90       	pop	r3
    6c6c:	2f 90       	pop	r2
    6c6e:	08 95       	ret

00006c70 <__mulhisi3>:
    6c70:	0e 94 40 36 	call	0x6c80	; 0x6c80 <__umulhisi3>
    6c74:	33 23       	and	r19, r19
    6c76:	12 f4       	brpl	.+4      	; 0x6c7c <__mulhisi3+0xc>
    6c78:	8a 1b       	sub	r24, r26
    6c7a:	9b 0b       	sbc	r25, r27
    6c7c:	0c 94 51 36 	jmp	0x6ca2	; 0x6ca2 <__usmulhisi3_tail>

00006c80 <__umulhisi3>:
    6c80:	a2 9f       	mul	r26, r18
    6c82:	b0 01       	movw	r22, r0
    6c84:	b3 9f       	mul	r27, r19
    6c86:	c0 01       	movw	r24, r0
    6c88:	a3 9f       	mul	r26, r19
    6c8a:	70 0d       	add	r23, r0
    6c8c:	81 1d       	adc	r24, r1
    6c8e:	11 24       	eor	r1, r1
    6c90:	91 1d       	adc	r25, r1
    6c92:	b2 9f       	mul	r27, r18
    6c94:	70 0d       	add	r23, r0
    6c96:	81 1d       	adc	r24, r1
    6c98:	11 24       	eor	r1, r1
    6c9a:	91 1d       	adc	r25, r1
    6c9c:	08 95       	ret

00006c9e <__usmulhisi3>:
    6c9e:	0e 94 40 36 	call	0x6c80	; 0x6c80 <__umulhisi3>

00006ca2 <__usmulhisi3_tail>:
    6ca2:	b7 ff       	sbrs	r27, 7
    6ca4:	08 95       	ret
    6ca6:	82 1b       	sub	r24, r18
    6ca8:	93 0b       	sbc	r25, r19
    6caa:	08 95       	ret

00006cac <__muluhisi3>:
    6cac:	0e 94 40 36 	call	0x6c80	; 0x6c80 <__umulhisi3>
    6cb0:	a5 9f       	mul	r26, r21
    6cb2:	90 0d       	add	r25, r0
    6cb4:	b4 9f       	mul	r27, r20
    6cb6:	90 0d       	add	r25, r0
    6cb8:	a4 9f       	mul	r26, r20
    6cba:	80 0d       	add	r24, r0
    6cbc:	91 1d       	adc	r25, r1
    6cbe:	11 24       	eor	r1, r1
    6cc0:	08 95       	ret

00006cc2 <__adddi3>:
    6cc2:	2a 0d       	add	r18, r10
    6cc4:	3b 1d       	adc	r19, r11
    6cc6:	4c 1d       	adc	r20, r12
    6cc8:	5d 1d       	adc	r21, r13
    6cca:	6e 1d       	adc	r22, r14
    6ccc:	7f 1d       	adc	r23, r15
    6cce:	80 1f       	adc	r24, r16
    6cd0:	91 1f       	adc	r25, r17
    6cd2:	08 95       	ret

00006cd4 <malloc>:
    6cd4:	cf 93       	push	r28
    6cd6:	df 93       	push	r29
    6cd8:	82 30       	cpi	r24, 0x02	; 2
    6cda:	91 05       	cpc	r25, r1
    6cdc:	10 f4       	brcc	.+4      	; 0x6ce2 <malloc+0xe>
    6cde:	82 e0       	ldi	r24, 0x02	; 2
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	e0 91 94 2e 	lds	r30, 0x2E94	; 0x802e94 <__flp>
    6ce6:	f0 91 95 2e 	lds	r31, 0x2E95	; 0x802e95 <__flp+0x1>
    6cea:	20 e0       	ldi	r18, 0x00	; 0
    6cec:	30 e0       	ldi	r19, 0x00	; 0
    6cee:	c0 e0       	ldi	r28, 0x00	; 0
    6cf0:	d0 e0       	ldi	r29, 0x00	; 0
    6cf2:	30 97       	sbiw	r30, 0x00	; 0
    6cf4:	11 f1       	breq	.+68     	; 0x6d3a <malloc+0x66>
    6cf6:	40 81       	ld	r20, Z
    6cf8:	51 81       	ldd	r21, Z+1	; 0x01
    6cfa:	48 17       	cp	r20, r24
    6cfc:	59 07       	cpc	r21, r25
    6cfe:	c0 f0       	brcs	.+48     	; 0x6d30 <malloc+0x5c>
    6d00:	48 17       	cp	r20, r24
    6d02:	59 07       	cpc	r21, r25
    6d04:	61 f4       	brne	.+24     	; 0x6d1e <malloc+0x4a>
    6d06:	82 81       	ldd	r24, Z+2	; 0x02
    6d08:	93 81       	ldd	r25, Z+3	; 0x03
    6d0a:	20 97       	sbiw	r28, 0x00	; 0
    6d0c:	19 f0       	breq	.+6      	; 0x6d14 <malloc+0x40>
    6d0e:	8a 83       	std	Y+2, r24	; 0x02
    6d10:	9b 83       	std	Y+3, r25	; 0x03
    6d12:	2b c0       	rjmp	.+86     	; 0x6d6a <malloc+0x96>
    6d14:	80 93 94 2e 	sts	0x2E94, r24	; 0x802e94 <__flp>
    6d18:	90 93 95 2e 	sts	0x2E95, r25	; 0x802e95 <__flp+0x1>
    6d1c:	26 c0       	rjmp	.+76     	; 0x6d6a <malloc+0x96>
    6d1e:	21 15       	cp	r18, r1
    6d20:	31 05       	cpc	r19, r1
    6d22:	19 f0       	breq	.+6      	; 0x6d2a <malloc+0x56>
    6d24:	42 17       	cp	r20, r18
    6d26:	53 07       	cpc	r21, r19
    6d28:	18 f4       	brcc	.+6      	; 0x6d30 <malloc+0x5c>
    6d2a:	9a 01       	movw	r18, r20
    6d2c:	be 01       	movw	r22, r28
    6d2e:	df 01       	movw	r26, r30
    6d30:	ef 01       	movw	r28, r30
    6d32:	02 80       	ldd	r0, Z+2	; 0x02
    6d34:	f3 81       	ldd	r31, Z+3	; 0x03
    6d36:	e0 2d       	mov	r30, r0
    6d38:	dc cf       	rjmp	.-72     	; 0x6cf2 <malloc+0x1e>
    6d3a:	21 15       	cp	r18, r1
    6d3c:	31 05       	cpc	r19, r1
    6d3e:	09 f1       	breq	.+66     	; 0x6d82 <malloc+0xae>
    6d40:	28 1b       	sub	r18, r24
    6d42:	39 0b       	sbc	r19, r25
    6d44:	24 30       	cpi	r18, 0x04	; 4
    6d46:	31 05       	cpc	r19, r1
    6d48:	90 f4       	brcc	.+36     	; 0x6d6e <malloc+0x9a>
    6d4a:	12 96       	adiw	r26, 0x02	; 2
    6d4c:	8d 91       	ld	r24, X+
    6d4e:	9c 91       	ld	r25, X
    6d50:	13 97       	sbiw	r26, 0x03	; 3
    6d52:	61 15       	cp	r22, r1
    6d54:	71 05       	cpc	r23, r1
    6d56:	21 f0       	breq	.+8      	; 0x6d60 <malloc+0x8c>
    6d58:	fb 01       	movw	r30, r22
    6d5a:	82 83       	std	Z+2, r24	; 0x02
    6d5c:	93 83       	std	Z+3, r25	; 0x03
    6d5e:	04 c0       	rjmp	.+8      	; 0x6d68 <malloc+0x94>
    6d60:	80 93 94 2e 	sts	0x2E94, r24	; 0x802e94 <__flp>
    6d64:	90 93 95 2e 	sts	0x2E95, r25	; 0x802e95 <__flp+0x1>
    6d68:	fd 01       	movw	r30, r26
    6d6a:	32 96       	adiw	r30, 0x02	; 2
    6d6c:	44 c0       	rjmp	.+136    	; 0x6df6 <malloc+0x122>
    6d6e:	fd 01       	movw	r30, r26
    6d70:	e2 0f       	add	r30, r18
    6d72:	f3 1f       	adc	r31, r19
    6d74:	81 93       	st	Z+, r24
    6d76:	91 93       	st	Z+, r25
    6d78:	22 50       	subi	r18, 0x02	; 2
    6d7a:	31 09       	sbc	r19, r1
    6d7c:	2d 93       	st	X+, r18
    6d7e:	3c 93       	st	X, r19
    6d80:	3a c0       	rjmp	.+116    	; 0x6df6 <malloc+0x122>
    6d82:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    6d86:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    6d8a:	23 2b       	or	r18, r19
    6d8c:	41 f4       	brne	.+16     	; 0x6d9e <malloc+0xca>
    6d8e:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    6d92:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6d96:	20 93 92 2e 	sts	0x2E92, r18	; 0x802e92 <__brkval>
    6d9a:	30 93 93 2e 	sts	0x2E93, r19	; 0x802e93 <__brkval+0x1>
    6d9e:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    6da2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6da6:	21 15       	cp	r18, r1
    6da8:	31 05       	cpc	r19, r1
    6daa:	41 f4       	brne	.+16     	; 0x6dbc <malloc+0xe8>
    6dac:	2d b7       	in	r18, 0x3d	; 61
    6dae:	3e b7       	in	r19, 0x3e	; 62
    6db0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6db4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6db8:	24 1b       	sub	r18, r20
    6dba:	35 0b       	sbc	r19, r21
    6dbc:	e0 91 92 2e 	lds	r30, 0x2E92	; 0x802e92 <__brkval>
    6dc0:	f0 91 93 2e 	lds	r31, 0x2E93	; 0x802e93 <__brkval+0x1>
    6dc4:	e2 17       	cp	r30, r18
    6dc6:	f3 07       	cpc	r31, r19
    6dc8:	a0 f4       	brcc	.+40     	; 0x6df2 <malloc+0x11e>
    6dca:	2e 1b       	sub	r18, r30
    6dcc:	3f 0b       	sbc	r19, r31
    6dce:	28 17       	cp	r18, r24
    6dd0:	39 07       	cpc	r19, r25
    6dd2:	78 f0       	brcs	.+30     	; 0x6df2 <malloc+0x11e>
    6dd4:	ac 01       	movw	r20, r24
    6dd6:	4e 5f       	subi	r20, 0xFE	; 254
    6dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    6dda:	24 17       	cp	r18, r20
    6ddc:	35 07       	cpc	r19, r21
    6dde:	48 f0       	brcs	.+18     	; 0x6df2 <malloc+0x11e>
    6de0:	4e 0f       	add	r20, r30
    6de2:	5f 1f       	adc	r21, r31
    6de4:	40 93 92 2e 	sts	0x2E92, r20	; 0x802e92 <__brkval>
    6de8:	50 93 93 2e 	sts	0x2E93, r21	; 0x802e93 <__brkval+0x1>
    6dec:	81 93       	st	Z+, r24
    6dee:	91 93       	st	Z+, r25
    6df0:	02 c0       	rjmp	.+4      	; 0x6df6 <malloc+0x122>
    6df2:	e0 e0       	ldi	r30, 0x00	; 0
    6df4:	f0 e0       	ldi	r31, 0x00	; 0
    6df6:	cf 01       	movw	r24, r30
    6df8:	df 91       	pop	r29
    6dfa:	cf 91       	pop	r28
    6dfc:	08 95       	ret

00006dfe <free>:
    6dfe:	0f 93       	push	r16
    6e00:	1f 93       	push	r17
    6e02:	cf 93       	push	r28
    6e04:	df 93       	push	r29
    6e06:	00 97       	sbiw	r24, 0x00	; 0
    6e08:	09 f4       	brne	.+2      	; 0x6e0c <free+0xe>
    6e0a:	8c c0       	rjmp	.+280    	; 0x6f24 <free+0x126>
    6e0c:	fc 01       	movw	r30, r24
    6e0e:	32 97       	sbiw	r30, 0x02	; 2
    6e10:	12 82       	std	Z+2, r1	; 0x02
    6e12:	13 82       	std	Z+3, r1	; 0x03
    6e14:	00 91 94 2e 	lds	r16, 0x2E94	; 0x802e94 <__flp>
    6e18:	10 91 95 2e 	lds	r17, 0x2E95	; 0x802e95 <__flp+0x1>
    6e1c:	01 15       	cp	r16, r1
    6e1e:	11 05       	cpc	r17, r1
    6e20:	81 f4       	brne	.+32     	; 0x6e42 <free+0x44>
    6e22:	20 81       	ld	r18, Z
    6e24:	31 81       	ldd	r19, Z+1	; 0x01
    6e26:	82 0f       	add	r24, r18
    6e28:	93 1f       	adc	r25, r19
    6e2a:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    6e2e:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    6e32:	28 17       	cp	r18, r24
    6e34:	39 07       	cpc	r19, r25
    6e36:	79 f5       	brne	.+94     	; 0x6e96 <free+0x98>
    6e38:	e0 93 92 2e 	sts	0x2E92, r30	; 0x802e92 <__brkval>
    6e3c:	f0 93 93 2e 	sts	0x2E93, r31	; 0x802e93 <__brkval+0x1>
    6e40:	71 c0       	rjmp	.+226    	; 0x6f24 <free+0x126>
    6e42:	d8 01       	movw	r26, r16
    6e44:	40 e0       	ldi	r20, 0x00	; 0
    6e46:	50 e0       	ldi	r21, 0x00	; 0
    6e48:	ae 17       	cp	r26, r30
    6e4a:	bf 07       	cpc	r27, r31
    6e4c:	50 f4       	brcc	.+20     	; 0x6e62 <free+0x64>
    6e4e:	12 96       	adiw	r26, 0x02	; 2
    6e50:	2d 91       	ld	r18, X+
    6e52:	3c 91       	ld	r19, X
    6e54:	13 97       	sbiw	r26, 0x03	; 3
    6e56:	ad 01       	movw	r20, r26
    6e58:	21 15       	cp	r18, r1
    6e5a:	31 05       	cpc	r19, r1
    6e5c:	09 f1       	breq	.+66     	; 0x6ea0 <free+0xa2>
    6e5e:	d9 01       	movw	r26, r18
    6e60:	f3 cf       	rjmp	.-26     	; 0x6e48 <free+0x4a>
    6e62:	9d 01       	movw	r18, r26
    6e64:	da 01       	movw	r26, r20
    6e66:	22 83       	std	Z+2, r18	; 0x02
    6e68:	33 83       	std	Z+3, r19	; 0x03
    6e6a:	60 81       	ld	r22, Z
    6e6c:	71 81       	ldd	r23, Z+1	; 0x01
    6e6e:	86 0f       	add	r24, r22
    6e70:	97 1f       	adc	r25, r23
    6e72:	82 17       	cp	r24, r18
    6e74:	93 07       	cpc	r25, r19
    6e76:	69 f4       	brne	.+26     	; 0x6e92 <free+0x94>
    6e78:	ec 01       	movw	r28, r24
    6e7a:	28 81       	ld	r18, Y
    6e7c:	39 81       	ldd	r19, Y+1	; 0x01
    6e7e:	26 0f       	add	r18, r22
    6e80:	37 1f       	adc	r19, r23
    6e82:	2e 5f       	subi	r18, 0xFE	; 254
    6e84:	3f 4f       	sbci	r19, 0xFF	; 255
    6e86:	20 83       	st	Z, r18
    6e88:	31 83       	std	Z+1, r19	; 0x01
    6e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    6e8e:	82 83       	std	Z+2, r24	; 0x02
    6e90:	93 83       	std	Z+3, r25	; 0x03
    6e92:	45 2b       	or	r20, r21
    6e94:	29 f4       	brne	.+10     	; 0x6ea0 <free+0xa2>
    6e96:	e0 93 94 2e 	sts	0x2E94, r30	; 0x802e94 <__flp>
    6e9a:	f0 93 95 2e 	sts	0x2E95, r31	; 0x802e95 <__flp+0x1>
    6e9e:	42 c0       	rjmp	.+132    	; 0x6f24 <free+0x126>
    6ea0:	12 96       	adiw	r26, 0x02	; 2
    6ea2:	ed 93       	st	X+, r30
    6ea4:	fc 93       	st	X, r31
    6ea6:	13 97       	sbiw	r26, 0x03	; 3
    6ea8:	ed 01       	movw	r28, r26
    6eaa:	49 91       	ld	r20, Y+
    6eac:	59 91       	ld	r21, Y+
    6eae:	9e 01       	movw	r18, r28
    6eb0:	24 0f       	add	r18, r20
    6eb2:	35 1f       	adc	r19, r21
    6eb4:	e2 17       	cp	r30, r18
    6eb6:	f3 07       	cpc	r31, r19
    6eb8:	71 f4       	brne	.+28     	; 0x6ed6 <free+0xd8>
    6eba:	80 81       	ld	r24, Z
    6ebc:	91 81       	ldd	r25, Z+1	; 0x01
    6ebe:	84 0f       	add	r24, r20
    6ec0:	95 1f       	adc	r25, r21
    6ec2:	02 96       	adiw	r24, 0x02	; 2
    6ec4:	8d 93       	st	X+, r24
    6ec6:	9c 93       	st	X, r25
    6ec8:	11 97       	sbiw	r26, 0x01	; 1
    6eca:	82 81       	ldd	r24, Z+2	; 0x02
    6ecc:	93 81       	ldd	r25, Z+3	; 0x03
    6ece:	12 96       	adiw	r26, 0x02	; 2
    6ed0:	8d 93       	st	X+, r24
    6ed2:	9c 93       	st	X, r25
    6ed4:	13 97       	sbiw	r26, 0x03	; 3
    6ed6:	e0 e0       	ldi	r30, 0x00	; 0
    6ed8:	f0 e0       	ldi	r31, 0x00	; 0
    6eda:	d8 01       	movw	r26, r16
    6edc:	12 96       	adiw	r26, 0x02	; 2
    6ede:	8d 91       	ld	r24, X+
    6ee0:	9c 91       	ld	r25, X
    6ee2:	13 97       	sbiw	r26, 0x03	; 3
    6ee4:	00 97       	sbiw	r24, 0x00	; 0
    6ee6:	19 f0       	breq	.+6      	; 0x6eee <free+0xf0>
    6ee8:	f8 01       	movw	r30, r16
    6eea:	8c 01       	movw	r16, r24
    6eec:	f6 cf       	rjmp	.-20     	; 0x6eda <free+0xdc>
    6eee:	8d 91       	ld	r24, X+
    6ef0:	9c 91       	ld	r25, X
    6ef2:	98 01       	movw	r18, r16
    6ef4:	2e 5f       	subi	r18, 0xFE	; 254
    6ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ef8:	82 0f       	add	r24, r18
    6efa:	93 1f       	adc	r25, r19
    6efc:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    6f00:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    6f04:	28 17       	cp	r18, r24
    6f06:	39 07       	cpc	r19, r25
    6f08:	69 f4       	brne	.+26     	; 0x6f24 <free+0x126>
    6f0a:	30 97       	sbiw	r30, 0x00	; 0
    6f0c:	29 f4       	brne	.+10     	; 0x6f18 <free+0x11a>
    6f0e:	10 92 94 2e 	sts	0x2E94, r1	; 0x802e94 <__flp>
    6f12:	10 92 95 2e 	sts	0x2E95, r1	; 0x802e95 <__flp+0x1>
    6f16:	02 c0       	rjmp	.+4      	; 0x6f1c <free+0x11e>
    6f18:	12 82       	std	Z+2, r1	; 0x02
    6f1a:	13 82       	std	Z+3, r1	; 0x03
    6f1c:	00 93 92 2e 	sts	0x2E92, r16	; 0x802e92 <__brkval>
    6f20:	10 93 93 2e 	sts	0x2E93, r17	; 0x802e93 <__brkval+0x1>
    6f24:	df 91       	pop	r29
    6f26:	cf 91       	pop	r28
    6f28:	1f 91       	pop	r17
    6f2a:	0f 91       	pop	r16
    6f2c:	08 95       	ret

00006f2e <realloc>:
    6f2e:	6f 92       	push	r6
    6f30:	7f 92       	push	r7
    6f32:	8f 92       	push	r8
    6f34:	9f 92       	push	r9
    6f36:	af 92       	push	r10
    6f38:	bf 92       	push	r11
    6f3a:	cf 92       	push	r12
    6f3c:	df 92       	push	r13
    6f3e:	ef 92       	push	r14
    6f40:	ff 92       	push	r15
    6f42:	0f 93       	push	r16
    6f44:	1f 93       	push	r17
    6f46:	cf 93       	push	r28
    6f48:	df 93       	push	r29
    6f4a:	ec 01       	movw	r28, r24
    6f4c:	00 97       	sbiw	r24, 0x00	; 0
    6f4e:	89 f4       	brne	.+34     	; 0x6f72 <realloc+0x44>
    6f50:	cb 01       	movw	r24, r22
    6f52:	df 91       	pop	r29
    6f54:	cf 91       	pop	r28
    6f56:	1f 91       	pop	r17
    6f58:	0f 91       	pop	r16
    6f5a:	ff 90       	pop	r15
    6f5c:	ef 90       	pop	r14
    6f5e:	df 90       	pop	r13
    6f60:	cf 90       	pop	r12
    6f62:	bf 90       	pop	r11
    6f64:	af 90       	pop	r10
    6f66:	9f 90       	pop	r9
    6f68:	8f 90       	pop	r8
    6f6a:	7f 90       	pop	r7
    6f6c:	6f 90       	pop	r6
    6f6e:	0c 94 6a 36 	jmp	0x6cd4	; 0x6cd4 <malloc>
    6f72:	fc 01       	movw	r30, r24
    6f74:	e6 0f       	add	r30, r22
    6f76:	f7 1f       	adc	r31, r23
    6f78:	9c 01       	movw	r18, r24
    6f7a:	22 50       	subi	r18, 0x02	; 2
    6f7c:	31 09       	sbc	r19, r1
    6f7e:	e2 17       	cp	r30, r18
    6f80:	f3 07       	cpc	r31, r19
    6f82:	08 f4       	brcc	.+2      	; 0x6f86 <realloc+0x58>
    6f84:	ac c0       	rjmp	.+344    	; 0x70de <realloc+0x1b0>
    6f86:	d9 01       	movw	r26, r18
    6f88:	0d 91       	ld	r16, X+
    6f8a:	1c 91       	ld	r17, X
    6f8c:	11 97       	sbiw	r26, 0x01	; 1
    6f8e:	06 17       	cp	r16, r22
    6f90:	17 07       	cpc	r17, r23
    6f92:	b0 f0       	brcs	.+44     	; 0x6fc0 <realloc+0x92>
    6f94:	05 30       	cpi	r16, 0x05	; 5
    6f96:	11 05       	cpc	r17, r1
    6f98:	08 f4       	brcc	.+2      	; 0x6f9c <realloc+0x6e>
    6f9a:	9f c0       	rjmp	.+318    	; 0x70da <realloc+0x1ac>
    6f9c:	c8 01       	movw	r24, r16
    6f9e:	04 97       	sbiw	r24, 0x04	; 4
    6fa0:	86 17       	cp	r24, r22
    6fa2:	97 07       	cpc	r25, r23
    6fa4:	08 f4       	brcc	.+2      	; 0x6fa8 <realloc+0x7a>
    6fa6:	99 c0       	rjmp	.+306    	; 0x70da <realloc+0x1ac>
    6fa8:	02 50       	subi	r16, 0x02	; 2
    6faa:	11 09       	sbc	r17, r1
    6fac:	06 1b       	sub	r16, r22
    6fae:	17 0b       	sbc	r17, r23
    6fb0:	01 93       	st	Z+, r16
    6fb2:	11 93       	st	Z+, r17
    6fb4:	6d 93       	st	X+, r22
    6fb6:	7c 93       	st	X, r23
    6fb8:	cf 01       	movw	r24, r30
    6fba:	0e 94 ff 36 	call	0x6dfe	; 0x6dfe <free>
    6fbe:	8d c0       	rjmp	.+282    	; 0x70da <realloc+0x1ac>
    6fc0:	5b 01       	movw	r10, r22
    6fc2:	a0 1a       	sub	r10, r16
    6fc4:	b1 0a       	sbc	r11, r17
    6fc6:	4c 01       	movw	r8, r24
    6fc8:	80 0e       	add	r8, r16
    6fca:	91 1e       	adc	r9, r17
    6fcc:	a0 91 94 2e 	lds	r26, 0x2E94	; 0x802e94 <__flp>
    6fd0:	b0 91 95 2e 	lds	r27, 0x2E95	; 0x802e95 <__flp+0x1>
    6fd4:	40 e0       	ldi	r20, 0x00	; 0
    6fd6:	50 e0       	ldi	r21, 0x00	; 0
    6fd8:	e1 2c       	mov	r14, r1
    6fda:	f1 2c       	mov	r15, r1
    6fdc:	10 97       	sbiw	r26, 0x00	; 0
    6fde:	09 f4       	brne	.+2      	; 0x6fe2 <realloc+0xb4>
    6fe0:	4a c0       	rjmp	.+148    	; 0x7076 <realloc+0x148>
    6fe2:	a8 15       	cp	r26, r8
    6fe4:	b9 05       	cpc	r27, r9
    6fe6:	d1 f5       	brne	.+116    	; 0x705c <realloc+0x12e>
    6fe8:	6d 90       	ld	r6, X+
    6fea:	7c 90       	ld	r7, X
    6fec:	11 97       	sbiw	r26, 0x01	; 1
    6fee:	63 01       	movw	r12, r6
    6ff0:	82 e0       	ldi	r24, 0x02	; 2
    6ff2:	c8 0e       	add	r12, r24
    6ff4:	d1 1c       	adc	r13, r1
    6ff6:	ca 14       	cp	r12, r10
    6ff8:	db 04       	cpc	r13, r11
    6ffa:	80 f1       	brcs	.+96     	; 0x705c <realloc+0x12e>
    6ffc:	a3 01       	movw	r20, r6
    6ffe:	4a 19       	sub	r20, r10
    7000:	5b 09       	sbc	r21, r11
    7002:	6a 01       	movw	r12, r20
    7004:	82 e0       	ldi	r24, 0x02	; 2
    7006:	c8 0e       	add	r12, r24
    7008:	d1 1c       	adc	r13, r1
    700a:	12 96       	adiw	r26, 0x02	; 2
    700c:	bc 90       	ld	r11, X
    700e:	12 97       	sbiw	r26, 0x02	; 2
    7010:	13 96       	adiw	r26, 0x03	; 3
    7012:	ac 91       	ld	r26, X
    7014:	b5 e0       	ldi	r27, 0x05	; 5
    7016:	cb 16       	cp	r12, r27
    7018:	d1 04       	cpc	r13, r1
    701a:	40 f0       	brcs	.+16     	; 0x702c <realloc+0xfe>
    701c:	b2 82       	std	Z+2, r11	; 0x02
    701e:	a3 83       	std	Z+3, r26	; 0x03
    7020:	40 83       	st	Z, r20
    7022:	51 83       	std	Z+1, r21	; 0x01
    7024:	d9 01       	movw	r26, r18
    7026:	6d 93       	st	X+, r22
    7028:	7c 93       	st	X, r23
    702a:	0a c0       	rjmp	.+20     	; 0x7040 <realloc+0x112>
    702c:	0e 5f       	subi	r16, 0xFE	; 254
    702e:	1f 4f       	sbci	r17, 0xFF	; 255
    7030:	c3 01       	movw	r24, r6
    7032:	80 0f       	add	r24, r16
    7034:	91 1f       	adc	r25, r17
    7036:	f9 01       	movw	r30, r18
    7038:	80 83       	st	Z, r24
    703a:	91 83       	std	Z+1, r25	; 0x01
    703c:	eb 2d       	mov	r30, r11
    703e:	fa 2f       	mov	r31, r26
    7040:	e1 14       	cp	r14, r1
    7042:	f1 04       	cpc	r15, r1
    7044:	31 f0       	breq	.+12     	; 0x7052 <realloc+0x124>
    7046:	d7 01       	movw	r26, r14
    7048:	12 96       	adiw	r26, 0x02	; 2
    704a:	ed 93       	st	X+, r30
    704c:	fc 93       	st	X, r31
    704e:	13 97       	sbiw	r26, 0x03	; 3
    7050:	44 c0       	rjmp	.+136    	; 0x70da <realloc+0x1ac>
    7052:	e0 93 94 2e 	sts	0x2E94, r30	; 0x802e94 <__flp>
    7056:	f0 93 95 2e 	sts	0x2E95, r31	; 0x802e95 <__flp+0x1>
    705a:	3f c0       	rjmp	.+126    	; 0x70da <realloc+0x1ac>
    705c:	8d 91       	ld	r24, X+
    705e:	9c 91       	ld	r25, X
    7060:	11 97       	sbiw	r26, 0x01	; 1
    7062:	48 17       	cp	r20, r24
    7064:	59 07       	cpc	r21, r25
    7066:	08 f4       	brcc	.+2      	; 0x706a <realloc+0x13c>
    7068:	ac 01       	movw	r20, r24
    706a:	7d 01       	movw	r14, r26
    706c:	12 96       	adiw	r26, 0x02	; 2
    706e:	0d 90       	ld	r0, X+
    7070:	bc 91       	ld	r27, X
    7072:	a0 2d       	mov	r26, r0
    7074:	b3 cf       	rjmp	.-154    	; 0x6fdc <realloc+0xae>
    7076:	80 91 92 2e 	lds	r24, 0x2E92	; 0x802e92 <__brkval>
    707a:	90 91 93 2e 	lds	r25, 0x2E93	; 0x802e93 <__brkval+0x1>
    707e:	88 15       	cp	r24, r8
    7080:	99 05       	cpc	r25, r9
    7082:	e1 f4       	brne	.+56     	; 0x70bc <realloc+0x18e>
    7084:	46 17       	cp	r20, r22
    7086:	57 07       	cpc	r21, r23
    7088:	c8 f4       	brcc	.+50     	; 0x70bc <realloc+0x18e>
    708a:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    708e:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    7092:	00 97       	sbiw	r24, 0x00	; 0
    7094:	41 f4       	brne	.+16     	; 0x70a6 <realloc+0x178>
    7096:	8d b7       	in	r24, 0x3d	; 61
    7098:	9e b7       	in	r25, 0x3e	; 62
    709a:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    709e:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    70a2:	84 1b       	sub	r24, r20
    70a4:	95 0b       	sbc	r25, r21
    70a6:	e8 17       	cp	r30, r24
    70a8:	f9 07       	cpc	r31, r25
    70aa:	c8 f4       	brcc	.+50     	; 0x70de <realloc+0x1b0>
    70ac:	e0 93 92 2e 	sts	0x2E92, r30	; 0x802e92 <__brkval>
    70b0:	f0 93 93 2e 	sts	0x2E93, r31	; 0x802e93 <__brkval+0x1>
    70b4:	f9 01       	movw	r30, r18
    70b6:	60 83       	st	Z, r22
    70b8:	71 83       	std	Z+1, r23	; 0x01
    70ba:	0f c0       	rjmp	.+30     	; 0x70da <realloc+0x1ac>
    70bc:	cb 01       	movw	r24, r22
    70be:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <malloc>
    70c2:	7c 01       	movw	r14, r24
    70c4:	00 97       	sbiw	r24, 0x00	; 0
    70c6:	59 f0       	breq	.+22     	; 0x70de <realloc+0x1b0>
    70c8:	a8 01       	movw	r20, r16
    70ca:	be 01       	movw	r22, r28
    70cc:	0e 94 97 3a 	call	0x752e	; 0x752e <memcpy>
    70d0:	ce 01       	movw	r24, r28
    70d2:	0e 94 ff 36 	call	0x6dfe	; 0x6dfe <free>
    70d6:	c7 01       	movw	r24, r14
    70d8:	04 c0       	rjmp	.+8      	; 0x70e2 <realloc+0x1b4>
    70da:	ce 01       	movw	r24, r28
    70dc:	02 c0       	rjmp	.+4      	; 0x70e2 <realloc+0x1b4>
    70de:	80 e0       	ldi	r24, 0x00	; 0
    70e0:	90 e0       	ldi	r25, 0x00	; 0
    70e2:	df 91       	pop	r29
    70e4:	cf 91       	pop	r28
    70e6:	1f 91       	pop	r17
    70e8:	0f 91       	pop	r16
    70ea:	ff 90       	pop	r15
    70ec:	ef 90       	pop	r14
    70ee:	df 90       	pop	r13
    70f0:	cf 90       	pop	r12
    70f2:	bf 90       	pop	r11
    70f4:	af 90       	pop	r10
    70f6:	9f 90       	pop	r9
    70f8:	8f 90       	pop	r8
    70fa:	7f 90       	pop	r7
    70fc:	6f 90       	pop	r6
    70fe:	08 95       	ret

00007100 <strtol>:
    7100:	2f 92       	push	r2
    7102:	3f 92       	push	r3
    7104:	4f 92       	push	r4
    7106:	5f 92       	push	r5
    7108:	6f 92       	push	r6
    710a:	7f 92       	push	r7
    710c:	8f 92       	push	r8
    710e:	9f 92       	push	r9
    7110:	af 92       	push	r10
    7112:	bf 92       	push	r11
    7114:	cf 92       	push	r12
    7116:	df 92       	push	r13
    7118:	ef 92       	push	r14
    711a:	ff 92       	push	r15
    711c:	0f 93       	push	r16
    711e:	1f 93       	push	r17
    7120:	cf 93       	push	r28
    7122:	df 93       	push	r29
    7124:	5c 01       	movw	r10, r24
    7126:	6b 01       	movw	r12, r22
    7128:	7a 01       	movw	r14, r20
    712a:	61 15       	cp	r22, r1
    712c:	71 05       	cpc	r23, r1
    712e:	19 f0       	breq	.+6      	; 0x7136 <strtol+0x36>
    7130:	fb 01       	movw	r30, r22
    7132:	80 83       	st	Z, r24
    7134:	91 83       	std	Z+1, r25	; 0x01
    7136:	e1 14       	cp	r14, r1
    7138:	f1 04       	cpc	r15, r1
    713a:	29 f0       	breq	.+10     	; 0x7146 <strtol+0x46>
    713c:	c7 01       	movw	r24, r14
    713e:	02 97       	sbiw	r24, 0x02	; 2
    7140:	83 97       	sbiw	r24, 0x23	; 35
    7142:	08 f0       	brcs	.+2      	; 0x7146 <strtol+0x46>
    7144:	f1 c0       	rjmp	.+482    	; 0x7328 <strtol+0x228>
    7146:	e5 01       	movw	r28, r10
    7148:	21 96       	adiw	r28, 0x01	; 1
    714a:	f5 01       	movw	r30, r10
    714c:	10 81       	ld	r17, Z
    714e:	81 2f       	mov	r24, r17
    7150:	90 e0       	ldi	r25, 0x00	; 0
    7152:	0e 94 83 3a 	call	0x7506	; 0x7506 <isspace>
    7156:	89 2b       	or	r24, r25
    7158:	11 f0       	breq	.+4      	; 0x715e <strtol+0x5e>
    715a:	5e 01       	movw	r10, r28
    715c:	f4 cf       	rjmp	.-24     	; 0x7146 <strtol+0x46>
    715e:	1d 32       	cpi	r17, 0x2D	; 45
    7160:	29 f4       	brne	.+10     	; 0x716c <strtol+0x6c>
    7162:	21 96       	adiw	r28, 0x01	; 1
    7164:	f5 01       	movw	r30, r10
    7166:	11 81       	ldd	r17, Z+1	; 0x01
    7168:	01 e0       	ldi	r16, 0x01	; 1
    716a:	07 c0       	rjmp	.+14     	; 0x717a <strtol+0x7a>
    716c:	1b 32       	cpi	r17, 0x2B	; 43
    716e:	21 f4       	brne	.+8      	; 0x7178 <strtol+0x78>
    7170:	e5 01       	movw	r28, r10
    7172:	22 96       	adiw	r28, 0x02	; 2
    7174:	f5 01       	movw	r30, r10
    7176:	11 81       	ldd	r17, Z+1	; 0x01
    7178:	00 e0       	ldi	r16, 0x00	; 0
    717a:	e1 14       	cp	r14, r1
    717c:	f1 04       	cpc	r15, r1
    717e:	59 f1       	breq	.+86     	; 0x71d6 <strtol+0xd6>
    7180:	f0 e1       	ldi	r31, 0x10	; 16
    7182:	ef 16       	cp	r14, r31
    7184:	f1 04       	cpc	r15, r1
    7186:	61 f4       	brne	.+24     	; 0x71a0 <strtol+0xa0>
    7188:	10 33       	cpi	r17, 0x30	; 48
    718a:	e1 f4       	brne	.+56     	; 0x71c4 <strtol+0xc4>
    718c:	88 81       	ld	r24, Y
    718e:	8f 7d       	andi	r24, 0xDF	; 223
    7190:	88 35       	cpi	r24, 0x58	; 88
    7192:	69 f5       	brne	.+90     	; 0x71ee <strtol+0xee>
    7194:	19 81       	ldd	r17, Y+1	; 0x01
    7196:	22 96       	adiw	r28, 0x02	; 2
    7198:	02 60       	ori	r16, 0x02	; 2
    719a:	70 e1       	ldi	r23, 0x10	; 16
    719c:	e7 2e       	mov	r14, r23
    719e:	f1 2c       	mov	r15, r1
    71a0:	88 e0       	ldi	r24, 0x08	; 8
    71a2:	e8 16       	cp	r14, r24
    71a4:	f1 04       	cpc	r15, r1
    71a6:	39 f1       	breq	.+78     	; 0x71f6 <strtol+0xf6>
    71a8:	2c f4       	brge	.+10     	; 0x71b4 <strtol+0xb4>
    71aa:	f2 e0       	ldi	r31, 0x02	; 2
    71ac:	ef 16       	cp	r14, r31
    71ae:	f1 04       	cpc	r15, r1
    71b0:	c9 f1       	breq	.+114    	; 0x7224 <strtol+0x124>
    71b2:	2a c0       	rjmp	.+84     	; 0x7208 <strtol+0x108>
    71b4:	8a e0       	ldi	r24, 0x0A	; 10
    71b6:	e8 16       	cp	r14, r24
    71b8:	f1 04       	cpc	r15, r1
    71ba:	79 f0       	breq	.+30     	; 0x71da <strtol+0xda>
    71bc:	e0 e1       	ldi	r30, 0x10	; 16
    71be:	ee 16       	cp	r14, r30
    71c0:	f1 04       	cpc	r15, r1
    71c2:	11 f5       	brne	.+68     	; 0x7208 <strtol+0x108>
    71c4:	50 e1       	ldi	r21, 0x10	; 16
    71c6:	e5 2e       	mov	r14, r21
    71c8:	f1 2c       	mov	r15, r1
    71ca:	81 2c       	mov	r8, r1
    71cc:	91 2c       	mov	r9, r1
    71ce:	a1 2c       	mov	r10, r1
    71d0:	68 e0       	ldi	r22, 0x08	; 8
    71d2:	b6 2e       	mov	r11, r22
    71d4:	2c c0       	rjmp	.+88     	; 0x722e <strtol+0x12e>
    71d6:	10 33       	cpi	r17, 0x30	; 48
    71d8:	c9 f2       	breq	.-78     	; 0x718c <strtol+0x8c>
    71da:	3a e0       	ldi	r19, 0x0A	; 10
    71dc:	e3 2e       	mov	r14, r19
    71de:	f1 2c       	mov	r15, r1
    71e0:	4c ec       	ldi	r20, 0xCC	; 204
    71e2:	84 2e       	mov	r8, r20
    71e4:	98 2c       	mov	r9, r8
    71e6:	a8 2c       	mov	r10, r8
    71e8:	4c e0       	ldi	r20, 0x0C	; 12
    71ea:	b4 2e       	mov	r11, r20
    71ec:	20 c0       	rjmp	.+64     	; 0x722e <strtol+0x12e>
    71ee:	10 e3       	ldi	r17, 0x30	; 48
    71f0:	e1 14       	cp	r14, r1
    71f2:	f1 04       	cpc	r15, r1
    71f4:	a9 f6       	brne	.-86     	; 0x71a0 <strtol+0xa0>
    71f6:	98 e0       	ldi	r25, 0x08	; 8
    71f8:	e9 2e       	mov	r14, r25
    71fa:	f1 2c       	mov	r15, r1
    71fc:	81 2c       	mov	r8, r1
    71fe:	91 2c       	mov	r9, r1
    7200:	a1 2c       	mov	r10, r1
    7202:	20 e1       	ldi	r18, 0x10	; 16
    7204:	b2 2e       	mov	r11, r18
    7206:	13 c0       	rjmp	.+38     	; 0x722e <strtol+0x12e>
    7208:	60 e0       	ldi	r22, 0x00	; 0
    720a:	70 e0       	ldi	r23, 0x00	; 0
    720c:	80 e0       	ldi	r24, 0x00	; 0
    720e:	90 e8       	ldi	r25, 0x80	; 128
    7210:	97 01       	movw	r18, r14
    7212:	0f 2c       	mov	r0, r15
    7214:	00 0c       	add	r0, r0
    7216:	44 0b       	sbc	r20, r20
    7218:	55 0b       	sbc	r21, r21
    721a:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <__udivmodsi4>
    721e:	49 01       	movw	r8, r18
    7220:	5a 01       	movw	r10, r20
    7222:	05 c0       	rjmp	.+10     	; 0x722e <strtol+0x12e>
    7224:	81 2c       	mov	r8, r1
    7226:	91 2c       	mov	r9, r1
    7228:	a1 2c       	mov	r10, r1
    722a:	80 e4       	ldi	r24, 0x40	; 64
    722c:	b8 2e       	mov	r11, r24
    722e:	60 e0       	ldi	r22, 0x00	; 0
    7230:	20 e0       	ldi	r18, 0x00	; 0
    7232:	30 e0       	ldi	r19, 0x00	; 0
    7234:	a9 01       	movw	r20, r18
    7236:	27 01       	movw	r4, r14
    7238:	0f 2c       	mov	r0, r15
    723a:	00 0c       	add	r0, r0
    723c:	66 08       	sbc	r6, r6
    723e:	77 08       	sbc	r7, r7
    7240:	1e 01       	movw	r2, r28
    7242:	e0 ed       	ldi	r30, 0xD0	; 208
    7244:	e1 0f       	add	r30, r17
    7246:	ea 30       	cpi	r30, 0x0A	; 10
    7248:	60 f0       	brcs	.+24     	; 0x7262 <strtol+0x162>
    724a:	8f eb       	ldi	r24, 0xBF	; 191
    724c:	81 0f       	add	r24, r17
    724e:	8a 31       	cpi	r24, 0x1A	; 26
    7250:	10 f4       	brcc	.+4      	; 0x7256 <strtol+0x156>
    7252:	e9 ec       	ldi	r30, 0xC9	; 201
    7254:	05 c0       	rjmp	.+10     	; 0x7260 <strtol+0x160>
    7256:	8f e9       	ldi	r24, 0x9F	; 159
    7258:	81 0f       	add	r24, r17
    725a:	8a 31       	cpi	r24, 0x1A	; 26
    725c:	28 f5       	brcc	.+74     	; 0x72a8 <strtol+0x1a8>
    725e:	e9 ea       	ldi	r30, 0xA9	; 169
    7260:	e1 0f       	add	r30, r17
    7262:	8e 2f       	mov	r24, r30
    7264:	90 e0       	ldi	r25, 0x00	; 0
    7266:	8e 15       	cp	r24, r14
    7268:	9f 05       	cpc	r25, r15
    726a:	f4 f4       	brge	.+60     	; 0x72a8 <strtol+0x1a8>
    726c:	67 fd       	sbrc	r22, 7
    726e:	18 c0       	rjmp	.+48     	; 0x72a0 <strtol+0x1a0>
    7270:	82 16       	cp	r8, r18
    7272:	93 06       	cpc	r9, r19
    7274:	a4 06       	cpc	r10, r20
    7276:	b5 06       	cpc	r11, r21
    7278:	90 f0       	brcs	.+36     	; 0x729e <strtol+0x19e>
    727a:	c3 01       	movw	r24, r6
    727c:	b2 01       	movw	r22, r4
    727e:	0e 94 58 3c 	call	0x78b0	; 0x78b0 <__mulsi3>
    7282:	9b 01       	movw	r18, r22
    7284:	ac 01       	movw	r20, r24
    7286:	2e 0f       	add	r18, r30
    7288:	31 1d       	adc	r19, r1
    728a:	41 1d       	adc	r20, r1
    728c:	51 1d       	adc	r21, r1
    728e:	21 30       	cpi	r18, 0x01	; 1
    7290:	31 05       	cpc	r19, r1
    7292:	41 05       	cpc	r20, r1
    7294:	f0 e8       	ldi	r31, 0x80	; 128
    7296:	5f 07       	cpc	r21, r31
    7298:	10 f4       	brcc	.+4      	; 0x729e <strtol+0x19e>
    729a:	61 e0       	ldi	r22, 0x01	; 1
    729c:	01 c0       	rjmp	.+2      	; 0x72a0 <strtol+0x1a0>
    729e:	6f ef       	ldi	r22, 0xFF	; 255
    72a0:	21 96       	adiw	r28, 0x01	; 1
    72a2:	f1 01       	movw	r30, r2
    72a4:	10 81       	ld	r17, Z
    72a6:	cc cf       	rjmp	.-104    	; 0x7240 <strtol+0x140>
    72a8:	80 2f       	mov	r24, r16
    72aa:	81 70       	andi	r24, 0x01	; 1
    72ac:	c1 14       	cp	r12, r1
    72ae:	d1 04       	cpc	r13, r1
    72b0:	71 f0       	breq	.+28     	; 0x72ce <strtol+0x1ce>
    72b2:	66 23       	and	r22, r22
    72b4:	29 f0       	breq	.+10     	; 0x72c0 <strtol+0x1c0>
    72b6:	21 97       	sbiw	r28, 0x01	; 1
    72b8:	f6 01       	movw	r30, r12
    72ba:	c0 83       	st	Z, r28
    72bc:	d1 83       	std	Z+1, r29	; 0x01
    72be:	07 c0       	rjmp	.+14     	; 0x72ce <strtol+0x1ce>
    72c0:	01 ff       	sbrs	r16, 1
    72c2:	19 c0       	rjmp	.+50     	; 0x72f6 <strtol+0x1f6>
    72c4:	22 97       	sbiw	r28, 0x02	; 2
    72c6:	f6 01       	movw	r30, r12
    72c8:	c0 83       	st	Z, r28
    72ca:	d1 83       	std	Z+1, r29	; 0x01
    72cc:	14 c0       	rjmp	.+40     	; 0x72f6 <strtol+0x1f6>
    72ce:	67 ff       	sbrs	r22, 7
    72d0:	12 c0       	rjmp	.+36     	; 0x72f6 <strtol+0x1f6>
    72d2:	81 11       	cpse	r24, r1
    72d4:	05 c0       	rjmp	.+10     	; 0x72e0 <strtol+0x1e0>
    72d6:	2f ef       	ldi	r18, 0xFF	; 255
    72d8:	3f ef       	ldi	r19, 0xFF	; 255
    72da:	4f ef       	ldi	r20, 0xFF	; 255
    72dc:	5f e7       	ldi	r21, 0x7F	; 127
    72de:	04 c0       	rjmp	.+8      	; 0x72e8 <strtol+0x1e8>
    72e0:	20 e0       	ldi	r18, 0x00	; 0
    72e2:	30 e0       	ldi	r19, 0x00	; 0
    72e4:	40 e0       	ldi	r20, 0x00	; 0
    72e6:	50 e8       	ldi	r21, 0x80	; 128
    72e8:	82 e2       	ldi	r24, 0x22	; 34
    72ea:	90 e0       	ldi	r25, 0x00	; 0
    72ec:	80 93 96 2e 	sts	0x2E96, r24	; 0x802e96 <errno>
    72f0:	90 93 97 2e 	sts	0x2E97, r25	; 0x802e97 <errno+0x1>
    72f4:	16 c0       	rjmp	.+44     	; 0x7322 <strtol+0x222>
    72f6:	88 23       	and	r24, r24
    72f8:	41 f0       	breq	.+16     	; 0x730a <strtol+0x20a>
    72fa:	50 95       	com	r21
    72fc:	40 95       	com	r20
    72fe:	30 95       	com	r19
    7300:	21 95       	neg	r18
    7302:	3f 4f       	sbci	r19, 0xFF	; 255
    7304:	4f 4f       	sbci	r20, 0xFF	; 255
    7306:	5f 4f       	sbci	r21, 0xFF	; 255
    7308:	0c c0       	rjmp	.+24     	; 0x7322 <strtol+0x222>
    730a:	57 ff       	sbrs	r21, 7
    730c:	0a c0       	rjmp	.+20     	; 0x7322 <strtol+0x222>
    730e:	82 e2       	ldi	r24, 0x22	; 34
    7310:	90 e0       	ldi	r25, 0x00	; 0
    7312:	80 93 96 2e 	sts	0x2E96, r24	; 0x802e96 <errno>
    7316:	90 93 97 2e 	sts	0x2E97, r25	; 0x802e97 <errno+0x1>
    731a:	2f ef       	ldi	r18, 0xFF	; 255
    731c:	3f ef       	ldi	r19, 0xFF	; 255
    731e:	4f ef       	ldi	r20, 0xFF	; 255
    7320:	5f e7       	ldi	r21, 0x7F	; 127
    7322:	b9 01       	movw	r22, r18
    7324:	ca 01       	movw	r24, r20
    7326:	04 c0       	rjmp	.+8      	; 0x7330 <strtol+0x230>
    7328:	60 e0       	ldi	r22, 0x00	; 0
    732a:	70 e0       	ldi	r23, 0x00	; 0
    732c:	80 e0       	ldi	r24, 0x00	; 0
    732e:	90 e0       	ldi	r25, 0x00	; 0
    7330:	df 91       	pop	r29
    7332:	cf 91       	pop	r28
    7334:	1f 91       	pop	r17
    7336:	0f 91       	pop	r16
    7338:	ff 90       	pop	r15
    733a:	ef 90       	pop	r14
    733c:	df 90       	pop	r13
    733e:	cf 90       	pop	r12
    7340:	bf 90       	pop	r11
    7342:	af 90       	pop	r10
    7344:	9f 90       	pop	r9
    7346:	8f 90       	pop	r8
    7348:	7f 90       	pop	r7
    734a:	6f 90       	pop	r6
    734c:	5f 90       	pop	r5
    734e:	4f 90       	pop	r4
    7350:	3f 90       	pop	r3
    7352:	2f 90       	pop	r2
    7354:	08 95       	ret

00007356 <__ftoa_engine>:
    7356:	28 30       	cpi	r18, 0x08	; 8
    7358:	08 f0       	brcs	.+2      	; 0x735c <__ftoa_engine+0x6>
    735a:	27 e0       	ldi	r18, 0x07	; 7
    735c:	33 27       	eor	r19, r19
    735e:	da 01       	movw	r26, r20
    7360:	99 0f       	add	r25, r25
    7362:	31 1d       	adc	r19, r1
    7364:	87 fd       	sbrc	r24, 7
    7366:	91 60       	ori	r25, 0x01	; 1
    7368:	00 96       	adiw	r24, 0x00	; 0
    736a:	61 05       	cpc	r22, r1
    736c:	71 05       	cpc	r23, r1
    736e:	39 f4       	brne	.+14     	; 0x737e <__ftoa_engine+0x28>
    7370:	32 60       	ori	r19, 0x02	; 2
    7372:	2e 5f       	subi	r18, 0xFE	; 254
    7374:	3d 93       	st	X+, r19
    7376:	30 e3       	ldi	r19, 0x30	; 48
    7378:	2a 95       	dec	r18
    737a:	e1 f7       	brne	.-8      	; 0x7374 <__ftoa_engine+0x1e>
    737c:	08 95       	ret
    737e:	9f 3f       	cpi	r25, 0xFF	; 255
    7380:	30 f0       	brcs	.+12     	; 0x738e <__ftoa_engine+0x38>
    7382:	80 38       	cpi	r24, 0x80	; 128
    7384:	71 05       	cpc	r23, r1
    7386:	61 05       	cpc	r22, r1
    7388:	09 f0       	breq	.+2      	; 0x738c <__ftoa_engine+0x36>
    738a:	3c 5f       	subi	r19, 0xFC	; 252
    738c:	3c 5f       	subi	r19, 0xFC	; 252
    738e:	3d 93       	st	X+, r19
    7390:	91 30       	cpi	r25, 0x01	; 1
    7392:	08 f0       	brcs	.+2      	; 0x7396 <__ftoa_engine+0x40>
    7394:	80 68       	ori	r24, 0x80	; 128
    7396:	91 1d       	adc	r25, r1
    7398:	df 93       	push	r29
    739a:	cf 93       	push	r28
    739c:	1f 93       	push	r17
    739e:	0f 93       	push	r16
    73a0:	ff 92       	push	r15
    73a2:	ef 92       	push	r14
    73a4:	19 2f       	mov	r17, r25
    73a6:	98 7f       	andi	r25, 0xF8	; 248
    73a8:	96 95       	lsr	r25
    73aa:	e9 2f       	mov	r30, r25
    73ac:	96 95       	lsr	r25
    73ae:	96 95       	lsr	r25
    73b0:	e9 0f       	add	r30, r25
    73b2:	ff 27       	eor	r31, r31
    73b4:	e2 54       	subi	r30, 0x42	; 66
    73b6:	fd 4f       	sbci	r31, 0xFD	; 253
    73b8:	99 27       	eor	r25, r25
    73ba:	33 27       	eor	r19, r19
    73bc:	ee 24       	eor	r14, r14
    73be:	ff 24       	eor	r15, r15
    73c0:	a7 01       	movw	r20, r14
    73c2:	e7 01       	movw	r28, r14
    73c4:	05 90       	lpm	r0, Z+
    73c6:	08 94       	sec
    73c8:	07 94       	ror	r0
    73ca:	28 f4       	brcc	.+10     	; 0x73d6 <__ftoa_engine+0x80>
    73cc:	36 0f       	add	r19, r22
    73ce:	e7 1e       	adc	r14, r23
    73d0:	f8 1e       	adc	r15, r24
    73d2:	49 1f       	adc	r20, r25
    73d4:	51 1d       	adc	r21, r1
    73d6:	66 0f       	add	r22, r22
    73d8:	77 1f       	adc	r23, r23
    73da:	88 1f       	adc	r24, r24
    73dc:	99 1f       	adc	r25, r25
    73de:	06 94       	lsr	r0
    73e0:	a1 f7       	brne	.-24     	; 0x73ca <__ftoa_engine+0x74>
    73e2:	05 90       	lpm	r0, Z+
    73e4:	07 94       	ror	r0
    73e6:	28 f4       	brcc	.+10     	; 0x73f2 <__ftoa_engine+0x9c>
    73e8:	e7 0e       	add	r14, r23
    73ea:	f8 1e       	adc	r15, r24
    73ec:	49 1f       	adc	r20, r25
    73ee:	56 1f       	adc	r21, r22
    73f0:	c1 1d       	adc	r28, r1
    73f2:	77 0f       	add	r23, r23
    73f4:	88 1f       	adc	r24, r24
    73f6:	99 1f       	adc	r25, r25
    73f8:	66 1f       	adc	r22, r22
    73fa:	06 94       	lsr	r0
    73fc:	a1 f7       	brne	.-24     	; 0x73e6 <__ftoa_engine+0x90>
    73fe:	05 90       	lpm	r0, Z+
    7400:	07 94       	ror	r0
    7402:	28 f4       	brcc	.+10     	; 0x740e <__ftoa_engine+0xb8>
    7404:	f8 0e       	add	r15, r24
    7406:	49 1f       	adc	r20, r25
    7408:	56 1f       	adc	r21, r22
    740a:	c7 1f       	adc	r28, r23
    740c:	d1 1d       	adc	r29, r1
    740e:	88 0f       	add	r24, r24
    7410:	99 1f       	adc	r25, r25
    7412:	66 1f       	adc	r22, r22
    7414:	77 1f       	adc	r23, r23
    7416:	06 94       	lsr	r0
    7418:	a1 f7       	brne	.-24     	; 0x7402 <__ftoa_engine+0xac>
    741a:	05 90       	lpm	r0, Z+
    741c:	07 94       	ror	r0
    741e:	20 f4       	brcc	.+8      	; 0x7428 <__ftoa_engine+0xd2>
    7420:	49 0f       	add	r20, r25
    7422:	56 1f       	adc	r21, r22
    7424:	c7 1f       	adc	r28, r23
    7426:	d8 1f       	adc	r29, r24
    7428:	99 0f       	add	r25, r25
    742a:	66 1f       	adc	r22, r22
    742c:	77 1f       	adc	r23, r23
    742e:	88 1f       	adc	r24, r24
    7430:	06 94       	lsr	r0
    7432:	a9 f7       	brne	.-22     	; 0x741e <__ftoa_engine+0xc8>
    7434:	84 91       	lpm	r24, Z
    7436:	10 95       	com	r17
    7438:	17 70       	andi	r17, 0x07	; 7
    743a:	41 f0       	breq	.+16     	; 0x744c <__ftoa_engine+0xf6>
    743c:	d6 95       	lsr	r29
    743e:	c7 95       	ror	r28
    7440:	57 95       	ror	r21
    7442:	47 95       	ror	r20
    7444:	f7 94       	ror	r15
    7446:	e7 94       	ror	r14
    7448:	1a 95       	dec	r17
    744a:	c1 f7       	brne	.-16     	; 0x743c <__ftoa_engine+0xe6>
    744c:	e4 e6       	ldi	r30, 0x64	; 100
    744e:	f2 e0       	ldi	r31, 0x02	; 2
    7450:	68 94       	set
    7452:	15 90       	lpm	r1, Z+
    7454:	15 91       	lpm	r17, Z+
    7456:	35 91       	lpm	r19, Z+
    7458:	65 91       	lpm	r22, Z+
    745a:	95 91       	lpm	r25, Z+
    745c:	05 90       	lpm	r0, Z+
    745e:	7f e2       	ldi	r23, 0x2F	; 47
    7460:	73 95       	inc	r23
    7462:	e1 18       	sub	r14, r1
    7464:	f1 0a       	sbc	r15, r17
    7466:	43 0b       	sbc	r20, r19
    7468:	56 0b       	sbc	r21, r22
    746a:	c9 0b       	sbc	r28, r25
    746c:	d0 09       	sbc	r29, r0
    746e:	c0 f7       	brcc	.-16     	; 0x7460 <__ftoa_engine+0x10a>
    7470:	e1 0c       	add	r14, r1
    7472:	f1 1e       	adc	r15, r17
    7474:	43 1f       	adc	r20, r19
    7476:	56 1f       	adc	r21, r22
    7478:	c9 1f       	adc	r28, r25
    747a:	d0 1d       	adc	r29, r0
    747c:	7e f4       	brtc	.+30     	; 0x749c <__ftoa_engine+0x146>
    747e:	70 33       	cpi	r23, 0x30	; 48
    7480:	11 f4       	brne	.+4      	; 0x7486 <__ftoa_engine+0x130>
    7482:	8a 95       	dec	r24
    7484:	e6 cf       	rjmp	.-52     	; 0x7452 <__ftoa_engine+0xfc>
    7486:	e8 94       	clt
    7488:	01 50       	subi	r16, 0x01	; 1
    748a:	30 f0       	brcs	.+12     	; 0x7498 <__ftoa_engine+0x142>
    748c:	08 0f       	add	r16, r24
    748e:	0a f4       	brpl	.+2      	; 0x7492 <__ftoa_engine+0x13c>
    7490:	00 27       	eor	r16, r16
    7492:	02 17       	cp	r16, r18
    7494:	08 f4       	brcc	.+2      	; 0x7498 <__ftoa_engine+0x142>
    7496:	20 2f       	mov	r18, r16
    7498:	23 95       	inc	r18
    749a:	02 2f       	mov	r16, r18
    749c:	7a 33       	cpi	r23, 0x3A	; 58
    749e:	28 f0       	brcs	.+10     	; 0x74aa <__ftoa_engine+0x154>
    74a0:	79 e3       	ldi	r23, 0x39	; 57
    74a2:	7d 93       	st	X+, r23
    74a4:	2a 95       	dec	r18
    74a6:	e9 f7       	brne	.-6      	; 0x74a2 <__ftoa_engine+0x14c>
    74a8:	10 c0       	rjmp	.+32     	; 0x74ca <__ftoa_engine+0x174>
    74aa:	7d 93       	st	X+, r23
    74ac:	2a 95       	dec	r18
    74ae:	89 f6       	brne	.-94     	; 0x7452 <__ftoa_engine+0xfc>
    74b0:	06 94       	lsr	r0
    74b2:	97 95       	ror	r25
    74b4:	67 95       	ror	r22
    74b6:	37 95       	ror	r19
    74b8:	17 95       	ror	r17
    74ba:	17 94       	ror	r1
    74bc:	e1 18       	sub	r14, r1
    74be:	f1 0a       	sbc	r15, r17
    74c0:	43 0b       	sbc	r20, r19
    74c2:	56 0b       	sbc	r21, r22
    74c4:	c9 0b       	sbc	r28, r25
    74c6:	d0 09       	sbc	r29, r0
    74c8:	98 f0       	brcs	.+38     	; 0x74f0 <__ftoa_engine+0x19a>
    74ca:	23 95       	inc	r18
    74cc:	7e 91       	ld	r23, -X
    74ce:	73 95       	inc	r23
    74d0:	7a 33       	cpi	r23, 0x3A	; 58
    74d2:	08 f0       	brcs	.+2      	; 0x74d6 <__ftoa_engine+0x180>
    74d4:	70 e3       	ldi	r23, 0x30	; 48
    74d6:	7c 93       	st	X, r23
    74d8:	20 13       	cpse	r18, r16
    74da:	b8 f7       	brcc	.-18     	; 0x74ca <__ftoa_engine+0x174>
    74dc:	7e 91       	ld	r23, -X
    74de:	70 61       	ori	r23, 0x10	; 16
    74e0:	7d 93       	st	X+, r23
    74e2:	30 f0       	brcs	.+12     	; 0x74f0 <__ftoa_engine+0x19a>
    74e4:	83 95       	inc	r24
    74e6:	71 e3       	ldi	r23, 0x31	; 49
    74e8:	7d 93       	st	X+, r23
    74ea:	70 e3       	ldi	r23, 0x30	; 48
    74ec:	2a 95       	dec	r18
    74ee:	e1 f7       	brne	.-8      	; 0x74e8 <__ftoa_engine+0x192>
    74f0:	11 24       	eor	r1, r1
    74f2:	ef 90       	pop	r14
    74f4:	ff 90       	pop	r15
    74f6:	0f 91       	pop	r16
    74f8:	1f 91       	pop	r17
    74fa:	cf 91       	pop	r28
    74fc:	df 91       	pop	r29
    74fe:	99 27       	eor	r25, r25
    7500:	87 fd       	sbrc	r24, 7
    7502:	90 95       	com	r25
    7504:	08 95       	ret

00007506 <isspace>:
    7506:	91 11       	cpse	r25, r1
    7508:	0c 94 fb 3b 	jmp	0x77f6	; 0x77f6 <__ctype_isfalse>
    750c:	80 32       	cpi	r24, 0x20	; 32
    750e:	19 f0       	breq	.+6      	; 0x7516 <isspace+0x10>
    7510:	89 50       	subi	r24, 0x09	; 9
    7512:	85 50       	subi	r24, 0x05	; 5
    7514:	c8 f7       	brcc	.-14     	; 0x7508 <isspace+0x2>
    7516:	08 95       	ret

00007518 <strnlen_P>:
    7518:	fc 01       	movw	r30, r24
    751a:	05 90       	lpm	r0, Z+
    751c:	61 50       	subi	r22, 0x01	; 1
    751e:	70 40       	sbci	r23, 0x00	; 0
    7520:	01 10       	cpse	r0, r1
    7522:	d8 f7       	brcc	.-10     	; 0x751a <strnlen_P+0x2>
    7524:	80 95       	com	r24
    7526:	90 95       	com	r25
    7528:	8e 0f       	add	r24, r30
    752a:	9f 1f       	adc	r25, r31
    752c:	08 95       	ret

0000752e <memcpy>:
    752e:	fb 01       	movw	r30, r22
    7530:	dc 01       	movw	r26, r24
    7532:	02 c0       	rjmp	.+4      	; 0x7538 <memcpy+0xa>
    7534:	01 90       	ld	r0, Z+
    7536:	0d 92       	st	X+, r0
    7538:	41 50       	subi	r20, 0x01	; 1
    753a:	50 40       	sbci	r21, 0x00	; 0
    753c:	d8 f7       	brcc	.-10     	; 0x7534 <memcpy+0x6>
    753e:	08 95       	ret

00007540 <strncmp>:
    7540:	fb 01       	movw	r30, r22
    7542:	dc 01       	movw	r26, r24
    7544:	41 50       	subi	r20, 0x01	; 1
    7546:	50 40       	sbci	r21, 0x00	; 0
    7548:	30 f0       	brcs	.+12     	; 0x7556 <strncmp+0x16>
    754a:	8d 91       	ld	r24, X+
    754c:	01 90       	ld	r0, Z+
    754e:	80 19       	sub	r24, r0
    7550:	19 f4       	brne	.+6      	; 0x7558 <strncmp+0x18>
    7552:	00 20       	and	r0, r0
    7554:	b9 f7       	brne	.-18     	; 0x7544 <strncmp+0x4>
    7556:	88 1b       	sub	r24, r24
    7558:	99 0b       	sbc	r25, r25
    755a:	08 95       	ret

0000755c <strncpy>:
    755c:	fb 01       	movw	r30, r22
    755e:	dc 01       	movw	r26, r24
    7560:	41 50       	subi	r20, 0x01	; 1
    7562:	50 40       	sbci	r21, 0x00	; 0
    7564:	48 f0       	brcs	.+18     	; 0x7578 <strncpy+0x1c>
    7566:	01 90       	ld	r0, Z+
    7568:	0d 92       	st	X+, r0
    756a:	00 20       	and	r0, r0
    756c:	c9 f7       	brne	.-14     	; 0x7560 <strncpy+0x4>
    756e:	01 c0       	rjmp	.+2      	; 0x7572 <strncpy+0x16>
    7570:	1d 92       	st	X+, r1
    7572:	41 50       	subi	r20, 0x01	; 1
    7574:	50 40       	sbci	r21, 0x00	; 0
    7576:	e0 f7       	brcc	.-8      	; 0x7570 <strncpy+0x14>
    7578:	08 95       	ret

0000757a <strnlen>:
    757a:	fc 01       	movw	r30, r24
    757c:	61 50       	subi	r22, 0x01	; 1
    757e:	70 40       	sbci	r23, 0x00	; 0
    7580:	01 90       	ld	r0, Z+
    7582:	01 10       	cpse	r0, r1
    7584:	d8 f7       	brcc	.-10     	; 0x757c <strnlen+0x2>
    7586:	80 95       	com	r24
    7588:	90 95       	com	r25
    758a:	8e 0f       	add	r24, r30
    758c:	9f 1f       	adc	r25, r31
    758e:	08 95       	ret

00007590 <fprintf>:
    7590:	cf 93       	push	r28
    7592:	df 93       	push	r29
    7594:	cd b7       	in	r28, 0x3d	; 61
    7596:	de b7       	in	r29, 0x3e	; 62
    7598:	ae 01       	movw	r20, r28
    759a:	46 5f       	subi	r20, 0xF6	; 246
    759c:	5f 4f       	sbci	r21, 0xFF	; 255
    759e:	68 85       	ldd	r22, Y+8	; 0x08
    75a0:	79 85       	ldd	r23, Y+9	; 0x09
    75a2:	8e 81       	ldd	r24, Y+6	; 0x06
    75a4:	9f 81       	ldd	r25, Y+7	; 0x07
    75a6:	0e 94 99 32 	call	0x6532	; 0x6532 <vfprintf>
    75aa:	df 91       	pop	r29
    75ac:	cf 91       	pop	r28
    75ae:	08 95       	ret

000075b0 <fputc>:
    75b0:	0f 93       	push	r16
    75b2:	1f 93       	push	r17
    75b4:	cf 93       	push	r28
    75b6:	df 93       	push	r29
    75b8:	fb 01       	movw	r30, r22
    75ba:	23 81       	ldd	r18, Z+3	; 0x03
    75bc:	21 fd       	sbrc	r18, 1
    75be:	03 c0       	rjmp	.+6      	; 0x75c6 <fputc+0x16>
    75c0:	8f ef       	ldi	r24, 0xFF	; 255
    75c2:	9f ef       	ldi	r25, 0xFF	; 255
    75c4:	28 c0       	rjmp	.+80     	; 0x7616 <fputc+0x66>
    75c6:	22 ff       	sbrs	r18, 2
    75c8:	16 c0       	rjmp	.+44     	; 0x75f6 <fputc+0x46>
    75ca:	46 81       	ldd	r20, Z+6	; 0x06
    75cc:	57 81       	ldd	r21, Z+7	; 0x07
    75ce:	24 81       	ldd	r18, Z+4	; 0x04
    75d0:	35 81       	ldd	r19, Z+5	; 0x05
    75d2:	42 17       	cp	r20, r18
    75d4:	53 07       	cpc	r21, r19
    75d6:	44 f4       	brge	.+16     	; 0x75e8 <fputc+0x38>
    75d8:	a0 81       	ld	r26, Z
    75da:	b1 81       	ldd	r27, Z+1	; 0x01
    75dc:	9d 01       	movw	r18, r26
    75de:	2f 5f       	subi	r18, 0xFF	; 255
    75e0:	3f 4f       	sbci	r19, 0xFF	; 255
    75e2:	20 83       	st	Z, r18
    75e4:	31 83       	std	Z+1, r19	; 0x01
    75e6:	8c 93       	st	X, r24
    75e8:	26 81       	ldd	r18, Z+6	; 0x06
    75ea:	37 81       	ldd	r19, Z+7	; 0x07
    75ec:	2f 5f       	subi	r18, 0xFF	; 255
    75ee:	3f 4f       	sbci	r19, 0xFF	; 255
    75f0:	26 83       	std	Z+6, r18	; 0x06
    75f2:	37 83       	std	Z+7, r19	; 0x07
    75f4:	10 c0       	rjmp	.+32     	; 0x7616 <fputc+0x66>
    75f6:	eb 01       	movw	r28, r22
    75f8:	09 2f       	mov	r16, r25
    75fa:	18 2f       	mov	r17, r24
    75fc:	00 84       	ldd	r0, Z+8	; 0x08
    75fe:	f1 85       	ldd	r31, Z+9	; 0x09
    7600:	e0 2d       	mov	r30, r0
    7602:	19 95       	eicall
    7604:	89 2b       	or	r24, r25
    7606:	e1 f6       	brne	.-72     	; 0x75c0 <fputc+0x10>
    7608:	8e 81       	ldd	r24, Y+6	; 0x06
    760a:	9f 81       	ldd	r25, Y+7	; 0x07
    760c:	01 96       	adiw	r24, 0x01	; 1
    760e:	8e 83       	std	Y+6, r24	; 0x06
    7610:	9f 83       	std	Y+7, r25	; 0x07
    7612:	81 2f       	mov	r24, r17
    7614:	90 2f       	mov	r25, r16
    7616:	df 91       	pop	r29
    7618:	cf 91       	pop	r28
    761a:	1f 91       	pop	r17
    761c:	0f 91       	pop	r16
    761e:	08 95       	ret

00007620 <fputs>:
    7620:	ef 92       	push	r14
    7622:	ff 92       	push	r15
    7624:	0f 93       	push	r16
    7626:	1f 93       	push	r17
    7628:	cf 93       	push	r28
    762a:	df 93       	push	r29
    762c:	db 01       	movw	r26, r22
    762e:	13 96       	adiw	r26, 0x03	; 3
    7630:	2c 91       	ld	r18, X
    7632:	21 ff       	sbrs	r18, 1
    7634:	18 c0       	rjmp	.+48     	; 0x7666 <fputs+0x46>
    7636:	8b 01       	movw	r16, r22
    7638:	7c 01       	movw	r14, r24
    763a:	d0 e0       	ldi	r29, 0x00	; 0
    763c:	c0 e0       	ldi	r28, 0x00	; 0
    763e:	f7 01       	movw	r30, r14
    7640:	81 91       	ld	r24, Z+
    7642:	7f 01       	movw	r14, r30
    7644:	88 23       	and	r24, r24
    7646:	61 f0       	breq	.+24     	; 0x7660 <fputs+0x40>
    7648:	d8 01       	movw	r26, r16
    764a:	18 96       	adiw	r26, 0x08	; 8
    764c:	ed 91       	ld	r30, X+
    764e:	fc 91       	ld	r31, X
    7650:	19 97       	sbiw	r26, 0x09	; 9
    7652:	b8 01       	movw	r22, r16
    7654:	19 95       	eicall
    7656:	89 2b       	or	r24, r25
    7658:	91 f3       	breq	.-28     	; 0x763e <fputs+0x1e>
    765a:	df ef       	ldi	r29, 0xFF	; 255
    765c:	cf ef       	ldi	r28, 0xFF	; 255
    765e:	ef cf       	rjmp	.-34     	; 0x763e <fputs+0x1e>
    7660:	8d 2f       	mov	r24, r29
    7662:	9c 2f       	mov	r25, r28
    7664:	02 c0       	rjmp	.+4      	; 0x766a <fputs+0x4a>
    7666:	8f ef       	ldi	r24, 0xFF	; 255
    7668:	9f ef       	ldi	r25, 0xFF	; 255
    766a:	df 91       	pop	r29
    766c:	cf 91       	pop	r28
    766e:	1f 91       	pop	r17
    7670:	0f 91       	pop	r16
    7672:	ff 90       	pop	r15
    7674:	ef 90       	pop	r14
    7676:	08 95       	ret

00007678 <snprintf>:
    7678:	0f 93       	push	r16
    767a:	1f 93       	push	r17
    767c:	cf 93       	push	r28
    767e:	df 93       	push	r29
    7680:	cd b7       	in	r28, 0x3d	; 61
    7682:	de b7       	in	r29, 0x3e	; 62
    7684:	2e 97       	sbiw	r28, 0x0e	; 14
    7686:	cd bf       	out	0x3d, r28	; 61
    7688:	de bf       	out	0x3e, r29	; 62
    768a:	0e 89       	ldd	r16, Y+22	; 0x16
    768c:	1f 89       	ldd	r17, Y+23	; 0x17
    768e:	88 8d       	ldd	r24, Y+24	; 0x18
    7690:	99 8d       	ldd	r25, Y+25	; 0x19
    7692:	26 e0       	ldi	r18, 0x06	; 6
    7694:	2c 83       	std	Y+4, r18	; 0x04
    7696:	09 83       	std	Y+1, r16	; 0x01
    7698:	1a 83       	std	Y+2, r17	; 0x02
    769a:	97 ff       	sbrs	r25, 7
    769c:	02 c0       	rjmp	.+4      	; 0x76a2 <snprintf+0x2a>
    769e:	80 e0       	ldi	r24, 0x00	; 0
    76a0:	90 e8       	ldi	r25, 0x80	; 128
    76a2:	01 97       	sbiw	r24, 0x01	; 1
    76a4:	8d 83       	std	Y+5, r24	; 0x05
    76a6:	9e 83       	std	Y+6, r25	; 0x06
    76a8:	ae 01       	movw	r20, r28
    76aa:	44 5e       	subi	r20, 0xE4	; 228
    76ac:	5f 4f       	sbci	r21, 0xFF	; 255
    76ae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    76b0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    76b2:	ce 01       	movw	r24, r28
    76b4:	01 96       	adiw	r24, 0x01	; 1
    76b6:	0e 94 99 32 	call	0x6532	; 0x6532 <vfprintf>
    76ba:	4d 81       	ldd	r20, Y+5	; 0x05
    76bc:	5e 81       	ldd	r21, Y+6	; 0x06
    76be:	57 fd       	sbrc	r21, 7
    76c0:	0a c0       	rjmp	.+20     	; 0x76d6 <snprintf+0x5e>
    76c2:	2f 81       	ldd	r18, Y+7	; 0x07
    76c4:	38 85       	ldd	r19, Y+8	; 0x08
    76c6:	42 17       	cp	r20, r18
    76c8:	53 07       	cpc	r21, r19
    76ca:	0c f4       	brge	.+2      	; 0x76ce <snprintf+0x56>
    76cc:	9a 01       	movw	r18, r20
    76ce:	f8 01       	movw	r30, r16
    76d0:	e2 0f       	add	r30, r18
    76d2:	f3 1f       	adc	r31, r19
    76d4:	10 82       	st	Z, r1
    76d6:	2e 96       	adiw	r28, 0x0e	; 14
    76d8:	cd bf       	out	0x3d, r28	; 61
    76da:	de bf       	out	0x3e, r29	; 62
    76dc:	df 91       	pop	r29
    76de:	cf 91       	pop	r28
    76e0:	1f 91       	pop	r17
    76e2:	0f 91       	pop	r16
    76e4:	08 95       	ret

000076e6 <sprintf>:
    76e6:	0f 93       	push	r16
    76e8:	1f 93       	push	r17
    76ea:	cf 93       	push	r28
    76ec:	df 93       	push	r29
    76ee:	cd b7       	in	r28, 0x3d	; 61
    76f0:	de b7       	in	r29, 0x3e	; 62
    76f2:	2e 97       	sbiw	r28, 0x0e	; 14
    76f4:	cd bf       	out	0x3d, r28	; 61
    76f6:	de bf       	out	0x3e, r29	; 62
    76f8:	0e 89       	ldd	r16, Y+22	; 0x16
    76fa:	1f 89       	ldd	r17, Y+23	; 0x17
    76fc:	86 e0       	ldi	r24, 0x06	; 6
    76fe:	8c 83       	std	Y+4, r24	; 0x04
    7700:	09 83       	std	Y+1, r16	; 0x01
    7702:	1a 83       	std	Y+2, r17	; 0x02
    7704:	8f ef       	ldi	r24, 0xFF	; 255
    7706:	9f e7       	ldi	r25, 0x7F	; 127
    7708:	8d 83       	std	Y+5, r24	; 0x05
    770a:	9e 83       	std	Y+6, r25	; 0x06
    770c:	ae 01       	movw	r20, r28
    770e:	46 5e       	subi	r20, 0xE6	; 230
    7710:	5f 4f       	sbci	r21, 0xFF	; 255
    7712:	68 8d       	ldd	r22, Y+24	; 0x18
    7714:	79 8d       	ldd	r23, Y+25	; 0x19
    7716:	ce 01       	movw	r24, r28
    7718:	01 96       	adiw	r24, 0x01	; 1
    771a:	0e 94 99 32 	call	0x6532	; 0x6532 <vfprintf>
    771e:	2f 81       	ldd	r18, Y+7	; 0x07
    7720:	38 85       	ldd	r19, Y+8	; 0x08
    7722:	f8 01       	movw	r30, r16
    7724:	e2 0f       	add	r30, r18
    7726:	f3 1f       	adc	r31, r19
    7728:	10 82       	st	Z, r1
    772a:	2e 96       	adiw	r28, 0x0e	; 14
    772c:	cd bf       	out	0x3d, r28	; 61
    772e:	de bf       	out	0x3e, r29	; 62
    7730:	df 91       	pop	r29
    7732:	cf 91       	pop	r28
    7734:	1f 91       	pop	r17
    7736:	0f 91       	pop	r16
    7738:	08 95       	ret

0000773a <__ultoa_invert>:
    773a:	fa 01       	movw	r30, r20
    773c:	aa 27       	eor	r26, r26
    773e:	28 30       	cpi	r18, 0x08	; 8
    7740:	51 f1       	breq	.+84     	; 0x7796 <__ultoa_invert+0x5c>
    7742:	20 31       	cpi	r18, 0x10	; 16
    7744:	81 f1       	breq	.+96     	; 0x77a6 <__ultoa_invert+0x6c>
    7746:	e8 94       	clt
    7748:	6f 93       	push	r22
    774a:	6e 7f       	andi	r22, 0xFE	; 254
    774c:	6e 5f       	subi	r22, 0xFE	; 254
    774e:	7f 4f       	sbci	r23, 0xFF	; 255
    7750:	8f 4f       	sbci	r24, 0xFF	; 255
    7752:	9f 4f       	sbci	r25, 0xFF	; 255
    7754:	af 4f       	sbci	r26, 0xFF	; 255
    7756:	b1 e0       	ldi	r27, 0x01	; 1
    7758:	3e d0       	rcall	.+124    	; 0x77d6 <__ultoa_invert+0x9c>
    775a:	b4 e0       	ldi	r27, 0x04	; 4
    775c:	3c d0       	rcall	.+120    	; 0x77d6 <__ultoa_invert+0x9c>
    775e:	67 0f       	add	r22, r23
    7760:	78 1f       	adc	r23, r24
    7762:	89 1f       	adc	r24, r25
    7764:	9a 1f       	adc	r25, r26
    7766:	a1 1d       	adc	r26, r1
    7768:	68 0f       	add	r22, r24
    776a:	79 1f       	adc	r23, r25
    776c:	8a 1f       	adc	r24, r26
    776e:	91 1d       	adc	r25, r1
    7770:	a1 1d       	adc	r26, r1
    7772:	6a 0f       	add	r22, r26
    7774:	71 1d       	adc	r23, r1
    7776:	81 1d       	adc	r24, r1
    7778:	91 1d       	adc	r25, r1
    777a:	a1 1d       	adc	r26, r1
    777c:	20 d0       	rcall	.+64     	; 0x77be <__ultoa_invert+0x84>
    777e:	09 f4       	brne	.+2      	; 0x7782 <__ultoa_invert+0x48>
    7780:	68 94       	set
    7782:	3f 91       	pop	r19
    7784:	2a e0       	ldi	r18, 0x0A	; 10
    7786:	26 9f       	mul	r18, r22
    7788:	11 24       	eor	r1, r1
    778a:	30 19       	sub	r19, r0
    778c:	30 5d       	subi	r19, 0xD0	; 208
    778e:	31 93       	st	Z+, r19
    7790:	de f6       	brtc	.-74     	; 0x7748 <__ultoa_invert+0xe>
    7792:	cf 01       	movw	r24, r30
    7794:	08 95       	ret
    7796:	46 2f       	mov	r20, r22
    7798:	47 70       	andi	r20, 0x07	; 7
    779a:	40 5d       	subi	r20, 0xD0	; 208
    779c:	41 93       	st	Z+, r20
    779e:	b3 e0       	ldi	r27, 0x03	; 3
    77a0:	0f d0       	rcall	.+30     	; 0x77c0 <__ultoa_invert+0x86>
    77a2:	c9 f7       	brne	.-14     	; 0x7796 <__ultoa_invert+0x5c>
    77a4:	f6 cf       	rjmp	.-20     	; 0x7792 <__ultoa_invert+0x58>
    77a6:	46 2f       	mov	r20, r22
    77a8:	4f 70       	andi	r20, 0x0F	; 15
    77aa:	40 5d       	subi	r20, 0xD0	; 208
    77ac:	4a 33       	cpi	r20, 0x3A	; 58
    77ae:	18 f0       	brcs	.+6      	; 0x77b6 <__ultoa_invert+0x7c>
    77b0:	49 5d       	subi	r20, 0xD9	; 217
    77b2:	31 fd       	sbrc	r19, 1
    77b4:	40 52       	subi	r20, 0x20	; 32
    77b6:	41 93       	st	Z+, r20
    77b8:	02 d0       	rcall	.+4      	; 0x77be <__ultoa_invert+0x84>
    77ba:	a9 f7       	brne	.-22     	; 0x77a6 <__ultoa_invert+0x6c>
    77bc:	ea cf       	rjmp	.-44     	; 0x7792 <__ultoa_invert+0x58>
    77be:	b4 e0       	ldi	r27, 0x04	; 4
    77c0:	a6 95       	lsr	r26
    77c2:	97 95       	ror	r25
    77c4:	87 95       	ror	r24
    77c6:	77 95       	ror	r23
    77c8:	67 95       	ror	r22
    77ca:	ba 95       	dec	r27
    77cc:	c9 f7       	brne	.-14     	; 0x77c0 <__ultoa_invert+0x86>
    77ce:	00 97       	sbiw	r24, 0x00	; 0
    77d0:	61 05       	cpc	r22, r1
    77d2:	71 05       	cpc	r23, r1
    77d4:	08 95       	ret
    77d6:	9b 01       	movw	r18, r22
    77d8:	ac 01       	movw	r20, r24
    77da:	0a 2e       	mov	r0, r26
    77dc:	06 94       	lsr	r0
    77de:	57 95       	ror	r21
    77e0:	47 95       	ror	r20
    77e2:	37 95       	ror	r19
    77e4:	27 95       	ror	r18
    77e6:	ba 95       	dec	r27
    77e8:	c9 f7       	brne	.-14     	; 0x77dc <__ultoa_invert+0xa2>
    77ea:	62 0f       	add	r22, r18
    77ec:	73 1f       	adc	r23, r19
    77ee:	84 1f       	adc	r24, r20
    77f0:	95 1f       	adc	r25, r21
    77f2:	a0 1d       	adc	r26, r0
    77f4:	08 95       	ret

000077f6 <__ctype_isfalse>:
    77f6:	99 27       	eor	r25, r25
    77f8:	88 27       	eor	r24, r24

000077fa <__ctype_istrue>:
    77fa:	08 95       	ret

000077fc <eeprom_read_block>:
    77fc:	e0 ec       	ldi	r30, 0xC0	; 192
    77fe:	f1 e0       	ldi	r31, 0x01	; 1
    7800:	a7 85       	ldd	r26, Z+15	; 0x0f
    7802:	a7 fd       	sbrc	r26, 7
    7804:	fd cf       	rjmp	.-6      	; 0x7800 <eeprom_read_block+0x4>
    7806:	a4 85       	ldd	r26, Z+12	; 0x0c
    7808:	a8 60       	ori	r26, 0x08	; 8
    780a:	a4 87       	std	Z+12, r26	; 0x0c
    780c:	60 50       	subi	r22, 0x00	; 0
    780e:	70 4f       	sbci	r23, 0xF0	; 240
    7810:	0c 94 97 3a 	jmp	0x752e	; 0x752e <memcpy>

00007814 <eeprom_update_block>:
    7814:	dc 01       	movw	r26, r24
    7816:	a4 0f       	add	r26, r20
    7818:	b5 1f       	adc	r27, r21
    781a:	41 50       	subi	r20, 0x01	; 1
    781c:	50 40       	sbci	r21, 0x00	; 0
    781e:	48 f0       	brcs	.+18     	; 0x7832 <eeprom_update_block+0x1e>
    7820:	cb 01       	movw	r24, r22
    7822:	84 0f       	add	r24, r20
    7824:	95 1f       	adc	r25, r21
    7826:	2e 91       	ld	r18, -X
    7828:	0e 94 1b 3c 	call	0x7836	; 0x7836 <eeprom_update_r18>
    782c:	41 50       	subi	r20, 0x01	; 1
    782e:	50 40       	sbci	r21, 0x00	; 0
    7830:	d0 f7       	brcc	.-12     	; 0x7826 <eeprom_update_block+0x12>
    7832:	08 95       	ret

00007834 <eeprom_update_byte>:
    7834:	26 2f       	mov	r18, r22

00007836 <eeprom_update_r18>:
    7836:	0e 94 4c 3c 	call	0x7898	; 0x7898 <eeprom_mapen>
    783a:	00 80       	ld	r0, Z
    783c:	02 16       	cp	r0, r18
    783e:	19 f0       	breq	.+6      	; 0x7846 <eeprom_update_r18+0x10>
    7840:	0e 94 26 3c 	call	0x784c	; 0x784c <eeprom_write_r18>
    7844:	01 97       	sbiw	r24, 0x01	; 1
    7846:	01 97       	sbiw	r24, 0x01	; 1
    7848:	08 95       	ret

0000784a <eeprom_write_byte>:
    784a:	26 2f       	mov	r18, r22

0000784c <eeprom_write_r18>:
    784c:	e0 ec       	ldi	r30, 0xC0	; 192
    784e:	f1 e0       	ldi	r31, 0x01	; 1
    7850:	37 85       	ldd	r19, Z+15	; 0x0f
    7852:	37 fd       	sbrc	r19, 7
    7854:	fd cf       	rjmp	.-6      	; 0x7850 <eeprom_write_r18+0x4>
    7856:	34 85       	ldd	r19, Z+12	; 0x0c
    7858:	37 7f       	andi	r19, 0xF7	; 247
    785a:	34 87       	std	Z+12, r19	; 0x0c
    785c:	37 85       	ldd	r19, Z+15	; 0x0f
    785e:	31 ff       	sbrs	r19, 1
    7860:	09 c0       	rjmp	.+18     	; 0x7874 <eeprom_write_r18+0x28>
    7862:	36 e3       	ldi	r19, 0x36	; 54
    7864:	32 87       	std	Z+10, r19	; 0x0a
    7866:	38 ed       	ldi	r19, 0xD8	; 216
    7868:	34 bf       	out	0x34, r19	; 52
    786a:	31 e0       	ldi	r19, 0x01	; 1
    786c:	33 87       	std	Z+11, r19	; 0x0b
    786e:	37 85       	ldd	r19, Z+15	; 0x0f
    7870:	37 fd       	sbrc	r19, 7
    7872:	fd cf       	rjmp	.-6      	; 0x786e <eeprom_write_r18+0x22>
    7874:	33 e3       	ldi	r19, 0x33	; 51
    7876:	32 87       	std	Z+10, r19	; 0x0a
    7878:	80 83       	st	Z, r24
    787a:	91 83       	std	Z+1, r25	; 0x01
    787c:	12 82       	std	Z+2, r1	; 0x02
    787e:	24 83       	std	Z+4, r18	; 0x04
    7880:	25 e3       	ldi	r18, 0x35	; 53
    7882:	22 87       	std	Z+10, r18	; 0x0a
    7884:	28 ed       	ldi	r18, 0xD8	; 216
    7886:	31 e0       	ldi	r19, 0x01	; 1
    7888:	24 bf       	out	0x34, r18	; 52
    788a:	33 87       	std	Z+11, r19	; 0x0b
    788c:	01 96       	adiw	r24, 0x01	; 1
    788e:	08 95       	ret

00007890 <eeprom_read_byte>:
    7890:	03 d0       	rcall	.+6      	; 0x7898 <eeprom_mapen>
    7892:	80 81       	ld	r24, Z
    7894:	99 27       	eor	r25, r25
    7896:	08 95       	ret

00007898 <eeprom_mapen>:
    7898:	e0 ec       	ldi	r30, 0xC0	; 192
    789a:	f1 e0       	ldi	r31, 0x01	; 1
    789c:	37 85       	ldd	r19, Z+15	; 0x0f
    789e:	37 fd       	sbrc	r19, 7
    78a0:	fd cf       	rjmp	.-6      	; 0x789c <eeprom_mapen+0x4>
    78a2:	34 85       	ldd	r19, Z+12	; 0x0c
    78a4:	38 60       	ori	r19, 0x08	; 8
    78a6:	34 87       	std	Z+12, r19	; 0x0c
    78a8:	fc 01       	movw	r30, r24
    78aa:	e0 50       	subi	r30, 0x00	; 0
    78ac:	f0 4f       	sbci	r31, 0xF0	; 240
    78ae:	08 95       	ret

000078b0 <__mulsi3>:
    78b0:	db 01       	movw	r26, r22
    78b2:	8f 93       	push	r24
    78b4:	9f 93       	push	r25
    78b6:	0e 94 56 36 	call	0x6cac	; 0x6cac <__muluhisi3>
    78ba:	bf 91       	pop	r27
    78bc:	af 91       	pop	r26
    78be:	a2 9f       	mul	r26, r18
    78c0:	80 0d       	add	r24, r0
    78c2:	91 1d       	adc	r25, r1
    78c4:	a3 9f       	mul	r26, r19
    78c6:	90 0d       	add	r25, r0
    78c8:	b2 9f       	mul	r27, r18
    78ca:	90 0d       	add	r25, r0
    78cc:	11 24       	eor	r1, r1
    78ce:	08 95       	ret

000078d0 <__udivmodsi4>:
    78d0:	a1 e2       	ldi	r26, 0x21	; 33
    78d2:	1a 2e       	mov	r1, r26
    78d4:	aa 1b       	sub	r26, r26
    78d6:	bb 1b       	sub	r27, r27
    78d8:	fd 01       	movw	r30, r26
    78da:	0d c0       	rjmp	.+26     	; 0x78f6 <__udivmodsi4_ep>

000078dc <__udivmodsi4_loop>:
    78dc:	aa 1f       	adc	r26, r26
    78de:	bb 1f       	adc	r27, r27
    78e0:	ee 1f       	adc	r30, r30
    78e2:	ff 1f       	adc	r31, r31
    78e4:	a2 17       	cp	r26, r18
    78e6:	b3 07       	cpc	r27, r19
    78e8:	e4 07       	cpc	r30, r20
    78ea:	f5 07       	cpc	r31, r21
    78ec:	20 f0       	brcs	.+8      	; 0x78f6 <__udivmodsi4_ep>
    78ee:	a2 1b       	sub	r26, r18
    78f0:	b3 0b       	sbc	r27, r19
    78f2:	e4 0b       	sbc	r30, r20
    78f4:	f5 0b       	sbc	r31, r21

000078f6 <__udivmodsi4_ep>:
    78f6:	66 1f       	adc	r22, r22
    78f8:	77 1f       	adc	r23, r23
    78fa:	88 1f       	adc	r24, r24
    78fc:	99 1f       	adc	r25, r25
    78fe:	1a 94       	dec	r1
    7900:	69 f7       	brne	.-38     	; 0x78dc <__udivmodsi4_loop>
    7902:	60 95       	com	r22
    7904:	70 95       	com	r23
    7906:	80 95       	com	r24
    7908:	90 95       	com	r25
    790a:	9b 01       	movw	r18, r22
    790c:	ac 01       	movw	r20, r24
    790e:	bd 01       	movw	r22, r26
    7910:	cf 01       	movw	r24, r30
    7912:	08 95       	ret

00007914 <_exit>:
    7914:	f8 94       	cli

00007916 <__stop_program>:
    7916:	ff cf       	rjmp	.-2      	; 0x7916 <__stop_program>
