
H2A_SECOM_MotorDriver_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007720  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000007a0  00802000  00007720  000077b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006f8  008027a0  008027a0  00007f54  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007f54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007fb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00007ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c40c  00000000  00000000  00008470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000483c  00000000  00000000  0001487c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b0f  00000000  00000000  000190b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001320  00000000  00000000  0001cbc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000069c5  00000000  00000000  0001dee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005d57  00000000  00000000  000248ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0002a604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__ctors_end>
       4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
       8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
       c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      10:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      14:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      18:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      1c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      20:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      24:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      28:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      2c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      30:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      34:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      38:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      3c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      40:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      44:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      48:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      4c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      50:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      54:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      58:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      5c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      60:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      64:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      68:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      6c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      70:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      74:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      78:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      7c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      80:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      84:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      88:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      8c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      90:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      94:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      98:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      9c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      a8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      ac:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      b0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      b4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      b8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      bc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      c0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      c4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      c8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      cc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      d0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      d4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      d8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      dc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      e0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      e4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      e8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      ec:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      f0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      f4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      f8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
      fc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     100:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     104:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     108:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     10c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     110:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     114:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     118:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     11c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__vector_71>
     120:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     124:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     128:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     12c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     130:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     134:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     138:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     13c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     140:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     144:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     148:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     14c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     150:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     154:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     158:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     15c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     160:	0c 94 6c 2e 	jmp	0x5cd8	; 0x5cd8 <__vector_88>
     164:	0c 94 94 2e 	jmp	0x5d28	; 0x5d28 <__vector_89>
     168:	0c 94 c5 2e 	jmp	0x5d8a	; 0x5d8a <__vector_90>
     16c:	0c 94 e2 2e 	jmp	0x5dc4	; 0x5dc4 <__vector_91>
     170:	0c 94 0a 2f 	jmp	0x5e14	; 0x5e14 <__vector_92>
     174:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     178:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     17c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     180:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     184:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     188:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     18c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     190:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     194:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     198:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     19c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1a0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1a4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1a8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1ac:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1b0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1b4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1b8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1bc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1c0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1c4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1c8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1cc:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1d0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1d4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1d8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1dc:	0c 94 3b 2f 	jmp	0x5e76	; 0x5e76 <__vector_119>
     1e0:	0c 94 63 2f 	jmp	0x5ec6	; 0x5ec6 <__vector_120>
     1e4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1e8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1ec:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1f0:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1f4:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>
     1f8:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <GetMotorDriverTemp>
     200:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <GetTimeSnapshot>
     204:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <GetSupercapEnergy>
     208:	0c 94 c4 2c 	jmp	0x5988	; 0x5988 <AcceptDataGPSDirection>
     20c:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <GetSupercapCurrent>
     210:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <GetWheelSpeedEVA>
     214:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <GetWheelSpeedH2A>
     218:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <GetFuelCellPower>
     21c:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <GetMotorCurrent>
     220:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <GetFullPowerButtonStatus>
     224:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <GetSupercapVoltage>
     228:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <GetDiodeStatus>
     22c:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <GetMotorVoltage>
     230:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <GetFuelCellCurrent>
     234:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <CoreAnalogTakeSnapshot485>
     238:	0c 94 bd 2c 	jmp	0x597a	; 0x597a <AcceptDataGPSPosition>
     23c:	0c 94 3c 2e 	jmp	0x5c78	; 0x5c78 <Ctrl_putchar>
     240:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <GetFuelCellEnergy>
     244:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <GetFuelCellVoltage>
     248:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <GetSupercapPower>
     24c:	0c 94 d2 2c 	jmp	0x59a4	; 0x59a4 <AcceptDataGPSTime>
     250:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <GetWheelDistance>
     254:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <GetCruiseControlButtonStatus>
     258:	0c 94 cb 2c 	jmp	0x5996	; 0x5996 <AcceptDataGPSSpeed>

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	cd bf       	out	0x3d, r28	; 61
     264:	df e5       	ldi	r29, 0x5F	; 95
     266:	de bf       	out	0x3e, r29	; 62
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	0c bf       	out	0x3c, r16	; 60

0000026c <__do_copy_data>:
     26c:	17 e2       	ldi	r17, 0x27	; 39
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	b0 e2       	ldi	r27, 0x20	; 32
     272:	e0 e2       	ldi	r30, 0x20	; 32
     274:	f7 e7       	ldi	r31, 0x77	; 119
     276:	00 e0       	ldi	r16, 0x00	; 0
     278:	0b bf       	out	0x3b, r16	; 59
     27a:	02 c0       	rjmp	.+4      	; 0x280 <__do_copy_data+0x14>
     27c:	07 90       	elpm	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	a0 3a       	cpi	r26, 0xA0	; 160
     282:	b1 07       	cpc	r27, r17
     284:	d9 f7       	brne	.-10     	; 0x27c <__do_copy_data+0x10>

00000286 <__do_clear_bss>:
     286:	2e e2       	ldi	r18, 0x2E	; 46
     288:	a0 ea       	ldi	r26, 0xA0	; 160
     28a:	b7 e2       	ldi	r27, 0x27	; 39
     28c:	01 c0       	rjmp	.+2      	; 0x290 <.do_clear_bss_start>

0000028e <.do_clear_bss_loop>:
     28e:	1d 92       	st	X+, r1

00000290 <.do_clear_bss_start>:
     290:	a8 39       	cpi	r26, 0x98	; 152
     292:	b2 07       	cpc	r27, r18
     294:	e1 f7       	brne	.-8      	; 0x28e <.do_clear_bss_loop>
     296:	0e 94 9c 05 	call	0xb38	; 0xb38 <main>
     29a:	0c 94 8e 3b 	jmp	0x771c	; 0x771c <_exit>

0000029e <__bad_interrupt>:
     29e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a2 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     2a2:	0f 93       	push	r16
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	1f 92       	push	r1
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	2f b7       	in	r18, 0x3f	; 63
     2b0:	29 83       	std	Y+1, r18	; 0x01
     2b2:	f8 94       	cli
     2b4:	1b be       	out	0x3b, r1	; 59
     2b6:	fc 01       	movw	r30, r24
     2b8:	08 ed       	ldi	r16, 0xD8	; 216
     2ba:	04 bf       	out	0x34, r16	; 52
     2bc:	60 83       	st	Z, r22
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	8f bf       	out	0x3f, r24	; 63
     2c2:	0f 90       	pop	r0
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	0f 91       	pop	r16
     2ca:	08 95       	ret

000002cc <CLKSYS_XOSC_Config>:
     2cc:	61 11       	cpse	r22, r1
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <CLKSYS_XOSC_Config+0x8>
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <CLKSYS_XOSC_Config+0xa>
     2d4:	90 e2       	ldi	r25, 0x20	; 32
     2d6:	84 2b       	or	r24, r20
     2d8:	89 2b       	or	r24, r25
     2da:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     2de:	08 95       	ret

000002e0 <CLKSYS_PLL_Config>:
     2e0:	6f 71       	andi	r22, 0x1F	; 31
     2e2:	86 2b       	or	r24, r22
     2e4:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     2e8:	08 95       	ret

000002ea <CLKSYS_Disable>:
     2ea:	e0 e5       	ldi	r30, 0x50	; 80
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	90 81       	ld	r25, Z
     2f0:	28 2f       	mov	r18, r24
     2f2:	20 95       	com	r18
     2f4:	92 23       	and	r25, r18
     2f6:	90 83       	st	Z, r25
     2f8:	90 81       	ld	r25, Z
     2fa:	89 23       	and	r24, r25
     2fc:	08 95       	ret

000002fe <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     306:	00 e4       	ldi	r16, 0x40	; 64
     308:	10 e0       	ldi	r17, 0x00	; 0
     30a:	f8 01       	movw	r30, r16
     30c:	60 81       	ld	r22, Z
     30e:	68 7f       	andi	r22, 0xF8	; 248
     310:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     312:	80 e4       	ldi	r24, 0x40	; 64
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 51 01 	call	0x2a2	; 0x2a2 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     31a:	f8 01       	movw	r30, r16
     31c:	80 81       	ld	r24, Z
	return clkCtrl;
}
     31e:	8c 23       	and	r24, r28
     320:	cf 91       	pop	r28
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	08 95       	ret

00000328 <InitSlave>:
 *
 */
void freeSlave (){

	free(sOwnSensor);
	free(sWantedSensor);
     328:	80 93 fe 27 	sts	0x27FE, r24	; 0x8027fe <sMyAdress>
     32c:	90 93 ff 27 	sts	0x27FF, r25	; 0x8027ff <sMyAdress+0x1>
     330:	10 92 fc 27 	sts	0x27FC, r1	; 0x8027fc <sNumOwnSensor>
     334:	10 92 fd 27 	sts	0x27FD, r1	; 0x8027fd <sNumOwnSensor+0x1>
     338:	10 92 fa 27 	sts	0x27FA, r1	; 0x8027fa <sNumWantedSensor>
     33c:	10 92 fb 27 	sts	0x27FB, r1	; 0x8027fb <sNumWantedSensor+0x1>
     340:	10 92 f8 27 	sts	0x27F8, r1	; 0x8027f8 <sOwnSensor>
     344:	10 92 f9 27 	sts	0x27F9, r1	; 0x8027f9 <sOwnSensor+0x1>
     348:	10 92 f6 27 	sts	0x27F6, r1	; 0x8027f6 <sWantedSensor>
     34c:	10 92 f7 27 	sts	0x27F7, r1	; 0x8027f7 <sWantedSensor+0x1>
     350:	08 95       	ret

00000352 <AddSlaveOwnSensor>:
     352:	8f 92       	push	r8
     354:	9f 92       	push	r9
     356:	af 92       	push	r10
     358:	bf 92       	push	r11
     35a:	cf 92       	push	r12
     35c:	df 92       	push	r13
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	4c 01       	movw	r8, r24
     36c:	6b 01       	movw	r12, r22
     36e:	5a 01       	movw	r10, r20
     370:	79 01       	movw	r14, r18
     372:	00 91 fc 27 	lds	r16, 0x27FC	; 0x8027fc <sNumOwnSensor>
     376:	10 91 fd 27 	lds	r17, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	8b e0       	ldi	r24, 0x0B	; 11
     380:	80 9f       	mul	r24, r16
     382:	e0 01       	movw	r28, r0
     384:	81 9f       	mul	r24, r17
     386:	d0 0d       	add	r29, r0
     388:	11 24       	eor	r1, r1
     38a:	be 01       	movw	r22, r28
     38c:	80 91 f8 27 	lds	r24, 0x27F8	; 0x8027f8 <sOwnSensor>
     390:	90 91 f9 27 	lds	r25, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     394:	0e 94 78 35 	call	0x6af0	; 0x6af0 <realloc>
     398:	80 93 f8 27 	sts	0x27F8, r24	; 0x8027f8 <sOwnSensor>
     39c:	90 93 f9 27 	sts	0x27F9, r25	; 0x8027f9 <sOwnSensor+0x1>
     3a0:	00 97       	sbiw	r24, 0x00	; 0
     3a2:	b9 f0       	breq	.+46     	; 0x3d2 <AddSlaveOwnSensor+0x80>
     3a4:	2b 97       	sbiw	r28, 0x0b	; 11
     3a6:	c8 0f       	add	r28, r24
     3a8:	d9 1f       	adc	r29, r25
     3aa:	44 e0       	ldi	r20, 0x04	; 4
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	b4 01       	movw	r22, r8
     3b0:	ce 01       	movw	r24, r28
     3b2:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <strncpy>
     3b6:	1c 82       	std	Y+4, r1	; 0x04
     3b8:	a9 86       	std	Y+9, r10	; 0x09
     3ba:	ba 86       	std	Y+10, r11	; 0x0a
     3bc:	cf 82       	std	Y+7, r12	; 0x07
     3be:	d8 86       	std	Y+8, r13	; 0x08
     3c0:	ed 82       	std	Y+5, r14	; 0x05
     3c2:	fe 82       	std	Y+6, r15	; 0x06
     3c4:	00 93 fc 27 	sts	0x27FC, r16	; 0x8027fc <sNumOwnSensor>
     3c8:	10 93 fd 27 	sts	0x27FD, r17	; 0x8027fd <sNumOwnSensor+0x1>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <AddSlaveOwnSensor+0x84>
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	df 90       	pop	r13
     3e4:	cf 90       	pop	r12
     3e6:	bf 90       	pop	r11
     3e8:	af 90       	pop	r10
     3ea:	9f 90       	pop	r9
     3ec:	8f 90       	pop	r8
     3ee:	08 95       	ret

000003f0 <AddWantedSensor>:
     3f0:	af 92       	push	r10
     3f2:	bf 92       	push	r11
     3f4:	cf 92       	push	r12
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	5c 01       	movw	r10, r24
     406:	6b 01       	movw	r12, r22
     408:	e0 90 fa 27 	lds	r14, 0x27FA	; 0x8027fa <sNumWantedSensor>
     40c:	f0 90 fb 27 	lds	r15, 0x27FB	; 0x8027fb <sNumWantedSensor+0x1>
     410:	8f ef       	ldi	r24, 0xFF	; 255
     412:	e8 1a       	sub	r14, r24
     414:	f8 0a       	sbc	r15, r24
     416:	87 01       	movw	r16, r14
     418:	00 0f       	add	r16, r16
     41a:	11 1f       	adc	r17, r17
     41c:	00 0f       	add	r16, r16
     41e:	11 1f       	adc	r17, r17
     420:	00 0f       	add	r16, r16
     422:	11 1f       	adc	r17, r17
     424:	0e 19       	sub	r16, r14
     426:	1f 09       	sbc	r17, r15
     428:	b8 01       	movw	r22, r16
     42a:	80 91 f6 27 	lds	r24, 0x27F6	; 0x8027f6 <sWantedSensor>
     42e:	90 91 f7 27 	lds	r25, 0x27F7	; 0x8027f7 <sWantedSensor+0x1>
     432:	0e 94 78 35 	call	0x6af0	; 0x6af0 <realloc>
     436:	80 93 f6 27 	sts	0x27F6, r24	; 0x8027f6 <sWantedSensor>
     43a:	90 93 f7 27 	sts	0x27F7, r25	; 0x8027f7 <sWantedSensor+0x1>
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	a9 f0       	breq	.+42     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     442:	07 50       	subi	r16, 0x07	; 7
     444:	11 09       	sbc	r17, r1
     446:	ec 01       	movw	r28, r24
     448:	c0 0f       	add	r28, r16
     44a:	d1 1f       	adc	r29, r17
     44c:	44 e0       	ldi	r20, 0x04	; 4
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	b5 01       	movw	r22, r10
     452:	ce 01       	movw	r24, r28
     454:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <strncpy>
     458:	1c 82       	std	Y+4, r1	; 0x04
     45a:	cd 82       	std	Y+5, r12	; 0x05
     45c:	de 82       	std	Y+6, r13	; 0x06
     45e:	e0 92 fa 27 	sts	0x27FA, r14	; 0x8027fa <sNumWantedSensor>
     462:	f0 92 fb 27 	sts	0x27FB, r15	; 0x8027fb <sNumWantedSensor+0x1>
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	ef 90       	pop	r14
     47c:	df 90       	pop	r13
     47e:	cf 90       	pop	r12
     480:	bf 90       	pop	r11
     482:	af 90       	pop	r10
     484:	08 95       	ret

00000486 <HandleSnapshot>:
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
    }
}

//update value of sensors of sensors of a slave
void HandleSnapshot(){
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     48e:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sNumOwnSensor>
     492:	90 91 fd 27 	lds	r25, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     496:	18 16       	cp	r1, r24
     498:	19 06       	cpc	r1, r25
     49a:	e4 f4       	brge	.+56     	; 0x4d4 <HandleSnapshot+0x4e>
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	10 e0       	ldi	r17, 0x00	; 0
     4a0:	c0 e0       	ldi	r28, 0x00	; 0
     4a2:	d0 e0       	ldi	r29, 0x00	; 0
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
     4a4:	80 91 f8 27 	lds	r24, 0x27F8	; 0x8027f8 <sOwnSensor>
     4a8:	90 91 f9 27 	lds	r25, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     4ac:	80 0f       	add	r24, r16
     4ae:	91 1f       	adc	r25, r17
     4b0:	dc 01       	movw	r26, r24
     4b2:	19 96       	adiw	r26, 0x09	; 9
     4b4:	ed 91       	ld	r30, X+
     4b6:	fc 91       	ld	r31, X
     4b8:	1a 97       	sbiw	r26, 0x0a	; 10
     4ba:	30 97       	sbiw	r30, 0x00	; 0
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <HandleSnapshot+0x3a>
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
     4be:	19 95       	eicall
//update value of sensors of sensors of a slave
void HandleSnapshot(){

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     4c0:	21 96       	adiw	r28, 0x01	; 1
     4c2:	05 5f       	subi	r16, 0xF5	; 245
     4c4:	1f 4f       	sbci	r17, 0xFF	; 255
     4c6:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sNumOwnSensor>
     4ca:	90 91 fd 27 	lds	r25, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     4ce:	c8 17       	cp	r28, r24
     4d0:	d9 07       	cpc	r29, r25
     4d2:	44 f3       	brlt	.-48     	; 0x4a4 <HandleSnapshot+0x1e>
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
	}
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	08 95       	ret

000004de <HandleCmdS>:
 *
 * \param 1 response      :  the buffer where the response is saved
 * \param 2 dataFromMaster: the received message from the master
 *
 */
static void HandleCmdS(char* response, char* dataFromMaster){
     4de:	6f 92       	push	r6
     4e0:	7f 92       	push	r7
     4e2:	8f 92       	push	r8
     4e4:	9f 92       	push	r9
     4e6:	af 92       	push	r10
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	25 97       	sbiw	r28, 0x05	; 5
     500:	cd bf       	out	0x3d, r28	; 61
     502:	de bf       	out	0x3e, r29	; 62
     504:	d8 2e       	mov	r13, r24
     506:	c9 2e       	mov	r12, r25
     508:	8b 01       	movw	r16, r22
	int position=0, err =0;
	char adr[SUBADR_LENG];

	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
     50a:	68 5f       	subi	r22, 0xF8	; 248
     50c:	7f 4f       	sbci	r23, 0xFF	; 255
     50e:	44 e0       	ldi	r20, 0x04	; 4
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	ce 01       	movw	r24, r28
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     51a:	1d 82       	std	Y+5, r1	; 0x05

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){
     51c:	44 e0       	ldi	r20, 0x04	; 4
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	64 ec       	ldi	r22, 0xC4	; 196
     522:	70 e2       	ldi	r23, 0x20	; 32
     524:	ce 01       	movw	r24, r28
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <strncmp>
     52c:	89 2b       	or	r24, r25
     52e:	41 f0       	breq	.+16     	; 0x540 <HandleCmdS+0x62>

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     530:	60 90 fa 27 	lds	r6, 0x27FA	; 0x8027fa <sNumWantedSensor>
     534:	70 90 fb 27 	lds	r7, 0x27FB	; 0x8027fb <sNumWantedSensor+0x1>
     538:	16 14       	cp	r1, r6
     53a:	17 04       	cpc	r1, r7
     53c:	24 f0       	brlt	.+8      	; 0x546 <HandleCmdS+0x68>
     53e:	8b c0       	rjmp	.+278    	; 0x656 <HandleCmdS+0x178>
	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){

		HandleSnapshot();
     540:	0e 94 43 02 	call	0x486	; 0x486 <HandleSnapshot>
     544:	a4 c0       	rjmp	.+328    	; 0x68e <HandleCmdS+0x1b0>
static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
		if(/*!strncmp(adressSensor,sWantedSensor[i].subadress,SUBADR_LENG-1)*/ FindSensorOK( adressSensor, sWantedSensor[i].subadress )){
     546:	80 91 f6 27 	lds	r24, 0x27F6	; 0x8027f6 <sWantedSensor>
     54a:	90 91 f7 27 	lds	r25, 0x27F7	; 0x8027f7 <sWantedSensor+0x1>
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     54e:	b9 80       	ldd	r11, Y+1	; 0x01
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     550:	aa 80       	ldd	r10, Y+2	; 0x02
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     552:	9b 80       	ldd	r9, Y+3	; 0x03
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     554:	8c 80       	ldd	r8, Y+4	; 0x04
     556:	9c 01       	movw	r18, r24
     558:	2d 5f       	subi	r18, 0xFD	; 253
     55a:	3f 4f       	sbci	r19, 0xFF	; 255
     55c:	ee 24       	eor	r14, r14
     55e:	ea 94       	dec	r14
     560:	fe 2c       	mov	r15, r14
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	b9 01       	movw	r22, r18
     56a:	63 50       	subi	r22, 0x03	; 3
     56c:	71 09       	sbc	r23, r1
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     56e:	db 01       	movw	r26, r22
     570:	7c 91       	ld	r23, X
     572:	7a 32       	cpi	r23, 0x2A	; 42
     574:	11 f0       	breq	.+4      	; 0x57a <HandleCmdS+0x9c>
     576:	7b 11       	cpse	r23, r11
     578:	1a c0       	rjmp	.+52     	; 0x5ae <HandleCmdS+0xd0>
     57a:	bf 01       	movw	r22, r30
     57c:	62 50       	subi	r22, 0x02	; 2
     57e:	71 09       	sbc	r23, r1
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     580:	db 01       	movw	r26, r22
     582:	6c 91       	ld	r22, X
     584:	6a 32       	cpi	r22, 0x2A	; 42
     586:	11 f0       	breq	.+4      	; 0x58c <HandleCmdS+0xae>
     588:	6a 11       	cpse	r22, r10
     58a:	11 c0       	rjmp	.+34     	; 0x5ae <HandleCmdS+0xd0>
     58c:	bf 01       	movw	r22, r30
     58e:	61 50       	subi	r22, 0x01	; 1
     590:	71 09       	sbc	r23, r1
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     592:	db 01       	movw	r26, r22
     594:	6c 91       	ld	r22, X
     596:	6a 32       	cpi	r22, 0x2A	; 42
     598:	11 f0       	breq	.+4      	; 0x59e <HandleCmdS+0xc0>
     59a:	69 11       	cpse	r22, r9
     59c:	08 c0       	rjmp	.+16     	; 0x5ae <HandleCmdS+0xd0>
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     59e:	60 81       	ld	r22, Z
     5a0:	6a 32       	cpi	r22, 0x2A	; 42
     5a2:	21 f0       	breq	.+8      	; 0x5ac <HandleCmdS+0xce>
     5a4:	68 11       	cpse	r22, r8
     5a6:	03 c0       	rjmp	.+6      	; 0x5ae <HandleCmdS+0xd0>
     5a8:	7a 01       	movw	r14, r20
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <HandleCmdS+0xd0>
     5ac:	7a 01       	movw	r14, r20

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     5ae:	4f 5f       	subi	r20, 0xFF	; 255
     5b0:	5f 4f       	sbci	r21, 0xFF	; 255
     5b2:	29 5f       	subi	r18, 0xF9	; 249
     5b4:	3f 4f       	sbci	r19, 0xFF	; 255
     5b6:	46 15       	cp	r20, r6
     5b8:	57 05       	cpc	r21, r7
     5ba:	a9 f6       	brne	.-86     	; 0x566 <HandleCmdS+0x88>

		HandleSnapshot();
	}
	else{
		position = FindWantedSensorIndex(adr);
		if(position != -1){
     5bc:	bf ef       	ldi	r27, 0xFF	; 255
     5be:	eb 16       	cp	r14, r27
     5c0:	fb 06       	cpc	r15, r27
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <HandleCmdS+0xe8>
     5c4:	48 c0       	rjmp	.+144    	; 0x656 <HandleCmdS+0x178>
			err = (*sWantedSensor[position].fpSetData)(adr,dataFromMaster + SETDATA_POS);
     5c6:	97 01       	movw	r18, r14
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	22 0f       	add	r18, r18
     5ce:	33 1f       	adc	r19, r19
     5d0:	22 0f       	add	r18, r18
     5d2:	33 1f       	adc	r19, r19
     5d4:	2e 19       	sub	r18, r14
     5d6:	3f 09       	sbc	r19, r15
     5d8:	fc 01       	movw	r30, r24
     5da:	e2 0f       	add	r30, r18
     5dc:	f3 1f       	adc	r31, r19
     5de:	b8 01       	movw	r22, r16
     5e0:	64 5f       	subi	r22, 0xF4	; 244
     5e2:	7f 4f       	sbci	r23, 0xFF	; 255
     5e4:	05 80       	ldd	r0, Z+5	; 0x05
     5e6:	f6 81       	ldd	r31, Z+6	; 0x06
     5e8:	e0 2d       	mov	r30, r0
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	19 95       	eicall

			if(err==0){
     5f0:	89 2b       	or	r24, r25
     5f2:	a1 f4       	brne	.+40     	; 0x61c <HandleCmdS+0x13e>
				snprintf(response,MAXDATA-1,"$%03dSOK",sMyAdress);
     5f4:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     5f8:	8f 93       	push	r24
     5fa:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     5fe:	8f 93       	push	r24
     600:	89 ec       	ldi	r24, 0xC9	; 201
     602:	90 e2       	ldi	r25, 0x20	; 32
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	1f 92       	push	r1
     60a:	8d e4       	ldi	r24, 0x4D	; 77
     60c:	8f 93       	push	r24
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
     616:	cd bf       	out	0x3d, r28	; 61
     618:	de bf       	out	0x3e, r29	; 62
     61a:	39 c0       	rjmp	.+114    	; 0x68e <HandleCmdS+0x1b0>
			}
			else{
				snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault'",sMyAdress);
     61c:	ed 2d       	mov	r30, r13
     61e:	fc 2d       	mov	r31, r12
     620:	df 01       	movw	r26, r30
     622:	0d 90       	ld	r0, X+
     624:	00 20       	and	r0, r0
     626:	e9 f7       	brne	.-6      	; 0x622 <HandleCmdS+0x144>
     628:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     62c:	8f 93       	push	r24
     62e:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     632:	8f 93       	push	r24
     634:	82 ed       	ldi	r24, 0xD2	; 210
     636:	90 e2       	ldi	r25, 0x20	; 32
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	ea 1b       	sub	r30, r26
     63e:	fb 0b       	sbc	r31, r27
     640:	e1 5b       	subi	r30, 0xB1	; 177
     642:	ff 4f       	sbci	r31, 0xFF	; 255
     644:	ff 93       	push	r31
     646:	ef 93       	push	r30
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
     650:	cd bf       	out	0x3d, r28	; 61
     652:	de bf       	out	0x3e, r29	; 62
     654:	1c c0       	rjmp	.+56     	; 0x68e <HandleCmdS+0x1b0>
			}
		}
		else{
			snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault wrong sensor'",sMyAdress);
     656:	ed 2d       	mov	r30, r13
     658:	fc 2d       	mov	r31, r12
     65a:	df 01       	movw	r26, r30
     65c:	0d 90       	ld	r0, X+
     65e:	00 20       	and	r0, r0
     660:	e9 f7       	brne	.-6      	; 0x65c <HandleCmdS+0x17e>
     662:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     666:	8f 93       	push	r24
     668:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     66c:	8f 93       	push	r24
     66e:	81 ee       	ldi	r24, 0xE1	; 225
     670:	90 e2       	ldi	r25, 0x20	; 32
     672:	9f 93       	push	r25
     674:	8f 93       	push	r24
     676:	ea 1b       	sub	r30, r26
     678:	fb 0b       	sbc	r31, r27
     67a:	e1 5b       	subi	r30, 0xB1	; 177
     67c:	ff 4f       	sbci	r31, 0xFF	; 255
     67e:	ff 93       	push	r31
     680:	ef 93       	push	r30
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	de bf       	out	0x3e, r29	; 62
		}
	}
}
     68e:	25 96       	adiw	r28, 0x05	; 5
     690:	cd bf       	out	0x3d, r28	; 61
     692:	de bf       	out	0x3e, r29	; 62
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	af 90       	pop	r10
     6a8:	9f 90       	pop	r9
     6aa:	8f 90       	pop	r8
     6ac:	7f 90       	pop	r7
     6ae:	6f 90       	pop	r6
     6b0:	08 95       	ret

000006b2 <SendLineRS485>:
 *
 * \param 1 data : data from the slave
 *
 */

void SendLineRS485(char* data){
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ec 01       	movw	r28, r24

	while(*data != '\0'){
     6b8:	88 81       	ld	r24, Y
     6ba:	88 23       	and	r24, r24
     6bc:	31 f0       	breq	.+12     	; 0x6ca <SendLineRS485+0x18>
     6be:	21 96       	adiw	r28, 0x01	; 1
		WriteByte_Comm485(*data++);
     6c0:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <WriteByte_Comm485>
 *
 */

void SendLineRS485(char* data){

	while(*data != '\0'){
     6c4:	89 91       	ld	r24, Y+
     6c6:	81 11       	cpse	r24, r1
     6c8:	fb cf       	rjmp	.-10     	; 0x6c0 <SendLineRS485+0xe>
		WriteByte_Comm485(*data++);
	}
	// add \r\n to the sentence
	WriteByte_Comm485(0x0D);
     6ca:	8d e0       	ldi	r24, 0x0D	; 13
     6cc:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <WriteByte_Comm485>
	WriteByte_Comm485(0x0A);
     6d0:	8a e0       	ldi	r24, 0x0A	; 10
     6d2:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <WriteByte_Comm485>
}
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <ReadLineRS45>:
 *
 * \param 1 data : data from the master
 *
 */

uint8_t ReadLineRS45( char *Data ){
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	ec 01       	movw	r28, r24
	static char getKarakter;
	uint8_t len, returnValue = 0;
     6e4:	10 e0       	ldi	r17, 0x00	; 0

	while( CanRead_Comm485() != 0 && returnValue == 0 ){
     6e6:	22 c0       	rjmp	.+68     	; 0x72c <ReadLineRS45+0x50>
		getKarakter = (char )ReadByte_Comm485();
     6e8:	0e 94 75 2d 	call	0x5aea	; 0x5aea <ReadByte_Comm485>
     6ec:	80 93 f5 27 	sts	0x27F5, r24	; 0x8027f5 <getKarakter.4457>
		if( getKarakter == SLAVESENTENCE || getKarakter == MASTERSENTENCE ){
     6f0:	9d ed       	ldi	r25, 0xDD	; 221
     6f2:	98 0f       	add	r25, r24
     6f4:	92 30       	cpi	r25, 0x02	; 2
     6f6:	18 f4       	brcc	.+6      	; 0x6fe <ReadLineRS45+0x22>
			Data[0] = getKarakter;
     6f8:	88 83       	st	Y, r24
			Data[1] = '\0';
     6fa:	19 82       	std	Y+1, r1	; 0x01
     6fc:	17 c0       	rjmp	.+46     	; 0x72c <ReadLineRS45+0x50>
		}
		else if( Data[0] == SLAVESENTENCE || Data[0] == MASTERSENTENCE ){
     6fe:	98 81       	ld	r25, Y
     700:	93 52       	subi	r25, 0x23	; 35
     702:	92 30       	cpi	r25, 0x02	; 2
     704:	98 f4       	brcc	.+38     	; 0x72c <ReadLineRS45+0x50>
			len = strlen(Data);
     706:	fe 01       	movw	r30, r28
     708:	01 90       	ld	r0, Z+
     70a:	00 20       	and	r0, r0
     70c:	e9 f7       	brne	.-6      	; 0x708 <ReadLineRS45+0x2c>
     70e:	31 97       	sbiw	r30, 0x01	; 1
     710:	ec 1b       	sub	r30, r28
     712:	fd 0b       	sbc	r31, r29
			if(len < MAXCHARACTERSSENTENCE - 1) {
     714:	e2 35       	cpi	r30, 0x52	; 82
     716:	50 f4       	brcc	.+20     	; 0x72c <ReadLineRS45+0x50>
				Data[len] = getKarakter;
     718:	9e 01       	movw	r18, r28
     71a:	2e 0f       	add	r18, r30
     71c:	31 1d       	adc	r19, r1
     71e:	f9 01       	movw	r30, r18
     720:	80 83       	st	Z, r24
				Data[len + 1] = '\0';
     722:	11 82       	std	Z+1, r1	; 0x01
				if( getKarakter == 0x0A ){
     724:	11 e0       	ldi	r17, 0x01	; 1
     726:	8a 30       	cpi	r24, 0x0A	; 10
     728:	09 f0       	breq	.+2      	; 0x72c <ReadLineRS45+0x50>
     72a:	10 e0       	ldi	r17, 0x00	; 0

uint8_t ReadLineRS45( char *Data ){
	static char getKarakter;
	uint8_t len, returnValue = 0;

	while( CanRead_Comm485() != 0 && returnValue == 0 ){
     72c:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <CanRead_Comm485>
     730:	88 23       	and	r24, r24
     732:	11 f0       	breq	.+4      	; 0x738 <ReadLineRS45+0x5c>
     734:	11 23       	and	r17, r17
     736:	c1 f2       	breq	.-80     	; 0x6e8 <ReadLineRS45+0xc>
				}
			}			
		}
	}
	return returnValue;
}
     738:	81 2f       	mov	r24, r17
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	08 95       	ret

00000742 <ScanDataInSlave>:
 * \return 0: if there is a fault in the adress of the slave
 *            or the checksum of the master or the message is not from the master
 *            else
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
     742:	4f 92       	push	r4
     744:	5f 92       	push	r5
     746:	6f 92       	push	r6
     748:	7f 92       	push	r7
     74a:	8f 92       	push	r8
     74c:	9f 92       	push	r9
     74e:	af 92       	push	r10
     750:	bf 92       	push	r11
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	cd b7       	in	r28, 0x3d	; 61
     764:	de b7       	in	r29, 0x3e	; 62
     766:	25 97       	sbiw	r28, 0x05	; 5
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	8c 01       	movw	r16, r24
 * \return adress of the slave in integer
 *
 */
static int GetAdressFromMaster (char* dataMaster){

   return strtol(dataMaster + 1,NULL,10);
     76e:	4a e0       	ldi	r20, 0x0A	; 10
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <strtol>
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
	int err = 0;
    int adress = GetAdressFromMaster(dataFromMaster);
    char cmd = dataFromMaster[COMMAND];
     77c:	f8 01       	movw	r30, r16
     77e:	34 81       	ldd	r19, Z+4	; 0x04
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     780:	20 81       	ld	r18, Z
     782:	23 32       	cpi	r18, 0x23	; 35
     784:	09 f0       	breq	.+2      	; 0x788 <ScanDataInSlave+0x46>
     786:	c1 c1       	rjmp	.+898    	; 0xb0a <ScanDataInSlave+0x3c8>
     788:	e0 90 fe 27 	lds	r14, 0x27FE	; 0x8027fe <sMyAdress>
     78c:	f0 90 ff 27 	lds	r15, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     790:	e6 16       	cp	r14, r22
     792:	f7 06       	cpc	r15, r23
     794:	19 f0       	breq	.+6      	; 0x79c <ScanDataInSlave+0x5a>
     796:	67 2b       	or	r22, r23
     798:	21 f0       	breq	.+8      	; 0x7a2 <ScanDataInSlave+0x60>
     79a:	b9 c1       	rjmp	.+882    	; 0xb0e <ScanDataInSlave+0x3cc>
       err = 0;
    }
    else{
	 if(adress == BROADCAST) {
     79c:	e1 14       	cp	r14, r1
     79e:	f1 04       	cpc	r15, r1
     7a0:	49 f4       	brne	.+18     	; 0x7b4 <ScanDataInSlave+0x72>
		if(cmd =='S'){
     7a2:	33 35       	cpi	r19, 0x53	; 83
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <ScanDataInSlave+0x66>
     7a6:	ad c1       	rjmp	.+858    	; 0xb02 <ScanDataInSlave+0x3c0>
			HandleCmdS(responseSlave,dataFromMaster);
     7a8:	b8 01       	movw	r22, r16
     7aa:	82 ea       	ldi	r24, 0xA2	; 162
     7ac:	97 e2       	ldi	r25, 0x27	; 39
     7ae:	0e 94 6f 02 	call	0x4de	; 0x4de <HandleCmdS>
     7b2:	a7 c1       	rjmp	.+846    	; 0xb02 <ScanDataInSlave+0x3c0>
		}
		err =1;
	 }
	 else{

      switch(cmd){
     7b4:	39 34       	cpi	r19, 0x49	; 73
     7b6:	01 f1       	breq	.+64     	; 0x7f8 <ScanDataInSlave+0xb6>
     7b8:	30 f4       	brcc	.+12     	; 0x7c6 <ScanDataInSlave+0x84>
     7ba:	31 34       	cpi	r19, 0x41	; 65
     7bc:	59 f0       	breq	.+22     	; 0x7d4 <ScanDataInSlave+0x92>
     7be:	37 34       	cpi	r19, 0x47	; 71
     7c0:	09 f4       	brne	.+2      	; 0x7c4 <ScanDataInSlave+0x82>
     7c2:	c9 c0       	rjmp	.+402    	; 0x956 <ScanDataInSlave+0x214>
     7c4:	6b c1       	rjmp	.+726    	; 0xa9c <ScanDataInSlave+0x35a>
     7c6:	33 35       	cpi	r19, 0x53	; 83
     7c8:	09 f4       	brne	.+2      	; 0x7cc <ScanDataInSlave+0x8a>
     7ca:	63 c1       	rjmp	.+710    	; 0xa92 <ScanDataInSlave+0x350>
     7cc:	37 35       	cpi	r19, 0x57	; 87
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <ScanDataInSlave+0x90>
     7d0:	6d c0       	rjmp	.+218    	; 0x8ac <ScanDataInSlave+0x16a>
     7d2:	64 c1       	rjmp	.+712    	; 0xa9c <ScanDataInSlave+0x35a>
 * \param 1 response : the buffer where the response is saved
 *
 */
static void HandleCmdA(char* response){

    snprintf(response,MAXDATA-1,"$%03dA'Slave available'",sMyAdress);
     7d4:	ff 92       	push	r15
     7d6:	ef 92       	push	r14
     7d8:	8d ef       	ldi	r24, 0xFD	; 253
     7da:	90 e2       	ldi	r25, 0x20	; 32
     7dc:	9f 93       	push	r25
     7de:	8f 93       	push	r24
     7e0:	1f 92       	push	r1
     7e2:	8d e4       	ldi	r24, 0x4D	; 77
     7e4:	8f 93       	push	r24
     7e6:	82 ea       	ldi	r24, 0xA2	; 162
     7e8:	97 e2       	ldi	r25, 0x27	; 39
     7ea:	9f 93       	push	r25
     7ec:	8f 93       	push	r24
     7ee:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	de bf       	out	0x3e, r29	; 62
     7f6:	52 c1       	rjmp	.+676    	; 0xa9c <ScanDataInSlave+0x35a>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     7f8:	4a e0       	ldi	r20, 0x0A	; 10
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	c8 01       	movw	r24, r16
     802:	05 96       	adiw	r24, 0x05	; 5
     804:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <strtol>
 *
 */
static void HandleCmdI(char* response, char* dataFromMaster){
	static int index =0;

	index = GetIndexFromMaster(dataFromMaster);
     808:	60 93 a0 27 	sts	0x27A0, r22	; 0x8027a0 <__data_end>
     80c:	70 93 a1 27 	sts	0x27A1, r23	; 0x8027a1 <__data_end+0x1>

    if(index > 0 && index <= sNumOwnSensor) {
     810:	16 16       	cp	r1, r22
     812:	17 06       	cpc	r1, r23
     814:	b4 f5       	brge	.+108    	; 0x882 <ScanDataInSlave+0x140>
     816:	40 91 fc 27 	lds	r20, 0x27FC	; 0x8027fc <sNumOwnSensor>
     81a:	50 91 fd 27 	lds	r21, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     81e:	46 17       	cp	r20, r22
     820:	57 07       	cpc	r21, r23
     822:	7c f1       	brlt	.+94     	; 0x882 <ScanDataInSlave+0x140>
        snprintf(response,MAXDATA-1,"$%03dI%02d%s,%02d'Sensor %d'",sMyAdress,index,sOwnSensor[index-1].subadress,sOwnSensor[index-1].measure_interval,index);
     824:	2b e0       	ldi	r18, 0x0B	; 11
     826:	26 9f       	mul	r18, r22
     828:	f0 01       	movw	r30, r0
     82a:	27 9f       	mul	r18, r23
     82c:	f0 0d       	add	r31, r0
     82e:	11 24       	eor	r1, r1
     830:	9f 01       	movw	r18, r30
     832:	2b 50       	subi	r18, 0x0B	; 11
     834:	31 09       	sbc	r19, r1
     836:	e0 91 f8 27 	lds	r30, 0x27F8	; 0x8027f8 <sOwnSensor>
     83a:	f0 91 f9 27 	lds	r31, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     83e:	e2 0f       	add	r30, r18
     840:	f3 1f       	adc	r31, r19
     842:	7f 93       	push	r23
     844:	6f 93       	push	r22
     846:	26 81       	ldd	r18, Z+6	; 0x06
     848:	2f 93       	push	r18
     84a:	25 81       	ldd	r18, Z+5	; 0x05
     84c:	2f 93       	push	r18
     84e:	ff 93       	push	r31
     850:	ef 93       	push	r30
     852:	7f 93       	push	r23
     854:	6f 93       	push	r22
     856:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     85a:	8f 93       	push	r24
     85c:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     860:	8f 93       	push	r24
     862:	85 e1       	ldi	r24, 0x15	; 21
     864:	91 e2       	ldi	r25, 0x21	; 33
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	1f 92       	push	r1
     86c:	8d e4       	ldi	r24, 0x4D	; 77
     86e:	8f 93       	push	r24
     870:	82 ea       	ldi	r24, 0xA2	; 162
     872:	97 e2       	ldi	r25, 0x27	; 39
     874:	9f 93       	push	r25
     876:	8f 93       	push	r24
     878:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0d c1       	rjmp	.+538    	; 0xa9c <ScanDataInSlave+0x35a>
    }
// the slave sends 0000,0000 if all the sensors that exists are already given
    else{
        sprintf(response,"$%03dI%02d0000,0000'No sensor'", sMyAdress,index);
     882:	7f 93       	push	r23
     884:	6f 93       	push	r22
     886:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     88a:	8f 93       	push	r24
     88c:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     890:	8f 93       	push	r24
     892:	82 e3       	ldi	r24, 0x32	; 50
     894:	91 e2       	ldi	r25, 0x21	; 33
     896:	9f 93       	push	r25
     898:	8f 93       	push	r24
     89a:	82 ea       	ldi	r24, 0xA2	; 162
     89c:	97 e2       	ldi	r25, 0x27	; 39
     89e:	9f 93       	push	r25
     8a0:	8f 93       	push	r24
     8a2:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <sprintf>
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	f8 c0       	rjmp	.+496    	; 0xa9c <ScanDataInSlave+0x35a>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     8ac:	4a e0       	ldi	r20, 0x0A	; 10
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	c8 01       	movw	r24, r16
     8b6:	05 96       	adiw	r24, 0x05	; 5
     8b8:	0e 94 61 36 	call	0x6cc2	; 0x6cc2 <strtol>
     8bc:	9b 01       	movw	r18, r22
 */
static void HandleCmdW(char* response, char* dataFromMaster){

    int index = GetIndexFromMaster(dataFromMaster);

    if(index > 0 && index <= sNumWantedSensor){
     8be:	16 16       	cp	r1, r22
     8c0:	17 06       	cpc	r1, r23
     8c2:	8c f5       	brge	.+98     	; 0x926 <ScanDataInSlave+0x1e4>
     8c4:	40 91 fa 27 	lds	r20, 0x27FA	; 0x8027fa <sNumWantedSensor>
     8c8:	50 91 fb 27 	lds	r21, 0x27FB	; 0x8027fb <sNumWantedSensor+0x1>
     8cc:	46 17       	cp	r20, r22
     8ce:	57 07       	cpc	r21, r23
     8d0:	54 f1       	brlt	.+84     	; 0x926 <ScanDataInSlave+0x1e4>
        snprintf(response,MAXDATA-1,"$%03dW%02d%s'Wants slave'",sMyAdress,index,sWantedSensor[index-1].subadress);
     8d2:	22 0f       	add	r18, r18
     8d4:	33 1f       	adc	r19, r19
     8d6:	22 0f       	add	r18, r18
     8d8:	33 1f       	adc	r19, r19
     8da:	22 0f       	add	r18, r18
     8dc:	33 1f       	adc	r19, r19
     8de:	26 1b       	sub	r18, r22
     8e0:	37 0b       	sbc	r19, r23
     8e2:	27 50       	subi	r18, 0x07	; 7
     8e4:	31 09       	sbc	r19, r1
     8e6:	40 91 f6 27 	lds	r20, 0x27F6	; 0x8027f6 <sWantedSensor>
     8ea:	50 91 f7 27 	lds	r21, 0x27F7	; 0x8027f7 <sWantedSensor+0x1>
     8ee:	24 0f       	add	r18, r20
     8f0:	35 1f       	adc	r19, r21
     8f2:	3f 93       	push	r19
     8f4:	2f 93       	push	r18
     8f6:	7f 93       	push	r23
     8f8:	6f 93       	push	r22
     8fa:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     8fe:	8f 93       	push	r24
     900:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     904:	8f 93       	push	r24
     906:	81 e5       	ldi	r24, 0x51	; 81
     908:	91 e2       	ldi	r25, 0x21	; 33
     90a:	9f 93       	push	r25
     90c:	8f 93       	push	r24
     90e:	1f 92       	push	r1
     910:	8d e4       	ldi	r24, 0x4D	; 77
     912:	8f 93       	push	r24
     914:	82 ea       	ldi	r24, 0xA2	; 162
     916:	97 e2       	ldi	r25, 0x27	; 39
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
     920:	cd bf       	out	0x3d, r28	; 61
     922:	de bf       	out	0x3e, r29	; 62
     924:	bb c0       	rjmp	.+374    	; 0xa9c <ScanDataInSlave+0x35a>
    }
// the slave sends 0000 if all sensor that exists in the buffer are given
    else {
       snprintf(response,MAXDATA-1,"$%03dW%02d0000'All done'", sMyAdress,index);
     926:	7f 93       	push	r23
     928:	6f 93       	push	r22
     92a:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     92e:	8f 93       	push	r24
     930:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     934:	8f 93       	push	r24
     936:	8b e6       	ldi	r24, 0x6B	; 107
     938:	91 e2       	ldi	r25, 0x21	; 33
     93a:	9f 93       	push	r25
     93c:	8f 93       	push	r24
     93e:	1f 92       	push	r1
     940:	8d e4       	ldi	r24, 0x4D	; 77
     942:	8f 93       	push	r24
     944:	82 ea       	ldi	r24, 0xA2	; 162
     946:	97 e2       	ldi	r25, 0x27	; 39
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
     950:	cd bf       	out	0x3d, r28	; 61
     952:	de bf       	out	0x3e, r29	; 62
     954:	a3 c0       	rjmp	.+326    	; 0xa9c <ScanDataInSlave+0x35a>
 */
static void HandleCmdG(char* response, char* dataFromMaster){
    int sensorIndex, err;
    char adr[SUBADR_LENG];

    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
     956:	44 e0       	ldi	r20, 0x04	; 4
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	b8 01       	movw	r22, r16
     95c:	6b 5f       	subi	r22, 0xFB	; 251
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	ce 01       	movw	r24, r28
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     968:	1d 82       	std	Y+5, r1	; 0x05

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     96a:	80 90 fc 27 	lds	r8, 0x27FC	; 0x8027fc <sNumOwnSensor>
     96e:	90 90 fd 27 	lds	r9, 0x27FD	; 0x8027fd <sNumOwnSensor+0x1>
     972:	18 14       	cp	r1, r8
     974:	19 04       	cpc	r1, r9
     976:	0c f0       	brlt	.+2      	; 0x97a <ScanDataInSlave+0x238>
     978:	79 c0       	rjmp	.+242    	; 0xa6c <ScanDataInSlave+0x32a>
		if(!strncmp(adressSensor,sOwnSensor[i].subadress,strlen(adressSensor))){
     97a:	de 01       	movw	r26, r28
     97c:	11 96       	adiw	r26, 0x01	; 1
     97e:	fd 01       	movw	r30, r26
     980:	01 90       	ld	r0, Z+
     982:	00 20       	and	r0, r0
     984:	e9 f7       	brne	.-6      	; 0x980 <ScanDataInSlave+0x23e>
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	3f 01       	movw	r6, r30
     98a:	6a 1a       	sub	r6, r26
     98c:	7b 0a       	sbc	r7, r27
     98e:	a0 90 f8 27 	lds	r10, 0x27F8	; 0x8027f8 <sOwnSensor>
     992:	b0 90 f9 27 	lds	r11, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     996:	44 24       	eor	r4, r4
     998:	4a 94       	dec	r4
     99a:	54 2c       	mov	r5, r4
     99c:	c1 2c       	mov	r12, r1
     99e:	d1 2c       	mov	r13, r1
     9a0:	a3 01       	movw	r20, r6
     9a2:	b5 01       	movw	r22, r10
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	0e 94 9e 37 	call	0x6f3c	; 0x6f3c <strncmp>
     9ac:	89 2b       	or	r24, r25
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <ScanDataInSlave+0x270>
     9b0:	26 01       	movw	r4, r12

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     9b2:	9f ef       	ldi	r25, 0xFF	; 255
     9b4:	c9 1a       	sub	r12, r25
     9b6:	d9 0a       	sbc	r13, r25
     9b8:	eb e0       	ldi	r30, 0x0B	; 11
     9ba:	ae 0e       	add	r10, r30
     9bc:	b1 1c       	adc	r11, r1
     9be:	c8 14       	cp	r12, r8
     9c0:	d9 04       	cpc	r13, r9
     9c2:	71 f7       	brne	.-36     	; 0x9a0 <ScanDataInSlave+0x25e>
    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

    sensorIndex = FindOwnSensorIndex(adr);

    if(sensorIndex !=-1){
     9c4:	ff ef       	ldi	r31, 0xFF	; 255
     9c6:	4f 16       	cp	r4, r31
     9c8:	5f 06       	cpc	r5, r31
     9ca:	09 f4       	brne	.+2      	; 0x9ce <ScanDataInSlave+0x28c>
     9cc:	4f c0       	rjmp	.+158    	; 0xa6c <ScanDataInSlave+0x32a>
		//sensorIndex is -1 if sensor not found
        sprintf(response,"$%03dG",sMyAdress);
     9ce:	ff 92       	push	r15
     9d0:	ef 92       	push	r14
     9d2:	84 e8       	ldi	r24, 0x84	; 132
     9d4:	91 e2       	ldi	r25, 0x21	; 33
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	0f 2e       	mov	r0, r31
     9dc:	f2 ea       	ldi	r31, 0xA2	; 162
     9de:	ef 2e       	mov	r14, r31
     9e0:	f7 e2       	ldi	r31, 0x27	; 39
     9e2:	ff 2e       	mov	r15, r31
     9e4:	f0 2d       	mov	r31, r0
     9e6:	ff 92       	push	r15
     9e8:	ef 92       	push	r14
     9ea:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <sprintf>
        err= sOwnSensor[sensorIndex].fpGetData(adr,response + strlen(response), MAXDATA-1-strlen(response) );
     9ee:	f7 01       	movw	r30, r14
     9f0:	01 90       	ld	r0, Z+
     9f2:	00 20       	and	r0, r0
     9f4:	e9 f7       	brne	.-6      	; 0x9f0 <ScanDataInSlave+0x2ae>
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	e2 5a       	subi	r30, 0xA2	; 162
     9fa:	f7 42       	sbci	r31, 0x27	; 39
     9fc:	2b e0       	ldi	r18, 0x0B	; 11
     9fe:	24 9d       	mul	r18, r4
     a00:	c0 01       	movw	r24, r0
     a02:	25 9d       	mul	r18, r5
     a04:	90 0d       	add	r25, r0
     a06:	11 24       	eor	r1, r1
     a08:	a0 91 f8 27 	lds	r26, 0x27F8	; 0x8027f8 <sOwnSensor>
     a0c:	b0 91 f9 27 	lds	r27, 0x27F9	; 0x8027f9 <sOwnSensor+0x1>
     a10:	a8 0f       	add	r26, r24
     a12:	b9 1f       	adc	r27, r25
     a14:	4d e4       	ldi	r20, 0x4D	; 77
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	4e 1b       	sub	r20, r30
     a1a:	5f 0b       	sbc	r21, r31
     a1c:	bf 01       	movw	r22, r30
     a1e:	6e 55       	subi	r22, 0x5E	; 94
     a20:	78 4d       	sbci	r23, 0xD8	; 216
     a22:	17 96       	adiw	r26, 0x07	; 7
     a24:	ed 91       	ld	r30, X+
     a26:	fc 91       	ld	r31, X
     a28:	18 97       	sbiw	r26, 0x08	; 8
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	19 95       	eicall
        if(err){
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	89 2b       	or	r24, r25
     a3e:	71 f1       	breq	.+92     	; 0xa9c <ScanDataInSlave+0x35a>
			sprintf(response,"$%03dGF'Memory fault'",sMyAdress);
     a40:	80 91 ff 27 	lds	r24, 0x27FF	; 0x8027ff <sMyAdress+0x1>
     a44:	8f 93       	push	r24
     a46:	80 91 fe 27 	lds	r24, 0x27FE	; 0x8027fe <sMyAdress>
     a4a:	8f 93       	push	r24
     a4c:	8b e8       	ldi	r24, 0x8B	; 139
     a4e:	91 e2       	ldi	r25, 0x21	; 33
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	c7 01       	movw	r24, r14
     a56:	9f 93       	push	r25
     a58:	ef 92       	push	r14
     a5a:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <sprintf>
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	18 c0       	rjmp	.+48     	; 0xa9c <ScanDataInSlave+0x35a>
		}
    }
    else{
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
     a6c:	ff 92       	push	r15
     a6e:	ef 92       	push	r14
     a70:	81 ea       	ldi	r24, 0xA1	; 161
     a72:	91 e2       	ldi	r25, 0x21	; 33
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	82 ea       	ldi	r24, 0xA2	; 162
     a7a:	97 e2       	ldi	r25, 0x27	; 39
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <sprintf>
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <ScanDataInSlave+0x35a>
                break;

      case 'G': HandleCmdG(responseSlave,dataFromMaster);
                break;

      case 'S': HandleCmdS(responseSlave,dataFromMaster);
     a92:	b8 01       	movw	r22, r16
     a94:	82 ea       	ldi	r24, 0xA2	; 162
     a96:	97 e2       	ldi	r25, 0x27	; 39
     a98:	0e 94 6f 02 	call	0x4de	; 0x4de <HandleCmdS>
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     a9c:	80 91 a3 27 	lds	r24, 0x27A3	; 0x8027a3 <responseSlave.4469+0x1>
     aa0:	85 32       	cpi	r24, 0x25	; 37
     aa2:	61 f0       	breq	.+24     	; 0xabc <ScanDataInSlave+0x37a>
     aa4:	88 23       	and	r24, r24
     aa6:	61 f0       	breq	.+24     	; 0xac0 <ScanDataInSlave+0x37e>
     aa8:	e4 ea       	ldi	r30, 0xA4	; 164
     aaa:	f7 e2       	ldi	r31, 0x27	; 39
     aac:	90 e0       	ldi	r25, 0x00	; 0
		sChecksum^=*dataMaster++;
     aae:	98 27       	eor	r25, r24
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     ab0:	81 91       	ld	r24, Z+
     ab2:	85 32       	cpi	r24, 0x25	; 37
     ab4:	31 f0       	breq	.+12     	; 0xac2 <ScanDataInSlave+0x380>
     ab6:	81 11       	cpse	r24, r1
     ab8:	fa cf       	rjmp	.-12     	; 0xaae <ScanDataInSlave+0x36c>
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <ScanDataInSlave+0x380>
 *
 * \return checksum value
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <ScanDataInSlave+0x380>
     ac0:	90 e0       	ldi	r25, 0x00	; 0
                break;

      default:  break;
    }
    // add '%' and the checksum to the sentence and then send it through the line of the RS485
    snprintf(responseSlave+strlen(responseSlave),MAXCHARACTERSSENTENCE-strlen(responseSlave),"%%%02X",DataChecksum(responseSlave));
     ac2:	e2 ea       	ldi	r30, 0xA2	; 162
     ac4:	f7 e2       	ldi	r31, 0x27	; 39
     ac6:	01 90       	ld	r0, Z+
     ac8:	00 20       	and	r0, r0
     aca:	e9 f7       	brne	.-6      	; 0xac6 <ScanDataInSlave+0x384>
     acc:	31 97       	sbiw	r30, 0x01	; 1
     ace:	e2 5a       	subi	r30, 0xA2	; 162
     ad0:	f7 42       	sbci	r31, 0x27	; 39
     ad2:	1f 92       	push	r1
     ad4:	9f 93       	push	r25
     ad6:	8b eb       	ldi	r24, 0xBB	; 187
     ad8:	91 e2       	ldi	r25, 0x21	; 33
     ada:	9f 93       	push	r25
     adc:	8f 93       	push	r24
     ade:	83 e5       	ldi	r24, 0x53	; 83
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	8e 1b       	sub	r24, r30
     ae4:	9f 0b       	sbc	r25, r31
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
     aea:	ee 55       	subi	r30, 0x5E	; 94
     aec:	f8 4d       	sbci	r31, 0xD8	; 216
     aee:	ff 93       	push	r31
     af0:	ef 93       	push	r30
     af2:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    SendLineRS485(responseSlave);
     af6:	82 ea       	ldi	r24, 0xA2	; 162
     af8:	97 e2       	ldi	r25, 0x27	; 39
     afa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SendLineRS485>
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	de bf       	out	0x3e, r29	; 62
    err =1;
	}
	dataFromMaster[0] = '\0';
     b02:	f8 01       	movw	r30, r16
     b04:	10 82       	st	Z, r1
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <ScanDataInSlave+0x3ce>
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
       err = 0;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <ScanDataInSlave+0x3ce>
     b0e:	80 e0       	ldi	r24, 0x00	; 0
    err =1;
	}
	dataFromMaster[0] = '\0';
	}
	return err;
}
     b10:	25 96       	adiw	r28, 0x05	; 5
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	ff 90       	pop	r15
     b20:	ef 90       	pop	r14
     b22:	df 90       	pop	r13
     b24:	cf 90       	pop	r12
     b26:	bf 90       	pop	r11
     b28:	af 90       	pop	r10
     b2a:	9f 90       	pop	r9
     b2c:	8f 90       	pop	r8
     b2e:	7f 90       	pop	r7
     b30:	6f 90       	pop	r6
     b32:	5f 90       	pop	r5
     b34:	4f 90       	pop	r4
     b36:	08 95       	ret

00000b38 <main>:
}


static void InitClocks(void)
{
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc, 0, OSC_XOSCSEL_XTAL_16KCLK_gc );
     b38:	4b e0       	ldi	r20, 0x0B	; 11
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	80 ec       	ldi	r24, 0xC0	; 192
     b3e:	0e 94 66 01 	call	0x2cc	; 0x2cc <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
     b42:	e0 e5       	ldi	r30, 0x50	; 80
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	88 60       	ori	r24, 0x08	; 8
     b4a:	80 83       	st	Z, r24
// do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     b4c:	81 81       	ldd	r24, Z+1	; 0x01
     b4e:	83 ff       	sbrs	r24, 3
     b50:	fd cf       	rjmp	.-6      	; 0xb4c <main+0x14>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     b52:	62 e0       	ldi	r22, 0x02	; 2
     b54:	80 ec       	ldi	r24, 0xC0	; 192
     b56:	0e 94 70 01 	call	0x2e0	; 0x2e0 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     b5a:	e0 e5       	ldi	r30, 0x50	; 80
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	80 61       	ori	r24, 0x10	; 16
     b62:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     b64:	81 81       	ldd	r24, Z+1	; 0x01
     b66:	84 ff       	sbrs	r24, 4
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <main+0x2c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     b6a:	84 e0       	ldi	r24, 0x04	; 4
     b6c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	0e 94 75 01 	call	0x2ea	; 0x2ea <CLKSYS_Disable>
	CLKSYS_Disable( OSC_RC32MEN_bm );
     b76:	82 e0       	ldi	r24, 0x02	; 2
     b78:	0e 94 75 01 	call	0x2ea	; 0x2ea <CLKSYS_Disable>
	
} /* InitClocks */


static void InitIO(void) {
	PORTC.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm;
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f6 e0       	ldi	r31, 0x06	; 6
     b80:	8f e7       	ldi	r24, 0x7F	; 127
     b82:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     b84:	80 e1       	ldi	r24, 0x10	; 16
     b86:	80 8b       	std	Z+16, r24	; 0x10
	
	PORTD.DIRCLR = PIN0_bm;
     b88:	e0 e6       	ldi	r30, 0x60	; 96
     b8a:	f6 e0       	ldi	r31, 0x06	; 6
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	92 83       	std	Z+2, r25	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     b90:	80 8b       	std	Z+16, r24	; 0x10
		
	PORTE.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN6_bm | PIN7_bm;
     b92:	e0 e8       	ldi	r30, 0x80	; 128
     b94:	f6 e0       	ldi	r31, 0x06	; 6
     b96:	8f ec       	ldi	r24, 0xCF	; 207
     b98:	80 83       	st	Z, r24
	PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     b9a:	8f e0       	ldi	r24, 0x0F	; 15
     b9c:	86 83       	std	Z+6, r24	; 0x06
	
	PORTF.DIR = PIN0_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
     b9e:	e0 ea       	ldi	r30, 0xA0	; 160
     ba0:	f6 e0       	ldi	r31, 0x06	; 6
     ba2:	89 ef       	ldi	r24, 0xF9	; 249
     ba4:	80 83       	st	Z, r24
	PORTF.OUTCLR = PIN3_bm | PIN4_bm | PIN5_bm;
     ba6:	88 e3       	ldi	r24, 0x38	; 56
     ba8:	86 83       	std	Z+6, r24	; 0x06
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
	static char slaveData[MAXCHARACTERSSENTENCE];
	
	InitClocks();
	InitIO();
	InitUtil();
     baa:	0e 94 01 31 	call	0x6202	; 0x6202 <InitUtil>
	InitTimer();
     bae:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <InitTimer>
	InitSerial();
     bb2:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <InitSerial>
	InitSlave(GetBusID());
     bb6:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <GetBusID>
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 94 01 	call	0x328	; 0x328 <InitSlave>
	InitCoreAnalog();
     bc0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <InitCoreAnalog>
	Init9DOF();
     bc4:	0e 94 dd 07 	call	0xfba	; 0xfba <Init9DOF>
	InitReadBussensors();
     bc8:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <InitReadBussensors>
	
	sei();
     bcc:	78 94       	sei
	
	PrintResetHeader(&gCtrl_IO);
     bce:	86 e5       	ldi	r24, 0x56	; 86
     bd0:	90 e2       	ldi	r25, 0x20	; 32
     bd2:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <PrintResetHeader>
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
     bd6:	c0 e0       	ldi	r28, 0x00	; 0
     bd8:	31 2c       	mov	r3, r1
#define ESC_TIMEOUT			(CYCLES_PER_SECOND)
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
     bda:	41 2c       	mov	r4, r1
     bdc:	51 2c       	mov	r5, r1
     bde:	32 01       	movw	r6, r4
     be0:	81 2c       	mov	r8, r1
     be2:	91 2c       	mov	r9, r1
     be4:	54 01       	movw	r10, r8

		/* Handle the slave code */
		if(CanRead_Comm485())
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     be6:	00 ea       	ldi	r16, 0xA0	; 160
     be8:	16 e0       	ldi	r17, 0x06	; 6
     bea:	d0 e3       	ldi	r29, 0x30	; 48
	
	sei();
	
	PrintResetHeader(&gCtrl_IO);
	while(1) {
		Process9DOF();
     bec:	0e 94 1e 08 	call	0x103c	; 0x103c <Process9DOF>
		
		if(CanRead_Ctrl()) {
     bf0:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <CanRead_Ctrl>
     bf4:	88 23       	and	r24, r24
     bf6:	e1 f0       	breq	.+56     	; 0xc30 <main+0xf8>
			switch(ReadByte_Ctrl()) {
     bf8:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
     bfc:	83 34       	cpi	r24, 0x43	; 67
     bfe:	51 f0       	breq	.+20     	; 0xc14 <main+0xdc>
     c00:	83 36       	cpi	r24, 0x63	; 99
     c02:	41 f0       	breq	.+16     	; 0xc14 <main+0xdc>
     c04:	8b 31       	cpi	r24, 0x1B	; 27
     c06:	51 f4       	brne	.+20     	; 0xc1c <main+0xe4>
				case 0x1B:
					/* ESC -- sync character for avrdude. The programmer is trying to talk to us, so reset the chip */
					CCPWrite( &RST.CTRL, RST_SWRST_bm );
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	89 e7       	ldi	r24, 0x79	; 121
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <CCPWrite>
					break;
     c12:	04 c0       	rjmp	.+8      	; 0xc1c <main+0xe4>
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
     c14:	86 e5       	ldi	r24, 0x56	; 86
     c16:	90 e2       	ldi	r25, 0x20	; 32
     c18:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <CalibrateChannel>
					break;
			}
			escTimeoutActive = 1;
			prev = GetSessionCycleCount();
     c1c:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <GetSessionCycleCount>
     c20:	4b 01       	movw	r8, r22
     c22:	5c 01       	movw	r10, r24
		}
		now = GetSessionCycleCount();
     c24:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <GetSessionCycleCount>
     c28:	6b 01       	movw	r12, r22
     c2a:	7c 01       	movw	r14, r24
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
					break;
			}
			escTimeoutActive = 1;
     c2c:	c1 e0       	ldi	r28, 0x01	; 1
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <main+0x106>
			prev = GetSessionCycleCount();
		}
		now = GetSessionCycleCount();
     c30:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <GetSessionCycleCount>
     c34:	6b 01       	movw	r12, r22
     c36:	7c 01       	movw	r14, r24
		if(escTimeoutActive) {
     c38:	cc 23       	and	r28, r28
     c3a:	09 f4       	brne	.+2      	; 0xc3e <main+0x106>
     c3c:	84 c0       	rjmp	.+264    	; 0xd46 <main+0x20e>
			if(now - prev >= ESC_TIMEOUT)
     c3e:	d7 01       	movw	r26, r14
     c40:	c6 01       	movw	r24, r12
     c42:	88 19       	sub	r24, r8
     c44:	99 09       	sbc	r25, r9
     c46:	aa 09       	sbc	r26, r10
     c48:	bb 09       	sbc	r27, r11
     c4a:	88 38       	cpi	r24, 0x88	; 136
     c4c:	93 41       	sbci	r25, 0x13	; 19
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	08 f0       	brcs	.+2      	; 0xc56 <main+0x11e>
     c54:	78 c0       	rjmp	.+240    	; 0xd46 <main+0x20e>
     c56:	62 c0       	rjmp	.+196    	; 0xd1c <main+0x1e4>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     c58:	82 e0       	ldi	r24, 0x02	; 2
     c5a:	38 16       	cp	r3, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <main+0x128>
     c5e:	41 c0       	rjmp	.+130    	; 0xce2 <main+0x1aa>
     c60:	83 15       	cp	r24, r3
     c62:	30 f0       	brcs	.+12     	; 0xc70 <main+0x138>
     c64:	33 20       	and	r3, r3
     c66:	41 f0       	breq	.+16     	; 0xc78 <main+0x140>
     c68:	e1 e0       	ldi	r30, 0x01	; 1
     c6a:	3e 16       	cp	r3, r30
     c6c:	21 f1       	breq	.+72     	; 0xcb6 <main+0x17e>
     c6e:	54 c0       	rjmp	.+168    	; 0xd18 <main+0x1e0>
     c70:	f3 e0       	ldi	r31, 0x03	; 3
     c72:	3f 12       	cpse	r3, r31
     c74:	51 c0       	rjmp	.+162    	; 0xd18 <main+0x1e0>
     c76:	3f c0       	rjmp	.+126    	; 0xcf6 <main+0x1be>
				case DEBUGPRINT_START:
					if(now - prevIDPrint >= PRINT_ID_INTERVAL) {
     c78:	c4 18       	sub	r12, r4
     c7a:	d5 08       	sbc	r13, r5
     c7c:	e6 08       	sbc	r14, r6
     c7e:	f7 08       	sbc	r15, r7
     c80:	20 ec       	ldi	r18, 0xC0	; 192
     c82:	c2 16       	cp	r12, r18
     c84:	26 ec       	ldi	r18, 0xC6	; 198
     c86:	d2 06       	cpc	r13, r18
     c88:	2d e2       	ldi	r18, 0x2D	; 45
     c8a:	e2 06       	cpc	r14, r18
     c8c:	f1 04       	cpc	r15, r1
     c8e:	68 f0       	brcs	.+26     	; 0xcaa <main+0x172>
						prevIDPrint += PRINT_ID_INTERVAL;
     c90:	80 ec       	ldi	r24, 0xC0	; 192
     c92:	48 0e       	add	r4, r24
     c94:	86 ec       	ldi	r24, 0xC6	; 198
     c96:	58 1e       	adc	r5, r24
     c98:	8d e2       	ldi	r24, 0x2D	; 45
     c9a:	68 1e       	adc	r6, r24
     c9c:	71 1c       	adc	r7, r1
						PrintResetHeader(&gCtrl_IO);
     c9e:	86 e5       	ldi	r24, 0x56	; 86
     ca0:	90 e2       	ldi	r25, 0x20	; 32
     ca2:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <PrintResetHeader>
     ca6:	c0 e0       	ldi	r28, 0x00	; 0
     ca8:	39 c0       	rjmp	.+114    	; 0xd1c <main+0x1e4>
					}
					else {
						TakeSnapshot();
     caa:	0e 94 f6 17 	call	0x2fec	; 0x2fec <TakeSnapshot>
     cae:	c0 e0       	ldi	r28, 0x00	; 0
						debugPrintstate = DEBUGPRINT_ANALOG;
     cb0:	33 24       	eor	r3, r3
     cb2:	33 94       	inc	r3
     cb4:	33 c0       	rjmp	.+102    	; 0xd1c <main+0x1e4>
					}
					break;
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
     cb6:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
     cba:	80 73       	andi	r24, 0x30	; 48
     cbc:	49 f4       	brne	.+18     	; 0xcd0 <main+0x198>
						PrintCSV_H2A(&gCtrl_IO);
     cbe:	86 e5       	ldi	r24, 0x56	; 86
     cc0:	90 e2       	ldi	r25, 0x20	; 32
     cc2:	0e 94 17 18 	call	0x302e	; 0x302e <PrintCSV_H2A>
     cc6:	c0 e0       	ldi	r28, 0x00	; 0
					}
					else {
						PrintCSV_EVA(&gCtrl_IO);
					}
					debugPrintstate = DEBUGPRINT_9DOF;
     cc8:	68 94       	set
     cca:	33 24       	eor	r3, r3
     ccc:	31 f8       	bld	r3, 1
     cce:	26 c0       	rjmp	.+76     	; 0xd1c <main+0x1e4>
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
						PrintCSV_H2A(&gCtrl_IO);
					}
					else {
						PrintCSV_EVA(&gCtrl_IO);
     cd0:	86 e5       	ldi	r24, 0x56	; 86
     cd2:	90 e2       	ldi	r25, 0x20	; 32
     cd4:	0e 94 6e 20 	call	0x40dc	; 0x40dc <PrintCSV_EVA>
     cd8:	c0 e0       	ldi	r28, 0x00	; 0
					}
					debugPrintstate = DEBUGPRINT_9DOF;
     cda:	68 94       	set
     cdc:	33 24       	eor	r3, r3
     cde:	31 f8       	bld	r3, 1
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <main+0x1e4>
					break;
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
     ce2:	86 e5       	ldi	r24, 0x56	; 86
     ce4:	90 e2       	ldi	r25, 0x20	; 32
     ce6:	0e 94 b8 08 	call	0x1170	; 0x1170 <PrintCSV_9DOF>
					debugPrintstate = DEBUGPRINT_BUS;
					break;
     cea:	c0 e0       	ldi	r28, 0x00	; 0
					}
					debugPrintstate = DEBUGPRINT_9DOF;
					break;
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_BUS;
     cec:	0f 2e       	mov	r0, r31
     cee:	f3 e0       	ldi	r31, 0x03	; 3
     cf0:	3f 2e       	mov	r3, r31
     cf2:	f0 2d       	mov	r31, r0
					break;
     cf4:	13 c0       	rjmp	.+38     	; 0xd1c <main+0x1e4>
				case DEBUGPRINT_BUS:
					PrintBussensors(&gCtrl_IO);
     cf6:	86 e5       	ldi	r24, 0x56	; 86
     cf8:	90 e2       	ldi	r25, 0x20	; 32
     cfa:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <PrintBussensors>
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
     cfe:	26 e5       	ldi	r18, 0x56	; 86
     d00:	30 e2       	ldi	r19, 0x20	; 32
     d02:	43 e0       	ldi	r20, 0x03	; 3
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	82 ec       	ldi	r24, 0xC2	; 194
     d0c:	91 e2       	ldi	r25, 0x21	; 33
     d0e:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
     d12:	c0 e0       	ldi	r28, 0x00	; 0
				default:
					debugPrintstate = DEBUGPRINT_START;
     d14:	31 2c       	mov	r3, r1
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <main+0x1e4>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     d18:	c0 e0       	ldi	r28, 0x00	; 0
					PrintBussensors(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
				default:
					debugPrintstate = DEBUGPRINT_START;
     d1a:	31 2c       	mov	r3, r1
			}
		}

		/* Handle the slave code */
		if(CanRead_Comm485())
     d1c:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <CanRead_Comm485>
     d20:	88 23       	and	r24, r24
     d22:	19 f0       	breq	.+6      	; 0xd2a <main+0x1f2>
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
     d24:	f8 01       	movw	r30, r16
     d26:	d6 83       	std	Z+6, r29	; 0x06
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <main+0x1f6>
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     d2a:	f8 01       	movw	r30, r16
     d2c:	d5 83       	std	Z+5, r29	; 0x05
		if ( ReadLineRS45( slaveData ) == 1 ){
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	98 e2       	ldi	r25, 0x28	; 40
     d32:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ReadLineRS45>
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	09 f0       	breq	.+2      	; 0xd3c <main+0x204>
     d3a:	58 cf       	rjmp	.-336    	; 0xbec <main+0xb4>
			ScanDataInSlave(slaveData);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	98 e2       	ldi	r25, 0x28	; 40
     d40:	0e 94 a1 03 	call	0x742	; 0x742 <ScanDataInSlave>
     d44:	53 cf       	rjmp	.-346    	; 0xbec <main+0xb4>
			if(now - prev >= ESC_TIMEOUT)
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
     d46:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <CanWrite_Ctrl>
     d4a:	86 39       	cpi	r24, 0x96	; 150
     d4c:	08 f0       	brcs	.+2      	; 0xd50 <main+0x218>
     d4e:	84 cf       	rjmp	.-248    	; 0xc58 <main+0x120>
     d50:	c0 e0       	ldi	r28, 0x00	; 0
     d52:	e4 cf       	rjmp	.-56     	; 0xd1c <main+0x1e4>

00000d54 <S9DOFWrite>:
		);
	
} /* PrintCSV_9DOF */


static void S9DOFWrite(char Address, char Data, uint8_t xm_or_g) {
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
	uint8_t bit = 0, i;

	if (xm_or_g == SELECT_G)
     d5c:	41 30       	cpi	r20, 0x01	; 1
     d5e:	21 f4       	brne	.+8      	; 0xd68 <S9DOFWrite+0x14>
		CS_G_POORT.OUTCLR = CS_G;
     d60:	91 e0       	ldi	r25, 0x01	; 1
     d62:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d66:	40 c0       	rjmp	.+128    	; 0xde8 <S9DOFWrite+0x94>
	else 
		CS_XM_POORT.OUTCLR = CS_XM;
     d68:	90 e8       	ldi	r25, 0x80	; 128
     d6a:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     d6e:	3c c0       	rjmp	.+120    	; 0xde8 <S9DOFWrite+0x94>

	for(i = 0; i < 8; i++) {
		bit = ((Address << i) & 0x80);
     d70:	de 01       	movw	r26, r28
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <S9DOFWrite+0x26>
     d76:	aa 0f       	add	r26, r26
     d78:	bb 1f       	adc	r27, r27
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <S9DOFWrite+0x22>
		if (bit) {
     d7e:	aa 23       	and	r26, r26
     d80:	24 f4       	brge	.+8      	; 0xd8a <S9DOFWrite+0x36>
			SDA_POORT.OUTSET = SDA;
     d82:	d8 01       	movw	r26, r16
     d84:	15 96       	adiw	r26, 0x05	; 5
     d86:	8c 93       	st	X, r24
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <S9DOFWrite+0x3c>
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     d8a:	d8 01       	movw	r26, r16
     d8c:	16 96       	adiw	r26, 0x06	; 6
     d8e:	8c 93       	st	X, r24
		}
		SCL_POORT.OUTCLR = SCL;
     d90:	96 83       	std	Z+6, r25	; 0x06
		SCL_POORT.OUTSET = SCL;
     d92:	95 83       	std	Z+5, r25	; 0x05
     d94:	2f 5f       	subi	r18, 0xFF	; 255
     d96:	3f 4f       	sbci	r19, 0xFF	; 255
	if (xm_or_g == SELECT_G)
		CS_G_POORT.OUTCLR = CS_G;
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
     d98:	28 30       	cpi	r18, 0x08	; 8
     d9a:	31 05       	cpc	r19, r1
     d9c:	49 f7       	brne	.-46     	; 0xd70 <S9DOFWrite+0x1c>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
		bit = ((Data << i) & 0x80);
     da2:	70 e0       	ldi	r23, 0x00	; 0
		if (bit) {
			SDA_POORT.OUTSET = SDA;
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     da4:	c0 e8       	ldi	r28, 0x80	; 128
     da6:	d6 e0       	ldi	r29, 0x06	; 6
     da8:	30 e4       	ldi	r19, 0x40	; 64
		}
		SCL_POORT.OUTCLR = SCL;
     daa:	e0 e6       	ldi	r30, 0x60	; 96
     dac:	f6 e0       	ldi	r31, 0x06	; 6
     dae:	21 e0       	ldi	r18, 0x01	; 1
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
		bit = ((Data << i) & 0x80);
     db0:	db 01       	movw	r26, r22
     db2:	08 2e       	mov	r0, r24
     db4:	02 c0       	rjmp	.+4      	; 0xdba <S9DOFWrite+0x66>
     db6:	aa 0f       	add	r26, r26
     db8:	bb 1f       	adc	r27, r27
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <S9DOFWrite+0x62>
		if (bit) {
     dbe:	aa 23       	and	r26, r26
     dc0:	14 f4       	brge	.+4      	; 0xdc6 <S9DOFWrite+0x72>
			SDA_POORT.OUTSET = SDA;
     dc2:	3d 83       	std	Y+5, r19	; 0x05
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <S9DOFWrite+0x74>
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     dc6:	3e 83       	std	Y+6, r19	; 0x06
		}
		SCL_POORT.OUTCLR = SCL;
     dc8:	26 83       	std	Z+6, r18	; 0x06
		SCL_POORT.OUTSET = SCL;
     dca:	25 83       	std	Z+5, r18	; 0x05
     dcc:	01 96       	adiw	r24, 0x01	; 1
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
     dce:	88 30       	cpi	r24, 0x08	; 8
     dd0:	91 05       	cpc	r25, r1
     dd2:	71 f7       	brne	.-36     	; 0xdb0 <S9DOFWrite+0x5c>
		}
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}

	if (xm_or_g == SELECT_G)
     dd4:	41 30       	cpi	r20, 0x01	; 1
     dd6:	21 f4       	brne	.+8      	; 0xde0 <S9DOFWrite+0x8c>
		CS_G_POORT.OUTSET = CS_G;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     dde:	0f c0       	rjmp	.+30     	; 0xdfe <S9DOFWrite+0xaa>
	else 
		CS_XM_POORT.OUTSET = CS_XM;
     de0:	80 e8       	ldi	r24, 0x80	; 128
     de2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <S9DOFWrite+0xaa>
		);
	
} /* PrintCSV_9DOF */


static void S9DOFWrite(char Address, char Data, uint8_t xm_or_g) {
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
		CS_G_POORT.OUTCLR = CS_G;
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
		bit = ((Address << i) & 0x80);
     dec:	c8 2f       	mov	r28, r24
     dee:	d0 e0       	ldi	r29, 0x00	; 0
		if (bit) {
			SDA_POORT.OUTSET = SDA;
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     df0:	00 e8       	ldi	r16, 0x80	; 128
     df2:	16 e0       	ldi	r17, 0x06	; 6
     df4:	80 e4       	ldi	r24, 0x40	; 64
		}
		SCL_POORT.OUTCLR = SCL;
     df6:	e0 e6       	ldi	r30, 0x60	; 96
     df8:	f6 e0       	ldi	r31, 0x06	; 6
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	b9 cf       	rjmp	.-142    	; 0xd70 <S9DOFWrite+0x1c>
	if (xm_or_g == SELECT_G)
		CS_G_POORT.OUTSET = CS_G;
	else 
		CS_XM_POORT.OUTSET = CS_XM;
		
} /* S9DOFWrite */
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <S9DOFRead>:


static uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
     e08:	4f 92       	push	r4
     e0a:	5f 92       	push	r5
     e0c:	7f 92       	push	r7
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	76 2e       	mov	r7, r22
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;

	if (xm_or_g == SELECT_G)
     e28:	41 30       	cpi	r20, 0x01	; 1
     e2a:	21 f4       	brne	.+8      	; 0xe34 <S9DOFRead+0x2c>
		CS_G_POORT.OUTCLR = CS_G;
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <S9DOFRead+0x32>
	else 
		CS_XM_POORT.OUTCLR = CS_XM;
     e34:	90 e8       	ldi	r25, 0x80	; 128
     e36:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>

	Address |= 0x80;
     e3a:	80 68       	ori	r24, 0x80	; 128
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0

	for(i = 0; i < 8; i++) {
		bit = !!((Address << i) & 0x80);
     e40:	a8 2f       	mov	r26, r24
     e42:	b0 e0       	ldi	r27, 0x00	; 0
		if (bit) {
			SDA_POORT.OUTSET = SDA;
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     e44:	0f 2e       	mov	r0, r31
     e46:	f0 e8       	ldi	r31, 0x80	; 128
     e48:	ef 2e       	mov	r14, r31
     e4a:	f6 e0       	ldi	r31, 0x06	; 6
     e4c:	ff 2e       	mov	r15, r31
     e4e:	f0 2d       	mov	r31, r0
     e50:	80 e4       	ldi	r24, 0x40	; 64
		}
		SCL_POORT.OUTCLR = SCL;
     e52:	e0 e6       	ldi	r30, 0x60	; 96
     e54:	f6 e0       	ldi	r31, 0x06	; 6
     e56:	91 e0       	ldi	r25, 0x01	; 1
		CS_XM_POORT.OUTCLR = CS_XM;

	Address |= 0x80;

	for(i = 0; i < 8; i++) {
		bit = !!((Address << i) & 0x80);
     e58:	9d 01       	movw	r18, r26
     e5a:	06 2e       	mov	r0, r22
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <S9DOFRead+0x5a>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <S9DOFRead+0x56>
		if (bit) {
     e66:	27 ff       	sbrs	r18, 7
     e68:	03 c0       	rjmp	.+6      	; 0xe70 <S9DOFRead+0x68>
			SDA_POORT.OUTSET = SDA;
     e6a:	e7 01       	movw	r28, r14
     e6c:	8d 83       	std	Y+5, r24	; 0x05
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <S9DOFRead+0x6c>
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     e70:	e7 01       	movw	r28, r14
     e72:	8e 83       	std	Y+6, r24	; 0x06
		}
		SCL_POORT.OUTCLR = SCL;
     e74:	96 83       	std	Z+6, r25	; 0x06
		SCL_POORT.OUTSET = SCL;
     e76:	95 83       	std	Z+5, r25	; 0x05
     e78:	6f 5f       	subi	r22, 0xFF	; 255
     e7a:	7f 4f       	sbci	r23, 0xFF	; 255
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	Address |= 0x80;

	for(i = 0; i < 8; i++) {
     e7c:	68 30       	cpi	r22, 0x08	; 8
     e7e:	71 05       	cpc	r23, r1
     e80:	59 f7       	brne	.-42     	; 0xe58 <S9DOFRead+0x50>
			SDA_POORT.OUTCLR = SDA;
		}
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;
     e82:	80 e4       	ldi	r24, 0x40	; 64
     e84:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
     e88:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
static uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
     e8e:	e0 e0       	ldi	r30, 0x00	; 0
     e90:	f0 e0       	ldi	r31, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     e92:	c0 e6       	ldi	r28, 0x60	; 96
     e94:	d6 e0       	ldi	r29, 0x06	; 6
     e96:	51 e0       	ldi	r21, 0x01	; 1

		if(SDO_G_POORT.IN & SDO_G)
     e98:	0f 2e       	mov	r0, r31
     e9a:	f0 ea       	ldi	r31, 0xA0	; 160
     e9c:	cf 2e       	mov	r12, r31
     e9e:	f6 e0       	ldi	r31, 0x06	; 6
     ea0:	df 2e       	mov	r13, r31
     ea2:	f0 2d       	mov	r31, r0
			bitG = 1;
		else 
			bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;

		if(SDO_XM_POORT.IN & SDO_XM)
     ea4:	0f 2e       	mov	r0, r31
     ea6:	f0 e8       	ldi	r31, 0x80	; 128
     ea8:	ef 2e       	mov	r14, r31
     eaa:	f6 e0       	ldi	r31, 0x06	; 6
     eac:	ff 2e       	mov	r15, r31
     eae:	f0 2d       	mov	r31, r0
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     eb0:	5e 83       	std	Y+6, r21	; 0x06

		if(SDO_G_POORT.IN & SDO_G)
     eb2:	d6 01       	movw	r26, r12
     eb4:	18 96       	adiw	r26, 0x08	; 8
     eb6:	8c 91       	ld	r24, X
			bitG = 1;
		else 
			bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ff 27       	eor	r31, r31
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;

		if(SDO_G_POORT.IN & SDO_G)
     ebe:	80 fb       	bst	r24, 0
     ec0:	44 24       	eor	r4, r4
     ec2:	40 f8       	bld	r4, 0
     ec4:	51 2c       	mov	r5, r1
			bitG = 1;
		else 
			bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;
     ec6:	e4 29       	or	r30, r4
     ec8:	f5 29       	or	r31, r5

		if(SDO_XM_POORT.IN & SDO_XM)
     eca:	d7 01       	movw	r26, r14
     ecc:	18 96       	adiw	r26, 0x08	; 8
     ece:	ac 90       	ld	r10, X
			bitXM = 1;
		else
			bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
     ed0:	49 01       	movw	r8, r18
     ed2:	88 0c       	add	r8, r8
     ed4:	99 1c       	adc	r9, r9
     ed6:	99 24       	eor	r9, r9
			bitG = 1;
		else 
			bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;

		if(SDO_XM_POORT.IN & SDO_XM)
     ed8:	2a 2d       	mov	r18, r10
     eda:	aa 0c       	add	r10, r10
     edc:	33 0b       	sbc	r19, r19
     ede:	59 01       	movw	r10, r18
     ee0:	aa 24       	eor	r10, r10
     ee2:	bb 0c       	add	r11, r11
     ee4:	aa 1c       	adc	r10, r10
     ee6:	bb 24       	eor	r11, r11
			bitXM = 1;
		else
			bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
     ee8:	95 01       	movw	r18, r10
     eea:	28 29       	or	r18, r8
     eec:	39 29       	or	r19, r9

		SCL_POORT.OUTSET = SCL;
     eee:	5d 83       	std	Y+5, r21	; 0x05
     ef0:	91 50       	subi	r25, 0x01	; 1
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
     ef2:	f1 f6       	brne	.-68     	; 0xeb0 <S9DOFRead+0xa8>
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;

		SCL_POORT.OUTSET = SCL;
	}

	if(bytes>1) {
     ef4:	b1 e0       	ldi	r27, 0x01	; 1
     ef6:	b7 15       	cp	r27, r7
     ef8:	d8 f5       	brcc	.+118    	; 0xf70 <S9DOFRead+0x168>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	c0 e0       	ldi	r28, 0x00	; 0
     f00:	d0 e0       	ldi	r29, 0x00	; 0
		for(int count = 0; count < 8; count++) {
			SCL_POORT.OUTCLR = SCL;
     f02:	0f 2e       	mov	r0, r31
     f04:	f0 e6       	ldi	r31, 0x60	; 96
     f06:	ef 2e       	mov	r14, r31
     f08:	f6 e0       	ldi	r31, 0x06	; 6
     f0a:	ff 2e       	mov	r15, r31
     f0c:	f0 2d       	mov	r31, r0
     f0e:	51 e0       	ldi	r21, 0x01	; 1

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
     f10:	0f 2e       	mov	r0, r31
     f12:	f0 ea       	ldi	r31, 0xA0	; 160
     f14:	af 2e       	mov	r10, r31
     f16:	f6 e0       	ldi	r31, 0x06	; 6
     f18:	bf 2e       	mov	r11, r31
     f1a:	f0 2d       	mov	r31, r0
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;

			if(SDO_XM_POORT.IN & SDO_XM)
     f1c:	0f 2e       	mov	r0, r31
     f1e:	f0 e8       	ldi	r31, 0x80	; 128
     f20:	cf 2e       	mov	r12, r31
     f22:	f6 e0       	ldi	r31, 0x06	; 6
     f24:	df 2e       	mov	r13, r31
     f26:	f0 2d       	mov	r31, r0
		SCL_POORT.OUTSET = SCL;
	}

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
			SCL_POORT.OUTCLR = SCL;
     f28:	d7 01       	movw	r26, r14
     f2a:	16 96       	adiw	r26, 0x06	; 6
     f2c:	5c 93       	st	X, r21

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
     f2e:	d5 01       	movw	r26, r10
     f30:	18 96       	adiw	r26, 0x08	; 8
     f32:	9c 90       	ld	r9, X
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;
     f34:	cc 0f       	add	r28, r28
     f36:	dd 1f       	adc	r29, r29
     f38:	dd 27       	eor	r29, r29

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
			SCL_POORT.OUTCLR = SCL;

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
     f3a:	09 2d       	mov	r16, r9
     f3c:	01 70       	andi	r16, 0x01	; 1
     f3e:	10 e0       	ldi	r17, 0x00	; 0
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;
     f40:	c0 2b       	or	r28, r16
     f42:	d1 2b       	or	r29, r17

			if(SDO_XM_POORT.IN & SDO_XM)
     f44:	d6 01       	movw	r26, r12
     f46:	18 96       	adiw	r26, 0x08	; 8
     f48:	9c 90       	ld	r9, X
				bitXM = 1;
			else 
				bitXM = 0;
			byte2GyroXM = ((byte2GyroXM &0x7F)<<1)|bitXM;
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	99 27       	eor	r25, r25

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;

			if(SDO_XM_POORT.IN & SDO_XM)
     f50:	a9 2d       	mov	r26, r9
     f52:	99 0c       	add	r9, r9
     f54:	bb 0b       	sbc	r27, r27
     f56:	aa 27       	eor	r26, r26
     f58:	bb 0f       	add	r27, r27
     f5a:	aa 1f       	adc	r26, r26
     f5c:	bb 27       	eor	r27, r27
				bitXM = 1;
			else 
				bitXM = 0;
			byte2GyroXM = ((byte2GyroXM &0x7F)<<1)|bitXM;
     f5e:	8a 2b       	or	r24, r26
     f60:	9b 2b       	or	r25, r27

			SCL_POORT.OUTSET = SCL;
     f62:	d7 01       	movw	r26, r14
     f64:	15 96       	adiw	r26, 0x05	; 5
     f66:	5c 93       	st	X, r21
     f68:	61 50       	subi	r22, 0x01	; 1
     f6a:	71 09       	sbc	r23, r1

		SCL_POORT.OUTSET = SCL;
	}

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
     f6c:	e9 f6       	brne	.-70     	; 0xf28 <S9DOFRead+0x120>
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <S9DOFRead+0x170>
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	90 e0       	ldi	r25, 0x00	; 0
static uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
     f74:	c0 e0       	ldi	r28, 0x00	; 0
     f76:	d0 e0       	ldi	r29, 0x00	; 0

			SCL_POORT.OUTSET = SCL;
		}
	}

	if (xm_or_g == SELECT_G)
     f78:	41 30       	cpi	r20, 0x01	; 1
     f7a:	41 f4       	brne	.+16     	; 0xf8c <S9DOFRead+0x184>
		CS_G_POORT.OUTSET = CS_G;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	else 
		CS_XM_POORT.OUTSET = CS_XM;

	if (xm_or_g == SELECT_G) 
		data = (((uint16_t) byte2GyroG) << 8) | byteGyroG;
     f82:	9c 2f       	mov	r25, r28
     f84:	88 27       	eor	r24, r24
     f86:	8e 2b       	or	r24, r30
     f88:	9f 2b       	or	r25, r31
     f8a:	07 c0       	rjmp	.+14     	; 0xf9a <S9DOFRead+0x192>
	}

	if (xm_or_g == SELECT_G)
		CS_G_POORT.OUTSET = CS_G;
	else 
		CS_XM_POORT.OUTSET = CS_XM;
     f8c:	40 e8       	ldi	r20, 0x80	; 128
     f8e:	40 93 45 06 	sts	0x0645, r20	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	if (xm_or_g == SELECT_G) 
		data = (((uint16_t) byte2GyroG) << 8) | byteGyroG;
	else 
		data = (((uint16_t) byte2GyroXM) << 8) | byteGyroXM;
     f92:	98 2f       	mov	r25, r24
     f94:	88 27       	eor	r24, r24
     f96:	82 2b       	or	r24, r18
     f98:	93 2b       	or	r25, r19

	return data;
}
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	bf 90       	pop	r11
     fac:	af 90       	pop	r10
     fae:	9f 90       	pop	r9
     fb0:	8f 90       	pop	r8
     fb2:	7f 90       	pop	r7
     fb4:	5f 90       	pop	r5
     fb6:	4f 90       	pop	r4
     fb8:	08 95       	ret

00000fba <Init9DOF>:

static void S9DOFWrite(char Address, char Data, uint8_t xm_or_g);
static uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g);


void Init9DOF(void) {
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
	
	SDA_POORT.DIRSET	=	SDA;
     fbe:	a0 e8       	ldi	r26, 0x80	; 128
     fc0:	b6 e0       	ldi	r27, 0x06	; 6
     fc2:	20 e4       	ldi	r18, 0x40	; 64
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	2c 93       	st	X, r18
     fc8:	11 97       	sbiw	r26, 0x01	; 1
	CS_G_POORT.DIRSET	=	CS_G;
     fca:	e0 e4       	ldi	r30, 0x40	; 64
     fcc:	f6 e0       	ldi	r31, 0x06	; 6
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	81 83       	std	Z+1, r24	; 0x01
	CS_XM_POORT.DIRSET	=	CS_XM;
     fd2:	90 e8       	ldi	r25, 0x80	; 128
     fd4:	91 83       	std	Z+1, r25	; 0x01
	SCL_POORT.DIRSET	=	SCL;
     fd6:	c0 e6       	ldi	r28, 0x60	; 96
     fd8:	d6 e0       	ldi	r29, 0x06	; 6
     fda:	89 83       	std	Y+1, r24	; 0x01

	SCL_POORT.OUTSET	=	SCL;
     fdc:	8d 83       	std	Y+5, r24	; 0x05
	SDA_POORT.OUTCLR	=	SDA;
     fde:	16 96       	adiw	r26, 0x06	; 6
     fe0:	2c 93       	st	X, r18
     fe2:	16 97       	sbiw	r26, 0x06	; 6
	CS_G_POORT.OUTSET	=	CS_G;
     fe4:	85 83       	std	Z+5, r24	; 0x05
	CS_XM_POORT.OUTSET	=	CS_XM;
     fe6:	95 83       	std	Z+5, r25	; 0x05

	SDO_G_POORT.DIRCLR	=	SDO_G;
     fe8:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
	SDO_XM_POORT.DIRCLR	=	SDO_XM;
     fec:	12 96       	adiw	r26, 0x02	; 2
     fee:	9c 93       	st	X, r25

	S9DOFWrite(0x20, 0x47, SELECT_XM);
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	67 e4       	ldi	r22, 0x47	; 71
     ff4:	80 e2       	ldi	r24, 0x20	; 32
     ff6:	0e 94 aa 06 	call	0xd54	; 0xd54 <S9DOFWrite>
	S9DOFWrite(0x21, 0x08, SELECT_XM);
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	68 e0       	ldi	r22, 0x08	; 8
     ffe:	81 e2       	ldi	r24, 0x21	; 33
    1000:	0e 94 aa 06 	call	0xd54	; 0xd54 <S9DOFWrite>
	S9DOFWrite(0x24, 0x94, SELECT_XM);//was 0x10
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	64 e9       	ldi	r22, 0x94	; 148
    1008:	84 e2       	ldi	r24, 0x24	; 36
    100a:	0e 94 aa 06 	call	0xd54	; 0xd54 <S9DOFWrite>
	S9DOFWrite(0x25, 0x20, SELECT_XM);
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	60 e2       	ldi	r22, 0x20	; 32
    1012:	85 e2       	ldi	r24, 0x25	; 37
    1014:	0e 94 aa 06 	call	0xd54	; 0xd54 <S9DOFWrite>
	S9DOFWrite(0x26, 0x00, SELECT_XM);
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	86 e2       	ldi	r24, 0x26	; 38
    101e:	0e 94 aa 06 	call	0xd54	; 0xd54 <S9DOFWrite>

	S9DOFWrite(0x20, 0x8F, SELECT_G);
    1022:	41 e0       	ldi	r20, 0x01	; 1
    1024:	6f e8       	ldi	r22, 0x8F	; 143
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	0e 94 aa 06 	call	0xd54	; 0xd54 <S9DOFWrite>
	S9DOFWrite(0x21, 0x00, SELECT_G);
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	81 e2       	ldi	r24, 0x21	; 33
    1032:	0e 94 aa 06 	call	0xd54	; 0xd54 <S9DOFWrite>
	
} /* Init9DOF */
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <Process9DOF>:


void Process9DOF(void) {
    103c:	08 95       	ret

0000103e <GyroGetTemp>:


float GyroGetTemp(void) {
	int16_t data = 0;

	data = (int16_t)S9DOFRead(0xC5,2,SELECT_XM);
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	62 e0       	ldi	r22, 0x02	; 2
    1042:	85 ec       	ldi	r24, 0xC5	; 197
    1044:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>

	return data / 8.0f;
    1048:	bc 01       	movw	r22, r24
    104a:	99 0f       	add	r25, r25
    104c:	88 0b       	sbc	r24, r24
    104e:	99 0b       	sbc	r25, r25
    1050:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	5e e3       	ldi	r21, 0x3E	; 62
    105c:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
}
    1060:	08 95       	ret

00001062 <GyroGetMagnetic>:


float GyroGetMagnetic(uint8_t X_Y_Z)
{
	int16_t data = 0;
	if (X_Y_Z == GET_X)
    1062:	81 11       	cpse	r24, r1
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <GyroGetMagnetic+0x10>
	{
		data = (int16_t) S9DOFRead(0xC8,2,SELECT_XM);
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	62 e0       	ldi	r22, 0x02	; 2
    106a:	88 ec       	ldi	r24, 0xC8	; 200
    106c:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    1070:	12 c0       	rjmp	.+36     	; 0x1096 <GyroGetMagnetic+0x34>
	}
	if (X_Y_Z == GET_Y)
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	31 f4       	brne	.+12     	; 0x1082 <GyroGetMagnetic+0x20>
	{
		data = (int16_t) S9DOFRead(0xCA,2,SELECT_XM);
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	62 e0       	ldi	r22, 0x02	; 2
    107a:	8a ec       	ldi	r24, 0xCA	; 202
    107c:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    1080:	0a c0       	rjmp	.+20     	; 0x1096 <GyroGetMagnetic+0x34>
	}
	if (X_Y_Z == GET_Z)
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	31 f4       	brne	.+12     	; 0x1092 <GyroGetMagnetic+0x30>
	{
		data = (int16_t) S9DOFRead(0xCC,2,SELECT_XM);
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	62 e0       	ldi	r22, 0x02	; 2
    108a:	8c ec       	ldi	r24, 0xCC	; 204
    108c:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <GyroGetMagnetic+0x34>
}


float GyroGetMagnetic(uint8_t X_Y_Z)
{
	int16_t data = 0;
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
		data = (int16_t) S9DOFRead(0xCC,2,SELECT_XM);
	}

//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = ((float)data / 1000)*LSM9DS0_MAG_MGAUSS_4GAUSS;
    1096:	bc 01       	movw	r22, r24
    1098:	99 0f       	add	r25, r25
    109a:	88 0b       	sbc	r24, r24
    109c:	99 0b       	sbc	r25, r25
    109e:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	4a e7       	ldi	r20, 0x7A	; 122
    10a8:	54 e4       	ldi	r21, 0x44	; 68
    10aa:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    10ae:	2a e0       	ldi	r18, 0x0A	; 10
    10b0:	37 ed       	ldi	r19, 0xD7	; 215
    10b2:	43 e2       	ldi	r20, 0x23	; 35
    10b4:	5e e3       	ldi	r21, 0x3E	; 62
    10b6:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>

	return return_data;
}
    10ba:	08 95       	ret

000010bc <GyroGetAcceleration>:


float GyroGetAcceleration(uint8_t X_Y_Z) {
	int16_t data = 0;
	
	if (X_Y_Z == GET_X)
    10bc:	81 11       	cpse	r24, r1
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <GyroGetAcceleration+0x10>
	{
		data = (int16_t) S9DOFRead(0xE8,2,SELECT_XM);
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	62 e0       	ldi	r22, 0x02	; 2
    10c4:	88 ee       	ldi	r24, 0xE8	; 232
    10c6:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    10ca:	12 c0       	rjmp	.+36     	; 0x10f0 <GyroGetAcceleration+0x34>
	}
	if (X_Y_Z == GET_Y)
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	31 f4       	brne	.+12     	; 0x10dc <GyroGetAcceleration+0x20>
	{
		data = (int16_t) S9DOFRead(0xEA,2,SELECT_XM);
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	62 e0       	ldi	r22, 0x02	; 2
    10d4:	8a ee       	ldi	r24, 0xEA	; 234
    10d6:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    10da:	0a c0       	rjmp	.+20     	; 0x10f0 <GyroGetAcceleration+0x34>
	}
	if (X_Y_Z == GET_Z)
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	31 f4       	brne	.+12     	; 0x10ec <GyroGetAcceleration+0x30>
	{
		data = (int16_t) S9DOFRead(0xEC,2,SELECT_XM);
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	8c ee       	ldi	r24, 0xEC	; 236
    10e6:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <GyroGetAcceleration+0x34>
	return return_data;
}


float GyroGetAcceleration(uint8_t X_Y_Z) {
	int16_t data = 0;
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
		data = (int16_t) S9DOFRead(0xEC,2,SELECT_XM);
	}

	//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = (((float)data / 1000) * SENSORS_GRAVITY_EARTH)*LSM9DS0_ACCEL_MG_LSB_4G; // factor voor
    10f0:	bc 01       	movw	r22, r24
    10f2:	99 0f       	add	r25, r25
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	4a e7       	ldi	r20, 0x7A	; 122
    1102:	54 e4       	ldi	r21, 0x44	; 68
    1104:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1108:	23 ec       	ldi	r18, 0xC3	; 195
    110a:	35 ef       	ldi	r19, 0xF5	; 245
    110c:	4c e1       	ldi	r20, 0x1C	; 28
    110e:	51 e4       	ldi	r21, 0x41	; 65
    1110:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1114:	23 e2       	ldi	r18, 0x23	; 35
    1116:	3b ed       	ldi	r19, 0xDB	; 219
    1118:	49 ef       	ldi	r20, 0xF9	; 249
    111a:	5d e3       	ldi	r21, 0x3D	; 61
    111c:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>

	return return_data;
}
    1120:	08 95       	ret

00001122 <GyroGetGyro>:


float GyroGetGyro(uint8_t X_Y_Z) {
	int16_t data = 0;

	if (X_Y_Z == GET_X)
    1122:	81 11       	cpse	r24, r1
    1124:	06 c0       	rjmp	.+12     	; 0x1132 <GyroGetGyro+0x10>
	{
		data = (int16_t) S9DOFRead(0x68,2,SELECT_G);
    1126:	41 e0       	ldi	r20, 0x01	; 1
    1128:	62 e0       	ldi	r22, 0x02	; 2
    112a:	88 e6       	ldi	r24, 0x68	; 104
    112c:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    1130:	12 c0       	rjmp	.+36     	; 0x1156 <GyroGetGyro+0x34>
	}
	if (X_Y_Z == GET_Y)
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	31 f4       	brne	.+12     	; 0x1142 <GyroGetGyro+0x20>
	{
		data = (int16_t) S9DOFRead(0x6A,2,SELECT_G);
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	62 e0       	ldi	r22, 0x02	; 2
    113a:	8a e6       	ldi	r24, 0x6A	; 106
    113c:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    1140:	0a c0       	rjmp	.+20     	; 0x1156 <GyroGetGyro+0x34>
	}
	if (X_Y_Z == GET_Z)
    1142:	82 30       	cpi	r24, 0x02	; 2
    1144:	31 f4       	brne	.+12     	; 0x1152 <GyroGetGyro+0x30>
	{
		data = (int16_t) S9DOFRead(0x6C,2,SELECT_G);
    1146:	41 e0       	ldi	r20, 0x01	; 1
    1148:	62 e0       	ldi	r22, 0x02	; 2
    114a:	8c e6       	ldi	r24, 0x6C	; 108
    114c:	0e 94 04 07 	call	0xe08	; 0xe08 <S9DOFRead>
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GyroGetGyro+0x34>
	return return_data;
}


float GyroGetGyro(uint8_t X_Y_Z) {
	int16_t data = 0;
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
		data = (int16_t) S9DOFRead(0x6C,2,SELECT_G);
	}

//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = ((float)data)*LSM9DS0_GYRO_DPS_DIGIT_245DPS;
    1156:	bc 01       	movw	r22, r24
    1158:	99 0f       	add	r25, r25
    115a:	88 0b       	sbc	r24, r24
    115c:	99 0b       	sbc	r25, r25
    115e:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1162:	29 e2       	ldi	r18, 0x29	; 41
    1164:	3c e5       	ldi	r19, 0x5C	; 92
    1166:	4f e0       	ldi	r20, 0x0F	; 15
    1168:	5c e3       	ldi	r21, 0x3C	; 60
    116a:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>

	return return_data;
}
    116e:	08 95       	ret

00001170 <PrintCSV_9DOF>:
void Process9DOF(void) {
	
} /* Process9DOF */


void PrintCSV_9DOF(FILE *fd) {
    1170:	2f 92       	push	r2
    1172:	3f 92       	push	r3
    1174:	4f 92       	push	r4
    1176:	5f 92       	push	r5
    1178:	6f 92       	push	r6
    117a:	7f 92       	push	r7
    117c:	8f 92       	push	r8
    117e:	9f 92       	push	r9
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	66 97       	sbiw	r28, 0x16	; 22
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	8b 8b       	std	Y+19, r24	; 0x13
    11a0:	9c 8b       	std	Y+20, r25	; 0x14
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
		GyroGetTemp()
    11a2:	0e 94 1f 08 	call	0x103e	; 0x103e <GyroGetTemp>
    11a6:	56 2e       	mov	r5, r22
    11a8:	47 2e       	mov	r4, r23
    11aa:	38 2e       	mov	r3, r24
    11ac:	29 2e       	mov	r2, r25
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
    11ae:	82 e0       	ldi	r24, 0x02	; 2
    11b0:	0e 94 91 08 	call	0x1122	; 0x1122 <GyroGetGyro>
    11b4:	96 2e       	mov	r9, r22
    11b6:	87 2e       	mov	r8, r23
    11b8:	78 2e       	mov	r7, r24
    11ba:	69 2e       	mov	r6, r25
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	0e 94 91 08 	call	0x1122	; 0x1122 <GyroGetGyro>
    11c2:	69 83       	std	Y+1, r22	; 0x01
    11c4:	7a 83       	std	Y+2, r23	; 0x02
    11c6:	b8 2e       	mov	r11, r24
    11c8:	a9 2e       	mov	r10, r25
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 91 08 	call	0x1122	; 0x1122 <GyroGetGyro>
    11d0:	6b 83       	std	Y+3, r22	; 0x03
    11d2:	7c 83       	std	Y+4, r23	; 0x04
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	9e 83       	std	Y+6, r25	; 0x06
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
    11d8:	82 e0       	ldi	r24, 0x02	; 2
    11da:	0e 94 31 08 	call	0x1062	; 0x1062 <GyroGetMagnetic>
    11de:	6f 83       	std	Y+7, r22	; 0x07
    11e0:	78 87       	std	Y+8, r23	; 0x08
    11e2:	89 87       	std	Y+9, r24	; 0x09
    11e4:	9a 87       	std	Y+10, r25	; 0x0a
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	0e 94 31 08 	call	0x1062	; 0x1062 <GyroGetMagnetic>
    11ec:	6b 87       	std	Y+11, r22	; 0x0b
    11ee:	7c 87       	std	Y+12, r23	; 0x0c
    11f0:	8d 87       	std	Y+13, r24	; 0x0d
    11f2:	9e 87       	std	Y+14, r25	; 0x0e
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 31 08 	call	0x1062	; 0x1062 <GyroGetMagnetic>
    11fa:	6f 87       	std	Y+15, r22	; 0x0f
    11fc:	78 8b       	std	Y+16, r23	; 0x10
    11fe:	89 8b       	std	Y+17, r24	; 0x11
    1200:	9a 8b       	std	Y+18, r25	; 0x12
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	0e 94 5e 08 	call	0x10bc	; 0x10bc <GyroGetAcceleration>
    1208:	f6 2e       	mov	r15, r22
    120a:	e7 2e       	mov	r14, r23
    120c:	d8 2e       	mov	r13, r24
    120e:	c9 2e       	mov	r12, r25
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	0e 94 5e 08 	call	0x10bc	; 0x10bc <GyroGetAcceleration>
    1216:	6d 8b       	std	Y+21, r22	; 0x15
    1218:	7e 8b       	std	Y+22, r23	; 0x16
    121a:	18 2f       	mov	r17, r24
    121c:	09 2f       	mov	r16, r25
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	0e 94 5e 08 	call	0x10bc	; 0x10bc <GyroGetAcceleration>


void PrintCSV_9DOF(FILE *fd) {
	
	// Dummy print for now. Format will be: Accel[XYZ],Magneto[XYZ],Gyro[XYZ],Temp
	fprintf(fd, "%.3f,%.3f,%.3f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,",
    1224:	2f 92       	push	r2
    1226:	3f 92       	push	r3
    1228:	4f 92       	push	r4
    122a:	5f 92       	push	r5
    122c:	6f 92       	push	r6
    122e:	7f 92       	push	r7
    1230:	8f 92       	push	r8
    1232:	9f 92       	push	r9
    1234:	af 92       	push	r10
    1236:	bf 92       	push	r11
    1238:	2a 81       	ldd	r18, Y+2	; 0x02
    123a:	2f 93       	push	r18
    123c:	e9 81       	ldd	r30, Y+1	; 0x01
    123e:	ef 93       	push	r30
    1240:	fe 81       	ldd	r31, Y+6	; 0x06
    1242:	ff 93       	push	r31
    1244:	2d 81       	ldd	r18, Y+5	; 0x05
    1246:	2f 93       	push	r18
    1248:	ec 81       	ldd	r30, Y+4	; 0x04
    124a:	ef 93       	push	r30
    124c:	fb 81       	ldd	r31, Y+3	; 0x03
    124e:	ff 93       	push	r31
    1250:	2a 85       	ldd	r18, Y+10	; 0x0a
    1252:	2f 93       	push	r18
    1254:	e9 85       	ldd	r30, Y+9	; 0x09
    1256:	ef 93       	push	r30
    1258:	f8 85       	ldd	r31, Y+8	; 0x08
    125a:	ff 93       	push	r31
    125c:	2f 81       	ldd	r18, Y+7	; 0x07
    125e:	2f 93       	push	r18
    1260:	ee 85       	ldd	r30, Y+14	; 0x0e
    1262:	ef 93       	push	r30
    1264:	fd 85       	ldd	r31, Y+13	; 0x0d
    1266:	ff 93       	push	r31
    1268:	2c 85       	ldd	r18, Y+12	; 0x0c
    126a:	2f 93       	push	r18
    126c:	eb 85       	ldd	r30, Y+11	; 0x0b
    126e:	ef 93       	push	r30
    1270:	fa 89       	ldd	r31, Y+18	; 0x12
    1272:	ff 93       	push	r31
    1274:	29 89       	ldd	r18, Y+17	; 0x11
    1276:	2f 93       	push	r18
    1278:	e8 89       	ldd	r30, Y+16	; 0x10
    127a:	ef 93       	push	r30
    127c:	ff 85       	ldd	r31, Y+15	; 0x0f
    127e:	ff 93       	push	r31
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	2e 89       	ldd	r18, Y+22	; 0x16
    128e:	2f 93       	push	r18
    1290:	ed 89       	ldd	r30, Y+21	; 0x15
    1292:	ef 93       	push	r30
    1294:	9f 93       	push	r25
    1296:	8f 93       	push	r24
    1298:	7f 93       	push	r23
    129a:	6f 93       	push	r22
    129c:	86 ec       	ldi	r24, 0xC6	; 198
    129e:	91 e2       	ldi	r25, 0x21	; 33
    12a0:	9f 93       	push	r25
    12a2:	8f 93       	push	r24
    12a4:	fc 89       	ldd	r31, Y+20	; 0x14
    12a6:	ff 93       	push	r31
    12a8:	2b 89       	ldd	r18, Y+19	; 0x13
    12aa:	2f 93       	push	r18
    12ac:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	de bf       	out	0x3e, r29	; 62
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
		GyroGetTemp()
#endif
		);
	
} /* PrintCSV_9DOF */
    12b4:	66 96       	adiw	r28, 0x16	; 22
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	9f 90       	pop	r9
    12d0:	8f 90       	pop	r8
    12d2:	7f 90       	pop	r7
    12d4:	6f 90       	pop	r6
    12d6:	5f 90       	pop	r5
    12d8:	4f 90       	pop	r4
    12da:	3f 90       	pop	r3
    12dc:	2f 90       	pop	r2
    12de:	08 95       	ret

000012e0 <CoreAnalogTakeSnapshot485>:

uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
	
} /* IsSnapshotCoreAnalogDone */
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	80 93 e9 28 	sts	0x28E9, r24	; 0x8028e9 <sTakeSnapshot485>
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	08 95       	ret

000012ec <GetCruiseControlButtonStatus>:
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	8b 01       	movw	r16, r22
    12f8:	ea 01       	movw	r28, r20
    12fa:	60 91 56 29 	lds	r22, 0x2956	; 0x802956 <sSensorDataSnapshot485+0x68>
    12fe:	70 91 57 29 	lds	r23, 0x2957	; 0x802957 <sSensorDataSnapshot485+0x69>
    1302:	80 91 58 29 	lds	r24, 0x2958	; 0x802958 <sSensorDataSnapshot485+0x6a>
    1306:	90 91 59 29 	lds	r25, 0x2959	; 0x802959 <sSensorDataSnapshot485+0x6b>
    130a:	f0 90 50 29 	lds	r15, 0x2950	; 0x802950 <sSensorDataSnapshot485+0x62>
    130e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e4       	ldi	r19, 0x40	; 64
    1316:	4c e9       	ldi	r20, 0x9C	; 156
    1318:	55 e4       	ldi	r21, 0x45	; 69
    131a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    131e:	9f 93       	push	r25
    1320:	8f 93       	push	r24
    1322:	7f 93       	push	r23
    1324:	6f 93       	push	r22
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	f1 10       	cpse	r15, r1
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	9f 93       	push	r25
    1330:	8f 93       	push	r24
    1332:	89 ef       	ldi	r24, 0xF9	; 249
    1334:	91 e2       	ldi	r25, 0x21	; 33
    1336:	9f 93       	push	r25
    1338:	8f 93       	push	r24
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	1f 93       	push	r17
    1340:	0f 93       	push	r16
    1342:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1346:	ed b7       	in	r30, 0x3d	; 61
    1348:	fe b7       	in	r31, 0x3e	; 62
    134a:	3c 96       	adiw	r30, 0x0c	; 12
    134c:	ed bf       	out	0x3d, r30	; 61
    134e:	fe bf       	out	0x3e, r31	; 62
    1350:	8c 17       	cp	r24, r28
    1352:	9d 07       	cpc	r25, r29
    1354:	2c f0       	brlt	.+10     	; 0x1360 <GetCruiseControlButtonStatus+0x74>
    1356:	f8 01       	movw	r30, r16
    1358:	10 82       	st	Z, r1
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GetCruiseControlButtonStatus+0x78>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	ff 90       	pop	r15
    136e:	08 95       	ret

00001370 <GetFullPowerButtonStatus>:
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	8b 01       	movw	r16, r22
    137c:	ea 01       	movw	r28, r20
    137e:	60 91 52 29 	lds	r22, 0x2952	; 0x802952 <sSensorDataSnapshot485+0x64>
    1382:	70 91 53 29 	lds	r23, 0x2953	; 0x802953 <sSensorDataSnapshot485+0x65>
    1386:	80 91 54 29 	lds	r24, 0x2954	; 0x802954 <sSensorDataSnapshot485+0x66>
    138a:	90 91 55 29 	lds	r25, 0x2955	; 0x802955 <sSensorDataSnapshot485+0x67>
    138e:	f0 90 4f 29 	lds	r15, 0x294F	; 0x80294f <sSensorDataSnapshot485+0x61>
    1392:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e4       	ldi	r19, 0x40	; 64
    139a:	4c e9       	ldi	r20, 0x9C	; 156
    139c:	55 e4       	ldi	r21, 0x45	; 69
    139e:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    13a2:	9f 93       	push	r25
    13a4:	8f 93       	push	r24
    13a6:	7f 93       	push	r23
    13a8:	6f 93       	push	r22
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	f1 10       	cpse	r15, r1
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	9f 93       	push	r25
    13b4:	8f 93       	push	r24
    13b6:	89 ef       	ldi	r24, 0xF9	; 249
    13b8:	91 e2       	ldi	r25, 0x21	; 33
    13ba:	9f 93       	push	r25
    13bc:	8f 93       	push	r24
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	1f 93       	push	r17
    13c4:	0f 93       	push	r16
    13c6:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    13ca:	ed b7       	in	r30, 0x3d	; 61
    13cc:	fe b7       	in	r31, 0x3e	; 62
    13ce:	3c 96       	adiw	r30, 0x0c	; 12
    13d0:	ed bf       	out	0x3d, r30	; 61
    13d2:	fe bf       	out	0x3e, r31	; 62
    13d4:	8c 17       	cp	r24, r28
    13d6:	9d 07       	cpc	r25, r29
    13d8:	2c f0       	brlt	.+10     	; 0x13e4 <GetFullPowerButtonStatus+0x74>
    13da:	f8 01       	movw	r30, r16
    13dc:	10 82       	st	Z, r1
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GetFullPowerButtonStatus+0x78>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	08 95       	ret

000013f4 <GetMotorDriverTemp>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	8b 01       	movw	r16, r22
    13fe:	ea 01       	movw	r28, r20
    1400:	60 91 1b 29 	lds	r22, 0x291B	; 0x80291b <sSensorDataSnapshot485+0x2d>
    1404:	70 91 1c 29 	lds	r23, 0x291C	; 0x80291c <sSensorDataSnapshot485+0x2e>
    1408:	80 91 1d 29 	lds	r24, 0x291D	; 0x80291d <sSensorDataSnapshot485+0x2f>
    140c:	90 91 1e 29 	lds	r25, 0x291E	; 0x80291e <sSensorDataSnapshot485+0x30>
    1410:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e2       	ldi	r20, 0x20	; 32
    141a:	59 e4       	ldi	r21, 0x49	; 73
    141c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1420:	9f 93       	push	r25
    1422:	8f 93       	push	r24
    1424:	7f 93       	push	r23
    1426:	6f 93       	push	r22
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	92 e2       	ldi	r25, 0x22	; 34
    142c:	9f 93       	push	r25
    142e:	8f 93       	push	r24
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	1f 93       	push	r17
    1436:	0f 93       	push	r16
    1438:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    143c:	ed b7       	in	r30, 0x3d	; 61
    143e:	fe b7       	in	r31, 0x3e	; 62
    1440:	3a 96       	adiw	r30, 0x0a	; 10
    1442:	ed bf       	out	0x3d, r30	; 61
    1444:	fe bf       	out	0x3e, r31	; 62
    1446:	8c 17       	cp	r24, r28
    1448:	9d 07       	cpc	r25, r29
    144a:	2c f0       	brlt	.+10     	; 0x1456 <GetMotorDriverTemp+0x62>
    144c:	f8 01       	movw	r30, r16
    144e:	10 82       	st	Z, r1
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GetMotorDriverTemp+0x66>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret

00001464 <GetWheelSpeedH2A>:
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	8b 01       	movw	r16, r22
    1476:	ea 01       	movw	r28, r20
    1478:	60 91 47 29 	lds	r22, 0x2947	; 0x802947 <sSensorDataSnapshot485+0x59>
    147c:	70 91 48 29 	lds	r23, 0x2948	; 0x802948 <sSensorDataSnapshot485+0x5a>
    1480:	80 91 49 29 	lds	r24, 0x2949	; 0x802949 <sSensorDataSnapshot485+0x5b>
    1484:	90 91 4a 29 	lds	r25, 0x294A	; 0x80294a <sSensorDataSnapshot485+0x5c>
    1488:	61 15       	cp	r22, r1
    148a:	71 05       	cpc	r23, r1
    148c:	81 05       	cpc	r24, r1
    148e:	91 05       	cpc	r25, r1
    1490:	09 f1       	breq	.+66     	; 0x14d4 <GetWheelSpeedH2A+0x70>
    1492:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e8       	ldi	r20, 0x80	; 128
    149c:	57 e3       	ldi	r21, 0x37	; 55
    149e:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    14a2:	9b 01       	movw	r18, r22
    14a4:	ac 01       	movw	r20, r24
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e8       	ldi	r23, 0x80	; 128
    14aa:	8b e8       	ldi	r24, 0x8B	; 139
    14ac:	94 e4       	ldi	r25, 0x44	; 68
    14ae:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    14b2:	f6 2e       	mov	r15, r22
    14b4:	e7 2e       	mov	r14, r23
    14b6:	d8 2e       	mov	r13, r24
    14b8:	c9 2e       	mov	r12, r25
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e8       	ldi	r20, 0x80	; 128
    14c0:	5f e3       	ldi	r21, 0x3F	; 63
    14c2:	0e 94 ab 31 	call	0x6356	; 0x6356 <__cmpsf2>
    14c6:	88 23       	and	r24, r24
    14c8:	4c f4       	brge	.+18     	; 0x14dc <GetWheelSpeedH2A+0x78>
    14ca:	f1 2c       	mov	r15, r1
    14cc:	e1 2c       	mov	r14, r1
    14ce:	d1 2c       	mov	r13, r1
    14d0:	c1 2c       	mov	r12, r1
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <GetWheelSpeedH2A+0x78>
    14d4:	f1 2c       	mov	r15, r1
    14d6:	e1 2c       	mov	r14, r1
    14d8:	d1 2c       	mov	r13, r1
    14da:	c1 2c       	mov	r12, r1
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	92 e2       	ldi	r25, 0x22	; 34
    14e8:	9f 93       	push	r25
    14ea:	8f 93       	push	r24
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	1f 93       	push	r17
    14f2:	0f 93       	push	r16
    14f4:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    14f8:	ed b7       	in	r30, 0x3d	; 61
    14fa:	fe b7       	in	r31, 0x3e	; 62
    14fc:	3a 96       	adiw	r30, 0x0a	; 10
    14fe:	ed bf       	out	0x3d, r30	; 61
    1500:	fe bf       	out	0x3e, r31	; 62
    1502:	8c 17       	cp	r24, r28
    1504:	9d 07       	cpc	r25, r29
    1506:	2c f0       	brlt	.+10     	; 0x1512 <GetWheelSpeedH2A+0xae>
    1508:	f8 01       	movw	r30, r16
    150a:	10 82       	st	Z, r1
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GetWheelSpeedH2A+0xb2>
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	ef 90       	pop	r14
    1522:	df 90       	pop	r13
    1524:	cf 90       	pop	r12
    1526:	08 95       	ret

00001528 <GetDiodeStatus>:
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	8b 01       	movw	r16, r22
    1534:	ea 01       	movw	r28, r20
    1536:	ee ee       	ldi	r30, 0xEE	; 238
    1538:	f8 e2       	ldi	r31, 0x28	; 40
    153a:	61 a5       	ldd	r22, Z+41	; 0x29
    153c:	72 a5       	ldd	r23, Z+42	; 0x2a
    153e:	83 a5       	ldd	r24, Z+43	; 0x2b
    1540:	94 a5       	ldd	r25, Z+44	; 0x2c
    1542:	f0 a4       	ldd	r15, Z+40	; 0x28
    1544:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e4       	ldi	r19, 0x40	; 64
    154c:	4c e9       	ldi	r20, 0x9C	; 156
    154e:	55 e4       	ldi	r21, 0x45	; 69
    1550:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1554:	9f 93       	push	r25
    1556:	8f 93       	push	r24
    1558:	7f 93       	push	r23
    155a:	6f 93       	push	r22
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	f1 10       	cpse	r15, r1
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <GetDiodeStatus+0x3e>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	9f 93       	push	r25
    1568:	8f 93       	push	r24
    156a:	89 ef       	ldi	r24, 0xF9	; 249
    156c:	91 e2       	ldi	r25, 0x21	; 33
    156e:	9f 93       	push	r25
    1570:	8f 93       	push	r24
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	1f 93       	push	r17
    1578:	0f 93       	push	r16
    157a:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    157e:	ed b7       	in	r30, 0x3d	; 61
    1580:	fe b7       	in	r31, 0x3e	; 62
    1582:	3c 96       	adiw	r30, 0x0c	; 12
    1584:	ed bf       	out	0x3d, r30	; 61
    1586:	fe bf       	out	0x3e, r31	; 62
    1588:	8c 17       	cp	r24, r28
    158a:	9d 07       	cpc	r25, r29
    158c:	2c f0       	brlt	.+10     	; 0x1598 <GetDiodeStatus+0x70>
    158e:	f8 01       	movw	r30, r16
    1590:	10 82       	st	Z, r1
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GetDiodeStatus+0x74>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	08 95       	ret

000015a8 <GetTimeSnapshot>:
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	8b 01       	movw	r16, r22
    15b2:	ea 01       	movw	r28, r20
    15b4:	60 91 ea 28 	lds	r22, 0x28EA	; 0x8028ea <sSessionCycleCountSnapshot485>
    15b8:	70 91 eb 28 	lds	r23, 0x28EB	; 0x8028eb <sSessionCycleCountSnapshot485+0x1>
    15bc:	80 91 ec 28 	lds	r24, 0x28EC	; 0x8028ec <sSessionCycleCountSnapshot485+0x2>
    15c0:	90 91 ed 28 	lds	r25, 0x28ED	; 0x8028ed <sSessionCycleCountSnapshot485+0x3>
    15c4:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e4       	ldi	r19, 0x40	; 64
    15cc:	4c e9       	ldi	r20, 0x9C	; 156
    15ce:	55 e4       	ldi	r21, 0x45	; 69
    15d0:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    15d4:	9f 93       	push	r25
    15d6:	8f 93       	push	r24
    15d8:	7f 93       	push	r23
    15da:	6f 93       	push	r22
    15dc:	8c ef       	ldi	r24, 0xFC	; 252
    15de:	91 e2       	ldi	r25, 0x21	; 33
    15e0:	9f 93       	push	r25
    15e2:	8f 93       	push	r24
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	1f 93       	push	r17
    15ea:	0f 93       	push	r16
    15ec:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    15f0:	ed b7       	in	r30, 0x3d	; 61
    15f2:	fe b7       	in	r31, 0x3e	; 62
    15f4:	3a 96       	adiw	r30, 0x0a	; 10
    15f6:	ed bf       	out	0x3d, r30	; 61
    15f8:	fe bf       	out	0x3e, r31	; 62
    15fa:	8c 17       	cp	r24, r28
    15fc:	9d 07       	cpc	r25, r29
    15fe:	2c f0       	brlt	.+10     	; 0x160a <GetTimeSnapshot+0x62>
    1600:	f8 01       	movw	r30, r16
    1602:	10 82       	st	Z, r1
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GetTimeSnapshot+0x66>
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	08 95       	ret

00001618 <GetSupercapEnergy>:
    1618:	4f 92       	push	r4
    161a:	5f 92       	push	r5
    161c:	6f 92       	push	r6
    161e:	7f 92       	push	r7
    1620:	8f 92       	push	r8
    1622:	9f 92       	push	r9
    1624:	af 92       	push	r10
    1626:	bf 92       	push	r11
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	8b 01       	movw	r16, r22
    163a:	ea 01       	movw	r28, r20
    163c:	ee ee       	ldi	r30, 0xEE	; 238
    163e:	f8 e2       	ldi	r31, 0x28	; 40
    1640:	20 a1       	ldd	r18, Z+32	; 0x20
    1642:	31 a1       	ldd	r19, Z+33	; 0x21
    1644:	42 a1       	ldd	r20, Z+34	; 0x22
    1646:	53 a1       	ldd	r21, Z+35	; 0x23
    1648:	64 a1       	ldd	r22, Z+36	; 0x24
    164a:	75 a1       	ldd	r23, Z+37	; 0x25
    164c:	86 a1       	ldd	r24, Z+38	; 0x26
    164e:	97 a1       	ldd	r25, Z+39	; 0x27
    1650:	e5 ee       	ldi	r30, 0xE5	; 229
    1652:	f9 e2       	ldi	r31, 0x29	; 41
    1654:	40 88       	ldd	r4, Z+16	; 0x10
    1656:	51 88       	ldd	r5, Z+17	; 0x11
    1658:	62 88       	ldd	r6, Z+18	; 0x12
    165a:	73 88       	ldd	r7, Z+19	; 0x13
    165c:	84 88       	ldd	r8, Z+20	; 0x14
    165e:	95 88       	ldd	r9, Z+21	; 0x15
    1660:	a6 88       	ldd	r10, Z+22	; 0x16
    1662:	b7 88       	ldd	r11, Z+23	; 0x17
    1664:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__floatdisf>
    1668:	6b 01       	movw	r12, r22
    166a:	7c 01       	movw	r14, r24
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e4       	ldi	r19, 0x40	; 64
    1670:	4c e9       	ldi	r20, 0x9C	; 156
    1672:	55 e4       	ldi	r21, 0x45	; 69
    1674:	c3 01       	movw	r24, r6
    1676:	b2 01       	movw	r22, r4
    1678:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    167c:	a5 01       	movw	r20, r10
    167e:	94 01       	movw	r18, r8
    1680:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1684:	9b 01       	movw	r18, r22
    1686:	ac 01       	movw	r20, r24
    1688:	c7 01       	movw	r24, r14
    168a:	b6 01       	movw	r22, r12
    168c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1690:	9f 93       	push	r25
    1692:	8f 93       	push	r24
    1694:	7f 93       	push	r23
    1696:	6f 93       	push	r22
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	92 e2       	ldi	r25, 0x22	; 34
    169c:	9f 93       	push	r25
    169e:	8f 93       	push	r24
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	1f 93       	push	r17
    16a6:	0f 93       	push	r16
    16a8:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    16ac:	ed b7       	in	r30, 0x3d	; 61
    16ae:	fe b7       	in	r31, 0x3e	; 62
    16b0:	3a 96       	adiw	r30, 0x0a	; 10
    16b2:	ed bf       	out	0x3d, r30	; 61
    16b4:	fe bf       	out	0x3e, r31	; 62
    16b6:	8c 17       	cp	r24, r28
    16b8:	9d 07       	cpc	r25, r29
    16ba:	2c f0       	brlt	.+10     	; 0x16c6 <GetSupercapEnergy+0xae>
    16bc:	f8 01       	movw	r30, r16
    16be:	10 82       	st	Z, r1
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <GetSupercapEnergy+0xb2>
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	df 91       	pop	r29
    16cc:	cf 91       	pop	r28
    16ce:	1f 91       	pop	r17
    16d0:	0f 91       	pop	r16
    16d2:	ff 90       	pop	r15
    16d4:	ef 90       	pop	r14
    16d6:	df 90       	pop	r13
    16d8:	cf 90       	pop	r12
    16da:	bf 90       	pop	r11
    16dc:	af 90       	pop	r10
    16de:	9f 90       	pop	r9
    16e0:	8f 90       	pop	r8
    16e2:	7f 90       	pop	r7
    16e4:	6f 90       	pop	r6
    16e6:	5f 90       	pop	r5
    16e8:	4f 90       	pop	r4
    16ea:	08 95       	ret

000016ec <GetSupercapPower>:
    16ec:	4f 92       	push	r4
    16ee:	5f 92       	push	r5
    16f0:	6f 92       	push	r6
    16f2:	7f 92       	push	r7
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	af 92       	push	r10
    16fa:	bf 92       	push	r11
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	8b 01       	movw	r16, r22
    170e:	ea 01       	movw	r28, r20
    1710:	60 91 02 29 	lds	r22, 0x2902	; 0x802902 <sSensorDataSnapshot485+0x14>
    1714:	70 91 03 29 	lds	r23, 0x2903	; 0x802903 <sSensorDataSnapshot485+0x15>
    1718:	80 91 04 29 	lds	r24, 0x2904	; 0x802904 <sSensorDataSnapshot485+0x16>
    171c:	90 91 05 29 	lds	r25, 0x2905	; 0x802905 <sSensorDataSnapshot485+0x17>
    1720:	e5 ee       	ldi	r30, 0xE5	; 229
    1722:	f9 e2       	ldi	r31, 0x29	; 41
    1724:	40 88       	ldd	r4, Z+16	; 0x10
    1726:	51 88       	ldd	r5, Z+17	; 0x11
    1728:	62 88       	ldd	r6, Z+18	; 0x12
    172a:	73 88       	ldd	r7, Z+19	; 0x13
    172c:	84 88       	ldd	r8, Z+20	; 0x14
    172e:	95 88       	ldd	r9, Z+21	; 0x15
    1730:	a6 88       	ldd	r10, Z+22	; 0x16
    1732:	b7 88       	ldd	r11, Z+23	; 0x17
    1734:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1738:	6b 01       	movw	r12, r22
    173a:	7c 01       	movw	r14, r24
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	53 e4       	ldi	r21, 0x43	; 67
    1744:	c3 01       	movw	r24, r6
    1746:	b2 01       	movw	r22, r4
    1748:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    174c:	a5 01       	movw	r20, r10
    174e:	94 01       	movw	r18, r8
    1750:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1754:	9b 01       	movw	r18, r22
    1756:	ac 01       	movw	r20, r24
    1758:	c7 01       	movw	r24, r14
    175a:	b6 01       	movw	r22, r12
    175c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1760:	9f 93       	push	r25
    1762:	8f 93       	push	r24
    1764:	7f 93       	push	r23
    1766:	6f 93       	push	r22
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	92 e2       	ldi	r25, 0x22	; 34
    176c:	9f 93       	push	r25
    176e:	8f 93       	push	r24
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	1f 93       	push	r17
    1776:	0f 93       	push	r16
    1778:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    177c:	ed b7       	in	r30, 0x3d	; 61
    177e:	fe b7       	in	r31, 0x3e	; 62
    1780:	3a 96       	adiw	r30, 0x0a	; 10
    1782:	ed bf       	out	0x3d, r30	; 61
    1784:	fe bf       	out	0x3e, r31	; 62
    1786:	8c 17       	cp	r24, r28
    1788:	9d 07       	cpc	r25, r29
    178a:	2c f0       	brlt	.+10     	; 0x1796 <GetSupercapPower+0xaa>
    178c:	f8 01       	movw	r30, r16
    178e:	10 82       	st	Z, r1
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GetSupercapPower+0xae>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	bf 90       	pop	r11
    17ac:	af 90       	pop	r10
    17ae:	9f 90       	pop	r9
    17b0:	8f 90       	pop	r8
    17b2:	7f 90       	pop	r7
    17b4:	6f 90       	pop	r6
    17b6:	5f 90       	pop	r5
    17b8:	4f 90       	pop	r4
    17ba:	08 95       	ret

000017bc <GetSupercapCurrent>:
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	8b 01       	movw	r16, r22
    17d6:	ea 01       	movw	r28, r20
    17d8:	60 91 fa 28 	lds	r22, 0x28FA	; 0x8028fa <sSensorDataSnapshot485+0xc>
    17dc:	70 91 fb 28 	lds	r23, 0x28FB	; 0x8028fb <sSensorDataSnapshot485+0xd>
    17e0:	80 91 fc 28 	lds	r24, 0x28FC	; 0x8028fc <sSensorDataSnapshot485+0xe>
    17e4:	90 91 fd 28 	lds	r25, 0x28FD	; 0x8028fd <sSensorDataSnapshot485+0xf>
    17e8:	80 90 f9 29 	lds	r8, 0x29F9	; 0x8029f9 <sCal+0x14>
    17ec:	90 90 fa 29 	lds	r9, 0x29FA	; 0x8029fa <sCal+0x15>
    17f0:	a0 90 fb 29 	lds	r10, 0x29FB	; 0x8029fb <sCal+0x16>
    17f4:	b0 90 fc 29 	lds	r11, 0x29FC	; 0x8029fc <sCal+0x17>
    17f8:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    17fc:	6b 01       	movw	r12, r22
    17fe:	7c 01       	movw	r14, r24
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	57 e4       	ldi	r21, 0x47	; 71
    1808:	c5 01       	movw	r24, r10
    180a:	b4 01       	movw	r22, r8
    180c:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1810:	9b 01       	movw	r18, r22
    1812:	ac 01       	movw	r20, r24
    1814:	c7 01       	movw	r24, r14
    1816:	b6 01       	movw	r22, r12
    1818:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    181c:	9f 93       	push	r25
    181e:	8f 93       	push	r24
    1820:	7f 93       	push	r23
    1822:	6f 93       	push	r22
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	92 e2       	ldi	r25, 0x22	; 34
    1828:	9f 93       	push	r25
    182a:	8f 93       	push	r24
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	1f 93       	push	r17
    1832:	0f 93       	push	r16
    1834:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1838:	ed b7       	in	r30, 0x3d	; 61
    183a:	fe b7       	in	r31, 0x3e	; 62
    183c:	3a 96       	adiw	r30, 0x0a	; 10
    183e:	ed bf       	out	0x3d, r30	; 61
    1840:	fe bf       	out	0x3e, r31	; 62
    1842:	8c 17       	cp	r24, r28
    1844:	9d 07       	cpc	r25, r29
    1846:	2c f0       	brlt	.+10     	; 0x1852 <GetSupercapCurrent+0x96>
    1848:	f8 01       	movw	r30, r16
    184a:	10 82       	st	Z, r1
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GetSupercapCurrent+0x9a>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	df 91       	pop	r29
    1858:	cf 91       	pop	r28
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	df 90       	pop	r13
    1864:	cf 90       	pop	r12
    1866:	bf 90       	pop	r11
    1868:	af 90       	pop	r10
    186a:	9f 90       	pop	r9
    186c:	8f 90       	pop	r8
    186e:	08 95       	ret

00001870 <GetSupercapVoltage>:
    1870:	8f 92       	push	r8
    1872:	9f 92       	push	r9
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	8b 01       	movw	r16, r22
    188a:	ea 01       	movw	r28, r20
    188c:	60 91 f6 28 	lds	r22, 0x28F6	; 0x8028f6 <sSensorDataSnapshot485+0x8>
    1890:	70 91 f7 28 	lds	r23, 0x28F7	; 0x8028f7 <sSensorDataSnapshot485+0x9>
    1894:	80 91 f8 28 	lds	r24, 0x28F8	; 0x8028f8 <sSensorDataSnapshot485+0xa>
    1898:	90 91 f9 28 	lds	r25, 0x28F9	; 0x8028f9 <sSensorDataSnapshot485+0xb>
    189c:	80 90 f5 29 	lds	r8, 0x29F5	; 0x8029f5 <sCal+0x10>
    18a0:	90 90 f6 29 	lds	r9, 0x29F6	; 0x8029f6 <sCal+0x11>
    18a4:	a0 90 f7 29 	lds	r10, 0x29F7	; 0x8029f7 <sCal+0x12>
    18a8:	b0 90 f8 29 	lds	r11, 0x29F8	; 0x8029f8 <sCal+0x13>
    18ac:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    18b0:	6b 01       	movw	r12, r22
    18b2:	7c 01       	movw	r14, r24
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	57 e4       	ldi	r21, 0x47	; 71
    18bc:	c5 01       	movw	r24, r10
    18be:	b4 01       	movw	r22, r8
    18c0:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
    18c8:	c7 01       	movw	r24, r14
    18ca:	b6 01       	movw	r22, r12
    18cc:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    18d0:	9f 93       	push	r25
    18d2:	8f 93       	push	r24
    18d4:	7f 93       	push	r23
    18d6:	6f 93       	push	r22
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	92 e2       	ldi	r25, 0x22	; 34
    18dc:	9f 93       	push	r25
    18de:	8f 93       	push	r24
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	1f 93       	push	r17
    18e6:	0f 93       	push	r16
    18e8:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    18ec:	ed b7       	in	r30, 0x3d	; 61
    18ee:	fe b7       	in	r31, 0x3e	; 62
    18f0:	3a 96       	adiw	r30, 0x0a	; 10
    18f2:	ed bf       	out	0x3d, r30	; 61
    18f4:	fe bf       	out	0x3e, r31	; 62
    18f6:	8c 17       	cp	r24, r28
    18f8:	9d 07       	cpc	r25, r29
    18fa:	2c f0       	brlt	.+10     	; 0x1906 <GetSupercapVoltage+0x96>
    18fc:	f8 01       	movw	r30, r16
    18fe:	10 82       	st	Z, r1
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GetSupercapVoltage+0x9a>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	df 90       	pop	r13
    1918:	cf 90       	pop	r12
    191a:	bf 90       	pop	r11
    191c:	af 90       	pop	r10
    191e:	9f 90       	pop	r9
    1920:	8f 90       	pop	r8
    1922:	08 95       	ret

00001924 <GetFuelCellEnergy>:
    1924:	4f 92       	push	r4
    1926:	5f 92       	push	r5
    1928:	6f 92       	push	r6
    192a:	7f 92       	push	r7
    192c:	8f 92       	push	r8
    192e:	9f 92       	push	r9
    1930:	af 92       	push	r10
    1932:	bf 92       	push	r11
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	8b 01       	movw	r16, r22
    1946:	ea 01       	movw	r28, r20
    1948:	ee ee       	ldi	r30, 0xEE	; 238
    194a:	f8 e2       	ldi	r31, 0x28	; 40
    194c:	20 8d       	ldd	r18, Z+24	; 0x18
    194e:	31 8d       	ldd	r19, Z+25	; 0x19
    1950:	42 8d       	ldd	r20, Z+26	; 0x1a
    1952:	53 8d       	ldd	r21, Z+27	; 0x1b
    1954:	64 8d       	ldd	r22, Z+28	; 0x1c
    1956:	75 8d       	ldd	r23, Z+29	; 0x1d
    1958:	86 8d       	ldd	r24, Z+30	; 0x1e
    195a:	97 8d       	ldd	r25, Z+31	; 0x1f
    195c:	e5 ee       	ldi	r30, 0xE5	; 229
    195e:	f9 e2       	ldi	r31, 0x29	; 41
    1960:	40 84       	ldd	r4, Z+8	; 0x08
    1962:	51 84       	ldd	r5, Z+9	; 0x09
    1964:	62 84       	ldd	r6, Z+10	; 0x0a
    1966:	73 84       	ldd	r7, Z+11	; 0x0b
    1968:	84 84       	ldd	r8, Z+12	; 0x0c
    196a:	95 84       	ldd	r9, Z+13	; 0x0d
    196c:	a6 84       	ldd	r10, Z+14	; 0x0e
    196e:	b7 84       	ldd	r11, Z+15	; 0x0f
    1970:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__floatdisf>
    1974:	6b 01       	movw	r12, r22
    1976:	7c 01       	movw	r14, r24
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e4       	ldi	r19, 0x40	; 64
    197c:	4c e9       	ldi	r20, 0x9C	; 156
    197e:	55 e4       	ldi	r21, 0x45	; 69
    1980:	c3 01       	movw	r24, r6
    1982:	b2 01       	movw	r22, r4
    1984:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1988:	a5 01       	movw	r20, r10
    198a:	94 01       	movw	r18, r8
    198c:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	c7 01       	movw	r24, r14
    1996:	b6 01       	movw	r22, r12
    1998:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    199c:	9f 93       	push	r25
    199e:	8f 93       	push	r24
    19a0:	7f 93       	push	r23
    19a2:	6f 93       	push	r22
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	92 e2       	ldi	r25, 0x22	; 34
    19a8:	9f 93       	push	r25
    19aa:	8f 93       	push	r24
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	1f 93       	push	r17
    19b2:	0f 93       	push	r16
    19b4:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    19b8:	ed b7       	in	r30, 0x3d	; 61
    19ba:	fe b7       	in	r31, 0x3e	; 62
    19bc:	3a 96       	adiw	r30, 0x0a	; 10
    19be:	ed bf       	out	0x3d, r30	; 61
    19c0:	fe bf       	out	0x3e, r31	; 62
    19c2:	8c 17       	cp	r24, r28
    19c4:	9d 07       	cpc	r25, r29
    19c6:	2c f0       	brlt	.+10     	; 0x19d2 <GetFuelCellEnergy+0xae>
    19c8:	f8 01       	movw	r30, r16
    19ca:	10 82       	st	Z, r1
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <GetFuelCellEnergy+0xb2>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	7f 90       	pop	r7
    19f0:	6f 90       	pop	r6
    19f2:	5f 90       	pop	r5
    19f4:	4f 90       	pop	r4
    19f6:	08 95       	ret

000019f8 <GetFuelCellPower>:
    19f8:	4f 92       	push	r4
    19fa:	5f 92       	push	r5
    19fc:	6f 92       	push	r6
    19fe:	7f 92       	push	r7
    1a00:	8f 92       	push	r8
    1a02:	9f 92       	push	r9
    1a04:	af 92       	push	r10
    1a06:	bf 92       	push	r11
    1a08:	cf 92       	push	r12
    1a0a:	df 92       	push	r13
    1a0c:	ef 92       	push	r14
    1a0e:	ff 92       	push	r15
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	8b 01       	movw	r16, r22
    1a1a:	ea 01       	movw	r28, r20
    1a1c:	60 91 fe 28 	lds	r22, 0x28FE	; 0x8028fe <sSensorDataSnapshot485+0x10>
    1a20:	70 91 ff 28 	lds	r23, 0x28FF	; 0x8028ff <sSensorDataSnapshot485+0x11>
    1a24:	80 91 00 29 	lds	r24, 0x2900	; 0x802900 <sSensorDataSnapshot485+0x12>
    1a28:	90 91 01 29 	lds	r25, 0x2901	; 0x802901 <sSensorDataSnapshot485+0x13>
    1a2c:	e5 ee       	ldi	r30, 0xE5	; 229
    1a2e:	f9 e2       	ldi	r31, 0x29	; 41
    1a30:	40 84       	ldd	r4, Z+8	; 0x08
    1a32:	51 84       	ldd	r5, Z+9	; 0x09
    1a34:	62 84       	ldd	r6, Z+10	; 0x0a
    1a36:	73 84       	ldd	r7, Z+11	; 0x0b
    1a38:	84 84       	ldd	r8, Z+12	; 0x0c
    1a3a:	95 84       	ldd	r9, Z+13	; 0x0d
    1a3c:	a6 84       	ldd	r10, Z+14	; 0x0e
    1a3e:	b7 84       	ldd	r11, Z+15	; 0x0f
    1a40:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1a44:	6b 01       	movw	r12, r22
    1a46:	7c 01       	movw	r14, r24
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e8       	ldi	r20, 0x80	; 128
    1a4e:	53 e4       	ldi	r21, 0x43	; 67
    1a50:	c3 01       	movw	r24, r6
    1a52:	b2 01       	movw	r22, r4
    1a54:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1a58:	a5 01       	movw	r20, r10
    1a5a:	94 01       	movw	r18, r8
    1a5c:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1a60:	9b 01       	movw	r18, r22
    1a62:	ac 01       	movw	r20, r24
    1a64:	c7 01       	movw	r24, r14
    1a66:	b6 01       	movw	r22, r12
    1a68:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1a6c:	9f 93       	push	r25
    1a6e:	8f 93       	push	r24
    1a70:	7f 93       	push	r23
    1a72:	6f 93       	push	r22
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	92 e2       	ldi	r25, 0x22	; 34
    1a78:	9f 93       	push	r25
    1a7a:	8f 93       	push	r24
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	1f 93       	push	r17
    1a82:	0f 93       	push	r16
    1a84:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1a88:	ed b7       	in	r30, 0x3d	; 61
    1a8a:	fe b7       	in	r31, 0x3e	; 62
    1a8c:	3a 96       	adiw	r30, 0x0a	; 10
    1a8e:	ed bf       	out	0x3d, r30	; 61
    1a90:	fe bf       	out	0x3e, r31	; 62
    1a92:	8c 17       	cp	r24, r28
    1a94:	9d 07       	cpc	r25, r29
    1a96:	2c f0       	brlt	.+10     	; 0x1aa2 <GetFuelCellPower+0xaa>
    1a98:	f8 01       	movw	r30, r16
    1a9a:	10 82       	st	Z, r1
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <GetFuelCellPower+0xae>
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	9f 90       	pop	r9
    1abc:	8f 90       	pop	r8
    1abe:	7f 90       	pop	r7
    1ac0:	6f 90       	pop	r6
    1ac2:	5f 90       	pop	r5
    1ac4:	4f 90       	pop	r4
    1ac6:	08 95       	ret

00001ac8 <GetFuelCellCurrent>:
    1ac8:	8f 92       	push	r8
    1aca:	9f 92       	push	r9
    1acc:	af 92       	push	r10
    1ace:	bf 92       	push	r11
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	8b 01       	movw	r16, r22
    1ae2:	ea 01       	movw	r28, r20
    1ae4:	60 91 f2 28 	lds	r22, 0x28F2	; 0x8028f2 <sSensorDataSnapshot485+0x4>
    1ae8:	70 91 f3 28 	lds	r23, 0x28F3	; 0x8028f3 <sSensorDataSnapshot485+0x5>
    1aec:	80 91 f4 28 	lds	r24, 0x28F4	; 0x8028f4 <sSensorDataSnapshot485+0x6>
    1af0:	90 91 f5 28 	lds	r25, 0x28F5	; 0x8028f5 <sSensorDataSnapshot485+0x7>
    1af4:	80 90 f1 29 	lds	r8, 0x29F1	; 0x8029f1 <sCal+0xc>
    1af8:	90 90 f2 29 	lds	r9, 0x29F2	; 0x8029f2 <sCal+0xd>
    1afc:	a0 90 f3 29 	lds	r10, 0x29F3	; 0x8029f3 <sCal+0xe>
    1b00:	b0 90 f4 29 	lds	r11, 0x29F4	; 0x8029f4 <sCal+0xf>
    1b04:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1b08:	6b 01       	movw	r12, r22
    1b0a:	7c 01       	movw	r14, r24
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e8       	ldi	r20, 0x80	; 128
    1b12:	57 e4       	ldi	r21, 0x47	; 71
    1b14:	c5 01       	movw	r24, r10
    1b16:	b4 01       	movw	r22, r8
    1b18:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1b1c:	9b 01       	movw	r18, r22
    1b1e:	ac 01       	movw	r20, r24
    1b20:	c7 01       	movw	r24, r14
    1b22:	b6 01       	movw	r22, r12
    1b24:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1b28:	9f 93       	push	r25
    1b2a:	8f 93       	push	r24
    1b2c:	7f 93       	push	r23
    1b2e:	6f 93       	push	r22
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	92 e2       	ldi	r25, 0x22	; 34
    1b34:	9f 93       	push	r25
    1b36:	8f 93       	push	r24
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	1f 93       	push	r17
    1b3e:	0f 93       	push	r16
    1b40:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1b44:	ed b7       	in	r30, 0x3d	; 61
    1b46:	fe b7       	in	r31, 0x3e	; 62
    1b48:	3a 96       	adiw	r30, 0x0a	; 10
    1b4a:	ed bf       	out	0x3d, r30	; 61
    1b4c:	fe bf       	out	0x3e, r31	; 62
    1b4e:	8c 17       	cp	r24, r28
    1b50:	9d 07       	cpc	r25, r29
    1b52:	2c f0       	brlt	.+10     	; 0x1b5e <GetFuelCellCurrent+0x96>
    1b54:	f8 01       	movw	r30, r16
    1b56:	10 82       	st	Z, r1
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <GetFuelCellCurrent+0x9a>
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	df 91       	pop	r29
    1b64:	cf 91       	pop	r28
    1b66:	1f 91       	pop	r17
    1b68:	0f 91       	pop	r16
    1b6a:	ff 90       	pop	r15
    1b6c:	ef 90       	pop	r14
    1b6e:	df 90       	pop	r13
    1b70:	cf 90       	pop	r12
    1b72:	bf 90       	pop	r11
    1b74:	af 90       	pop	r10
    1b76:	9f 90       	pop	r9
    1b78:	8f 90       	pop	r8
    1b7a:	08 95       	ret

00001b7c <GetFuelCellVoltage>:
    1b7c:	8f 92       	push	r8
    1b7e:	9f 92       	push	r9
    1b80:	af 92       	push	r10
    1b82:	bf 92       	push	r11
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	8b 01       	movw	r16, r22
    1b96:	ea 01       	movw	r28, r20
    1b98:	60 91 ee 28 	lds	r22, 0x28EE	; 0x8028ee <sSensorDataSnapshot485>
    1b9c:	70 91 ef 28 	lds	r23, 0x28EF	; 0x8028ef <sSensorDataSnapshot485+0x1>
    1ba0:	80 91 f0 28 	lds	r24, 0x28F0	; 0x8028f0 <sSensorDataSnapshot485+0x2>
    1ba4:	90 91 f1 28 	lds	r25, 0x28F1	; 0x8028f1 <sSensorDataSnapshot485+0x3>
    1ba8:	80 90 ed 29 	lds	r8, 0x29ED	; 0x8029ed <sCal+0x8>
    1bac:	90 90 ee 29 	lds	r9, 0x29EE	; 0x8029ee <sCal+0x9>
    1bb0:	a0 90 ef 29 	lds	r10, 0x29EF	; 0x8029ef <sCal+0xa>
    1bb4:	b0 90 f0 29 	lds	r11, 0x29F0	; 0x8029f0 <sCal+0xb>
    1bb8:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1bbc:	6b 01       	movw	r12, r22
    1bbe:	7c 01       	movw	r14, r24
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e8       	ldi	r20, 0x80	; 128
    1bc6:	57 e4       	ldi	r21, 0x47	; 71
    1bc8:	c5 01       	movw	r24, r10
    1bca:	b4 01       	movw	r22, r8
    1bcc:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	c7 01       	movw	r24, r14
    1bd6:	b6 01       	movw	r22, r12
    1bd8:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1bdc:	9f 93       	push	r25
    1bde:	8f 93       	push	r24
    1be0:	7f 93       	push	r23
    1be2:	6f 93       	push	r22
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	92 e2       	ldi	r25, 0x22	; 34
    1be8:	9f 93       	push	r25
    1bea:	8f 93       	push	r24
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	1f 93       	push	r17
    1bf2:	0f 93       	push	r16
    1bf4:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1bf8:	ed b7       	in	r30, 0x3d	; 61
    1bfa:	fe b7       	in	r31, 0x3e	; 62
    1bfc:	3a 96       	adiw	r30, 0x0a	; 10
    1bfe:	ed bf       	out	0x3d, r30	; 61
    1c00:	fe bf       	out	0x3e, r31	; 62
    1c02:	8c 17       	cp	r24, r28
    1c04:	9d 07       	cpc	r25, r29
    1c06:	2c f0       	brlt	.+10     	; 0x1c12 <GetFuelCellVoltage+0x96>
    1c08:	f8 01       	movw	r30, r16
    1c0a:	10 82       	st	Z, r1
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <GetFuelCellVoltage+0x9a>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
    1c1e:	ff 90       	pop	r15
    1c20:	ef 90       	pop	r14
    1c22:	df 90       	pop	r13
    1c24:	cf 90       	pop	r12
    1c26:	bf 90       	pop	r11
    1c28:	af 90       	pop	r10
    1c2a:	9f 90       	pop	r9
    1c2c:	8f 90       	pop	r8
    1c2e:	08 95       	ret

00001c30 <GetMotorCurrent>:
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	8b 01       	movw	r16, r22
    1c3a:	ea 01       	movw	r28, r20
    1c3c:	60 91 23 29 	lds	r22, 0x2923	; 0x802923 <sSensorDataSnapshot485+0x35>
    1c40:	70 91 24 29 	lds	r23, 0x2924	; 0x802924 <sSensorDataSnapshot485+0x36>
    1c44:	80 91 25 29 	lds	r24, 0x2925	; 0x802925 <sSensorDataSnapshot485+0x37>
    1c48:	90 91 26 29 	lds	r25, 0x2926	; 0x802926 <sSensorDataSnapshot485+0x38>
    1c4c:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	48 e4       	ldi	r20, 0x48	; 72
    1c56:	5b e4       	ldi	r21, 0x4B	; 75
    1c58:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a e7       	ldi	r20, 0x7A	; 122
    1c62:	5c e4       	ldi	r21, 0x4C	; 76
    1c64:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1c68:	9f 93       	push	r25
    1c6a:	8f 93       	push	r24
    1c6c:	7f 93       	push	r23
    1c6e:	6f 93       	push	r22
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	92 e2       	ldi	r25, 0x22	; 34
    1c74:	9f 93       	push	r25
    1c76:	8f 93       	push	r24
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	1f 93       	push	r17
    1c7e:	0f 93       	push	r16
    1c80:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1c84:	ed b7       	in	r30, 0x3d	; 61
    1c86:	fe b7       	in	r31, 0x3e	; 62
    1c88:	3a 96       	adiw	r30, 0x0a	; 10
    1c8a:	ed bf       	out	0x3d, r30	; 61
    1c8c:	fe bf       	out	0x3e, r31	; 62
    1c8e:	8c 17       	cp	r24, r28
    1c90:	9d 07       	cpc	r25, r29
    1c92:	2c f0       	brlt	.+10     	; 0x1c9e <GetMotorCurrent+0x6e>
    1c94:	f8 01       	movw	r30, r16
    1c96:	10 82       	st	Z, r1
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <GetMotorCurrent+0x72>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	1f 91       	pop	r17
    1ca8:	0f 91       	pop	r16
    1caa:	08 95       	ret

00001cac <GetMotorVoltage>:
    1cac:	8f 92       	push	r8
    1cae:	9f 92       	push	r9
    1cb0:	af 92       	push	r10
    1cb2:	bf 92       	push	r11
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	8b 01       	movw	r16, r22
    1cc6:	ea 01       	movw	r28, r20
    1cc8:	60 91 1f 29 	lds	r22, 0x291F	; 0x80291f <sSensorDataSnapshot485+0x31>
    1ccc:	70 91 20 29 	lds	r23, 0x2920	; 0x802920 <sSensorDataSnapshot485+0x32>
    1cd0:	80 91 21 29 	lds	r24, 0x2921	; 0x802921 <sSensorDataSnapshot485+0x33>
    1cd4:	90 91 22 29 	lds	r25, 0x2922	; 0x802922 <sSensorDataSnapshot485+0x34>
    1cd8:	80 90 05 2a 	lds	r8, 0x2A05	; 0x802a05 <sCal+0x20>
    1cdc:	90 90 06 2a 	lds	r9, 0x2A06	; 0x802a06 <sCal+0x21>
    1ce0:	a0 90 07 2a 	lds	r10, 0x2A07	; 0x802a07 <sCal+0x22>
    1ce4:	b0 90 08 2a 	lds	r11, 0x2A08	; 0x802a08 <sCal+0x23>
    1ce8:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1cec:	6b 01       	movw	r12, r22
    1cee:	7c 01       	movw	r14, r24
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	b4 01       	movw	r22, r8
    1cfc:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1d00:	9b 01       	movw	r18, r22
    1d02:	ac 01       	movw	r20, r24
    1d04:	c7 01       	movw	r24, r14
    1d06:	b6 01       	movw	r22, r12
    1d08:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1d0c:	9f 93       	push	r25
    1d0e:	8f 93       	push	r24
    1d10:	7f 93       	push	r23
    1d12:	6f 93       	push	r22
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	92 e2       	ldi	r25, 0x22	; 34
    1d18:	9f 93       	push	r25
    1d1a:	8f 93       	push	r24
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	1f 93       	push	r17
    1d22:	0f 93       	push	r16
    1d24:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1d28:	ed b7       	in	r30, 0x3d	; 61
    1d2a:	fe b7       	in	r31, 0x3e	; 62
    1d2c:	3a 96       	adiw	r30, 0x0a	; 10
    1d2e:	ed bf       	out	0x3d, r30	; 61
    1d30:	fe bf       	out	0x3e, r31	; 62
    1d32:	8c 17       	cp	r24, r28
    1d34:	9d 07       	cpc	r25, r29
    1d36:	2c f0       	brlt	.+10     	; 0x1d42 <GetMotorVoltage+0x96>
    1d38:	f8 01       	movw	r30, r16
    1d3a:	10 82       	st	Z, r1
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <GetMotorVoltage+0x9a>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	cf 90       	pop	r12
    1d56:	bf 90       	pop	r11
    1d58:	af 90       	pop	r10
    1d5a:	9f 90       	pop	r9
    1d5c:	8f 90       	pop	r8
    1d5e:	08 95       	ret

00001d60 <GetWheelDistance>:
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	8b 01       	movw	r16, r22
    1d6a:	ea 01       	movw	r28, r20
    1d6c:	60 91 4b 29 	lds	r22, 0x294B	; 0x80294b <sSensorDataSnapshot485+0x5d>
    1d70:	70 91 4c 29 	lds	r23, 0x294C	; 0x80294c <sSensorDataSnapshot485+0x5e>
    1d74:	80 91 4d 29 	lds	r24, 0x294D	; 0x80294d <sSensorDataSnapshot485+0x5f>
    1d78:	90 91 4e 29 	lds	r25, 0x294E	; 0x80294e <sSensorDataSnapshot485+0x60>
    1d7c:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    1d80:	2f ed       	ldi	r18, 0xDF	; 223
    1d82:	36 e9       	ldi	r19, 0x96	; 150
    1d84:	45 e9       	ldi	r20, 0x95	; 149
    1d86:	5d e3       	ldi	r21, 0x3D	; 61
    1d88:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1d8c:	9f 93       	push	r25
    1d8e:	8f 93       	push	r24
    1d90:	7f 93       	push	r23
    1d92:	6f 93       	push	r22
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	92 e2       	ldi	r25, 0x22	; 34
    1d98:	9f 93       	push	r25
    1d9a:	8f 93       	push	r24
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	1f 93       	push	r17
    1da2:	0f 93       	push	r16
    1da4:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1da8:	ed b7       	in	r30, 0x3d	; 61
    1daa:	fe b7       	in	r31, 0x3e	; 62
    1dac:	3a 96       	adiw	r30, 0x0a	; 10
    1dae:	ed bf       	out	0x3d, r30	; 61
    1db0:	fe bf       	out	0x3e, r31	; 62
    1db2:	8c 17       	cp	r24, r28
    1db4:	9d 07       	cpc	r25, r29
    1db6:	2c f0       	brlt	.+10     	; 0x1dc2 <GetWheelDistance+0x62>
    1db8:	f8 01       	movw	r30, r16
    1dba:	10 82       	st	Z, r1
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <GetWheelDistance+0x66>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	08 95       	ret

00001dd0 <GetWheelSpeedEVA>:
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	ff 92       	push	r15
    1dd8:	0f 93       	push	r16
    1dda:	1f 93       	push	r17
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	8b 01       	movw	r16, r22
    1de2:	ea 01       	movw	r28, r20
    1de4:	60 91 47 29 	lds	r22, 0x2947	; 0x802947 <sSensorDataSnapshot485+0x59>
    1de8:	70 91 48 29 	lds	r23, 0x2948	; 0x802948 <sSensorDataSnapshot485+0x5a>
    1dec:	80 91 49 29 	lds	r24, 0x2949	; 0x802949 <sSensorDataSnapshot485+0x5b>
    1df0:	90 91 4a 29 	lds	r25, 0x294A	; 0x80294a <sSensorDataSnapshot485+0x5c>
    1df4:	61 15       	cp	r22, r1
    1df6:	71 05       	cpc	r23, r1
    1df8:	81 05       	cpc	r24, r1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	09 f1       	breq	.+66     	; 0x1e40 <GetWheelSpeedEVA+0x70>
    1dfe:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e8       	ldi	r20, 0x80	; 128
    1e08:	57 e3       	ldi	r21, 0x37	; 55
    1e0a:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    1e0e:	9b 01       	movw	r18, r22
    1e10:	ac 01       	movw	r20, r24
    1e12:	60 e0       	ldi	r22, 0x00	; 0
    1e14:	78 e5       	ldi	r23, 0x58	; 88
    1e16:	84 ea       	ldi	r24, 0xA4	; 164
    1e18:	94 e4       	ldi	r25, 0x44	; 68
    1e1a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    1e1e:	f6 2e       	mov	r15, r22
    1e20:	e7 2e       	mov	r14, r23
    1e22:	d8 2e       	mov	r13, r24
    1e24:	c9 2e       	mov	r12, r25
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e8       	ldi	r20, 0x80	; 128
    1e2c:	5f e3       	ldi	r21, 0x3F	; 63
    1e2e:	0e 94 ab 31 	call	0x6356	; 0x6356 <__cmpsf2>
    1e32:	88 23       	and	r24, r24
    1e34:	4c f4       	brge	.+18     	; 0x1e48 <GetWheelSpeedEVA+0x78>
    1e36:	f1 2c       	mov	r15, r1
    1e38:	e1 2c       	mov	r14, r1
    1e3a:	d1 2c       	mov	r13, r1
    1e3c:	c1 2c       	mov	r12, r1
    1e3e:	04 c0       	rjmp	.+8      	; 0x1e48 <GetWheelSpeedEVA+0x78>
    1e40:	f1 2c       	mov	r15, r1
    1e42:	e1 2c       	mov	r14, r1
    1e44:	d1 2c       	mov	r13, r1
    1e46:	c1 2c       	mov	r12, r1
    1e48:	cf 92       	push	r12
    1e4a:	df 92       	push	r13
    1e4c:	ef 92       	push	r14
    1e4e:	ff 92       	push	r15
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	92 e2       	ldi	r25, 0x22	; 34
    1e54:	9f 93       	push	r25
    1e56:	8f 93       	push	r24
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	1f 93       	push	r17
    1e5e:	0f 93       	push	r16
    1e60:	0e 94 45 38 	call	0x708a	; 0x708a <snprintf>
    1e64:	ed b7       	in	r30, 0x3d	; 61
    1e66:	fe b7       	in	r31, 0x3e	; 62
    1e68:	3a 96       	adiw	r30, 0x0a	; 10
    1e6a:	ed bf       	out	0x3d, r30	; 61
    1e6c:	fe bf       	out	0x3e, r31	; 62
    1e6e:	8c 17       	cp	r24, r28
    1e70:	9d 07       	cpc	r25, r29
    1e72:	2c f0       	brlt	.+10     	; 0x1e7e <GetWheelSpeedEVA+0xae>
    1e74:	f8 01       	movw	r30, r16
    1e76:	10 82       	st	Z, r1
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <GetWheelSpeedEVA+0xb2>
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	df 91       	pop	r29
    1e84:	cf 91       	pop	r28
    1e86:	1f 91       	pop	r17
    1e88:	0f 91       	pop	r16
    1e8a:	ff 90       	pop	r15
    1e8c:	ef 90       	pop	r14
    1e8e:	df 90       	pop	r13
    1e90:	cf 90       	pop	r12
    1e92:	08 95       	ret

00001e94 <InitCoreAnalog>:
    1e94:	df 92       	push	r13
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	80 e2       	ldi	r24, 0x20	; 32
    1ea4:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    1ea8:	c0 e0       	ldi	r28, 0x00	; 0
    1eaa:	d2 e0       	ldi	r29, 0x02	; 2
    1eac:	8c 87       	std	Y+12, r24	; 0x0c
    1eae:	81 e2       	ldi	r24, 0x21	; 33
    1eb0:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    1eb4:	8d 87       	std	Y+13, r24	; 0x0d
    1eb6:	84 e2       	ldi	r24, 0x24	; 36
    1eb8:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    1ebc:	00 e4       	ldi	r16, 0x40	; 64
    1ebe:	12 e0       	ldi	r17, 0x02	; 2
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	84 87       	std	Z+12, r24	; 0x0c
    1ec4:	85 e2       	ldi	r24, 0x25	; 37
    1ec6:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    1eca:	f8 01       	movw	r30, r16
    1ecc:	85 87       	std	Z+13, r24	; 0x0d
    1ece:	e0 e0       	ldi	r30, 0x00	; 0
    1ed0:	f6 e0       	ldi	r31, 0x06	; 6
    1ed2:	14 82       	std	Z+4, r1	; 0x04
    1ed4:	10 82       	st	Z, r1
    1ed6:	a0 e2       	ldi	r26, 0x20	; 32
    1ed8:	b6 e0       	ldi	r27, 0x06	; 6
    1eda:	14 96       	adiw	r26, 0x04	; 4
    1edc:	1c 92       	st	X, r1
    1ede:	14 97       	sbiw	r26, 0x04	; 4
    1ee0:	1c 92       	st	X, r1
    1ee2:	87 e0       	ldi	r24, 0x07	; 7
    1ee4:	80 8b       	std	Z+16, r24	; 0x10
    1ee6:	81 8b       	std	Z+17, r24	; 0x11
    1ee8:	82 8b       	std	Z+18, r24	; 0x12
    1eea:	83 8b       	std	Z+19, r24	; 0x13
    1eec:	84 8b       	std	Z+20, r24	; 0x14
    1eee:	85 8b       	std	Z+21, r24	; 0x15
    1ef0:	86 8b       	std	Z+22, r24	; 0x16
    1ef2:	50 96       	adiw	r26, 0x10	; 16
    1ef4:	8c 93       	st	X, r24
    1ef6:	50 97       	sbiw	r26, 0x10	; 16
    1ef8:	51 96       	adiw	r26, 0x11	; 17
    1efa:	8c 93       	st	X, r24
    1efc:	51 97       	sbiw	r26, 0x11	; 17
    1efe:	52 96       	adiw	r26, 0x12	; 18
    1f00:	8c 93       	st	X, r24
    1f02:	52 97       	sbiw	r26, 0x12	; 18
    1f04:	53 96       	adiw	r26, 0x13	; 19
    1f06:	8c 93       	st	X, r24
    1f08:	53 97       	sbiw	r26, 0x13	; 19
    1f0a:	54 96       	adiw	r26, 0x14	; 20
    1f0c:	8c 93       	st	X, r24
    1f0e:	54 97       	sbiw	r26, 0x14	; 20
    1f10:	55 96       	adiw	r26, 0x15	; 21
    1f12:	8c 93       	st	X, r24
    1f14:	55 97       	sbiw	r26, 0x15	; 21
    1f16:	56 96       	adiw	r26, 0x16	; 22
    1f18:	8c 93       	st	X, r24
    1f1a:	56 97       	sbiw	r26, 0x16	; 22
    1f1c:	57 96       	adiw	r26, 0x17	; 23
    1f1e:	8c 93       	st	X, r24
    1f20:	68 94       	set
    1f22:	dd 24       	eor	r13, r13
    1f24:	d4 f8       	bld	r13, 4
    1f26:	d7 8a       	std	Z+23, r13	; 0x17
    1f28:	d9 82       	std	Y+1, r13	; 0x01
    1f2a:	50 e2       	ldi	r21, 0x20	; 32
    1f2c:	5a 83       	std	Y+2, r21	; 0x02
    1f2e:	46 ec       	ldi	r20, 0xC6	; 198
    1f30:	4b 83       	std	Y+3, r20	; 0x03
    1f32:	33 e0       	ldi	r19, 0x03	; 3
    1f34:	3c 83       	std	Y+4, r19	; 0x04
    1f36:	68 94       	set
    1f38:	ff 24       	eor	r15, r15
    1f3a:	f1 f8       	bld	r15, 1
    1f3c:	f8 a2       	std	Y+32, r15	; 0x20
    1f3e:	f8 a6       	std	Y+40, r15	; 0x28
    1f40:	f8 aa       	std	Y+48, r15	; 0x30
    1f42:	f8 ae       	std	Y+56, r15	; 0x38
    1f44:	89 e2       	ldi	r24, 0x29	; 41
    1f46:	89 a3       	std	Y+33, r24	; 0x21
    1f48:	99 e1       	ldi	r25, 0x19	; 25
    1f4a:	99 a7       	std	Y+41, r25	; 0x29
    1f4c:	91 e3       	ldi	r25, 0x31	; 49
    1f4e:	99 ab       	std	Y+49, r25	; 0x31
    1f50:	21 e6       	ldi	r18, 0x61	; 97
    1f52:	29 af       	std	Y+57, r18	; 0x39
    1f54:	ee 24       	eor	r14, r14
    1f56:	e3 94       	inc	r14
    1f58:	ea a2       	std	Y+34, r14	; 0x22
    1f5a:	e8 82       	st	Y, r14
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	d1 82       	std	Z+1, r13	; 0x01
    1f60:	52 83       	std	Z+2, r21	; 0x02
    1f62:	43 83       	std	Z+3, r20	; 0x03
    1f64:	34 83       	std	Z+4, r19	; 0x04
    1f66:	f0 a2       	std	Z+32, r15	; 0x20
    1f68:	f0 a6       	std	Z+40, r15	; 0x28
    1f6a:	f0 aa       	std	Z+48, r15	; 0x30
    1f6c:	f0 ae       	std	Z+56, r15	; 0x38
    1f6e:	21 a3       	std	Z+33, r18	; 0x21
    1f70:	21 e5       	ldi	r18, 0x51	; 81
    1f72:	21 a7       	std	Z+41, r18	; 0x29
    1f74:	91 ab       	std	Z+49, r25	; 0x31
    1f76:	81 af       	std	Z+57, r24	; 0x39
    1f78:	e0 82       	st	Z, r14
    1f7a:	e0 ea       	ldi	r30, 0xA0	; 160
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	82 81       	ldd	r24, Z+2	; 0x02
    1f80:	81 60       	ori	r24, 0x01	; 1
    1f82:	82 83       	std	Z+2, r24	; 0x02
    1f84:	e5 ee       	ldi	r30, 0xE5	; 229
    1f86:	f9 e2       	ldi	r31, 0x29	; 41
    1f88:	8b ea       	ldi	r24, 0xAB	; 171
    1f8a:	9a ea       	ldi	r25, 0xAA	; 170
    1f8c:	a6 e2       	ldi	r26, 0x26	; 38
    1f8e:	b2 e4       	ldi	r27, 0x42	; 66
    1f90:	80 87       	std	Z+8, r24	; 0x08
    1f92:	91 87       	std	Z+9, r25	; 0x09
    1f94:	a2 87       	std	Z+10, r26	; 0x0a
    1f96:	b3 87       	std	Z+11, r27	; 0x0b
    1f98:	47 e2       	ldi	r20, 0x27	; 39
    1f9a:	51 e1       	ldi	r21, 0x11	; 17
    1f9c:	64 eb       	ldi	r22, 0xB4	; 180
    1f9e:	72 e4       	ldi	r23, 0x42	; 66
    1fa0:	44 87       	std	Z+12, r20	; 0x0c
    1fa2:	55 87       	std	Z+13, r21	; 0x0d
    1fa4:	66 87       	std	Z+14, r22	; 0x0e
    1fa6:	77 87       	std	Z+15, r23	; 0x0f
    1fa8:	80 8b       	std	Z+16, r24	; 0x10
    1faa:	91 8b       	std	Z+17, r25	; 0x11
    1fac:	a2 8b       	std	Z+18, r26	; 0x12
    1fae:	b3 8b       	std	Z+19, r27	; 0x13
    1fb0:	4f e1       	ldi	r20, 0x1F	; 31
    1fb2:	5e e8       	ldi	r21, 0x8E	; 142
    1fb4:	60 eb       	ldi	r22, 0xB0	; 176
    1fb6:	72 e4       	ldi	r23, 0x42	; 66
    1fb8:	44 8b       	std	Z+20, r20	; 0x14
    1fba:	55 8b       	std	Z+21, r21	; 0x15
    1fbc:	66 8b       	std	Z+22, r22	; 0x16
    1fbe:	77 8b       	std	Z+23, r23	; 0x17
    1fc0:	80 a3       	std	Z+32, r24	; 0x20
    1fc2:	91 a3       	std	Z+33, r25	; 0x21
    1fc4:	a2 a3       	std	Z+34, r26	; 0x22
    1fc6:	b3 a3       	std	Z+35, r27	; 0x23
    1fc8:	4d e5       	ldi	r20, 0x5D	; 93
    1fca:	55 e8       	ldi	r21, 0x85	; 133
    1fcc:	6f e6       	ldi	r22, 0x6F	; 111
    1fce:	72 e4       	ldi	r23, 0x42	; 66
    1fd0:	44 a3       	std	Z+36, r20	; 0x24
    1fd2:	55 a3       	std	Z+37, r21	; 0x25
    1fd4:	66 a3       	std	Z+38, r22	; 0x26
    1fd6:	77 a3       	std	Z+39, r23	; 0x27
    1fd8:	80 a7       	std	Z+40, r24	; 0x28
    1fda:	91 a7       	std	Z+41, r25	; 0x29
    1fdc:	a2 a7       	std	Z+42, r26	; 0x2a
    1fde:	b3 a7       	std	Z+43, r27	; 0x2b
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a8 e4       	ldi	r26, 0x48	; 72
    1fe6:	b2 e4       	ldi	r27, 0x42	; 66
    1fe8:	84 a7       	std	Z+44, r24	; 0x2c
    1fea:	95 a7       	std	Z+45, r25	; 0x2d
    1fec:	a6 a7       	std	Z+46, r26	; 0x2e
    1fee:	b7 a7       	std	Z+47, r27	; 0x2f
    1ff0:	44 e0       	ldi	r20, 0x04	; 4
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	60 e0       	ldi	r22, 0x00	; 0
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	8d ee       	ldi	r24, 0xED	; 237
    1ffa:	99 e2       	ldi	r25, 0x29	; 41
    1ffc:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2000:	44 e0       	ldi	r20, 0x04	; 4
    2002:	50 e0       	ldi	r21, 0x00	; 0
    2004:	60 e1       	ldi	r22, 0x10	; 16
    2006:	70 e0       	ldi	r23, 0x00	; 0
    2008:	81 ef       	ldi	r24, 0xF1	; 241
    200a:	99 e2       	ldi	r25, 0x29	; 41
    200c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2010:	44 e0       	ldi	r20, 0x04	; 4
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	60 e2       	ldi	r22, 0x20	; 32
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	8d ee       	ldi	r24, 0xED	; 237
    201a:	99 e2       	ldi	r25, 0x29	; 41
    201c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2020:	44 e0       	ldi	r20, 0x04	; 4
    2022:	50 e0       	ldi	r21, 0x00	; 0
    2024:	60 e3       	ldi	r22, 0x30	; 48
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	81 ef       	ldi	r24, 0xF1	; 241
    202a:	99 e2       	ldi	r25, 0x29	; 41
    202c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2030:	42 e0       	ldi	r20, 0x02	; 2
    2032:	50 e0       	ldi	r21, 0x00	; 0
    2034:	60 e4       	ldi	r22, 0x40	; 64
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	85 ee       	ldi	r24, 0xE5	; 229
    203a:	99 e2       	ldi	r25, 0x29	; 41
    203c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2040:	42 e0       	ldi	r20, 0x02	; 2
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	64 e4       	ldi	r22, 0x44	; 68
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	87 ee       	ldi	r24, 0xE7	; 231
    204a:	99 e2       	ldi	r25, 0x29	; 41
    204c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2050:	42 e0       	ldi	r20, 0x02	; 2
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	68 e4       	ldi	r22, 0x48	; 72
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	89 ee       	ldi	r24, 0xE9	; 233
    205a:	99 e2       	ldi	r25, 0x29	; 41
    205c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2060:	42 e0       	ldi	r20, 0x02	; 2
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	6c e4       	ldi	r22, 0x4C	; 76
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	8b ee       	ldi	r24, 0xEB	; 235
    206a:	99 e2       	ldi	r25, 0x29	; 41
    206c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2070:	44 e0       	ldi	r20, 0x04	; 4
    2072:	50 e0       	ldi	r21, 0x00	; 0
    2074:	60 e5       	ldi	r22, 0x50	; 80
    2076:	70 e0       	ldi	r23, 0x00	; 0
    2078:	85 e0       	ldi	r24, 0x05	; 5
    207a:	9a e2       	ldi	r25, 0x2A	; 42
    207c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2080:	44 e0       	ldi	r20, 0x04	; 4
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	60 e6       	ldi	r22, 0x60	; 96
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	89 e0       	ldi	r24, 0x09	; 9
    208a:	9a e2       	ldi	r25, 0x2A	; 42
    208c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2090:	44 e0       	ldi	r20, 0x04	; 4
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	60 e7       	ldi	r22, 0x70	; 112
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	8d e0       	ldi	r24, 0x0D	; 13
    209a:	9a e2       	ldi	r25, 0x2A	; 42
    209c:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    20a0:	44 e0       	ldi	r20, 0x04	; 4
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	60 e8       	ldi	r22, 0x80	; 128
    20a6:	70 e0       	ldi	r23, 0x00	; 0
    20a8:	81 e1       	ldi	r24, 0x11	; 17
    20aa:	9a e2       	ldi	r25, 0x2A	; 42
    20ac:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    20b0:	42 e0       	ldi	r20, 0x02	; 2
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	60 e9       	ldi	r22, 0x90	; 144
    20b6:	70 e0       	ldi	r23, 0x00	; 0
    20b8:	8d ef       	ldi	r24, 0xFD	; 253
    20ba:	99 e2       	ldi	r25, 0x29	; 41
    20bc:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    20c0:	42 e0       	ldi	r20, 0x02	; 2
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	64 e9       	ldi	r22, 0x94	; 148
    20c6:	70 e0       	ldi	r23, 0x00	; 0
    20c8:	8f ef       	ldi	r24, 0xFF	; 255
    20ca:	99 e2       	ldi	r25, 0x29	; 41
    20cc:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    20d0:	42 e0       	ldi	r20, 0x02	; 2
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	68 e9       	ldi	r22, 0x98	; 152
    20d6:	70 e0       	ldi	r23, 0x00	; 0
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	9a e2       	ldi	r25, 0x2A	; 42
    20dc:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    20e0:	42 e0       	ldi	r20, 0x02	; 2
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	6c e9       	ldi	r22, 0x9C	; 156
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	9a e2       	ldi	r25, 0x2A	; 42
    20ec:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    20f0:	e0 e2       	ldi	r30, 0x20	; 32
    20f2:	f3 e0       	ldi	r31, 0x03	; 3
    20f4:	85 e0       	ldi	r24, 0x05	; 5
    20f6:	80 83       	st	Z, r24
    20f8:	11 82       	std	Z+1, r1	; 0x01
    20fa:	d2 82       	std	Z+2, r13	; 0x02
    20fc:	8e ea       	ldi	r24, 0xAE	; 174
    20fe:	95 e0       	ldi	r25, 0x05	; 5
    2100:	80 8f       	std	Z+24, r24	; 0x18
    2102:	91 8f       	std	Z+25, r25	; 0x19
    2104:	e0 e0       	ldi	r30, 0x00	; 0
    2106:	f8 e0       	ldi	r31, 0x08	; 8
    2108:	11 82       	std	Z+1, r1	; 0x01
    210a:	13 82       	std	Z+3, r1	; 0x03
    210c:	14 82       	std	Z+4, r1	; 0x04
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	99 e1       	ldi	r25, 0x19	; 25
    2112:	86 a3       	std	Z+38, r24	; 0x26
    2114:	97 a3       	std	Z+39, r25	; 0x27
    2116:	16 82       	std	Z+6, r1	; 0x06
    2118:	17 82       	std	Z+7, r1	; 0x07
    211a:	10 a2       	std	Z+32, r1	; 0x20
    211c:	11 a2       	std	Z+33, r1	; 0x21
    211e:	e0 82       	st	Z, r14
    2120:	a0 e8       	ldi	r26, 0x80	; 128
    2122:	b1 e0       	ldi	r27, 0x01	; 1
    2124:	80 ec       	ldi	r24, 0xC0	; 192
    2126:	8c 93       	st	X, r24
    2128:	e0 e4       	ldi	r30, 0x40	; 64
    212a:	f8 e0       	ldi	r31, 0x08	; 8
    212c:	8c e0       	ldi	r24, 0x0C	; 12
    212e:	80 83       	st	Z, r24
    2130:	11 82       	std	Z+1, r1	; 0x01
    2132:	13 82       	std	Z+3, r1	; 0x03
    2134:	14 82       	std	Z+4, r1	; 0x04
    2136:	16 82       	std	Z+6, r1	; 0x06
    2138:	17 82       	std	Z+7, r1	; 0x07
    213a:	e0 86       	std	Z+8, r14	; 0x08
    213c:	8f ef       	ldi	r24, 0xFF	; 255
    213e:	9f ef       	ldi	r25, 0xFF	; 255
    2140:	86 a3       	std	Z+38, r24	; 0x26
    2142:	97 a3       	std	Z+39, r25	; 0x27
    2144:	e0 e4       	ldi	r30, 0x40	; 64
    2146:	f6 e0       	ldi	r31, 0x06	; 6
    2148:	80 e4       	ldi	r24, 0x40	; 64
    214a:	82 83       	std	Z+2, r24	; 0x02
    214c:	e6 8a       	std	Z+22, r14	; 0x16
    214e:	86 e6       	ldi	r24, 0x66	; 102
    2150:	14 96       	adiw	r26, 0x04	; 4
    2152:	8c 93       	st	X, r24
    2154:	14 97       	sbiw	r26, 0x04	; 4
    2156:	1c 96       	adiw	r26, 0x0c	; 12
    2158:	fc 92       	st	X, r15
    215a:	e0 e6       	ldi	r30, 0x60	; 96
    215c:	f6 e0       	ldi	r31, 0x06	; 6
    215e:	90 85       	ldd	r25, Z+8	; 0x08
    2160:	80 85       	ldd	r24, Z+8	; 0x08
    2162:	80 73       	andi	r24, 0x30	; 48
    2164:	21 e0       	ldi	r18, 0x01	; 1
    2166:	80 32       	cpi	r24, 0x20	; 32
    2168:	09 f0       	breq	.+2      	; 0x216c <InitCoreAnalog+0x2d8>
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	21 11       	cpse	r18, r1
    216e:	08 c0       	rjmp	.+16     	; 0x2180 <InitCoreAnalog+0x2ec>
    2170:	90 73       	andi	r25, 0x30	; 48
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 31       	cpi	r25, 0x10	; 16
    2176:	09 f0       	breq	.+2      	; 0x217a <InitCoreAnalog+0x2e6>
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	88 23       	and	r24, r24
    217c:	09 f4       	brne	.+2      	; 0x2180 <InitCoreAnalog+0x2ec>
    217e:	49 c0       	rjmp	.+146    	; 0x2212 <InitCoreAnalog+0x37e>
    2180:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2184:	80 73       	andi	r24, 0x30	; 48
    2186:	80 31       	cpi	r24, 0x10	; 16
    2188:	19 f0       	breq	.+6      	; 0x2190 <InitCoreAnalog+0x2fc>
    218a:	8b e0       	ldi	r24, 0x0B	; 11
    218c:	92 e2       	ldi	r25, 0x22	; 34
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <InitCoreAnalog+0x300>
    2190:	86 e0       	ldi	r24, 0x06	; 6
    2192:	92 e2       	ldi	r25, 0x22	; 34
    2194:	21 e0       	ldi	r18, 0x01	; 1
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e7       	ldi	r20, 0x70	; 112
    219a:	59 e0       	ldi	r21, 0x09	; 9
    219c:	68 ee       	ldi	r22, 0xE8	; 232
    219e:	7e e0       	ldi	r23, 0x0E	; 14
    21a0:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    21a4:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    21a8:	80 73       	andi	r24, 0x30	; 48
    21aa:	80 31       	cpi	r24, 0x10	; 16
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <InitCoreAnalog+0x320>
    21ae:	85 e1       	ldi	r24, 0x15	; 21
    21b0:	92 e2       	ldi	r25, 0x22	; 34
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <InitCoreAnalog+0x324>
    21b4:	80 e1       	ldi	r24, 0x10	; 16
    21b6:	92 e2       	ldi	r25, 0x22	; 34
    21b8:	21 e0       	ldi	r18, 0x01	; 1
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	60 eb       	ldi	r22, 0xB0	; 176
    21c2:	7e e0       	ldi	r23, 0x0E	; 14
    21c4:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    21c8:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    21cc:	80 73       	andi	r24, 0x30	; 48
    21ce:	80 31       	cpi	r24, 0x10	; 16
    21d0:	19 f0       	breq	.+6      	; 0x21d8 <InitCoreAnalog+0x344>
    21d2:	8f e1       	ldi	r24, 0x1F	; 31
    21d4:	92 e2       	ldi	r25, 0x22	; 34
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <InitCoreAnalog+0x348>
    21d8:	8a e1       	ldi	r24, 0x1A	; 26
    21da:	92 e2       	ldi	r25, 0x22	; 34
    21dc:	21 e0       	ldi	r18, 0x01	; 1
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	50 e0       	ldi	r21, 0x00	; 0
    21e4:	66 e5       	ldi	r22, 0x56	; 86
    21e6:	7e e0       	ldi	r23, 0x0E	; 14
    21e8:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    21ec:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    21f0:	80 73       	andi	r24, 0x30	; 48
    21f2:	80 31       	cpi	r24, 0x10	; 16
    21f4:	19 f0       	breq	.+6      	; 0x21fc <InitCoreAnalog+0x368>
    21f6:	89 e2       	ldi	r24, 0x29	; 41
    21f8:	92 e2       	ldi	r25, 0x22	; 34
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <InitCoreAnalog+0x36c>
    21fc:	84 e2       	ldi	r24, 0x24	; 36
    21fe:	92 e2       	ldi	r25, 0x22	; 34
    2200:	21 e0       	ldi	r18, 0x01	; 1
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	68 e1       	ldi	r22, 0x18	; 24
    220a:	7e e0       	ldi	r23, 0x0E	; 14
    220c:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2210:	af c0       	rjmp	.+350    	; 0x2370 <InitCoreAnalog+0x4dc>
    2212:	21 e0       	ldi	r18, 0x01	; 1
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	6e eb       	ldi	r22, 0xBE	; 190
    221c:	7d e0       	ldi	r23, 0x0D	; 13
    221e:	8e e2       	ldi	r24, 0x2E	; 46
    2220:	92 e2       	ldi	r25, 0x22	; 34
    2222:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2226:	21 e0       	ldi	r18, 0x01	; 1
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e0       	ldi	r20, 0x00	; 0
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	64 e6       	ldi	r22, 0x64	; 100
    2230:	7d e0       	ldi	r23, 0x0D	; 13
    2232:	83 e3       	ldi	r24, 0x33	; 51
    2234:	92 e2       	ldi	r25, 0x22	; 34
    2236:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    223a:	21 e0       	ldi	r18, 0x01	; 1
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	6c ef       	ldi	r22, 0xFC	; 252
    2244:	7c e0       	ldi	r23, 0x0C	; 12
    2246:	88 e3       	ldi	r24, 0x38	; 56
    2248:	92 e2       	ldi	r25, 0x22	; 34
    224a:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    224e:	25 e0       	ldi	r18, 0x05	; 5
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e0       	ldi	r20, 0x00	; 0
    2254:	50 e0       	ldi	r21, 0x00	; 0
    2256:	62 e9       	ldi	r22, 0x92	; 146
    2258:	7c e0       	ldi	r23, 0x0C	; 12
    225a:	8d e3       	ldi	r24, 0x3D	; 61
    225c:	92 e2       	ldi	r25, 0x22	; 34
    225e:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2262:	21 e0       	ldi	r18, 0x01	; 1
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	50 e0       	ldi	r21, 0x00	; 0
    226a:	68 e3       	ldi	r22, 0x38	; 56
    226c:	7c e0       	ldi	r23, 0x0C	; 12
    226e:	82 e4       	ldi	r24, 0x42	; 66
    2270:	92 e2       	ldi	r25, 0x22	; 34
    2272:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2276:	21 e0       	ldi	r18, 0x01	; 1
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	50 e0       	ldi	r21, 0x00	; 0
    227e:	6e ed       	ldi	r22, 0xDE	; 222
    2280:	7b e0       	ldi	r23, 0x0B	; 11
    2282:	87 e4       	ldi	r24, 0x47	; 71
    2284:	92 e2       	ldi	r25, 0x22	; 34
    2286:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    228a:	21 e0       	ldi	r18, 0x01	; 1
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	66 e7       	ldi	r22, 0x76	; 118
    2294:	7b e0       	ldi	r23, 0x0B	; 11
    2296:	8c e4       	ldi	r24, 0x4C	; 76
    2298:	92 e2       	ldi	r25, 0x22	; 34
    229a:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    229e:	25 e0       	ldi	r18, 0x05	; 5
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e0       	ldi	r20, 0x00	; 0
    22a4:	50 e0       	ldi	r21, 0x00	; 0
    22a6:	6c e0       	ldi	r22, 0x0C	; 12
    22a8:	7b e0       	ldi	r23, 0x0B	; 11
    22aa:	81 e5       	ldi	r24, 0x51	; 81
    22ac:	92 e2       	ldi	r25, 0x22	; 34
    22ae:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	64 ed       	ldi	r22, 0xD4	; 212
    22bc:	7a e0       	ldi	r23, 0x0A	; 10
    22be:	86 e5       	ldi	r24, 0x56	; 86
    22c0:	92 e2       	ldi	r25, 0x22	; 34
    22c2:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    22c6:	2a e0       	ldi	r18, 0x0A	; 10
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	64 e9       	ldi	r22, 0x94	; 148
    22d0:	7a e0       	ldi	r23, 0x0A	; 10
    22d2:	8b e5       	ldi	r24, 0x5B	; 91
    22d4:	92 e2       	ldi	r25, 0x22	; 34
    22d6:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    22da:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    22de:	80 73       	andi	r24, 0x30	; 48
    22e0:	09 f0       	breq	.+2      	; 0x22e4 <InitCoreAnalog+0x450>
    22e2:	46 c0       	rjmp	.+140    	; 0x2370 <InitCoreAnalog+0x4dc>
    22e4:	21 e0       	ldi	r18, 0x01	; 1
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e7       	ldi	r20, 0x70	; 112
    22ea:	59 e0       	ldi	r21, 0x09	; 9
    22ec:	62 e3       	ldi	r22, 0x32	; 50
    22ee:	7a e0       	ldi	r23, 0x0A	; 10
    22f0:	86 e0       	ldi	r24, 0x06	; 6
    22f2:	92 e2       	ldi	r25, 0x22	; 34
    22f4:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    22f8:	21 e0       	ldi	r18, 0x01	; 1
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	60 eb       	ldi	r22, 0xB0	; 176
    2302:	7e e0       	ldi	r23, 0x0E	; 14
    2304:	80 e1       	ldi	r24, 0x10	; 16
    2306:	92 e2       	ldi	r25, 0x22	; 34
    2308:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	50 e0       	ldi	r21, 0x00	; 0
    2314:	66 e5       	ldi	r22, 0x56	; 86
    2316:	7e e0       	ldi	r23, 0x0E	; 14
    2318:	8a e1       	ldi	r24, 0x1A	; 26
    231a:	92 e2       	ldi	r25, 0x22	; 34
    231c:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2320:	21 e0       	ldi	r18, 0x01	; 1
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	68 e1       	ldi	r22, 0x18	; 24
    232a:	7e e0       	ldi	r23, 0x0E	; 14
    232c:	84 e2       	ldi	r24, 0x24	; 36
    232e:	92 e2       	ldi	r25, 0x22	; 34
    2330:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2334:	2a e0       	ldi	r18, 0x0A	; 10
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	6a ef       	ldi	r22, 0xFA	; 250
    233e:	79 e0       	ldi	r23, 0x09	; 9
    2340:	80 e6       	ldi	r24, 0x60	; 96
    2342:	92 e2       	ldi	r25, 0x22	; 34
    2344:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2348:	25 e0       	ldi	r18, 0x05	; 5
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	50 e0       	ldi	r21, 0x00	; 0
    2350:	68 eb       	ldi	r22, 0xB8	; 184
    2352:	79 e0       	ldi	r23, 0x09	; 9
    2354:	85 e6       	ldi	r24, 0x65	; 101
    2356:	92 e2       	ldi	r25, 0x22	; 34
    2358:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    235c:	25 e0       	ldi	r18, 0x05	; 5
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	50 e0       	ldi	r21, 0x00	; 0
    2364:	66 e7       	ldi	r22, 0x76	; 118
    2366:	79 e0       	ldi	r23, 0x09	; 9
    2368:	8a e6       	ldi	r24, 0x6A	; 106
    236a:	92 e2       	ldi	r25, 0x22	; 34
    236c:	0e 94 a9 01 	call	0x352	; 0x352 <AddSlaveOwnSensor>
    2370:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2374:	80 73       	andi	r24, 0x30	; 48
    2376:	80 31       	cpi	r24, 0x10	; 16
    2378:	29 f0       	breq	.+10     	; 0x2384 <InitCoreAnalog+0x4f0>
    237a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    237e:	80 73       	andi	r24, 0x30	; 48
    2380:	80 32       	cpi	r24, 0x20	; 32
    2382:	69 f4       	brne	.+26     	; 0x239e <InitCoreAnalog+0x50a>
    2384:	86 e6       	ldi	r24, 0x66	; 102
    2386:	96 ea       	ldi	r25, 0xA6	; 166
    2388:	a7 e5       	ldi	r26, 0x57	; 87
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <sCC2MinSpeed>
    2390:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <sCC2MinSpeed+0x1>
    2394:	a0 93 e2 28 	sts	0x28E2, r26	; 0x8028e2 <sCC2MinSpeed+0x2>
    2398:	b0 93 e3 28 	sts	0x28E3, r27	; 0x8028e3 <sCC2MinSpeed+0x3>
    239c:	0c c0       	rjmp	.+24     	; 0x23b6 <InitCoreAnalog+0x522>
    239e:	86 e6       	ldi	r24, 0x66	; 102
    23a0:	96 e6       	ldi	r25, 0x66	; 102
    23a2:	aa e4       	ldi	r26, 0x4A	; 74
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	80 93 e0 28 	sts	0x28E0, r24	; 0x8028e0 <sCC2MinSpeed>
    23aa:	90 93 e1 28 	sts	0x28E1, r25	; 0x8028e1 <sCC2MinSpeed+0x1>
    23ae:	a0 93 e2 28 	sts	0x28E2, r26	; 0x8028e2 <sCC2MinSpeed+0x2>
    23b2:	b0 93 e3 28 	sts	0x28E3, r27	; 0x8028e3 <sCC2MinSpeed+0x3>
    23b6:	df 91       	pop	r29
    23b8:	cf 91       	pop	r28
    23ba:	1f 91       	pop	r17
    23bc:	0f 91       	pop	r16
    23be:	ff 90       	pop	r15
    23c0:	ef 90       	pop	r14
    23c2:	df 90       	pop	r13
    23c4:	08 95       	ret

000023c6 <CalibrateChannel>:
    23c6:	2f 92       	push	r2
    23c8:	3f 92       	push	r3
    23ca:	4f 92       	push	r4
    23cc:	5f 92       	push	r5
    23ce:	6f 92       	push	r6
    23d0:	7f 92       	push	r7
    23d2:	8f 92       	push	r8
    23d4:	9f 92       	push	r9
    23d6:	af 92       	push	r10
    23d8:	bf 92       	push	r11
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	c3 5a       	subi	r28, 0xA3	; 163
    23f0:	d1 09       	sbc	r29, r1
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	28 2e       	mov	r2, r24
    23f8:	a9 2e       	mov	r10, r25
    23fa:	80 e6       	ldi	r24, 0x60	; 96
    23fc:	e4 e6       	ldi	r30, 0x64	; 100
    23fe:	f0 e2       	ldi	r31, 0x20	; 32
    2400:	de 01       	movw	r26, r28
    2402:	11 96       	adiw	r26, 0x01	; 1
    2404:	01 90       	ld	r0, Z+
    2406:	0d 92       	st	X+, r0
    2408:	8a 95       	dec	r24
    240a:	e1 f7       	brne	.-8      	; 0x2404 <CalibrateChannel+0x3e>
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	80 93 67 29 	sts	0x2967, r24	; 0x802967 <sTakeSnapshot>
    2412:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>
    2416:	81 11       	cpse	r24, r1
    2418:	fc cf       	rjmp	.-8      	; 0x2412 <CalibrateChannel+0x4c>
    241a:	80 91 c9 29 	lds	r24, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5d>
    241e:	90 91 ca 29 	lds	r25, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5e>
    2422:	a0 91 cb 29 	lds	r26, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x5f>
    2426:	b0 91 cc 29 	lds	r27, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x60>
    242a:	85 36       	cpi	r24, 0x65	; 101
    242c:	91 05       	cpc	r25, r1
    242e:	a1 05       	cpc	r26, r1
    2430:	b1 05       	cpc	r27, r1
    2432:	58 f0       	brcs	.+22     	; 0x244a <CalibrateChannel+0x84>
    2434:	22 2d       	mov	r18, r2
    2436:	3a 2d       	mov	r19, r10
    2438:	42 e4       	ldi	r20, 0x42	; 66
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	61 e0       	ldi	r22, 0x01	; 1
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	85 e7       	ldi	r24, 0x75	; 117
    2442:	92 e2       	ldi	r25, 0x22	; 34
    2444:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    2448:	ba c5       	rjmp	.+2932   	; 0x2fbe <CalibrateChannel+0xbf8>
    244a:	22 2d       	mov	r18, r2
    244c:	3a 2d       	mov	r19, r10
    244e:	48 e1       	ldi	r20, 0x18	; 24
    2450:	50 e0       	ldi	r21, 0x00	; 0
    2452:	61 e0       	ldi	r22, 0x01	; 1
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	88 eb       	ldi	r24, 0xB8	; 184
    2458:	92 e2       	ldi	r25, 0x22	; 34
    245a:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    245e:	00 e6       	ldi	r16, 0x60	; 96
    2460:	16 e0       	ldi	r17, 0x06	; 6
    2462:	0f 2e       	mov	r0, r31
    2464:	f9 ef       	ldi	r31, 0xF9	; 249
    2466:	ef 2e       	mov	r14, r31
    2468:	f2 e2       	ldi	r31, 0x22	; 34
    246a:	ff 2e       	mov	r15, r31
    246c:	f0 2d       	mov	r31, r0
    246e:	22 2d       	mov	r18, r2
    2470:	3a 2d       	mov	r19, r10
    2472:	47 e2       	ldi	r20, 0x27	; 39
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	81 ed       	ldi	r24, 0xD1	; 209
    247c:	92 e2       	ldi	r25, 0x22	; 34
    247e:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    2482:	d1 2c       	mov	r13, r1
    2484:	1f c0       	rjmp	.+62     	; 0x24c4 <CalibrateChannel+0xfe>
    2486:	fc 01       	movw	r30, r24
    2488:	ee 0f       	add	r30, r30
    248a:	ff 1f       	adc	r31, r31
    248c:	e8 0f       	add	r30, r24
    248e:	f9 1f       	adc	r31, r25
    2490:	ee 0f       	add	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	21 e0       	ldi	r18, 0x01	; 1
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	2c 0f       	add	r18, r28
    249e:	3d 1f       	adc	r19, r29
    24a0:	e2 0f       	add	r30, r18
    24a2:	f3 1f       	adc	r31, r19
    24a4:	21 81       	ldd	r18, Z+1	; 0x01
    24a6:	2f 93       	push	r18
    24a8:	20 81       	ld	r18, Z
    24aa:	2f 93       	push	r18
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	9f 93       	push	r25
    24b0:	8f 93       	push	r24
    24b2:	ff 92       	push	r15
    24b4:	ef 92       	push	r14
    24b6:	af 92       	push	r10
    24b8:	2f 92       	push	r2
    24ba:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    24be:	d3 94       	inc	r13
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	8d 2d       	mov	r24, r13
    24c6:	0d 2c       	mov	r0, r13
    24c8:	00 0c       	add	r0, r0
    24ca:	99 0b       	sbc	r25, r25
    24cc:	d8 01       	movw	r26, r16
    24ce:	18 96       	adiw	r26, 0x08	; 8
    24d0:	2c 91       	ld	r18, X
    24d2:	18 97       	sbiw	r26, 0x08	; 8
    24d4:	18 96       	adiw	r26, 0x08	; 8
    24d6:	4c 91       	ld	r20, X
    24d8:	40 73       	andi	r20, 0x30	; 48
    24da:	31 e0       	ldi	r19, 0x01	; 1
    24dc:	40 32       	cpi	r20, 0x20	; 32
    24de:	09 f0       	breq	.+2      	; 0x24e2 <CalibrateChannel+0x11c>
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	31 11       	cpse	r19, r1
    24e4:	0a c0       	rjmp	.+20     	; 0x24fa <CalibrateChannel+0x134>
    24e6:	20 73       	andi	r18, 0x30	; 48
    24e8:	31 e0       	ldi	r19, 0x01	; 1
    24ea:	20 31       	cpi	r18, 0x10	; 16
    24ec:	09 f0       	breq	.+2      	; 0x24f0 <CalibrateChannel+0x12a>
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	31 11       	cpse	r19, r1
    24f2:	03 c0       	rjmp	.+6      	; 0x24fa <CalibrateChannel+0x134>
    24f4:	28 e0       	ldi	r18, 0x08	; 8
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <CalibrateChannel+0x138>
    24fa:	24 e0       	ldi	r18, 0x04	; 4
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	82 17       	cp	r24, r18
    2500:	93 07       	cpc	r25, r19
    2502:	0c f2       	brlt	.-126    	; 0x2486 <CalibrateChannel+0xc0>
    2504:	22 2d       	mov	r18, r2
    2506:	3a 2d       	mov	r19, r10
    2508:	43 e0       	ldi	r20, 0x03	; 3
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	61 e0       	ldi	r22, 0x01	; 1
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	85 e0       	ldi	r24, 0x05	; 5
    2512:	93 e2       	ldi	r25, 0x23	; 35
    2514:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    2518:	02 c0       	rjmp	.+4      	; 0x251e <CalibrateChannel+0x158>
    251a:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
    251e:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <CanRead_Ctrl>
    2522:	81 11       	cpse	r24, r1
    2524:	fa cf       	rjmp	.-12     	; 0x251a <CalibrateChannel+0x154>
    2526:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
    252a:	0f 2e       	mov	r0, r31
    252c:	ff ec       	ldi	r31, 0xCF	; 207
    252e:	bf 2e       	mov	r11, r31
    2530:	f0 2d       	mov	r31, r0
    2532:	b8 0e       	add	r11, r24
    2534:	22 2d       	mov	r18, r2
    2536:	3a 2d       	mov	r19, r10
    2538:	42 e0       	ldi	r20, 0x02	; 2
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	61 e0       	ldi	r22, 0x01	; 1
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	8b e2       	ldi	r24, 0x2B	; 43
    2542:	94 e2       	ldi	r25, 0x24	; 36
    2544:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    2548:	bd 14       	cp	r11, r13
    254a:	1c f4       	brge	.+6      	; 0x2552 <CalibrateChannel+0x18c>
    254c:	bb 20       	and	r11, r11
    254e:	0c f0       	brlt	.+2      	; 0x2552 <CalibrateChannel+0x18c>
    2550:	5a c3       	rjmp	.+1716   	; 0x2c06 <CalibrateChannel+0x840>
    2552:	22 2d       	mov	r18, r2
    2554:	3a 2d       	mov	r19, r10
    2556:	40 e2       	ldi	r20, 0x20	; 32
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	61 e0       	ldi	r22, 0x01	; 1
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	89 e0       	ldi	r24, 0x09	; 9
    2560:	93 e2       	ldi	r25, 0x23	; 35
    2562:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    2566:	83 cf       	rjmp	.-250    	; 0x246e <CalibrateChannel+0xa8>
    2568:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
    256c:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <CanRead_Ctrl>
    2570:	81 11       	cpse	r24, r1
    2572:	fa cf       	rjmp	.-12     	; 0x2568 <CalibrateChannel+0x1a2>
    2574:	b1 10       	cpse	r11, r1
    2576:	03 c0       	rjmp	.+6      	; 0x257e <CalibrateChannel+0x1b8>
    2578:	82 e7       	ldi	r24, 0x72	; 114
    257a:	92 e2       	ldi	r25, 0x22	; 34
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <CalibrateChannel+0x1bc>
    257e:	8f e6       	ldi	r24, 0x6F	; 111
    2580:	92 e2       	ldi	r25, 0x22	; 34
    2582:	c3 2c       	mov	r12, r3
    2584:	03 2c       	mov	r0, r3
    2586:	00 0c       	add	r0, r0
    2588:	dd 08       	sbc	r13, r13
    258a:	9f 93       	push	r25
    258c:	8f 93       	push	r24
    258e:	c6 01       	movw	r24, r12
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	9f 93       	push	r25
    2594:	8f 93       	push	r24
    2596:	aa e2       	ldi	r26, 0x2A	; 42
    2598:	b3 e2       	ldi	r27, 0x23	; 35
    259a:	bf 93       	push	r27
    259c:	af 93       	push	r26
    259e:	af 92       	push	r10
    25a0:	2f 92       	push	r2
    25a2:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	41 2c       	mov	r4, r1
    25ac:	51 2c       	mov	r5, r1
    25ae:	32 01       	movw	r6, r4
    25b0:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
    25b4:	18 2f       	mov	r17, r24
    25b6:	28 2f       	mov	r18, r24
    25b8:	08 2e       	mov	r0, r24
    25ba:	00 0c       	add	r0, r0
    25bc:	33 0b       	sbc	r19, r19
    25be:	20 53       	subi	r18, 0x30	; 48
    25c0:	31 09       	sbc	r19, r1
    25c2:	2a 30       	cpi	r18, 0x0A	; 10
    25c4:	31 05       	cpc	r19, r1
    25c6:	08 f0       	brcs	.+2      	; 0x25ca <CalibrateChannel+0x204>
    25c8:	78 c3       	rjmp	.+1776   	; 0x2cba <CalibrateChannel+0x8f4>
    25ca:	62 2d       	mov	r22, r2
    25cc:	7a 2d       	mov	r23, r10
    25ce:	08 2e       	mov	r0, r24
    25d0:	00 0c       	add	r0, r0
    25d2:	99 0b       	sbc	r25, r25
    25d4:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    25d8:	44 0c       	add	r4, r4
    25da:	55 1c       	adc	r5, r5
    25dc:	66 1c       	adc	r6, r6
    25de:	77 1c       	adc	r7, r7
    25e0:	d3 01       	movw	r26, r6
    25e2:	c2 01       	movw	r24, r4
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	aa 1f       	adc	r26, r26
    25ea:	bb 1f       	adc	r27, r27
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	aa 1f       	adc	r26, r26
    25f2:	bb 1f       	adc	r27, r27
    25f4:	48 0e       	add	r4, r24
    25f6:	59 1e       	adc	r5, r25
    25f8:	6a 1e       	adc	r6, r26
    25fa:	7b 1e       	adc	r7, r27
    25fc:	81 2f       	mov	r24, r17
    25fe:	11 0f       	add	r17, r17
    2600:	99 0b       	sbc	r25, r25
    2602:	aa 0b       	sbc	r26, r26
    2604:	bb 0b       	sbc	r27, r27
    2606:	48 0e       	add	r4, r24
    2608:	59 1e       	adc	r5, r25
    260a:	6a 1e       	adc	r6, r26
    260c:	7b 1e       	adc	r7, r27
    260e:	30 e3       	ldi	r19, 0x30	; 48
    2610:	43 1a       	sub	r4, r19
    2612:	51 08       	sbc	r5, r1
    2614:	61 08       	sbc	r6, r1
    2616:	71 08       	sbc	r7, r1
    2618:	cb cf       	rjmp	.-106    	; 0x25b0 <CalibrateChannel+0x1ea>
    261a:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>
    261e:	81 11       	cpse	r24, r1
    2620:	fc cf       	rjmp	.-8      	; 0x261a <CalibrateChannel+0x254>
    2622:	cd 56       	subi	r28, 0x6D	; 109
    2624:	df 4f       	sbci	r29, 0xFF	; 255
    2626:	a8 81       	ld	r26, Y
    2628:	b9 81       	ldd	r27, Y+1	; 0x01
    262a:	c3 59       	subi	r28, 0x93	; 147
    262c:	d0 40       	sbci	r29, 0x00	; 0
    262e:	ed 91       	ld	r30, X+
    2630:	fc 91       	ld	r31, X
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	82 81       	ldd	r24, Z+2	; 0x02
    2638:	93 81       	ldd	r25, Z+3	; 0x03
    263a:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	57 e3       	ldi	r21, 0x37	; 55
    2646:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    264a:	2b 01       	movw	r4, r22
    264c:	3c 01       	movw	r6, r24
    264e:	cc 0c       	add	r12, r12
    2650:	dd 1c       	adc	r13, r13
    2652:	cc 0c       	add	r12, r12
    2654:	dd 1c       	adc	r13, r13
    2656:	e1 e6       	ldi	r30, 0x61	; 97
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	ec 0f       	add	r30, r28
    265c:	fd 1f       	adc	r31, r29
    265e:	ec 0d       	add	r30, r12
    2660:	fd 1d       	adc	r31, r13
    2662:	60 83       	st	Z, r22
    2664:	71 83       	std	Z+1, r23	; 0x01
    2666:	82 83       	std	Z+2, r24	; 0x02
    2668:	93 83       	std	Z+3, r25	; 0x03
    266a:	c9 56       	subi	r28, 0x69	; 105
    266c:	df 4f       	sbci	r29, 0xFF	; 255
    266e:	e8 81       	ld	r30, Y
    2670:	f9 81       	ldd	r31, Y+1	; 0x01
    2672:	c7 59       	subi	r28, 0x97	; 151
    2674:	d0 40       	sbci	r29, 0x00	; 0
    2676:	c0 80       	ld	r12, Z
    2678:	d1 80       	ldd	r13, Z+1	; 0x01
    267a:	d6 01       	movw	r26, r12
    267c:	8d 91       	ld	r24, X+
    267e:	9d 91       	ld	r25, X+
    2680:	0d 90       	ld	r0, X+
    2682:	bc 91       	ld	r27, X
    2684:	a0 2d       	mov	r26, r0
    2686:	c1 57       	subi	r28, 0x71	; 113
    2688:	df 4f       	sbci	r29, 0xFF	; 255
    268a:	88 83       	st	Y, r24
    268c:	99 83       	std	Y+1, r25	; 0x01
    268e:	aa 83       	std	Y+2, r26	; 0x02
    2690:	bb 83       	std	Y+3, r27	; 0x03
    2692:	cf 58       	subi	r28, 0x8F	; 143
    2694:	d0 40       	sbci	r29, 0x00	; 0
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a e7       	ldi	r20, 0x7A	; 122
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	c3 01       	movw	r24, r6
    26a0:	b2 01       	movw	r22, r4
    26a2:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    26a6:	9f 93       	push	r25
    26a8:	8f 93       	push	r24
    26aa:	7f 93       	push	r23
    26ac:	6f 93       	push	r22
    26ae:	c1 57       	subi	r28, 0x71	; 113
    26b0:	df 4f       	sbci	r29, 0xFF	; 255
    26b2:	28 81       	ld	r18, Y
    26b4:	39 81       	ldd	r19, Y+1	; 0x01
    26b6:	4a 81       	ldd	r20, Y+2	; 0x02
    26b8:	5b 81       	ldd	r21, Y+3	; 0x03
    26ba:	cf 58       	subi	r28, 0x8F	; 143
    26bc:	d0 40       	sbci	r29, 0x00	; 0
    26be:	c3 01       	movw	r24, r6
    26c0:	b2 01       	movw	r22, r4
    26c2:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    26c6:	9f 93       	push	r25
    26c8:	8f 93       	push	r24
    26ca:	7f 93       	push	r23
    26cc:	6f 93       	push	r22
    26ce:	1f 93       	push	r17
    26d0:	0f 93       	push	r16
    26d2:	ff 92       	push	r15
    26d4:	ef 92       	push	r14
    26d6:	af e5       	ldi	r26, 0x5F	; 95
    26d8:	b3 e2       	ldi	r27, 0x23	; 35
    26da:	bf 93       	push	r27
    26dc:	af 93       	push	r26
    26de:	af 92       	push	r10
    26e0:	2f 92       	push	r2
    26e2:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
    26ee:	98 2f       	mov	r25, r24
    26f0:	89 37       	cpi	r24, 0x79	; 121
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <CalibrateChannel+0x330>
    26f4:	44 c3       	rjmp	.+1672   	; 0x2d7e <CalibrateChannel+0x9b8>
    26f6:	89 35       	cpi	r24, 0x59	; 89
    26f8:	09 f4       	brne	.+2      	; 0x26fc <CalibrateChannel+0x336>
    26fa:	04 c3       	rjmp	.+1544   	; 0x2d04 <CalibrateChannel+0x93e>
    26fc:	8f 7d       	andi	r24, 0xDF	; 223
    26fe:	8e 34       	cpi	r24, 0x4E	; 78
    2700:	09 f4       	brne	.+2      	; 0x2704 <CalibrateChannel+0x33e>
    2702:	12 c3       	rjmp	.+1572   	; 0x2d28 <CalibrateChannel+0x962>
    2704:	9b 31       	cpi	r25, 0x1B	; 27
    2706:	89 f7       	brne	.-30     	; 0x26ea <CalibrateChannel+0x324>
    2708:	28 c3       	rjmp	.+1616   	; 0x2d5a <CalibrateChannel+0x994>
    270a:	33 94       	inc	r3
    270c:	34 e0       	ldi	r19, 0x04	; 4
    270e:	33 15       	cp	r19, r3
    2710:	d4 f0       	brlt	.+52     	; 0x2746 <CalibrateChannel+0x380>
    2712:	22 2d       	mov	r18, r2
    2714:	3a 2d       	mov	r19, r10
    2716:	47 e2       	ldi	r20, 0x27	; 39
    2718:	50 e0       	ldi	r21, 0x00	; 0
    271a:	61 e0       	ldi	r22, 0x01	; 1
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	83 eb       	ldi	r24, 0xB3	; 179
    2720:	93 e2       	ldi	r25, 0x23	; 35
    2722:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    2726:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
    272a:	98 2f       	mov	r25, r24
    272c:	89 37       	cpi	r24, 0x79	; 121
    272e:	09 f4       	brne	.+2      	; 0x2732 <CalibrateChannel+0x36c>
    2730:	38 c3       	rjmp	.+1648   	; 0x2da2 <CalibrateChannel+0x9dc>
    2732:	89 35       	cpi	r24, 0x59	; 89
    2734:	09 f4       	brne	.+2      	; 0x2738 <CalibrateChannel+0x372>
    2736:	47 c3       	rjmp	.+1678   	; 0x2dc6 <CalibrateChannel+0xa00>
    2738:	8f 7d       	andi	r24, 0xDF	; 223
    273a:	8e 34       	cpi	r24, 0x4E	; 78
    273c:	09 f4       	brne	.+2      	; 0x2740 <CalibrateChannel+0x37a>
    273e:	55 c3       	rjmp	.+1706   	; 0x2dea <CalibrateChannel+0xa24>
    2740:	9b 31       	cpi	r25, 0x1B	; 27
    2742:	89 f7       	brne	.-30     	; 0x2726 <CalibrateChannel+0x360>
    2744:	52 c3       	rjmp	.+1700   	; 0x2dea <CalibrateChannel+0xa24>
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	83 15       	cp	r24, r3
    274a:	1c f4       	brge	.+6      	; 0x2752 <CalibrateChannel+0x38c>
    274c:	13 14       	cp	r1, r3
    274e:	64 f0       	brlt	.+24     	; 0x2768 <CalibrateChannel+0x3a2>
    2750:	c7 c3       	rjmp	.+1934   	; 0x2ee0 <CalibrateChannel+0xb1a>
    2752:	22 2d       	mov	r18, r2
    2754:	3a 2d       	mov	r19, r10
    2756:	42 e5       	ldi	r20, 0x52	; 82
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	61 e0       	ldi	r22, 0x01	; 1
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	8b ed       	ldi	r24, 0xDB	; 219
    2760:	93 e2       	ldi	r25, 0x23	; 35
    2762:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    2766:	2b c4       	rjmp	.+2134   	; 0x2fbe <CalibrateChannel+0xbf8>
    2768:	3e 01       	movw	r6, r28
    276a:	95 e7       	ldi	r25, 0x75	; 117
    276c:	69 0e       	add	r6, r25
    276e:	71 1c       	adc	r7, r1
    2770:	2e 01       	movw	r4, r28
    2772:	a1 e6       	ldi	r26, 0x61	; 97
    2774:	4a 0e       	add	r4, r26
    2776:	51 1c       	adc	r5, r1
    2778:	72 01       	movw	r14, r4
    277a:	83 01       	movw	r16, r6
    277c:	cd 56       	subi	r28, 0x6D	; 109
    277e:	df 4f       	sbci	r29, 0xFF	; 255
    2780:	18 82       	st	Y, r1
    2782:	19 82       	std	Y+1, r1	; 0x01
    2784:	1a 82       	std	Y+2, r1	; 0x02
    2786:	1b 82       	std	Y+3, r1	; 0x03
    2788:	c3 59       	subi	r28, 0x93	; 147
    278a:	d0 40       	sbci	r29, 0x00	; 0
    278c:	c1 57       	subi	r28, 0x71	; 113
    278e:	df 4f       	sbci	r29, 0xFF	; 255
    2790:	18 82       	st	Y, r1
    2792:	19 82       	std	Y+1, r1	; 0x01
    2794:	1a 82       	std	Y+2, r1	; 0x02
    2796:	1b 82       	std	Y+3, r1	; 0x03
    2798:	cf 58       	subi	r28, 0x8F	; 143
    279a:	d0 40       	sbci	r29, 0x00	; 0
    279c:	b1 2c       	mov	r11, r1
    279e:	f8 01       	movw	r30, r16
    27a0:	21 91       	ld	r18, Z+
    27a2:	31 91       	ld	r19, Z+
    27a4:	41 91       	ld	r20, Z+
    27a6:	51 91       	ld	r21, Z+
    27a8:	8f 01       	movw	r16, r30
    27aa:	c1 57       	subi	r28, 0x71	; 113
    27ac:	df 4f       	sbci	r29, 0xFF	; 255
    27ae:	68 81       	ld	r22, Y
    27b0:	79 81       	ldd	r23, Y+1	; 0x01
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	9b 81       	ldd	r25, Y+3	; 0x03
    27b6:	cf 58       	subi	r28, 0x8F	; 143
    27b8:	d0 40       	sbci	r29, 0x00	; 0
    27ba:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    27be:	c1 57       	subi	r28, 0x71	; 113
    27c0:	df 4f       	sbci	r29, 0xFF	; 255
    27c2:	68 83       	st	Y, r22
    27c4:	79 83       	std	Y+1, r23	; 0x01
    27c6:	8a 83       	std	Y+2, r24	; 0x02
    27c8:	9b 83       	std	Y+3, r25	; 0x03
    27ca:	cf 58       	subi	r28, 0x8F	; 143
    27cc:	d0 40       	sbci	r29, 0x00	; 0
    27ce:	d7 01       	movw	r26, r14
    27d0:	2d 91       	ld	r18, X+
    27d2:	3d 91       	ld	r19, X+
    27d4:	4d 91       	ld	r20, X+
    27d6:	5d 91       	ld	r21, X+
    27d8:	7d 01       	movw	r14, r26
    27da:	cd 56       	subi	r28, 0x6D	; 109
    27dc:	df 4f       	sbci	r29, 0xFF	; 255
    27de:	68 81       	ld	r22, Y
    27e0:	79 81       	ldd	r23, Y+1	; 0x01
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	9b 81       	ldd	r25, Y+3	; 0x03
    27e6:	c3 59       	subi	r28, 0x93	; 147
    27e8:	d0 40       	sbci	r29, 0x00	; 0
    27ea:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    27ee:	cd 56       	subi	r28, 0x6D	; 109
    27f0:	df 4f       	sbci	r29, 0xFF	; 255
    27f2:	68 83       	st	Y, r22
    27f4:	79 83       	std	Y+1, r23	; 0x01
    27f6:	8a 83       	std	Y+2, r24	; 0x02
    27f8:	9b 83       	std	Y+3, r25	; 0x03
    27fa:	c3 59       	subi	r28, 0x93	; 147
    27fc:	d0 40       	sbci	r29, 0x00	; 0
    27fe:	b3 94       	inc	r11
    2800:	3b 10       	cpse	r3, r11
    2802:	cd cf       	rjmp	.-102    	; 0x279e <CalibrateChannel+0x3d8>
    2804:	07 c3       	rjmp	.+1550   	; 0x2e14 <CalibrateChannel+0xa4e>
    2806:	f4 01       	movw	r30, r8
    2808:	61 91       	ld	r22, Z+
    280a:	71 91       	ld	r23, Z+
    280c:	81 91       	ld	r24, Z+
    280e:	91 91       	ld	r25, Z+
    2810:	4f 01       	movw	r8, r30
    2812:	20 2f       	mov	r18, r16
    2814:	3b 2d       	mov	r19, r11
    2816:	4f 2d       	mov	r20, r15
    2818:	5e 2d       	mov	r21, r14
    281a:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    281e:	2b 01       	movw	r4, r22
    2820:	3c 01       	movw	r6, r24
    2822:	9b 01       	movw	r18, r22
    2824:	ac 01       	movw	r20, r24
    2826:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    282a:	9b 01       	movw	r18, r22
    282c:	ac 01       	movw	r20, r24
    282e:	c1 57       	subi	r28, 0x71	; 113
    2830:	df 4f       	sbci	r29, 0xFF	; 255
    2832:	68 81       	ld	r22, Y
    2834:	79 81       	ldd	r23, Y+1	; 0x01
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	9b 81       	ldd	r25, Y+3	; 0x03
    283a:	cf 58       	subi	r28, 0x8F	; 143
    283c:	d0 40       	sbci	r29, 0x00	; 0
    283e:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2842:	c1 57       	subi	r28, 0x71	; 113
    2844:	df 4f       	sbci	r29, 0xFF	; 255
    2846:	68 83       	st	Y, r22
    2848:	79 83       	std	Y+1, r23	; 0x01
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	9b 83       	std	Y+3, r25	; 0x03
    284e:	cf 58       	subi	r28, 0x8F	; 143
    2850:	d0 40       	sbci	r29, 0x00	; 0
    2852:	d6 01       	movw	r26, r12
    2854:	6d 91       	ld	r22, X+
    2856:	7d 91       	ld	r23, X+
    2858:	8d 91       	ld	r24, X+
    285a:	9d 91       	ld	r25, X+
    285c:	6d 01       	movw	r12, r26
    285e:	c9 56       	subi	r28, 0x69	; 105
    2860:	df 4f       	sbci	r29, 0xFF	; 255
    2862:	28 81       	ld	r18, Y
    2864:	c7 59       	subi	r28, 0x97	; 151
    2866:	d0 40       	sbci	r29, 0x00	; 0
    2868:	c3 56       	subi	r28, 0x63	; 99
    286a:	df 4f       	sbci	r29, 0xFF	; 255
    286c:	38 81       	ld	r19, Y
    286e:	cd 59       	subi	r28, 0x9D	; 157
    2870:	d0 40       	sbci	r29, 0x00	; 0
    2872:	c2 56       	subi	r28, 0x62	; 98
    2874:	df 4f       	sbci	r29, 0xFF	; 255
    2876:	48 81       	ld	r20, Y
    2878:	ce 59       	subi	r28, 0x9E	; 158
    287a:	d0 40       	sbci	r29, 0x00	; 0
    287c:	c1 56       	subi	r28, 0x61	; 97
    287e:	df 4f       	sbci	r29, 0xFF	; 255
    2880:	58 81       	ld	r21, Y
    2882:	cf 59       	subi	r28, 0x9F	; 159
    2884:	d0 40       	sbci	r29, 0x00	; 0
    2886:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    288a:	9b 01       	movw	r18, r22
    288c:	ac 01       	movw	r20, r24
    288e:	c3 01       	movw	r24, r6
    2890:	b2 01       	movw	r22, r4
    2892:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    2896:	9b 01       	movw	r18, r22
    2898:	ac 01       	movw	r20, r24
    289a:	cd 56       	subi	r28, 0x6D	; 109
    289c:	df 4f       	sbci	r29, 0xFF	; 255
    289e:	68 81       	ld	r22, Y
    28a0:	79 81       	ldd	r23, Y+1	; 0x01
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	9b 81       	ldd	r25, Y+3	; 0x03
    28a6:	c3 59       	subi	r28, 0x93	; 147
    28a8:	d0 40       	sbci	r29, 0x00	; 0
    28aa:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    28ae:	cd 56       	subi	r28, 0x6D	; 109
    28b0:	df 4f       	sbci	r29, 0xFF	; 255
    28b2:	68 83       	st	Y, r22
    28b4:	79 83       	std	Y+1, r23	; 0x01
    28b6:	8a 83       	std	Y+2, r24	; 0x02
    28b8:	9b 83       	std	Y+3, r25	; 0x03
    28ba:	c3 59       	subi	r28, 0x93	; 147
    28bc:	d0 40       	sbci	r29, 0x00	; 0
    28be:	1f 5f       	subi	r17, 0xFF	; 255
    28c0:	31 12       	cpse	r3, r17
    28c2:	a1 cf       	rjmp	.-190    	; 0x2806 <CalibrateChannel+0x440>
    28c4:	c0 56       	subi	r28, 0x60	; 96
    28c6:	df 4f       	sbci	r29, 0xFF	; 255
    28c8:	88 80       	ld	r8, Y
    28ca:	99 80       	ldd	r9, Y+1	; 0x01
    28cc:	c0 5a       	subi	r28, 0xA0	; 160
    28ce:	d0 40       	sbci	r29, 0x00	; 0
    28d0:	ce 55       	subi	r28, 0x5E	; 94
    28d2:	df 4f       	sbci	r29, 0xFF	; 255
    28d4:	c8 80       	ld	r12, Y
    28d6:	d9 80       	ldd	r13, Y+1	; 0x01
    28d8:	c2 5a       	subi	r28, 0xA2	; 162
    28da:	d0 40       	sbci	r29, 0x00	; 0
    28dc:	c1 57       	subi	r28, 0x71	; 113
    28de:	df 4f       	sbci	r29, 0xFF	; 255
    28e0:	28 81       	ld	r18, Y
    28e2:	39 81       	ldd	r19, Y+1	; 0x01
    28e4:	4a 81       	ldd	r20, Y+2	; 0x02
    28e6:	5b 81       	ldd	r21, Y+3	; 0x03
    28e8:	cf 58       	subi	r28, 0x8F	; 143
    28ea:	d0 40       	sbci	r29, 0x00	; 0
    28ec:	cd 56       	subi	r28, 0x6D	; 109
    28ee:	df 4f       	sbci	r29, 0xFF	; 255
    28f0:	68 81       	ld	r22, Y
    28f2:	79 81       	ldd	r23, Y+1	; 0x01
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	9b 81       	ldd	r25, Y+3	; 0x03
    28f8:	c3 59       	subi	r28, 0x93	; 147
    28fa:	d0 40       	sbci	r29, 0x00	; 0
    28fc:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    2900:	c1 57       	subi	r28, 0x71	; 113
    2902:	df 4f       	sbci	r29, 0xFF	; 255
    2904:	68 83       	st	Y, r22
    2906:	79 83       	std	Y+1, r23	; 0x01
    2908:	8a 83       	std	Y+2, r24	; 0x02
    290a:	9b 83       	std	Y+3, r25	; 0x03
    290c:	cf 58       	subi	r28, 0x8F	; 143
    290e:	d0 40       	sbci	r29, 0x00	; 0
    2910:	20 2f       	mov	r18, r16
    2912:	3b 2d       	mov	r19, r11
    2914:	4f 2d       	mov	r20, r15
    2916:	5e 2d       	mov	r21, r14
    2918:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    291c:	9b 01       	movw	r18, r22
    291e:	ac 01       	movw	r20, r24
    2920:	c9 56       	subi	r28, 0x69	; 105
    2922:	df 4f       	sbci	r29, 0xFF	; 255
    2924:	68 81       	ld	r22, Y
    2926:	c7 59       	subi	r28, 0x97	; 151
    2928:	d0 40       	sbci	r29, 0x00	; 0
    292a:	c3 56       	subi	r28, 0x63	; 99
    292c:	df 4f       	sbci	r29, 0xFF	; 255
    292e:	78 81       	ld	r23, Y
    2930:	cd 59       	subi	r28, 0x9D	; 157
    2932:	d0 40       	sbci	r29, 0x00	; 0
    2934:	c2 56       	subi	r28, 0x62	; 98
    2936:	df 4f       	sbci	r29, 0xFF	; 255
    2938:	88 81       	ld	r24, Y
    293a:	ce 59       	subi	r28, 0x9E	; 158
    293c:	d0 40       	sbci	r29, 0x00	; 0
    293e:	c1 56       	subi	r28, 0x61	; 97
    2940:	df 4f       	sbci	r29, 0xFF	; 255
    2942:	98 81       	ld	r25, Y
    2944:	cf 59       	subi	r28, 0x9F	; 159
    2946:	d0 40       	sbci	r29, 0x00	; 0
    2948:	0e 94 3e 31 	call	0x627c	; 0x627c <__subsf3>
    294c:	c9 56       	subi	r28, 0x69	; 105
    294e:	df 4f       	sbci	r29, 0xFF	; 255
    2950:	68 83       	st	Y, r22
    2952:	79 83       	std	Y+1, r23	; 0x01
    2954:	8a 83       	std	Y+2, r24	; 0x02
    2956:	9b 83       	std	Y+3, r25	; 0x03
    2958:	c7 59       	subi	r28, 0x97	; 151
    295a:	d0 40       	sbci	r29, 0x00	; 0
    295c:	02 c0       	rjmp	.+4      	; 0x2962 <CalibrateChannel+0x59c>
    295e:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
    2962:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <CanRead_Ctrl>
    2966:	81 11       	cpse	r24, r1
    2968:	fa cf       	rjmp	.-12     	; 0x295e <CalibrateChannel+0x598>
    296a:	c4 56       	subi	r28, 0x64	; 100
    296c:	df 4f       	sbci	r29, 0xFF	; 255
    296e:	b8 81       	ld	r27, Y
    2970:	cc 59       	subi	r28, 0x9C	; 156
    2972:	d0 40       	sbci	r29, 0x00	; 0
    2974:	bf 93       	push	r27
    2976:	c5 56       	subi	r28, 0x65	; 101
    2978:	df 4f       	sbci	r29, 0xFF	; 255
    297a:	e8 81       	ld	r30, Y
    297c:	cb 59       	subi	r28, 0x9B	; 155
    297e:	d0 40       	sbci	r29, 0x00	; 0
    2980:	ef 93       	push	r30
    2982:	8e e2       	ldi	r24, 0x2E	; 46
    2984:	94 e2       	ldi	r25, 0x24	; 36
    2986:	9f 93       	push	r25
    2988:	8f 93       	push	r24
    298a:	af 92       	push	r10
    298c:	2f 92       	push	r2
    298e:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2992:	d6 01       	movw	r26, r12
    2994:	4d 90       	ld	r4, X+
    2996:	5d 90       	ld	r5, X+
    2998:	6d 90       	ld	r6, X+
    299a:	7c 90       	ld	r7, X
    299c:	f4 01       	movw	r30, r8
    299e:	ee 0f       	add	r30, r30
    29a0:	ff 1f       	adc	r31, r31
    29a2:	e8 0d       	add	r30, r8
    29a4:	f9 1d       	adc	r31, r9
    29a6:	ee 0f       	add	r30, r30
    29a8:	ff 1f       	adc	r31, r31
    29aa:	ee 0f       	add	r30, r30
    29ac:	ff 1f       	adc	r31, r31
    29ae:	ec 0f       	add	r30, r28
    29b0:	fd 1f       	adc	r31, r29
    29b2:	07 81       	ldd	r16, Z+7	; 0x07
    29b4:	10 85       	ldd	r17, Z+8	; 0x08
    29b6:	f8 01       	movw	r30, r16
    29b8:	01 90       	ld	r0, Z+
    29ba:	f0 81       	ld	r31, Z
    29bc:	e0 2d       	mov	r30, r0
    29be:	cd 56       	subi	r28, 0x6D	; 109
    29c0:	df 4f       	sbci	r29, 0xFF	; 255
    29c2:	e8 83       	st	Y, r30
    29c4:	f9 83       	std	Y+1, r31	; 0x01
    29c6:	c3 59       	subi	r28, 0x93	; 147
    29c8:	d0 40       	sbci	r29, 0x00	; 0
    29ca:	d8 01       	movw	r26, r16
    29cc:	ed 90       	ld	r14, X+
    29ce:	fc 90       	ld	r15, X
    29d0:	c9 56       	subi	r28, 0x69	; 105
    29d2:	df 4f       	sbci	r29, 0xFF	; 255
    29d4:	68 81       	ld	r22, Y
    29d6:	79 81       	ldd	r23, Y+1	; 0x01
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	9b 81       	ldd	r25, Y+3	; 0x03
    29dc:	c7 59       	subi	r28, 0x97	; 151
    29de:	d0 40       	sbci	r29, 0x00	; 0
    29e0:	0e 94 cb 33 	call	0x6796	; 0x6796 <round>
    29e4:	c9 56       	subi	r28, 0x69	; 105
    29e6:	df 4f       	sbci	r29, 0xFF	; 255
    29e8:	68 83       	st	Y, r22
    29ea:	79 83       	std	Y+1, r23	; 0x01
    29ec:	8a 83       	std	Y+2, r24	; 0x02
    29ee:	9b 83       	std	Y+3, r25	; 0x03
    29f0:	c7 59       	subi	r28, 0x97	; 151
    29f2:	d0 40       	sbci	r29, 0x00	; 0
    29f4:	7f 92       	push	r7
    29f6:	6f 92       	push	r6
    29f8:	5f 92       	push	r5
    29fa:	4f 92       	push	r4
    29fc:	ce 56       	subi	r28, 0x6E	; 110
    29fe:	df 4f       	sbci	r29, 0xFF	; 255
    2a00:	b8 81       	ld	r27, Y
    2a02:	c2 59       	subi	r28, 0x92	; 146
    2a04:	d0 40       	sbci	r29, 0x00	; 0
    2a06:	bf 93       	push	r27
    2a08:	cf 56       	subi	r28, 0x6F	; 111
    2a0a:	df 4f       	sbci	r29, 0xFF	; 255
    2a0c:	e8 81       	ld	r30, Y
    2a0e:	c1 59       	subi	r28, 0x91	; 145
    2a10:	d0 40       	sbci	r29, 0x00	; 0
    2a12:	ef 93       	push	r30
    2a14:	c0 57       	subi	r28, 0x70	; 112
    2a16:	df 4f       	sbci	r29, 0xFF	; 255
    2a18:	f8 81       	ld	r31, Y
    2a1a:	c0 59       	subi	r28, 0x90	; 144
    2a1c:	d0 40       	sbci	r29, 0x00	; 0
    2a1e:	ff 93       	push	r31
    2a20:	c1 57       	subi	r28, 0x71	; 113
    2a22:	df 4f       	sbci	r29, 0xFF	; 255
    2a24:	28 81       	ld	r18, Y
    2a26:	cf 58       	subi	r28, 0x8F	; 143
    2a28:	d0 40       	sbci	r29, 0x00	; 0
    2a2a:	2f 93       	push	r18
    2a2c:	cc 56       	subi	r28, 0x6C	; 108
    2a2e:	df 4f       	sbci	r29, 0xFF	; 255
    2a30:	38 81       	ld	r19, Y
    2a32:	c4 59       	subi	r28, 0x94	; 148
    2a34:	d0 40       	sbci	r29, 0x00	; 0
    2a36:	3f 93       	push	r19
    2a38:	cd 56       	subi	r28, 0x6D	; 109
    2a3a:	df 4f       	sbci	r29, 0xFF	; 255
    2a3c:	88 81       	ld	r24, Y
    2a3e:	c3 59       	subi	r28, 0x93	; 147
    2a40:	d0 40       	sbci	r29, 0x00	; 0
    2a42:	8f 93       	push	r24
    2a44:	b7 01       	movw	r22, r14
    2a46:	ff 0c       	add	r15, r15
    2a48:	88 0b       	sbc	r24, r24
    2a4a:	99 0b       	sbc	r25, r25
    2a4c:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    2a50:	c9 56       	subi	r28, 0x69	; 105
    2a52:	df 4f       	sbci	r29, 0xFF	; 255
    2a54:	28 81       	ld	r18, Y
    2a56:	39 81       	ldd	r19, Y+1	; 0x01
    2a58:	4a 81       	ldd	r20, Y+2	; 0x02
    2a5a:	5b 81       	ldd	r21, Y+3	; 0x03
    2a5c:	c7 59       	subi	r28, 0x97	; 151
    2a5e:	d0 40       	sbci	r29, 0x00	; 0
    2a60:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2a64:	9f 93       	push	r25
    2a66:	8f 93       	push	r24
    2a68:	7f 93       	push	r23
    2a6a:	6f 93       	push	r22
    2a6c:	82 e5       	ldi	r24, 0x52	; 82
    2a6e:	94 e2       	ldi	r25, 0x24	; 36
    2a70:	9f 93       	push	r25
    2a72:	8f 93       	push	r24
    2a74:	af 92       	push	r10
    2a76:	2f 92       	push	r2
    2a78:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <ReadByte_Ctrl>
    2a84:	98 2f       	mov	r25, r24
    2a86:	89 37       	cpi	r24, 0x79	; 121
    2a88:	09 f4       	brne	.+2      	; 0x2a8c <CalibrateChannel+0x6c6>
    2a8a:	61 c2       	rjmp	.+1218   	; 0x2f4e <CalibrateChannel+0xb88>
    2a8c:	89 35       	cpi	r24, 0x59	; 89
    2a8e:	09 f4       	brne	.+2      	; 0x2a92 <CalibrateChannel+0x6cc>
    2a90:	70 c2       	rjmp	.+1248   	; 0x2f72 <CalibrateChannel+0xbac>
    2a92:	8f 7d       	andi	r24, 0xDF	; 223
    2a94:	8e 34       	cpi	r24, 0x4E	; 78
    2a96:	09 f4       	brne	.+2      	; 0x2a9a <CalibrateChannel+0x6d4>
    2a98:	7e c2       	rjmp	.+1276   	; 0x2f96 <CalibrateChannel+0xbd0>
    2a9a:	9b 31       	cpi	r25, 0x1B	; 27
    2a9c:	89 f7       	brne	.-30     	; 0x2a80 <CalibrateChannel+0x6ba>
    2a9e:	7b c2       	rjmp	.+1270   	; 0x2f96 <CalibrateChannel+0xbd0>
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
    2aa6:	07 2e       	mov	r0, r23
    2aa8:	00 0c       	add	r0, r0
    2aaa:	88 0b       	sbc	r24, r24
    2aac:	99 0b       	sbc	r25, r25
    2aae:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    2ab2:	9b 01       	movw	r18, r22
    2ab4:	ac 01       	movw	r20, r24
    2ab6:	c9 56       	subi	r28, 0x69	; 105
    2ab8:	df 4f       	sbci	r29, 0xFF	; 255
    2aba:	68 81       	ld	r22, Y
    2abc:	79 81       	ldd	r23, Y+1	; 0x01
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac2:	c7 59       	subi	r28, 0x97	; 151
    2ac4:	d0 40       	sbci	r29, 0x00	; 0
    2ac6:	0e 94 3f 31 	call	0x627e	; 0x627e <__addsf3>
    2aca:	0e 94 22 32 	call	0x6444	; 0x6444 <__fixsfsi>
    2ace:	d8 01       	movw	r26, r16
    2ad0:	6d 93       	st	X+, r22
    2ad2:	7c 93       	st	X, r23
    2ad4:	c1 57       	subi	r28, 0x71	; 113
    2ad6:	df 4f       	sbci	r29, 0xFF	; 255
    2ad8:	88 81       	ld	r24, Y
    2ada:	99 81       	ldd	r25, Y+1	; 0x01
    2adc:	aa 81       	ldd	r26, Y+2	; 0x02
    2ade:	bb 81       	ldd	r27, Y+3	; 0x03
    2ae0:	cf 58       	subi	r28, 0x8F	; 143
    2ae2:	d0 40       	sbci	r29, 0x00	; 0
    2ae4:	f6 01       	movw	r30, r12
    2ae6:	80 83       	st	Z, r24
    2ae8:	91 83       	std	Z+1, r25	; 0x01
    2aea:	a2 83       	std	Z+2, r26	; 0x02
    2aec:	b3 83       	std	Z+3, r27	; 0x03
    2aee:	74 01       	movw	r14, r8
    2af0:	ee 0c       	add	r14, r14
    2af2:	ff 1c       	adc	r15, r15
    2af4:	f7 01       	movw	r30, r14
    2af6:	e8 0d       	add	r30, r8
    2af8:	f9 1d       	adc	r31, r9
    2afa:	ee 0f       	add	r30, r30
    2afc:	ff 1f       	adc	r31, r31
    2afe:	ee 0f       	add	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	21 e0       	ldi	r18, 0x01	; 1
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	2c 0f       	add	r18, r28
    2b08:	3d 1f       	adc	r19, r29
    2b0a:	e2 0f       	add	r30, r18
    2b0c:	f3 1f       	adc	r31, r19
    2b0e:	62 84       	ldd	r6, Z+10	; 0x0a
    2b10:	73 84       	ldd	r7, Z+11	; 0x0b
    2b12:	42 e0       	ldi	r20, 0x02	; 2
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	b3 01       	movw	r22, r6
    2b18:	c8 01       	movw	r24, r16
    2b1a:	0e 94 b6 30 	call	0x616c	; 0x616c <UpdateEEPROM>
    2b1e:	f7 01       	movw	r30, r14
    2b20:	e8 0d       	add	r30, r8
    2b22:	f9 1d       	adc	r31, r9
    2b24:	ee 0f       	add	r30, r30
    2b26:	ff 1f       	adc	r31, r31
    2b28:	ee 0f       	add	r30, r30
    2b2a:	ff 1f       	adc	r31, r31
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	8c 0f       	add	r24, r28
    2b32:	9d 1f       	adc	r25, r29
    2b34:	e8 0f       	add	r30, r24
    2b36:	f9 1f       	adc	r31, r25
    2b38:	e0 84       	ldd	r14, Z+8	; 0x08
    2b3a:	f1 84       	ldd	r15, Z+9	; 0x09
    2b3c:	44 e0       	ldi	r20, 0x04	; 4
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	b7 01       	movw	r22, r14
    2b42:	c6 01       	movw	r24, r12
    2b44:	0e 94 b6 30 	call	0x616c	; 0x616c <UpdateEEPROM>
    2b48:	f6 01       	movw	r30, r12
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	a2 81       	ldd	r26, Z+2	; 0x02
    2b50:	b3 81       	ldd	r27, Z+3	; 0x03
    2b52:	f8 01       	movw	r30, r16
    2b54:	20 81       	ld	r18, Z
    2b56:	31 81       	ldd	r19, Z+1	; 0x01
    2b58:	bf 93       	push	r27
    2b5a:	af 93       	push	r26
    2b5c:	9f 93       	push	r25
    2b5e:	8f 93       	push	r24
    2b60:	3f 93       	push	r19
    2b62:	2f 93       	push	r18
    2b64:	89 e9       	ldi	r24, 0x99	; 153
    2b66:	94 e2       	ldi	r25, 0x24	; 36
    2b68:	9f 93       	push	r25
    2b6a:	8f 93       	push	r24
    2b6c:	af 92       	push	r10
    2b6e:	2f 92       	push	r2
    2b70:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2b74:	42 e0       	ldi	r20, 0x02	; 2
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	b3 01       	movw	r22, r6
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	87 57       	subi	r24, 0x77	; 119
    2b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b80:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2b84:	44 e0       	ldi	r20, 0x04	; 4
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	b7 01       	movw	r22, r14
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	85 57       	subi	r24, 0x75	; 117
    2b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b90:	0e 94 55 30 	call	0x60aa	; 0x60aa <TryReadEEPROM>
    2b94:	c2 57       	subi	r28, 0x72	; 114
    2b96:	df 4f       	sbci	r29, 0xFF	; 255
    2b98:	88 81       	ld	r24, Y
    2b9a:	ce 58       	subi	r28, 0x8E	; 142
    2b9c:	d0 40       	sbci	r29, 0x00	; 0
    2b9e:	8f 93       	push	r24
    2ba0:	c3 57       	subi	r28, 0x73	; 115
    2ba2:	df 4f       	sbci	r29, 0xFF	; 255
    2ba4:	88 81       	ld	r24, Y
    2ba6:	cd 58       	subi	r28, 0x8D	; 141
    2ba8:	d0 40       	sbci	r29, 0x00	; 0
    2baa:	8f 93       	push	r24
    2bac:	c4 57       	subi	r28, 0x74	; 116
    2bae:	df 4f       	sbci	r29, 0xFF	; 255
    2bb0:	88 81       	ld	r24, Y
    2bb2:	cc 58       	subi	r28, 0x8C	; 140
    2bb4:	d0 40       	sbci	r29, 0x00	; 0
    2bb6:	8f 93       	push	r24
    2bb8:	c5 57       	subi	r28, 0x75	; 117
    2bba:	df 4f       	sbci	r29, 0xFF	; 255
    2bbc:	88 81       	ld	r24, Y
    2bbe:	cb 58       	subi	r28, 0x8B	; 139
    2bc0:	d0 40       	sbci	r29, 0x00	; 0
    2bc2:	8f 93       	push	r24
    2bc4:	c6 57       	subi	r28, 0x76	; 118
    2bc6:	df 4f       	sbci	r29, 0xFF	; 255
    2bc8:	88 81       	ld	r24, Y
    2bca:	ca 58       	subi	r28, 0x8A	; 138
    2bcc:	d0 40       	sbci	r29, 0x00	; 0
    2bce:	8f 93       	push	r24
    2bd0:	c7 57       	subi	r28, 0x77	; 119
    2bd2:	df 4f       	sbci	r29, 0xFF	; 255
    2bd4:	88 81       	ld	r24, Y
    2bd6:	c9 58       	subi	r28, 0x89	; 137
    2bd8:	d0 40       	sbci	r29, 0x00	; 0
    2bda:	8f 93       	push	r24
    2bdc:	8f eb       	ldi	r24, 0xBF	; 191
    2bde:	94 e2       	ldi	r25, 0x24	; 36
    2be0:	9f 93       	push	r25
    2be2:	8f 93       	push	r24
    2be4:	af 92       	push	r10
    2be6:	2f 92       	push	r2
    2be8:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2bec:	22 2d       	mov	r18, r2
    2bee:	3a 2d       	mov	r19, r10
    2bf0:	4c e2       	ldi	r20, 0x2C	; 44
    2bf2:	50 e0       	ldi	r21, 0x00	; 0
    2bf4:	61 e0       	ldi	r22, 0x01	; 1
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	85 ee       	ldi	r24, 0xE5	; 229
    2bfa:	94 e2       	ldi	r25, 0x24	; 36
    2bfc:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	de bf       	out	0x3e, r29	; 62
    2c04:	dc c1       	rjmp	.+952    	; 0x2fbe <CalibrateChannel+0xbf8>
    2c06:	8b 2c       	mov	r8, r11
    2c08:	0b 2c       	mov	r0, r11
    2c0a:	00 0c       	add	r0, r0
    2c0c:	99 08       	sbc	r9, r9
    2c0e:	f4 01       	movw	r30, r8
    2c10:	ee 0f       	add	r30, r30
    2c12:	ff 1f       	adc	r31, r31
    2c14:	e8 0d       	add	r30, r8
    2c16:	f9 1d       	adc	r31, r9
    2c18:	ee 0f       	add	r30, r30
    2c1a:	ff 1f       	adc	r31, r31
    2c1c:	ee 0f       	add	r30, r30
    2c1e:	ff 1f       	adc	r31, r31
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	8c 0f       	add	r24, r28
    2c26:	9d 1f       	adc	r25, r29
    2c28:	e8 0f       	add	r30, r24
    2c2a:	f9 1f       	adc	r31, r25
    2c2c:	90 81       	ld	r25, Z
    2c2e:	c5 56       	subi	r28, 0x65	; 101
    2c30:	df 4f       	sbci	r29, 0xFF	; 255
    2c32:	98 83       	st	Y, r25
    2c34:	cb 59       	subi	r28, 0x9B	; 155
    2c36:	d0 40       	sbci	r29, 0x00	; 0
    2c38:	a1 81       	ldd	r26, Z+1	; 0x01
    2c3a:	c4 56       	subi	r28, 0x64	; 100
    2c3c:	df 4f       	sbci	r29, 0xFF	; 255
    2c3e:	a8 83       	st	Y, r26
    2c40:	cc 59       	subi	r28, 0x9C	; 156
    2c42:	d0 40       	sbci	r29, 0x00	; 0
    2c44:	af 93       	push	r26
    2c46:	9f 93       	push	r25
    2c48:	82 e1       	ldi	r24, 0x12	; 18
    2c4a:	95 e2       	ldi	r25, 0x25	; 37
    2c4c:	9f 93       	push	r25
    2c4e:	8f 93       	push	r24
    2c50:	af 92       	push	r10
    2c52:	2f 92       	push	r2
    2c54:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2c58:	1f 92       	push	r1
    2c5a:	85 e0       	ldi	r24, 0x05	; 5
    2c5c:	8f 93       	push	r24
    2c5e:	8b e2       	ldi	r24, 0x2B	; 43
    2c60:	95 e2       	ldi	r25, 0x25	; 37
    2c62:	9f 93       	push	r25
    2c64:	8f 93       	push	r24
    2c66:	af 92       	push	r10
    2c68:	2f 92       	push	r2
    2c6a:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2c6e:	cd bf       	out	0x3d, r28	; 61
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	31 2c       	mov	r3, r1
    2c74:	fb 2d       	mov	r31, r11
    2c76:	f1 70       	andi	r31, 0x01	; 1
    2c78:	bf 2e       	mov	r11, r31
    2c7a:	c4 01       	movw	r24, r8
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	88 0d       	add	r24, r8
    2c82:	99 1d       	adc	r25, r9
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	21 e0       	ldi	r18, 0x01	; 1
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	2c 0f       	add	r18, r28
    2c92:	3d 1f       	adc	r19, r29
    2c94:	82 0f       	add	r24, r18
    2c96:	93 1f       	adc	r25, r19
    2c98:	dc 01       	movw	r26, r24
    2c9a:	12 96       	adiw	r26, 0x02	; 2
    2c9c:	cd 56       	subi	r28, 0x6D	; 109
    2c9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ca0:	a8 83       	st	Y, r26
    2ca2:	b9 83       	std	Y+1, r27	; 0x01
    2ca4:	c3 59       	subi	r28, 0x93	; 147
    2ca6:	d0 40       	sbci	r29, 0x00	; 0
    2ca8:	fc 01       	movw	r30, r24
    2caa:	34 96       	adiw	r30, 0x04	; 4
    2cac:	c9 56       	subi	r28, 0x69	; 105
    2cae:	df 4f       	sbci	r29, 0xFF	; 255
    2cb0:	e8 83       	st	Y, r30
    2cb2:	f9 83       	std	Y+1, r31	; 0x01
    2cb4:	c7 59       	subi	r28, 0x97	; 151
    2cb6:	d0 40       	sbci	r29, 0x00	; 0
    2cb8:	59 cc       	rjmp	.-1870   	; 0x256c <CalibrateChannel+0x1a6>
    2cba:	c3 01       	movw	r24, r6
    2cbc:	b2 01       	movw	r22, r4
    2cbe:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a e7       	ldi	r20, 0x7A	; 122
    2cc8:	54 e4       	ldi	r21, 0x44	; 68
    2cca:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    2cce:	e6 2e       	mov	r14, r22
    2cd0:	f7 2e       	mov	r15, r23
    2cd2:	08 2f       	mov	r16, r24
    2cd4:	19 2f       	mov	r17, r25
    2cd6:	f6 01       	movw	r30, r12
    2cd8:	ee 0f       	add	r30, r30
    2cda:	ff 1f       	adc	r31, r31
    2cdc:	ee 0f       	add	r30, r30
    2cde:	ff 1f       	adc	r31, r31
    2ce0:	25 e7       	ldi	r18, 0x75	; 117
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	2c 0f       	add	r18, r28
    2ce6:	3d 1f       	adc	r19, r29
    2ce8:	e2 0f       	add	r30, r18
    2cea:	f3 1f       	adc	r31, r19
    2cec:	86 2f       	mov	r24, r22
    2cee:	9f 2d       	mov	r25, r15
    2cf0:	a0 2f       	mov	r26, r16
    2cf2:	b1 2f       	mov	r27, r17
    2cf4:	80 83       	st	Z, r24
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	a2 83       	std	Z+2, r26	; 0x02
    2cfa:	b3 83       	std	Z+3, r27	; 0x03
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	80 93 67 29 	sts	0x2967, r24	; 0x802967 <sTakeSnapshot>
    2d02:	8b cc       	rjmp	.-1770   	; 0x261a <CalibrateChannel+0x254>
    2d04:	1f 92       	push	r1
    2d06:	89 e5       	ldi	r24, 0x59	; 89
    2d08:	8f 93       	push	r24
    2d0a:	a9 e5       	ldi	r26, 0x59	; 89
    2d0c:	b5 e2       	ldi	r27, 0x25	; 37
    2d0e:	bf 93       	push	r27
    2d10:	af 93       	push	r26
    2d12:	af 92       	push	r10
    2d14:	2f 92       	push	r2
    2d16:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	f1 cc       	rjmp	.-1566   	; 0x270a <CalibrateChannel+0x344>
    2d28:	29 2f       	mov	r18, r25
    2d2a:	09 2e       	mov	r0, r25
    2d2c:	00 0c       	add	r0, r0
    2d2e:	33 0b       	sbc	r19, r19
    2d30:	3f 93       	push	r19
    2d32:	9f 93       	push	r25
    2d34:	a9 e5       	ldi	r26, 0x59	; 89
    2d36:	b5 e2       	ldi	r27, 0x25	; 37
    2d38:	bf 93       	push	r27
    2d3a:	af 93       	push	r26
    2d3c:	af 92       	push	r10
    2d3e:	2f 92       	push	r2
    2d40:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2d44:	0f 90       	pop	r0
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	f4 e0       	ldi	r31, 0x04	; 4
    2d52:	f3 15       	cp	r31, r3
    2d54:	0c f0       	brlt	.+2      	; 0x2d58 <CalibrateChannel+0x992>
    2d56:	0a cc       	rjmp	.-2028   	; 0x256c <CalibrateChannel+0x1a6>
    2d58:	f6 cc       	rjmp	.-1556   	; 0x2746 <CalibrateChannel+0x380>
    2d5a:	1f 92       	push	r1
    2d5c:	8b e1       	ldi	r24, 0x1B	; 27
    2d5e:	8f 93       	push	r24
    2d60:	89 e5       	ldi	r24, 0x59	; 89
    2d62:	95 e2       	ldi	r25, 0x25	; 37
    2d64:	9f 93       	push	r25
    2d66:	8f 93       	push	r24
    2d68:	af 92       	push	r10
    2d6a:	2f 92       	push	r2
    2d6c:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	e4 cc       	rjmp	.-1592   	; 0x2746 <CalibrateChannel+0x380>
    2d7e:	1f 92       	push	r1
    2d80:	89 e7       	ldi	r24, 0x79	; 121
    2d82:	8f 93       	push	r24
    2d84:	a9 e5       	ldi	r26, 0x59	; 89
    2d86:	b5 e2       	ldi	r27, 0x25	; 37
    2d88:	bf 93       	push	r27
    2d8a:	af 93       	push	r26
    2d8c:	af 92       	push	r10
    2d8e:	2f 92       	push	r2
    2d90:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	b4 cc       	rjmp	.-1688   	; 0x270a <CalibrateChannel+0x344>
    2da2:	1f 92       	push	r1
    2da4:	89 e7       	ldi	r24, 0x79	; 121
    2da6:	8f 93       	push	r24
    2da8:	a9 e5       	ldi	r26, 0x59	; 89
    2daa:	b5 e2       	ldi	r27, 0x25	; 37
    2dac:	bf 93       	push	r27
    2dae:	af 93       	push	r26
    2db0:	af 92       	push	r10
    2db2:	2f 92       	push	r2
    2db4:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	d3 cb       	rjmp	.-2138   	; 0x256c <CalibrateChannel+0x1a6>
    2dc6:	1f 92       	push	r1
    2dc8:	89 e5       	ldi	r24, 0x59	; 89
    2dca:	8f 93       	push	r24
    2dcc:	a9 e5       	ldi	r26, 0x59	; 89
    2dce:	b5 e2       	ldi	r27, 0x25	; 37
    2dd0:	bf 93       	push	r27
    2dd2:	af 93       	push	r26
    2dd4:	af 92       	push	r10
    2dd6:	2f 92       	push	r2
    2dd8:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2ddc:	0f 90       	pop	r0
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	c1 cb       	rjmp	.-2174   	; 0x256c <CalibrateChannel+0x1a6>
    2dea:	29 2f       	mov	r18, r25
    2dec:	09 2e       	mov	r0, r25
    2dee:	00 0c       	add	r0, r0
    2df0:	33 0b       	sbc	r19, r19
    2df2:	3f 93       	push	r19
    2df4:	9f 93       	push	r25
    2df6:	89 e5       	ldi	r24, 0x59	; 89
    2df8:	95 e2       	ldi	r25, 0x25	; 37
    2dfa:	9f 93       	push	r25
    2dfc:	8f 93       	push	r24
    2dfe:	af 92       	push	r10
    2e00:	2f 92       	push	r2
    2e02:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	99 cc       	rjmp	.-1742   	; 0x2746 <CalibrateChannel+0x380>
    2e14:	63 2d       	mov	r22, r3
    2e16:	03 2c       	mov	r0, r3
    2e18:	00 0c       	add	r0, r0
    2e1a:	77 0b       	sbc	r23, r23
    2e1c:	88 0b       	sbc	r24, r24
    2e1e:	99 0b       	sbc	r25, r25
    2e20:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    2e24:	c9 56       	subi	r28, 0x69	; 105
    2e26:	df 4f       	sbci	r29, 0xFF	; 255
    2e28:	68 83       	st	Y, r22
    2e2a:	79 83       	std	Y+1, r23	; 0x01
    2e2c:	8a 83       	std	Y+2, r24	; 0x02
    2e2e:	9b 83       	std	Y+3, r25	; 0x03
    2e30:	c7 59       	subi	r28, 0x97	; 151
    2e32:	d0 40       	sbci	r29, 0x00	; 0
    2e34:	9b 01       	movw	r18, r22
    2e36:	ac 01       	movw	r20, r24
    2e38:	c1 57       	subi	r28, 0x71	; 113
    2e3a:	df 4f       	sbci	r29, 0xFF	; 255
    2e3c:	68 81       	ld	r22, Y
    2e3e:	79 81       	ldd	r23, Y+1	; 0x01
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	9b 81       	ldd	r25, Y+3	; 0x03
    2e44:	cf 58       	subi	r28, 0x8F	; 143
    2e46:	d0 40       	sbci	r29, 0x00	; 0
    2e48:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    2e4c:	06 2f       	mov	r16, r22
    2e4e:	b7 2e       	mov	r11, r23
    2e50:	f8 2e       	mov	r15, r24
    2e52:	e9 2e       	mov	r14, r25
    2e54:	c9 56       	subi	r28, 0x69	; 105
    2e56:	df 4f       	sbci	r29, 0xFF	; 255
    2e58:	28 81       	ld	r18, Y
    2e5a:	39 81       	ldd	r19, Y+1	; 0x01
    2e5c:	4a 81       	ldd	r20, Y+2	; 0x02
    2e5e:	5b 81       	ldd	r21, Y+3	; 0x03
    2e60:	c7 59       	subi	r28, 0x97	; 151
    2e62:	d0 40       	sbci	r29, 0x00	; 0
    2e64:	cd 56       	subi	r28, 0x6D	; 109
    2e66:	df 4f       	sbci	r29, 0xFF	; 255
    2e68:	68 81       	ld	r22, Y
    2e6a:	79 81       	ldd	r23, Y+1	; 0x01
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e70:	c3 59       	subi	r28, 0x93	; 147
    2e72:	d0 40       	sbci	r29, 0x00	; 0
    2e74:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    2e78:	c9 56       	subi	r28, 0x69	; 105
    2e7a:	df 4f       	sbci	r29, 0xFF	; 255
    2e7c:	68 83       	st	Y, r22
    2e7e:	c7 59       	subi	r28, 0x97	; 151
    2e80:	d0 40       	sbci	r29, 0x00	; 0
    2e82:	c3 56       	subi	r28, 0x63	; 99
    2e84:	df 4f       	sbci	r29, 0xFF	; 255
    2e86:	78 83       	st	Y, r23
    2e88:	cd 59       	subi	r28, 0x9D	; 157
    2e8a:	d0 40       	sbci	r29, 0x00	; 0
    2e8c:	c2 56       	subi	r28, 0x62	; 98
    2e8e:	df 4f       	sbci	r29, 0xFF	; 255
    2e90:	88 83       	st	Y, r24
    2e92:	ce 59       	subi	r28, 0x9E	; 158
    2e94:	d0 40       	sbci	r29, 0x00	; 0
    2e96:	c1 56       	subi	r28, 0x61	; 97
    2e98:	df 4f       	sbci	r29, 0xFF	; 255
    2e9a:	98 83       	st	Y, r25
    2e9c:	cf 59       	subi	r28, 0x9F	; 159
    2e9e:	d0 40       	sbci	r29, 0x00	; 0
    2ea0:	cd 56       	subi	r28, 0x6D	; 109
    2ea2:	df 4f       	sbci	r29, 0xFF	; 255
    2ea4:	18 82       	st	Y, r1
    2ea6:	19 82       	std	Y+1, r1	; 0x01
    2ea8:	1a 82       	std	Y+2, r1	; 0x02
    2eaa:	1b 82       	std	Y+3, r1	; 0x03
    2eac:	c3 59       	subi	r28, 0x93	; 147
    2eae:	d0 40       	sbci	r29, 0x00	; 0
    2eb0:	c1 57       	subi	r28, 0x71	; 113
    2eb2:	df 4f       	sbci	r29, 0xFF	; 255
    2eb4:	18 82       	st	Y, r1
    2eb6:	19 82       	std	Y+1, r1	; 0x01
    2eb8:	1a 82       	std	Y+2, r1	; 0x02
    2eba:	1b 82       	std	Y+3, r1	; 0x03
    2ebc:	cf 58       	subi	r28, 0x8F	; 143
    2ebe:	d0 40       	sbci	r29, 0x00	; 0
    2ec0:	10 e0       	ldi	r17, 0x00	; 0
    2ec2:	c0 56       	subi	r28, 0x60	; 96
    2ec4:	df 4f       	sbci	r29, 0xFF	; 255
    2ec6:	88 82       	st	Y, r8
    2ec8:	99 82       	std	Y+1, r9	; 0x01
    2eca:	c0 5a       	subi	r28, 0xA0	; 160
    2ecc:	d0 40       	sbci	r29, 0x00	; 0
    2ece:	43 01       	movw	r8, r6
    2ed0:	ce 55       	subi	r28, 0x5E	; 94
    2ed2:	df 4f       	sbci	r29, 0xFF	; 255
    2ed4:	c8 82       	st	Y, r12
    2ed6:	d9 82       	std	Y+1, r13	; 0x01
    2ed8:	c2 5a       	subi	r28, 0xA2	; 162
    2eda:	d0 40       	sbci	r29, 0x00	; 0
    2edc:	62 01       	movw	r12, r4
    2ede:	93 cc       	rjmp	.-1754   	; 0x2806 <CalibrateChannel+0x440>
    2ee0:	63 2d       	mov	r22, r3
    2ee2:	33 0c       	add	r3, r3
    2ee4:	77 0b       	sbc	r23, r23
    2ee6:	88 0b       	sbc	r24, r24
    2ee8:	99 0b       	sbc	r25, r25
    2eea:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    2eee:	9b 01       	movw	r18, r22
    2ef0:	ac 01       	movw	r20, r24
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	70 e0       	ldi	r23, 0x00	; 0
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    2efc:	06 2f       	mov	r16, r22
    2efe:	b7 2e       	mov	r11, r23
    2f00:	f8 2e       	mov	r15, r24
    2f02:	e9 2e       	mov	r14, r25
    2f04:	c9 56       	subi	r28, 0x69	; 105
    2f06:	df 4f       	sbci	r29, 0xFF	; 255
    2f08:	68 83       	st	Y, r22
    2f0a:	c7 59       	subi	r28, 0x97	; 151
    2f0c:	d0 40       	sbci	r29, 0x00	; 0
    2f0e:	c3 56       	subi	r28, 0x63	; 99
    2f10:	df 4f       	sbci	r29, 0xFF	; 255
    2f12:	78 83       	st	Y, r23
    2f14:	cd 59       	subi	r28, 0x9D	; 157
    2f16:	d0 40       	sbci	r29, 0x00	; 0
    2f18:	c2 56       	subi	r28, 0x62	; 98
    2f1a:	df 4f       	sbci	r29, 0xFF	; 255
    2f1c:	88 83       	st	Y, r24
    2f1e:	ce 59       	subi	r28, 0x9E	; 158
    2f20:	d0 40       	sbci	r29, 0x00	; 0
    2f22:	c1 56       	subi	r28, 0x61	; 97
    2f24:	df 4f       	sbci	r29, 0xFF	; 255
    2f26:	98 83       	st	Y, r25
    2f28:	cf 59       	subi	r28, 0x9F	; 159
    2f2a:	d0 40       	sbci	r29, 0x00	; 0
    2f2c:	cd 56       	subi	r28, 0x6D	; 109
    2f2e:	df 4f       	sbci	r29, 0xFF	; 255
    2f30:	18 82       	st	Y, r1
    2f32:	19 82       	std	Y+1, r1	; 0x01
    2f34:	1a 82       	std	Y+2, r1	; 0x02
    2f36:	1b 82       	std	Y+3, r1	; 0x03
    2f38:	c3 59       	subi	r28, 0x93	; 147
    2f3a:	d0 40       	sbci	r29, 0x00	; 0
    2f3c:	c1 57       	subi	r28, 0x71	; 113
    2f3e:	df 4f       	sbci	r29, 0xFF	; 255
    2f40:	18 82       	st	Y, r1
    2f42:	19 82       	std	Y+1, r1	; 0x01
    2f44:	1a 82       	std	Y+2, r1	; 0x02
    2f46:	1b 82       	std	Y+3, r1	; 0x03
    2f48:	cf 58       	subi	r28, 0x8F	; 143
    2f4a:	d0 40       	sbci	r29, 0x00	; 0
    2f4c:	c7 cc       	rjmp	.-1650   	; 0x28dc <CalibrateChannel+0x516>
    2f4e:	1f 92       	push	r1
    2f50:	89 e7       	ldi	r24, 0x79	; 121
    2f52:	8f 93       	push	r24
    2f54:	89 e5       	ldi	r24, 0x59	; 89
    2f56:	95 e2       	ldi	r25, 0x25	; 37
    2f58:	9f 93       	push	r25
    2f5a:	8f 93       	push	r24
    2f5c:	af 92       	push	r10
    2f5e:	2f 92       	push	r2
    2f60:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	97 cd       	rjmp	.-1234   	; 0x2aa0 <CalibrateChannel+0x6da>
    2f72:	1f 92       	push	r1
    2f74:	89 e5       	ldi	r24, 0x59	; 89
    2f76:	8f 93       	push	r24
    2f78:	89 e5       	ldi	r24, 0x59	; 89
    2f7a:	95 e2       	ldi	r25, 0x25	; 37
    2f7c:	9f 93       	push	r25
    2f7e:	8f 93       	push	r24
    2f80:	af 92       	push	r10
    2f82:	2f 92       	push	r2
    2f84:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	85 cd       	rjmp	.-1270   	; 0x2aa0 <CalibrateChannel+0x6da>
    2f96:	29 2f       	mov	r18, r25
    2f98:	09 2e       	mov	r0, r25
    2f9a:	00 0c       	add	r0, r0
    2f9c:	33 0b       	sbc	r19, r19
    2f9e:	3f 93       	push	r19
    2fa0:	9f 93       	push	r25
    2fa2:	89 e5       	ldi	r24, 0x59	; 89
    2fa4:	95 e2       	ldi	r25, 0x25	; 37
    2fa6:	9f 93       	push	r25
    2fa8:	8f 93       	push	r24
    2faa:	af 92       	push	r10
    2fac:	2f 92       	push	r2
    2fae:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	0f 90       	pop	r0
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	cd 55       	subi	r28, 0x5D	; 93
    2fc0:	df 4f       	sbci	r29, 0xFF	; 255
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ff 90       	pop	r15
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	bf 90       	pop	r11
    2fd8:	af 90       	pop	r10
    2fda:	9f 90       	pop	r9
    2fdc:	8f 90       	pop	r8
    2fde:	7f 90       	pop	r7
    2fe0:	6f 90       	pop	r6
    2fe2:	5f 90       	pop	r5
    2fe4:	4f 90       	pop	r4
    2fe6:	3f 90       	pop	r3
    2fe8:	2f 90       	pop	r2
    2fea:	08 95       	ret

00002fec <TakeSnapshot>:
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	80 93 67 29 	sts	0x2967, r24	; 0x802967 <sTakeSnapshot>
    2ff2:	08 95       	ret

00002ff4 <GetSessionCycleCount>:


uint32_t GetSessionCycleCount(void) {
    2ff4:	0f 93       	push	r16
    2ff6:	1f 93       	push	r17
	
	uint32_t res, prev;
	
	res = sSessionCycleCount;
    2ff8:	00 91 e5 28 	lds	r16, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    2ffc:	10 91 e6 28 	lds	r17, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    3000:	20 91 e7 28 	lds	r18, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    3004:	30 91 e8 28 	lds	r19, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    3008:	02 c0       	rjmp	.+4      	; 0x300e <GetSessionCycleCount+0x1a>
	
	do {
		prev = res;
		res = sSessionCycleCount;
    300a:	8b 01       	movw	r16, r22
    300c:	9c 01       	movw	r18, r24
    300e:	60 91 e5 28 	lds	r22, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    3012:	70 91 e6 28 	lds	r23, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    3016:	80 91 e7 28 	lds	r24, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    301a:	90 91 e8 28 	lds	r25, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
	} while (res != prev);
    301e:	06 17       	cp	r16, r22
    3020:	17 07       	cpc	r17, r23
    3022:	28 07       	cpc	r18, r24
    3024:	39 07       	cpc	r19, r25
    3026:	89 f7       	brne	.-30     	; 0x300a <GetSessionCycleCount+0x16>
	
	return res;
	
} /* GetSessionCycleCount */
    3028:	1f 91       	pop	r17
    302a:	0f 91       	pop	r16
    302c:	08 95       	ret

0000302e <PrintCSV_H2A>:

	return res;
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
    302e:	2f 92       	push	r2
    3030:	3f 92       	push	r3
    3032:	4f 92       	push	r4
    3034:	5f 92       	push	r5
    3036:	6f 92       	push	r6
    3038:	7f 92       	push	r7
    303a:	8f 92       	push	r8
    303c:	9f 92       	push	r9
    303e:	af 92       	push	r10
    3040:	bf 92       	push	r11
    3042:	cf 92       	push	r12
    3044:	df 92       	push	r13
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	c1 5d       	subi	r28, 0xD1	; 209
    3058:	d1 09       	sbc	r29, r1
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	ca 54       	subi	r28, 0x4A	; 74
    3060:	df 4f       	sbci	r29, 0xFF	; 255
    3062:	88 83       	st	Y, r24
    3064:	c6 5b       	subi	r28, 0xB6	; 182
    3066:	d0 40       	sbci	r29, 0x00	; 0
    3068:	c9 54       	subi	r28, 0x49	; 73
    306a:	df 4f       	sbci	r29, 0xFF	; 255
    306c:	98 83       	st	Y, r25
    306e:	c7 5b       	subi	r28, 0xB7	; 183
    3070:	d0 40       	sbci	r29, 0x00	; 0
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    3072:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    3076:	81 11       	cpse	r24, r1
    3078:	fc cf       	rjmp	.-8      	; 0x3072 <PrintCSV_H2A+0x44>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
    307a:	60 91 d8 29 	lds	r22, 0x29D8	; 0x8029d8 <sSensorDataSnapshot+0x6c>
    307e:	70 91 d9 29 	lds	r23, 0x29D9	; 0x8029d9 <sSensorDataSnapshot+0x6d>
    3082:	80 91 da 29 	lds	r24, 0x29DA	; 0x8029da <sSensorDataSnapshot+0x6e>
    3086:	90 91 db 29 	lds	r25, 0x29DB	; 0x8029db <sSensorDataSnapshot+0x6f>
    308a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e4       	ldi	r19, 0x40	; 64
    3092:	4c e9       	ldi	r20, 0x9C	; 156
    3094:	55 e4       	ldi	r21, 0x45	; 69
    3096:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    309a:	c8 54       	subi	r28, 0x48	; 72
    309c:	df 4f       	sbci	r29, 0xFF	; 255
    309e:	68 83       	st	Y, r22
    30a0:	c8 5b       	subi	r28, 0xB8	; 184
    30a2:	d0 40       	sbci	r29, 0x00	; 0
    30a4:	c7 54       	subi	r28, 0x47	; 71
    30a6:	df 4f       	sbci	r29, 0xFF	; 255
    30a8:	78 83       	st	Y, r23
    30aa:	c9 5b       	subi	r28, 0xB9	; 185
    30ac:	d0 40       	sbci	r29, 0x00	; 0
    30ae:	c6 54       	subi	r28, 0x46	; 70
    30b0:	df 4f       	sbci	r29, 0xFF	; 255
    30b2:	88 83       	st	Y, r24
    30b4:	ca 5b       	subi	r28, 0xBA	; 186
    30b6:	d0 40       	sbci	r29, 0x00	; 0
    30b8:	c5 54       	subi	r28, 0x45	; 69
    30ba:	df 4f       	sbci	r29, 0xFF	; 255
    30bc:	98 83       	st	Y, r25
    30be:	cb 5b       	subi	r28, 0xBB	; 187
    30c0:	d0 40       	sbci	r29, 0x00	; 0
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
    30c2:	20 91 cf 29 	lds	r18, 0x29CF	; 0x8029cf <sSensorDataSnapshot+0x63>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    30c6:	91 e0       	ldi	r25, 0x01	; 1
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	21 11       	cpse	r18, r1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	c0 57       	subi	r28, 0x70	; 112
    30d0:	df 4f       	sbci	r29, 0xFF	; 255
    30d2:	98 83       	st	Y, r25
    30d4:	c0 59       	subi	r28, 0x90	; 144
    30d6:	d0 40       	sbci	r29, 0x00	; 0
    30d8:	cf 56       	subi	r28, 0x6F	; 111
    30da:	df 4f       	sbci	r29, 0xFF	; 255
    30dc:	88 83       	st	Y, r24
    30de:	c1 59       	subi	r28, 0x91	; 145
    30e0:	d0 40       	sbci	r29, 0x00	; 0
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    30e2:	80 91 e0 29 	lds	r24, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x74>
    30e6:	90 91 e1 29 	lds	r25, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x75>
    30ea:	a0 91 e2 29 	lds	r26, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x76>
    30ee:	b0 91 e3 29 	lds	r27, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x77>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    30f2:	89 2b       	or	r24, r25
    30f4:	8a 2b       	or	r24, r26
    30f6:	8b 2b       	or	r24, r27
    30f8:	69 f1       	breq	.+90     	; 0x3154 <PrintCSV_H2A+0x126>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    30fa:	60 91 e0 29 	lds	r22, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x74>
    30fe:	70 91 e1 29 	lds	r23, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x75>
    3102:	80 91 e2 29 	lds	r24, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x76>
    3106:	90 91 e3 29 	lds	r25, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x77>
    310a:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e8       	ldi	r20, 0x80	; 128
    3114:	57 e3       	ldi	r21, 0x37	; 55
    3116:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    311a:	9b 01       	movw	r18, r22
    311c:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	70 e8       	ldi	r23, 0x80	; 128
    3122:	8b e8       	ldi	r24, 0x8B	; 139
    3124:	94 e4       	ldi	r25, 0x44	; 68
    3126:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    312a:	c4 53       	subi	r28, 0x34	; 52
    312c:	df 4f       	sbci	r29, 0xFF	; 255
    312e:	68 83       	st	Y, r22
    3130:	cc 5c       	subi	r28, 0xCC	; 204
    3132:	d0 40       	sbci	r29, 0x00	; 0
    3134:	c3 53       	subi	r28, 0x33	; 51
    3136:	df 4f       	sbci	r29, 0xFF	; 255
    3138:	78 83       	st	Y, r23
    313a:	cd 5c       	subi	r28, 0xCD	; 205
    313c:	d0 40       	sbci	r29, 0x00	; 0
    313e:	c2 53       	subi	r28, 0x32	; 50
    3140:	df 4f       	sbci	r29, 0xFF	; 255
    3142:	88 83       	st	Y, r24
    3144:	ce 5c       	subi	r28, 0xCE	; 206
    3146:	d0 40       	sbci	r29, 0x00	; 0
    3148:	c1 53       	subi	r28, 0x31	; 49
    314a:	df 4f       	sbci	r29, 0xFF	; 255
    314c:	98 83       	st	Y, r25
    314e:	cf 5c       	subi	r28, 0xCF	; 207
    3150:	d0 40       	sbci	r29, 0x00	; 0
    3152:	14 c0       	rjmp	.+40     	; 0x317c <PrintCSV_H2A+0x14e>
    3154:	c4 53       	subi	r28, 0x34	; 52
    3156:	df 4f       	sbci	r29, 0xFF	; 255
    3158:	18 82       	st	Y, r1
    315a:	cc 5c       	subi	r28, 0xCC	; 204
    315c:	d0 40       	sbci	r29, 0x00	; 0
    315e:	c3 53       	subi	r28, 0x33	; 51
    3160:	df 4f       	sbci	r29, 0xFF	; 255
    3162:	18 82       	st	Y, r1
    3164:	cd 5c       	subi	r28, 0xCD	; 205
    3166:	d0 40       	sbci	r29, 0x00	; 0
    3168:	c2 53       	subi	r28, 0x32	; 50
    316a:	df 4f       	sbci	r29, 0xFF	; 255
    316c:	18 82       	st	Y, r1
    316e:	ce 5c       	subi	r28, 0xCE	; 206
    3170:	d0 40       	sbci	r29, 0x00	; 0
    3172:	c1 53       	subi	r28, 0x31	; 49
    3174:	df 4f       	sbci	r29, 0xFF	; 255
    3176:	18 82       	st	Y, r1
    3178:	cf 5c       	subi	r28, 0xCF	; 207
    317a:	d0 40       	sbci	r29, 0x00	; 0
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    317c:	10 91 e4 29 	lds	r17, 0x29E4	; 0x8029e4 <sSensorDataSnapshot+0x78>
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    3180:	60 91 d4 29 	lds	r22, 0x29D4	; 0x8029d4 <sSensorDataSnapshot+0x68>
    3184:	70 91 d5 29 	lds	r23, 0x29D5	; 0x8029d5 <sSensorDataSnapshot+0x69>
    3188:	80 91 d6 29 	lds	r24, 0x29D6	; 0x8029d6 <sSensorDataSnapshot+0x6a>
    318c:	90 91 d7 29 	lds	r25, 0x29D7	; 0x8029d7 <sSensorDataSnapshot+0x6b>
    3190:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e4       	ldi	r19, 0x40	; 64
    3198:	4c e9       	ldi	r20, 0x9C	; 156
    319a:	55 e4       	ldi	r21, 0x45	; 69
    319c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    31a0:	c4 54       	subi	r28, 0x44	; 68
    31a2:	df 4f       	sbci	r29, 0xFF	; 255
    31a4:	68 83       	st	Y, r22
    31a6:	cc 5b       	subi	r28, 0xBC	; 188
    31a8:	d0 40       	sbci	r29, 0x00	; 0
    31aa:	c3 54       	subi	r28, 0x43	; 67
    31ac:	df 4f       	sbci	r29, 0xFF	; 255
    31ae:	78 83       	st	Y, r23
    31b0:	cd 5b       	subi	r28, 0xBD	; 189
    31b2:	d0 40       	sbci	r29, 0x00	; 0
    31b4:	c2 54       	subi	r28, 0x42	; 66
    31b6:	df 4f       	sbci	r29, 0xFF	; 255
    31b8:	88 83       	st	Y, r24
    31ba:	ce 5b       	subi	r28, 0xBE	; 190
    31bc:	d0 40       	sbci	r29, 0x00	; 0
    31be:	c1 54       	subi	r28, 0x41	; 65
    31c0:	df 4f       	sbci	r29, 0xFF	; 255
    31c2:	98 83       	st	Y, r25
    31c4:	cf 5b       	subi	r28, 0xBF	; 191
    31c6:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    31c8:	20 91 ce 29 	lds	r18, 0x29CE	; 0x8029ce <sSensorDataSnapshot+0x62>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    31cc:	91 e0       	ldi	r25, 0x01	; 1
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	21 11       	cpse	r18, r1
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	ce 56       	subi	r28, 0x6E	; 110
    31d6:	df 4f       	sbci	r29, 0xFF	; 255
    31d8:	98 83       	st	Y, r25
    31da:	c2 59       	subi	r28, 0x92	; 146
    31dc:	d0 40       	sbci	r29, 0x00	; 0
    31de:	cd 56       	subi	r28, 0x6D	; 109
    31e0:	df 4f       	sbci	r29, 0xFF	; 255
    31e2:	88 83       	st	Y, r24
    31e4:	c3 59       	subi	r28, 0x93	; 147
    31e6:	d0 40       	sbci	r29, 0x00	; 0
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    31e8:	60 91 d0 29 	lds	r22, 0x29D0	; 0x8029d0 <sSensorDataSnapshot+0x64>
    31ec:	70 91 d1 29 	lds	r23, 0x29D1	; 0x8029d1 <sSensorDataSnapshot+0x65>
    31f0:	80 91 d2 29 	lds	r24, 0x29D2	; 0x8029d2 <sSensorDataSnapshot+0x66>
    31f4:	90 91 d3 29 	lds	r25, 0x29D3	; 0x8029d3 <sSensorDataSnapshot+0x67>
    31f8:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e4       	ldi	r19, 0x40	; 64
    3200:	4c e9       	ldi	r20, 0x9C	; 156
    3202:	55 e4       	ldi	r21, 0x45	; 69
    3204:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3208:	c0 54       	subi	r28, 0x40	; 64
    320a:	df 4f       	sbci	r29, 0xFF	; 255
    320c:	68 83       	st	Y, r22
    320e:	c0 5c       	subi	r28, 0xC0	; 192
    3210:	d0 40       	sbci	r29, 0x00	; 0
    3212:	cf 53       	subi	r28, 0x3F	; 63
    3214:	df 4f       	sbci	r29, 0xFF	; 255
    3216:	78 83       	st	Y, r23
    3218:	c1 5c       	subi	r28, 0xC1	; 193
    321a:	d0 40       	sbci	r29, 0x00	; 0
    321c:	ce 53       	subi	r28, 0x3E	; 62
    321e:	df 4f       	sbci	r29, 0xFF	; 255
    3220:	88 83       	st	Y, r24
    3222:	c2 5c       	subi	r28, 0xC2	; 194
    3224:	d0 40       	sbci	r29, 0x00	; 0
    3226:	cd 53       	subi	r28, 0x3D	; 61
    3228:	df 4f       	sbci	r29, 0xFF	; 255
    322a:	98 83       	st	Y, r25
    322c:	c3 5c       	subi	r28, 0xC3	; 195
    322e:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
    3230:	20 91 cd 29 	lds	r18, 0x29CD	; 0x8029cd <sSensorDataSnapshot+0x61>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3234:	91 e0       	ldi	r25, 0x01	; 1
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	21 11       	cpse	r18, r1
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	cc 56       	subi	r28, 0x6C	; 108
    323e:	df 4f       	sbci	r29, 0xFF	; 255
    3240:	98 83       	st	Y, r25
    3242:	c4 59       	subi	r28, 0x94	; 148
    3244:	d0 40       	sbci	r29, 0x00	; 0
    3246:	cb 56       	subi	r28, 0x6B	; 107
    3248:	df 4f       	sbci	r29, 0xFF	; 255
    324a:	88 83       	st	Y, r24
    324c:	c5 59       	subi	r28, 0x95	; 149
    324e:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
    3250:	0f 2e       	mov	r0, r31
    3252:	fc e6       	ldi	r31, 0x6C	; 108
    3254:	ef 2e       	mov	r14, r31
    3256:	f9 e2       	ldi	r31, 0x29	; 41
    3258:	ff 2e       	mov	r15, r31
    325a:	f0 2d       	mov	r31, r0
    325c:	d7 01       	movw	r26, r14
    325e:	99 96       	adiw	r26, 0x29	; 41
    3260:	6d 91       	ld	r22, X+
    3262:	7d 91       	ld	r23, X+
    3264:	8d 91       	ld	r24, X+
    3266:	9c 91       	ld	r25, X
    3268:	9c 97       	sbiw	r26, 0x2c	; 44
    326a:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e4       	ldi	r19, 0x40	; 64
    3272:	4c e9       	ldi	r20, 0x9C	; 156
    3274:	55 e4       	ldi	r21, 0x45	; 69
    3276:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    327a:	cc 53       	subi	r28, 0x3C	; 60
    327c:	df 4f       	sbci	r29, 0xFF	; 255
    327e:	68 83       	st	Y, r22
    3280:	c4 5c       	subi	r28, 0xC4	; 196
    3282:	d0 40       	sbci	r29, 0x00	; 0
    3284:	cb 53       	subi	r28, 0x3B	; 59
    3286:	df 4f       	sbci	r29, 0xFF	; 255
    3288:	78 83       	st	Y, r23
    328a:	c5 5c       	subi	r28, 0xC5	; 197
    328c:	d0 40       	sbci	r29, 0x00	; 0
    328e:	ca 53       	subi	r28, 0x3A	; 58
    3290:	df 4f       	sbci	r29, 0xFF	; 255
    3292:	88 83       	st	Y, r24
    3294:	c6 5c       	subi	r28, 0xC6	; 198
    3296:	d0 40       	sbci	r29, 0x00	; 0
    3298:	c9 53       	subi	r28, 0x39	; 57
    329a:	df 4f       	sbci	r29, 0xFF	; 255
    329c:	98 83       	st	Y, r25
    329e:	c7 5c       	subi	r28, 0xC7	; 199
    32a0:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
    32a2:	f7 01       	movw	r30, r14
    32a4:	20 a5       	ldd	r18, Z+40	; 0x28

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    32a6:	91 e0       	ldi	r25, 0x01	; 1
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	21 11       	cpse	r18, r1
    32ac:	01 c0       	rjmp	.+2      	; 0x32b0 <PrintCSV_H2A+0x282>
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	ca 56       	subi	r28, 0x6A	; 106
    32b2:	df 4f       	sbci	r29, 0xFF	; 255
    32b4:	98 83       	st	Y, r25
    32b6:	c6 59       	subi	r28, 0x96	; 150
    32b8:	d0 40       	sbci	r29, 0x00	; 0
    32ba:	c9 56       	subi	r28, 0x69	; 105
    32bc:	df 4f       	sbci	r29, 0xFF	; 255
    32be:	88 83       	st	Y, r24
    32c0:	c7 59       	subi	r28, 0x97	; 151
    32c2:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
    32c4:	60 91 c9 29 	lds	r22, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5d>
    32c8:	70 91 ca 29 	lds	r23, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5e>
    32cc:	80 91 cb 29 	lds	r24, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x5f>
    32d0:	90 91 cc 29 	lds	r25, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x60>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    32d4:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
    32d8:	27 eb       	ldi	r18, 0xB7	; 183
    32da:	33 ef       	ldi	r19, 0xF3	; 243
    32dc:	4d e7       	ldi	r20, 0x7D	; 125
    32de:	5d e3       	ldi	r21, 0x3D	; 61
    32e0:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    32e4:	c8 53       	subi	r28, 0x38	; 56
    32e6:	df 4f       	sbci	r29, 0xFF	; 255
    32e8:	68 83       	st	Y, r22
    32ea:	c8 5c       	subi	r28, 0xC8	; 200
    32ec:	d0 40       	sbci	r29, 0x00	; 0
    32ee:	c7 53       	subi	r28, 0x37	; 55
    32f0:	df 4f       	sbci	r29, 0xFF	; 255
    32f2:	78 83       	st	Y, r23
    32f4:	c9 5c       	subi	r28, 0xC9	; 201
    32f6:	d0 40       	sbci	r29, 0x00	; 0
    32f8:	c6 53       	subi	r28, 0x36	; 54
    32fa:	df 4f       	sbci	r29, 0xFF	; 255
    32fc:	88 83       	st	Y, r24
    32fe:	ca 5c       	subi	r28, 0xCA	; 202
    3300:	d0 40       	sbci	r29, 0x00	; 0
    3302:	c5 53       	subi	r28, 0x35	; 53
    3304:	df 4f       	sbci	r29, 0xFF	; 255
    3306:	98 83       	st	Y, r25
    3308:	cb 5c       	subi	r28, 0xCB	; 203
    330a:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
    330c:	60 91 c5 29 	lds	r22, 0x29C5	; 0x8029c5 <sSensorDataSnapshot+0x59>
    3310:	70 91 c6 29 	lds	r23, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5a>
    3314:	80 91 c7 29 	lds	r24, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5b>
    3318:	90 91 c8 29 	lds	r25, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5c>

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    331c:	61 15       	cp	r22, r1
    331e:	71 05       	cpc	r23, r1
    3320:	81 05       	cpc	r24, r1
    3322:	91 05       	cpc	r25, r1
    3324:	09 f1       	breq	.+66     	; 0x3368 <PrintCSV_H2A+0x33a>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    3326:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e8       	ldi	r20, 0x80	; 128
    3330:	57 e3       	ldi	r21, 0x37	; 55
    3332:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3336:	9b 01       	movw	r18, r22
    3338:	ac 01       	movw	r20, r24
    333a:	60 e0       	ldi	r22, 0x00	; 0
    333c:	70 e8       	ldi	r23, 0x80	; 128
    333e:	8b e8       	ldi	r24, 0x8B	; 139
    3340:	94 e4       	ldi	r25, 0x44	; 68
    3342:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3346:	69 83       	std	Y+1, r22	; 0x01
    3348:	07 2f       	mov	r16, r23
    334a:	38 2e       	mov	r3, r24
    334c:	29 2e       	mov	r2, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e8       	ldi	r20, 0x80	; 128
    3354:	5f e3       	ldi	r21, 0x3F	; 63
    3356:	0e 94 ab 31 	call	0x6356	; 0x6356 <__cmpsf2>
    335a:	88 23       	and	r24, r24
    335c:	4c f4       	brge	.+18     	; 0x3370 <PrintCSV_H2A+0x342>
		res = 0.0f;
    335e:	19 82       	std	Y+1, r1	; 0x01
    3360:	00 e0       	ldi	r16, 0x00	; 0
    3362:	31 2c       	mov	r3, r1
    3364:	21 2c       	mov	r2, r1
    3366:	04 c0       	rjmp	.+8      	; 0x3370 <PrintCSV_H2A+0x342>
	}
	else
	res = 0.0f;
    3368:	19 82       	std	Y+1, r1	; 0x01
    336a:	00 e0       	ldi	r16, 0x00	; 0
    336c:	31 2c       	mov	r3, r1
    336e:	21 2c       	mov	r2, r1
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    3370:	2c e6       	ldi	r18, 0x6C	; 108
    3372:	39 e2       	ldi	r19, 0x29	; 41
    3374:	60 91 de 29 	lds	r22, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x72>
    3378:	70 91 df 29 	lds	r23, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x73>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    337c:	40 91 dc 29 	lds	r20, 0x29DC	; 0x8029dc <sSensorDataSnapshot+0x70>
    3380:	50 91 dd 29 	lds	r21, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x71>
    3384:	4a 83       	std	Y+2, r20	; 0x02
    3386:	5b 83       	std	Y+3, r21	; 0x03
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    3388:	c0 90 99 29 	lds	r12, 0x2999	; 0x802999 <sSensorDataSnapshot+0x2d>
    338c:	d0 90 9a 29 	lds	r13, 0x299A	; 0x80299a <sSensorDataSnapshot+0x2e>
    3390:	e0 90 9b 29 	lds	r14, 0x299B	; 0x80299b <sSensorDataSnapshot+0x2f>
    3394:	f0 90 9c 29 	lds	r15, 0x299C	; 0x80299c <sSensorDataSnapshot+0x30>
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    3398:	ed eb       	ldi	r30, 0xBD	; 189
    339a:	f9 e2       	ldi	r31, 0x29	; 41
    339c:	50 81       	ld	r21, Z
    339e:	c8 56       	subi	r28, 0x68	; 104
    33a0:	df 4f       	sbci	r29, 0xFF	; 255
    33a2:	58 83       	st	Y, r21
    33a4:	c8 59       	subi	r28, 0x98	; 152
    33a6:	d0 40       	sbci	r29, 0x00	; 0
    33a8:	81 81       	ldd	r24, Z+1	; 0x01
    33aa:	c7 56       	subi	r28, 0x67	; 103
    33ac:	df 4f       	sbci	r29, 0xFF	; 255
    33ae:	88 83       	st	Y, r24
    33b0:	c9 59       	subi	r28, 0x99	; 153
    33b2:	d0 40       	sbci	r29, 0x00	; 0
    33b4:	92 81       	ldd	r25, Z+2	; 0x02
    33b6:	c6 56       	subi	r28, 0x66	; 102
    33b8:	df 4f       	sbci	r29, 0xFF	; 255
    33ba:	98 83       	st	Y, r25
    33bc:	ca 59       	subi	r28, 0x9A	; 154
    33be:	d0 40       	sbci	r29, 0x00	; 0
    33c0:	a3 81       	ldd	r26, Z+3	; 0x03
    33c2:	c5 56       	subi	r28, 0x65	; 101
    33c4:	df 4f       	sbci	r29, 0xFF	; 255
    33c6:	a8 83       	st	Y, r26
    33c8:	cb 59       	subi	r28, 0x9B	; 155
    33ca:	d0 40       	sbci	r29, 0x00	; 0
    33cc:	b4 81       	ldd	r27, Z+4	; 0x04
    33ce:	c4 56       	subi	r28, 0x64	; 100
    33d0:	df 4f       	sbci	r29, 0xFF	; 255
    33d2:	b8 83       	st	Y, r27
    33d4:	cc 59       	subi	r28, 0x9C	; 156
    33d6:	d0 40       	sbci	r29, 0x00	; 0
    33d8:	45 81       	ldd	r20, Z+5	; 0x05
    33da:	c3 56       	subi	r28, 0x63	; 99
    33dc:	df 4f       	sbci	r29, 0xFF	; 255
    33de:	48 83       	st	Y, r20
    33e0:	cd 59       	subi	r28, 0x9D	; 157
    33e2:	d0 40       	sbci	r29, 0x00	; 0
    33e4:	56 81       	ldd	r21, Z+6	; 0x06
    33e6:	c2 56       	subi	r28, 0x62	; 98
    33e8:	df 4f       	sbci	r29, 0xFF	; 255
    33ea:	58 83       	st	Y, r21
    33ec:	ce 59       	subi	r28, 0x9E	; 158
    33ee:	d0 40       	sbci	r29, 0x00	; 0
    33f0:	87 81       	ldd	r24, Z+7	; 0x07
    33f2:	c1 56       	subi	r28, 0x61	; 97
    33f4:	df 4f       	sbci	r29, 0xFF	; 255
    33f6:	88 83       	st	Y, r24
    33f8:	cf 59       	subi	r28, 0x9F	; 159
    33fa:	d0 40       	sbci	r29, 0x00	; 0
    33fc:	40 90 0d 2a 	lds	r4, 0x2A0D	; 0x802a0d <sCal+0x28>
    3400:	50 90 0e 2a 	lds	r5, 0x2A0E	; 0x802a0e <sCal+0x29>
    3404:	60 90 0f 2a 	lds	r6, 0x2A0F	; 0x802a0f <sCal+0x2a>
    3408:	70 90 10 2a 	lds	r7, 0x2A10	; 0x802a10 <sCal+0x2b>
    340c:	80 90 11 2a 	lds	r8, 0x2A11	; 0x802a11 <sCal+0x2c>
    3410:	90 90 12 2a 	lds	r9, 0x2A12	; 0x802a12 <sCal+0x2d>
    3414:	a0 90 13 2a 	lds	r10, 0x2A13	; 0x802a13 <sCal+0x2e>
    3418:	b0 90 14 2a 	lds	r11, 0x2A14	; 0x802a14 <sCal+0x2f>
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    341c:	80 91 b1 29 	lds	r24, 0x29B1	; 0x8029b1 <sSensorDataSnapshot+0x45>
    3420:	90 91 b2 29 	lds	r25, 0x29B2	; 0x8029b2 <sSensorDataSnapshot+0x46>
    3424:	a0 91 b3 29 	lds	r26, 0x29B3	; 0x8029b3 <sSensorDataSnapshot+0x47>
    3428:	b0 91 b4 29 	lds	r27, 0x29B4	; 0x8029b4 <sSensorDataSnapshot+0x48>
    342c:	8c 83       	std	Y+4, r24	; 0x04
    342e:	9d 83       	std	Y+5, r25	; 0x05
    3430:	ae 83       	std	Y+6, r26	; 0x06
    3432:	bf 83       	std	Y+7, r27	; 0x07
    3434:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <sCal+0x28>
    3438:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <sCal+0x29>
    343c:	a0 91 0f 2a 	lds	r26, 0x2A0F	; 0x802a0f <sCal+0x2a>
    3440:	b0 91 10 2a 	lds	r27, 0x2A10	; 0x802a10 <sCal+0x2b>
    3444:	88 87       	std	Y+8, r24	; 0x08
    3446:	99 87       	std	Y+9, r25	; 0x09
    3448:	aa 87       	std	Y+10, r26	; 0x0a
    344a:	bb 87       	std	Y+11, r27	; 0x0b
    344c:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <sCal+0x2c>
    3450:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <sCal+0x2d>
    3454:	a0 91 13 2a 	lds	r26, 0x2A13	; 0x802a13 <sCal+0x2e>
    3458:	b0 91 14 2a 	lds	r27, 0x2A14	; 0x802a14 <sCal+0x2f>
    345c:	8c 87       	std	Y+12, r24	; 0x0c
    345e:	9d 87       	std	Y+13, r25	; 0x0d
    3460:	ae 87       	std	Y+14, r26	; 0x0e
    3462:	bf 87       	std	Y+15, r27	; 0x0f
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    3464:	80 91 a9 29 	lds	r24, 0x29A9	; 0x8029a9 <sSensorDataSnapshot+0x3d>
    3468:	90 91 aa 29 	lds	r25, 0x29AA	; 0x8029aa <sSensorDataSnapshot+0x3e>
    346c:	a0 91 ab 29 	lds	r26, 0x29AB	; 0x8029ab <sSensorDataSnapshot+0x3f>
    3470:	b0 91 ac 29 	lds	r27, 0x29AC	; 0x8029ac <sSensorDataSnapshot+0x40>
    3474:	88 8b       	std	Y+16, r24	; 0x10
    3476:	99 8b       	std	Y+17, r25	; 0x11
    3478:	aa 8b       	std	Y+18, r26	; 0x12
    347a:	bb 8b       	std	Y+19, r27	; 0x13
    347c:	80 91 11 2a 	lds	r24, 0x2A11	; 0x802a11 <sCal+0x2c>
    3480:	90 91 12 2a 	lds	r25, 0x2A12	; 0x802a12 <sCal+0x2d>
    3484:	a0 91 13 2a 	lds	r26, 0x2A13	; 0x802a13 <sCal+0x2e>
    3488:	b0 91 14 2a 	lds	r27, 0x2A14	; 0x802a14 <sCal+0x2f>
    348c:	8c 8b       	std	Y+20, r24	; 0x14
    348e:	9d 8b       	std	Y+21, r25	; 0x15
    3490:	ae 8b       	std	Y+22, r26	; 0x16
    3492:	bf 8b       	std	Y+23, r27	; 0x17
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    3494:	80 91 a5 29 	lds	r24, 0x29A5	; 0x8029a5 <sSensorDataSnapshot+0x39>
    3498:	90 91 a6 29 	lds	r25, 0x29A6	; 0x8029a6 <sSensorDataSnapshot+0x3a>
    349c:	a0 91 a7 29 	lds	r26, 0x29A7	; 0x8029a7 <sSensorDataSnapshot+0x3b>
    34a0:	b0 91 a8 29 	lds	r27, 0x29A8	; 0x8029a8 <sSensorDataSnapshot+0x3c>
    34a4:	88 8f       	std	Y+24, r24	; 0x18
    34a6:	99 8f       	std	Y+25, r25	; 0x19
    34a8:	aa 8f       	std	Y+26, r26	; 0x1a
    34aa:	bb 8f       	std	Y+27, r27	; 0x1b
    34ac:	80 91 0d 2a 	lds	r24, 0x2A0D	; 0x802a0d <sCal+0x28>
    34b0:	90 91 0e 2a 	lds	r25, 0x2A0E	; 0x802a0e <sCal+0x29>
    34b4:	a0 91 0f 2a 	lds	r26, 0x2A0F	; 0x802a0f <sCal+0x2a>
    34b8:	b0 91 10 2a 	lds	r27, 0x2A10	; 0x802a10 <sCal+0x2b>
    34bc:	8c 8f       	std	Y+28, r24	; 0x1c
    34be:	9d 8f       	std	Y+29, r25	; 0x1d
    34c0:	ae 8f       	std	Y+30, r26	; 0x1e
    34c2:	bf 8f       	std	Y+31, r27	; 0x1f
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    34c4:	a5 eb       	ldi	r26, 0xB5	; 181
    34c6:	b9 e2       	ldi	r27, 0x29	; 41
    34c8:	9c 91       	ld	r25, X
    34ca:	c0 56       	subi	r28, 0x60	; 96
    34cc:	df 4f       	sbci	r29, 0xFF	; 255
    34ce:	98 83       	st	Y, r25
    34d0:	c0 5a       	subi	r28, 0xA0	; 160
    34d2:	d0 40       	sbci	r29, 0x00	; 0
    34d4:	11 96       	adiw	r26, 0x01	; 1
    34d6:	ec 91       	ld	r30, X
    34d8:	11 97       	sbiw	r26, 0x01	; 1
    34da:	cf 55       	subi	r28, 0x5F	; 95
    34dc:	df 4f       	sbci	r29, 0xFF	; 255
    34de:	e8 83       	st	Y, r30
    34e0:	c1 5a       	subi	r28, 0xA1	; 161
    34e2:	d0 40       	sbci	r29, 0x00	; 0
    34e4:	12 96       	adiw	r26, 0x02	; 2
    34e6:	fc 91       	ld	r31, X
    34e8:	12 97       	sbiw	r26, 0x02	; 2
    34ea:	ce 55       	subi	r28, 0x5E	; 94
    34ec:	df 4f       	sbci	r29, 0xFF	; 255
    34ee:	f8 83       	st	Y, r31
    34f0:	c2 5a       	subi	r28, 0xA2	; 162
    34f2:	d0 40       	sbci	r29, 0x00	; 0
    34f4:	13 96       	adiw	r26, 0x03	; 3
    34f6:	8c 91       	ld	r24, X
    34f8:	13 97       	sbiw	r26, 0x03	; 3
    34fa:	cd 55       	subi	r28, 0x5D	; 93
    34fc:	df 4f       	sbci	r29, 0xFF	; 255
    34fe:	88 83       	st	Y, r24
    3500:	c3 5a       	subi	r28, 0xA3	; 163
    3502:	d0 40       	sbci	r29, 0x00	; 0
    3504:	14 96       	adiw	r26, 0x04	; 4
    3506:	9c 91       	ld	r25, X
    3508:	14 97       	sbiw	r26, 0x04	; 4
    350a:	cc 55       	subi	r28, 0x5C	; 92
    350c:	df 4f       	sbci	r29, 0xFF	; 255
    350e:	98 83       	st	Y, r25
    3510:	c4 5a       	subi	r28, 0xA4	; 164
    3512:	d0 40       	sbci	r29, 0x00	; 0
    3514:	15 96       	adiw	r26, 0x05	; 5
    3516:	ec 91       	ld	r30, X
    3518:	15 97       	sbiw	r26, 0x05	; 5
    351a:	cb 55       	subi	r28, 0x5B	; 91
    351c:	df 4f       	sbci	r29, 0xFF	; 255
    351e:	e8 83       	st	Y, r30
    3520:	c5 5a       	subi	r28, 0xA5	; 165
    3522:	d0 40       	sbci	r29, 0x00	; 0
    3524:	16 96       	adiw	r26, 0x06	; 6
    3526:	fc 91       	ld	r31, X
    3528:	16 97       	sbiw	r26, 0x06	; 6
    352a:	ca 55       	subi	r28, 0x5A	; 90
    352c:	df 4f       	sbci	r29, 0xFF	; 255
    352e:	f8 83       	st	Y, r31
    3530:	c6 5a       	subi	r28, 0xA6	; 166
    3532:	d0 40       	sbci	r29, 0x00	; 0
    3534:	17 96       	adiw	r26, 0x07	; 7
    3536:	8c 91       	ld	r24, X
    3538:	c0 53       	subi	r28, 0x30	; 48
    353a:	df 4f       	sbci	r29, 0xFF	; 255
    353c:	88 83       	st	Y, r24
    353e:	c0 5d       	subi	r28, 0xD0	; 208
    3540:	d0 40       	sbci	r29, 0x00	; 0
    3542:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    3546:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    354a:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    354e:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    3552:	88 a3       	std	Y+32, r24	; 0x20
    3554:	99 a3       	std	Y+33, r25	; 0x21
    3556:	aa a3       	std	Y+34, r26	; 0x22
    3558:	bb a3       	std	Y+35, r27	; 0x23
    355a:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    355e:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    3562:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    3566:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    356a:	8c a3       	std	Y+36, r24	; 0x24
    356c:	9d a3       	std	Y+37, r25	; 0x25
    356e:	ae a3       	std	Y+38, r26	; 0x26
    3570:	bf a3       	std	Y+39, r27	; 0x27
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3572:	80 91 ad 29 	lds	r24, 0x29AD	; 0x8029ad <sSensorDataSnapshot+0x41>
    3576:	90 91 ae 29 	lds	r25, 0x29AE	; 0x8029ae <sSensorDataSnapshot+0x42>
    357a:	a0 91 af 29 	lds	r26, 0x29AF	; 0x8029af <sSensorDataSnapshot+0x43>
    357e:	b0 91 b0 29 	lds	r27, 0x29B0	; 0x8029b0 <sSensorDataSnapshot+0x44>
    3582:	88 a7       	std	Y+40, r24	; 0x28
    3584:	99 a7       	std	Y+41, r25	; 0x29
    3586:	aa a7       	std	Y+42, r26	; 0x2a
    3588:	bb a7       	std	Y+43, r27	; 0x2b
    358a:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    358e:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    3592:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    3596:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    359a:	8c a7       	std	Y+44, r24	; 0x2c
    359c:	9d a7       	std	Y+45, r25	; 0x2d
    359e:	ae a7       	std	Y+46, r26	; 0x2e
    35a0:	bf a7       	std	Y+47, r27	; 0x2f
    35a2:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    35a6:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    35aa:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    35ae:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    35b2:	88 ab       	std	Y+48, r24	; 0x30
    35b4:	99 ab       	std	Y+49, r25	; 0x31
    35b6:	aa ab       	std	Y+50, r26	; 0x32
    35b8:	bb ab       	std	Y+51, r27	; 0x33
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    35ba:	80 91 a1 29 	lds	r24, 0x29A1	; 0x8029a1 <sSensorDataSnapshot+0x35>
    35be:	90 91 a2 29 	lds	r25, 0x29A2	; 0x8029a2 <sSensorDataSnapshot+0x36>
    35c2:	a0 91 a3 29 	lds	r26, 0x29A3	; 0x8029a3 <sSensorDataSnapshot+0x37>
    35c6:	b0 91 a4 29 	lds	r27, 0x29A4	; 0x8029a4 <sSensorDataSnapshot+0x38>
    35ca:	8c ab       	std	Y+52, r24	; 0x34
    35cc:	9d ab       	std	Y+53, r25	; 0x35
    35ce:	ae ab       	std	Y+54, r26	; 0x36
    35d0:	bf ab       	std	Y+55, r27	; 0x37
    35d2:	80 91 09 2a 	lds	r24, 0x2A09	; 0x802a09 <sCal+0x24>
    35d6:	90 91 0a 2a 	lds	r25, 0x2A0A	; 0x802a0a <sCal+0x25>
    35da:	a0 91 0b 2a 	lds	r26, 0x2A0B	; 0x802a0b <sCal+0x26>
    35de:	b0 91 0c 2a 	lds	r27, 0x2A0C	; 0x802a0c <sCal+0x27>
    35e2:	88 af       	std	Y+56, r24	; 0x38
    35e4:	99 af       	std	Y+57, r25	; 0x39
    35e6:	aa af       	std	Y+58, r26	; 0x3a
    35e8:	bb af       	std	Y+59, r27	; 0x3b
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    35ea:	80 91 9d 29 	lds	r24, 0x299D	; 0x80299d <sSensorDataSnapshot+0x31>
    35ee:	90 91 9e 29 	lds	r25, 0x299E	; 0x80299e <sSensorDataSnapshot+0x32>
    35f2:	a0 91 9f 29 	lds	r26, 0x299F	; 0x80299f <sSensorDataSnapshot+0x33>
    35f6:	b0 91 a0 29 	lds	r27, 0x29A0	; 0x8029a0 <sSensorDataSnapshot+0x34>
    35fa:	8c af       	std	Y+60, r24	; 0x3c
    35fc:	9d af       	std	Y+61, r25	; 0x3d
    35fe:	ae af       	std	Y+62, r26	; 0x3e
    3600:	bf af       	std	Y+63, r27	; 0x3f
    3602:	80 91 05 2a 	lds	r24, 0x2A05	; 0x802a05 <sCal+0x20>
    3606:	90 91 06 2a 	lds	r25, 0x2A06	; 0x802a06 <sCal+0x21>
    360a:	a0 91 07 2a 	lds	r26, 0x2A07	; 0x802a07 <sCal+0x22>
    360e:	b0 91 08 2a 	lds	r27, 0x2A08	; 0x802a08 <sCal+0x23>
    3612:	24 96       	adiw	r28, 0x04	; 4
    3614:	8c af       	std	Y+60, r24	; 0x3c
    3616:	9d af       	std	Y+61, r25	; 0x3d
    3618:	ae af       	std	Y+62, r26	; 0x3e
    361a:	bf af       	std	Y+63, r27	; 0x3f
    361c:	24 97       	sbiw	r28, 0x04	; 4
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
    361e:	90 91 8c 29 	lds	r25, 0x298C	; 0x80298c <sSensorDataSnapshot+0x20>
    3622:	c9 55       	subi	r28, 0x59	; 89
    3624:	df 4f       	sbci	r29, 0xFF	; 255
    3626:	98 83       	st	Y, r25
    3628:	c7 5a       	subi	r28, 0xA7	; 167
    362a:	d0 40       	sbci	r29, 0x00	; 0
    362c:	a0 91 8d 29 	lds	r26, 0x298D	; 0x80298d <sSensorDataSnapshot+0x21>
    3630:	c8 55       	subi	r28, 0x58	; 88
    3632:	df 4f       	sbci	r29, 0xFF	; 255
    3634:	a8 83       	st	Y, r26
    3636:	c8 5a       	subi	r28, 0xA8	; 168
    3638:	d0 40       	sbci	r29, 0x00	; 0
    363a:	b0 91 8e 29 	lds	r27, 0x298E	; 0x80298e <sSensorDataSnapshot+0x22>
    363e:	c7 55       	subi	r28, 0x57	; 87
    3640:	df 4f       	sbci	r29, 0xFF	; 255
    3642:	b8 83       	st	Y, r27
    3644:	c9 5a       	subi	r28, 0xA9	; 169
    3646:	d0 40       	sbci	r29, 0x00	; 0
    3648:	e0 91 8f 29 	lds	r30, 0x298F	; 0x80298f <sSensorDataSnapshot+0x23>
    364c:	c6 55       	subi	r28, 0x56	; 86
    364e:	df 4f       	sbci	r29, 0xFF	; 255
    3650:	e8 83       	st	Y, r30
    3652:	ca 5a       	subi	r28, 0xAA	; 170
    3654:	d0 40       	sbci	r29, 0x00	; 0
    3656:	f0 91 90 29 	lds	r31, 0x2990	; 0x802990 <sSensorDataSnapshot+0x24>
    365a:	c5 55       	subi	r28, 0x55	; 85
    365c:	df 4f       	sbci	r29, 0xFF	; 255
    365e:	f8 83       	st	Y, r31
    3660:	cb 5a       	subi	r28, 0xAB	; 171
    3662:	d0 40       	sbci	r29, 0x00	; 0
    3664:	80 91 91 29 	lds	r24, 0x2991	; 0x802991 <sSensorDataSnapshot+0x25>
    3668:	c4 55       	subi	r28, 0x54	; 84
    366a:	df 4f       	sbci	r29, 0xFF	; 255
    366c:	88 83       	st	Y, r24
    366e:	cc 5a       	subi	r28, 0xAC	; 172
    3670:	d0 40       	sbci	r29, 0x00	; 0
    3672:	90 91 92 29 	lds	r25, 0x2992	; 0x802992 <sSensorDataSnapshot+0x26>
    3676:	c3 55       	subi	r28, 0x53	; 83
    3678:	df 4f       	sbci	r29, 0xFF	; 255
    367a:	98 83       	st	Y, r25
    367c:	cd 5a       	subi	r28, 0xAD	; 173
    367e:	d0 40       	sbci	r29, 0x00	; 0
    3680:	a0 91 93 29 	lds	r26, 0x2993	; 0x802993 <sSensorDataSnapshot+0x27>
    3684:	cf 52       	subi	r28, 0x2F	; 47
    3686:	df 4f       	sbci	r29, 0xFF	; 255
    3688:	a8 83       	st	Y, r26
    368a:	c1 5d       	subi	r28, 0xD1	; 209
    368c:	d0 40       	sbci	r29, 0x00	; 0
    368e:	80 91 f5 29 	lds	r24, 0x29F5	; 0x8029f5 <sCal+0x10>
    3692:	90 91 f6 29 	lds	r25, 0x29F6	; 0x8029f6 <sCal+0x11>
    3696:	a0 91 f7 29 	lds	r26, 0x29F7	; 0x8029f7 <sCal+0x12>
    369a:	b0 91 f8 29 	lds	r27, 0x29F8	; 0x8029f8 <sCal+0x13>
    369e:	28 96       	adiw	r28, 0x08	; 8
    36a0:	8c af       	std	Y+60, r24	; 0x3c
    36a2:	9d af       	std	Y+61, r25	; 0x3d
    36a4:	ae af       	std	Y+62, r26	; 0x3e
    36a6:	bf af       	std	Y+63, r27	; 0x3f
    36a8:	28 97       	sbiw	r28, 0x08	; 8
    36aa:	80 91 f9 29 	lds	r24, 0x29F9	; 0x8029f9 <sCal+0x14>
    36ae:	90 91 fa 29 	lds	r25, 0x29FA	; 0x8029fa <sCal+0x15>
    36b2:	a0 91 fb 29 	lds	r26, 0x29FB	; 0x8029fb <sCal+0x16>
    36b6:	b0 91 fc 29 	lds	r27, 0x29FC	; 0x8029fc <sCal+0x17>
    36ba:	2c 96       	adiw	r28, 0x0c	; 12
    36bc:	8c af       	std	Y+60, r24	; 0x3c
    36be:	9d af       	std	Y+61, r25	; 0x3d
    36c0:	ae af       	std	Y+62, r26	; 0x3e
    36c2:	bf af       	std	Y+63, r27	; 0x3f
    36c4:	2c 97       	sbiw	r28, 0x0c	; 12
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
    36c6:	80 91 80 29 	lds	r24, 0x2980	; 0x802980 <sSensorDataSnapshot+0x14>
    36ca:	90 91 81 29 	lds	r25, 0x2981	; 0x802981 <sSensorDataSnapshot+0x15>
    36ce:	a0 91 82 29 	lds	r26, 0x2982	; 0x802982 <sSensorDataSnapshot+0x16>
    36d2:	b0 91 83 29 	lds	r27, 0x2983	; 0x802983 <sSensorDataSnapshot+0x17>
    36d6:	60 96       	adiw	r28, 0x10	; 16
    36d8:	8c af       	std	Y+60, r24	; 0x3c
    36da:	9d af       	std	Y+61, r25	; 0x3d
    36dc:	ae af       	std	Y+62, r26	; 0x3e
    36de:	bf af       	std	Y+63, r27	; 0x3f
    36e0:	60 97       	sbiw	r28, 0x10	; 16
    36e2:	80 91 f5 29 	lds	r24, 0x29F5	; 0x8029f5 <sCal+0x10>
    36e6:	90 91 f6 29 	lds	r25, 0x29F6	; 0x8029f6 <sCal+0x11>
    36ea:	a0 91 f7 29 	lds	r26, 0x29F7	; 0x8029f7 <sCal+0x12>
    36ee:	b0 91 f8 29 	lds	r27, 0x29F8	; 0x8029f8 <sCal+0x13>
    36f2:	64 96       	adiw	r28, 0x14	; 20
    36f4:	8c af       	std	Y+60, r24	; 0x3c
    36f6:	9d af       	std	Y+61, r25	; 0x3d
    36f8:	ae af       	std	Y+62, r26	; 0x3e
    36fa:	bf af       	std	Y+63, r27	; 0x3f
    36fc:	64 97       	sbiw	r28, 0x14	; 20
    36fe:	80 91 f9 29 	lds	r24, 0x29F9	; 0x8029f9 <sCal+0x14>
    3702:	90 91 fa 29 	lds	r25, 0x29FA	; 0x8029fa <sCal+0x15>
    3706:	a0 91 fb 29 	lds	r26, 0x29FB	; 0x8029fb <sCal+0x16>
    370a:	b0 91 fc 29 	lds	r27, 0x29FC	; 0x8029fc <sCal+0x17>
    370e:	68 96       	adiw	r28, 0x18	; 24
    3710:	8c af       	std	Y+60, r24	; 0x3c
    3712:	9d af       	std	Y+61, r25	; 0x3d
    3714:	ae af       	std	Y+62, r26	; 0x3e
    3716:	bf af       	std	Y+63, r27	; 0x3f
    3718:	68 97       	sbiw	r28, 0x18	; 24
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
    371a:	80 91 78 29 	lds	r24, 0x2978	; 0x802978 <sSensorDataSnapshot+0xc>
    371e:	90 91 79 29 	lds	r25, 0x2979	; 0x802979 <sSensorDataSnapshot+0xd>
    3722:	a0 91 7a 29 	lds	r26, 0x297A	; 0x80297a <sSensorDataSnapshot+0xe>
    3726:	b0 91 7b 29 	lds	r27, 0x297B	; 0x80297b <sSensorDataSnapshot+0xf>
    372a:	6c 96       	adiw	r28, 0x1c	; 28
    372c:	8c af       	std	Y+60, r24	; 0x3c
    372e:	9d af       	std	Y+61, r25	; 0x3d
    3730:	ae af       	std	Y+62, r26	; 0x3e
    3732:	bf af       	std	Y+63, r27	; 0x3f
    3734:	6c 97       	sbiw	r28, 0x1c	; 28
    3736:	80 91 f9 29 	lds	r24, 0x29F9	; 0x8029f9 <sCal+0x14>
    373a:	90 91 fa 29 	lds	r25, 0x29FA	; 0x8029fa <sCal+0x15>
    373e:	a0 91 fb 29 	lds	r26, 0x29FB	; 0x8029fb <sCal+0x16>
    3742:	b0 91 fc 29 	lds	r27, 0x29FC	; 0x8029fc <sCal+0x17>
    3746:	a0 96       	adiw	r28, 0x20	; 32
    3748:	8c af       	std	Y+60, r24	; 0x3c
    374a:	9d af       	std	Y+61, r25	; 0x3d
    374c:	ae af       	std	Y+62, r26	; 0x3e
    374e:	bf af       	std	Y+63, r27	; 0x3f
    3750:	a0 97       	sbiw	r28, 0x20	; 32
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
    3752:	80 91 74 29 	lds	r24, 0x2974	; 0x802974 <sSensorDataSnapshot+0x8>
    3756:	90 91 75 29 	lds	r25, 0x2975	; 0x802975 <sSensorDataSnapshot+0x9>
    375a:	a0 91 76 29 	lds	r26, 0x2976	; 0x802976 <sSensorDataSnapshot+0xa>
    375e:	b0 91 77 29 	lds	r27, 0x2977	; 0x802977 <sSensorDataSnapshot+0xb>
    3762:	a4 96       	adiw	r28, 0x24	; 36
    3764:	8c af       	std	Y+60, r24	; 0x3c
    3766:	9d af       	std	Y+61, r25	; 0x3d
    3768:	ae af       	std	Y+62, r26	; 0x3e
    376a:	bf af       	std	Y+63, r27	; 0x3f
    376c:	a4 97       	sbiw	r28, 0x24	; 36
    376e:	80 91 f5 29 	lds	r24, 0x29F5	; 0x8029f5 <sCal+0x10>
    3772:	90 91 f6 29 	lds	r25, 0x29F6	; 0x8029f6 <sCal+0x11>
    3776:	a0 91 f7 29 	lds	r26, 0x29F7	; 0x8029f7 <sCal+0x12>
    377a:	b0 91 f8 29 	lds	r27, 0x29F8	; 0x8029f8 <sCal+0x13>
    377e:	a8 96       	adiw	r28, 0x28	; 40
    3780:	8c af       	std	Y+60, r24	; 0x3c
    3782:	9d af       	std	Y+61, r25	; 0x3d
    3784:	ae af       	std	Y+62, r26	; 0x3e
    3786:	bf af       	std	Y+63, r27	; 0x3f
    3788:	a8 97       	sbiw	r28, 0x28	; 40
	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
    378a:	90 91 84 29 	lds	r25, 0x2984	; 0x802984 <sSensorDataSnapshot+0x18>
    378e:	c2 55       	subi	r28, 0x52	; 82
    3790:	df 4f       	sbci	r29, 0xFF	; 255
    3792:	98 83       	st	Y, r25
    3794:	ce 5a       	subi	r28, 0xAE	; 174
    3796:	d0 40       	sbci	r29, 0x00	; 0
    3798:	a0 91 85 29 	lds	r26, 0x2985	; 0x802985 <sSensorDataSnapshot+0x19>
    379c:	c1 55       	subi	r28, 0x51	; 81
    379e:	df 4f       	sbci	r29, 0xFF	; 255
    37a0:	a8 83       	st	Y, r26
    37a2:	cf 5a       	subi	r28, 0xAF	; 175
    37a4:	d0 40       	sbci	r29, 0x00	; 0
    37a6:	b0 91 86 29 	lds	r27, 0x2986	; 0x802986 <sSensorDataSnapshot+0x1a>
    37aa:	c0 55       	subi	r28, 0x50	; 80
    37ac:	df 4f       	sbci	r29, 0xFF	; 255
    37ae:	b8 83       	st	Y, r27
    37b0:	c0 5b       	subi	r28, 0xB0	; 176
    37b2:	d0 40       	sbci	r29, 0x00	; 0
    37b4:	e0 91 87 29 	lds	r30, 0x2987	; 0x802987 <sSensorDataSnapshot+0x1b>
    37b8:	cf 54       	subi	r28, 0x4F	; 79
    37ba:	df 4f       	sbci	r29, 0xFF	; 255
    37bc:	e8 83       	st	Y, r30
    37be:	c1 5b       	subi	r28, 0xB1	; 177
    37c0:	d0 40       	sbci	r29, 0x00	; 0
    37c2:	f0 91 88 29 	lds	r31, 0x2988	; 0x802988 <sSensorDataSnapshot+0x1c>
    37c6:	ce 54       	subi	r28, 0x4E	; 78
    37c8:	df 4f       	sbci	r29, 0xFF	; 255
    37ca:	f8 83       	st	Y, r31
    37cc:	c2 5b       	subi	r28, 0xB2	; 178
    37ce:	d0 40       	sbci	r29, 0x00	; 0
    37d0:	80 91 89 29 	lds	r24, 0x2989	; 0x802989 <sSensorDataSnapshot+0x1d>
    37d4:	cd 54       	subi	r28, 0x4D	; 77
    37d6:	df 4f       	sbci	r29, 0xFF	; 255
    37d8:	88 83       	st	Y, r24
    37da:	c3 5b       	subi	r28, 0xB3	; 179
    37dc:	d0 40       	sbci	r29, 0x00	; 0
    37de:	90 91 8a 29 	lds	r25, 0x298A	; 0x80298a <sSensorDataSnapshot+0x1e>
    37e2:	cc 54       	subi	r28, 0x4C	; 76
    37e4:	df 4f       	sbci	r29, 0xFF	; 255
    37e6:	98 83       	st	Y, r25
    37e8:	c4 5b       	subi	r28, 0xB4	; 180
    37ea:	d0 40       	sbci	r29, 0x00	; 0
    37ec:	a0 91 8b 29 	lds	r26, 0x298B	; 0x80298b <sSensorDataSnapshot+0x1f>
    37f0:	cb 54       	subi	r28, 0x4B	; 75
    37f2:	df 4f       	sbci	r29, 0xFF	; 255
    37f4:	a8 83       	st	Y, r26
    37f6:	c5 5b       	subi	r28, 0xB5	; 181
    37f8:	d0 40       	sbci	r29, 0x00	; 0
    37fa:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <sCal+0x8>
    37fe:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <sCal+0x9>
    3802:	a0 91 ef 29 	lds	r26, 0x29EF	; 0x8029ef <sCal+0xa>
    3806:	b0 91 f0 29 	lds	r27, 0x29F0	; 0x8029f0 <sCal+0xb>
    380a:	ac 96       	adiw	r28, 0x2c	; 44
    380c:	8c af       	std	Y+60, r24	; 0x3c
    380e:	9d af       	std	Y+61, r25	; 0x3d
    3810:	ae af       	std	Y+62, r26	; 0x3e
    3812:	bf af       	std	Y+63, r27	; 0x3f
    3814:	ac 97       	sbiw	r28, 0x2c	; 44
    3816:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <sCal+0xc>
    381a:	90 91 f2 29 	lds	r25, 0x29F2	; 0x8029f2 <sCal+0xd>
    381e:	a0 91 f3 29 	lds	r26, 0x29F3	; 0x8029f3 <sCal+0xe>
    3822:	b0 91 f4 29 	lds	r27, 0x29F4	; 0x8029f4 <sCal+0xf>
    3826:	e0 96       	adiw	r28, 0x30	; 48
    3828:	8c af       	std	Y+60, r24	; 0x3c
    382a:	9d af       	std	Y+61, r25	; 0x3d
    382c:	ae af       	std	Y+62, r26	; 0x3e
    382e:	bf af       	std	Y+63, r27	; 0x3f
    3830:	e0 97       	sbiw	r28, 0x30	; 48

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
    3832:	80 91 7c 29 	lds	r24, 0x297C	; 0x80297c <sSensorDataSnapshot+0x10>
    3836:	90 91 7d 29 	lds	r25, 0x297D	; 0x80297d <sSensorDataSnapshot+0x11>
    383a:	a0 91 7e 29 	lds	r26, 0x297E	; 0x80297e <sSensorDataSnapshot+0x12>
    383e:	b0 91 7f 29 	lds	r27, 0x297F	; 0x80297f <sSensorDataSnapshot+0x13>
    3842:	e4 96       	adiw	r28, 0x34	; 52
    3844:	8c af       	std	Y+60, r24	; 0x3c
    3846:	9d af       	std	Y+61, r25	; 0x3d
    3848:	ae af       	std	Y+62, r26	; 0x3e
    384a:	bf af       	std	Y+63, r27	; 0x3f
    384c:	e4 97       	sbiw	r28, 0x34	; 52
    384e:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <sCal+0x8>
    3852:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <sCal+0x9>
    3856:	a0 91 ef 29 	lds	r26, 0x29EF	; 0x8029ef <sCal+0xa>
    385a:	b0 91 f0 29 	lds	r27, 0x29F0	; 0x8029f0 <sCal+0xb>
    385e:	e8 96       	adiw	r28, 0x38	; 56
    3860:	8c af       	std	Y+60, r24	; 0x3c
    3862:	9d af       	std	Y+61, r25	; 0x3d
    3864:	ae af       	std	Y+62, r26	; 0x3e
    3866:	bf af       	std	Y+63, r27	; 0x3f
    3868:	e8 97       	sbiw	r28, 0x38	; 56
    386a:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <sCal+0xc>
    386e:	90 91 f2 29 	lds	r25, 0x29F2	; 0x8029f2 <sCal+0xd>
    3872:	a0 91 f3 29 	lds	r26, 0x29F3	; 0x8029f3 <sCal+0xe>
    3876:	b0 91 f4 29 	lds	r27, 0x29F4	; 0x8029f4 <sCal+0xf>
    387a:	ec 96       	adiw	r28, 0x3c	; 60
    387c:	8c af       	std	Y+60, r24	; 0x3c
    387e:	9d af       	std	Y+61, r25	; 0x3d
    3880:	ae af       	std	Y+62, r26	; 0x3e
    3882:	bf af       	std	Y+63, r27	; 0x3f
    3884:	ec 97       	sbiw	r28, 0x3c	; 60
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
    3886:	80 91 70 29 	lds	r24, 0x2970	; 0x802970 <sSensorDataSnapshot+0x4>
    388a:	90 91 71 29 	lds	r25, 0x2971	; 0x802971 <sSensorDataSnapshot+0x5>
    388e:	a0 91 72 29 	lds	r26, 0x2972	; 0x802972 <sSensorDataSnapshot+0x6>
    3892:	b0 91 73 29 	lds	r27, 0x2973	; 0x802973 <sSensorDataSnapshot+0x7>
    3896:	c4 58       	subi	r28, 0x84	; 132
    3898:	df 4f       	sbci	r29, 0xFF	; 255
    389a:	88 83       	st	Y, r24
    389c:	99 83       	std	Y+1, r25	; 0x01
    389e:	aa 83       	std	Y+2, r26	; 0x02
    38a0:	bb 83       	std	Y+3, r27	; 0x03
    38a2:	cc 57       	subi	r28, 0x7C	; 124
    38a4:	d0 40       	sbci	r29, 0x00	; 0
    38a6:	80 91 f1 29 	lds	r24, 0x29F1	; 0x8029f1 <sCal+0xc>
    38aa:	90 91 f2 29 	lds	r25, 0x29F2	; 0x8029f2 <sCal+0xd>
    38ae:	a0 91 f3 29 	lds	r26, 0x29F3	; 0x8029f3 <sCal+0xe>
    38b2:	b0 91 f4 29 	lds	r27, 0x29F4	; 0x8029f4 <sCal+0xf>
    38b6:	c0 58       	subi	r28, 0x80	; 128
    38b8:	df 4f       	sbci	r29, 0xFF	; 255
    38ba:	88 83       	st	Y, r24
    38bc:	99 83       	std	Y+1, r25	; 0x01
    38be:	aa 83       	std	Y+2, r26	; 0x02
    38c0:	bb 83       	std	Y+3, r27	; 0x03
    38c2:	c0 58       	subi	r28, 0x80	; 128
    38c4:	d0 40       	sbci	r29, 0x00	; 0
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
    38c6:	d9 01       	movw	r26, r18
    38c8:	8d 91       	ld	r24, X+
    38ca:	9d 91       	ld	r25, X+
    38cc:	0d 90       	ld	r0, X+
    38ce:	bc 91       	ld	r27, X
    38d0:	a0 2d       	mov	r26, r0
    38d2:	cc 57       	subi	r28, 0x7C	; 124
    38d4:	df 4f       	sbci	r29, 0xFF	; 255
    38d6:	88 83       	st	Y, r24
    38d8:	99 83       	std	Y+1, r25	; 0x01
    38da:	aa 83       	std	Y+2, r26	; 0x02
    38dc:	bb 83       	std	Y+3, r27	; 0x03
    38de:	c4 58       	subi	r28, 0x84	; 132
    38e0:	d0 40       	sbci	r29, 0x00	; 0
    38e2:	80 91 ed 29 	lds	r24, 0x29ED	; 0x8029ed <sCal+0x8>
    38e6:	90 91 ee 29 	lds	r25, 0x29EE	; 0x8029ee <sCal+0x9>
    38ea:	a0 91 ef 29 	lds	r26, 0x29EF	; 0x8029ef <sCal+0xa>
    38ee:	b0 91 f0 29 	lds	r27, 0x29F0	; 0x8029f0 <sCal+0xb>
    38f2:	c8 57       	subi	r28, 0x78	; 120
    38f4:	df 4f       	sbci	r29, 0xFF	; 255
    38f6:	88 83       	st	Y, r24
    38f8:	99 83       	std	Y+1, r25	; 0x01
    38fa:	aa 83       	std	Y+2, r26	; 0x02
    38fc:	bb 83       	std	Y+3, r27	; 0x03
    38fe:	c8 58       	subi	r28, 0x88	; 136
    3900:	d0 40       	sbci	r29, 0x00	; 0
void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    3902:	20 91 68 29 	lds	r18, 0x2968	; 0x802968 <sSessionCycleCountSnapshot>
    3906:	30 91 69 29 	lds	r19, 0x2969	; 0x802969 <sSessionCycleCountSnapshot+0x1>
    390a:	40 91 6a 29 	lds	r20, 0x296A	; 0x80296a <sSessionCycleCountSnapshot+0x2>
    390e:	50 91 6b 29 	lds	r21, 0x296B	; 0x80296b <sSessionCycleCountSnapshot+0x3>
    3912:	c4 57       	subi	r28, 0x74	; 116
    3914:	df 4f       	sbci	r29, 0xFF	; 255
    3916:	28 83       	st	Y, r18
    3918:	39 83       	std	Y+1, r19	; 0x01
    391a:	4a 83       	std	Y+2, r20	; 0x02
    391c:	5b 83       	std	Y+3, r21	; 0x03
    391e:	cc 58       	subi	r28, 0x8C	; 140
    3920:	d0 40       	sbci	r29, 0x00	; 0

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3922:	c5 54       	subi	r28, 0x45	; 69
    3924:	df 4f       	sbci	r29, 0xFF	; 255
    3926:	38 81       	ld	r19, Y
    3928:	cb 5b       	subi	r28, 0xBB	; 187
    392a:	d0 40       	sbci	r29, 0x00	; 0
    392c:	3f 93       	push	r19
    392e:	c6 54       	subi	r28, 0x46	; 70
    3930:	df 4f       	sbci	r29, 0xFF	; 255
    3932:	48 81       	ld	r20, Y
    3934:	ca 5b       	subi	r28, 0xBA	; 186
    3936:	d0 40       	sbci	r29, 0x00	; 0
    3938:	4f 93       	push	r20
    393a:	c7 54       	subi	r28, 0x47	; 71
    393c:	df 4f       	sbci	r29, 0xFF	; 255
    393e:	58 81       	ld	r21, Y
    3940:	c9 5b       	subi	r28, 0xB9	; 185
    3942:	d0 40       	sbci	r29, 0x00	; 0
    3944:	5f 93       	push	r21
    3946:	c8 54       	subi	r28, 0x48	; 72
    3948:	df 4f       	sbci	r29, 0xFF	; 255
    394a:	88 81       	ld	r24, Y
    394c:	c8 5b       	subi	r28, 0xB8	; 184
    394e:	d0 40       	sbci	r29, 0x00	; 0
    3950:	8f 93       	push	r24
    3952:	cf 56       	subi	r28, 0x6F	; 111
    3954:	df 4f       	sbci	r29, 0xFF	; 255
    3956:	98 81       	ld	r25, Y
    3958:	c1 59       	subi	r28, 0x91	; 145
    395a:	d0 40       	sbci	r29, 0x00	; 0
    395c:	9f 93       	push	r25
    395e:	c0 57       	subi	r28, 0x70	; 112
    3960:	df 4f       	sbci	r29, 0xFF	; 255
    3962:	a8 81       	ld	r26, Y
    3964:	c0 59       	subi	r28, 0x90	; 144
    3966:	d0 40       	sbci	r29, 0x00	; 0
    3968:	af 93       	push	r26
    396a:	c1 53       	subi	r28, 0x31	; 49
    396c:	df 4f       	sbci	r29, 0xFF	; 255
    396e:	b8 81       	ld	r27, Y
    3970:	cf 5c       	subi	r28, 0xCF	; 207
    3972:	d0 40       	sbci	r29, 0x00	; 0
    3974:	bf 93       	push	r27
    3976:	c2 53       	subi	r28, 0x32	; 50
    3978:	df 4f       	sbci	r29, 0xFF	; 255
    397a:	e8 81       	ld	r30, Y
    397c:	ce 5c       	subi	r28, 0xCE	; 206
    397e:	d0 40       	sbci	r29, 0x00	; 0
    3980:	ef 93       	push	r30
    3982:	c3 53       	subi	r28, 0x33	; 51
    3984:	df 4f       	sbci	r29, 0xFF	; 255
    3986:	f8 81       	ld	r31, Y
    3988:	cd 5c       	subi	r28, 0xCD	; 205
    398a:	d0 40       	sbci	r29, 0x00	; 0
    398c:	ff 93       	push	r31
    398e:	c4 53       	subi	r28, 0x34	; 52
    3990:	df 4f       	sbci	r29, 0xFF	; 255
    3992:	28 81       	ld	r18, Y
    3994:	cc 5c       	subi	r28, 0xCC	; 204
    3996:	d0 40       	sbci	r29, 0x00	; 0
    3998:	2f 93       	push	r18
    399a:	1f 92       	push	r1
    399c:	1f 93       	push	r17
    399e:	c1 54       	subi	r28, 0x41	; 65
    39a0:	df 4f       	sbci	r29, 0xFF	; 255
    39a2:	38 81       	ld	r19, Y
    39a4:	cf 5b       	subi	r28, 0xBF	; 191
    39a6:	d0 40       	sbci	r29, 0x00	; 0
    39a8:	3f 93       	push	r19
    39aa:	c2 54       	subi	r28, 0x42	; 66
    39ac:	df 4f       	sbci	r29, 0xFF	; 255
    39ae:	48 81       	ld	r20, Y
    39b0:	ce 5b       	subi	r28, 0xBE	; 190
    39b2:	d0 40       	sbci	r29, 0x00	; 0
    39b4:	4f 93       	push	r20
    39b6:	c3 54       	subi	r28, 0x43	; 67
    39b8:	df 4f       	sbci	r29, 0xFF	; 255
    39ba:	58 81       	ld	r21, Y
    39bc:	cd 5b       	subi	r28, 0xBD	; 189
    39be:	d0 40       	sbci	r29, 0x00	; 0
    39c0:	5f 93       	push	r21
    39c2:	c4 54       	subi	r28, 0x44	; 68
    39c4:	df 4f       	sbci	r29, 0xFF	; 255
    39c6:	88 81       	ld	r24, Y
    39c8:	cc 5b       	subi	r28, 0xBC	; 188
    39ca:	d0 40       	sbci	r29, 0x00	; 0
    39cc:	8f 93       	push	r24
    39ce:	cd 56       	subi	r28, 0x6D	; 109
    39d0:	df 4f       	sbci	r29, 0xFF	; 255
    39d2:	98 81       	ld	r25, Y
    39d4:	c3 59       	subi	r28, 0x93	; 147
    39d6:	d0 40       	sbci	r29, 0x00	; 0
    39d8:	9f 93       	push	r25
    39da:	ce 56       	subi	r28, 0x6E	; 110
    39dc:	df 4f       	sbci	r29, 0xFF	; 255
    39de:	a8 81       	ld	r26, Y
    39e0:	c2 59       	subi	r28, 0x92	; 146
    39e2:	d0 40       	sbci	r29, 0x00	; 0
    39e4:	af 93       	push	r26
    39e6:	cd 53       	subi	r28, 0x3D	; 61
    39e8:	df 4f       	sbci	r29, 0xFF	; 255
    39ea:	b8 81       	ld	r27, Y
    39ec:	c3 5c       	subi	r28, 0xC3	; 195
    39ee:	d0 40       	sbci	r29, 0x00	; 0
    39f0:	bf 93       	push	r27
    39f2:	ce 53       	subi	r28, 0x3E	; 62
    39f4:	df 4f       	sbci	r29, 0xFF	; 255
    39f6:	e8 81       	ld	r30, Y
    39f8:	c2 5c       	subi	r28, 0xC2	; 194
    39fa:	d0 40       	sbci	r29, 0x00	; 0
    39fc:	ef 93       	push	r30
    39fe:	cf 53       	subi	r28, 0x3F	; 63
    3a00:	df 4f       	sbci	r29, 0xFF	; 255
    3a02:	f8 81       	ld	r31, Y
    3a04:	c1 5c       	subi	r28, 0xC1	; 193
    3a06:	d0 40       	sbci	r29, 0x00	; 0
    3a08:	ff 93       	push	r31
    3a0a:	c0 54       	subi	r28, 0x40	; 64
    3a0c:	df 4f       	sbci	r29, 0xFF	; 255
    3a0e:	28 81       	ld	r18, Y
    3a10:	c0 5c       	subi	r28, 0xC0	; 192
    3a12:	d0 40       	sbci	r29, 0x00	; 0
    3a14:	2f 93       	push	r18
    3a16:	cb 56       	subi	r28, 0x6B	; 107
    3a18:	df 4f       	sbci	r29, 0xFF	; 255
    3a1a:	38 81       	ld	r19, Y
    3a1c:	c5 59       	subi	r28, 0x95	; 149
    3a1e:	d0 40       	sbci	r29, 0x00	; 0
    3a20:	3f 93       	push	r19
    3a22:	cc 56       	subi	r28, 0x6C	; 108
    3a24:	df 4f       	sbci	r29, 0xFF	; 255
    3a26:	48 81       	ld	r20, Y
    3a28:	c4 59       	subi	r28, 0x94	; 148
    3a2a:	d0 40       	sbci	r29, 0x00	; 0
    3a2c:	4f 93       	push	r20
    3a2e:	c9 53       	subi	r28, 0x39	; 57
    3a30:	df 4f       	sbci	r29, 0xFF	; 255
    3a32:	58 81       	ld	r21, Y
    3a34:	c7 5c       	subi	r28, 0xC7	; 199
    3a36:	d0 40       	sbci	r29, 0x00	; 0
    3a38:	5f 93       	push	r21
    3a3a:	ca 53       	subi	r28, 0x3A	; 58
    3a3c:	df 4f       	sbci	r29, 0xFF	; 255
    3a3e:	88 81       	ld	r24, Y
    3a40:	c6 5c       	subi	r28, 0xC6	; 198
    3a42:	d0 40       	sbci	r29, 0x00	; 0
    3a44:	8f 93       	push	r24
    3a46:	cb 53       	subi	r28, 0x3B	; 59
    3a48:	df 4f       	sbci	r29, 0xFF	; 255
    3a4a:	98 81       	ld	r25, Y
    3a4c:	c5 5c       	subi	r28, 0xC5	; 197
    3a4e:	d0 40       	sbci	r29, 0x00	; 0
    3a50:	9f 93       	push	r25
    3a52:	cc 53       	subi	r28, 0x3C	; 60
    3a54:	df 4f       	sbci	r29, 0xFF	; 255
    3a56:	a8 81       	ld	r26, Y
    3a58:	c4 5c       	subi	r28, 0xC4	; 196
    3a5a:	d0 40       	sbci	r29, 0x00	; 0
    3a5c:	af 93       	push	r26
    3a5e:	c9 56       	subi	r28, 0x69	; 105
    3a60:	df 4f       	sbci	r29, 0xFF	; 255
    3a62:	b8 81       	ld	r27, Y
    3a64:	c7 59       	subi	r28, 0x97	; 151
    3a66:	d0 40       	sbci	r29, 0x00	; 0
    3a68:	bf 93       	push	r27
    3a6a:	ca 56       	subi	r28, 0x6A	; 106
    3a6c:	df 4f       	sbci	r29, 0xFF	; 255
    3a6e:	e8 81       	ld	r30, Y
    3a70:	c6 59       	subi	r28, 0x96	; 150
    3a72:	d0 40       	sbci	r29, 0x00	; 0
    3a74:	ef 93       	push	r30
    3a76:	c5 53       	subi	r28, 0x35	; 53
    3a78:	df 4f       	sbci	r29, 0xFF	; 255
    3a7a:	f8 81       	ld	r31, Y
    3a7c:	cb 5c       	subi	r28, 0xCB	; 203
    3a7e:	d0 40       	sbci	r29, 0x00	; 0
    3a80:	ff 93       	push	r31
    3a82:	c6 53       	subi	r28, 0x36	; 54
    3a84:	df 4f       	sbci	r29, 0xFF	; 255
    3a86:	28 81       	ld	r18, Y
    3a88:	ca 5c       	subi	r28, 0xCA	; 202
    3a8a:	d0 40       	sbci	r29, 0x00	; 0
    3a8c:	2f 93       	push	r18
    3a8e:	c7 53       	subi	r28, 0x37	; 55
    3a90:	df 4f       	sbci	r29, 0xFF	; 255
    3a92:	38 81       	ld	r19, Y
    3a94:	c9 5c       	subi	r28, 0xC9	; 201
    3a96:	d0 40       	sbci	r29, 0x00	; 0
    3a98:	3f 93       	push	r19
    3a9a:	c8 53       	subi	r28, 0x38	; 56
    3a9c:	df 4f       	sbci	r29, 0xFF	; 255
    3a9e:	48 81       	ld	r20, Y
    3aa0:	c8 5c       	subi	r28, 0xC8	; 200
    3aa2:	d0 40       	sbci	r29, 0x00	; 0
    3aa4:	4f 93       	push	r20
    3aa6:	2f 92       	push	r2
    3aa8:	3f 92       	push	r3
    3aaa:	0f 93       	push	r16
    3aac:	59 81       	ldd	r21, Y+1	; 0x01
    3aae:	5f 93       	push	r21
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    3ab8:	23 e3       	ldi	r18, 0x33	; 51
    3aba:	33 e3       	ldi	r19, 0x33	; 51
    3abc:	43 e2       	ldi	r20, 0x23	; 35
    3abe:	54 e4       	ldi	r21, 0x44	; 68
    3ac0:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3ac4:	9f 93       	push	r25
    3ac6:	8f 93       	push	r24
    3ac8:	7f 93       	push	r23
    3aca:	6f 93       	push	r22
    3acc:	aa 81       	ldd	r26, Y+2	; 0x02
    3ace:	bb 81       	ldd	r27, Y+3	; 0x03
    3ad0:	bd 01       	movw	r22, r26
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    3ada:	27 e1       	ldi	r18, 0x17	; 23
    3adc:	37 eb       	ldi	r19, 0xB7	; 183
    3ade:	41 ed       	ldi	r20, 0xD1	; 209
    3ae0:	5e e3       	ldi	r21, 0x3E	; 62
    3ae2:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3ae6:	9f 93       	push	r25
    3ae8:	8f 93       	push	r24
    3aea:	7f 93       	push	r23
    3aec:	6f 93       	push	r22
    3aee:	c7 01       	movw	r24, r14
    3af0:	b6 01       	movw	r22, r12
    3af2:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    3af6:	20 e0       	ldi	r18, 0x00	; 0
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	40 e2       	ldi	r20, 0x20	; 32
    3afc:	59 e4       	ldi	r21, 0x49	; 73
    3afe:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3b02:	9f 93       	push	r25
    3b04:	8f 93       	push	r24
    3b06:	7f 93       	push	r23
    3b08:	6f 93       	push	r22
    3b0a:	c8 56       	subi	r28, 0x68	; 104
    3b0c:	df 4f       	sbci	r29, 0xFF	; 255
    3b0e:	28 81       	ld	r18, Y
    3b10:	c8 59       	subi	r28, 0x98	; 152
    3b12:	d0 40       	sbci	r29, 0x00	; 0
    3b14:	c7 56       	subi	r28, 0x67	; 103
    3b16:	df 4f       	sbci	r29, 0xFF	; 255
    3b18:	38 81       	ld	r19, Y
    3b1a:	c9 59       	subi	r28, 0x99	; 153
    3b1c:	d0 40       	sbci	r29, 0x00	; 0
    3b1e:	c6 56       	subi	r28, 0x66	; 102
    3b20:	df 4f       	sbci	r29, 0xFF	; 255
    3b22:	48 81       	ld	r20, Y
    3b24:	ca 59       	subi	r28, 0x9A	; 154
    3b26:	d0 40       	sbci	r29, 0x00	; 0
    3b28:	c5 56       	subi	r28, 0x65	; 101
    3b2a:	df 4f       	sbci	r29, 0xFF	; 255
    3b2c:	58 81       	ld	r21, Y
    3b2e:	cb 59       	subi	r28, 0x9B	; 155
    3b30:	d0 40       	sbci	r29, 0x00	; 0
    3b32:	c4 56       	subi	r28, 0x64	; 100
    3b34:	df 4f       	sbci	r29, 0xFF	; 255
    3b36:	68 81       	ld	r22, Y
    3b38:	cc 59       	subi	r28, 0x9C	; 156
    3b3a:	d0 40       	sbci	r29, 0x00	; 0
    3b3c:	c3 56       	subi	r28, 0x63	; 99
    3b3e:	df 4f       	sbci	r29, 0xFF	; 255
    3b40:	78 81       	ld	r23, Y
    3b42:	cd 59       	subi	r28, 0x9D	; 157
    3b44:	d0 40       	sbci	r29, 0x00	; 0
    3b46:	c2 56       	subi	r28, 0x62	; 98
    3b48:	df 4f       	sbci	r29, 0xFF	; 255
    3b4a:	88 81       	ld	r24, Y
    3b4c:	ce 59       	subi	r28, 0x9E	; 158
    3b4e:	d0 40       	sbci	r29, 0x00	; 0
    3b50:	c1 56       	subi	r28, 0x61	; 97
    3b52:	df 4f       	sbci	r29, 0xFF	; 255
    3b54:	98 81       	ld	r25, Y
    3b56:	cf 59       	subi	r28, 0x9F	; 159
    3b58:	d0 40       	sbci	r29, 0x00	; 0
    3b5a:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__floatdisf>
    3b5e:	6b 01       	movw	r12, r22
    3b60:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e4       	ldi	r19, 0x40	; 64
    3b66:	4c e9       	ldi	r20, 0x9C	; 156
    3b68:	55 e4       	ldi	r21, 0x45	; 69
    3b6a:	c3 01       	movw	r24, r6
    3b6c:	b2 01       	movw	r22, r4
    3b6e:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3b72:	a5 01       	movw	r20, r10
    3b74:	94 01       	movw	r18, r8
    3b76:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3b7a:	9b 01       	movw	r18, r22
    3b7c:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3b7e:	c7 01       	movw	r24, r14
    3b80:	b6 01       	movw	r22, r12
    3b82:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3b86:	9f 93       	push	r25
    3b88:	8f 93       	push	r24
    3b8a:	7f 93       	push	r23
    3b8c:	6f 93       	push	r22
    3b8e:	6c 81       	ldd	r22, Y+4	; 0x04
    3b90:	7d 81       	ldd	r23, Y+5	; 0x05
    3b92:	8e 81       	ldd	r24, Y+6	; 0x06
    3b94:	9f 81       	ldd	r25, Y+7	; 0x07
    3b96:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3b9a:	6b 01       	movw	r12, r22
    3b9c:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 e8       	ldi	r20, 0x80	; 128
    3ba4:	53 e4       	ldi	r21, 0x43	; 67
    3ba6:	68 85       	ldd	r22, Y+8	; 0x08
    3ba8:	79 85       	ldd	r23, Y+9	; 0x09
    3baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    3bac:	9b 85       	ldd	r25, Y+11	; 0x0b
    3bae:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3bb2:	2c 85       	ldd	r18, Y+12	; 0x0c
    3bb4:	3d 85       	ldd	r19, Y+13	; 0x0d
    3bb6:	4e 85       	ldd	r20, Y+14	; 0x0e
    3bb8:	5f 85       	ldd	r21, Y+15	; 0x0f
    3bba:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3bbe:	9b 01       	movw	r18, r22
    3bc0:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3bc2:	c7 01       	movw	r24, r14
    3bc4:	b6 01       	movw	r22, r12
    3bc6:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3bca:	9f 93       	push	r25
    3bcc:	8f 93       	push	r24
    3bce:	7f 93       	push	r23
    3bd0:	6f 93       	push	r22
    3bd2:	68 89       	ldd	r22, Y+16	; 0x10
    3bd4:	79 89       	ldd	r23, Y+17	; 0x11
    3bd6:	8a 89       	ldd	r24, Y+18	; 0x12
    3bd8:	9b 89       	ldd	r25, Y+19	; 0x13
    3bda:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3bde:	6b 01       	movw	r12, r22
    3be0:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	57 e4       	ldi	r21, 0x47	; 71
    3bea:	6c 89       	ldd	r22, Y+20	; 0x14
    3bec:	7d 89       	ldd	r23, Y+21	; 0x15
    3bee:	8e 89       	ldd	r24, Y+22	; 0x16
    3bf0:	9f 89       	ldd	r25, Y+23	; 0x17
    3bf2:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3bf6:	9b 01       	movw	r18, r22
    3bf8:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3bfa:	c7 01       	movw	r24, r14
    3bfc:	b6 01       	movw	r22, r12
    3bfe:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3c02:	9f 93       	push	r25
    3c04:	8f 93       	push	r24
    3c06:	7f 93       	push	r23
    3c08:	6f 93       	push	r22
    3c0a:	68 8d       	ldd	r22, Y+24	; 0x18
    3c0c:	79 8d       	ldd	r23, Y+25	; 0x19
    3c0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c10:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c12:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3c16:	6b 01       	movw	r12, r22
    3c18:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 e8       	ldi	r20, 0x80	; 128
    3c20:	57 e4       	ldi	r21, 0x47	; 71
    3c22:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3c24:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3c26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c28:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c2a:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3c2e:	9b 01       	movw	r18, r22
    3c30:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3c32:	c7 01       	movw	r24, r14
    3c34:	b6 01       	movw	r22, r12
    3c36:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3c3a:	9f 93       	push	r25
    3c3c:	8f 93       	push	r24
    3c3e:	7f 93       	push	r23
    3c40:	6f 93       	push	r22
    3c42:	c0 56       	subi	r28, 0x60	; 96
    3c44:	df 4f       	sbci	r29, 0xFF	; 255
    3c46:	28 81       	ld	r18, Y
    3c48:	c0 5a       	subi	r28, 0xA0	; 160
    3c4a:	d0 40       	sbci	r29, 0x00	; 0
    3c4c:	cf 55       	subi	r28, 0x5F	; 95
    3c4e:	df 4f       	sbci	r29, 0xFF	; 255
    3c50:	38 81       	ld	r19, Y
    3c52:	c1 5a       	subi	r28, 0xA1	; 161
    3c54:	d0 40       	sbci	r29, 0x00	; 0
    3c56:	ce 55       	subi	r28, 0x5E	; 94
    3c58:	df 4f       	sbci	r29, 0xFF	; 255
    3c5a:	48 81       	ld	r20, Y
    3c5c:	c2 5a       	subi	r28, 0xA2	; 162
    3c5e:	d0 40       	sbci	r29, 0x00	; 0
    3c60:	cd 55       	subi	r28, 0x5D	; 93
    3c62:	df 4f       	sbci	r29, 0xFF	; 255
    3c64:	58 81       	ld	r21, Y
    3c66:	c3 5a       	subi	r28, 0xA3	; 163
    3c68:	d0 40       	sbci	r29, 0x00	; 0
    3c6a:	cc 55       	subi	r28, 0x5C	; 92
    3c6c:	df 4f       	sbci	r29, 0xFF	; 255
    3c6e:	68 81       	ld	r22, Y
    3c70:	c4 5a       	subi	r28, 0xA4	; 164
    3c72:	d0 40       	sbci	r29, 0x00	; 0
    3c74:	cb 55       	subi	r28, 0x5B	; 91
    3c76:	df 4f       	sbci	r29, 0xFF	; 255
    3c78:	78 81       	ld	r23, Y
    3c7a:	c5 5a       	subi	r28, 0xA5	; 165
    3c7c:	d0 40       	sbci	r29, 0x00	; 0
    3c7e:	ca 55       	subi	r28, 0x5A	; 90
    3c80:	df 4f       	sbci	r29, 0xFF	; 255
    3c82:	88 81       	ld	r24, Y
    3c84:	c6 5a       	subi	r28, 0xA6	; 166
    3c86:	d0 40       	sbci	r29, 0x00	; 0
    3c88:	c0 53       	subi	r28, 0x30	; 48
    3c8a:	df 4f       	sbci	r29, 0xFF	; 255
    3c8c:	98 81       	ld	r25, Y
    3c8e:	c0 5d       	subi	r28, 0xD0	; 208
    3c90:	d0 40       	sbci	r29, 0x00	; 0
    3c92:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__floatdisf>
    3c96:	6b 01       	movw	r12, r22
    3c98:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e4       	ldi	r19, 0x40	; 64
    3c9e:	4c e9       	ldi	r20, 0x9C	; 156
    3ca0:	55 e4       	ldi	r21, 0x45	; 69
    3ca2:	68 a1       	ldd	r22, Y+32	; 0x20
    3ca4:	79 a1       	ldd	r23, Y+33	; 0x21
    3ca6:	8a a1       	ldd	r24, Y+34	; 0x22
    3ca8:	9b a1       	ldd	r25, Y+35	; 0x23
    3caa:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3cae:	2c a1       	ldd	r18, Y+36	; 0x24
    3cb0:	3d a1       	ldd	r19, Y+37	; 0x25
    3cb2:	4e a1       	ldd	r20, Y+38	; 0x26
    3cb4:	5f a1       	ldd	r21, Y+39	; 0x27
    3cb6:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3cba:	9b 01       	movw	r18, r22
    3cbc:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3cbe:	c7 01       	movw	r24, r14
    3cc0:	b6 01       	movw	r22, r12
    3cc2:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3cc6:	9f 93       	push	r25
    3cc8:	8f 93       	push	r24
    3cca:	7f 93       	push	r23
    3ccc:	6f 93       	push	r22
    3cce:	68 a5       	ldd	r22, Y+40	; 0x28
    3cd0:	79 a5       	ldd	r23, Y+41	; 0x29
    3cd2:	8a a5       	ldd	r24, Y+42	; 0x2a
    3cd4:	9b a5       	ldd	r25, Y+43	; 0x2b
    3cd6:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3cda:	6b 01       	movw	r12, r22
    3cdc:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e8       	ldi	r20, 0x80	; 128
    3ce4:	53 e4       	ldi	r21, 0x43	; 67
    3ce6:	6c a5       	ldd	r22, Y+44	; 0x2c
    3ce8:	7d a5       	ldd	r23, Y+45	; 0x2d
    3cea:	8e a5       	ldd	r24, Y+46	; 0x2e
    3cec:	9f a5       	ldd	r25, Y+47	; 0x2f
    3cee:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3cf2:	28 a9       	ldd	r18, Y+48	; 0x30
    3cf4:	39 a9       	ldd	r19, Y+49	; 0x31
    3cf6:	4a a9       	ldd	r20, Y+50	; 0x32
    3cf8:	5b a9       	ldd	r21, Y+51	; 0x33
    3cfa:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3cfe:	9b 01       	movw	r18, r22
    3d00:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3d02:	c7 01       	movw	r24, r14
    3d04:	b6 01       	movw	r22, r12
    3d06:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3d0a:	9f 93       	push	r25
    3d0c:	8f 93       	push	r24
    3d0e:	7f 93       	push	r23
    3d10:	6f 93       	push	r22
    3d12:	6c a9       	ldd	r22, Y+52	; 0x34
    3d14:	7d a9       	ldd	r23, Y+53	; 0x35
    3d16:	8e a9       	ldd	r24, Y+54	; 0x36
    3d18:	9f a9       	ldd	r25, Y+55	; 0x37
    3d1a:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3d1e:	6b 01       	movw	r12, r22
    3d20:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	40 e8       	ldi	r20, 0x80	; 128
    3d28:	57 e4       	ldi	r21, 0x47	; 71
    3d2a:	68 ad       	ldd	r22, Y+56	; 0x38
    3d2c:	79 ad       	ldd	r23, Y+57	; 0x39
    3d2e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d30:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d32:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3d36:	9b 01       	movw	r18, r22
    3d38:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3d3a:	c7 01       	movw	r24, r14
    3d3c:	b6 01       	movw	r22, r12
    3d3e:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3d42:	9f 93       	push	r25
    3d44:	8f 93       	push	r24
    3d46:	7f 93       	push	r23
    3d48:	6f 93       	push	r22
    3d4a:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d4c:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d4e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d50:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d52:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3d56:	6b 01       	movw	r12, r22
    3d58:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	40 e8       	ldi	r20, 0x80	; 128
    3d60:	57 e4       	ldi	r21, 0x47	; 71
    3d62:	24 96       	adiw	r28, 0x04	; 4
    3d64:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d66:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d68:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d6c:	24 97       	sbiw	r28, 0x04	; 4
    3d6e:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3d72:	9b 01       	movw	r18, r22
    3d74:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3d76:	c7 01       	movw	r24, r14
    3d78:	b6 01       	movw	r22, r12
    3d7a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3d7e:	9f 93       	push	r25
    3d80:	8f 93       	push	r24
    3d82:	7f 93       	push	r23
    3d84:	6f 93       	push	r22
    3d86:	c9 55       	subi	r28, 0x59	; 89
    3d88:	df 4f       	sbci	r29, 0xFF	; 255
    3d8a:	28 81       	ld	r18, Y
    3d8c:	c7 5a       	subi	r28, 0xA7	; 167
    3d8e:	d0 40       	sbci	r29, 0x00	; 0
    3d90:	c8 55       	subi	r28, 0x58	; 88
    3d92:	df 4f       	sbci	r29, 0xFF	; 255
    3d94:	38 81       	ld	r19, Y
    3d96:	c8 5a       	subi	r28, 0xA8	; 168
    3d98:	d0 40       	sbci	r29, 0x00	; 0
    3d9a:	c7 55       	subi	r28, 0x57	; 87
    3d9c:	df 4f       	sbci	r29, 0xFF	; 255
    3d9e:	48 81       	ld	r20, Y
    3da0:	c9 5a       	subi	r28, 0xA9	; 169
    3da2:	d0 40       	sbci	r29, 0x00	; 0
    3da4:	c6 55       	subi	r28, 0x56	; 86
    3da6:	df 4f       	sbci	r29, 0xFF	; 255
    3da8:	58 81       	ld	r21, Y
    3daa:	ca 5a       	subi	r28, 0xAA	; 170
    3dac:	d0 40       	sbci	r29, 0x00	; 0
    3dae:	c5 55       	subi	r28, 0x55	; 85
    3db0:	df 4f       	sbci	r29, 0xFF	; 255
    3db2:	68 81       	ld	r22, Y
    3db4:	cb 5a       	subi	r28, 0xAB	; 171
    3db6:	d0 40       	sbci	r29, 0x00	; 0
    3db8:	c4 55       	subi	r28, 0x54	; 84
    3dba:	df 4f       	sbci	r29, 0xFF	; 255
    3dbc:	78 81       	ld	r23, Y
    3dbe:	cc 5a       	subi	r28, 0xAC	; 172
    3dc0:	d0 40       	sbci	r29, 0x00	; 0
    3dc2:	c3 55       	subi	r28, 0x53	; 83
    3dc4:	df 4f       	sbci	r29, 0xFF	; 255
    3dc6:	88 81       	ld	r24, Y
    3dc8:	cd 5a       	subi	r28, 0xAD	; 173
    3dca:	d0 40       	sbci	r29, 0x00	; 0
    3dcc:	cf 52       	subi	r28, 0x2F	; 47
    3dce:	df 4f       	sbci	r29, 0xFF	; 255
    3dd0:	98 81       	ld	r25, Y
    3dd2:	c1 5d       	subi	r28, 0xD1	; 209
    3dd4:	d0 40       	sbci	r29, 0x00	; 0
    3dd6:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__floatdisf>
    3dda:	6b 01       	movw	r12, r22
    3ddc:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
    3dde:	20 e0       	ldi	r18, 0x00	; 0
    3de0:	30 e4       	ldi	r19, 0x40	; 64
    3de2:	4c e9       	ldi	r20, 0x9C	; 156
    3de4:	55 e4       	ldi	r21, 0x45	; 69
    3de6:	28 96       	adiw	r28, 0x08	; 8
    3de8:	6c ad       	ldd	r22, Y+60	; 0x3c
    3dea:	7d ad       	ldd	r23, Y+61	; 0x3d
    3dec:	8e ad       	ldd	r24, Y+62	; 0x3e
    3dee:	9f ad       	ldd	r25, Y+63	; 0x3f
    3df0:	28 97       	sbiw	r28, 0x08	; 8
    3df2:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3df6:	2c 96       	adiw	r28, 0x0c	; 12
    3df8:	2c ad       	ldd	r18, Y+60	; 0x3c
    3dfa:	3d ad       	ldd	r19, Y+61	; 0x3d
    3dfc:	4e ad       	ldd	r20, Y+62	; 0x3e
    3dfe:	5f ad       	ldd	r21, Y+63	; 0x3f
    3e00:	2c 97       	sbiw	r28, 0x0c	; 12
    3e02:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3e06:	9b 01       	movw	r18, r22
    3e08:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e0a:	c7 01       	movw	r24, r14
    3e0c:	b6 01       	movw	r22, r12
    3e0e:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3e12:	9f 93       	push	r25
    3e14:	8f 93       	push	r24
    3e16:	7f 93       	push	r23
    3e18:	6f 93       	push	r22
    3e1a:	60 96       	adiw	r28, 0x10	; 16
    3e1c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e1e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e20:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e22:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e24:	60 97       	sbiw	r28, 0x10	; 16
    3e26:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3e2a:	6b 01       	movw	r12, r22
    3e2c:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
    3e2e:	20 e0       	ldi	r18, 0x00	; 0
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	40 e8       	ldi	r20, 0x80	; 128
    3e34:	53 e4       	ldi	r21, 0x43	; 67
    3e36:	64 96       	adiw	r28, 0x14	; 20
    3e38:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e3a:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e40:	64 97       	sbiw	r28, 0x14	; 20
    3e42:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3e46:	68 96       	adiw	r28, 0x18	; 24
    3e48:	2c ad       	ldd	r18, Y+60	; 0x3c
    3e4a:	3d ad       	ldd	r19, Y+61	; 0x3d
    3e4c:	4e ad       	ldd	r20, Y+62	; 0x3e
    3e4e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3e50:	68 97       	sbiw	r28, 0x18	; 24
    3e52:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3e56:	9b 01       	movw	r18, r22
    3e58:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e5a:	c7 01       	movw	r24, r14
    3e5c:	b6 01       	movw	r22, r12
    3e5e:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3e62:	9f 93       	push	r25
    3e64:	8f 93       	push	r24
    3e66:	7f 93       	push	r23
    3e68:	6f 93       	push	r22
    3e6a:	6c 96       	adiw	r28, 0x1c	; 28
    3e6c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e6e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e70:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e72:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e74:	6c 97       	sbiw	r28, 0x1c	; 28
    3e76:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3e7a:	6b 01       	movw	r12, r22
    3e7c:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	40 e8       	ldi	r20, 0x80	; 128
    3e84:	57 e4       	ldi	r21, 0x47	; 71
    3e86:	a0 96       	adiw	r28, 0x20	; 32
    3e88:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e8a:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e90:	a0 97       	sbiw	r28, 0x20	; 32
    3e92:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3e96:	9b 01       	movw	r18, r22
    3e98:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3e9a:	c7 01       	movw	r24, r14
    3e9c:	b6 01       	movw	r22, r12
    3e9e:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3ea2:	9f 93       	push	r25
    3ea4:	8f 93       	push	r24
    3ea6:	7f 93       	push	r23
    3ea8:	6f 93       	push	r22
    3eaa:	a4 96       	adiw	r28, 0x24	; 36
    3eac:	6c ad       	ldd	r22, Y+60	; 0x3c
    3eae:	7d ad       	ldd	r23, Y+61	; 0x3d
    3eb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3eb4:	a4 97       	sbiw	r28, 0x24	; 36
    3eb6:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3eba:	6b 01       	movw	r12, r22
    3ebc:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
    3ebe:	20 e0       	ldi	r18, 0x00	; 0
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e8       	ldi	r20, 0x80	; 128
    3ec4:	57 e4       	ldi	r21, 0x47	; 71
    3ec6:	a8 96       	adiw	r28, 0x28	; 40
    3ec8:	6c ad       	ldd	r22, Y+60	; 0x3c
    3eca:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ecc:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ece:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ed0:	a8 97       	sbiw	r28, 0x28	; 40
    3ed2:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3ed6:	9b 01       	movw	r18, r22
    3ed8:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3eda:	c7 01       	movw	r24, r14
    3edc:	b6 01       	movw	r22, r12
    3ede:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3ee2:	9f 93       	push	r25
    3ee4:	8f 93       	push	r24
    3ee6:	7f 93       	push	r23
    3ee8:	6f 93       	push	r22
    3eea:	c2 55       	subi	r28, 0x52	; 82
    3eec:	df 4f       	sbci	r29, 0xFF	; 255
    3eee:	28 81       	ld	r18, Y
    3ef0:	ce 5a       	subi	r28, 0xAE	; 174
    3ef2:	d0 40       	sbci	r29, 0x00	; 0
    3ef4:	c1 55       	subi	r28, 0x51	; 81
    3ef6:	df 4f       	sbci	r29, 0xFF	; 255
    3ef8:	38 81       	ld	r19, Y
    3efa:	cf 5a       	subi	r28, 0xAF	; 175
    3efc:	d0 40       	sbci	r29, 0x00	; 0
    3efe:	c0 55       	subi	r28, 0x50	; 80
    3f00:	df 4f       	sbci	r29, 0xFF	; 255
    3f02:	48 81       	ld	r20, Y
    3f04:	c0 5b       	subi	r28, 0xB0	; 176
    3f06:	d0 40       	sbci	r29, 0x00	; 0
    3f08:	cf 54       	subi	r28, 0x4F	; 79
    3f0a:	df 4f       	sbci	r29, 0xFF	; 255
    3f0c:	58 81       	ld	r21, Y
    3f0e:	c1 5b       	subi	r28, 0xB1	; 177
    3f10:	d0 40       	sbci	r29, 0x00	; 0
    3f12:	ce 54       	subi	r28, 0x4E	; 78
    3f14:	df 4f       	sbci	r29, 0xFF	; 255
    3f16:	68 81       	ld	r22, Y
    3f18:	c2 5b       	subi	r28, 0xB2	; 178
    3f1a:	d0 40       	sbci	r29, 0x00	; 0
    3f1c:	cd 54       	subi	r28, 0x4D	; 77
    3f1e:	df 4f       	sbci	r29, 0xFF	; 255
    3f20:	78 81       	ld	r23, Y
    3f22:	c3 5b       	subi	r28, 0xB3	; 179
    3f24:	d0 40       	sbci	r29, 0x00	; 0
    3f26:	cc 54       	subi	r28, 0x4C	; 76
    3f28:	df 4f       	sbci	r29, 0xFF	; 255
    3f2a:	88 81       	ld	r24, Y
    3f2c:	c4 5b       	subi	r28, 0xB4	; 180
    3f2e:	d0 40       	sbci	r29, 0x00	; 0
    3f30:	cb 54       	subi	r28, 0x4B	; 75
    3f32:	df 4f       	sbci	r29, 0xFF	; 255
    3f34:	98 81       	ld	r25, Y
    3f36:	c5 5b       	subi	r28, 0xB5	; 181
    3f38:	d0 40       	sbci	r29, 0x00	; 0
    3f3a:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__floatdisf>
    3f3e:	6b 01       	movw	r12, r22
    3f40:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
    3f42:	20 e0       	ldi	r18, 0x00	; 0
    3f44:	30 e4       	ldi	r19, 0x40	; 64
    3f46:	4c e9       	ldi	r20, 0x9C	; 156
    3f48:	55 e4       	ldi	r21, 0x45	; 69
    3f4a:	ac 96       	adiw	r28, 0x2c	; 44
    3f4c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f4e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3f50:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f52:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f54:	ac 97       	sbiw	r28, 0x2c	; 44
    3f56:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3f5a:	e0 96       	adiw	r28, 0x30	; 48
    3f5c:	2c ad       	ldd	r18, Y+60	; 0x3c
    3f5e:	3d ad       	ldd	r19, Y+61	; 0x3d
    3f60:	4e ad       	ldd	r20, Y+62	; 0x3e
    3f62:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f64:	e0 97       	sbiw	r28, 0x30	; 48
    3f66:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3f6a:	9b 01       	movw	r18, r22
    3f6c:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3f6e:	c7 01       	movw	r24, r14
    3f70:	b6 01       	movw	r22, r12
    3f72:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3f76:	9f 93       	push	r25
    3f78:	8f 93       	push	r24
    3f7a:	7f 93       	push	r23
    3f7c:	6f 93       	push	r22
    3f7e:	e4 96       	adiw	r28, 0x34	; 52
    3f80:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f82:	7d ad       	ldd	r23, Y+61	; 0x3d
    3f84:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f86:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f88:	e4 97       	sbiw	r28, 0x34	; 52
    3f8a:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3f8e:	6b 01       	movw	r12, r22
    3f90:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e8       	ldi	r20, 0x80	; 128
    3f98:	53 e4       	ldi	r21, 0x43	; 67
    3f9a:	e8 96       	adiw	r28, 0x38	; 56
    3f9c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f9e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3fa0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fa2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fa4:	e8 97       	sbiw	r28, 0x38	; 56
    3fa6:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3faa:	ec 96       	adiw	r28, 0x3c	; 60
    3fac:	2c ad       	ldd	r18, Y+60	; 0x3c
    3fae:	3d ad       	ldd	r19, Y+61	; 0x3d
    3fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
    3fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
    3fb4:	ec 97       	sbiw	r28, 0x3c	; 60
    3fb6:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    3fba:	9b 01       	movw	r18, r22
    3fbc:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3fbe:	c7 01       	movw	r24, r14
    3fc0:	b6 01       	movw	r22, r12
    3fc2:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    3fc6:	9f 93       	push	r25
    3fc8:	8f 93       	push	r24
    3fca:	7f 93       	push	r23
    3fcc:	6f 93       	push	r22
    3fce:	c4 58       	subi	r28, 0x84	; 132
    3fd0:	df 4f       	sbci	r29, 0xFF	; 255
    3fd2:	68 81       	ld	r22, Y
    3fd4:	79 81       	ldd	r23, Y+1	; 0x01
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    3fda:	cc 57       	subi	r28, 0x7C	; 124
    3fdc:	d0 40       	sbci	r29, 0x00	; 0
    3fde:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    3fe2:	6b 01       	movw	r12, r22
    3fe4:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	40 e8       	ldi	r20, 0x80	; 128
    3fec:	57 e4       	ldi	r21, 0x47	; 71
    3fee:	c0 58       	subi	r28, 0x80	; 128
    3ff0:	df 4f       	sbci	r29, 0xFF	; 255
    3ff2:	68 81       	ld	r22, Y
    3ff4:	79 81       	ldd	r23, Y+1	; 0x01
    3ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    3ffa:	c0 58       	subi	r28, 0x80	; 128
    3ffc:	d0 40       	sbci	r29, 0x00	; 0
    3ffe:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    4002:	9b 01       	movw	r18, r22
    4004:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4006:	c7 01       	movw	r24, r14
    4008:	b6 01       	movw	r22, r12
    400a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    400e:	9f 93       	push	r25
    4010:	8f 93       	push	r24
    4012:	7f 93       	push	r23
    4014:	6f 93       	push	r22
    4016:	cc 57       	subi	r28, 0x7C	; 124
    4018:	df 4f       	sbci	r29, 0xFF	; 255
    401a:	68 81       	ld	r22, Y
    401c:	79 81       	ldd	r23, Y+1	; 0x01
    401e:	8a 81       	ldd	r24, Y+2	; 0x02
    4020:	9b 81       	ldd	r25, Y+3	; 0x03
    4022:	c4 58       	subi	r28, 0x84	; 132
    4024:	d0 40       	sbci	r29, 0x00	; 0
    4026:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    402a:	6b 01       	movw	r12, r22
    402c:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	40 e8       	ldi	r20, 0x80	; 128
    4034:	57 e4       	ldi	r21, 0x47	; 71
    4036:	c8 57       	subi	r28, 0x78	; 120
    4038:	df 4f       	sbci	r29, 0xFF	; 255
    403a:	68 81       	ld	r22, Y
    403c:	79 81       	ldd	r23, Y+1	; 0x01
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	9b 81       	ldd	r25, Y+3	; 0x03
    4042:	c8 58       	subi	r28, 0x88	; 136
    4044:	d0 40       	sbci	r29, 0x00	; 0
    4046:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    404a:	9b 01       	movw	r18, r22
    404c:	ac 01       	movw	r20, r24

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    404e:	c7 01       	movw	r24, r14
    4050:	b6 01       	movw	r22, r12
    4052:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    4056:	9f 93       	push	r25
    4058:	8f 93       	push	r24
    405a:	7f 93       	push	r23
    405c:	6f 93       	push	r22
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    405e:	c4 57       	subi	r28, 0x74	; 116
    4060:	df 4f       	sbci	r29, 0xFF	; 255
    4062:	68 81       	ld	r22, Y
    4064:	79 81       	ldd	r23, Y+1	; 0x01
    4066:	8a 81       	ldd	r24, Y+2	; 0x02
    4068:	9b 81       	ldd	r25, Y+3	; 0x03
    406a:	cc 58       	subi	r28, 0x8C	; 140
    406c:	d0 40       	sbci	r29, 0x00	; 0
    406e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    4072:	20 e0       	ldi	r18, 0x00	; 0
    4074:	30 e4       	ldi	r19, 0x40	; 64
    4076:	4c e9       	ldi	r20, 0x9C	; 156
    4078:	55 e4       	ldi	r21, 0x45	; 69
    407a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    407e:	9f 93       	push	r25
    4080:	8f 93       	push	r24
    4082:	7f 93       	push	r23
    4084:	6f 93       	push	r22
    4086:	8e ec       	ldi	r24, 0xCE	; 206
    4088:	95 e2       	ldi	r25, 0x25	; 37
    408a:	9f 93       	push	r25
    408c:	8f 93       	push	r24
    408e:	c9 54       	subi	r28, 0x49	; 73
    4090:	df 4f       	sbci	r29, 0xFF	; 255
    4092:	b8 81       	ld	r27, Y
    4094:	c7 5b       	subi	r28, 0xB7	; 183
    4096:	d0 40       	sbci	r29, 0x00	; 0
    4098:	bf 93       	push	r27
    409a:	ca 54       	subi	r28, 0x4A	; 74
    409c:	df 4f       	sbci	r29, 0xFF	; 255
    409e:	e8 81       	ld	r30, Y
    40a0:	c6 5b       	subi	r28, 0xB6	; 182
    40a2:	d0 40       	sbci	r29, 0x00	; 0
    40a4:	ef 93       	push	r30
    40a6:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    40aa:	cd bf       	out	0x3d, r28	; 61
    40ac:	de bf       	out	0x3e, r29	; 62
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_H2A */
    40ae:	cf 52       	subi	r28, 0x2F	; 47
    40b0:	df 4f       	sbci	r29, 0xFF	; 255
    40b2:	cd bf       	out	0x3d, r28	; 61
    40b4:	de bf       	out	0x3e, r29	; 62
    40b6:	df 91       	pop	r29
    40b8:	cf 91       	pop	r28
    40ba:	1f 91       	pop	r17
    40bc:	0f 91       	pop	r16
    40be:	ff 90       	pop	r15
    40c0:	ef 90       	pop	r14
    40c2:	df 90       	pop	r13
    40c4:	cf 90       	pop	r12
    40c6:	bf 90       	pop	r11
    40c8:	af 90       	pop	r10
    40ca:	9f 90       	pop	r9
    40cc:	8f 90       	pop	r8
    40ce:	7f 90       	pop	r7
    40d0:	6f 90       	pop	r6
    40d2:	5f 90       	pop	r5
    40d4:	4f 90       	pop	r4
    40d6:	3f 90       	pop	r3
    40d8:	2f 90       	pop	r2
    40da:	08 95       	ret

000040dc <PrintCSV_EVA>:




void PrintCSV_EVA(FILE *fp) {
    40dc:	2f 92       	push	r2
    40de:	3f 92       	push	r3
    40e0:	4f 92       	push	r4
    40e2:	5f 92       	push	r5
    40e4:	6f 92       	push	r6
    40e6:	7f 92       	push	r7
    40e8:	8f 92       	push	r8
    40ea:	9f 92       	push	r9
    40ec:	af 92       	push	r10
    40ee:	bf 92       	push	r11
    40f0:	cf 92       	push	r12
    40f2:	df 92       	push	r13
    40f4:	ef 92       	push	r14
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	c3 58       	subi	r28, 0x83	; 131
    4106:	d1 09       	sbc	r29, r1
    4108:	cd bf       	out	0x3d, r28	; 61
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	ae 96       	adiw	r28, 0x2e	; 46
    410e:	8f af       	std	Y+63, r24	; 0x3f
    4110:	ae 97       	sbiw	r28, 0x2e	; 46
    4112:	af 96       	adiw	r28, 0x2f	; 47
    4114:	9f af       	std	Y+63, r25	; 0x3f
    4116:	af 97       	sbiw	r28, 0x2f	; 47
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    4118:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>



void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    411c:	81 11       	cpse	r24, r1
    411e:	fc cf       	rjmp	.-8      	; 0x4118 <PrintCSV_EVA+0x3c>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
    4120:	60 91 d8 29 	lds	r22, 0x29D8	; 0x8029d8 <sSensorDataSnapshot+0x6c>
    4124:	70 91 d9 29 	lds	r23, 0x29D9	; 0x8029d9 <sSensorDataSnapshot+0x6d>
    4128:	80 91 da 29 	lds	r24, 0x29DA	; 0x8029da <sSensorDataSnapshot+0x6e>
    412c:	90 91 db 29 	lds	r25, 0x29DB	; 0x8029db <sSensorDataSnapshot+0x6f>
    4130:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e4       	ldi	r19, 0x40	; 64
    4138:	4c e9       	ldi	r20, 0x9C	; 156
    413a:	55 e4       	ldi	r21, 0x45	; 69
    413c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    4140:	e0 96       	adiw	r28, 0x30	; 48
    4142:	6f af       	std	Y+63, r22	; 0x3f
    4144:	e0 97       	sbiw	r28, 0x30	; 48
    4146:	e1 96       	adiw	r28, 0x31	; 49
    4148:	7f af       	std	Y+63, r23	; 0x3f
    414a:	e1 97       	sbiw	r28, 0x31	; 49
    414c:	e2 96       	adiw	r28, 0x32	; 50
    414e:	8f af       	std	Y+63, r24	; 0x3f
    4150:	e2 97       	sbiw	r28, 0x32	; 50
    4152:	e3 96       	adiw	r28, 0x33	; 51
    4154:	9f af       	std	Y+63, r25	; 0x3f
    4156:	e3 97       	sbiw	r28, 0x33	; 51
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
    4158:	20 91 cf 29 	lds	r18, 0x29CF	; 0x8029cf <sSensorDataSnapshot+0x63>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    415c:	91 e0       	ldi	r25, 0x01	; 1
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	21 11       	cpse	r18, r1
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	69 96       	adiw	r28, 0x19	; 25
    4166:	9f af       	std	Y+63, r25	; 0x3f
    4168:	69 97       	sbiw	r28, 0x19	; 25
    416a:	6a 96       	adiw	r28, 0x1a	; 26
    416c:	8f af       	std	Y+63, r24	; 0x3f
    416e:	6a 97       	sbiw	r28, 0x1a	; 26
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    4170:	80 91 e0 29 	lds	r24, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x74>
    4174:	90 91 e1 29 	lds	r25, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x75>
    4178:	a0 91 e2 29 	lds	r26, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x76>
    417c:	b0 91 e3 29 	lds	r27, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x77>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4180:	89 2b       	or	r24, r25
    4182:	8a 2b       	or	r24, r26
    4184:	8b 2b       	or	r24, r27
    4186:	69 f1       	breq	.+90     	; 0x41e2 <PrintCSV_EVA+0x106>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    4188:	60 91 e0 29 	lds	r22, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x74>
    418c:	70 91 e1 29 	lds	r23, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x75>
    4190:	80 91 e2 29 	lds	r24, 0x29E2	; 0x8029e2 <sSensorDataSnapshot+0x76>
    4194:	90 91 e3 29 	lds	r25, 0x29E3	; 0x8029e3 <sSensorDataSnapshot+0x77>
    4198:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	40 e8       	ldi	r20, 0x80	; 128
    41a2:	57 e3       	ldi	r21, 0x37	; 55
    41a4:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    41a8:	9b 01       	movw	r18, r22
    41aa:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    41ac:	60 e0       	ldi	r22, 0x00	; 0
    41ae:	78 e5       	ldi	r23, 0x58	; 88
    41b0:	84 ea       	ldi	r24, 0xA4	; 164
    41b2:	94 e4       	ldi	r25, 0x44	; 68
    41b4:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    41b8:	c1 58       	subi	r28, 0x81	; 129
    41ba:	df 4f       	sbci	r29, 0xFF	; 255
    41bc:	68 83       	st	Y, r22
    41be:	cf 57       	subi	r28, 0x7F	; 127
    41c0:	d0 40       	sbci	r29, 0x00	; 0
    41c2:	c0 58       	subi	r28, 0x80	; 128
    41c4:	df 4f       	sbci	r29, 0xFF	; 255
    41c6:	78 83       	st	Y, r23
    41c8:	c0 58       	subi	r28, 0x80	; 128
    41ca:	d0 40       	sbci	r29, 0x00	; 0
    41cc:	cf 57       	subi	r28, 0x7F	; 127
    41ce:	df 4f       	sbci	r29, 0xFF	; 255
    41d0:	88 83       	st	Y, r24
    41d2:	c1 58       	subi	r28, 0x81	; 129
    41d4:	d0 40       	sbci	r29, 0x00	; 0
    41d6:	ce 57       	subi	r28, 0x7E	; 126
    41d8:	df 4f       	sbci	r29, 0xFF	; 255
    41da:	98 83       	st	Y, r25
    41dc:	c2 58       	subi	r28, 0x82	; 130
    41de:	d0 40       	sbci	r29, 0x00	; 0
    41e0:	14 c0       	rjmp	.+40     	; 0x420a <PrintCSV_EVA+0x12e>
    41e2:	c1 58       	subi	r28, 0x81	; 129
    41e4:	df 4f       	sbci	r29, 0xFF	; 255
    41e6:	18 82       	st	Y, r1
    41e8:	cf 57       	subi	r28, 0x7F	; 127
    41ea:	d0 40       	sbci	r29, 0x00	; 0
    41ec:	c0 58       	subi	r28, 0x80	; 128
    41ee:	df 4f       	sbci	r29, 0xFF	; 255
    41f0:	18 82       	st	Y, r1
    41f2:	c0 58       	subi	r28, 0x80	; 128
    41f4:	d0 40       	sbci	r29, 0x00	; 0
    41f6:	cf 57       	subi	r28, 0x7F	; 127
    41f8:	df 4f       	sbci	r29, 0xFF	; 255
    41fa:	18 82       	st	Y, r1
    41fc:	c1 58       	subi	r28, 0x81	; 129
    41fe:	d0 40       	sbci	r29, 0x00	; 0
    4200:	ce 57       	subi	r28, 0x7E	; 126
    4202:	df 4f       	sbci	r29, 0xFF	; 255
    4204:	18 82       	st	Y, r1
    4206:	c2 58       	subi	r28, 0x82	; 130
    4208:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    420a:	10 91 e4 29 	lds	r17, 0x29E4	; 0x8029e4 <sSensorDataSnapshot+0x78>
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    420e:	60 91 d4 29 	lds	r22, 0x29D4	; 0x8029d4 <sSensorDataSnapshot+0x68>
    4212:	70 91 d5 29 	lds	r23, 0x29D5	; 0x8029d5 <sSensorDataSnapshot+0x69>
    4216:	80 91 d6 29 	lds	r24, 0x29D6	; 0x8029d6 <sSensorDataSnapshot+0x6a>
    421a:	90 91 d7 29 	lds	r25, 0x29D7	; 0x8029d7 <sSensorDataSnapshot+0x6b>
    421e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e4       	ldi	r19, 0x40	; 64
    4226:	4c e9       	ldi	r20, 0x9C	; 156
    4228:	55 e4       	ldi	r21, 0x45	; 69
    422a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    422e:	e4 96       	adiw	r28, 0x34	; 52
    4230:	6f af       	std	Y+63, r22	; 0x3f
    4232:	e4 97       	sbiw	r28, 0x34	; 52
    4234:	e5 96       	adiw	r28, 0x35	; 53
    4236:	7f af       	std	Y+63, r23	; 0x3f
    4238:	e5 97       	sbiw	r28, 0x35	; 53
    423a:	e6 96       	adiw	r28, 0x36	; 54
    423c:	8f af       	std	Y+63, r24	; 0x3f
    423e:	e6 97       	sbiw	r28, 0x36	; 54
    4240:	e7 96       	adiw	r28, 0x37	; 55
    4242:	9f af       	std	Y+63, r25	; 0x3f
    4244:	e7 97       	sbiw	r28, 0x37	; 55
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    4246:	20 91 ce 29 	lds	r18, 0x29CE	; 0x8029ce <sSensorDataSnapshot+0x62>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    424a:	91 e0       	ldi	r25, 0x01	; 1
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	21 11       	cpse	r18, r1
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	6b 96       	adiw	r28, 0x1b	; 27
    4254:	9f af       	std	Y+63, r25	; 0x3f
    4256:	6b 97       	sbiw	r28, 0x1b	; 27
    4258:	6c 96       	adiw	r28, 0x1c	; 28
    425a:	8f af       	std	Y+63, r24	; 0x3f
    425c:	6c 97       	sbiw	r28, 0x1c	; 28
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    425e:	60 91 d0 29 	lds	r22, 0x29D0	; 0x8029d0 <sSensorDataSnapshot+0x64>
    4262:	70 91 d1 29 	lds	r23, 0x29D1	; 0x8029d1 <sSensorDataSnapshot+0x65>
    4266:	80 91 d2 29 	lds	r24, 0x29D2	; 0x8029d2 <sSensorDataSnapshot+0x66>
    426a:	90 91 d3 29 	lds	r25, 0x29D3	; 0x8029d3 <sSensorDataSnapshot+0x67>
    426e:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e4       	ldi	r19, 0x40	; 64
    4276:	4c e9       	ldi	r20, 0x9C	; 156
    4278:	55 e4       	ldi	r21, 0x45	; 69
    427a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    427e:	e8 96       	adiw	r28, 0x38	; 56
    4280:	6f af       	std	Y+63, r22	; 0x3f
    4282:	e8 97       	sbiw	r28, 0x38	; 56
    4284:	e9 96       	adiw	r28, 0x39	; 57
    4286:	7f af       	std	Y+63, r23	; 0x3f
    4288:	e9 97       	sbiw	r28, 0x39	; 57
    428a:	ea 96       	adiw	r28, 0x3a	; 58
    428c:	8f af       	std	Y+63, r24	; 0x3f
    428e:	ea 97       	sbiw	r28, 0x3a	; 58
    4290:	eb 96       	adiw	r28, 0x3b	; 59
    4292:	9f af       	std	Y+63, r25	; 0x3f
    4294:	eb 97       	sbiw	r28, 0x3b	; 59
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
    4296:	20 91 cd 29 	lds	r18, 0x29CD	; 0x8029cd <sSensorDataSnapshot+0x61>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    429a:	91 e0       	ldi	r25, 0x01	; 1
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	21 11       	cpse	r18, r1
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	6d 96       	adiw	r28, 0x1d	; 29
    42a4:	9f af       	std	Y+63, r25	; 0x3f
    42a6:	6d 97       	sbiw	r28, 0x1d	; 29
    42a8:	6e 96       	adiw	r28, 0x1e	; 30
    42aa:	8f af       	std	Y+63, r24	; 0x3f
    42ac:	6e 97       	sbiw	r28, 0x1e	; 30
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
    42ae:	60 91 c9 29 	lds	r22, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x5d>
    42b2:	70 91 ca 29 	lds	r23, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x5e>
    42b6:	80 91 cb 29 	lds	r24, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x5f>
    42ba:	90 91 cc 29 	lds	r25, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x60>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    42be:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
    42c2:	2f ed       	ldi	r18, 0xDF	; 223
    42c4:	36 e9       	ldi	r19, 0x96	; 150
    42c6:	45 e9       	ldi	r20, 0x95	; 149
    42c8:	5d e3       	ldi	r21, 0x3D	; 61
    42ca:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    42ce:	ec 96       	adiw	r28, 0x3c	; 60
    42d0:	6f af       	std	Y+63, r22	; 0x3f
    42d2:	ec 97       	sbiw	r28, 0x3c	; 60
    42d4:	ed 96       	adiw	r28, 0x3d	; 61
    42d6:	7f af       	std	Y+63, r23	; 0x3f
    42d8:	ed 97       	sbiw	r28, 0x3d	; 61
    42da:	ee 96       	adiw	r28, 0x3e	; 62
    42dc:	8f af       	std	Y+63, r24	; 0x3f
    42de:	ee 97       	sbiw	r28, 0x3e	; 62
    42e0:	ef 96       	adiw	r28, 0x3f	; 63
    42e2:	9f af       	std	Y+63, r25	; 0x3f
    42e4:	ef 97       	sbiw	r28, 0x3f	; 63
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
    42e6:	60 91 c5 29 	lds	r22, 0x29C5	; 0x8029c5 <sSensorDataSnapshot+0x59>
    42ea:	70 91 c6 29 	lds	r23, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5a>
    42ee:	80 91 c7 29 	lds	r24, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5b>
    42f2:	90 91 c8 29 	lds	r25, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5c>

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    42f6:	61 15       	cp	r22, r1
    42f8:	71 05       	cpc	r23, r1
    42fa:	81 05       	cpc	r24, r1
    42fc:	91 05       	cpc	r25, r1
    42fe:	09 f1       	breq	.+66     	; 0x4342 <PrintCSV_EVA+0x266>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    4300:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	40 e8       	ldi	r20, 0x80	; 128
    430a:	57 e3       	ldi	r21, 0x37	; 55
    430c:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    4310:	9b 01       	movw	r18, r22
    4312:	ac 01       	movw	r20, r24
    4314:	60 e0       	ldi	r22, 0x00	; 0
    4316:	78 e5       	ldi	r23, 0x58	; 88
    4318:	84 ea       	ldi	r24, 0xA4	; 164
    431a:	94 e4       	ldi	r25, 0x44	; 68
    431c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    4320:	69 83       	std	Y+1, r22	; 0x01
    4322:	07 2f       	mov	r16, r23
    4324:	38 2e       	mov	r3, r24
    4326:	29 2e       	mov	r2, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	40 e8       	ldi	r20, 0x80	; 128
    432e:	5f e3       	ldi	r21, 0x3F	; 63
    4330:	0e 94 ab 31 	call	0x6356	; 0x6356 <__cmpsf2>
    4334:	88 23       	and	r24, r24
    4336:	4c f4       	brge	.+18     	; 0x434a <PrintCSV_EVA+0x26e>
		res = 0.0f;
    4338:	19 82       	std	Y+1, r1	; 0x01
    433a:	00 e0       	ldi	r16, 0x00	; 0
    433c:	31 2c       	mov	r3, r1
    433e:	21 2c       	mov	r2, r1
    4340:	04 c0       	rjmp	.+8      	; 0x434a <PrintCSV_EVA+0x26e>
	}
	else
	res = 0.0f;
    4342:	19 82       	std	Y+1, r1	; 0x01
    4344:	00 e0       	ldi	r16, 0x00	; 0
    4346:	31 2c       	mov	r3, r1
    4348:	21 2c       	mov	r2, r1
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    434a:	4c e6       	ldi	r20, 0x6C	; 108
    434c:	59 e2       	ldi	r21, 0x29	; 41
    434e:	60 91 de 29 	lds	r22, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x72>
    4352:	70 91 df 29 	lds	r23, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x73>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    4356:	20 91 dc 29 	lds	r18, 0x29DC	; 0x8029dc <sSensorDataSnapshot+0x70>
    435a:	30 91 dd 29 	lds	r19, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x71>
    435e:	2a 83       	std	Y+2, r18	; 0x02
    4360:	3b 83       	std	Y+3, r19	; 0x03
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    4362:	da 01       	movw	r26, r20
    4364:	9d 96       	adiw	r26, 0x2d	; 45
    4366:	cd 90       	ld	r12, X+
    4368:	dd 90       	ld	r13, X+
    436a:	ed 90       	ld	r14, X+
    436c:	fc 90       	ld	r15, X
    436e:	d0 97       	sbiw	r26, 0x30	; 48
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    4370:	ed eb       	ldi	r30, 0xBD	; 189
    4372:	f9 e2       	ldi	r31, 0x29	; 41
    4374:	b0 81       	ld	r27, Z
    4376:	6f 96       	adiw	r28, 0x1f	; 31
    4378:	bf af       	std	Y+63, r27	; 0x3f
    437a:	6f 97       	sbiw	r28, 0x1f	; 31
    437c:	21 81       	ldd	r18, Z+1	; 0x01
    437e:	a0 96       	adiw	r28, 0x20	; 32
    4380:	2f af       	std	Y+63, r18	; 0x3f
    4382:	a0 97       	sbiw	r28, 0x20	; 32
    4384:	32 81       	ldd	r19, Z+2	; 0x02
    4386:	a1 96       	adiw	r28, 0x21	; 33
    4388:	3f af       	std	Y+63, r19	; 0x3f
    438a:	a1 97       	sbiw	r28, 0x21	; 33
    438c:	83 81       	ldd	r24, Z+3	; 0x03
    438e:	a2 96       	adiw	r28, 0x22	; 34
    4390:	8f af       	std	Y+63, r24	; 0x3f
    4392:	a2 97       	sbiw	r28, 0x22	; 34
    4394:	94 81       	ldd	r25, Z+4	; 0x04
    4396:	a3 96       	adiw	r28, 0x23	; 35
    4398:	9f af       	std	Y+63, r25	; 0x3f
    439a:	a3 97       	sbiw	r28, 0x23	; 35
    439c:	a5 81       	ldd	r26, Z+5	; 0x05
    439e:	a4 96       	adiw	r28, 0x24	; 36
    43a0:	af af       	std	Y+63, r26	; 0x3f
    43a2:	a4 97       	sbiw	r28, 0x24	; 36
    43a4:	b6 81       	ldd	r27, Z+6	; 0x06
    43a6:	a5 96       	adiw	r28, 0x25	; 37
    43a8:	bf af       	std	Y+63, r27	; 0x3f
    43aa:	a5 97       	sbiw	r28, 0x25	; 37
    43ac:	27 81       	ldd	r18, Z+7	; 0x07
    43ae:	a6 96       	adiw	r28, 0x26	; 38
    43b0:	2f af       	std	Y+63, r18	; 0x3f
    43b2:	a6 97       	sbiw	r28, 0x26	; 38
    43b4:	25 ee       	ldi	r18, 0xE5	; 229
    43b6:	39 e2       	ldi	r19, 0x29	; 41
    43b8:	d9 01       	movw	r26, r18
    43ba:	98 96       	adiw	r26, 0x28	; 40
    43bc:	4d 90       	ld	r4, X+
    43be:	5d 90       	ld	r5, X+
    43c0:	6d 90       	ld	r6, X+
    43c2:	7c 90       	ld	r7, X
    43c4:	9b 97       	sbiw	r26, 0x2b	; 43
    43c6:	9c 96       	adiw	r26, 0x2c	; 44
    43c8:	8d 90       	ld	r8, X+
    43ca:	9d 90       	ld	r9, X+
    43cc:	ad 90       	ld	r10, X+
    43ce:	bc 90       	ld	r11, X
    43d0:	9f 97       	sbiw	r26, 0x2f	; 47
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    43d2:	80 91 b1 29 	lds	r24, 0x29B1	; 0x8029b1 <sSensorDataSnapshot+0x45>
    43d6:	90 91 b2 29 	lds	r25, 0x29B2	; 0x8029b2 <sSensorDataSnapshot+0x46>
    43da:	a0 91 b3 29 	lds	r26, 0x29B3	; 0x8029b3 <sSensorDataSnapshot+0x47>
    43de:	b0 91 b4 29 	lds	r27, 0x29B4	; 0x8029b4 <sSensorDataSnapshot+0x48>
    43e2:	8c 83       	std	Y+4, r24	; 0x04
    43e4:	9d 83       	std	Y+5, r25	; 0x05
    43e6:	ae 83       	std	Y+6, r26	; 0x06
    43e8:	bf 83       	std	Y+7, r27	; 0x07
    43ea:	d9 01       	movw	r26, r18
    43ec:	98 96       	adiw	r26, 0x28	; 40
    43ee:	8d 91       	ld	r24, X+
    43f0:	9d 91       	ld	r25, X+
    43f2:	0d 90       	ld	r0, X+
    43f4:	bc 91       	ld	r27, X
    43f6:	a0 2d       	mov	r26, r0
    43f8:	88 87       	std	Y+8, r24	; 0x08
    43fa:	99 87       	std	Y+9, r25	; 0x09
    43fc:	aa 87       	std	Y+10, r26	; 0x0a
    43fe:	bb 87       	std	Y+11, r27	; 0x0b
    4400:	d9 01       	movw	r26, r18
    4402:	9c 96       	adiw	r26, 0x2c	; 44
    4404:	8d 91       	ld	r24, X+
    4406:	9d 91       	ld	r25, X+
    4408:	0d 90       	ld	r0, X+
    440a:	bc 91       	ld	r27, X
    440c:	a0 2d       	mov	r26, r0
    440e:	8c 87       	std	Y+12, r24	; 0x0c
    4410:	9d 87       	std	Y+13, r25	; 0x0d
    4412:	ae 87       	std	Y+14, r26	; 0x0e
    4414:	bf 87       	std	Y+15, r27	; 0x0f
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    4416:	80 91 a9 29 	lds	r24, 0x29A9	; 0x8029a9 <sSensorDataSnapshot+0x3d>
    441a:	90 91 aa 29 	lds	r25, 0x29AA	; 0x8029aa <sSensorDataSnapshot+0x3e>
    441e:	a0 91 ab 29 	lds	r26, 0x29AB	; 0x8029ab <sSensorDataSnapshot+0x3f>
    4422:	b0 91 ac 29 	lds	r27, 0x29AC	; 0x8029ac <sSensorDataSnapshot+0x40>
    4426:	88 8b       	std	Y+16, r24	; 0x10
    4428:	99 8b       	std	Y+17, r25	; 0x11
    442a:	aa 8b       	std	Y+18, r26	; 0x12
    442c:	bb 8b       	std	Y+19, r27	; 0x13
    442e:	d9 01       	movw	r26, r18
    4430:	9c 96       	adiw	r26, 0x2c	; 44
    4432:	8d 91       	ld	r24, X+
    4434:	9d 91       	ld	r25, X+
    4436:	0d 90       	ld	r0, X+
    4438:	bc 91       	ld	r27, X
    443a:	a0 2d       	mov	r26, r0
    443c:	8c 8b       	std	Y+20, r24	; 0x14
    443e:	9d 8b       	std	Y+21, r25	; 0x15
    4440:	ae 8b       	std	Y+22, r26	; 0x16
    4442:	bf 8b       	std	Y+23, r27	; 0x17
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    4444:	da 01       	movw	r26, r20
    4446:	d9 96       	adiw	r26, 0x39	; 57
    4448:	8d 91       	ld	r24, X+
    444a:	9d 91       	ld	r25, X+
    444c:	0d 90       	ld	r0, X+
    444e:	bc 91       	ld	r27, X
    4450:	a0 2d       	mov	r26, r0
    4452:	88 8f       	std	Y+24, r24	; 0x18
    4454:	99 8f       	std	Y+25, r25	; 0x19
    4456:	aa 8f       	std	Y+26, r26	; 0x1a
    4458:	bb 8f       	std	Y+27, r27	; 0x1b
    445a:	d9 01       	movw	r26, r18
    445c:	98 96       	adiw	r26, 0x28	; 40
    445e:	8d 91       	ld	r24, X+
    4460:	9d 91       	ld	r25, X+
    4462:	0d 90       	ld	r0, X+
    4464:	bc 91       	ld	r27, X
    4466:	a0 2d       	mov	r26, r0
    4468:	8c 8f       	std	Y+28, r24	; 0x1c
    446a:	9d 8f       	std	Y+29, r25	; 0x1d
    446c:	ae 8f       	std	Y+30, r26	; 0x1e
    446e:	bf 8f       	std	Y+31, r27	; 0x1f
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    4470:	a5 eb       	ldi	r26, 0xB5	; 181
    4472:	b9 e2       	ldi	r27, 0x29	; 41
    4474:	ec 91       	ld	r30, X
    4476:	a7 96       	adiw	r28, 0x27	; 39
    4478:	ef af       	std	Y+63, r30	; 0x3f
    447a:	a7 97       	sbiw	r28, 0x27	; 39
    447c:	11 96       	adiw	r26, 0x01	; 1
    447e:	fc 91       	ld	r31, X
    4480:	11 97       	sbiw	r26, 0x01	; 1
    4482:	a8 96       	adiw	r28, 0x28	; 40
    4484:	ff af       	std	Y+63, r31	; 0x3f
    4486:	a8 97       	sbiw	r28, 0x28	; 40
    4488:	12 96       	adiw	r26, 0x02	; 2
    448a:	8c 91       	ld	r24, X
    448c:	12 97       	sbiw	r26, 0x02	; 2
    448e:	a9 96       	adiw	r28, 0x29	; 41
    4490:	8f af       	std	Y+63, r24	; 0x3f
    4492:	a9 97       	sbiw	r28, 0x29	; 41
    4494:	13 96       	adiw	r26, 0x03	; 3
    4496:	9c 91       	ld	r25, X
    4498:	13 97       	sbiw	r26, 0x03	; 3
    449a:	aa 96       	adiw	r28, 0x2a	; 42
    449c:	9f af       	std	Y+63, r25	; 0x3f
    449e:	aa 97       	sbiw	r28, 0x2a	; 42
    44a0:	14 96       	adiw	r26, 0x04	; 4
    44a2:	ec 91       	ld	r30, X
    44a4:	14 97       	sbiw	r26, 0x04	; 4
    44a6:	ab 96       	adiw	r28, 0x2b	; 43
    44a8:	ef af       	std	Y+63, r30	; 0x3f
    44aa:	ab 97       	sbiw	r28, 0x2b	; 43
    44ac:	15 96       	adiw	r26, 0x05	; 5
    44ae:	fc 91       	ld	r31, X
    44b0:	15 97       	sbiw	r26, 0x05	; 5
    44b2:	ac 96       	adiw	r28, 0x2c	; 44
    44b4:	ff af       	std	Y+63, r31	; 0x3f
    44b6:	ac 97       	sbiw	r28, 0x2c	; 44
    44b8:	16 96       	adiw	r26, 0x06	; 6
    44ba:	8c 91       	ld	r24, X
    44bc:	16 97       	sbiw	r26, 0x06	; 6
    44be:	ad 96       	adiw	r28, 0x2d	; 45
    44c0:	8f af       	std	Y+63, r24	; 0x3f
    44c2:	ad 97       	sbiw	r28, 0x2d	; 45
    44c4:	17 96       	adiw	r26, 0x07	; 7
    44c6:	9c 91       	ld	r25, X
    44c8:	cd 57       	subi	r28, 0x7D	; 125
    44ca:	df 4f       	sbci	r29, 0xFF	; 255
    44cc:	98 83       	st	Y, r25
    44ce:	c3 58       	subi	r28, 0x83	; 131
    44d0:	d0 40       	sbci	r29, 0x00	; 0
    44d2:	d9 01       	movw	r26, r18
    44d4:	90 96       	adiw	r26, 0x20	; 32
    44d6:	8d 91       	ld	r24, X+
    44d8:	9d 91       	ld	r25, X+
    44da:	0d 90       	ld	r0, X+
    44dc:	bc 91       	ld	r27, X
    44de:	a0 2d       	mov	r26, r0
    44e0:	88 a3       	std	Y+32, r24	; 0x20
    44e2:	99 a3       	std	Y+33, r25	; 0x21
    44e4:	aa a3       	std	Y+34, r26	; 0x22
    44e6:	bb a3       	std	Y+35, r27	; 0x23
    44e8:	d9 01       	movw	r26, r18
    44ea:	94 96       	adiw	r26, 0x24	; 36
    44ec:	8d 91       	ld	r24, X+
    44ee:	9d 91       	ld	r25, X+
    44f0:	0d 90       	ld	r0, X+
    44f2:	bc 91       	ld	r27, X
    44f4:	a0 2d       	mov	r26, r0
    44f6:	8c a3       	std	Y+36, r24	; 0x24
    44f8:	9d a3       	std	Y+37, r25	; 0x25
    44fa:	ae a3       	std	Y+38, r26	; 0x26
    44fc:	bf a3       	std	Y+39, r27	; 0x27
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    44fe:	80 91 ad 29 	lds	r24, 0x29AD	; 0x8029ad <sSensorDataSnapshot+0x41>
    4502:	90 91 ae 29 	lds	r25, 0x29AE	; 0x8029ae <sSensorDataSnapshot+0x42>
    4506:	a0 91 af 29 	lds	r26, 0x29AF	; 0x8029af <sSensorDataSnapshot+0x43>
    450a:	b0 91 b0 29 	lds	r27, 0x29B0	; 0x8029b0 <sSensorDataSnapshot+0x44>
    450e:	88 a7       	std	Y+40, r24	; 0x28
    4510:	99 a7       	std	Y+41, r25	; 0x29
    4512:	aa a7       	std	Y+42, r26	; 0x2a
    4514:	bb a7       	std	Y+43, r27	; 0x2b
    4516:	d9 01       	movw	r26, r18
    4518:	90 96       	adiw	r26, 0x20	; 32
    451a:	8d 91       	ld	r24, X+
    451c:	9d 91       	ld	r25, X+
    451e:	0d 90       	ld	r0, X+
    4520:	bc 91       	ld	r27, X
    4522:	a0 2d       	mov	r26, r0
    4524:	8c a7       	std	Y+44, r24	; 0x2c
    4526:	9d a7       	std	Y+45, r25	; 0x2d
    4528:	ae a7       	std	Y+46, r26	; 0x2e
    452a:	bf a7       	std	Y+47, r27	; 0x2f
    452c:	d9 01       	movw	r26, r18
    452e:	94 96       	adiw	r26, 0x24	; 36
    4530:	8d 91       	ld	r24, X+
    4532:	9d 91       	ld	r25, X+
    4534:	0d 90       	ld	r0, X+
    4536:	bc 91       	ld	r27, X
    4538:	a0 2d       	mov	r26, r0
    453a:	88 ab       	std	Y+48, r24	; 0x30
    453c:	99 ab       	std	Y+49, r25	; 0x31
    453e:	aa ab       	std	Y+50, r26	; 0x32
    4540:	bb ab       	std	Y+51, r27	; 0x33
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    4542:	da 01       	movw	r26, r20
    4544:	d5 96       	adiw	r26, 0x35	; 53
    4546:	8d 91       	ld	r24, X+
    4548:	9d 91       	ld	r25, X+
    454a:	0d 90       	ld	r0, X+
    454c:	bc 91       	ld	r27, X
    454e:	a0 2d       	mov	r26, r0
    4550:	8c ab       	std	Y+52, r24	; 0x34
    4552:	9d ab       	std	Y+53, r25	; 0x35
    4554:	ae ab       	std	Y+54, r26	; 0x36
    4556:	bf ab       	std	Y+55, r27	; 0x37
    4558:	d9 01       	movw	r26, r18
    455a:	94 96       	adiw	r26, 0x24	; 36
    455c:	8d 91       	ld	r24, X+
    455e:	9d 91       	ld	r25, X+
    4560:	0d 90       	ld	r0, X+
    4562:	bc 91       	ld	r27, X
    4564:	a0 2d       	mov	r26, r0
    4566:	88 af       	std	Y+56, r24	; 0x38
    4568:	99 af       	std	Y+57, r25	; 0x39
    456a:	aa af       	std	Y+58, r26	; 0x3a
    456c:	bb af       	std	Y+59, r27	; 0x3b
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    456e:	da 01       	movw	r26, r20
    4570:	d1 96       	adiw	r26, 0x31	; 49
    4572:	8d 91       	ld	r24, X+
    4574:	9d 91       	ld	r25, X+
    4576:	0d 90       	ld	r0, X+
    4578:	bc 91       	ld	r27, X
    457a:	a0 2d       	mov	r26, r0
    457c:	8c af       	std	Y+60, r24	; 0x3c
    457e:	9d af       	std	Y+61, r25	; 0x3d
    4580:	ae af       	std	Y+62, r26	; 0x3e
    4582:	bf af       	std	Y+63, r27	; 0x3f
    4584:	d9 01       	movw	r26, r18
    4586:	90 96       	adiw	r26, 0x20	; 32
    4588:	8d 91       	ld	r24, X+
    458a:	9d 91       	ld	r25, X+
    458c:	0d 90       	ld	r0, X+
    458e:	bc 91       	ld	r27, X
    4590:	a0 2d       	mov	r26, r0
    4592:	24 96       	adiw	r28, 0x04	; 4
    4594:	8c af       	std	Y+60, r24	; 0x3c
    4596:	9d af       	std	Y+61, r25	; 0x3d
    4598:	ae af       	std	Y+62, r26	; 0x3e
    459a:	bf af       	std	Y+63, r27	; 0x3f
    459c:	24 97       	sbiw	r28, 0x04	; 4
	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
    459e:	da 01       	movw	r26, r20
    45a0:	14 96       	adiw	r26, 0x04	; 4
    45a2:	8d 91       	ld	r24, X+
    45a4:	9d 91       	ld	r25, X+
    45a6:	0d 90       	ld	r0, X+
    45a8:	bc 91       	ld	r27, X
    45aa:	a0 2d       	mov	r26, r0
    45ac:	28 96       	adiw	r28, 0x08	; 8
    45ae:	8c af       	std	Y+60, r24	; 0x3c
    45b0:	9d af       	std	Y+61, r25	; 0x3d
    45b2:	ae af       	std	Y+62, r26	; 0x3e
    45b4:	bf af       	std	Y+63, r27	; 0x3f
    45b6:	28 97       	sbiw	r28, 0x08	; 8

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
    45b8:	da 01       	movw	r26, r20
    45ba:	8d 91       	ld	r24, X+
    45bc:	9d 91       	ld	r25, X+
    45be:	0d 90       	ld	r0, X+
    45c0:	bc 91       	ld	r27, X
    45c2:	a0 2d       	mov	r26, r0
    45c4:	2c 96       	adiw	r28, 0x0c	; 12
    45c6:	8c af       	std	Y+60, r24	; 0x3c
    45c8:	9d af       	std	Y+61, r25	; 0x3d
    45ca:	ae af       	std	Y+62, r26	; 0x3e
    45cc:	bf af       	std	Y+63, r27	; 0x3f
    45ce:	2c 97       	sbiw	r28, 0x0c	; 12
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
    45d0:	da 01       	movw	r26, r20
    45d2:	1c 96       	adiw	r26, 0x0c	; 12
    45d4:	8d 91       	ld	r24, X+
    45d6:	9d 91       	ld	r25, X+
    45d8:	0d 90       	ld	r0, X+
    45da:	bc 91       	ld	r27, X
    45dc:	a0 2d       	mov	r26, r0
    45de:	60 96       	adiw	r28, 0x10	; 16
    45e0:	8c af       	std	Y+60, r24	; 0x3c
    45e2:	9d af       	std	Y+61, r25	; 0x3d
    45e4:	ae af       	std	Y+62, r26	; 0x3e
    45e6:	bf af       	std	Y+63, r27	; 0x3f
    45e8:	60 97       	sbiw	r28, 0x10	; 16
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
    45ea:	da 01       	movw	r26, r20
    45ec:	18 96       	adiw	r26, 0x08	; 8
    45ee:	8d 91       	ld	r24, X+
    45f0:	9d 91       	ld	r25, X+
    45f2:	0d 90       	ld	r0, X+
    45f4:	bc 91       	ld	r27, X
    45f6:	a0 2d       	mov	r26, r0
    45f8:	64 96       	adiw	r28, 0x14	; 20
    45fa:	8c af       	std	Y+60, r24	; 0x3c
    45fc:	9d af       	std	Y+61, r25	; 0x3d
    45fe:	ae af       	std	Y+62, r26	; 0x3e
    4600:	bf af       	std	Y+63, r27	; 0x3f
    4602:	64 97       	sbiw	r28, 0x14	; 20
void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    4604:	80 91 68 29 	lds	r24, 0x2968	; 0x802968 <sSessionCycleCountSnapshot>
    4608:	90 91 69 29 	lds	r25, 0x2969	; 0x802969 <sSessionCycleCountSnapshot+0x1>
    460c:	a0 91 6a 29 	lds	r26, 0x296A	; 0x80296a <sSessionCycleCountSnapshot+0x2>
    4610:	b0 91 6b 29 	lds	r27, 0x296B	; 0x80296b <sSessionCycleCountSnapshot+0x3>
    4614:	68 96       	adiw	r28, 0x18	; 24
    4616:	8c af       	std	Y+60, r24	; 0x3c
    4618:	9d af       	std	Y+61, r25	; 0x3d
    461a:	ae af       	std	Y+62, r26	; 0x3e
    461c:	bf af       	std	Y+63, r27	; 0x3f
    461e:	68 97       	sbiw	r28, 0x18	; 24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4620:	e3 96       	adiw	r28, 0x33	; 51
    4622:	9f ad       	ldd	r25, Y+63	; 0x3f
    4624:	e3 97       	sbiw	r28, 0x33	; 51
    4626:	9f 93       	push	r25
    4628:	e2 96       	adiw	r28, 0x32	; 50
    462a:	af ad       	ldd	r26, Y+63	; 0x3f
    462c:	e2 97       	sbiw	r28, 0x32	; 50
    462e:	af 93       	push	r26
    4630:	e1 96       	adiw	r28, 0x31	; 49
    4632:	bf ad       	ldd	r27, Y+63	; 0x3f
    4634:	e1 97       	sbiw	r28, 0x31	; 49
    4636:	bf 93       	push	r27
    4638:	e0 96       	adiw	r28, 0x30	; 48
    463a:	ef ad       	ldd	r30, Y+63	; 0x3f
    463c:	e0 97       	sbiw	r28, 0x30	; 48
    463e:	ef 93       	push	r30
    4640:	6a 96       	adiw	r28, 0x1a	; 26
    4642:	ff ad       	ldd	r31, Y+63	; 0x3f
    4644:	6a 97       	sbiw	r28, 0x1a	; 26
    4646:	ff 93       	push	r31
    4648:	69 96       	adiw	r28, 0x19	; 25
    464a:	2f ad       	ldd	r18, Y+63	; 0x3f
    464c:	69 97       	sbiw	r28, 0x19	; 25
    464e:	2f 93       	push	r18
    4650:	ce 57       	subi	r28, 0x7E	; 126
    4652:	df 4f       	sbci	r29, 0xFF	; 255
    4654:	38 81       	ld	r19, Y
    4656:	c2 58       	subi	r28, 0x82	; 130
    4658:	d0 40       	sbci	r29, 0x00	; 0
    465a:	3f 93       	push	r19
    465c:	cf 57       	subi	r28, 0x7F	; 127
    465e:	df 4f       	sbci	r29, 0xFF	; 255
    4660:	88 81       	ld	r24, Y
    4662:	c1 58       	subi	r28, 0x81	; 129
    4664:	d0 40       	sbci	r29, 0x00	; 0
    4666:	8f 93       	push	r24
    4668:	c0 58       	subi	r28, 0x80	; 128
    466a:	df 4f       	sbci	r29, 0xFF	; 255
    466c:	98 81       	ld	r25, Y
    466e:	c0 58       	subi	r28, 0x80	; 128
    4670:	d0 40       	sbci	r29, 0x00	; 0
    4672:	9f 93       	push	r25
    4674:	c1 58       	subi	r28, 0x81	; 129
    4676:	df 4f       	sbci	r29, 0xFF	; 255
    4678:	a8 81       	ld	r26, Y
    467a:	cf 57       	subi	r28, 0x7F	; 127
    467c:	d0 40       	sbci	r29, 0x00	; 0
    467e:	af 93       	push	r26
    4680:	1f 92       	push	r1
    4682:	1f 93       	push	r17
    4684:	e7 96       	adiw	r28, 0x37	; 55
    4686:	bf ad       	ldd	r27, Y+63	; 0x3f
    4688:	e7 97       	sbiw	r28, 0x37	; 55
    468a:	bf 93       	push	r27
    468c:	e6 96       	adiw	r28, 0x36	; 54
    468e:	ef ad       	ldd	r30, Y+63	; 0x3f
    4690:	e6 97       	sbiw	r28, 0x36	; 54
    4692:	ef 93       	push	r30
    4694:	e5 96       	adiw	r28, 0x35	; 53
    4696:	ff ad       	ldd	r31, Y+63	; 0x3f
    4698:	e5 97       	sbiw	r28, 0x35	; 53
    469a:	ff 93       	push	r31
    469c:	e4 96       	adiw	r28, 0x34	; 52
    469e:	2f ad       	ldd	r18, Y+63	; 0x3f
    46a0:	e4 97       	sbiw	r28, 0x34	; 52
    46a2:	2f 93       	push	r18
    46a4:	6c 96       	adiw	r28, 0x1c	; 28
    46a6:	3f ad       	ldd	r19, Y+63	; 0x3f
    46a8:	6c 97       	sbiw	r28, 0x1c	; 28
    46aa:	3f 93       	push	r19
    46ac:	6b 96       	adiw	r28, 0x1b	; 27
    46ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    46b0:	6b 97       	sbiw	r28, 0x1b	; 27
    46b2:	8f 93       	push	r24
    46b4:	eb 96       	adiw	r28, 0x3b	; 59
    46b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    46b8:	eb 97       	sbiw	r28, 0x3b	; 59
    46ba:	9f 93       	push	r25
    46bc:	ea 96       	adiw	r28, 0x3a	; 58
    46be:	af ad       	ldd	r26, Y+63	; 0x3f
    46c0:	ea 97       	sbiw	r28, 0x3a	; 58
    46c2:	af 93       	push	r26
    46c4:	e9 96       	adiw	r28, 0x39	; 57
    46c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    46c8:	e9 97       	sbiw	r28, 0x39	; 57
    46ca:	bf 93       	push	r27
    46cc:	e8 96       	adiw	r28, 0x38	; 56
    46ce:	ef ad       	ldd	r30, Y+63	; 0x3f
    46d0:	e8 97       	sbiw	r28, 0x38	; 56
    46d2:	ef 93       	push	r30
    46d4:	6e 96       	adiw	r28, 0x1e	; 30
    46d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    46d8:	6e 97       	sbiw	r28, 0x1e	; 30
    46da:	ff 93       	push	r31
    46dc:	6d 96       	adiw	r28, 0x1d	; 29
    46de:	2f ad       	ldd	r18, Y+63	; 0x3f
    46e0:	6d 97       	sbiw	r28, 0x1d	; 29
    46e2:	2f 93       	push	r18
    46e4:	ef 96       	adiw	r28, 0x3f	; 63
    46e6:	3f ad       	ldd	r19, Y+63	; 0x3f
    46e8:	ef 97       	sbiw	r28, 0x3f	; 63
    46ea:	3f 93       	push	r19
    46ec:	ee 96       	adiw	r28, 0x3e	; 62
    46ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    46f0:	ee 97       	sbiw	r28, 0x3e	; 62
    46f2:	8f 93       	push	r24
    46f4:	ed 96       	adiw	r28, 0x3d	; 61
    46f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    46f8:	ed 97       	sbiw	r28, 0x3d	; 61
    46fa:	9f 93       	push	r25
    46fc:	ec 96       	adiw	r28, 0x3c	; 60
    46fe:	af ad       	ldd	r26, Y+63	; 0x3f
    4700:	ec 97       	sbiw	r28, 0x3c	; 60
    4702:	af 93       	push	r26
    4704:	2f 92       	push	r2
    4706:	3f 92       	push	r3
    4708:	0f 93       	push	r16
    470a:	b9 81       	ldd	r27, Y+1	; 0x01
    470c:	bf 93       	push	r27
    470e:	80 e0       	ldi	r24, 0x00	; 0
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    4716:	23 e3       	ldi	r18, 0x33	; 51
    4718:	33 e3       	ldi	r19, 0x33	; 51
    471a:	43 e2       	ldi	r20, 0x23	; 35
    471c:	54 e4       	ldi	r21, 0x44	; 68
    471e:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4722:	9f 93       	push	r25
    4724:	8f 93       	push	r24
    4726:	7f 93       	push	r23
    4728:	6f 93       	push	r22
    472a:	ea 81       	ldd	r30, Y+2	; 0x02
    472c:	fb 81       	ldd	r31, Y+3	; 0x03
    472e:	bf 01       	movw	r22, r30
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    4738:	27 e1       	ldi	r18, 0x17	; 23
    473a:	37 eb       	ldi	r19, 0xB7	; 183
    473c:	41 ed       	ldi	r20, 0xD1	; 209
    473e:	5e e3       	ldi	r21, 0x3E	; 62
    4740:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4744:	9f 93       	push	r25
    4746:	8f 93       	push	r24
    4748:	7f 93       	push	r23
    474a:	6f 93       	push	r22
    474c:	c7 01       	movw	r24, r14
    474e:	b6 01       	movw	r22, r12
    4750:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	40 e2       	ldi	r20, 0x20	; 32
    475a:	59 e4       	ldi	r21, 0x49	; 73
    475c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4760:	9f 93       	push	r25
    4762:	8f 93       	push	r24
    4764:	7f 93       	push	r23
    4766:	6f 93       	push	r22
    4768:	6f 96       	adiw	r28, 0x1f	; 31
    476a:	2f ad       	ldd	r18, Y+63	; 0x3f
    476c:	6f 97       	sbiw	r28, 0x1f	; 31
    476e:	a0 96       	adiw	r28, 0x20	; 32
    4770:	3f ad       	ldd	r19, Y+63	; 0x3f
    4772:	a0 97       	sbiw	r28, 0x20	; 32
    4774:	a1 96       	adiw	r28, 0x21	; 33
    4776:	4f ad       	ldd	r20, Y+63	; 0x3f
    4778:	a1 97       	sbiw	r28, 0x21	; 33
    477a:	a2 96       	adiw	r28, 0x22	; 34
    477c:	5f ad       	ldd	r21, Y+63	; 0x3f
    477e:	a2 97       	sbiw	r28, 0x22	; 34
    4780:	a3 96       	adiw	r28, 0x23	; 35
    4782:	6f ad       	ldd	r22, Y+63	; 0x3f
    4784:	a3 97       	sbiw	r28, 0x23	; 35
    4786:	a4 96       	adiw	r28, 0x24	; 36
    4788:	7f ad       	ldd	r23, Y+63	; 0x3f
    478a:	a4 97       	sbiw	r28, 0x24	; 36
    478c:	a5 96       	adiw	r28, 0x25	; 37
    478e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4790:	a5 97       	sbiw	r28, 0x25	; 37
    4792:	a6 96       	adiw	r28, 0x26	; 38
    4794:	9f ad       	ldd	r25, Y+63	; 0x3f
    4796:	a6 97       	sbiw	r28, 0x26	; 38
    4798:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__floatdisf>
    479c:	6b 01       	movw	r12, r22
    479e:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    47a0:	20 e0       	ldi	r18, 0x00	; 0
    47a2:	30 e4       	ldi	r19, 0x40	; 64
    47a4:	4c e9       	ldi	r20, 0x9C	; 156
    47a6:	55 e4       	ldi	r21, 0x45	; 69
    47a8:	c3 01       	movw	r24, r6
    47aa:	b2 01       	movw	r22, r4
    47ac:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    47b0:	a5 01       	movw	r20, r10
    47b2:	94 01       	movw	r18, r8
    47b4:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    47b8:	9b 01       	movw	r18, r22
    47ba:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    47bc:	c7 01       	movw	r24, r14
    47be:	b6 01       	movw	r22, r12
    47c0:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    47c4:	9f 93       	push	r25
    47c6:	8f 93       	push	r24
    47c8:	7f 93       	push	r23
    47ca:	6f 93       	push	r22
    47cc:	6c 81       	ldd	r22, Y+4	; 0x04
    47ce:	7d 81       	ldd	r23, Y+5	; 0x05
    47d0:	8e 81       	ldd	r24, Y+6	; 0x06
    47d2:	9f 81       	ldd	r25, Y+7	; 0x07
    47d4:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    47d8:	6b 01       	movw	r12, r22
    47da:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    47dc:	20 e0       	ldi	r18, 0x00	; 0
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	40 e8       	ldi	r20, 0x80	; 128
    47e2:	53 e4       	ldi	r21, 0x43	; 67
    47e4:	68 85       	ldd	r22, Y+8	; 0x08
    47e6:	79 85       	ldd	r23, Y+9	; 0x09
    47e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    47ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    47ec:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    47f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    47f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    47f4:	4e 85       	ldd	r20, Y+14	; 0x0e
    47f6:	5f 85       	ldd	r21, Y+15	; 0x0f
    47f8:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    47fc:	9b 01       	movw	r18, r22
    47fe:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4800:	c7 01       	movw	r24, r14
    4802:	b6 01       	movw	r22, r12
    4804:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    4808:	9f 93       	push	r25
    480a:	8f 93       	push	r24
    480c:	7f 93       	push	r23
    480e:	6f 93       	push	r22
    4810:	68 89       	ldd	r22, Y+16	; 0x10
    4812:	79 89       	ldd	r23, Y+17	; 0x11
    4814:	8a 89       	ldd	r24, Y+18	; 0x12
    4816:	9b 89       	ldd	r25, Y+19	; 0x13
    4818:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    481c:	6b 01       	movw	r12, r22
    481e:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    4820:	20 e0       	ldi	r18, 0x00	; 0
    4822:	30 e0       	ldi	r19, 0x00	; 0
    4824:	40 e8       	ldi	r20, 0x80	; 128
    4826:	57 e4       	ldi	r21, 0x47	; 71
    4828:	6c 89       	ldd	r22, Y+20	; 0x14
    482a:	7d 89       	ldd	r23, Y+21	; 0x15
    482c:	8e 89       	ldd	r24, Y+22	; 0x16
    482e:	9f 89       	ldd	r25, Y+23	; 0x17
    4830:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    4834:	9b 01       	movw	r18, r22
    4836:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4838:	c7 01       	movw	r24, r14
    483a:	b6 01       	movw	r22, r12
    483c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    4840:	9f 93       	push	r25
    4842:	8f 93       	push	r24
    4844:	7f 93       	push	r23
    4846:	6f 93       	push	r22
    4848:	68 8d       	ldd	r22, Y+24	; 0x18
    484a:	79 8d       	ldd	r23, Y+25	; 0x19
    484c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    484e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4850:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    4854:	6b 01       	movw	r12, r22
    4856:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	40 e8       	ldi	r20, 0x80	; 128
    485e:	57 e4       	ldi	r21, 0x47	; 71
    4860:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4862:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4864:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4866:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4868:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    486c:	9b 01       	movw	r18, r22
    486e:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4870:	c7 01       	movw	r24, r14
    4872:	b6 01       	movw	r22, r12
    4874:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    4878:	9f 93       	push	r25
    487a:	8f 93       	push	r24
    487c:	7f 93       	push	r23
    487e:	6f 93       	push	r22
    4880:	a7 96       	adiw	r28, 0x27	; 39
    4882:	2f ad       	ldd	r18, Y+63	; 0x3f
    4884:	a7 97       	sbiw	r28, 0x27	; 39
    4886:	a8 96       	adiw	r28, 0x28	; 40
    4888:	3f ad       	ldd	r19, Y+63	; 0x3f
    488a:	a8 97       	sbiw	r28, 0x28	; 40
    488c:	a9 96       	adiw	r28, 0x29	; 41
    488e:	4f ad       	ldd	r20, Y+63	; 0x3f
    4890:	a9 97       	sbiw	r28, 0x29	; 41
    4892:	aa 96       	adiw	r28, 0x2a	; 42
    4894:	5f ad       	ldd	r21, Y+63	; 0x3f
    4896:	aa 97       	sbiw	r28, 0x2a	; 42
    4898:	ab 96       	adiw	r28, 0x2b	; 43
    489a:	6f ad       	ldd	r22, Y+63	; 0x3f
    489c:	ab 97       	sbiw	r28, 0x2b	; 43
    489e:	ac 96       	adiw	r28, 0x2c	; 44
    48a0:	7f ad       	ldd	r23, Y+63	; 0x3f
    48a2:	ac 97       	sbiw	r28, 0x2c	; 44
    48a4:	ad 96       	adiw	r28, 0x2d	; 45
    48a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    48a8:	ad 97       	sbiw	r28, 0x2d	; 45
    48aa:	cd 57       	subi	r28, 0x7D	; 125
    48ac:	df 4f       	sbci	r29, 0xFF	; 255
    48ae:	98 81       	ld	r25, Y
    48b0:	c3 58       	subi	r28, 0x83	; 131
    48b2:	d0 40       	sbci	r29, 0x00	; 0
    48b4:	0e 94 58 32 	call	0x64b0	; 0x64b0 <__floatdisf>
    48b8:	6b 01       	movw	r12, r22
    48ba:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	30 e4       	ldi	r19, 0x40	; 64
    48c0:	4c e9       	ldi	r20, 0x9C	; 156
    48c2:	55 e4       	ldi	r21, 0x45	; 69
    48c4:	68 a1       	ldd	r22, Y+32	; 0x20
    48c6:	79 a1       	ldd	r23, Y+33	; 0x21
    48c8:	8a a1       	ldd	r24, Y+34	; 0x22
    48ca:	9b a1       	ldd	r25, Y+35	; 0x23
    48cc:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    48d0:	2c a1       	ldd	r18, Y+36	; 0x24
    48d2:	3d a1       	ldd	r19, Y+37	; 0x25
    48d4:	4e a1       	ldd	r20, Y+38	; 0x26
    48d6:	5f a1       	ldd	r21, Y+39	; 0x27
    48d8:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    48dc:	9b 01       	movw	r18, r22
    48de:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    48e0:	c7 01       	movw	r24, r14
    48e2:	b6 01       	movw	r22, r12
    48e4:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    48e8:	9f 93       	push	r25
    48ea:	8f 93       	push	r24
    48ec:	7f 93       	push	r23
    48ee:	6f 93       	push	r22
    48f0:	68 a5       	ldd	r22, Y+40	; 0x28
    48f2:	79 a5       	ldd	r23, Y+41	; 0x29
    48f4:	8a a5       	ldd	r24, Y+42	; 0x2a
    48f6:	9b a5       	ldd	r25, Y+43	; 0x2b
    48f8:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    48fc:	6b 01       	movw	r12, r22
    48fe:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    4900:	20 e0       	ldi	r18, 0x00	; 0
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	40 e8       	ldi	r20, 0x80	; 128
    4906:	53 e4       	ldi	r21, 0x43	; 67
    4908:	6c a5       	ldd	r22, Y+44	; 0x2c
    490a:	7d a5       	ldd	r23, Y+45	; 0x2d
    490c:	8e a5       	ldd	r24, Y+46	; 0x2e
    490e:	9f a5       	ldd	r25, Y+47	; 0x2f
    4910:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    4914:	28 a9       	ldd	r18, Y+48	; 0x30
    4916:	39 a9       	ldd	r19, Y+49	; 0x31
    4918:	4a a9       	ldd	r20, Y+50	; 0x32
    491a:	5b a9       	ldd	r21, Y+51	; 0x33
    491c:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    4920:	9b 01       	movw	r18, r22
    4922:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4924:	c7 01       	movw	r24, r14
    4926:	b6 01       	movw	r22, r12
    4928:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    492c:	9f 93       	push	r25
    492e:	8f 93       	push	r24
    4930:	7f 93       	push	r23
    4932:	6f 93       	push	r22
    4934:	6c a9       	ldd	r22, Y+52	; 0x34
    4936:	7d a9       	ldd	r23, Y+53	; 0x35
    4938:	8e a9       	ldd	r24, Y+54	; 0x36
    493a:	9f a9       	ldd	r25, Y+55	; 0x37
    493c:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    4940:	6b 01       	movw	r12, r22
    4942:	7c 01       	movw	r14, r24
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    4944:	20 e0       	ldi	r18, 0x00	; 0
    4946:	30 e0       	ldi	r19, 0x00	; 0
    4948:	40 e8       	ldi	r20, 0x80	; 128
    494a:	57 e4       	ldi	r21, 0x47	; 71
    494c:	68 ad       	ldd	r22, Y+56	; 0x38
    494e:	79 ad       	ldd	r23, Y+57	; 0x39
    4950:	8a ad       	ldd	r24, Y+58	; 0x3a
    4952:	9b ad       	ldd	r25, Y+59	; 0x3b
    4954:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    4958:	9b 01       	movw	r18, r22
    495a:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    495c:	c7 01       	movw	r24, r14
    495e:	b6 01       	movw	r22, r12
    4960:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    4964:	9f 93       	push	r25
    4966:	8f 93       	push	r24
    4968:	7f 93       	push	r23
    496a:	6f 93       	push	r22
    496c:	6c ad       	ldd	r22, Y+60	; 0x3c
    496e:	7d ad       	ldd	r23, Y+61	; 0x3d
    4970:	8e ad       	ldd	r24, Y+62	; 0x3e
    4972:	9f ad       	ldd	r25, Y+63	; 0x3f
    4974:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
    4978:	6b 01       	movw	r12, r22
    497a:	7c 01       	movw	r14, r24
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    497c:	20 e0       	ldi	r18, 0x00	; 0
    497e:	30 e0       	ldi	r19, 0x00	; 0
    4980:	40 e8       	ldi	r20, 0x80	; 128
    4982:	57 e4       	ldi	r21, 0x47	; 71
    4984:	24 96       	adiw	r28, 0x04	; 4
    4986:	6c ad       	ldd	r22, Y+60	; 0x3c
    4988:	7d ad       	ldd	r23, Y+61	; 0x3d
    498a:	8e ad       	ldd	r24, Y+62	; 0x3e
    498c:	9f ad       	ldd	r25, Y+63	; 0x3f
    498e:	24 97       	sbiw	r28, 0x04	; 4
    4990:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>
    4994:	9b 01       	movw	r18, r22
    4996:	ac 01       	movw	r20, r24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4998:	c7 01       	movw	r24, r14
    499a:	b6 01       	movw	r22, r12
    499c:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>
    49a0:	9f 93       	push	r25
    49a2:	8f 93       	push	r24
    49a4:	7f 93       	push	r23
    49a6:	6f 93       	push	r22
    49a8:	28 96       	adiw	r28, 0x08	; 8
    49aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    49ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    49ae:	8e ad       	ldd	r24, Y+62	; 0x3e
    49b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    49b2:	28 97       	sbiw	r28, 0x08	; 8
    49b4:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
    49b8:	25 e5       	ldi	r18, 0x55	; 85
    49ba:	35 e5       	ldi	r19, 0x55	; 85
    49bc:	45 e8       	ldi	r20, 0x85	; 133
    49be:	59 e4       	ldi	r21, 0x49	; 73
    49c0:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    49c4:	9f 93       	push	r25
    49c6:	8f 93       	push	r24
    49c8:	7f 93       	push	r23
    49ca:	6f 93       	push	r22
    49cc:	2c 96       	adiw	r28, 0x0c	; 12
    49ce:	6c ad       	ldd	r22, Y+60	; 0x3c
    49d0:	7d ad       	ldd	r23, Y+61	; 0x3d
    49d2:	8e ad       	ldd	r24, Y+62	; 0x3e
    49d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    49d6:	2c 97       	sbiw	r28, 0x0c	; 12
    49d8:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
    49dc:	25 e5       	ldi	r18, 0x55	; 85
    49de:	35 e5       	ldi	r19, 0x55	; 85
    49e0:	45 e8       	ldi	r20, 0x85	; 133
    49e2:	59 e4       	ldi	r21, 0x49	; 73
    49e4:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    49e8:	9f 93       	push	r25
    49ea:	8f 93       	push	r24
    49ec:	7f 93       	push	r23
    49ee:	6f 93       	push	r22
    49f0:	60 96       	adiw	r28, 0x10	; 16
    49f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    49f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    49f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    49f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    49fa:	60 97       	sbiw	r28, 0x10	; 16
    49fc:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
    4a00:	20 e0       	ldi	r18, 0x00	; 0
    4a02:	30 e0       	ldi	r19, 0x00	; 0
    4a04:	40 e8       	ldi	r20, 0x80	; 128
    4a06:	57 e3       	ldi	r21, 0x37	; 55
    4a08:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4a0c:	9f 93       	push	r25
    4a0e:	8f 93       	push	r24
    4a10:	7f 93       	push	r23
    4a12:	6f 93       	push	r22
    4a14:	64 96       	adiw	r28, 0x14	; 20
    4a16:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a18:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a1a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a1e:	64 97       	sbiw	r28, 0x14	; 20
    4a20:	0e 94 60 32 	call	0x64c0	; 0x64c0 <__floatsisf>
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
    4a24:	20 e0       	ldi	r18, 0x00	; 0
    4a26:	30 e0       	ldi	r19, 0x00	; 0
    4a28:	40 e8       	ldi	r20, 0x80	; 128
    4a2a:	57 e3       	ldi	r21, 0x37	; 55
    4a2c:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__mulsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4a30:	9f 93       	push	r25
    4a32:	8f 93       	push	r24
    4a34:	7f 93       	push	r23
    4a36:	6f 93       	push	r22
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    4a38:	68 96       	adiw	r28, 0x18	; 24
    4a3a:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a3c:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a40:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a42:	68 97       	sbiw	r28, 0x18	; 24
    4a44:	0e 94 5e 32 	call	0x64bc	; 0x64bc <__floatunsisf>
    4a48:	20 e0       	ldi	r18, 0x00	; 0
    4a4a:	30 e4       	ldi	r19, 0x40	; 64
    4a4c:	4c e9       	ldi	r20, 0x9C	; 156
    4a4e:	55 e4       	ldi	r21, 0x45	; 69
    4a50:	0e 94 b0 31 	call	0x6360	; 0x6360 <__divsf3>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4a54:	9f 93       	push	r25
    4a56:	8f 93       	push	r24
    4a58:	7f 93       	push	r23
    4a5a:	6f 93       	push	r22
    4a5c:	8c e6       	ldi	r24, 0x6C	; 108
    4a5e:	96 e2       	ldi	r25, 0x26	; 38
    4a60:	9f 93       	push	r25
    4a62:	8f 93       	push	r24
    4a64:	af 96       	adiw	r28, 0x2f	; 47
    4a66:	ff ad       	ldd	r31, Y+63	; 0x3f
    4a68:	af 97       	sbiw	r28, 0x2f	; 47
    4a6a:	ff 93       	push	r31
    4a6c:	ae 96       	adiw	r28, 0x2e	; 46
    4a6e:	2f ad       	ldd	r18, Y+63	; 0x3f
    4a70:	ae 97       	sbiw	r28, 0x2e	; 46
    4a72:	2f 93       	push	r18
    4a74:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    4a78:	cd bf       	out	0x3d, r28	; 61
    4a7a:	de bf       	out	0x3e, r29	; 62
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_EVA */
    4a7c:	cd 57       	subi	r28, 0x7D	; 125
    4a7e:	df 4f       	sbci	r29, 0xFF	; 255
    4a80:	cd bf       	out	0x3d, r28	; 61
    4a82:	de bf       	out	0x3e, r29	; 62
    4a84:	df 91       	pop	r29
    4a86:	cf 91       	pop	r28
    4a88:	1f 91       	pop	r17
    4a8a:	0f 91       	pop	r16
    4a8c:	ff 90       	pop	r15
    4a8e:	ef 90       	pop	r14
    4a90:	df 90       	pop	r13
    4a92:	cf 90       	pop	r12
    4a94:	bf 90       	pop	r11
    4a96:	af 90       	pop	r10
    4a98:	9f 90       	pop	r9
    4a9a:	8f 90       	pop	r8
    4a9c:	7f 90       	pop	r7
    4a9e:	6f 90       	pop	r6
    4aa0:	5f 90       	pop	r5
    4aa2:	4f 90       	pop	r4
    4aa4:	3f 90       	pop	r3
    4aa6:	2f 90       	pop	r2
    4aa8:	08 95       	ret

00004aaa <PrintResetHeader>:


void PrintResetHeader(FILE *fp) {
    4aaa:	cf 93       	push	r28
    4aac:	df 93       	push	r29
    4aae:	d8 2f       	mov	r29, r24
    4ab0:	c9 2f       	mov	r28, r25
	
	fprintf(fp, "# HvA SECOM Motor driver board ");
    4ab2:	28 2f       	mov	r18, r24
    4ab4:	39 2f       	mov	r19, r25
    4ab6:	4f e1       	ldi	r20, 0x1F	; 31
    4ab8:	50 e0       	ldi	r21, 0x00	; 0
    4aba:	61 e0       	ldi	r22, 0x01	; 1
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	8e ee       	ldi	r24, 0xEE	; 238
    4ac0:	96 e2       	ldi	r25, 0x26	; 38
    4ac2:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
	PrintBoardType(fp);
    4ac6:	8d 2f       	mov	r24, r29
    4ac8:	9c 2f       	mov	r25, r28
    4aca:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <PrintBoardType>
	fprintf(fp, "busID %d cpu ", GetBusID());
    4ace:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <GetBusID>
    4ad2:	1f 92       	push	r1
    4ad4:	8f 93       	push	r24
    4ad6:	8e e0       	ldi	r24, 0x0E	; 14
    4ad8:	97 e2       	ldi	r25, 0x27	; 39
    4ada:	9f 93       	push	r25
    4adc:	8f 93       	push	r24
    4ade:	cf 93       	push	r28
    4ae0:	df 93       	push	r29
    4ae2:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
	PrintProcessorID(fp);
    4ae6:	8d 2f       	mov	r24, r29
    4ae8:	9c 2f       	mov	r25, r28
    4aea:	0e 94 0b 30 	call	0x6016	; 0x6016 <PrintProcessorID>
	fprintf(fp, "# code " __DATE__ " " __TIME__ "\r\n");
    4aee:	2d 2f       	mov	r18, r29
    4af0:	3c 2f       	mov	r19, r28
    4af2:	4d e1       	ldi	r20, 0x1D	; 29
    4af4:	50 e0       	ldi	r21, 0x00	; 0
    4af6:	61 e0       	ldi	r22, 0x01	; 1
    4af8:	70 e0       	ldi	r23, 0x00	; 0
    4afa:	8c e1       	ldi	r24, 0x1C	; 28
    4afc:	97 e2       	ldi	r25, 0x27	; 39
    4afe:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	0f 90       	pop	r0
    4b08:	0f 90       	pop	r0
    4b0a:	0f 90       	pop	r0
    4b0c:	0f 90       	pop	r0
	
} /* PrintResetHeader */
    4b0e:	df 91       	pop	r29
    4b10:	cf 91       	pop	r28
    4b12:	08 95       	ret

00004b14 <__vector_71>:
	}
	
} /* ISRReadADC_EVA */


ISR(ADCA_CH0_vect) {
    4b14:	1f 92       	push	r1
    4b16:	0f 92       	push	r0
    4b18:	0f b6       	in	r0, 0x3f	; 63
    4b1a:	0f 92       	push	r0
    4b1c:	11 24       	eor	r1, r1
    4b1e:	0b b6       	in	r0, 0x3b	; 59
    4b20:	0f 92       	push	r0
    4b22:	2f 92       	push	r2
    4b24:	3f 92       	push	r3
    4b26:	4f 92       	push	r4
    4b28:	5f 92       	push	r5
    4b2a:	6f 92       	push	r6
    4b2c:	7f 92       	push	r7
    4b2e:	8f 92       	push	r8
    4b30:	9f 92       	push	r9
    4b32:	af 92       	push	r10
    4b34:	bf 92       	push	r11
    4b36:	cf 92       	push	r12
    4b38:	df 92       	push	r13
    4b3a:	ef 92       	push	r14
    4b3c:	ff 92       	push	r15
    4b3e:	0f 93       	push	r16
    4b40:	1f 93       	push	r17
    4b42:	2f 93       	push	r18
    4b44:	3f 93       	push	r19
    4b46:	4f 93       	push	r20
    4b48:	5f 93       	push	r21
    4b4a:	6f 93       	push	r22
    4b4c:	7f 93       	push	r23
    4b4e:	8f 93       	push	r24
    4b50:	9f 93       	push	r25
    4b52:	af 93       	push	r26
    4b54:	bf 93       	push	r27
    4b56:	cf 93       	push	r28
    4b58:	df 93       	push	r29
    4b5a:	ef 93       	push	r30
    4b5c:	ff 93       	push	r31

	static int32_t sCCPrevPulseInterval;

	int16_t spRawSample, driverTempSample, motorVoltageSample, motorCurrentSample, inVoltageSample, inCurrentSample;
	int32_t inPower, motorPower;
	uint8_t selCCPin = PORTC.IN & PIN2_bm, selCC2Pin = PORTC.IN & PIN5_bm, selFPPin = PORTC.IN & PIN4_bm, pwmEn = !(PORTC.IN & PIN1_bm), pwm = PORTC.IN & PIN6_bm;
    4b5e:	e0 e4       	ldi	r30, 0x40	; 64
    4b60:	f6 e0       	ldi	r31, 0x06	; 6
    4b62:	d0 85       	ldd	r29, Z+8	; 0x08
    4b64:	d4 70       	andi	r29, 0x04	; 4
    4b66:	c0 85       	ldd	r28, Z+8	; 0x08
    4b68:	c0 72       	andi	r28, 0x20	; 32
    4b6a:	80 85       	ldd	r24, Z+8	; 0x08
    4b6c:	80 71       	andi	r24, 0x10	; 16
    4b6e:	58 2e       	mov	r5, r24
    4b70:	80 85       	ldd	r24, Z+8	; 0x08
    4b72:	82 70       	andi	r24, 0x02	; 2
    4b74:	38 2e       	mov	r3, r24
    4b76:	20 84       	ldd	r2, Z+8	; 0x08
	uint8_t curPWMCycles = TCC1.CNTL;
    4b78:	40 90 60 08 	lds	r4, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
	
	if(I_AM_EVA_L || I_AM_EVA_R)
    4b7c:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4b80:	80 73       	andi	r24, 0x30	; 48
    4b82:	80 31       	cpi	r24, 0x10	; 16
    4b84:	31 f0       	breq	.+12     	; 0x4b92 <__vector_71+0x7e>
    4b86:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4b8a:	80 73       	andi	r24, 0x30	; 48
    4b8c:	80 32       	cpi	r24, 0x20	; 32
    4b8e:	09 f0       	breq	.+2      	; 0x4b92 <__vector_71+0x7e>
    4b90:	d3 c0       	rjmp	.+422    	; 0x4d38 <__vector_71+0x224>
} /* ISRReadADC_H2A */


static inline void ISRReadADC_EVA(void) {
	
	int16_t motorTempFront = ADCA.CH0RES, motorTempRear, angSample, angFSSample;
    4b92:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    4b96:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>

	uint8_t selRegenPin = !(PORTC.IN & PIN5_bm);
    4b9a:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    4b9e:	25 fb       	bst	r18, 5
    4ba0:	22 27       	eor	r18, r18
    4ba2:	20 f9       	bld	r18, 0
    4ba4:	31 e0       	ldi	r19, 0x01	; 1
    4ba6:	23 27       	eor	r18, r19
	
	FILTER32(motorTempFront, sSensorData.adc.eva.motorTempFrontFiltered);
    4ba8:	e3 e6       	ldi	r30, 0x63	; 99
    4baa:	f8 e2       	ldi	r31, 0x28	; 40
    4bac:	40 81       	ld	r20, Z
    4bae:	51 81       	ldd	r21, Z+1	; 0x01
    4bb0:	62 81       	ldd	r22, Z+2	; 0x02
    4bb2:	73 81       	ldd	r23, Z+3	; 0x03
    4bb4:	c5 2e       	mov	r12, r21
    4bb6:	d6 2e       	mov	r13, r22
    4bb8:	e7 2e       	mov	r14, r23
    4bba:	ff 24       	eor	r15, r15
    4bbc:	e7 fc       	sbrc	r14, 7
    4bbe:	fa 94       	dec	r15
    4bc0:	4c 19       	sub	r20, r12
    4bc2:	5d 09       	sbc	r21, r13
    4bc4:	6e 09       	sbc	r22, r14
    4bc6:	7f 09       	sbc	r23, r15
    4bc8:	09 2e       	mov	r0, r25
    4bca:	00 0c       	add	r0, r0
    4bcc:	aa 0b       	sbc	r26, r26
    4bce:	bb 0b       	sbc	r27, r27
    4bd0:	ba 2f       	mov	r27, r26
    4bd2:	a9 2f       	mov	r26, r25
    4bd4:	98 2f       	mov	r25, r24
    4bd6:	88 27       	eor	r24, r24
    4bd8:	84 0f       	add	r24, r20
    4bda:	95 1f       	adc	r25, r21
    4bdc:	a6 1f       	adc	r26, r22
    4bde:	b7 1f       	adc	r27, r23
    4be0:	80 83       	st	Z, r24
    4be2:	91 83       	std	Z+1, r25	; 0x01
    4be4:	a2 83       	std	Z+2, r26	; 0x02
    4be6:	b3 83       	std	Z+3, r27	; 0x03
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    4be8:	e0 e4       	ldi	r30, 0x40	; 64
    4bea:	f2 e0       	ldi	r31, 0x02	; 2
    4bec:	83 a1       	ldd	r24, Z+35	; 0x23
    4bee:	80 ff       	sbrs	r24, 0
    4bf0:	fd cf       	rjmp	.-6      	; 0x4bec <__vector_71+0xd8>
	ADCB.CH0.INTFLAGS = 0x01;
    4bf2:	e0 e4       	ldi	r30, 0x40	; 64
    4bf4:	f2 e0       	ldi	r31, 0x02	; 2
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	83 a3       	std	Z+35, r24	; 0x23
	motorTempRear = ADCB.CH0RES;
    4bfa:	80 89       	ldd	r24, Z+16	; 0x10
    4bfc:	91 89       	ldd	r25, Z+17	; 0x11
	FILTER32(motorTempRear, sSensorData.adc.eva.motorTempRearFiltered);
    4bfe:	e3 e6       	ldi	r30, 0x63	; 99
    4c00:	f8 e2       	ldi	r31, 0x28	; 40
    4c02:	44 81       	ldd	r20, Z+4	; 0x04
    4c04:	55 81       	ldd	r21, Z+5	; 0x05
    4c06:	66 81       	ldd	r22, Z+6	; 0x06
    4c08:	77 81       	ldd	r23, Z+7	; 0x07
    4c0a:	c5 2e       	mov	r12, r21
    4c0c:	d6 2e       	mov	r13, r22
    4c0e:	e7 2e       	mov	r14, r23
    4c10:	ff 24       	eor	r15, r15
    4c12:	e7 fc       	sbrc	r14, 7
    4c14:	fa 94       	dec	r15
    4c16:	4c 19       	sub	r20, r12
    4c18:	5d 09       	sbc	r21, r13
    4c1a:	6e 09       	sbc	r22, r14
    4c1c:	7f 09       	sbc	r23, r15
    4c1e:	09 2e       	mov	r0, r25
    4c20:	00 0c       	add	r0, r0
    4c22:	aa 0b       	sbc	r26, r26
    4c24:	bb 0b       	sbc	r27, r27
    4c26:	ba 2f       	mov	r27, r26
    4c28:	a9 2f       	mov	r26, r25
    4c2a:	98 2f       	mov	r25, r24
    4c2c:	88 27       	eor	r24, r24
    4c2e:	84 0f       	add	r24, r20
    4c30:	95 1f       	adc	r25, r21
    4c32:	a6 1f       	adc	r26, r22
    4c34:	b7 1f       	adc	r27, r23
    4c36:	84 83       	std	Z+4, r24	; 0x04
    4c38:	95 83       	std	Z+5, r25	; 0x05
    4c3a:	a6 83       	std	Z+6, r26	; 0x06
    4c3c:	b7 83       	std	Z+7, r27	; 0x07
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ;
    4c3e:	e0 e0       	ldi	r30, 0x00	; 0
    4c40:	f2 e0       	ldi	r31, 0x02	; 2
    4c42:	83 a5       	ldd	r24, Z+43	; 0x2b
    4c44:	80 ff       	sbrs	r24, 0
    4c46:	fd cf       	rjmp	.-6      	; 0x4c42 <__vector_71+0x12e>
	ADCA.CH1.INTFLAGS = 0x01;
    4c48:	e0 e0       	ldi	r30, 0x00	; 0
    4c4a:	f2 e0       	ldi	r31, 0x02	; 2
    4c4c:	81 e0       	ldi	r24, 0x01	; 1
    4c4e:	83 a7       	std	Z+43, r24	; 0x2b
	angSample = ADCA.CH1RES;
    4c50:	82 89       	ldd	r24, Z+18	; 0x12
    4c52:	93 89       	ldd	r25, Z+19	; 0x13
	FILTER32(angSample, sSensorData.adc.eva.angSenseFiltered);
    4c54:	e3 e6       	ldi	r30, 0x63	; 99
    4c56:	f8 e2       	ldi	r31, 0x28	; 40
    4c58:	40 85       	ldd	r20, Z+8	; 0x08
    4c5a:	51 85       	ldd	r21, Z+9	; 0x09
    4c5c:	62 85       	ldd	r22, Z+10	; 0x0a
    4c5e:	73 85       	ldd	r23, Z+11	; 0x0b
    4c60:	c5 2e       	mov	r12, r21
    4c62:	d6 2e       	mov	r13, r22
    4c64:	e7 2e       	mov	r14, r23
    4c66:	ff 24       	eor	r15, r15
    4c68:	e7 fc       	sbrc	r14, 7
    4c6a:	fa 94       	dec	r15
    4c6c:	4c 19       	sub	r20, r12
    4c6e:	5d 09       	sbc	r21, r13
    4c70:	6e 09       	sbc	r22, r14
    4c72:	7f 09       	sbc	r23, r15
    4c74:	09 2e       	mov	r0, r25
    4c76:	00 0c       	add	r0, r0
    4c78:	aa 0b       	sbc	r26, r26
    4c7a:	bb 0b       	sbc	r27, r27
    4c7c:	ba 2f       	mov	r27, r26
    4c7e:	a9 2f       	mov	r26, r25
    4c80:	98 2f       	mov	r25, r24
    4c82:	88 27       	eor	r24, r24
    4c84:	84 0f       	add	r24, r20
    4c86:	95 1f       	adc	r25, r21
    4c88:	a6 1f       	adc	r26, r22
    4c8a:	b7 1f       	adc	r27, r23
    4c8c:	80 87       	std	Z+8, r24	; 0x08
    4c8e:	91 87       	std	Z+9, r25	; 0x09
    4c90:	a2 87       	std	Z+10, r26	; 0x0a
    4c92:	b3 87       	std	Z+11, r27	; 0x0b
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4c94:	e0 e4       	ldi	r30, 0x40	; 64
    4c96:	f2 e0       	ldi	r31, 0x02	; 2
    4c98:	83 a5       	ldd	r24, Z+43	; 0x2b
    4c9a:	80 ff       	sbrs	r24, 0
    4c9c:	fd cf       	rjmp	.-6      	; 0x4c98 <__vector_71+0x184>
	ADCB.CH1.INTFLAGS = 0x01;
    4c9e:	e0 e4       	ldi	r30, 0x40	; 64
    4ca0:	f2 e0       	ldi	r31, 0x02	; 2
    4ca2:	81 e0       	ldi	r24, 0x01	; 1
    4ca4:	83 a7       	std	Z+43, r24	; 0x2b
	angFSSample = ADCB.CH1RES;
    4ca6:	82 89       	ldd	r24, Z+18	; 0x12
    4ca8:	93 89       	ldd	r25, Z+19	; 0x13
	FILTER32(angFSSample, sSensorData.adc.eva.angFSFiltered);
    4caa:	e3 e6       	ldi	r30, 0x63	; 99
    4cac:	f8 e2       	ldi	r31, 0x28	; 40
    4cae:	44 85       	ldd	r20, Z+12	; 0x0c
    4cb0:	55 85       	ldd	r21, Z+13	; 0x0d
    4cb2:	66 85       	ldd	r22, Z+14	; 0x0e
    4cb4:	77 85       	ldd	r23, Z+15	; 0x0f
    4cb6:	c5 2e       	mov	r12, r21
    4cb8:	d6 2e       	mov	r13, r22
    4cba:	e7 2e       	mov	r14, r23
    4cbc:	ff 24       	eor	r15, r15
    4cbe:	e7 fc       	sbrc	r14, 7
    4cc0:	fa 94       	dec	r15
    4cc2:	4c 19       	sub	r20, r12
    4cc4:	5d 09       	sbc	r21, r13
    4cc6:	6e 09       	sbc	r22, r14
    4cc8:	7f 09       	sbc	r23, r15
    4cca:	09 2e       	mov	r0, r25
    4ccc:	00 0c       	add	r0, r0
    4cce:	aa 0b       	sbc	r26, r26
    4cd0:	bb 0b       	sbc	r27, r27
    4cd2:	ba 2f       	mov	r27, r26
    4cd4:	a9 2f       	mov	r26, r25
    4cd6:	98 2f       	mov	r25, r24
    4cd8:	88 27       	eor	r24, r24
    4cda:	84 0f       	add	r24, r20
    4cdc:	95 1f       	adc	r25, r21
    4cde:	a6 1f       	adc	r26, r22
    4ce0:	b7 1f       	adc	r27, r23
    4ce2:	84 87       	std	Z+12, r24	; 0x0c
    4ce4:	95 87       	std	Z+13, r25	; 0x0d
    4ce6:	a6 87       	std	Z+14, r26	; 0x0e
    4ce8:	b7 87       	std	Z+15, r27	; 0x0f

//	Regen braking is off for the EVA for now; pin is re-used for CC turbo boost
	if(sSensorData.adc.eva.regBrakeState != selRegenPin) {
    4cea:	82 2f       	mov	r24, r18
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	a0 e0       	ldi	r26, 0x00	; 0
    4cf0:	b0 e0       	ldi	r27, 0x00	; 0
    4cf2:	40 89       	ldd	r20, Z+16	; 0x10
    4cf4:	51 89       	ldd	r21, Z+17	; 0x11
    4cf6:	62 89       	ldd	r22, Z+18	; 0x12
    4cf8:	73 89       	ldd	r23, Z+19	; 0x13
    4cfa:	48 17       	cp	r20, r24
    4cfc:	59 07       	cpc	r21, r25
    4cfe:	6a 07       	cpc	r22, r26
    4d00:	7b 07       	cpc	r23, r27
    4d02:	09 f4       	brne	.+2      	; 0x4d06 <__vector_71+0x1f2>
    4d04:	5a c1       	rjmp	.+692    	; 0x4fba <__vector_71+0x4a6>
		SET_CC_DRIVE(REGBRAKE_LEVEL);
    4d06:	e0 e8       	ldi	r30, 0x80	; 128
    4d08:	f6 e0       	ldi	r31, 0x06	; 6
    4d0a:	27 e0       	ldi	r18, 0x07	; 7
    4d0c:	25 83       	std	Z+5, r18	; 0x05
		PORTE.OUTSET = PIN3_bm;
    4d0e:	28 e0       	ldi	r18, 0x08	; 8
    4d10:	25 83       	std	Z+5, r18	; 0x05
		sSensorData.adc.eva.regBrakeState = selRegenPin;
    4d12:	e3 e6       	ldi	r30, 0x63	; 99
    4d14:	f8 e2       	ldi	r31, 0x28	; 40
    4d16:	80 8b       	std	Z+16, r24	; 0x10
    4d18:	91 8b       	std	Z+17, r25	; 0x11
    4d1a:	a2 8b       	std	Z+18, r26	; 0x12
    4d1c:	b3 8b       	std	Z+19, r27	; 0x13
		sSensorData.adc.eva.regBrakeTimestamp = sSessionCycleCount;
    4d1e:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4d22:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4d26:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4d2a:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4d2e:	84 8b       	std	Z+20, r24	; 0x14
    4d30:	95 8b       	std	Z+21, r25	; 0x15
    4d32:	a6 8b       	std	Z+22, r26	; 0x16
    4d34:	b7 8b       	std	Z+23, r27	; 0x17
    4d36:	41 c1       	rjmp	.+642    	; 0x4fba <__vector_71+0x4a6>
	else { PORTE.OUTSET = ~(x) & CC_PINS;  PORTE.OUTCLR = ((x) & CC_PINS); } \
} while(0)

static inline void ISRReadADC_H2A(void) {

	int16_t fcVoltageSample = ADCA.CH0RES - sCal.fcVoltageOffset, fcCurrentSample, scVoltageSample, scCurrentSample;
    4d38:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    4d3c:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
    4d40:	40 91 e5 29 	lds	r20, 0x29E5	; 0x8029e5 <sCal>
    4d44:	50 91 e6 29 	lds	r21, 0x29E6	; 0x8029e6 <sCal+0x1>
	int32_t fcPower, scPower;

	uint8_t idealDiodePin = PORTE.IN & PIN4_bm;
    4d48:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    4d4c:	80 71       	andi	r24, 0x10	; 16
    4d4e:	78 2e       	mov	r7, r24
	
	FILTER32(fcVoltageSample, sSensorData.adc.h2a.fcVoltageFiltered);
    4d50:	e3 e6       	ldi	r30, 0x63	; 99
    4d52:	f8 e2       	ldi	r31, 0x28	; 40
    4d54:	80 81       	ld	r24, Z
    4d56:	91 81       	ldd	r25, Z+1	; 0x01
    4d58:	a2 81       	ldd	r26, Z+2	; 0x02
    4d5a:	b3 81       	ldd	r27, Z+3	; 0x03
	else { PORTE.OUTSET = ~(x) & CC_PINS;  PORTE.OUTCLR = ((x) & CC_PINS); } \
} while(0)

static inline void ISRReadADC_H2A(void) {

	int16_t fcVoltageSample = ADCA.CH0RES - sCal.fcVoltageOffset, fcCurrentSample, scVoltageSample, scCurrentSample;
    4d5c:	24 1b       	sub	r18, r20
    4d5e:	35 0b       	sbc	r19, r21
	int32_t fcPower, scPower;

	uint8_t idealDiodePin = PORTE.IN & PIN4_bm;
	
	FILTER32(fcVoltageSample, sSensorData.adc.h2a.fcVoltageFiltered);
    4d60:	03 2e       	mov	r0, r19
    4d62:	00 0c       	add	r0, r0
    4d64:	44 0b       	sbc	r20, r20
    4d66:	55 0b       	sbc	r21, r21
    4d68:	c9 2e       	mov	r12, r25
    4d6a:	da 2e       	mov	r13, r26
    4d6c:	eb 2e       	mov	r14, r27
    4d6e:	ff 24       	eor	r15, r15
    4d70:	e7 fc       	sbrc	r14, 7
    4d72:	fa 94       	dec	r15
    4d74:	8c 19       	sub	r24, r12
    4d76:	9d 09       	sbc	r25, r13
    4d78:	ae 09       	sbc	r26, r14
    4d7a:	bf 09       	sbc	r27, r15
    4d7c:	cc 24       	eor	r12, r12
    4d7e:	d2 2e       	mov	r13, r18
    4d80:	e3 2e       	mov	r14, r19
    4d82:	f4 2e       	mov	r15, r20
    4d84:	8c 0d       	add	r24, r12
    4d86:	9d 1d       	adc	r25, r13
    4d88:	ae 1d       	adc	r26, r14
    4d8a:	bf 1d       	adc	r27, r15
    4d8c:	80 83       	st	Z, r24
    4d8e:	91 83       	std	Z+1, r25	; 0x01
    4d90:	a2 83       	std	Z+2, r26	; 0x02
    4d92:	b3 83       	std	Z+3, r27	; 0x03
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    4d94:	e0 e4       	ldi	r30, 0x40	; 64
    4d96:	f2 e0       	ldi	r31, 0x02	; 2
    4d98:	83 a1       	ldd	r24, Z+35	; 0x23
    4d9a:	80 ff       	sbrs	r24, 0
    4d9c:	fd cf       	rjmp	.-6      	; 0x4d98 <__vector_71+0x284>
	ADCB.CH0.INTFLAGS = 0x01;
    4d9e:	e0 e4       	ldi	r30, 0x40	; 64
    4da0:	f2 e0       	ldi	r31, 0x02	; 2
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	83 a3       	std	Z+35, r24	; 0x23
	fcCurrentSample = ADCB.CH0RES - sCal.fcCurrentOffset;
    4da6:	60 89       	ldd	r22, Z+16	; 0x10
    4da8:	71 89       	ldd	r23, Z+17	; 0x11
    4daa:	80 91 e7 29 	lds	r24, 0x29E7	; 0x8029e7 <sCal+0x2>
    4dae:	90 91 e8 29 	lds	r25, 0x29E8	; 0x8029e8 <sCal+0x3>
	FILTER32(fcCurrentSample, sSensorData.adc.h2a.fcCurrentFiltered);
    4db2:	e3 e6       	ldi	r30, 0x63	; 99
    4db4:	f8 e2       	ldi	r31, 0x28	; 40
    4db6:	c4 80       	ldd	r12, Z+4	; 0x04
    4db8:	d5 80       	ldd	r13, Z+5	; 0x05
    4dba:	e6 80       	ldd	r14, Z+6	; 0x06
    4dbc:	f7 80       	ldd	r15, Z+7	; 0x07
	
	FILTER32(fcVoltageSample, sSensorData.adc.h2a.fcVoltageFiltered);
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
	ADCB.CH0.INTFLAGS = 0x01;
	fcCurrentSample = ADCB.CH0RES - sCal.fcCurrentOffset;
    4dbe:	68 1b       	sub	r22, r24
    4dc0:	79 0b       	sbc	r23, r25
	FILTER32(fcCurrentSample, sSensorData.adc.h2a.fcCurrentFiltered);
    4dc2:	07 2e       	mov	r0, r23
    4dc4:	00 0c       	add	r0, r0
    4dc6:	88 0b       	sbc	r24, r24
    4dc8:	99 0b       	sbc	r25, r25
    4dca:	8d 2c       	mov	r8, r13
    4dcc:	9e 2c       	mov	r9, r14
    4dce:	af 2c       	mov	r10, r15
    4dd0:	bb 24       	eor	r11, r11
    4dd2:	a7 fc       	sbrc	r10, 7
    4dd4:	ba 94       	dec	r11
    4dd6:	c8 18       	sub	r12, r8
    4dd8:	d9 08       	sbc	r13, r9
    4dda:	ea 08       	sbc	r14, r10
    4ddc:	fb 08       	sbc	r15, r11
    4dde:	88 24       	eor	r8, r8
    4de0:	96 2e       	mov	r9, r22
    4de2:	a7 2e       	mov	r10, r23
    4de4:	b8 2e       	mov	r11, r24
    4de6:	c8 0c       	add	r12, r8
    4de8:	d9 1c       	adc	r13, r9
    4dea:	ea 1c       	adc	r14, r10
    4dec:	fb 1c       	adc	r15, r11
    4dee:	c4 82       	std	Z+4, r12	; 0x04
    4df0:	d5 82       	std	Z+5, r13	; 0x05
    4df2:	e6 82       	std	Z+6, r14	; 0x06
    4df4:	f7 82       	std	Z+7, r15	; 0x07
	
	fcPower = ((int32_t) fcVoltageSample) * ((int32_t) fcCurrentSample);
    4df6:	0e 94 18 34 	call	0x6830	; 0x6830 <__mulsi3>
	FILTER32PWR(fcPower, sSensorData.adc.h2a.fcPowerFiltered);
    4dfa:	c0 88       	ldd	r12, Z+16	; 0x10
    4dfc:	d1 88       	ldd	r13, Z+17	; 0x11
    4dfe:	e2 88       	ldd	r14, Z+18	; 0x12
    4e00:	f3 88       	ldd	r15, Z+19	; 0x13
    4e02:	33 27       	eor	r19, r19
    4e04:	f7 fc       	sbrc	r15, 7
    4e06:	3a 95       	dec	r19
    4e08:	2f 2d       	mov	r18, r15
    4e0a:	1e 2d       	mov	r17, r14
    4e0c:	0d 2d       	mov	r16, r13
    4e0e:	c0 1a       	sub	r12, r16
    4e10:	d1 0a       	sbc	r13, r17
    4e12:	e2 0a       	sbc	r14, r18
    4e14:	f3 0a       	sbc	r15, r19
    4e16:	c6 0e       	add	r12, r22
    4e18:	d7 1e       	adc	r13, r23
    4e1a:	e8 1e       	adc	r14, r24
    4e1c:	f9 1e       	adc	r15, r25
    4e1e:	c0 8a       	std	Z+16, r12	; 0x10
    4e20:	d1 8a       	std	Z+17, r13	; 0x11
    4e22:	e2 8a       	std	Z+18, r14	; 0x12
    4e24:	f3 8a       	std	Z+19, r15	; 0x13
	sSensorData.adc.h2a.fcEnergy += fcPower;
    4e26:	6b 01       	movw	r12, r22
    4e28:	7c 01       	movw	r14, r24
    4e2a:	ff 0c       	add	r15, r15
    4e2c:	cc 08       	sbc	r12, r12
    4e2e:	dc 2c       	mov	r13, r12
    4e30:	76 01       	movw	r14, r12
    4e32:	26 2f       	mov	r18, r22
    4e34:	37 2f       	mov	r19, r23
    4e36:	48 2f       	mov	r20, r24
    4e38:	59 2f       	mov	r21, r25
    4e3a:	6c 2d       	mov	r22, r12
    4e3c:	7c 2d       	mov	r23, r12
    4e3e:	8c 2d       	mov	r24, r12
    4e40:	9c 2d       	mov	r25, r12
    4e42:	a0 8c       	ldd	r10, Z+24	; 0x18
    4e44:	b1 8c       	ldd	r11, Z+25	; 0x19
    4e46:	c2 8c       	ldd	r12, Z+26	; 0x1a
    4e48:	d3 8c       	ldd	r13, Z+27	; 0x1b
    4e4a:	e4 8c       	ldd	r14, Z+28	; 0x1c
    4e4c:	f5 8c       	ldd	r15, Z+29	; 0x1d
    4e4e:	06 8d       	ldd	r16, Z+30	; 0x1e
    4e50:	17 8d       	ldd	r17, Z+31	; 0x1f
    4e52:	0e 94 33 34 	call	0x6866	; 0x6866 <__adddi3>
    4e56:	20 8f       	std	Z+24, r18	; 0x18
    4e58:	31 8f       	std	Z+25, r19	; 0x19
    4e5a:	42 8f       	std	Z+26, r20	; 0x1a
    4e5c:	53 8f       	std	Z+27, r21	; 0x1b
    4e5e:	64 8f       	std	Z+28, r22	; 0x1c
    4e60:	75 8f       	std	Z+29, r23	; 0x1d
    4e62:	86 8f       	std	Z+30, r24	; 0x1e
    4e64:	97 8f       	std	Z+31, r25	; 0x1f
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ; /* Should also not be necessary, by this time the conversion should be long over */
    4e66:	e0 e0       	ldi	r30, 0x00	; 0
    4e68:	f2 e0       	ldi	r31, 0x02	; 2
    4e6a:	83 a5       	ldd	r24, Z+43	; 0x2b
    4e6c:	80 ff       	sbrs	r24, 0
    4e6e:	fd cf       	rjmp	.-6      	; 0x4e6a <__vector_71+0x356>
	ADCA.CH1.INTFLAGS = 0x01;
    4e70:	e0 e0       	ldi	r30, 0x00	; 0
    4e72:	f2 e0       	ldi	r31, 0x02	; 2
    4e74:	81 e0       	ldi	r24, 0x01	; 1
    4e76:	83 a7       	std	Z+43, r24	; 0x2b
	scVoltageSample = ADCA.CH1RES - sCal.scVoltageOffset;
    4e78:	22 89       	ldd	r18, Z+18	; 0x12
    4e7a:	33 89       	ldd	r19, Z+19	; 0x13
    4e7c:	40 91 e9 29 	lds	r20, 0x29E9	; 0x8029e9 <sCal+0x4>
    4e80:	50 91 ea 29 	lds	r21, 0x29EA	; 0x8029ea <sCal+0x5>
	FILTER32(scVoltageSample, sSensorData.adc.h2a.scVoltageFiltered);
    4e84:	e3 e6       	ldi	r30, 0x63	; 99
    4e86:	f8 e2       	ldi	r31, 0x28	; 40
    4e88:	80 85       	ldd	r24, Z+8	; 0x08
    4e8a:	91 85       	ldd	r25, Z+9	; 0x09
    4e8c:	a2 85       	ldd	r26, Z+10	; 0x0a
    4e8e:	b3 85       	ldd	r27, Z+11	; 0x0b
	FILTER32PWR(fcPower, sSensorData.adc.h2a.fcPowerFiltered);
	sSensorData.adc.h2a.fcEnergy += fcPower;
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ; /* Should also not be necessary, by this time the conversion should be long over */
	ADCA.CH1.INTFLAGS = 0x01;
	scVoltageSample = ADCA.CH1RES - sCal.scVoltageOffset;
    4e90:	24 1b       	sub	r18, r20
    4e92:	35 0b       	sbc	r19, r21
	FILTER32(scVoltageSample, sSensorData.adc.h2a.scVoltageFiltered);
    4e94:	03 2e       	mov	r0, r19
    4e96:	00 0c       	add	r0, r0
    4e98:	44 0b       	sbc	r20, r20
    4e9a:	55 0b       	sbc	r21, r21
    4e9c:	c9 2e       	mov	r12, r25
    4e9e:	da 2e       	mov	r13, r26
    4ea0:	eb 2e       	mov	r14, r27
    4ea2:	ff 24       	eor	r15, r15
    4ea4:	e7 fc       	sbrc	r14, 7
    4ea6:	fa 94       	dec	r15
    4ea8:	8c 19       	sub	r24, r12
    4eaa:	9d 09       	sbc	r25, r13
    4eac:	ae 09       	sbc	r26, r14
    4eae:	bf 09       	sbc	r27, r15
    4eb0:	cc 24       	eor	r12, r12
    4eb2:	d2 2e       	mov	r13, r18
    4eb4:	e3 2e       	mov	r14, r19
    4eb6:	f4 2e       	mov	r15, r20
    4eb8:	8c 0d       	add	r24, r12
    4eba:	9d 1d       	adc	r25, r13
    4ebc:	ae 1d       	adc	r26, r14
    4ebe:	bf 1d       	adc	r27, r15
    4ec0:	80 87       	std	Z+8, r24	; 0x08
    4ec2:	91 87       	std	Z+9, r25	; 0x09
    4ec4:	a2 87       	std	Z+10, r26	; 0x0a
    4ec6:	b3 87       	std	Z+11, r27	; 0x0b
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4ec8:	e0 e4       	ldi	r30, 0x40	; 64
    4eca:	f2 e0       	ldi	r31, 0x02	; 2
    4ecc:	83 a5       	ldd	r24, Z+43	; 0x2b
    4ece:	80 ff       	sbrs	r24, 0
    4ed0:	fd cf       	rjmp	.-6      	; 0x4ecc <__vector_71+0x3b8>
	ADCB.CH1.INTFLAGS = 0x01;
    4ed2:	e0 e4       	ldi	r30, 0x40	; 64
    4ed4:	f2 e0       	ldi	r31, 0x02	; 2
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	83 a7       	std	Z+43, r24	; 0x2b
	scCurrentSample = ADCB.CH1RES - sCal.scCurrentOffset;
    4eda:	62 89       	ldd	r22, Z+18	; 0x12
    4edc:	73 89       	ldd	r23, Z+19	; 0x13
    4ede:	80 91 eb 29 	lds	r24, 0x29EB	; 0x8029eb <sCal+0x6>
    4ee2:	90 91 ec 29 	lds	r25, 0x29EC	; 0x8029ec <sCal+0x7>
	FILTER32(scCurrentSample, sSensorData.adc.h2a.scCurrentFiltered);
    4ee6:	e3 e6       	ldi	r30, 0x63	; 99
    4ee8:	f8 e2       	ldi	r31, 0x28	; 40
    4eea:	c4 84       	ldd	r12, Z+12	; 0x0c
    4eec:	d5 84       	ldd	r13, Z+13	; 0x0d
    4eee:	e6 84       	ldd	r14, Z+14	; 0x0e
    4ef0:	f7 84       	ldd	r15, Z+15	; 0x0f
	scVoltageSample = ADCA.CH1RES - sCal.scVoltageOffset;
	FILTER32(scVoltageSample, sSensorData.adc.h2a.scVoltageFiltered);
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
	ADCB.CH1.INTFLAGS = 0x01;
	scCurrentSample = ADCB.CH1RES - sCal.scCurrentOffset;
    4ef2:	68 1b       	sub	r22, r24
    4ef4:	79 0b       	sbc	r23, r25
	FILTER32(scCurrentSample, sSensorData.adc.h2a.scCurrentFiltered);
    4ef6:	07 2e       	mov	r0, r23
    4ef8:	00 0c       	add	r0, r0
    4efa:	88 0b       	sbc	r24, r24
    4efc:	99 0b       	sbc	r25, r25
    4efe:	8d 2c       	mov	r8, r13
    4f00:	9e 2c       	mov	r9, r14
    4f02:	af 2c       	mov	r10, r15
    4f04:	bb 24       	eor	r11, r11
    4f06:	a7 fc       	sbrc	r10, 7
    4f08:	ba 94       	dec	r11
    4f0a:	c8 18       	sub	r12, r8
    4f0c:	d9 08       	sbc	r13, r9
    4f0e:	ea 08       	sbc	r14, r10
    4f10:	fb 08       	sbc	r15, r11
    4f12:	88 24       	eor	r8, r8
    4f14:	96 2e       	mov	r9, r22
    4f16:	a7 2e       	mov	r10, r23
    4f18:	b8 2e       	mov	r11, r24
    4f1a:	c8 0c       	add	r12, r8
    4f1c:	d9 1c       	adc	r13, r9
    4f1e:	ea 1c       	adc	r14, r10
    4f20:	fb 1c       	adc	r15, r11
    4f22:	c4 86       	std	Z+12, r12	; 0x0c
    4f24:	d5 86       	std	Z+13, r13	; 0x0d
    4f26:	e6 86       	std	Z+14, r14	; 0x0e
    4f28:	f7 86       	std	Z+15, r15	; 0x0f

	scPower = ((int32_t) scVoltageSample) * ((int32_t) scCurrentSample);
    4f2a:	0e 94 18 34 	call	0x6830	; 0x6830 <__mulsi3>
	FILTER32PWR(scPower, sSensorData.adc.h2a.scPowerFiltered);
    4f2e:	c4 88       	ldd	r12, Z+20	; 0x14
    4f30:	d5 88       	ldd	r13, Z+21	; 0x15
    4f32:	e6 88       	ldd	r14, Z+22	; 0x16
    4f34:	f7 88       	ldd	r15, Z+23	; 0x17
    4f36:	33 27       	eor	r19, r19
    4f38:	f7 fc       	sbrc	r15, 7
    4f3a:	3a 95       	dec	r19
    4f3c:	2f 2d       	mov	r18, r15
    4f3e:	1e 2d       	mov	r17, r14
    4f40:	0d 2d       	mov	r16, r13
    4f42:	c0 1a       	sub	r12, r16
    4f44:	d1 0a       	sbc	r13, r17
    4f46:	e2 0a       	sbc	r14, r18
    4f48:	f3 0a       	sbc	r15, r19
    4f4a:	c6 0e       	add	r12, r22
    4f4c:	d7 1e       	adc	r13, r23
    4f4e:	e8 1e       	adc	r14, r24
    4f50:	f9 1e       	adc	r15, r25
    4f52:	c4 8a       	std	Z+20, r12	; 0x14
    4f54:	d5 8a       	std	Z+21, r13	; 0x15
    4f56:	e6 8a       	std	Z+22, r14	; 0x16
    4f58:	f7 8a       	std	Z+23, r15	; 0x17
	sSensorData.adc.h2a.scEnergy += scPower;
    4f5a:	6b 01       	movw	r12, r22
    4f5c:	7c 01       	movw	r14, r24
    4f5e:	ff 0c       	add	r15, r15
    4f60:	cc 08       	sbc	r12, r12
    4f62:	dc 2c       	mov	r13, r12
    4f64:	76 01       	movw	r14, r12
    4f66:	26 2f       	mov	r18, r22
    4f68:	37 2f       	mov	r19, r23
    4f6a:	48 2f       	mov	r20, r24
    4f6c:	59 2f       	mov	r21, r25
    4f6e:	6c 2d       	mov	r22, r12
    4f70:	7c 2d       	mov	r23, r12
    4f72:	8c 2d       	mov	r24, r12
    4f74:	9c 2d       	mov	r25, r12
    4f76:	a0 a0       	ldd	r10, Z+32	; 0x20
    4f78:	b1 a0       	ldd	r11, Z+33	; 0x21
    4f7a:	c2 a0       	ldd	r12, Z+34	; 0x22
    4f7c:	d3 a0       	ldd	r13, Z+35	; 0x23
    4f7e:	e4 a0       	ldd	r14, Z+36	; 0x24
    4f80:	f5 a0       	ldd	r15, Z+37	; 0x25
    4f82:	06 a1       	ldd	r16, Z+38	; 0x26
    4f84:	17 a1       	ldd	r17, Z+39	; 0x27
    4f86:	0e 94 33 34 	call	0x6866	; 0x6866 <__adddi3>
    4f8a:	20 a3       	std	Z+32, r18	; 0x20
    4f8c:	31 a3       	std	Z+33, r19	; 0x21
    4f8e:	42 a3       	std	Z+34, r20	; 0x22
    4f90:	53 a3       	std	Z+35, r21	; 0x23
    4f92:	64 a3       	std	Z+36, r22	; 0x24
    4f94:	75 a3       	std	Z+37, r23	; 0x25
    4f96:	86 a3       	std	Z+38, r24	; 0x26
    4f98:	97 a3       	std	Z+39, r25	; 0x27
	
	if(sSensorData.adc.h2a.idealDiodeState != idealDiodePin) {
    4f9a:	80 a5       	ldd	r24, Z+40	; 0x28
    4f9c:	78 16       	cp	r7, r24
    4f9e:	69 f0       	breq	.+26     	; 0x4fba <__vector_71+0x4a6>
		sSensorData.adc.h2a.idealDiodeState = idealDiodePin;
    4fa0:	70 a6       	std	Z+40, r7	; 0x28
		sSensorData.adc.h2a.idealDiodeTimestamp = sSessionCycleCount;
    4fa2:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    4fa6:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    4faa:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    4fae:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    4fb2:	81 a7       	std	Z+41, r24	; 0x29
    4fb4:	92 a7       	std	Z+42, r25	; 0x2a
    4fb6:	a3 a7       	std	Z+43, r26	; 0x2b
    4fb8:	b4 a7       	std	Z+44, r27	; 0x2c
	if(I_AM_EVA_L || I_AM_EVA_R)
		ISRReadADC_EVA();
	else
		ISRReadADC_H2A();
	
	while(!(ADCA.CH2.INTFLAGS & 0x01)) ;
    4fba:	e0 e0       	ldi	r30, 0x00	; 0
    4fbc:	f2 e0       	ldi	r31, 0x02	; 2
    4fbe:	83 a9       	ldd	r24, Z+51	; 0x33
    4fc0:	80 ff       	sbrs	r24, 0
    4fc2:	fd cf       	rjmp	.-6      	; 0x4fbe <__vector_71+0x4aa>
	ADCA.CH2.INTFLAGS = 0x01;
    4fc4:	e0 e0       	ldi	r30, 0x00	; 0
    4fc6:	f2 e0       	ldi	r31, 0x02	; 2
    4fc8:	81 e0       	ldi	r24, 0x01	; 1
    4fca:	83 ab       	std	Z+51, r24	; 0x33
	spRawSample = ADCA.CH2RES;
    4fcc:	84 89       	ldd	r24, Z+20	; 0x14
    4fce:	95 89       	ldd	r25, Z+21	; 0x15
	if(spRawSample < SPEEDSENSOR_MIDWAY_VAL) {
    4fd0:	87 3d       	cpi	r24, 0xD7	; 215
    4fd2:	92 40       	sbci	r25, 0x02	; 2
    4fd4:	94 f4       	brge	.+36     	; 0x4ffa <__vector_71+0x4e6>
		sSpeedSensorPosDeglitchCounter = 0;
    4fd6:	10 92 62 28 	sts	0x2862, r1	; 0x802862 <sSpeedSensorPosDeglitchCounter.4808>
		if(sSpeedSensorPreviousState && ++sSpeedSensorNegDeglitchCounter >= SPEEDSENSOR_DEGLITCH)
    4fda:	80 91 61 28 	lds	r24, 0x2861	; 0x802861 <sSpeedSensorPreviousState.4807>
    4fde:	88 23       	and	r24, r24
    4fe0:	09 f4       	brne	.+2      	; 0x4fe4 <__vector_71+0x4d0>
    4fe2:	67 c0       	rjmp	.+206    	; 0x50b2 <__vector_71+0x59e>
    4fe4:	80 91 60 28 	lds	r24, 0x2860	; 0x802860 <sSpeedSensorNegDeglitchCounter.4809>
    4fe8:	8f 5f       	subi	r24, 0xFF	; 255
    4fea:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <sSpeedSensorNegDeglitchCounter.4809>
    4fee:	85 30       	cpi	r24, 0x05	; 5
    4ff0:	08 f4       	brcc	.+2      	; 0x4ff4 <__vector_71+0x4e0>
    4ff2:	5f c0       	rjmp	.+190    	; 0x50b2 <__vector_71+0x59e>
			sSpeedSensorPreviousState = 0;
    4ff4:	10 92 61 28 	sts	0x2861, r1	; 0x802861 <sSpeedSensorPreviousState.4807>
    4ff8:	5c c0       	rjmp	.+184    	; 0x50b2 <__vector_71+0x59e>
	}
	else {
		sSpeedSensorNegDeglitchCounter = 0;
    4ffa:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <sSpeedSensorNegDeglitchCounter.4809>
		if(!sSpeedSensorPreviousState && ++sSpeedSensorPosDeglitchCounter >= SPEEDSENSOR_DEGLITCH) {
    4ffe:	80 91 61 28 	lds	r24, 0x2861	; 0x802861 <sSpeedSensorPreviousState.4807>
    5002:	81 11       	cpse	r24, r1
    5004:	56 c0       	rjmp	.+172    	; 0x50b2 <__vector_71+0x59e>
    5006:	80 91 62 28 	lds	r24, 0x2862	; 0x802862 <sSpeedSensorPosDeglitchCounter.4808>
    500a:	8f 5f       	subi	r24, 0xFF	; 255
    500c:	80 93 62 28 	sts	0x2862, r24	; 0x802862 <sSpeedSensorPosDeglitchCounter.4808>
    5010:	85 30       	cpi	r24, 0x05	; 5
    5012:	08 f4       	brcc	.+2      	; 0x5016 <__vector_71+0x502>
    5014:	4e c0       	rjmp	.+156    	; 0x50b2 <__vector_71+0x59e>
			sSpeedSensorPreviousState = 1;
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	80 93 61 28 	sts	0x2861, r24	; 0x802861 <sSpeedSensorPreviousState.4807>
			sSensorData.speedSensorPositivePulsesSeen++;
    501c:	e0 ec       	ldi	r30, 0xC0	; 192
    501e:	f8 e2       	ldi	r31, 0x28	; 40
    5020:	80 81       	ld	r24, Z
    5022:	91 81       	ldd	r25, Z+1	; 0x01
    5024:	a2 81       	ldd	r26, Z+2	; 0x02
    5026:	b3 81       	ldd	r27, Z+3	; 0x03
    5028:	01 96       	adiw	r24, 0x01	; 1
    502a:	a1 1d       	adc	r26, r1
    502c:	b1 1d       	adc	r27, r1
    502e:	80 83       	st	Z, r24
    5030:	91 83       	std	Z+1, r25	; 0x01
    5032:	a2 83       	std	Z+2, r26	; 0x02
    5034:	b3 83       	std	Z+3, r27	; 0x03
			if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp < SPEEDSENSOR_MAX_INTERVAL)
    5036:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    503a:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    503e:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5042:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5046:	40 91 5c 28 	lds	r20, 0x285C	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4806>
    504a:	50 91 5d 28 	lds	r21, 0x285D	; 0x80285d <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x1>
    504e:	60 91 5e 28 	lds	r22, 0x285E	; 0x80285e <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x2>
    5052:	70 91 5f 28 	lds	r23, 0x285F	; 0x80285f <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x3>
    5056:	84 1b       	sub	r24, r20
    5058:	95 0b       	sbc	r25, r21
    505a:	a6 0b       	sbc	r26, r22
    505c:	b7 0b       	sbc	r27, r23
    505e:	82 38       	cpi	r24, 0x82	; 130
    5060:	96 40       	sbci	r25, 0x06	; 6
    5062:	a1 05       	cpc	r26, r1
    5064:	b1 05       	cpc	r27, r1
    5066:	78 f4       	brcc	.+30     	; 0x5086 <__vector_71+0x572>
				sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    5068:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    506c:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    5070:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5074:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5078:	84 1b       	sub	r24, r20
    507a:	95 0b       	sbc	r25, r21
    507c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    5080:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
    5084:	06 c0       	rjmp	.+12     	; 0x5092 <__vector_71+0x57e>
			else
				sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    5086:	82 e8       	ldi	r24, 0x82	; 130
    5088:	96 e0       	ldi	r25, 0x06	; 6
    508a:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    508e:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
			sSpeedSensorPreviousValidEdgeTimestamp = sSessionCycleCount;
    5092:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5096:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    509a:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    509e:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    50a2:	80 93 5c 28 	sts	0x285C, r24	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4806>
    50a6:	90 93 5d 28 	sts	0x285D, r25	; 0x80285d <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x1>
    50aa:	a0 93 5e 28 	sts	0x285E, r26	; 0x80285e <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x2>
    50ae:	b0 93 5f 28 	sts	0x285F, r27	; 0x80285f <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x3>
		}
	}
	
	if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) SPEEDSENSOR_MAX_INTERVAL)
    50b2:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    50b6:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    50ba:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    50be:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    50c2:	40 91 5c 28 	lds	r20, 0x285C	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4806>
    50c6:	50 91 5d 28 	lds	r21, 0x285D	; 0x80285d <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x1>
    50ca:	60 91 5e 28 	lds	r22, 0x285E	; 0x80285e <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x2>
    50ce:	70 91 5f 28 	lds	r23, 0x285F	; 0x80285f <sSpeedSensorPreviousValidEdgeTimestamp.4806+0x3>
    50d2:	84 1b       	sub	r24, r20
    50d4:	95 0b       	sbc	r25, r21
    50d6:	a6 0b       	sbc	r26, r22
    50d8:	b7 0b       	sbc	r27, r23
    50da:	83 38       	cpi	r24, 0x83	; 131
    50dc:	96 40       	sbci	r25, 0x06	; 6
    50de:	a1 05       	cpc	r26, r1
    50e0:	b1 05       	cpc	r27, r1
    50e2:	38 f0       	brcs	.+14     	; 0x50f2 <__vector_71+0x5de>
		sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    50e4:	82 e8       	ldi	r24, 0x82	; 130
    50e6:	96 e0       	ldi	r25, 0x06	; 6
    50e8:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    50ec:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
    50f0:	27 c0       	rjmp	.+78     	; 0x5140 <__vector_71+0x62c>
	else if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) sSpeedSensorLastValidInterval)
    50f2:	c0 90 e5 28 	lds	r12, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    50f6:	d0 90 e6 28 	lds	r13, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    50fa:	e0 90 e7 28 	lds	r14, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    50fe:	f0 90 e8 28 	lds	r15, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5102:	c4 1a       	sub	r12, r20
    5104:	d5 0a       	sbc	r13, r21
    5106:	e6 0a       	sbc	r14, r22
    5108:	f7 0a       	sbc	r15, r23
    510a:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    510e:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
    5112:	09 2e       	mov	r0, r25
    5114:	00 0c       	add	r0, r0
    5116:	aa 0b       	sbc	r26, r26
    5118:	bb 0b       	sbc	r27, r27
    511a:	8c 15       	cp	r24, r12
    511c:	9d 05       	cpc	r25, r13
    511e:	ae 05       	cpc	r26, r14
    5120:	bf 05       	cpc	r27, r15
    5122:	70 f4       	brcc	.+28     	; 0x5140 <__vector_71+0x62c>
		sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    5124:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5128:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    512c:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5130:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5134:	84 1b       	sub	r24, r20
    5136:	95 0b       	sbc	r25, r21
    5138:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    513c:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
		
	FILTER32(sSpeedSensorLastValidInterval, sSensorData.speedSensorPulseInterval);
    5140:	ec eb       	ldi	r30, 0xBC	; 188
    5142:	f8 e2       	ldi	r31, 0x28	; 40
    5144:	80 81       	ld	r24, Z
    5146:	91 81       	ldd	r25, Z+1	; 0x01
    5148:	a2 81       	ldd	r26, Z+2	; 0x02
    514a:	b3 81       	ldd	r27, Z+3	; 0x03
    514c:	49 2f       	mov	r20, r25
    514e:	5a 2f       	mov	r21, r26
    5150:	6b 2f       	mov	r22, r27
    5152:	77 27       	eor	r23, r23
    5154:	67 fd       	sbrc	r22, 7
    5156:	7a 95       	dec	r23
    5158:	8c 01       	movw	r16, r24
    515a:	9d 01       	movw	r18, r26
    515c:	04 1b       	sub	r16, r20
    515e:	15 0b       	sbc	r17, r21
    5160:	26 0b       	sbc	r18, r22
    5162:	37 0b       	sbc	r19, r23
    5164:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sSpeedSensorLastValidInterval.4805>
    5168:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <sSpeedSensorLastValidInterval.4805+0x1>
    516c:	09 2e       	mov	r0, r25
    516e:	00 0c       	add	r0, r0
    5170:	aa 0b       	sbc	r26, r26
    5172:	bb 0b       	sbc	r27, r27
    5174:	ba 2f       	mov	r27, r26
    5176:	a9 2f       	mov	r26, r25
    5178:	98 2f       	mov	r25, r24
    517a:	88 27       	eor	r24, r24
    517c:	80 0f       	add	r24, r16
    517e:	91 1f       	adc	r25, r17
    5180:	a2 1f       	adc	r26, r18
    5182:	b3 1f       	adc	r27, r19
    5184:	80 83       	st	Z, r24
    5186:	91 83       	std	Z+1, r25	; 0x01
    5188:	a2 83       	std	Z+2, r26	; 0x02
    518a:	b3 83       	std	Z+3, r27	; 0x03

	while(!(ADCB.CH2.INTFLAGS & 0x01)) ;
    518c:	e0 e4       	ldi	r30, 0x40	; 64
    518e:	f2 e0       	ldi	r31, 0x02	; 2
    5190:	83 a9       	ldd	r24, Z+51	; 0x33
    5192:	80 ff       	sbrs	r24, 0
    5194:	fd cf       	rjmp	.-6      	; 0x5190 <__vector_71+0x67c>
	ADCB.CH2.INTFLAGS = 0x01;
    5196:	e0 e4       	ldi	r30, 0x40	; 64
    5198:	f2 e0       	ldi	r31, 0x02	; 2
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	83 ab       	std	Z+51, r24	; 0x33
	driverTempSample = ADCB.CH2RES;
    519e:	84 89       	ldd	r24, Z+20	; 0x14
    51a0:	95 89       	ldd	r25, Z+21	; 0x15
	FILTER32(driverTempSample, sSensorData.driverTempFiltered);
    51a2:	e3 e6       	ldi	r30, 0x63	; 99
    51a4:	f8 e2       	ldi	r31, 0x28	; 40
    51a6:	45 a5       	ldd	r20, Z+45	; 0x2d
    51a8:	56 a5       	ldd	r21, Z+46	; 0x2e
    51aa:	67 a5       	ldd	r22, Z+47	; 0x2f
    51ac:	70 a9       	ldd	r23, Z+48	; 0x30
    51ae:	c5 2e       	mov	r12, r21
    51b0:	d6 2e       	mov	r13, r22
    51b2:	e7 2e       	mov	r14, r23
    51b4:	ff 24       	eor	r15, r15
    51b6:	e7 fc       	sbrc	r14, 7
    51b8:	fa 94       	dec	r15
    51ba:	4c 19       	sub	r20, r12
    51bc:	5d 09       	sbc	r21, r13
    51be:	6e 09       	sbc	r22, r14
    51c0:	7f 09       	sbc	r23, r15
    51c2:	09 2e       	mov	r0, r25
    51c4:	00 0c       	add	r0, r0
    51c6:	aa 0b       	sbc	r26, r26
    51c8:	bb 0b       	sbc	r27, r27
    51ca:	ba 2f       	mov	r27, r26
    51cc:	a9 2f       	mov	r26, r25
    51ce:	98 2f       	mov	r25, r24
    51d0:	88 27       	eor	r24, r24
    51d2:	84 0f       	add	r24, r20
    51d4:	95 1f       	adc	r25, r21
    51d6:	a6 1f       	adc	r26, r22
    51d8:	b7 1f       	adc	r27, r23
    51da:	85 a7       	std	Z+45, r24	; 0x2d
    51dc:	96 a7       	std	Z+46, r25	; 0x2e
    51de:	a7 a7       	std	Z+47, r26	; 0x2f
    51e0:	b0 ab       	std	Z+48, r27	; 0x30
	
	while(!(ADCA.CH3.INTFLAGS & 0x01)) ;
    51e2:	e0 e0       	ldi	r30, 0x00	; 0
    51e4:	f2 e0       	ldi	r31, 0x02	; 2
    51e6:	83 ad       	ldd	r24, Z+59	; 0x3b
    51e8:	80 ff       	sbrs	r24, 0
    51ea:	fd cf       	rjmp	.-6      	; 0x51e6 <__vector_71+0x6d2>
	ADCA.CH3.INTFLAGS = 0x01;
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <__TEXT_REGION_LENGTH__+0x70023b>
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
    51f2:	e0 e4       	ldi	r30, 0x40	; 64
    51f4:	f2 e0       	ldi	r31, 0x02	; 2
    51f6:	83 ad       	ldd	r24, Z+59	; 0x3b
    51f8:	80 ff       	sbrs	r24, 0
    51fa:	fd cf       	rjmp	.-6      	; 0x51f6 <__vector_71+0x6e2>
	ADCB.CH3.INTFLAGS = 0x01;
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <__TEXT_REGION_LENGTH__+0x70027b>
	if(sSamplingVin) {
    5202:	80 91 5b 28 	lds	r24, 0x285B	; 0x80285b <sSamplingVin.4801>
    5206:	88 23       	and	r24, r24
    5208:	09 f4       	brne	.+2      	; 0x520c <__vector_71+0x6f8>
    520a:	c1 c0       	rjmp	.+386    	; 0x538e <__vector_71+0x87a>
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
    520c:	61 2c       	mov	r6, r1
    520e:	68 94       	set
    5210:	77 24       	eor	r7, r7
    5212:	71 f8       	bld	r7, 1
    5214:	d3 01       	movw	r26, r6
    5216:	56 96       	adiw	r26, 0x16	; 22
    5218:	2d 91       	ld	r18, X+
    521a:	3c 91       	ld	r19, X
    521c:	57 97       	sbiw	r26, 0x17	; 23
    521e:	a5 ee       	ldi	r26, 0xE5	; 229
    5220:	b9 e2       	ldi	r27, 0x29	; 41
    5222:	5c 96       	adiw	r26, 0x1c	; 28
    5224:	8d 91       	ld	r24, X+
    5226:	9c 91       	ld	r25, X
    5228:	5d 97       	sbiw	r26, 0x1d	; 29
		FILTER32(inVoltageSample, sSensorData.inVoltageFiltered);
    522a:	e3 e6       	ldi	r30, 0x63	; 99
    522c:	f8 e2       	ldi	r31, 0x28	; 40
    522e:	c1 ac       	ldd	r12, Z+57	; 0x39
    5230:	d2 ac       	ldd	r13, Z+58	; 0x3a
    5232:	e3 ac       	ldd	r14, Z+59	; 0x3b
    5234:	f4 ac       	ldd	r15, Z+60	; 0x3c
	while(!(ADCA.CH3.INTFLAGS & 0x01)) ;
	ADCA.CH3.INTFLAGS = 0x01;
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
	ADCB.CH3.INTFLAGS = 0x01;
	if(sSamplingVin) {
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
    5236:	28 1b       	sub	r18, r24
    5238:	39 0b       	sbc	r19, r25
		FILTER32(inVoltageSample, sSensorData.inVoltageFiltered);
    523a:	03 2e       	mov	r0, r19
    523c:	00 0c       	add	r0, r0
    523e:	44 0b       	sbc	r20, r20
    5240:	55 0b       	sbc	r21, r21
    5242:	8d 2c       	mov	r8, r13
    5244:	9e 2c       	mov	r9, r14
    5246:	af 2c       	mov	r10, r15
    5248:	bb 24       	eor	r11, r11
    524a:	a7 fc       	sbrc	r10, 7
    524c:	ba 94       	dec	r11
    524e:	c8 18       	sub	r12, r8
    5250:	d9 08       	sbc	r13, r9
    5252:	ea 08       	sbc	r14, r10
    5254:	fb 08       	sbc	r15, r11
    5256:	88 24       	eor	r8, r8
    5258:	92 2e       	mov	r9, r18
    525a:	a3 2e       	mov	r10, r19
    525c:	b4 2e       	mov	r11, r20
    525e:	c8 0c       	add	r12, r8
    5260:	d9 1c       	adc	r13, r9
    5262:	ea 1c       	adc	r14, r10
    5264:	fb 1c       	adc	r15, r11
    5266:	c1 ae       	std	Z+57, r12	; 0x39
    5268:	d2 ae       	std	Z+58, r13	; 0x3a
    526a:	e3 ae       	std	Z+59, r14	; 0x3b
    526c:	f4 ae       	std	Z+60, r15	; 0x3c
		inCurrentSample = ADCB.CH3RES - sCal.inCurrentOffset;
    526e:	e0 e4       	ldi	r30, 0x40	; 64
    5270:	f2 e0       	ldi	r31, 0x02	; 2
    5272:	66 89       	ldd	r22, Z+22	; 0x16
    5274:	77 89       	ldd	r23, Z+23	; 0x17
    5276:	5e 96       	adiw	r26, 0x1e	; 30
    5278:	8d 91       	ld	r24, X+
    527a:	9c 91       	ld	r25, X
    527c:	5f 97       	sbiw	r26, 0x1f	; 31
		FILTER32(inCurrentSample, sSensorData.inCurrentFiltered);
    527e:	a0 ea       	ldi	r26, 0xA0	; 160
    5280:	b8 e2       	ldi	r27, 0x28	; 40
    5282:	cd 90       	ld	r12, X+
    5284:	dd 90       	ld	r13, X+
    5286:	ed 90       	ld	r14, X+
    5288:	fc 90       	ld	r15, X
    528a:	13 97       	sbiw	r26, 0x03	; 3
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
	ADCB.CH3.INTFLAGS = 0x01;
	if(sSamplingVin) {
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
		FILTER32(inVoltageSample, sSensorData.inVoltageFiltered);
		inCurrentSample = ADCB.CH3RES - sCal.inCurrentOffset;
    528c:	68 1b       	sub	r22, r24
    528e:	79 0b       	sbc	r23, r25
		FILTER32(inCurrentSample, sSensorData.inCurrentFiltered);
    5290:	07 2e       	mov	r0, r23
    5292:	00 0c       	add	r0, r0
    5294:	88 0b       	sbc	r24, r24
    5296:	99 0b       	sbc	r25, r25
    5298:	8d 2c       	mov	r8, r13
    529a:	9e 2c       	mov	r9, r14
    529c:	af 2c       	mov	r10, r15
    529e:	bb 24       	eor	r11, r11
    52a0:	a7 fc       	sbrc	r10, 7
    52a2:	ba 94       	dec	r11
    52a4:	c8 18       	sub	r12, r8
    52a6:	d9 08       	sbc	r13, r9
    52a8:	ea 08       	sbc	r14, r10
    52aa:	fb 08       	sbc	r15, r11
    52ac:	88 24       	eor	r8, r8
    52ae:	96 2e       	mov	r9, r22
    52b0:	a7 2e       	mov	r10, r23
    52b2:	b8 2e       	mov	r11, r24
    52b4:	c8 0c       	add	r12, r8
    52b6:	d9 1c       	adc	r13, r9
    52b8:	ea 1c       	adc	r14, r10
    52ba:	fb 1c       	adc	r15, r11
    52bc:	cd 92       	st	X+, r12
    52be:	dd 92       	st	X+, r13
    52c0:	ed 92       	st	X+, r14
    52c2:	fc 92       	st	X, r15
    52c4:	13 97       	sbiw	r26, 0x03	; 3
		inPower = ((int32_t) inVoltageSample) * ((int32_t) inCurrentSample);
    52c6:	0e 94 18 34 	call	0x6830	; 0x6830 <__mulsi3>
		FILTER32PWR(inPower, sSensorData.inPowerFiltered);
    52ca:	a8 ea       	ldi	r26, 0xA8	; 168
    52cc:	b8 e2       	ldi	r27, 0x28	; 40
    52ce:	cd 90       	ld	r12, X+
    52d0:	dd 90       	ld	r13, X+
    52d2:	ed 90       	ld	r14, X+
    52d4:	fc 90       	ld	r15, X
    52d6:	13 97       	sbiw	r26, 0x03	; 3
    52d8:	33 27       	eor	r19, r19
    52da:	f7 fc       	sbrc	r15, 7
    52dc:	3a 95       	dec	r19
    52de:	2f 2d       	mov	r18, r15
    52e0:	1e 2d       	mov	r17, r14
    52e2:	0d 2d       	mov	r16, r13
    52e4:	c0 1a       	sub	r12, r16
    52e6:	d1 0a       	sbc	r13, r17
    52e8:	e2 0a       	sbc	r14, r18
    52ea:	f3 0a       	sbc	r15, r19
    52ec:	c6 0e       	add	r12, r22
    52ee:	d7 1e       	adc	r13, r23
    52f0:	e8 1e       	adc	r14, r24
    52f2:	f9 1e       	adc	r15, r25
    52f4:	cd 92       	st	X+, r12
    52f6:	dd 92       	st	X+, r13
    52f8:	ed 92       	st	X+, r14
    52fa:	fc 92       	st	X, r15
    52fc:	13 97       	sbiw	r26, 0x03	; 3
		sSensorData.inEnergy +=  2 * inPower;
    52fe:	a4 eb       	ldi	r26, 0xB4	; 180
    5300:	b8 e2       	ldi	r27, 0x28	; 40
    5302:	66 0f       	add	r22, r22
    5304:	77 1f       	adc	r23, r23
    5306:	88 1f       	adc	r24, r24
    5308:	99 1f       	adc	r25, r25
    530a:	6b 01       	movw	r12, r22
    530c:	7c 01       	movw	r14, r24
    530e:	ff 0c       	add	r15, r15
    5310:	cc 08       	sbc	r12, r12
    5312:	dc 2c       	mov	r13, r12
    5314:	76 01       	movw	r14, r12
    5316:	26 2f       	mov	r18, r22
    5318:	37 2f       	mov	r19, r23
    531a:	48 2f       	mov	r20, r24
    531c:	59 2f       	mov	r21, r25
    531e:	6c 2d       	mov	r22, r12
    5320:	7c 2d       	mov	r23, r12
    5322:	8c 2d       	mov	r24, r12
    5324:	9c 2d       	mov	r25, r12
    5326:	ac 90       	ld	r10, X
    5328:	11 96       	adiw	r26, 0x01	; 1
    532a:	bc 90       	ld	r11, X
    532c:	11 97       	sbiw	r26, 0x01	; 1
    532e:	12 96       	adiw	r26, 0x02	; 2
    5330:	cc 90       	ld	r12, X
    5332:	12 97       	sbiw	r26, 0x02	; 2
    5334:	13 96       	adiw	r26, 0x03	; 3
    5336:	dc 90       	ld	r13, X
    5338:	13 97       	sbiw	r26, 0x03	; 3
    533a:	14 96       	adiw	r26, 0x04	; 4
    533c:	ec 90       	ld	r14, X
    533e:	14 97       	sbiw	r26, 0x04	; 4
    5340:	15 96       	adiw	r26, 0x05	; 5
    5342:	fc 90       	ld	r15, X
    5344:	15 97       	sbiw	r26, 0x05	; 5
    5346:	16 96       	adiw	r26, 0x06	; 6
    5348:	0c 91       	ld	r16, X
    534a:	16 97       	sbiw	r26, 0x06	; 6
    534c:	17 96       	adiw	r26, 0x07	; 7
    534e:	1c 91       	ld	r17, X
    5350:	17 97       	sbiw	r26, 0x07	; 7
    5352:	0e 94 33 34 	call	0x6866	; 0x6866 <__adddi3>
    5356:	2c 93       	st	X, r18
    5358:	11 96       	adiw	r26, 0x01	; 1
    535a:	3c 93       	st	X, r19
    535c:	11 97       	sbiw	r26, 0x01	; 1
    535e:	12 96       	adiw	r26, 0x02	; 2
    5360:	4c 93       	st	X, r20
    5362:	12 97       	sbiw	r26, 0x02	; 2
    5364:	13 96       	adiw	r26, 0x03	; 3
    5366:	5c 93       	st	X, r21
    5368:	13 97       	sbiw	r26, 0x03	; 3
    536a:	14 96       	adiw	r26, 0x04	; 4
    536c:	6c 93       	st	X, r22
    536e:	14 97       	sbiw	r26, 0x04	; 4
    5370:	15 96       	adiw	r26, 0x05	; 5
    5372:	7c 93       	st	X, r23
    5374:	15 97       	sbiw	r26, 0x05	; 5
    5376:	16 96       	adiw	r26, 0x06	; 6
    5378:	8c 93       	st	X, r24
    537a:	16 97       	sbiw	r26, 0x06	; 6
    537c:	17 96       	adiw	r26, 0x07	; 7
    537e:	9c 93       	st	X, r25
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN12_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_VMOTOR on PB4 vs V33/2 on PA1 */
    5380:	81 e6       	ldi	r24, 0x61	; 97
    5382:	d3 01       	movw	r26, r6
    5384:	d9 96       	adiw	r26, 0x39	; 57
    5386:	8c 93       	st	X, r24
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_IMOTOR on PB5 vs V33/2 on PB1 */
    5388:	89 e2       	ldi	r24, 0x29	; 41
    538a:	81 af       	std	Z+57, r24	; 0x39
    538c:	a0 c0       	rjmp	.+320    	; 0x54ce <__vector_71+0x9ba>
	}
	else {
		motorVoltageSample = ADCA.CH3RES - sCal.motorVoltageOffset;
    538e:	61 2c       	mov	r6, r1
    5390:	68 94       	set
    5392:	77 24       	eor	r7, r7
    5394:	71 f8       	bld	r7, 1
    5396:	f3 01       	movw	r30, r6
    5398:	26 89       	ldd	r18, Z+22	; 0x16
    539a:	37 89       	ldd	r19, Z+23	; 0x17
    539c:	a5 ee       	ldi	r26, 0xE5	; 229
    539e:	b9 e2       	ldi	r27, 0x29	; 41
    53a0:	58 96       	adiw	r26, 0x18	; 24
    53a2:	8d 91       	ld	r24, X+
    53a4:	9c 91       	ld	r25, X
    53a6:	59 97       	sbiw	r26, 0x19	; 25
		FILTER32(motorVoltageSample, sSensorData.motorVoltageFiltered);	
    53a8:	e3 e6       	ldi	r30, 0x63	; 99
    53aa:	f8 e2       	ldi	r31, 0x28	; 40
    53ac:	c1 a8       	ldd	r12, Z+49	; 0x31
    53ae:	d2 a8       	ldd	r13, Z+50	; 0x32
    53b0:	e3 a8       	ldd	r14, Z+51	; 0x33
    53b2:	f4 a8       	ldd	r15, Z+52	; 0x34
		sSensorData.inEnergy +=  2 * inPower;
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN12_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_VMOTOR on PB4 vs V33/2 on PA1 */
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_IMOTOR on PB5 vs V33/2 on PB1 */
	}
	else {
		motorVoltageSample = ADCA.CH3RES - sCal.motorVoltageOffset;
    53b4:	28 1b       	sub	r18, r24
    53b6:	39 0b       	sbc	r19, r25
		FILTER32(motorVoltageSample, sSensorData.motorVoltageFiltered);	
    53b8:	03 2e       	mov	r0, r19
    53ba:	00 0c       	add	r0, r0
    53bc:	44 0b       	sbc	r20, r20
    53be:	55 0b       	sbc	r21, r21
    53c0:	8d 2c       	mov	r8, r13
    53c2:	9e 2c       	mov	r9, r14
    53c4:	af 2c       	mov	r10, r15
    53c6:	bb 24       	eor	r11, r11
    53c8:	a7 fc       	sbrc	r10, 7
    53ca:	ba 94       	dec	r11
    53cc:	c8 18       	sub	r12, r8
    53ce:	d9 08       	sbc	r13, r9
    53d0:	ea 08       	sbc	r14, r10
    53d2:	fb 08       	sbc	r15, r11
    53d4:	88 24       	eor	r8, r8
    53d6:	92 2e       	mov	r9, r18
    53d8:	a3 2e       	mov	r10, r19
    53da:	b4 2e       	mov	r11, r20
    53dc:	c8 0c       	add	r12, r8
    53de:	d9 1c       	adc	r13, r9
    53e0:	ea 1c       	adc	r14, r10
    53e2:	fb 1c       	adc	r15, r11
    53e4:	c1 aa       	std	Z+49, r12	; 0x31
    53e6:	d2 aa       	std	Z+50, r13	; 0x32
    53e8:	e3 aa       	std	Z+51, r14	; 0x33
    53ea:	f4 aa       	std	Z+52, r15	; 0x34
		motorCurrentSample = ADCB.CH3RES - sCal.motorCurrentOffset;
    53ec:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <__TEXT_REGION_LENGTH__+0x700256>
    53f0:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <__TEXT_REGION_LENGTH__+0x700257>
    53f4:	5a 96       	adiw	r26, 0x1a	; 26
    53f6:	8d 91       	ld	r24, X+
    53f8:	9c 91       	ld	r25, X
    53fa:	5b 97       	sbiw	r26, 0x1b	; 27
		FILTER32(motorCurrentSample, sSensorData.motorCurrentFiltered);
    53fc:	c5 a8       	ldd	r12, Z+53	; 0x35
    53fe:	d6 a8       	ldd	r13, Z+54	; 0x36
    5400:	e7 a8       	ldd	r14, Z+55	; 0x37
    5402:	f0 ac       	ldd	r15, Z+56	; 0x38
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_IMOTOR on PB5 vs V33/2 on PB1 */
	}
	else {
		motorVoltageSample = ADCA.CH3RES - sCal.motorVoltageOffset;
		FILTER32(motorVoltageSample, sSensorData.motorVoltageFiltered);	
		motorCurrentSample = ADCB.CH3RES - sCal.motorCurrentOffset;
    5404:	68 1b       	sub	r22, r24
    5406:	79 0b       	sbc	r23, r25
		FILTER32(motorCurrentSample, sSensorData.motorCurrentFiltered);
    5408:	07 2e       	mov	r0, r23
    540a:	00 0c       	add	r0, r0
    540c:	88 0b       	sbc	r24, r24
    540e:	99 0b       	sbc	r25, r25
    5410:	8d 2c       	mov	r8, r13
    5412:	9e 2c       	mov	r9, r14
    5414:	af 2c       	mov	r10, r15
    5416:	bb 24       	eor	r11, r11
    5418:	a7 fc       	sbrc	r10, 7
    541a:	ba 94       	dec	r11
    541c:	c8 18       	sub	r12, r8
    541e:	d9 08       	sbc	r13, r9
    5420:	ea 08       	sbc	r14, r10
    5422:	fb 08       	sbc	r15, r11
    5424:	88 24       	eor	r8, r8
    5426:	96 2e       	mov	r9, r22
    5428:	a7 2e       	mov	r10, r23
    542a:	b8 2e       	mov	r11, r24
    542c:	c8 0c       	add	r12, r8
    542e:	d9 1c       	adc	r13, r9
    5430:	ea 1c       	adc	r14, r10
    5432:	fb 1c       	adc	r15, r11
    5434:	c5 aa       	std	Z+53, r12	; 0x35
    5436:	d6 aa       	std	Z+54, r13	; 0x36
    5438:	e7 aa       	std	Z+55, r14	; 0x37
    543a:	f0 ae       	std	Z+56, r15	; 0x38
		motorPower = ((int32_t) motorVoltageSample) * ((int32_t) motorCurrentSample);
    543c:	0e 94 18 34 	call	0x6830	; 0x6830 <__mulsi3>
		FILTER32PWR(motorPower, sSensorData.motorPowerFiltered);
    5440:	e4 ea       	ldi	r30, 0xA4	; 164
    5442:	f8 e2       	ldi	r31, 0x28	; 40
    5444:	c0 80       	ld	r12, Z
    5446:	d1 80       	ldd	r13, Z+1	; 0x01
    5448:	e2 80       	ldd	r14, Z+2	; 0x02
    544a:	f3 80       	ldd	r15, Z+3	; 0x03
    544c:	33 27       	eor	r19, r19
    544e:	f7 fc       	sbrc	r15, 7
    5450:	3a 95       	dec	r19
    5452:	2f 2d       	mov	r18, r15
    5454:	1e 2d       	mov	r17, r14
    5456:	0d 2d       	mov	r16, r13
    5458:	c0 1a       	sub	r12, r16
    545a:	d1 0a       	sbc	r13, r17
    545c:	e2 0a       	sbc	r14, r18
    545e:	f3 0a       	sbc	r15, r19
    5460:	c6 0e       	add	r12, r22
    5462:	d7 1e       	adc	r13, r23
    5464:	e8 1e       	adc	r14, r24
    5466:	f9 1e       	adc	r15, r25
    5468:	c0 82       	st	Z, r12
    546a:	d1 82       	std	Z+1, r13	; 0x01
    546c:	e2 82       	std	Z+2, r14	; 0x02
    546e:	f3 82       	std	Z+3, r15	; 0x03
		sSensorData.motorEnergy += 2 * motorPower;
    5470:	ec ea       	ldi	r30, 0xAC	; 172
    5472:	f8 e2       	ldi	r31, 0x28	; 40
    5474:	dc 01       	movw	r26, r24
    5476:	cb 01       	movw	r24, r22
    5478:	88 0f       	add	r24, r24
    547a:	99 1f       	adc	r25, r25
    547c:	aa 1f       	adc	r26, r26
    547e:	bb 1f       	adc	r27, r27
    5480:	6c 01       	movw	r12, r24
    5482:	7d 01       	movw	r14, r26
    5484:	ff 0c       	add	r15, r15
    5486:	cc 08       	sbc	r12, r12
    5488:	dc 2c       	mov	r13, r12
    548a:	76 01       	movw	r14, r12
    548c:	28 2f       	mov	r18, r24
    548e:	39 2f       	mov	r19, r25
    5490:	4a 2f       	mov	r20, r26
    5492:	5b 2f       	mov	r21, r27
    5494:	6c 2d       	mov	r22, r12
    5496:	7c 2d       	mov	r23, r12
    5498:	8c 2d       	mov	r24, r12
    549a:	9c 2d       	mov	r25, r12
    549c:	a0 80       	ld	r10, Z
    549e:	b1 80       	ldd	r11, Z+1	; 0x01
    54a0:	c2 80       	ldd	r12, Z+2	; 0x02
    54a2:	d3 80       	ldd	r13, Z+3	; 0x03
    54a4:	e4 80       	ldd	r14, Z+4	; 0x04
    54a6:	f5 80       	ldd	r15, Z+5	; 0x05
    54a8:	06 81       	ldd	r16, Z+6	; 0x06
    54aa:	17 81       	ldd	r17, Z+7	; 0x07
    54ac:	0e 94 33 34 	call	0x6866	; 0x6866 <__adddi3>
    54b0:	20 83       	st	Z, r18
    54b2:	31 83       	std	Z+1, r19	; 0x01
    54b4:	42 83       	std	Z+2, r20	; 0x02
    54b6:	53 83       	std	Z+3, r21	; 0x03
    54b8:	64 83       	std	Z+4, r22	; 0x04
    54ba:	75 83       	std	Z+5, r23	; 0x05
    54bc:	86 83       	std	Z+6, r24	; 0x06
    54be:	97 83       	std	Z+7, r25	; 0x07
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN11_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_Vin on PB3 vs V33/2 on PA1 */
    54c0:	89 e5       	ldi	r24, 0x59	; 89
    54c2:	d3 01       	movw	r26, r6
    54c4:	d9 96       	adiw	r26, 0x39	; 57
    54c6:	8c 93       	st	X, r24
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure Iin on PB7 vs V33/2 on PB1 */
    54c8:	89 e3       	ldi	r24, 0x39	; 57
    54ca:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__TEXT_REGION_LENGTH__+0x700279>
	}
	sSamplingVin = !sSamplingVin;
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	90 91 5b 28 	lds	r25, 0x285B	; 0x80285b <sSamplingVin.4801>
    54d4:	91 11       	cpse	r25, r1
    54d6:	80 e0       	ldi	r24, 0x00	; 0
    54d8:	80 93 5b 28 	sts	0x285B, r24	; 0x80285b <sSamplingVin.4801>

	/* PWM frequency and duty cycle */
	if(pwmEn) {
    54dc:	31 10       	cpse	r3, r1
    54de:	2f c0       	rjmp	.+94     	; 0x553e <__vector_71+0xa2a>
		sSensorData.pwmDutyCycle -= sSensorData.pwmDutyCycle >> 8;
    54e0:	80 91 d5 28 	lds	r24, 0x28D5	; 0x8028d5 <sSensorData+0x72>
    54e4:	90 91 d6 28 	lds	r25, 0x28D6	; 0x8028d6 <sSensorData+0x73>
    54e8:	29 2f       	mov	r18, r25
    54ea:	33 27       	eor	r19, r19
    54ec:	82 1b       	sub	r24, r18
    54ee:	93 0b       	sbc	r25, r19
		if(pwm)
    54f0:	26 fc       	sbrc	r2, 6
    54f2:	05 c0       	rjmp	.+10     	; 0x54fe <__vector_71+0x9ea>
	}
	sSamplingVin = !sSamplingVin;

	/* PWM frequency and duty cycle */
	if(pwmEn) {
		sSensorData.pwmDutyCycle -= sSensorData.pwmDutyCycle >> 8;
    54f4:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <sSensorData+0x72>
    54f8:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <sSensorData+0x73>
    54fc:	06 c0       	rjmp	.+12     	; 0x550a <__vector_71+0x9f6>
		if(pwm)
			sSensorData.pwmDutyCycle += PWM_DC_FS;
    54fe:	81 50       	subi	r24, 0x01	; 1
    5500:	9f 4f       	sbci	r25, 0xFF	; 255
    5502:	80 93 d5 28 	sts	0x28D5, r24	; 0x8028d5 <sSensorData+0x72>
    5506:	90 93 d6 28 	sts	0x28D6, r25	; 0x8028d6 <sSensorData+0x73>
		sSensorData.pwmFrequency -= sSensorData.pwmFrequency >> 8;
    550a:	e3 ed       	ldi	r30, 0xD3	; 211
    550c:	f8 e2       	ldi	r31, 0x28	; 40
    550e:	80 81       	ld	r24, Z
    5510:	91 81       	ldd	r25, Z+1	; 0x01
    5512:	29 2f       	mov	r18, r25
    5514:	33 27       	eor	r19, r19
    5516:	8c 01       	movw	r16, r24
    5518:	02 1b       	sub	r16, r18
    551a:	13 0b       	sbc	r17, r19
		sSensorData.pwmFrequency += (curPWMCycles - sPrevPWMCycles) << PWM_FREQ_FILTER_SHIFT;
    551c:	84 2d       	mov	r24, r4
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	40 91 5a 28 	lds	r20, 0x285A	; 0x80285a <sPrevPWMCycles.4802>
    5524:	84 1b       	sub	r24, r20
    5526:	91 09       	sbc	r25, r1
    5528:	88 0f       	add	r24, r24
    552a:	99 1f       	adc	r25, r25
    552c:	88 0f       	add	r24, r24
    552e:	99 1f       	adc	r25, r25
    5530:	88 0f       	add	r24, r24
    5532:	99 1f       	adc	r25, r25
    5534:	80 0f       	add	r24, r16
    5536:	91 1f       	adc	r25, r17
    5538:	80 83       	st	Z, r24
    553a:	91 83       	std	Z+1, r25	; 0x01
    553c:	08 c0       	rjmp	.+16     	; 0x554e <__vector_71+0xa3a>
	}
	else {
		sSensorData.pwmDutyCycle = 0;
    553e:	10 92 d5 28 	sts	0x28D5, r1	; 0x8028d5 <sSensorData+0x72>
    5542:	10 92 d6 28 	sts	0x28D6, r1	; 0x8028d6 <sSensorData+0x73>
		sSensorData.pwmFrequency = 0;
    5546:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <sSensorData+0x70>
    554a:	10 92 d4 28 	sts	0x28D4, r1	; 0x8028d4 <sSensorData+0x71>
	}
	sPrevPWMCycles = curPWMCycles;
    554e:	40 92 5a 28 	sts	0x285A, r4	; 0x80285a <sPrevPWMCycles.4802>
	
	/* Pin states */
	if(sSensorData.selFPState != selFPPin) {
    5552:	80 91 c4 28 	lds	r24, 0x28C4	; 0x8028c4 <sSensorData+0x61>
    5556:	85 15       	cp	r24, r5
    5558:	91 f0       	breq	.+36     	; 0x557e <__vector_71+0xa6a>
		sSensorData.selFPState = selFPPin;
    555a:	50 92 c4 28 	sts	0x28C4, r5	; 0x8028c4 <sSensorData+0x61>
		sSensorData.selFPTimestamp = sSessionCycleCount;
    555e:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5562:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    5566:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    556a:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    556e:	80 93 c7 28 	sts	0x28C7, r24	; 0x8028c7 <sSensorData+0x64>
    5572:	90 93 c8 28 	sts	0x28C8, r25	; 0x8028c8 <sSensorData+0x65>
    5576:	a0 93 c9 28 	sts	0x28C9, r26	; 0x8028c9 <sSensorData+0x66>
    557a:	b0 93 ca 28 	sts	0x28CA, r27	; 0x8028ca <sSensorData+0x67>
	}
	
	if(sSensorData.selCCState != selCCPin) {
    557e:	80 91 c5 28 	lds	r24, 0x28C5	; 0x8028c5 <sSensorData+0x62>
    5582:	8d 17       	cp	r24, r29
    5584:	09 f4       	brne	.+2      	; 0x5588 <__vector_71+0xa74>
    5586:	4a c0       	rjmp	.+148    	; 0x561c <__vector_71+0xb08>
		sSensorData.selCCState = selCCPin;
    5588:	d0 93 c5 28 	sts	0x28C5, r29	; 0x8028c5 <sSensorData+0x62>
		sSensorData.selCCTimestamp = sSessionCycleCount;
    558c:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    5590:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    5594:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5598:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    559c:	80 93 cb 28 	sts	0x28CB, r24	; 0x8028cb <sSensorData+0x68>
    55a0:	90 93 cc 28 	sts	0x28CC, r25	; 0x8028cc <sSensorData+0x69>
    55a4:	a0 93 cd 28 	sts	0x28CD, r26	; 0x8028cd <sSensorData+0x6a>
    55a8:	b0 93 ce 28 	sts	0x28CE, r27	; 0x8028ce <sSensorData+0x6b>
		/* Did CC just get enabled? */
		if(!selCCPin && sSensorData.speedSensorPulseInterval < (((int32_t) CC_MAX_INTERVAL) << 16)) {
    55ac:	d1 11       	cpse	r29, r1
    55ae:	2f c0       	rjmp	.+94     	; 0x560e <__vector_71+0xafa>
    55b0:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <sSensorData+0x59>
    55b4:	90 91 bd 28 	lds	r25, 0x28BD	; 0x8028bd <sSensorData+0x5a>
    55b8:	a0 91 be 28 	lds	r26, 0x28BE	; 0x8028be <sSensorData+0x5b>
    55bc:	b0 91 bf 28 	lds	r27, 0x28BF	; 0x8028bf <sSensorData+0x5c>
    55c0:	00 97       	sbiw	r24, 0x00	; 0
    55c2:	10 ed       	ldi	r17, 0xD0	; 208
    55c4:	a1 07       	cpc	r26, r17
    55c6:	b1 05       	cpc	r27, r1
    55c8:	14 f5       	brge	.+68     	; 0x560e <__vector_71+0xafa>
			sCCIsOn = 1;
    55ca:	21 e0       	ldi	r18, 0x01	; 1
    55cc:	20 93 59 28 	sts	0x2859, r18	; 0x802859 <sCCIsOn.4803>
			sSensorData.ccPower = CC_DEFAULT_POWER;
    55d0:	22 e0       	ldi	r18, 0x02	; 2
    55d2:	20 93 db 28 	sts	0x28DB, r18	; 0x8028db <sSensorData+0x78>
			sCCPrevPulseInterval = sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    55d6:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <sSensorData+0x74>
    55da:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <sSensorData+0x75>
    55de:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <sSensorData+0x76>
    55e2:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <sSensorData+0x77>
    55e6:	80 93 55 28 	sts	0x2855, r24	; 0x802855 <sCCPrevPulseInterval.4810>
    55ea:	90 93 56 28 	sts	0x2856, r25	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    55ee:	a0 93 57 28 	sts	0x2857, r26	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    55f2:	b0 93 58 28 	sts	0x2858, r27	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
			sCCRunTimer = CC_REG_CYCLES;
    55f6:	88 e8       	ldi	r24, 0x88	; 136
    55f8:	93 e1       	ldi	r25, 0x13	; 19
    55fa:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <sCCRunTimer.4804>
    55fe:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <sCCRunTimer.4804+0x1>
			SET_CC_DRIVE(sSensorData.ccPower);
    5602:	e0 e8       	ldi	r30, 0x80	; 128
    5604:	f6 e0       	ldi	r31, 0x06	; 6
    5606:	85 e0       	ldi	r24, 0x05	; 5
    5608:	85 83       	std	Z+5, r24	; 0x05
    560a:	26 83       	std	Z+6, r18	; 0x06
    560c:	07 c0       	rjmp	.+14     	; 0x561c <__vector_71+0xb08>
		}
		else
			sCCIsOn = 0;
    560e:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <sCCIsOn.4803>
	}

	if(sSensorData.selCC2State != selCC2Pin) {
    5612:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <sSensorData+0x63>
    5616:	8c 13       	cpse	r24, r28
    5618:	06 c0       	rjmp	.+12     	; 0x5626 <__vector_71+0xb12>
    561a:	10 c1       	rjmp	.+544    	; 0x583c <__vector_71+0xd28>
    561c:	80 91 c6 28 	lds	r24, 0x28C6	; 0x8028c6 <sSensorData+0x63>
    5620:	8c 17       	cp	r24, r28
    5622:	09 f4       	brne	.+2      	; 0x5626 <__vector_71+0xb12>
    5624:	73 c0       	rjmp	.+230    	; 0x570c <__vector_71+0xbf8>
		sSensorData.selCC2State = selCC2Pin;
    5626:	c0 93 c6 28 	sts	0x28C6, r28	; 0x8028c6 <sSensorData+0x63>
		sSensorData.selCC2Timestamp = sSessionCycleCount;
    562a:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    562e:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    5632:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5636:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    563a:	80 93 cf 28 	sts	0x28CF, r24	; 0x8028cf <sSensorData+0x6c>
    563e:	90 93 d0 28 	sts	0x28D0, r25	; 0x8028d0 <sSensorData+0x6d>
    5642:	a0 93 d1 28 	sts	0x28D1, r26	; 0x8028d1 <sSensorData+0x6e>
    5646:	b0 93 d2 28 	sts	0x28D2, r27	; 0x8028d2 <sSensorData+0x6f>
		/* Did CC2 just get enabled? */
		if(!selCC2Pin) {
    564a:	c1 11       	cpse	r28, r1
    564c:	5c c0       	rjmp	.+184    	; 0x5706 <__vector_71+0xbf2>
			sCCIsOn = 1;
    564e:	81 e0       	ldi	r24, 0x01	; 1
    5650:	80 93 59 28 	sts	0x2859, r24	; 0x802859 <sCCIsOn.4803>
			sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    5654:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <sSensorData+0x59>
    5658:	90 91 bd 28 	lds	r25, 0x28BD	; 0x8028bd <sSensorData+0x5a>
    565c:	a0 91 be 28 	lds	r26, 0x28BE	; 0x8028be <sSensorData+0x5b>
    5660:	b0 91 bf 28 	lds	r27, 0x28BF	; 0x8028bf <sSensorData+0x5c>
    5664:	80 93 55 28 	sts	0x2855, r24	; 0x802855 <sCCPrevPulseInterval.4810>
    5668:	90 93 56 28 	sts	0x2856, r25	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    566c:	a0 93 57 28 	sts	0x2857, r26	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    5670:	b0 93 58 28 	sts	0x2858, r27	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
			if(sSensorData.speedSensorPulseInterval > sCC2MinSpeed) { // Driving below minimum initial CC2 speed limit
    5674:	40 91 e0 28 	lds	r20, 0x28E0	; 0x8028e0 <sCC2MinSpeed>
    5678:	50 91 e1 28 	lds	r21, 0x28E1	; 0x8028e1 <sCC2MinSpeed+0x1>
    567c:	60 91 e2 28 	lds	r22, 0x28E2	; 0x8028e2 <sCC2MinSpeed+0x2>
    5680:	70 91 e3 28 	lds	r23, 0x28E3	; 0x8028e3 <sCC2MinSpeed+0x3>
    5684:	48 17       	cp	r20, r24
    5686:	59 07       	cpc	r21, r25
    5688:	6a 07       	cpc	r22, r26
    568a:	7b 07       	cpc	r23, r27
    568c:	a4 f4       	brge	.+40     	; 0x56b6 <__vector_71+0xba2>
				sSensorData.ccTargetSpeed = sCC2MinSpeed;
    568e:	80 91 e0 28 	lds	r24, 0x28E0	; 0x8028e0 <sCC2MinSpeed>
    5692:	90 91 e1 28 	lds	r25, 0x28E1	; 0x8028e1 <sCC2MinSpeed+0x1>
    5696:	a0 91 e2 28 	lds	r26, 0x28E2	; 0x8028e2 <sCC2MinSpeed+0x2>
    569a:	b0 91 e3 28 	lds	r27, 0x28E3	; 0x8028e3 <sCC2MinSpeed+0x3>
    569e:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <sSensorData+0x74>
    56a2:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <sSensorData+0x75>
    56a6:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <sSensorData+0x76>
    56aa:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <sSensorData+0x77>
				sSensorData.ccPower = CC_MAX_POWER;
    56ae:	87 e0       	ldi	r24, 0x07	; 7
    56b0:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <sSensorData+0x78>
    56b4:	0b c0       	rjmp	.+22     	; 0x56cc <__vector_71+0xbb8>
			}
			else {
				sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    56b6:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <sSensorData+0x74>
    56ba:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <sSensorData+0x75>
    56be:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <sSensorData+0x76>
    56c2:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <sSensorData+0x77>
				sSensorData.ccPower = CC_DEFAULT_POWER;
    56c6:	82 e0       	ldi	r24, 0x02	; 2
    56c8:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <sSensorData+0x78>
			}
			sCCRunTimer = CC_REG_CYCLES;
    56cc:	88 e8       	ldi	r24, 0x88	; 136
    56ce:	93 e1       	ldi	r25, 0x13	; 19
    56d0:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <sCCRunTimer.4804>
    56d4:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <sCCRunTimer.4804+0x1>
			SET_CC_DRIVE(sSensorData.ccPower);
    56d8:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <sSensorData+0x78>
    56dc:	81 11       	cpse	r24, r1
    56de:	04 c0       	rjmp	.+8      	; 0x56e8 <__vector_71+0xbd4>
    56e0:	87 e0       	ldi	r24, 0x07	; 7
    56e2:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    56e6:	12 c0       	rjmp	.+36     	; 0x570c <__vector_71+0xbf8>
    56e8:	87 30       	cpi	r24, 0x07	; 7
    56ea:	19 f4       	brne	.+6      	; 0x56f2 <__vector_71+0xbde>
    56ec:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    56f0:	0d c0       	rjmp	.+26     	; 0x570c <__vector_71+0xbf8>
    56f2:	80 95       	com	r24
    56f4:	87 70       	andi	r24, 0x07	; 7
    56f6:	e0 e8       	ldi	r30, 0x80	; 128
    56f8:	f6 e0       	ldi	r31, 0x06	; 6
    56fa:	85 83       	std	Z+5, r24	; 0x05
    56fc:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <sSensorData+0x78>
    5700:	87 70       	andi	r24, 0x07	; 7
    5702:	86 83       	std	Z+6, r24	; 0x06
    5704:	03 c0       	rjmp	.+6      	; 0x570c <__vector_71+0xbf8>
		}
		else
			sCCIsOn = 0;
    5706:	10 92 59 28 	sts	0x2859, r1	; 0x802859 <sCCIsOn.4803>
    570a:	98 c0       	rjmp	.+304    	; 0x583c <__vector_71+0xd28>
	}
	
	if(sCCIsOn && !--sCCRunTimer) {
    570c:	80 91 59 28 	lds	r24, 0x2859	; 0x802859 <sCCIsOn.4803>
    5710:	88 23       	and	r24, r24
    5712:	09 f4       	brne	.+2      	; 0x5716 <__vector_71+0xc02>
    5714:	93 c0       	rjmp	.+294    	; 0x583c <__vector_71+0xd28>
    5716:	80 91 53 28 	lds	r24, 0x2853	; 0x802853 <sCCRunTimer.4804>
    571a:	90 91 54 28 	lds	r25, 0x2854	; 0x802854 <sCCRunTimer.4804+0x1>
    571e:	01 97       	sbiw	r24, 0x01	; 1
    5720:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <sCCRunTimer.4804>
    5724:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <sCCRunTimer.4804+0x1>
    5728:	89 2b       	or	r24, r25
    572a:	09 f0       	breq	.+2      	; 0x572e <__vector_71+0xc1a>
    572c:	87 c0       	rjmp	.+270    	; 0x583c <__vector_71+0xd28>
		if(!selCC2Pin && sCC2TargetSpeedUpdate) {
    572e:	c1 11       	cpse	r28, r1
    5730:	16 c0       	rjmp	.+44     	; 0x575e <__vector_71+0xc4a>
    5732:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <sCC2TargetSpeedUpdate>
    5736:	88 23       	and	r24, r24
    5738:	91 f0       	breq	.+36     	; 0x575e <__vector_71+0xc4a>
			sSensorData.ccTargetSpeed = sCC2TargetSpeed;
    573a:	80 91 dc 28 	lds	r24, 0x28DC	; 0x8028dc <sCC2TargetSpeed>
    573e:	90 91 dd 28 	lds	r25, 0x28DD	; 0x8028dd <sCC2TargetSpeed+0x1>
    5742:	a0 91 de 28 	lds	r26, 0x28DE	; 0x8028de <sCC2TargetSpeed+0x2>
    5746:	b0 91 df 28 	lds	r27, 0x28DF	; 0x8028df <sCC2TargetSpeed+0x3>
    574a:	80 93 d7 28 	sts	0x28D7, r24	; 0x8028d7 <sSensorData+0x74>
    574e:	90 93 d8 28 	sts	0x28D8, r25	; 0x8028d8 <sSensorData+0x75>
    5752:	a0 93 d9 28 	sts	0x28D9, r26	; 0x8028d9 <sSensorData+0x76>
    5756:	b0 93 da 28 	sts	0x28DA, r27	; 0x8028da <sSensorData+0x77>
			// Possibly adjust power levels here too, for faster convergence?
			sCC2TargetSpeedUpdate = 0;
    575a:	10 92 e4 28 	sts	0x28E4, r1	; 0x8028e4 <sCC2TargetSpeedUpdate>
		}
		if((sSensorData.speedSensorPulseInterval > sSensorData.ccTargetSpeed)
    575e:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <sSensorData+0x59>
    5762:	90 91 bd 28 	lds	r25, 0x28BD	; 0x8028bd <sSensorData+0x5a>
    5766:	a0 91 be 28 	lds	r26, 0x28BE	; 0x8028be <sSensorData+0x5b>
    576a:	b0 91 bf 28 	lds	r27, 0x28BF	; 0x8028bf <sSensorData+0x5c>
    576e:	40 91 d7 28 	lds	r20, 0x28D7	; 0x8028d7 <sSensorData+0x74>
    5772:	50 91 d8 28 	lds	r21, 0x28D8	; 0x8028d8 <sSensorData+0x75>
    5776:	60 91 d9 28 	lds	r22, 0x28D9	; 0x8028d9 <sSensorData+0x76>
    577a:	70 91 da 28 	lds	r23, 0x28DA	; 0x8028da <sSensorData+0x77>
    577e:	48 17       	cp	r20, r24
    5780:	59 07       	cpc	r21, r25
    5782:	6a 07       	cpc	r22, r26
    5784:	7b 07       	cpc	r23, r27
    5786:	ac f4       	brge	.+42     	; 0x57b2 <__vector_71+0xc9e>
			&& (sSensorData.speedSensorPulseInterval > sCCPrevPulseInterval) 
    5788:	00 91 55 28 	lds	r16, 0x2855	; 0x802855 <sCCPrevPulseInterval.4810>
    578c:	10 91 56 28 	lds	r17, 0x2856	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    5790:	20 91 57 28 	lds	r18, 0x2857	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    5794:	30 91 58 28 	lds	r19, 0x2858	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
    5798:	08 17       	cp	r16, r24
    579a:	19 07       	cpc	r17, r25
    579c:	2a 07       	cpc	r18, r26
    579e:	3b 07       	cpc	r19, r27
    57a0:	44 f4       	brge	.+16     	; 0x57b2 <__vector_71+0xc9e>
			&& (sSensorData.ccPower < CC_MAX_POWER))
    57a2:	20 91 db 28 	lds	r18, 0x28DB	; 0x8028db <sSensorData+0x78>
    57a6:	27 30       	cpi	r18, 0x07	; 7
    57a8:	20 f4       	brcc	.+8      	; 0x57b2 <__vector_71+0xc9e>
				sSensorData.ccPower++;
    57aa:	2f 5f       	subi	r18, 0xFF	; 255
    57ac:	20 93 db 28 	sts	0x28DB, r18	; 0x8028db <sSensorData+0x78>
    57b0:	19 c0       	rjmp	.+50     	; 0x57e4 <__vector_71+0xcd0>
		else if((sSensorData.speedSensorPulseInterval < sSensorData.ccTargetSpeed)
    57b2:	84 17       	cp	r24, r20
    57b4:	95 07       	cpc	r25, r21
    57b6:	a6 07       	cpc	r26, r22
    57b8:	b7 07       	cpc	r27, r23
    57ba:	a4 f4       	brge	.+40     	; 0x57e4 <__vector_71+0xcd0>
			&& (sSensorData.speedSensorPulseInterval < sCCPrevPulseInterval)
    57bc:	40 91 55 28 	lds	r20, 0x2855	; 0x802855 <sCCPrevPulseInterval.4810>
    57c0:	50 91 56 28 	lds	r21, 0x2856	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    57c4:	60 91 57 28 	lds	r22, 0x2857	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    57c8:	70 91 58 28 	lds	r23, 0x2858	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
    57cc:	84 17       	cp	r24, r20
    57ce:	95 07       	cpc	r25, r21
    57d0:	a6 07       	cpc	r26, r22
    57d2:	b7 07       	cpc	r27, r23
    57d4:	3c f4       	brge	.+14     	; 0x57e4 <__vector_71+0xcd0>
			&& (sSensorData.ccPower > 0))
    57d6:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <sSensorData+0x78>
    57da:	88 23       	and	r24, r24
    57dc:	39 f0       	breq	.+14     	; 0x57ec <__vector_71+0xcd8>
				sSensorData.ccPower--;
    57de:	81 50       	subi	r24, 0x01	; 1
    57e0:	80 93 db 28 	sts	0x28DB, r24	; 0x8028db <sSensorData+0x78>
		SET_CC_DRIVE(sSensorData.ccPower);
    57e4:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <sSensorData+0x78>
    57e8:	81 11       	cpse	r24, r1
    57ea:	04 c0       	rjmp	.+8      	; 0x57f4 <__vector_71+0xce0>
    57ec:	87 e0       	ldi	r24, 0x07	; 7
    57ee:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    57f2:	0e c0       	rjmp	.+28     	; 0x5810 <__vector_71+0xcfc>
    57f4:	87 30       	cpi	r24, 0x07	; 7
    57f6:	19 f4       	brne	.+6      	; 0x57fe <__vector_71+0xcea>
    57f8:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    57fc:	09 c0       	rjmp	.+18     	; 0x5810 <__vector_71+0xcfc>
    57fe:	80 95       	com	r24
    5800:	87 70       	andi	r24, 0x07	; 7
    5802:	e0 e8       	ldi	r30, 0x80	; 128
    5804:	f6 e0       	ldi	r31, 0x06	; 6
    5806:	85 83       	std	Z+5, r24	; 0x05
    5808:	80 91 db 28 	lds	r24, 0x28DB	; 0x8028db <sSensorData+0x78>
    580c:	87 70       	andi	r24, 0x07	; 7
    580e:	86 83       	std	Z+6, r24	; 0x06
		sCCRunTimer = CC_REG_CYCLES;
    5810:	88 e8       	ldi	r24, 0x88	; 136
    5812:	93 e1       	ldi	r25, 0x13	; 19
    5814:	80 93 53 28 	sts	0x2853, r24	; 0x802853 <sCCRunTimer.4804>
    5818:	90 93 54 28 	sts	0x2854, r25	; 0x802854 <sCCRunTimer.4804+0x1>
		sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    581c:	80 91 bc 28 	lds	r24, 0x28BC	; 0x8028bc <sSensorData+0x59>
    5820:	90 91 bd 28 	lds	r25, 0x28BD	; 0x8028bd <sSensorData+0x5a>
    5824:	a0 91 be 28 	lds	r26, 0x28BE	; 0x8028be <sSensorData+0x5b>
    5828:	b0 91 bf 28 	lds	r27, 0x28BF	; 0x8028bf <sSensorData+0x5c>
    582c:	80 93 55 28 	sts	0x2855, r24	; 0x802855 <sCCPrevPulseInterval.4810>
    5830:	90 93 56 28 	sts	0x2856, r25	; 0x802856 <sCCPrevPulseInterval.4810+0x1>
    5834:	a0 93 57 28 	sts	0x2857, r26	; 0x802857 <sCCPrevPulseInterval.4810+0x2>
    5838:	b0 93 58 28 	sts	0x2858, r27	; 0x802858 <sCCPrevPulseInterval.4810+0x3>
	}
	
	if(sTakeSnapshot485) {
    583c:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <sTakeSnapshot485>
    5840:	88 23       	and	r24, r24
    5842:	e1 f0       	breq	.+56     	; 0x587c <__vector_71+0xd68>
		sSensorDataSnapshot485 = sSensorData;
    5844:	89 e7       	ldi	r24, 0x79	; 121
    5846:	e3 e6       	ldi	r30, 0x63	; 99
    5848:	f8 e2       	ldi	r31, 0x28	; 40
    584a:	ae ee       	ldi	r26, 0xEE	; 238
    584c:	b8 e2       	ldi	r27, 0x28	; 40
    584e:	01 90       	ld	r0, Z+
    5850:	0d 92       	st	X+, r0
    5852:	8a 95       	dec	r24
    5854:	e1 f7       	brne	.-8      	; 0x584e <__vector_71+0xd3a>
		sSessionCycleCountSnapshot485 = sSessionCycleCount;
    5856:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    585a:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    585e:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    5862:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    5866:	80 93 ea 28 	sts	0x28EA, r24	; 0x8028ea <sSessionCycleCountSnapshot485>
    586a:	90 93 eb 28 	sts	0x28EB, r25	; 0x8028eb <sSessionCycleCountSnapshot485+0x1>
    586e:	a0 93 ec 28 	sts	0x28EC, r26	; 0x8028ec <sSessionCycleCountSnapshot485+0x2>
    5872:	b0 93 ed 28 	sts	0x28ED, r27	; 0x8028ed <sSessionCycleCountSnapshot485+0x3>
		
		sTakeSnapshot485 = 0;
    5876:	10 92 e9 28 	sts	0x28E9, r1	; 0x8028e9 <sTakeSnapshot485>
    587a:	1f c0       	rjmp	.+62     	; 0x58ba <__vector_71+0xda6>
	}
	else if(sTakeSnapshot) { 
    587c:	80 91 67 29 	lds	r24, 0x2967	; 0x802967 <sTakeSnapshot>
    5880:	88 23       	and	r24, r24
    5882:	d9 f0       	breq	.+54     	; 0x58ba <__vector_71+0xda6>
		sSensorDataSnapshot = sSensorData;
    5884:	89 e7       	ldi	r24, 0x79	; 121
    5886:	e3 e6       	ldi	r30, 0x63	; 99
    5888:	f8 e2       	ldi	r31, 0x28	; 40
    588a:	ac e6       	ldi	r26, 0x6C	; 108
    588c:	b9 e2       	ldi	r27, 0x29	; 41
    588e:	01 90       	ld	r0, Z+
    5890:	0d 92       	st	X+, r0
    5892:	8a 95       	dec	r24
    5894:	e1 f7       	brne	.-8      	; 0x588e <__vector_71+0xd7a>
		sSessionCycleCountSnapshot = sSessionCycleCount;
    5896:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    589a:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    589e:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    58a2:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    58a6:	80 93 68 29 	sts	0x2968, r24	; 0x802968 <sSessionCycleCountSnapshot>
    58aa:	90 93 69 29 	sts	0x2969, r25	; 0x802969 <sSessionCycleCountSnapshot+0x1>
    58ae:	a0 93 6a 29 	sts	0x296A, r26	; 0x80296a <sSessionCycleCountSnapshot+0x2>
    58b2:	b0 93 6b 29 	sts	0x296B, r27	; 0x80296b <sSessionCycleCountSnapshot+0x3>
		
		sTakeSnapshot = 0;
    58b6:	10 92 67 29 	sts	0x2967, r1	; 0x802967 <sTakeSnapshot>
	}

	sSessionCycleCount++;
    58ba:	80 91 e5 28 	lds	r24, 0x28E5	; 0x8028e5 <sSessionCycleCount>
    58be:	90 91 e6 28 	lds	r25, 0x28E6	; 0x8028e6 <sSessionCycleCount+0x1>
    58c2:	a0 91 e7 28 	lds	r26, 0x28E7	; 0x8028e7 <sSessionCycleCount+0x2>
    58c6:	b0 91 e8 28 	lds	r27, 0x28E8	; 0x8028e8 <sSessionCycleCount+0x3>
    58ca:	01 96       	adiw	r24, 0x01	; 1
    58cc:	a1 1d       	adc	r26, r1
    58ce:	b1 1d       	adc	r27, r1
    58d0:	80 93 e5 28 	sts	0x28E5, r24	; 0x8028e5 <sSessionCycleCount>
    58d4:	90 93 e6 28 	sts	0x28E6, r25	; 0x8028e6 <sSessionCycleCount+0x1>
    58d8:	a0 93 e7 28 	sts	0x28E7, r26	; 0x8028e7 <sSessionCycleCount+0x2>
    58dc:	b0 93 e8 28 	sts	0x28E8, r27	; 0x8028e8 <sSessionCycleCount+0x3>
		
} /* ISR(ADCA_CH0_vect) */
    58e0:	ff 91       	pop	r31
    58e2:	ef 91       	pop	r30
    58e4:	df 91       	pop	r29
    58e6:	cf 91       	pop	r28
    58e8:	bf 91       	pop	r27
    58ea:	af 91       	pop	r26
    58ec:	9f 91       	pop	r25
    58ee:	8f 91       	pop	r24
    58f0:	7f 91       	pop	r23
    58f2:	6f 91       	pop	r22
    58f4:	5f 91       	pop	r21
    58f6:	4f 91       	pop	r20
    58f8:	3f 91       	pop	r19
    58fa:	2f 91       	pop	r18
    58fc:	1f 91       	pop	r17
    58fe:	0f 91       	pop	r16
    5900:	ff 90       	pop	r15
    5902:	ef 90       	pop	r14
    5904:	df 90       	pop	r13
    5906:	cf 90       	pop	r12
    5908:	bf 90       	pop	r11
    590a:	af 90       	pop	r10
    590c:	9f 90       	pop	r9
    590e:	8f 90       	pop	r8
    5910:	7f 90       	pop	r7
    5912:	6f 90       	pop	r6
    5914:	5f 90       	pop	r5
    5916:	4f 90       	pop	r4
    5918:	3f 90       	pop	r3
    591a:	2f 90       	pop	r2
    591c:	0f 90       	pop	r0
    591e:	0b be       	out	0x3b, r0	; 59
    5920:	0f 90       	pop	r0
    5922:	0f be       	out	0x3f, r0	; 63
    5924:	0f 90       	pop	r0
    5926:	1f 90       	pop	r1
    5928:	18 95       	reti

0000592a <CopySensorData>:
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
    592a:	ac 01       	movw	r20, r24
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    592c:	fb 01       	movw	r30, r22
    592e:	80 81       	ld	r24, Z
    5930:	98 2f       	mov	r25, r24
    5932:	9d 7f       	andi	r25, 0xFD	; 253
    5934:	95 32       	cpi	r25, 0x25	; 37
    5936:	81 f0       	breq	.+32     	; 0x5958 <CopySensorData+0x2e>
    5938:	81 11       	cpse	r24, r1
    593a:	19 c0       	rjmp	.+50     	; 0x596e <CopySensorData+0x44>
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
    593c:	20 e0       	ldi	r18, 0x00	; 0
    593e:	0d c0       	rjmp	.+26     	; 0x595a <CopySensorData+0x30>
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
		dest[i] = src[i];
    5940:	9d 93       	st	X+, r25
		i++;
    5942:	2f 5f       	subi	r18, 0xFF	; 255


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    5944:	2e 34       	cpi	r18, 0x4E	; 78
    5946:	71 f0       	breq	.+28     	; 0x5964 <CopySensorData+0x3a>
    5948:	91 91       	ld	r25, Z+
    594a:	39 2f       	mov	r19, r25
    594c:	3d 7f       	andi	r19, 0xFD	; 253
    594e:	35 32       	cpi	r19, 0x25	; 37
    5950:	21 f0       	breq	.+8      	; 0x595a <CopySensorData+0x30>
    5952:	91 11       	cpse	r25, r1
    5954:	f5 cf       	rjmp	.-22     	; 0x5940 <CopySensorData+0x16>
    5956:	01 c0       	rjmp	.+2      	; 0x595a <CopySensorData+0x30>
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
    5958:	20 e0       	ldi	r18, 0x00	; 0
		dest[i] = src[i];
		i++;
	}		
	
	if(i < MAXDATA)
		dest[i] = '\0';
    595a:	fa 01       	movw	r30, r20
    595c:	e2 0f       	add	r30, r18
    595e:	f1 1d       	adc	r31, r1
    5960:	10 82       	st	Z, r1
    5962:	08 95       	ret
	else
		dest[MAXDATA - 1] = '\0';
    5964:	fa 01       	movw	r30, r20
    5966:	e3 5b       	subi	r30, 0xB3	; 179
    5968:	ff 4f       	sbci	r31, 0xFF	; 255
    596a:	10 82       	st	Z, r1
    596c:	08 95       	ret

static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
		dest[i] = src[i];
    596e:	da 01       	movw	r26, r20
    5970:	8d 93       	st	X+, r24
    5972:	fb 01       	movw	r30, r22
    5974:	31 96       	adiw	r30, 0x01	; 1
		i++;
    5976:	21 e0       	ldi	r18, 0x01	; 1
    5978:	e7 cf       	rjmp	.-50     	; 0x5948 <CopySensorData+0x1e>

0000597a <AcceptDataGPSPosition>:
} /* CopySensorData */


static int AcceptDataGPSPosition(const char *adr, char *inData) {
	
	CopySensorData(sGPSPos, inData);
    597a:	88 e0       	ldi	r24, 0x08	; 8
    597c:	90 e2       	ldi	r25, 0x20	; 32
    597e:	0e 94 95 2c 	call	0x592a	; 0x592a <CopySensorData>
	return 0;
	
} /* AcceptDataGPSPosition */
    5982:	80 e0       	ldi	r24, 0x00	; 0
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	08 95       	ret

00005988 <AcceptDataGPSDirection>:


static int AcceptDataGPSDirection(const char *adr, char *inData) {
	
	CopySensorData(sGPSDirection, inData);
    5988:	81 eb       	ldi	r24, 0xB1	; 177
    598a:	9a e2       	ldi	r25, 0x2A	; 42
    598c:	0e 94 95 2c 	call	0x592a	; 0x592a <CopySensorData>
	return 0;
	
} /* AcceptDataGPSDirection */
    5990:	80 e0       	ldi	r24, 0x00	; 0
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	08 95       	ret

00005996 <AcceptDataGPSSpeed>:


static int AcceptDataGPSSpeed(const char *adr, char *inData) {
	
	CopySensorData(sGPSSpeed, inData);
    5996:	83 e6       	ldi	r24, 0x63	; 99
    5998:	9a e2       	ldi	r25, 0x2A	; 42
    599a:	0e 94 95 2c 	call	0x592a	; 0x592a <CopySensorData>
	return 0;
	
} /* AcceptDataGPSSpeed */
    599e:	80 e0       	ldi	r24, 0x00	; 0
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	08 95       	ret

000059a4 <AcceptDataGPSTime>:


static int AcceptDataGPSTime(const char *adr, char *inData) {
	
	CopySensorData(sGPSTime, inData);
    59a4:	85 e1       	ldi	r24, 0x15	; 21
    59a6:	9a e2       	ldi	r25, 0x2A	; 42
    59a8:	0e 94 95 2c 	call	0x592a	; 0x592a <CopySensorData>
	return 0;
		
} /* AcceptDataGPSTime */
    59ac:	80 e0       	ldi	r24, 0x00	; 0
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	08 95       	ret

000059b2 <InitReadBussensors>:
static int AcceptDataGPSTime(const char *adr, char *inData);


void InitReadBussensors(void) {
	
	AddWantedSensor("LL01", AcceptDataGPSPosition);
    59b2:	6d eb       	ldi	r22, 0xBD	; 189
    59b4:	7c e2       	ldi	r23, 0x2C	; 44
    59b6:	8a e3       	ldi	r24, 0x3A	; 58
    59b8:	97 e2       	ldi	r25, 0x27	; 39
    59ba:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AddWantedSensor>
	AddWantedSensor("GR01", AcceptDataGPSDirection);
    59be:	64 ec       	ldi	r22, 0xC4	; 196
    59c0:	7c e2       	ldi	r23, 0x2C	; 44
    59c2:	8f e3       	ldi	r24, 0x3F	; 63
    59c4:	97 e2       	ldi	r25, 0x27	; 39
    59c6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AddWantedSensor>
	AddWantedSensor("SG01", AcceptDataGPSSpeed);
    59ca:	6b ec       	ldi	r22, 0xCB	; 203
    59cc:	7c e2       	ldi	r23, 0x2C	; 44
    59ce:	84 e4       	ldi	r24, 0x44	; 68
    59d0:	97 e2       	ldi	r25, 0x27	; 39
    59d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AddWantedSensor>
	AddWantedSensor("GT01", AcceptDataGPSTime);
    59d6:	62 ed       	ldi	r22, 0xD2	; 210
    59d8:	7c e2       	ldi	r23, 0x2C	; 44
    59da:	89 e4       	ldi	r24, 0x49	; 73
    59dc:	97 e2       	ldi	r25, 0x27	; 39
    59de:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <AddWantedSensor>
    59e2:	08 95       	ret

000059e4 <PrintBussensors>:
} /* InitReadBussensors */


void PrintBussensors(FILE *fp) {
	
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
    59e4:	25 e1       	ldi	r18, 0x15	; 21
    59e6:	3a e2       	ldi	r19, 0x2A	; 42
    59e8:	3f 93       	push	r19
    59ea:	2f 93       	push	r18
    59ec:	23 e6       	ldi	r18, 0x63	; 99
    59ee:	3a e2       	ldi	r19, 0x2A	; 42
    59f0:	3f 93       	push	r19
    59f2:	2f 93       	push	r18
    59f4:	21 eb       	ldi	r18, 0xB1	; 177
    59f6:	3a e2       	ldi	r19, 0x2A	; 42
    59f8:	3f 93       	push	r19
    59fa:	2f 93       	push	r18
    59fc:	28 e0       	ldi	r18, 0x08	; 8
    59fe:	30 e2       	ldi	r19, 0x20	; 32
    5a00:	3f 93       	push	r19
    5a02:	2f 93       	push	r18
    5a04:	2e e4       	ldi	r18, 0x4E	; 78
    5a06:	37 e2       	ldi	r19, 0x27	; 39
    5a08:	3f 93       	push	r19
    5a0a:	2f 93       	push	r18
    5a0c:	9f 93       	push	r25
    5a0e:	8f 93       	push	r24
    5a10:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    5a14:	8d b7       	in	r24, 0x3d	; 61
    5a16:	9e b7       	in	r25, 0x3e	; 62
    5a18:	0c 96       	adiw	r24, 0x0c	; 12
    5a1a:	8d bf       	out	0x3d, r24	; 61
    5a1c:	9e bf       	out	0x3e, r25	; 62
    5a1e:	08 95       	ret

00005a20 <InitSerial>:
	PMIC.CTRL = savePMIC & ~PMIC_LOLVLEN_bm;
	tx_fc_wridx = nextSlot;
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
	PMIC.CTRL = savePMIC;

} /* WriteByte_FC */
    5a20:	cf 93       	push	r28
    5a22:	df 93       	push	r29
    5a24:	f8 94       	cli
    5a26:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    5a2a:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <__TEXT_REGION_LENGTH__+0x7008b4>
    5a2e:	20 ea       	ldi	r18, 0xA0	; 160
    5a30:	39 e0       	ldi	r19, 0x09	; 9
    5a32:	d9 01       	movw	r26, r18
    5a34:	14 96       	adiw	r26, 0x04	; 4
    5a36:	1c 92       	st	X, r1
    5a38:	c0 eb       	ldi	r28, 0xB0	; 176
    5a3a:	d9 e0       	ldi	r29, 0x09	; 9
    5a3c:	1c 82       	std	Y+4, r1	; 0x04
    5a3e:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
    5a42:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <__TEXT_REGION_LENGTH__+0x700ab4>
    5a46:	60 ea       	ldi	r22, 0xA0	; 160
    5a48:	7b e0       	ldi	r23, 0x0B	; 11
    5a4a:	fb 01       	movw	r30, r22
    5a4c:	14 82       	std	Z+4, r1	; 0x04
    5a4e:	e0 e6       	ldi	r30, 0x60	; 96
    5a50:	f6 e0       	ldi	r31, 0x06	; 6
    5a52:	88 e1       	ldi	r24, 0x18	; 24
    5a54:	82 8b       	std	Z+18, r24	; 0x12
    5a56:	86 8b       	std	Z+22, r24	; 0x16
    5a58:	40 ea       	ldi	r20, 0xA0	; 160
    5a5a:	56 e0       	ldi	r21, 0x06	; 6
    5a5c:	da 01       	movw	r26, r20
    5a5e:	52 96       	adiw	r26, 0x12	; 18
    5a60:	8c 93       	st	X, r24
    5a62:	52 97       	sbiw	r26, 0x12	; 18
    5a64:	98 e8       	ldi	r25, 0x88	; 136
    5a66:	95 83       	std	Z+5, r25	; 0x05
    5a68:	92 e0       	ldi	r25, 0x02	; 2
    5a6a:	96 83       	std	Z+6, r25	; 0x06
    5a6c:	9a e8       	ldi	r25, 0x8A	; 138
    5a6e:	91 83       	std	Z+1, r25	; 0x01
    5a70:	94 e4       	ldi	r25, 0x44	; 68
    5a72:	92 83       	std	Z+2, r25	; 0x02
    5a74:	98 e0       	ldi	r25, 0x08	; 8
    5a76:	15 96       	adiw	r26, 0x05	; 5
    5a78:	9c 93       	st	X, r25
    5a7a:	15 97       	sbiw	r26, 0x05	; 5
    5a7c:	11 96       	adiw	r26, 0x01	; 1
    5a7e:	9c 93       	st	X, r25
    5a80:	11 97       	sbiw	r26, 0x01	; 1
    5a82:	94 e0       	ldi	r25, 0x04	; 4
    5a84:	12 96       	adiw	r26, 0x02	; 2
    5a86:	9c 93       	st	X, r25
    5a88:	90 e1       	ldi	r25, 0x10	; 16
    5a8a:	90 8b       	std	Z+16, r25	; 0x10
    5a8c:	94 8b       	std	Z+20, r25	; 0x14
    5a8e:	95 8b       	std	Z+21, r25	; 0x15
    5a90:	45 ef       	ldi	r20, 0xF5	; 245
    5a92:	f9 01       	movw	r30, r18
    5a94:	46 83       	std	Z+6, r20	; 0x06
    5a96:	90 eb       	ldi	r25, 0xB0	; 176
    5a98:	97 83       	std	Z+7, r25	; 0x07
    5a9a:	4e 83       	std	Y+6, r20	; 0x06
    5a9c:	9f 83       	std	Y+7, r25	; 0x07
    5a9e:	9c e0       	ldi	r25, 0x0C	; 12
    5aa0:	db 01       	movw	r26, r22
    5aa2:	16 96       	adiw	r26, 0x06	; 6
    5aa4:	9c 93       	st	X, r25
    5aa6:	16 97       	sbiw	r26, 0x06	; 6
    5aa8:	92 eb       	ldi	r25, 0xB2	; 178
    5aaa:	17 96       	adiw	r26, 0x07	; 7
    5aac:	9c 93       	st	X, r25
    5aae:	17 97       	sbiw	r26, 0x07	; 7
    5ab0:	84 83       	std	Z+4, r24	; 0x04
    5ab2:	8c 83       	std	Y+4, r24	; 0x04
    5ab4:	14 96       	adiw	r26, 0x04	; 4
    5ab6:	8c 93       	st	X, r24
    5ab8:	14 97       	sbiw	r26, 0x04	; 4
    5aba:	80 e2       	ldi	r24, 0x20	; 32
    5abc:	83 83       	std	Z+3, r24	; 0x03
    5abe:	8b 83       	std	Y+3, r24	; 0x03
    5ac0:	13 96       	adiw	r26, 0x03	; 3
    5ac2:	8c 93       	st	X, r24
    5ac4:	e0 ea       	ldi	r30, 0xA0	; 160
    5ac6:	f0 e0       	ldi	r31, 0x00	; 0
    5ac8:	82 81       	ldd	r24, Z+2	; 0x02
    5aca:	83 60       	ori	r24, 0x03	; 3
    5acc:	82 83       	std	Z+2, r24	; 0x02
    5ace:	df 91       	pop	r29
    5ad0:	cf 91       	pop	r28
    5ad2:	08 95       	ret

00005ad4 <CanRead_Comm485>:
    5ad4:	80 91 cf 2d 	lds	r24, 0x2DCF	; 0x802dcf <rx_485_wridx>
    5ad8:	90 91 ce 2d 	lds	r25, 0x2DCE	; 0x802dce <rx_485_rdidx>
    5adc:	89 17       	cp	r24, r25
    5ade:	10 f0       	brcs	.+4      	; 0x5ae4 <CanRead_Comm485+0x10>
    5ae0:	89 1b       	sub	r24, r25
    5ae2:	08 95       	ret
    5ae4:	8c 54       	subi	r24, 0x4C	; 76
    5ae6:	89 1b       	sub	r24, r25
    5ae8:	08 95       	ret

00005aea <ReadByte_Comm485>:
    5aea:	cf 93       	push	r28
    5aec:	c0 91 ce 2d 	lds	r28, 0x2DCE	; 0x802dce <rx_485_rdidx>
    5af0:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <CanRead_Comm485>
    5af4:	88 23       	and	r24, r24
    5af6:	e1 f3       	breq	.-8      	; 0x5af0 <ReadByte_Comm485+0x6>
    5af8:	ec 2f       	mov	r30, r28
    5afa:	f0 e0       	ldi	r31, 0x00	; 0
    5afc:	e6 5e       	subi	r30, 0xE6	; 230
    5afe:	f2 4d       	sbci	r31, 0xD2	; 210
    5b00:	80 81       	ld	r24, Z
    5b02:	91 e0       	ldi	r25, 0x01	; 1
    5b04:	9c 0f       	add	r25, r28
    5b06:	94 3b       	cpi	r25, 0xB4	; 180
    5b08:	08 f0       	brcs	.+2      	; 0x5b0c <ReadByte_Comm485+0x22>
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	90 93 ce 2d 	sts	0x2DCE, r25	; 0x802dce <rx_485_rdidx>
    5b10:	cf 91       	pop	r28
    5b12:	08 95       	ret

00005b14 <CanWrite_Comm485>:
    5b14:	20 91 86 2e 	lds	r18, 0x2E86	; 0x802e86 <tx_485_wridx>
    5b18:	91 e0       	ldi	r25, 0x01	; 1
    5b1a:	92 0f       	add	r25, r18
    5b1c:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <tx_485_rdidx>
    5b20:	94 3b       	cpi	r25, 0xB4	; 180
    5b22:	10 f0       	brcs	.+4      	; 0x5b28 <CanWrite_Comm485+0x14>
    5b24:	9d e4       	ldi	r25, 0x4D	; 77
    5b26:	92 0f       	add	r25, r18
    5b28:	89 17       	cp	r24, r25
    5b2a:	10 f0       	brcs	.+4      	; 0x5b30 <CanWrite_Comm485+0x1c>
    5b2c:	89 1b       	sub	r24, r25
    5b2e:	08 95       	ret
    5b30:	8c 54       	subi	r24, 0x4C	; 76
    5b32:	89 1b       	sub	r24, r25
    5b34:	08 95       	ret

00005b36 <WriteByte_Comm485>:
    5b36:	0f 93       	push	r16
    5b38:	1f 93       	push	r17
    5b3a:	cf 93       	push	r28
    5b3c:	df 93       	push	r29
    5b3e:	d8 2f       	mov	r29, r24
    5b40:	00 ea       	ldi	r16, 0xA0	; 160
    5b42:	19 e0       	ldi	r17, 0x09	; 9
    5b44:	c1 e2       	ldi	r28, 0x21	; 33
    5b46:	02 c0       	rjmp	.+4      	; 0x5b4c <WriteByte_Comm485+0x16>
    5b48:	f8 01       	movw	r30, r16
    5b4a:	c3 83       	std	Z+3, r28	; 0x03
    5b4c:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <CanWrite_Comm485>
    5b50:	88 23       	and	r24, r24
    5b52:	d1 f3       	breq	.-12     	; 0x5b48 <WriteByte_Comm485+0x12>
    5b54:	c0 91 86 2e 	lds	r28, 0x2E86	; 0x802e86 <tx_485_wridx>
    5b58:	ec 2f       	mov	r30, r28
    5b5a:	f0 e0       	ldi	r31, 0x00	; 0
    5b5c:	ef 52       	subi	r30, 0x2F	; 47
    5b5e:	f2 4d       	sbci	r31, 0xD2	; 210
    5b60:	d0 83       	st	Z, r29
    5b62:	cf 5f       	subi	r28, 0xFF	; 255
    5b64:	c4 3b       	cpi	r28, 0xB4	; 180
    5b66:	08 f0       	brcs	.+2      	; 0x5b6a <WriteByte_Comm485+0x34>
    5b68:	c0 e0       	ldi	r28, 0x00	; 0
    5b6a:	e0 ea       	ldi	r30, 0xA0	; 160
    5b6c:	f0 e0       	ldi	r31, 0x00	; 0
    5b6e:	12 81       	ldd	r17, Z+2	; 0x02
    5b70:	81 2f       	mov	r24, r17
    5b72:	8e 7f       	andi	r24, 0xFE	; 254
    5b74:	82 83       	std	Z+2, r24	; 0x02
    5b76:	80 91 d0 2d 	lds	r24, 0x2DD0	; 0x802dd0 <tx_485_busy>
    5b7a:	88 23       	and	r24, r24
    5b7c:	29 f0       	breq	.+10     	; 0x5b88 <WriteByte_Comm485+0x52>
    5b7e:	c0 93 86 2e 	sts	0x2E86, r28	; 0x802e86 <tx_485_wridx>
    5b82:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5b86:	16 c0       	rjmp	.+44     	; 0x5bb4 <WriteByte_Comm485+0x7e>
    5b88:	82 e0       	ldi	r24, 0x02	; 2
    5b8a:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    5b8e:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <GetTicks>
    5b92:	21 e0       	ldi	r18, 0x01	; 1
    5b94:	20 93 d0 2d 	sts	0x2DD0, r18	; 0x802dd0 <tx_485_busy>
    5b98:	c0 93 86 2e 	sts	0x2E86, r28	; 0x802e86 <tx_485_wridx>
    5b9c:	c0 ea       	ldi	r28, 0xA0	; 160
    5b9e:	d9 e0       	ldi	r29, 0x09	; 9
    5ba0:	20 e2       	ldi	r18, 0x20	; 32
    5ba2:	2b 83       	std	Y+3, r18	; 0x03
    5ba4:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5ba8:	63 e0       	ldi	r22, 0x03	; 3
    5baa:	70 e0       	ldi	r23, 0x00	; 0
    5bac:	0e 94 a9 2f 	call	0x5f52	; 0x5f52 <BusyWaitTillAfter>
    5bb0:	81 e2       	ldi	r24, 0x21	; 33
    5bb2:	8b 83       	std	Y+3, r24	; 0x03
    5bb4:	df 91       	pop	r29
    5bb6:	cf 91       	pop	r28
    5bb8:	1f 91       	pop	r17
    5bba:	0f 91       	pop	r16
    5bbc:	08 95       	ret

00005bbe <CanRead_Ctrl>:
    5bbe:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <rx_ctrl_wridx>
    5bc2:	90 91 1c 2c 	lds	r25, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5bc6:	89 17       	cp	r24, r25
    5bc8:	10 f0       	brcs	.+4      	; 0x5bce <CanRead_Ctrl+0x10>
    5bca:	89 1b       	sub	r24, r25
    5bcc:	08 95       	ret
    5bce:	80 5b       	subi	r24, 0xB0	; 176
    5bd0:	89 1b       	sub	r24, r25
    5bd2:	08 95       	ret

00005bd4 <ReadByte_Ctrl>:
    5bd4:	cf 93       	push	r28
    5bd6:	c0 91 1c 2c 	lds	r28, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5bda:	0e 94 df 2d 	call	0x5bbe	; 0x5bbe <CanRead_Ctrl>
    5bde:	88 23       	and	r24, r24
    5be0:	e1 f3       	breq	.-8      	; 0x5bda <ReadByte_Ctrl+0x6>
    5be2:	ec 2f       	mov	r30, r28
    5be4:	f0 e0       	ldi	r31, 0x00	; 0
    5be6:	e4 53       	subi	r30, 0x34	; 52
    5be8:	f4 4d       	sbci	r31, 0xD4	; 212
    5bea:	80 81       	ld	r24, Z
    5bec:	91 e0       	ldi	r25, 0x01	; 1
    5bee:	9c 0f       	add	r25, r28
    5bf0:	90 35       	cpi	r25, 0x50	; 80
    5bf2:	08 f0       	brcs	.+2      	; 0x5bf6 <ReadByte_Ctrl+0x22>
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	90 93 1c 2c 	sts	0x2C1C, r25	; 0x802c1c <rx_ctrl_rdidx>
    5bfa:	cf 91       	pop	r28
    5bfc:	08 95       	ret

00005bfe <CanWrite_Ctrl>:
    5bfe:	20 91 19 2d 	lds	r18, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
    5c02:	91 e0       	ldi	r25, 0x01	; 1
    5c04:	92 0f       	add	r25, r18
    5c06:	80 91 18 2d 	lds	r24, 0x2D18	; 0x802d18 <tx_ctrl_rdidx>
    5c0a:	9a 3f       	cpi	r25, 0xFA	; 250
    5c0c:	10 f0       	brcs	.+4      	; 0x5c12 <CanWrite_Ctrl+0x14>
    5c0e:	97 e0       	ldi	r25, 0x07	; 7
    5c10:	92 0f       	add	r25, r18
    5c12:	89 17       	cp	r24, r25
    5c14:	10 f0       	brcs	.+4      	; 0x5c1a <CanWrite_Ctrl+0x1c>
    5c16:	89 1b       	sub	r24, r25
    5c18:	08 95       	ret
    5c1a:	86 50       	subi	r24, 0x06	; 6
    5c1c:	89 1b       	sub	r24, r25
    5c1e:	08 95       	ret

00005c20 <WriteByte_Ctrl>:
    5c20:	0f 93       	push	r16
    5c22:	1f 93       	push	r17
    5c24:	cf 93       	push	r28
    5c26:	df 93       	push	r29
    5c28:	d8 2f       	mov	r29, r24
    5c2a:	00 eb       	ldi	r16, 0xB0	; 176
    5c2c:	19 e0       	ldi	r17, 0x09	; 9
    5c2e:	c1 e2       	ldi	r28, 0x21	; 33
    5c30:	02 c0       	rjmp	.+4      	; 0x5c36 <WriteByte_Ctrl+0x16>
    5c32:	f8 01       	movw	r30, r16
    5c34:	c3 83       	std	Z+3, r28	; 0x03
    5c36:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <CanWrite_Ctrl>
    5c3a:	88 23       	and	r24, r24
    5c3c:	d1 f3       	breq	.-12     	; 0x5c32 <WriteByte_Ctrl+0x12>
    5c3e:	90 91 19 2d 	lds	r25, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
    5c42:	e9 2f       	mov	r30, r25
    5c44:	f0 e0       	ldi	r31, 0x00	; 0
    5c46:	e2 5e       	subi	r30, 0xE2	; 226
    5c48:	f3 4d       	sbci	r31, 0xD3	; 211
    5c4a:	d0 83       	st	Z, r29
    5c4c:	81 e0       	ldi	r24, 0x01	; 1
    5c4e:	89 0f       	add	r24, r25
    5c50:	8a 3f       	cpi	r24, 0xFA	; 250
    5c52:	08 f0       	brcs	.+2      	; 0x5c56 <WriteByte_Ctrl+0x36>
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	e0 ea       	ldi	r30, 0xA0	; 160
    5c58:	f0 e0       	ldi	r31, 0x00	; 0
    5c5a:	92 81       	ldd	r25, Z+2	; 0x02
    5c5c:	29 2f       	mov	r18, r25
    5c5e:	2e 7f       	andi	r18, 0xFE	; 254
    5c60:	22 83       	std	Z+2, r18	; 0x02
    5c62:	80 93 19 2d 	sts	0x2D19, r24	; 0x802d19 <tx_ctrl_wridx>
    5c66:	81 e2       	ldi	r24, 0x21	; 33
    5c68:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    5c6c:	92 83       	std	Z+2, r25	; 0x02
    5c6e:	df 91       	pop	r29
    5c70:	cf 91       	pop	r28
    5c72:	1f 91       	pop	r17
    5c74:	0f 91       	pop	r16
    5c76:	08 95       	ret

00005c78 <Ctrl_putchar>:
    5c78:	cf 93       	push	r28
    5c7a:	c8 2f       	mov	r28, r24
    5c7c:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <WriteByte_Ctrl>
    5c80:	ce 33       	cpi	r28, 0x3E	; 62
    5c82:	19 f4       	brne	.+6      	; 0x5c8a <Ctrl_putchar+0x12>
    5c84:	10 92 ff 2a 	sts	0x2AFF, r1	; 0x802aff <checksum.4192>
    5c88:	23 c0       	rjmp	.+70     	; 0x5cd0 <Ctrl_putchar+0x58>
    5c8a:	cc 33       	cpi	r28, 0x3C	; 60
    5c8c:	e1 f4       	brne	.+56     	; 0x5cc6 <Ctrl_putchar+0x4e>
    5c8e:	c0 91 ff 2a 	lds	r28, 0x2AFF	; 0x802aff <checksum.4192>
    5c92:	8c 2f       	mov	r24, r28
    5c94:	82 95       	swap	r24
    5c96:	8f 70       	andi	r24, 0x0F	; 15
    5c98:	28 2f       	mov	r18, r24
    5c9a:	30 e0       	ldi	r19, 0x00	; 0
    5c9c:	2a 30       	cpi	r18, 0x0A	; 10
    5c9e:	31 05       	cpc	r19, r1
    5ca0:	14 f4       	brge	.+4      	; 0x5ca6 <Ctrl_putchar+0x2e>
    5ca2:	80 5d       	subi	r24, 0xD0	; 208
    5ca4:	01 c0       	rjmp	.+2      	; 0x5ca8 <Ctrl_putchar+0x30>
    5ca6:	89 5c       	subi	r24, 0xC9	; 201
    5ca8:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <WriteByte_Ctrl>
    5cac:	cf 70       	andi	r28, 0x0F	; 15
    5cae:	8c 2f       	mov	r24, r28
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	0a 97       	sbiw	r24, 0x0a	; 10
    5cb4:	1c f4       	brge	.+6      	; 0x5cbc <Ctrl_putchar+0x44>
    5cb6:	80 e3       	ldi	r24, 0x30	; 48
    5cb8:	8c 0f       	add	r24, r28
    5cba:	02 c0       	rjmp	.+4      	; 0x5cc0 <Ctrl_putchar+0x48>
    5cbc:	87 e3       	ldi	r24, 0x37	; 55
    5cbe:	8c 0f       	add	r24, r28
    5cc0:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <WriteByte_Ctrl>
    5cc4:	05 c0       	rjmp	.+10     	; 0x5cd0 <Ctrl_putchar+0x58>
    5cc6:	80 91 ff 2a 	lds	r24, 0x2AFF	; 0x802aff <checksum.4192>
    5cca:	c8 27       	eor	r28, r24
    5ccc:	c0 93 ff 2a 	sts	0x2AFF, r28	; 0x802aff <checksum.4192>
    5cd0:	80 e0       	ldi	r24, 0x00	; 0
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
    5cd4:	cf 91       	pop	r28
    5cd6:	08 95       	ret

00005cd8 <__vector_88>:


ISR(USARTD0_RXC_vect) {
    5cd8:	1f 92       	push	r1
    5cda:	0f 92       	push	r0
    5cdc:	0f b6       	in	r0, 0x3f	; 63
    5cde:	0f 92       	push	r0
    5ce0:	11 24       	eor	r1, r1
    5ce2:	0b b6       	in	r0, 0x3b	; 59
    5ce4:	0f 92       	push	r0
    5ce6:	8f 93       	push	r24
    5ce8:	9f 93       	push	r25
    5cea:	ef 93       	push	r30
    5cec:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_485_wridx;
    5cee:	80 91 cf 2d 	lds	r24, 0x2DCF	; 0x802dcf <rx_485_wridx>
	rx_485_buf[curSlot] = USARTD0.DATA;
    5cf2:	e8 2f       	mov	r30, r24
    5cf4:	f0 e0       	ldi	r31, 0x00	; 0
    5cf6:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    5cfa:	e6 5e       	subi	r30, 0xE6	; 230
    5cfc:	f2 4d       	sbci	r31, 0xD2	; 210
    5cfe:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5d00:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_COMM485)
    5d02:	84 3b       	cpi	r24, 0xB4	; 180
    5d04:	08 f0       	brcs	.+2      	; 0x5d08 <__vector_88+0x30>
	nextSlot = 0;
    5d06:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_485_rdidx)
    5d08:	90 91 ce 2d 	lds	r25, 0x2DCE	; 0x802dce <rx_485_rdidx>
    5d0c:	89 13       	cpse	r24, r25
	rx_485_wridx = nextSlot;
    5d0e:	80 93 cf 2d 	sts	0x2DCF, r24	; 0x802dcf <rx_485_wridx>
	
} /* ISR(USARTD0_RXC_vect) */
    5d12:	ff 91       	pop	r31
    5d14:	ef 91       	pop	r30
    5d16:	9f 91       	pop	r25
    5d18:	8f 91       	pop	r24
    5d1a:	0f 90       	pop	r0
    5d1c:	0b be       	out	0x3b, r0	; 59
    5d1e:	0f 90       	pop	r0
    5d20:	0f be       	out	0x3f, r0	; 63
    5d22:	0f 90       	pop	r0
    5d24:	1f 90       	pop	r1
    5d26:	18 95       	reti

00005d28 <__vector_89>:


ISR(USARTD0_DRE_vect) {
    5d28:	1f 92       	push	r1
    5d2a:	0f 92       	push	r0
    5d2c:	0f b6       	in	r0, 0x3f	; 63
    5d2e:	0f 92       	push	r0
    5d30:	11 24       	eor	r1, r1
    5d32:	0b b6       	in	r0, 0x3b	; 59
    5d34:	0f 92       	push	r0
    5d36:	2f 93       	push	r18
    5d38:	8f 93       	push	r24
    5d3a:	9f 93       	push	r25
    5d3c:	ef 93       	push	r30
    5d3e:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_485_rdidx;
    5d40:	80 91 85 2e 	lds	r24, 0x2E85	; 0x802e85 <tx_485_rdidx>
	lastSlot = tx_485_wridx;
    5d44:	90 91 86 2e 	lds	r25, 0x2E86	; 0x802e86 <tx_485_wridx>
	
	if(curSlot != lastSlot) {
    5d48:	89 17       	cp	r24, r25
    5d4a:	69 f0       	breq	.+26     	; 0x5d66 <__vector_89+0x3e>
		USARTD0.DATA = tx_485_buf[curSlot];
    5d4c:	e8 2f       	mov	r30, r24
    5d4e:	f0 e0       	ldi	r31, 0x00	; 0
    5d50:	ef 52       	subi	r30, 0x2F	; 47
    5d52:	f2 4d       	sbci	r31, 0xD2	; 210
    5d54:	20 81       	ld	r18, Z
    5d56:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
		if(++nextSlot >= TXBUF_DEPTH_COMM485)
    5d5a:	8f 5f       	subi	r24, 0xFF	; 255
    5d5c:	84 3b       	cpi	r24, 0xB4	; 180
    5d5e:	08 f0       	brcs	.+2      	; 0x5d62 <__vector_89+0x3a>
		nextSlot = 0;
    5d60:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5d62:	89 13       	cpse	r24, r25
    5d64:	04 c0       	rjmp	.+8      	; 0x5d6e <__vector_89+0x46>
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_LO_gc | USART_DREINTLVL_OFF_gc;
    5d66:	84 e2       	ldi	r24, 0x24	; 36
    5d68:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
    5d6c:	89 2f       	mov	r24, r25
	
	tx_485_rdidx = nextSlot;
    5d6e:	80 93 85 2e 	sts	0x2E85, r24	; 0x802e85 <tx_485_rdidx>
	
} /* ISR(USARTD0_DRE_vect) */
    5d72:	ff 91       	pop	r31
    5d74:	ef 91       	pop	r30
    5d76:	9f 91       	pop	r25
    5d78:	8f 91       	pop	r24
    5d7a:	2f 91       	pop	r18
    5d7c:	0f 90       	pop	r0
    5d7e:	0b be       	out	0x3b, r0	; 59
    5d80:	0f 90       	pop	r0
    5d82:	0f be       	out	0x3f, r0	; 63
    5d84:	0f 90       	pop	r0
    5d86:	1f 90       	pop	r1
    5d88:	18 95       	reti

00005d8a <__vector_90>:


ISR(USARTD0_TXC_vect) {
    5d8a:	1f 92       	push	r1
    5d8c:	0f 92       	push	r0
    5d8e:	0f b6       	in	r0, 0x3f	; 63
    5d90:	0f 92       	push	r0
    5d92:	11 24       	eor	r1, r1
    5d94:	8f 93       	push	r24
    5d96:	9f 93       	push	r25
	
	if(tx_485_rdidx == tx_485_wridx) {/* Still no bytes to tx ? */
    5d98:	90 91 85 2e 	lds	r25, 0x2E85	; 0x802e85 <tx_485_rdidx>
    5d9c:	80 91 86 2e 	lds	r24, 0x2E86	; 0x802e86 <tx_485_wridx>
    5da0:	98 13       	cpse	r25, r24
    5da2:	06 c0       	rjmp	.+12     	; 0x5db0 <__vector_90+0x26>
		PORTD.OUTCLR = PD_DRIVER_ENABLE_COMM485; /* Transmission complete; we can turn off the driver enable line */
    5da4:	82 e0       	ldi	r24, 0x02	; 2
    5da6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		tx_485_busy = 0;
    5daa:	10 92 d0 2d 	sts	0x2DD0, r1	; 0x802dd0 <tx_485_busy>
    5dae:	03 c0       	rjmp	.+6      	; 0x5db6 <__vector_90+0x2c>
	}	
	else /* Re-enable TX ISR */
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    5db0:	81 e2       	ldi	r24, 0x21	; 33
    5db2:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
	
} /* ISR(USARTD0_TXC_vect) */
    5db6:	9f 91       	pop	r25
    5db8:	8f 91       	pop	r24
    5dba:	0f 90       	pop	r0
    5dbc:	0f be       	out	0x3f, r0	; 63
    5dbe:	0f 90       	pop	r0
    5dc0:	1f 90       	pop	r1
    5dc2:	18 95       	reti

00005dc4 <__vector_91>:


ISR(USARTD1_RXC_vect) {
    5dc4:	1f 92       	push	r1
    5dc6:	0f 92       	push	r0
    5dc8:	0f b6       	in	r0, 0x3f	; 63
    5dca:	0f 92       	push	r0
    5dcc:	11 24       	eor	r1, r1
    5dce:	0b b6       	in	r0, 0x3b	; 59
    5dd0:	0f 92       	push	r0
    5dd2:	8f 93       	push	r24
    5dd4:	9f 93       	push	r25
    5dd6:	ef 93       	push	r30
    5dd8:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_ctrl_wridx;
    5dda:	80 91 1d 2c 	lds	r24, 0x2C1D	; 0x802c1d <rx_ctrl_wridx>
	rx_ctrl_buf[curSlot] = USARTD1.DATA;
    5dde:	e8 2f       	mov	r30, r24
    5de0:	f0 e0       	ldi	r31, 0x00	; 0
    5de2:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    5de6:	e4 53       	subi	r30, 0x34	; 52
    5de8:	f4 4d       	sbci	r31, 0xD4	; 212
    5dea:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5dec:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_CTRL)
    5dee:	80 35       	cpi	r24, 0x50	; 80
    5df0:	08 f0       	brcs	.+2      	; 0x5df4 <__vector_91+0x30>
		nextSlot = 0;
    5df2:	80 e0       	ldi	r24, 0x00	; 0
		
	if(nextSlot != rx_ctrl_rdidx)
    5df4:	90 91 1c 2c 	lds	r25, 0x2C1C	; 0x802c1c <rx_ctrl_rdidx>
    5df8:	89 13       	cpse	r24, r25
		rx_ctrl_wridx = nextSlot;
    5dfa:	80 93 1d 2c 	sts	0x2C1D, r24	; 0x802c1d <rx_ctrl_wridx>
	
} /* ISR(USARTD1_RXC_vect) */
    5dfe:	ff 91       	pop	r31
    5e00:	ef 91       	pop	r30
    5e02:	9f 91       	pop	r25
    5e04:	8f 91       	pop	r24
    5e06:	0f 90       	pop	r0
    5e08:	0b be       	out	0x3b, r0	; 59
    5e0a:	0f 90       	pop	r0
    5e0c:	0f be       	out	0x3f, r0	; 63
    5e0e:	0f 90       	pop	r0
    5e10:	1f 90       	pop	r1
    5e12:	18 95       	reti

00005e14 <__vector_92>:


ISR(USARTD1_DRE_vect) {
    5e14:	1f 92       	push	r1
    5e16:	0f 92       	push	r0
    5e18:	0f b6       	in	r0, 0x3f	; 63
    5e1a:	0f 92       	push	r0
    5e1c:	11 24       	eor	r1, r1
    5e1e:	0b b6       	in	r0, 0x3b	; 59
    5e20:	0f 92       	push	r0
    5e22:	2f 93       	push	r18
    5e24:	8f 93       	push	r24
    5e26:	9f 93       	push	r25
    5e28:	ef 93       	push	r30
    5e2a:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_ctrl_rdidx;
    5e2c:	80 91 18 2d 	lds	r24, 0x2D18	; 0x802d18 <tx_ctrl_rdidx>
	lastSlot = tx_ctrl_wridx;
    5e30:	90 91 19 2d 	lds	r25, 0x2D19	; 0x802d19 <tx_ctrl_wridx>
	
	if(curSlot != lastSlot) {
    5e34:	89 17       	cp	r24, r25
    5e36:	69 f0       	breq	.+26     	; 0x5e52 <__vector_92+0x3e>
		USARTD1.DATA = tx_ctrl_buf[curSlot];
    5e38:	e8 2f       	mov	r30, r24
    5e3a:	f0 e0       	ldi	r31, 0x00	; 0
    5e3c:	e2 5e       	subi	r30, 0xE2	; 226
    5e3e:	f3 4d       	sbci	r31, 0xD3	; 211
    5e40:	20 81       	ld	r18, Z
    5e42:	20 93 b0 09 	sts	0x09B0, r18	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
		nextSlot = curSlot + 1;
    5e46:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_CTRL)
    5e48:	8a 3f       	cpi	r24, 0xFA	; 250
    5e4a:	08 f0       	brcs	.+2      	; 0x5e4e <__vector_92+0x3a>
			nextSlot = 0;
    5e4c:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5e4e:	89 13       	cpse	r24, r25
    5e50:	04 c0       	rjmp	.+8      	; 0x5e5a <__vector_92+0x46>
		USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5e52:	80 e2       	ldi	r24, 0x20	; 32
    5e54:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    5e58:	89 2f       	mov	r24, r25
	
	tx_ctrl_rdidx = nextSlot;
    5e5a:	80 93 18 2d 	sts	0x2D18, r24	; 0x802d18 <tx_ctrl_rdidx>
	
} /* ISR(USARTD1_DRE_vect) */
    5e5e:	ff 91       	pop	r31
    5e60:	ef 91       	pop	r30
    5e62:	9f 91       	pop	r25
    5e64:	8f 91       	pop	r24
    5e66:	2f 91       	pop	r18
    5e68:	0f 90       	pop	r0
    5e6a:	0b be       	out	0x3b, r0	; 59
    5e6c:	0f 90       	pop	r0
    5e6e:	0f be       	out	0x3f, r0	; 63
    5e70:	0f 90       	pop	r0
    5e72:	1f 90       	pop	r1
    5e74:	18 95       	reti

00005e76 <__vector_119>:


ISR(USARTF0_RXC_vect) {
    5e76:	1f 92       	push	r1
    5e78:	0f 92       	push	r0
    5e7a:	0f b6       	in	r0, 0x3f	; 63
    5e7c:	0f 92       	push	r0
    5e7e:	11 24       	eor	r1, r1
    5e80:	0b b6       	in	r0, 0x3b	; 59
    5e82:	0f 92       	push	r0
    5e84:	8f 93       	push	r24
    5e86:	9f 93       	push	r25
    5e88:	ef 93       	push	r30
    5e8a:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_fc_wridx;
    5e8c:	80 91 65 2b 	lds	r24, 0x2B65	; 0x802b65 <rx_fc_wridx>
	rx_fc_buf[curSlot] = USARTF0.DATA;
    5e90:	e8 2f       	mov	r30, r24
    5e92:	f0 e0       	ldi	r31, 0x00	; 0
    5e94:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    5e98:	e0 50       	subi	r30, 0x00	; 0
    5e9a:	f5 4d       	sbci	r31, 0xD5	; 213
    5e9c:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5e9e:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_FC)
    5ea0:	84 36       	cpi	r24, 0x64	; 100
    5ea2:	08 f0       	brcs	.+2      	; 0x5ea6 <__vector_119+0x30>
	nextSlot = 0;
    5ea4:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_fc_rdidx)
    5ea6:	90 91 64 2b 	lds	r25, 0x2B64	; 0x802b64 <rx_fc_rdidx>
    5eaa:	89 13       	cpse	r24, r25
	rx_fc_wridx = nextSlot;
    5eac:	80 93 65 2b 	sts	0x2B65, r24	; 0x802b65 <rx_fc_wridx>
	
} /* ISR(USARTF0_RXC_vect) */
    5eb0:	ff 91       	pop	r31
    5eb2:	ef 91       	pop	r30
    5eb4:	9f 91       	pop	r25
    5eb6:	8f 91       	pop	r24
    5eb8:	0f 90       	pop	r0
    5eba:	0b be       	out	0x3b, r0	; 59
    5ebc:	0f 90       	pop	r0
    5ebe:	0f be       	out	0x3f, r0	; 63
    5ec0:	0f 90       	pop	r0
    5ec2:	1f 90       	pop	r1
    5ec4:	18 95       	reti

00005ec6 <__vector_120>:


ISR(USARTF0_DRE_vect) {
    5ec6:	1f 92       	push	r1
    5ec8:	0f 92       	push	r0
    5eca:	0f b6       	in	r0, 0x3f	; 63
    5ecc:	0f 92       	push	r0
    5ece:	11 24       	eor	r1, r1
    5ed0:	0b b6       	in	r0, 0x3b	; 59
    5ed2:	0f 92       	push	r0
    5ed4:	2f 93       	push	r18
    5ed6:	8f 93       	push	r24
    5ed8:	9f 93       	push	r25
    5eda:	ef 93       	push	r30
    5edc:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_fc_rdidx;
    5ede:	80 91 ca 2b 	lds	r24, 0x2BCA	; 0x802bca <tx_fc_rdidx>
	lastSlot = tx_fc_wridx;
    5ee2:	90 91 cb 2b 	lds	r25, 0x2BCB	; 0x802bcb <tx_fc_wridx>
	
	if(curSlot != lastSlot) {
    5ee6:	89 17       	cp	r24, r25
    5ee8:	69 f0       	breq	.+26     	; 0x5f04 <__vector_120+0x3e>
		USARTF0.DATA = tx_fc_buf[curSlot];
    5eea:	e8 2f       	mov	r30, r24
    5eec:	f0 e0       	ldi	r31, 0x00	; 0
    5eee:	ea 59       	subi	r30, 0x9A	; 154
    5ef0:	f4 4d       	sbci	r31, 0xD4	; 212
    5ef2:	20 81       	ld	r18, Z
    5ef4:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
		nextSlot = curSlot + 1;
    5ef8:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_FC)
    5efa:	84 36       	cpi	r24, 0x64	; 100
    5efc:	08 f0       	brcs	.+2      	; 0x5f00 <__vector_120+0x3a>
		nextSlot = 0;
    5efe:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5f00:	89 13       	cpse	r24, r25
    5f02:	04 c0       	rjmp	.+8      	; 0x5f0c <__vector_120+0x46>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5f04:	80 e2       	ldi	r24, 0x20	; 32
    5f06:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
    5f0a:	89 2f       	mov	r24, r25
	
	tx_fc_rdidx = nextSlot;
    5f0c:	80 93 ca 2b 	sts	0x2BCA, r24	; 0x802bca <tx_fc_rdidx>
	
} /* ISR(USARTF0_DRE_vect) */
    5f10:	ff 91       	pop	r31
    5f12:	ef 91       	pop	r30
    5f14:	9f 91       	pop	r25
    5f16:	8f 91       	pop	r24
    5f18:	2f 91       	pop	r18
    5f1a:	0f 90       	pop	r0
    5f1c:	0b be       	out	0x3b, r0	; 59
    5f1e:	0f 90       	pop	r0
    5f20:	0f be       	out	0x3f, r0	; 63
    5f22:	0f 90       	pop	r0
    5f24:	1f 90       	pop	r1
    5f26:	18 95       	reti

00005f28 <InitTimer>:
#include "md_ticktimer.h"


void InitTimer(void) {

	TCE0.CTRLA = TC_TC0_CLKSEL_DIV8_gc;
    5f28:	e0 e0       	ldi	r30, 0x00	; 0
    5f2a:	fa e0       	ldi	r31, 0x0A	; 10
    5f2c:	84 e0       	ldi	r24, 0x04	; 4
    5f2e:	80 83       	st	Z, r24
	TCE0.CTRLB = 0x00; /* No input capture, normal mode */
    5f30:	11 82       	std	Z+1, r1	; 0x01
	/* CTRLC is of no interest to us */
	TCE0.CTRLD = TC_TC1_EVACT_OFF_gc | TC_TC0_EVSEL_OFF_gc; /* No events */
    5f32:	13 82       	std	Z+3, r1	; 0x03
	TCE0.CTRLE = 0x00; /* No byte mode */
    5f34:	14 82       	std	Z+4, r1	; 0x04
	TCE0.PER = TICKTIMER_PERIOD;
    5f36:	8f ef       	ldi	r24, 0xFF	; 255
    5f38:	9f ef       	ldi	r25, 0xFF	; 255
    5f3a:	86 a3       	std	Z+38, r24	; 0x26
    5f3c:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_TC0_ERRINTLVL_OFF_gc | TC_TC0_OVFINTLVL_OFF_gc; /* No interrupts (for now) */
    5f3e:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = 0x00; /* Disable Compare/Capture interrupts */
    5f40:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    5f42:	10 a2       	std	Z+32, r1	; 0x20
    5f44:	11 a2       	std	Z+33, r1	; 0x21
    5f46:	08 95       	ret

00005f48 <GetTicks>:

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    5f48:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    5f4c:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
} /* GetTicks */
    5f50:	08 95       	ret

00005f52 <BusyWaitTillAfter>:


timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
    5f52:	9c 01       	movw	r18, r24
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
    5f54:	66 0f       	add	r22, r22
    5f56:	77 1f       	adc	r23, r23
    5f58:	66 0f       	add	r22, r22
    5f5a:	77 1f       	adc	r23, r23
	TCE0.CNT = 0;

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    5f5c:	e0 e0       	ldi	r30, 0x00	; 0
    5f5e:	fa e0       	ldi	r31, 0x0A	; 10
    5f60:	80 a1       	ldd	r24, Z+32	; 0x20
    5f62:	91 a1       	ldd	r25, Z+33	; 0x21
timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
	
	do {
		now = GetTicks();
		if(now < then) // Fix wraparound
    5f64:	82 17       	cp	r24, r18
    5f66:	93 07       	cpc	r25, r19
    5f68:	08 f4       	brcc	.+2      	; 0x5f6c <BusyWaitTillAfter+0x1a>
		now += TICKTIMER_PERIOD;
    5f6a:	01 97       	sbiw	r24, 0x01	; 1
		delta = now - then;
    5f6c:	ac 01       	movw	r20, r24
    5f6e:	42 1b       	sub	r20, r18
    5f70:	53 0b       	sbc	r21, r19
	} while(delta < tickWait);
    5f72:	46 17       	cp	r20, r22
    5f74:	57 07       	cpc	r21, r23
    5f76:	a0 f3       	brcs	.-24     	; 0x5f60 <BusyWaitTillAfter+0xe>
	
	return now;
	
} /* BusyWaitTillAfter */
    5f78:	08 95       	ret

00005f7a <GetBusID>:

void FinishEEPROMOperations(void) {
	
	eeprom_busy_wait();
	
} /* FinishEEPROMOperations */
    5f7a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    5f7e:	80 73       	andi	r24, 0x30	; 48
    5f80:	80 31       	cpi	r24, 0x10	; 16
    5f82:	29 f0       	breq	.+10     	; 0x5f8e <GetBusID+0x14>
    5f84:	80 32       	cpi	r24, 0x20	; 32
    5f86:	29 f0       	breq	.+10     	; 0x5f92 <GetBusID+0x18>
    5f88:	81 11       	cpse	r24, r1
    5f8a:	05 c0       	rjmp	.+10     	; 0x5f96 <GetBusID+0x1c>
    5f8c:	06 c0       	rjmp	.+12     	; 0x5f9a <GetBusID+0x20>
    5f8e:	85 e0       	ldi	r24, 0x05	; 5
    5f90:	08 95       	ret
    5f92:	86 e0       	ldi	r24, 0x06	; 6
    5f94:	08 95       	ret
    5f96:	87 e0       	ldi	r24, 0x07	; 7
    5f98:	08 95       	ret
    5f9a:	83 e0       	ldi	r24, 0x03	; 3
    5f9c:	08 95       	ret

00005f9e <PrintBoardType>:
    5f9e:	9c 01       	movw	r18, r24
    5fa0:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    5fa4:	90 73       	andi	r25, 0x30	; 48
    5fa6:	90 31       	cpi	r25, 0x10	; 16
    5fa8:	91 f0       	breq	.+36     	; 0x5fce <PrintBoardType+0x30>
    5faa:	18 f4       	brcc	.+6      	; 0x5fb2 <PrintBoardType+0x14>
    5fac:	99 23       	and	r25, r25
    5fae:	31 f0       	breq	.+12     	; 0x5fbc <PrintBoardType+0x1e>
    5fb0:	29 c0       	rjmp	.+82     	; 0x6004 <__stack+0x5>
    5fb2:	90 32       	cpi	r25, 0x20	; 32
    5fb4:	a9 f0       	breq	.+42     	; 0x5fe0 <PrintBoardType+0x42>
    5fb6:	90 33       	cpi	r25, 0x30	; 48
    5fb8:	e1 f0       	breq	.+56     	; 0x5ff2 <PrintBoardType+0x54>
    5fba:	24 c0       	rjmp	.+72     	; 0x6004 <__stack+0x5>
    5fbc:	43 e0       	ldi	r20, 0x03	; 3
    5fbe:	50 e0       	ldi	r21, 0x00	; 0
    5fc0:	61 e0       	ldi	r22, 0x01	; 1
    5fc2:	70 e0       	ldi	r23, 0x00	; 0
    5fc4:	8b e5       	ldi	r24, 0x5B	; 91
    5fc6:	97 e2       	ldi	r25, 0x27	; 39
    5fc8:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    5fcc:	08 95       	ret
    5fce:	48 e0       	ldi	r20, 0x08	; 8
    5fd0:	50 e0       	ldi	r21, 0x00	; 0
    5fd2:	61 e0       	ldi	r22, 0x01	; 1
    5fd4:	70 e0       	ldi	r23, 0x00	; 0
    5fd6:	8f e5       	ldi	r24, 0x5F	; 95
    5fd8:	97 e2       	ldi	r25, 0x27	; 39
    5fda:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    5fde:	08 95       	ret
    5fe0:	49 e0       	ldi	r20, 0x09	; 9
    5fe2:	50 e0       	ldi	r21, 0x00	; 0
    5fe4:	61 e0       	ldi	r22, 0x01	; 1
    5fe6:	70 e0       	ldi	r23, 0x00	; 0
    5fe8:	88 e6       	ldi	r24, 0x68	; 104
    5fea:	97 e2       	ldi	r25, 0x27	; 39
    5fec:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    5ff0:	08 95       	ret
    5ff2:	4f e0       	ldi	r20, 0x0F	; 15
    5ff4:	50 e0       	ldi	r21, 0x00	; 0
    5ff6:	61 e0       	ldi	r22, 0x01	; 1
    5ff8:	70 e0       	ldi	r23, 0x00	; 0
    5ffa:	82 e7       	ldi	r24, 0x72	; 114
    5ffc:	97 e2       	ldi	r25, 0x27	; 39
    5ffe:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    6002:	08 95       	ret
    6004:	47 e0       	ldi	r20, 0x07	; 7
    6006:	50 e0       	ldi	r21, 0x00	; 0
    6008:	61 e0       	ldi	r22, 0x01	; 1
    600a:	70 e0       	ldi	r23, 0x00	; 0
    600c:	82 e8       	ldi	r24, 0x82	; 130
    600e:	97 e2       	ldi	r25, 0x27	; 39
    6010:	0e 94 03 38 	call	0x7006	; 0x7006 <fwrite>
    6014:	08 95       	ret

00006016 <PrintProcessorID>:
    6016:	cf 92       	push	r12
    6018:	df 92       	push	r13
    601a:	ef 92       	push	r14
    601c:	ff 92       	push	r15
    601e:	0f 93       	push	r16
    6020:	1f 93       	push	r17
    6022:	cf 93       	push	r28
    6024:	df 93       	push	r29
    6026:	f8 2e       	mov	r15, r24
    6028:	e9 2e       	mov	r14, r25
    602a:	e0 e9       	ldi	r30, 0x90	; 144
    602c:	f0 e0       	ldi	r31, 0x00	; 0
    602e:	33 81       	ldd	r19, Z+3	; 0x03
    6030:	22 81       	ldd	r18, Z+2	; 0x02
    6032:	91 81       	ldd	r25, Z+1	; 0x01
    6034:	80 81       	ld	r24, Z
    6036:	1f 92       	push	r1
    6038:	3f 93       	push	r19
    603a:	1f 92       	push	r1
    603c:	2f 93       	push	r18
    603e:	1f 92       	push	r1
    6040:	9f 93       	push	r25
    6042:	1f 92       	push	r1
    6044:	8f 93       	push	r24
    6046:	8a e8       	ldi	r24, 0x8A	; 138
    6048:	97 e2       	ldi	r25, 0x27	; 39
    604a:	9f 93       	push	r25
    604c:	8f 93       	push	r24
    604e:	ef 92       	push	r14
    6050:	ff 92       	push	r15
    6052:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    6056:	c7 e8       	ldi	r28, 0x87	; 135
    6058:	de e2       	ldi	r29, 0x2E	; 46
    605a:	0f 2e       	mov	r0, r31
    605c:	f2 e9       	ldi	r31, 0x92	; 146
    605e:	cf 2e       	mov	r12, r31
    6060:	fe e2       	ldi	r31, 0x2E	; 46
    6062:	df 2e       	mov	r13, r31
    6064:	f0 2d       	mov	r31, r0
    6066:	8d b7       	in	r24, 0x3d	; 61
    6068:	9e b7       	in	r25, 0x3e	; 62
    606a:	0c 96       	adiw	r24, 0x0c	; 12
    606c:	8d bf       	out	0x3d, r24	; 61
    606e:	9e bf       	out	0x3e, r25	; 62
    6070:	0d eb       	ldi	r16, 0xBD	; 189
    6072:	11 e2       	ldi	r17, 0x21	; 33
    6074:	29 91       	ld	r18, Y+
    6076:	1f 92       	push	r1
    6078:	2f 93       	push	r18
    607a:	1f 93       	push	r17
    607c:	0f 93       	push	r16
    607e:	ef 92       	push	r14
    6080:	ff 92       	push	r15
    6082:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <fprintf>
    6086:	0f 90       	pop	r0
    6088:	0f 90       	pop	r0
    608a:	0f 90       	pop	r0
    608c:	0f 90       	pop	r0
    608e:	0f 90       	pop	r0
    6090:	0f 90       	pop	r0
    6092:	cc 15       	cp	r28, r12
    6094:	dd 05       	cpc	r29, r13
    6096:	71 f7       	brne	.-36     	; 0x6074 <PrintProcessorID+0x5e>
    6098:	df 91       	pop	r29
    609a:	cf 91       	pop	r28
    609c:	1f 91       	pop	r17
    609e:	0f 91       	pop	r16
    60a0:	ff 90       	pop	r15
    60a2:	ef 90       	pop	r14
    60a4:	df 90       	pop	r13
    60a6:	cf 90       	pop	r12
    60a8:	08 95       	ret

000060aa <TryReadEEPROM>:
    60aa:	ef 92       	push	r14
    60ac:	ff 92       	push	r15
    60ae:	0f 93       	push	r16
    60b0:	1f 93       	push	r17
    60b2:	cf 93       	push	r28
    60b4:	df 93       	push	r29
    60b6:	cd b7       	in	r28, 0x3d	; 61
    60b8:	de b7       	in	r29, 0x3e	; 62
    60ba:	28 97       	sbiw	r28, 0x08	; 8
    60bc:	cd bf       	out	0x3d, r28	; 61
    60be:	de bf       	out	0x3e, r29	; 62
    60c0:	7c 01       	movw	r14, r24
    60c2:	8a 01       	movw	r16, r20
    60c4:	44 0f       	add	r20, r20
    60c6:	55 1f       	adc	r21, r21
    60c8:	ce 01       	movw	r24, r28
    60ca:	01 96       	adiw	r24, 0x01	; 1
    60cc:	0e 94 12 3b 	call	0x7624	; 0x7624 <eeprom_read_block>
    60d0:	01 15       	cp	r16, r1
    60d2:	11 05       	cpc	r17, r1
    60d4:	09 f4       	brne	.+2      	; 0x60d8 <TryReadEEPROM+0x2e>
    60d6:	3f c0       	rjmp	.+126    	; 0x6156 <TryReadEEPROM+0xac>
    60d8:	20 e0       	ldi	r18, 0x00	; 0
    60da:	30 e0       	ldi	r19, 0x00	; 0
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	41 e0       	ldi	r20, 0x01	; 1
    60e0:	50 e0       	ldi	r21, 0x00	; 0
    60e2:	4c 0f       	add	r20, r28
    60e4:	5d 1f       	adc	r21, r29
    60e6:	24 0f       	add	r18, r20
    60e8:	35 1f       	adc	r19, r21
    60ea:	f9 01       	movw	r30, r18
    60ec:	e0 0f       	add	r30, r16
    60ee:	f1 1f       	adc	r31, r17
    60f0:	20 81       	ld	r18, Z
    60f2:	20 95       	com	r18
    60f4:	81 e0       	ldi	r24, 0x01	; 1
    60f6:	fa 01       	movw	r30, r20
    60f8:	e9 0f       	add	r30, r25
    60fa:	f1 1d       	adc	r31, r1
    60fc:	97 fd       	sbrc	r25, 7
    60fe:	fa 95       	dec	r31
    6100:	30 81       	ld	r19, Z
    6102:	32 13       	cpse	r19, r18
    6104:	01 c0       	rjmp	.+2      	; 0x6108 <TryReadEEPROM+0x5e>
    6106:	80 e0       	ldi	r24, 0x00	; 0
    6108:	9f 5f       	subi	r25, 0xFF	; 255
    610a:	29 2f       	mov	r18, r25
    610c:	09 2e       	mov	r0, r25
    610e:	00 0c       	add	r0, r0
    6110:	33 0b       	sbc	r19, r19
    6112:	20 17       	cp	r18, r16
    6114:	31 07       	cpc	r19, r17
    6116:	18 f4       	brcc	.+6      	; 0x611e <TryReadEEPROM+0x74>
    6118:	88 23       	and	r24, r24
    611a:	09 f3       	breq	.-62     	; 0x60de <TryReadEEPROM+0x34>
    611c:	1d c0       	rjmp	.+58     	; 0x6158 <TryReadEEPROM+0xae>
    611e:	81 11       	cpse	r24, r1
    6120:	1b c0       	rjmp	.+54     	; 0x6158 <TryReadEEPROM+0xae>
    6122:	80 e0       	ldi	r24, 0x00	; 0
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	20 e0       	ldi	r18, 0x00	; 0
    6128:	d7 01       	movw	r26, r14
    612a:	a8 0f       	add	r26, r24
    612c:	b9 1f       	adc	r27, r25
    612e:	e1 e0       	ldi	r30, 0x01	; 1
    6130:	f0 e0       	ldi	r31, 0x00	; 0
    6132:	ec 0f       	add	r30, r28
    6134:	fd 1f       	adc	r31, r29
    6136:	e2 0f       	add	r30, r18
    6138:	f1 1d       	adc	r31, r1
    613a:	27 fd       	sbrc	r18, 7
    613c:	fa 95       	dec	r31
    613e:	30 81       	ld	r19, Z
    6140:	3c 93       	st	X, r19
    6142:	2f 5f       	subi	r18, 0xFF	; 255
    6144:	82 2f       	mov	r24, r18
    6146:	02 2e       	mov	r0, r18
    6148:	00 0c       	add	r0, r0
    614a:	99 0b       	sbc	r25, r25
    614c:	80 17       	cp	r24, r16
    614e:	91 07       	cpc	r25, r17
    6150:	58 f3       	brcs	.-42     	; 0x6128 <TryReadEEPROM+0x7e>
    6152:	80 e0       	ldi	r24, 0x00	; 0
    6154:	01 c0       	rjmp	.+2      	; 0x6158 <TryReadEEPROM+0xae>
    6156:	80 e0       	ldi	r24, 0x00	; 0
    6158:	28 96       	adiw	r28, 0x08	; 8
    615a:	cd bf       	out	0x3d, r28	; 61
    615c:	de bf       	out	0x3e, r29	; 62
    615e:	df 91       	pop	r29
    6160:	cf 91       	pop	r28
    6162:	1f 91       	pop	r17
    6164:	0f 91       	pop	r16
    6166:	ff 90       	pop	r15
    6168:	ef 90       	pop	r14
    616a:	08 95       	ret

0000616c <UpdateEEPROM>:
    616c:	0f 93       	push	r16
    616e:	1f 93       	push	r17
    6170:	cf 93       	push	r28
    6172:	df 93       	push	r29
    6174:	cd b7       	in	r28, 0x3d	; 61
    6176:	de b7       	in	r29, 0x3e	; 62
    6178:	28 97       	sbiw	r28, 0x08	; 8
    617a:	cd bf       	out	0x3d, r28	; 61
    617c:	de bf       	out	0x3e, r29	; 62
    617e:	8c 01       	movw	r16, r24
    6180:	da 01       	movw	r26, r20
    6182:	10 97       	sbiw	r26, 0x00	; 0
    6184:	19 f1       	breq	.+70     	; 0x61cc <UpdateEEPROM+0x60>
    6186:	20 e0       	ldi	r18, 0x00	; 0
    6188:	30 e0       	ldi	r19, 0x00	; 0
    618a:	50 e0       	ldi	r21, 0x00	; 0
    618c:	f8 01       	movw	r30, r16
    618e:	e2 0f       	add	r30, r18
    6190:	f3 1f       	adc	r31, r19
    6192:	90 81       	ld	r25, Z
    6194:	e1 e0       	ldi	r30, 0x01	; 1
    6196:	f0 e0       	ldi	r31, 0x00	; 0
    6198:	ec 0f       	add	r30, r28
    619a:	fd 1f       	adc	r31, r29
    619c:	e5 0f       	add	r30, r21
    619e:	f1 1d       	adc	r31, r1
    61a0:	57 fd       	sbrc	r21, 7
    61a2:	fa 95       	dec	r31
    61a4:	90 83       	st	Z, r25
    61a6:	e1 e0       	ldi	r30, 0x01	; 1
    61a8:	f0 e0       	ldi	r31, 0x00	; 0
    61aa:	ec 0f       	add	r30, r28
    61ac:	fd 1f       	adc	r31, r29
    61ae:	2e 0f       	add	r18, r30
    61b0:	3f 1f       	adc	r19, r31
    61b2:	f9 01       	movw	r30, r18
    61b4:	ea 0f       	add	r30, r26
    61b6:	fb 1f       	adc	r31, r27
    61b8:	90 95       	com	r25
    61ba:	90 83       	st	Z, r25
    61bc:	5f 5f       	subi	r21, 0xFF	; 255
    61be:	25 2f       	mov	r18, r21
    61c0:	05 2e       	mov	r0, r21
    61c2:	00 0c       	add	r0, r0
    61c4:	33 0b       	sbc	r19, r19
    61c6:	2a 17       	cp	r18, r26
    61c8:	3b 07       	cpc	r19, r27
    61ca:	00 f3       	brcs	.-64     	; 0x618c <UpdateEEPROM+0x20>
    61cc:	ad 01       	movw	r20, r26
    61ce:	44 0f       	add	r20, r20
    61d0:	55 1f       	adc	r21, r21
    61d2:	ce 01       	movw	r24, r28
    61d4:	01 96       	adiw	r24, 0x01	; 1
    61d6:	0e 94 1e 3b 	call	0x763c	; 0x763c <eeprom_update_block>
    61da:	28 96       	adiw	r28, 0x08	; 8
    61dc:	cd bf       	out	0x3d, r28	; 61
    61de:	de bf       	out	0x3e, r29	; 62
    61e0:	df 91       	pop	r29
    61e2:	cf 91       	pop	r28
    61e4:	1f 91       	pop	r17
    61e6:	0f 91       	pop	r16
    61e8:	08 95       	ret

000061ea <ReadCalibrationByte>:


uint8_t ReadCalibrationByte(uint8_t index) {
	uint8_t result;
	
	NVM.CMD = NVM_CMD_READ_CALIB_ROW_gc;
    61ea:	a0 ec       	ldi	r26, 0xC0	; 192
    61ec:	b1 e0       	ldi	r27, 0x01	; 1
    61ee:	92 e0       	ldi	r25, 0x02	; 2
    61f0:	1a 96       	adiw	r26, 0x0a	; 10
    61f2:	9c 93       	st	X, r25
    61f4:	1a 97       	sbiw	r26, 0x0a	; 10
	result = pgm_read_byte(index);
    61f6:	e8 2f       	mov	r30, r24
    61f8:	f0 e0       	ldi	r31, 0x00	; 0
    61fa:	84 91       	lpm	r24, Z
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    61fc:	1a 96       	adiw	r26, 0x0a	; 10
    61fe:	1c 92       	st	X, r1
	
	return result;
} /* ReadCalibrationByte */
    6200:	08 95       	ret

00006202 <InitUtil>:

#define PROCID_LEN 11

static uint8_t sProcID[PROCID_LEN];

void InitUtil(void) {
    6202:	cf 93       	push	r28
    6204:	df 93       	push	r29

	PORTD.DIRCLR = BOARDID_BIT1 | BOARDID_BIT0;
    6206:	e0 e6       	ldi	r30, 0x60	; 96
    6208:	f6 e0       	ldi	r31, 0x06	; 6
    620a:	80 e3       	ldi	r24, 0x30	; 48
    620c:	82 83       	std	Z+2, r24	; 0x02

	PORTD.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    620e:	80 e1       	ldi	r24, 0x10	; 16
    6210:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    6212:	85 8b       	std	Z+21, r24	; 0x15

	/* Read and save processor serial #. Source: http://www.avrfreaks.net/forum/tutc-introduction-offsetof-reading-xmega-sn */
	(void) ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ); 
    6214:	88 e0       	ldi	r24, 0x08	; 8
    6216:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
	/* First read after reset or possibly Power Up returns zero, so read then toss this value */ 

	sProcID[0] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ) ;
    621a:	88 e0       	ldi	r24, 0x08	; 8
    621c:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    6220:	c7 e8       	ldi	r28, 0x87	; 135
    6222:	de e2       	ldi	r29, 0x2E	; 46
    6224:	88 83       	st	Y, r24
	sProcID[1] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM1 ) ) ;
    6226:	89 e0       	ldi	r24, 0x09	; 9
    6228:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    622c:	89 83       	std	Y+1, r24	; 0x01
	sProcID[2] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM2 ) ) ;
    622e:	8a e0       	ldi	r24, 0x0A	; 10
    6230:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    6234:	8a 83       	std	Y+2, r24	; 0x02
	sProcID[3] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM3 ) ) ;
    6236:	8b e0       	ldi	r24, 0x0B	; 11
    6238:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    623c:	8b 83       	std	Y+3, r24	; 0x03
	sProcID[4] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM4 ) ) ;
    623e:	8c e0       	ldi	r24, 0x0C	; 12
    6240:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    6244:	8c 83       	std	Y+4, r24	; 0x04
	sProcID[5] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM5 ) ) ;
    6246:	8d e0       	ldi	r24, 0x0D	; 13
    6248:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    624c:	8d 83       	std	Y+5, r24	; 0x05
	sProcID[6] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, WAFNUM ) ); 
    624e:	80 e1       	ldi	r24, 0x10	; 16
    6250:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    6254:	8e 83       	std	Y+6, r24	; 0x06
	sProcID[7] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX0 ) ); 
    6256:	82 e1       	ldi	r24, 0x12	; 18
    6258:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    625c:	8f 83       	std	Y+7, r24	; 0x07
	sProcID[8] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX1 ) ); 
    625e:	83 e1       	ldi	r24, 0x13	; 19
    6260:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    6264:	88 87       	std	Y+8, r24	; 0x08
	sProcID[9] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY0 ) ); 
    6266:	84 e1       	ldi	r24, 0x14	; 20
    6268:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    626c:	89 87       	std	Y+9, r24	; 0x09
	sProcID[10] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY1 ) );	
    626e:	85 e1       	ldi	r24, 0x15	; 21
    6270:	0e 94 f5 30 	call	0x61ea	; 0x61ea <ReadCalibrationByte>
    6274:	8a 87       	std	Y+10, r24	; 0x0a

} /* InitUtil */
    6276:	df 91       	pop	r29
    6278:	cf 91       	pop	r28
    627a:	08 95       	ret

0000627c <__subsf3>:
    627c:	50 58       	subi	r21, 0x80	; 128

0000627e <__addsf3>:
    627e:	bb 27       	eor	r27, r27
    6280:	aa 27       	eor	r26, r26
    6282:	0e 94 56 31 	call	0x62ac	; 0x62ac <__addsf3x>
    6286:	0c 94 24 33 	jmp	0x6648	; 0x6648 <__fp_round>
    628a:	0e 94 16 33 	call	0x662c	; 0x662c <__fp_pscA>
    628e:	38 f0       	brcs	.+14     	; 0x629e <__addsf3+0x20>
    6290:	0e 94 1d 33 	call	0x663a	; 0x663a <__fp_pscB>
    6294:	20 f0       	brcs	.+8      	; 0x629e <__addsf3+0x20>
    6296:	39 f4       	brne	.+14     	; 0x62a6 <__addsf3+0x28>
    6298:	9f 3f       	cpi	r25, 0xFF	; 255
    629a:	19 f4       	brne	.+6      	; 0x62a2 <__addsf3+0x24>
    629c:	26 f4       	brtc	.+8      	; 0x62a6 <__addsf3+0x28>
    629e:	0c 94 03 33 	jmp	0x6606	; 0x6606 <__fp_nan>
    62a2:	0e f4       	brtc	.+2      	; 0x62a6 <__addsf3+0x28>
    62a4:	e0 95       	com	r30
    62a6:	e7 fb       	bst	r30, 7
    62a8:	0c 94 fd 32 	jmp	0x65fa	; 0x65fa <__fp_inf>

000062ac <__addsf3x>:
    62ac:	e9 2f       	mov	r30, r25
    62ae:	0e 94 35 33 	call	0x666a	; 0x666a <__fp_split3>
    62b2:	58 f3       	brcs	.-42     	; 0x628a <__addsf3+0xc>
    62b4:	ba 17       	cp	r27, r26
    62b6:	62 07       	cpc	r22, r18
    62b8:	73 07       	cpc	r23, r19
    62ba:	84 07       	cpc	r24, r20
    62bc:	95 07       	cpc	r25, r21
    62be:	20 f0       	brcs	.+8      	; 0x62c8 <__addsf3x+0x1c>
    62c0:	79 f4       	brne	.+30     	; 0x62e0 <__addsf3x+0x34>
    62c2:	a6 f5       	brtc	.+104    	; 0x632c <__addsf3x+0x80>
    62c4:	0c 94 57 33 	jmp	0x66ae	; 0x66ae <__fp_zero>
    62c8:	0e f4       	brtc	.+2      	; 0x62cc <__addsf3x+0x20>
    62ca:	e0 95       	com	r30
    62cc:	0b 2e       	mov	r0, r27
    62ce:	ba 2f       	mov	r27, r26
    62d0:	a0 2d       	mov	r26, r0
    62d2:	0b 01       	movw	r0, r22
    62d4:	b9 01       	movw	r22, r18
    62d6:	90 01       	movw	r18, r0
    62d8:	0c 01       	movw	r0, r24
    62da:	ca 01       	movw	r24, r20
    62dc:	a0 01       	movw	r20, r0
    62de:	11 24       	eor	r1, r1
    62e0:	ff 27       	eor	r31, r31
    62e2:	59 1b       	sub	r21, r25
    62e4:	99 f0       	breq	.+38     	; 0x630c <__addsf3x+0x60>
    62e6:	59 3f       	cpi	r21, 0xF9	; 249
    62e8:	50 f4       	brcc	.+20     	; 0x62fe <__addsf3x+0x52>
    62ea:	50 3e       	cpi	r21, 0xE0	; 224
    62ec:	68 f1       	brcs	.+90     	; 0x6348 <__addsf3x+0x9c>
    62ee:	1a 16       	cp	r1, r26
    62f0:	f0 40       	sbci	r31, 0x00	; 0
    62f2:	a2 2f       	mov	r26, r18
    62f4:	23 2f       	mov	r18, r19
    62f6:	34 2f       	mov	r19, r20
    62f8:	44 27       	eor	r20, r20
    62fa:	58 5f       	subi	r21, 0xF8	; 248
    62fc:	f3 cf       	rjmp	.-26     	; 0x62e4 <__addsf3x+0x38>
    62fe:	46 95       	lsr	r20
    6300:	37 95       	ror	r19
    6302:	27 95       	ror	r18
    6304:	a7 95       	ror	r26
    6306:	f0 40       	sbci	r31, 0x00	; 0
    6308:	53 95       	inc	r21
    630a:	c9 f7       	brne	.-14     	; 0x62fe <__addsf3x+0x52>
    630c:	7e f4       	brtc	.+30     	; 0x632c <__addsf3x+0x80>
    630e:	1f 16       	cp	r1, r31
    6310:	ba 0b       	sbc	r27, r26
    6312:	62 0b       	sbc	r22, r18
    6314:	73 0b       	sbc	r23, r19
    6316:	84 0b       	sbc	r24, r20
    6318:	ba f0       	brmi	.+46     	; 0x6348 <__addsf3x+0x9c>
    631a:	91 50       	subi	r25, 0x01	; 1
    631c:	a1 f0       	breq	.+40     	; 0x6346 <__addsf3x+0x9a>
    631e:	ff 0f       	add	r31, r31
    6320:	bb 1f       	adc	r27, r27
    6322:	66 1f       	adc	r22, r22
    6324:	77 1f       	adc	r23, r23
    6326:	88 1f       	adc	r24, r24
    6328:	c2 f7       	brpl	.-16     	; 0x631a <__addsf3x+0x6e>
    632a:	0e c0       	rjmp	.+28     	; 0x6348 <__addsf3x+0x9c>
    632c:	ba 0f       	add	r27, r26
    632e:	62 1f       	adc	r22, r18
    6330:	73 1f       	adc	r23, r19
    6332:	84 1f       	adc	r24, r20
    6334:	48 f4       	brcc	.+18     	; 0x6348 <__addsf3x+0x9c>
    6336:	87 95       	ror	r24
    6338:	77 95       	ror	r23
    633a:	67 95       	ror	r22
    633c:	b7 95       	ror	r27
    633e:	f7 95       	ror	r31
    6340:	9e 3f       	cpi	r25, 0xFE	; 254
    6342:	08 f0       	brcs	.+2      	; 0x6346 <__addsf3x+0x9a>
    6344:	b0 cf       	rjmp	.-160    	; 0x62a6 <__addsf3+0x28>
    6346:	93 95       	inc	r25
    6348:	88 0f       	add	r24, r24
    634a:	08 f0       	brcs	.+2      	; 0x634e <__addsf3x+0xa2>
    634c:	99 27       	eor	r25, r25
    634e:	ee 0f       	add	r30, r30
    6350:	97 95       	ror	r25
    6352:	87 95       	ror	r24
    6354:	08 95       	ret

00006356 <__cmpsf2>:
    6356:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <__fp_cmp>
    635a:	08 f4       	brcc	.+2      	; 0x635e <__cmpsf2+0x8>
    635c:	81 e0       	ldi	r24, 0x01	; 1
    635e:	08 95       	ret

00006360 <__divsf3>:
    6360:	0e 94 c4 31 	call	0x6388	; 0x6388 <__divsf3x>
    6364:	0c 94 24 33 	jmp	0x6648	; 0x6648 <__fp_round>
    6368:	0e 94 1d 33 	call	0x663a	; 0x663a <__fp_pscB>
    636c:	58 f0       	brcs	.+22     	; 0x6384 <__divsf3+0x24>
    636e:	0e 94 16 33 	call	0x662c	; 0x662c <__fp_pscA>
    6372:	40 f0       	brcs	.+16     	; 0x6384 <__divsf3+0x24>
    6374:	29 f4       	brne	.+10     	; 0x6380 <__divsf3+0x20>
    6376:	5f 3f       	cpi	r21, 0xFF	; 255
    6378:	29 f0       	breq	.+10     	; 0x6384 <__divsf3+0x24>
    637a:	0c 94 fd 32 	jmp	0x65fa	; 0x65fa <__fp_inf>
    637e:	51 11       	cpse	r21, r1
    6380:	0c 94 58 33 	jmp	0x66b0	; 0x66b0 <__fp_szero>
    6384:	0c 94 03 33 	jmp	0x6606	; 0x6606 <__fp_nan>

00006388 <__divsf3x>:
    6388:	0e 94 35 33 	call	0x666a	; 0x666a <__fp_split3>
    638c:	68 f3       	brcs	.-38     	; 0x6368 <__divsf3+0x8>

0000638e <__divsf3_pse>:
    638e:	99 23       	and	r25, r25
    6390:	b1 f3       	breq	.-20     	; 0x637e <__divsf3+0x1e>
    6392:	55 23       	and	r21, r21
    6394:	91 f3       	breq	.-28     	; 0x637a <__divsf3+0x1a>
    6396:	95 1b       	sub	r25, r21
    6398:	55 0b       	sbc	r21, r21
    639a:	bb 27       	eor	r27, r27
    639c:	aa 27       	eor	r26, r26
    639e:	62 17       	cp	r22, r18
    63a0:	73 07       	cpc	r23, r19
    63a2:	84 07       	cpc	r24, r20
    63a4:	38 f0       	brcs	.+14     	; 0x63b4 <__divsf3_pse+0x26>
    63a6:	9f 5f       	subi	r25, 0xFF	; 255
    63a8:	5f 4f       	sbci	r21, 0xFF	; 255
    63aa:	22 0f       	add	r18, r18
    63ac:	33 1f       	adc	r19, r19
    63ae:	44 1f       	adc	r20, r20
    63b0:	aa 1f       	adc	r26, r26
    63b2:	a9 f3       	breq	.-22     	; 0x639e <__divsf3_pse+0x10>
    63b4:	35 d0       	rcall	.+106    	; 0x6420 <__divsf3_pse+0x92>
    63b6:	0e 2e       	mov	r0, r30
    63b8:	3a f0       	brmi	.+14     	; 0x63c8 <__divsf3_pse+0x3a>
    63ba:	e0 e8       	ldi	r30, 0x80	; 128
    63bc:	32 d0       	rcall	.+100    	; 0x6422 <__divsf3_pse+0x94>
    63be:	91 50       	subi	r25, 0x01	; 1
    63c0:	50 40       	sbci	r21, 0x00	; 0
    63c2:	e6 95       	lsr	r30
    63c4:	00 1c       	adc	r0, r0
    63c6:	ca f7       	brpl	.-14     	; 0x63ba <__divsf3_pse+0x2c>
    63c8:	2b d0       	rcall	.+86     	; 0x6420 <__divsf3_pse+0x92>
    63ca:	fe 2f       	mov	r31, r30
    63cc:	29 d0       	rcall	.+82     	; 0x6420 <__divsf3_pse+0x92>
    63ce:	66 0f       	add	r22, r22
    63d0:	77 1f       	adc	r23, r23
    63d2:	88 1f       	adc	r24, r24
    63d4:	bb 1f       	adc	r27, r27
    63d6:	26 17       	cp	r18, r22
    63d8:	37 07       	cpc	r19, r23
    63da:	48 07       	cpc	r20, r24
    63dc:	ab 07       	cpc	r26, r27
    63de:	b0 e8       	ldi	r27, 0x80	; 128
    63e0:	09 f0       	breq	.+2      	; 0x63e4 <__divsf3_pse+0x56>
    63e2:	bb 0b       	sbc	r27, r27
    63e4:	80 2d       	mov	r24, r0
    63e6:	bf 01       	movw	r22, r30
    63e8:	ff 27       	eor	r31, r31
    63ea:	93 58       	subi	r25, 0x83	; 131
    63ec:	5f 4f       	sbci	r21, 0xFF	; 255
    63ee:	3a f0       	brmi	.+14     	; 0x63fe <__divsf3_pse+0x70>
    63f0:	9e 3f       	cpi	r25, 0xFE	; 254
    63f2:	51 05       	cpc	r21, r1
    63f4:	78 f0       	brcs	.+30     	; 0x6414 <__divsf3_pse+0x86>
    63f6:	0c 94 fd 32 	jmp	0x65fa	; 0x65fa <__fp_inf>
    63fa:	0c 94 58 33 	jmp	0x66b0	; 0x66b0 <__fp_szero>
    63fe:	5f 3f       	cpi	r21, 0xFF	; 255
    6400:	e4 f3       	brlt	.-8      	; 0x63fa <__divsf3_pse+0x6c>
    6402:	98 3e       	cpi	r25, 0xE8	; 232
    6404:	d4 f3       	brlt	.-12     	; 0x63fa <__divsf3_pse+0x6c>
    6406:	86 95       	lsr	r24
    6408:	77 95       	ror	r23
    640a:	67 95       	ror	r22
    640c:	b7 95       	ror	r27
    640e:	f7 95       	ror	r31
    6410:	9f 5f       	subi	r25, 0xFF	; 255
    6412:	c9 f7       	brne	.-14     	; 0x6406 <__divsf3_pse+0x78>
    6414:	88 0f       	add	r24, r24
    6416:	91 1d       	adc	r25, r1
    6418:	96 95       	lsr	r25
    641a:	87 95       	ror	r24
    641c:	97 f9       	bld	r25, 7
    641e:	08 95       	ret
    6420:	e1 e0       	ldi	r30, 0x01	; 1
    6422:	66 0f       	add	r22, r22
    6424:	77 1f       	adc	r23, r23
    6426:	88 1f       	adc	r24, r24
    6428:	bb 1f       	adc	r27, r27
    642a:	62 17       	cp	r22, r18
    642c:	73 07       	cpc	r23, r19
    642e:	84 07       	cpc	r24, r20
    6430:	ba 07       	cpc	r27, r26
    6432:	20 f0       	brcs	.+8      	; 0x643c <__divsf3_pse+0xae>
    6434:	62 1b       	sub	r22, r18
    6436:	73 0b       	sbc	r23, r19
    6438:	84 0b       	sbc	r24, r20
    643a:	ba 0b       	sbc	r27, r26
    643c:	ee 1f       	adc	r30, r30
    643e:	88 f7       	brcc	.-30     	; 0x6422 <__divsf3_pse+0x94>
    6440:	e0 95       	com	r30
    6442:	08 95       	ret

00006444 <__fixsfsi>:
    6444:	0e 94 29 32 	call	0x6452	; 0x6452 <__fixunssfsi>
    6448:	68 94       	set
    644a:	b1 11       	cpse	r27, r1
    644c:	0c 94 58 33 	jmp	0x66b0	; 0x66b0 <__fp_szero>
    6450:	08 95       	ret

00006452 <__fixunssfsi>:
    6452:	0e 94 3d 33 	call	0x667a	; 0x667a <__fp_splitA>
    6456:	88 f0       	brcs	.+34     	; 0x647a <__fixunssfsi+0x28>
    6458:	9f 57       	subi	r25, 0x7F	; 127
    645a:	98 f0       	brcs	.+38     	; 0x6482 <__fixunssfsi+0x30>
    645c:	b9 2f       	mov	r27, r25
    645e:	99 27       	eor	r25, r25
    6460:	b7 51       	subi	r27, 0x17	; 23
    6462:	b0 f0       	brcs	.+44     	; 0x6490 <__fixunssfsi+0x3e>
    6464:	e1 f0       	breq	.+56     	; 0x649e <__fixunssfsi+0x4c>
    6466:	66 0f       	add	r22, r22
    6468:	77 1f       	adc	r23, r23
    646a:	88 1f       	adc	r24, r24
    646c:	99 1f       	adc	r25, r25
    646e:	1a f0       	brmi	.+6      	; 0x6476 <__fixunssfsi+0x24>
    6470:	ba 95       	dec	r27
    6472:	c9 f7       	brne	.-14     	; 0x6466 <__fixunssfsi+0x14>
    6474:	14 c0       	rjmp	.+40     	; 0x649e <__fixunssfsi+0x4c>
    6476:	b1 30       	cpi	r27, 0x01	; 1
    6478:	91 f0       	breq	.+36     	; 0x649e <__fixunssfsi+0x4c>
    647a:	0e 94 57 33 	call	0x66ae	; 0x66ae <__fp_zero>
    647e:	b1 e0       	ldi	r27, 0x01	; 1
    6480:	08 95       	ret
    6482:	0c 94 57 33 	jmp	0x66ae	; 0x66ae <__fp_zero>
    6486:	67 2f       	mov	r22, r23
    6488:	78 2f       	mov	r23, r24
    648a:	88 27       	eor	r24, r24
    648c:	b8 5f       	subi	r27, 0xF8	; 248
    648e:	39 f0       	breq	.+14     	; 0x649e <__fixunssfsi+0x4c>
    6490:	b9 3f       	cpi	r27, 0xF9	; 249
    6492:	cc f3       	brlt	.-14     	; 0x6486 <__fixunssfsi+0x34>
    6494:	86 95       	lsr	r24
    6496:	77 95       	ror	r23
    6498:	67 95       	ror	r22
    649a:	b3 95       	inc	r27
    649c:	d9 f7       	brne	.-10     	; 0x6494 <__fixunssfsi+0x42>
    649e:	3e f4       	brtc	.+14     	; 0x64ae <__fixunssfsi+0x5c>
    64a0:	90 95       	com	r25
    64a2:	80 95       	com	r24
    64a4:	70 95       	com	r23
    64a6:	61 95       	neg	r22
    64a8:	7f 4f       	sbci	r23, 0xFF	; 255
    64aa:	8f 4f       	sbci	r24, 0xFF	; 255
    64ac:	9f 4f       	sbci	r25, 0xFF	; 255
    64ae:	08 95       	ret

000064b0 <__floatdisf>:
    64b0:	97 fb       	bst	r25, 7
    64b2:	16 f4       	brtc	.+4      	; 0x64b8 <__floatdisf+0x8>
    64b4:	0e 94 06 33 	call	0x660c	; 0x660c <__fp_negdi>
    64b8:	0c 94 9c 32 	jmp	0x6538	; 0x6538 <__fp_di2sf>

000064bc <__floatunsisf>:
    64bc:	e8 94       	clt
    64be:	09 c0       	rjmp	.+18     	; 0x64d2 <__floatsisf+0x12>

000064c0 <__floatsisf>:
    64c0:	97 fb       	bst	r25, 7
    64c2:	3e f4       	brtc	.+14     	; 0x64d2 <__floatsisf+0x12>
    64c4:	90 95       	com	r25
    64c6:	80 95       	com	r24
    64c8:	70 95       	com	r23
    64ca:	61 95       	neg	r22
    64cc:	7f 4f       	sbci	r23, 0xFF	; 255
    64ce:	8f 4f       	sbci	r24, 0xFF	; 255
    64d0:	9f 4f       	sbci	r25, 0xFF	; 255
    64d2:	99 23       	and	r25, r25
    64d4:	a9 f0       	breq	.+42     	; 0x6500 <__floatsisf+0x40>
    64d6:	f9 2f       	mov	r31, r25
    64d8:	96 e9       	ldi	r25, 0x96	; 150
    64da:	bb 27       	eor	r27, r27
    64dc:	93 95       	inc	r25
    64de:	f6 95       	lsr	r31
    64e0:	87 95       	ror	r24
    64e2:	77 95       	ror	r23
    64e4:	67 95       	ror	r22
    64e6:	b7 95       	ror	r27
    64e8:	f1 11       	cpse	r31, r1
    64ea:	f8 cf       	rjmp	.-16     	; 0x64dc <__floatsisf+0x1c>
    64ec:	fa f4       	brpl	.+62     	; 0x652c <__floatsisf+0x6c>
    64ee:	bb 0f       	add	r27, r27
    64f0:	11 f4       	brne	.+4      	; 0x64f6 <__floatsisf+0x36>
    64f2:	60 ff       	sbrs	r22, 0
    64f4:	1b c0       	rjmp	.+54     	; 0x652c <__floatsisf+0x6c>
    64f6:	6f 5f       	subi	r22, 0xFF	; 255
    64f8:	7f 4f       	sbci	r23, 0xFF	; 255
    64fa:	8f 4f       	sbci	r24, 0xFF	; 255
    64fc:	9f 4f       	sbci	r25, 0xFF	; 255
    64fe:	16 c0       	rjmp	.+44     	; 0x652c <__floatsisf+0x6c>
    6500:	88 23       	and	r24, r24
    6502:	11 f0       	breq	.+4      	; 0x6508 <__floatsisf+0x48>
    6504:	96 e9       	ldi	r25, 0x96	; 150
    6506:	11 c0       	rjmp	.+34     	; 0x652a <__floatsisf+0x6a>
    6508:	77 23       	and	r23, r23
    650a:	21 f0       	breq	.+8      	; 0x6514 <__floatsisf+0x54>
    650c:	9e e8       	ldi	r25, 0x8E	; 142
    650e:	87 2f       	mov	r24, r23
    6510:	76 2f       	mov	r23, r22
    6512:	05 c0       	rjmp	.+10     	; 0x651e <__floatsisf+0x5e>
    6514:	66 23       	and	r22, r22
    6516:	71 f0       	breq	.+28     	; 0x6534 <__floatsisf+0x74>
    6518:	96 e8       	ldi	r25, 0x86	; 134
    651a:	86 2f       	mov	r24, r22
    651c:	70 e0       	ldi	r23, 0x00	; 0
    651e:	60 e0       	ldi	r22, 0x00	; 0
    6520:	2a f0       	brmi	.+10     	; 0x652c <__floatsisf+0x6c>
    6522:	9a 95       	dec	r25
    6524:	66 0f       	add	r22, r22
    6526:	77 1f       	adc	r23, r23
    6528:	88 1f       	adc	r24, r24
    652a:	da f7       	brpl	.-10     	; 0x6522 <__floatsisf+0x62>
    652c:	88 0f       	add	r24, r24
    652e:	96 95       	lsr	r25
    6530:	87 95       	ror	r24
    6532:	97 f9       	bld	r25, 7
    6534:	08 95       	ret

00006536 <__floatundisf>:
    6536:	e8 94       	clt

00006538 <__fp_di2sf>:
    6538:	f9 2f       	mov	r31, r25
    653a:	96 eb       	ldi	r25, 0xB6	; 182
    653c:	ff 23       	and	r31, r31
    653e:	81 f0       	breq	.+32     	; 0x6560 <__fp_di2sf+0x28>
    6540:	12 16       	cp	r1, r18
    6542:	13 06       	cpc	r1, r19
    6544:	14 06       	cpc	r1, r20
    6546:	44 0b       	sbc	r20, r20
    6548:	93 95       	inc	r25
    654a:	f6 95       	lsr	r31
    654c:	87 95       	ror	r24
    654e:	77 95       	ror	r23
    6550:	67 95       	ror	r22
    6552:	57 95       	ror	r21
    6554:	40 40       	sbci	r20, 0x00	; 0
    6556:	ff 23       	and	r31, r31
    6558:	b9 f7       	brne	.-18     	; 0x6548 <__fp_di2sf+0x10>
    655a:	1b c0       	rjmp	.+54     	; 0x6592 <__fp_di2sf+0x5a>
    655c:	99 27       	eor	r25, r25
    655e:	08 95       	ret
    6560:	88 23       	and	r24, r24
    6562:	51 f4       	brne	.+20     	; 0x6578 <__fp_di2sf+0x40>
    6564:	98 50       	subi	r25, 0x08	; 8
    6566:	d2 f7       	brpl	.-12     	; 0x655c <__fp_di2sf+0x24>
    6568:	87 2b       	or	r24, r23
    656a:	76 2f       	mov	r23, r22
    656c:	65 2f       	mov	r22, r21
    656e:	54 2f       	mov	r21, r20
    6570:	43 2f       	mov	r20, r19
    6572:	32 2f       	mov	r19, r18
    6574:	20 e0       	ldi	r18, 0x00	; 0
    6576:	b1 f3       	breq	.-20     	; 0x6564 <__fp_di2sf+0x2c>
    6578:	12 16       	cp	r1, r18
    657a:	13 06       	cpc	r1, r19
    657c:	14 06       	cpc	r1, r20
    657e:	44 0b       	sbc	r20, r20
    6580:	88 23       	and	r24, r24
    6582:	3a f0       	brmi	.+14     	; 0x6592 <__fp_di2sf+0x5a>
    6584:	9a 95       	dec	r25
    6586:	44 0f       	add	r20, r20
    6588:	55 1f       	adc	r21, r21
    658a:	66 1f       	adc	r22, r22
    658c:	77 1f       	adc	r23, r23
    658e:	88 1f       	adc	r24, r24
    6590:	ca f7       	brpl	.-14     	; 0x6584 <__fp_di2sf+0x4c>
    6592:	55 23       	and	r21, r21
    6594:	4a f4       	brpl	.+18     	; 0x65a8 <__fp_di2sf+0x70>
    6596:	44 0f       	add	r20, r20
    6598:	55 1f       	adc	r21, r21
    659a:	11 f4       	brne	.+4      	; 0x65a0 <__fp_di2sf+0x68>
    659c:	60 ff       	sbrs	r22, 0
    659e:	04 c0       	rjmp	.+8      	; 0x65a8 <__fp_di2sf+0x70>
    65a0:	6f 5f       	subi	r22, 0xFF	; 255
    65a2:	7f 4f       	sbci	r23, 0xFF	; 255
    65a4:	8f 4f       	sbci	r24, 0xFF	; 255
    65a6:	9f 4f       	sbci	r25, 0xFF	; 255
    65a8:	88 0f       	add	r24, r24
    65aa:	96 95       	lsr	r25
    65ac:	87 95       	ror	r24
    65ae:	97 f9       	bld	r25, 7
    65b0:	08 95       	ret

000065b2 <__fp_cmp>:
    65b2:	99 0f       	add	r25, r25
    65b4:	00 08       	sbc	r0, r0
    65b6:	55 0f       	add	r21, r21
    65b8:	aa 0b       	sbc	r26, r26
    65ba:	e0 e8       	ldi	r30, 0x80	; 128
    65bc:	fe ef       	ldi	r31, 0xFE	; 254
    65be:	16 16       	cp	r1, r22
    65c0:	17 06       	cpc	r1, r23
    65c2:	e8 07       	cpc	r30, r24
    65c4:	f9 07       	cpc	r31, r25
    65c6:	c0 f0       	brcs	.+48     	; 0x65f8 <__fp_cmp+0x46>
    65c8:	12 16       	cp	r1, r18
    65ca:	13 06       	cpc	r1, r19
    65cc:	e4 07       	cpc	r30, r20
    65ce:	f5 07       	cpc	r31, r21
    65d0:	98 f0       	brcs	.+38     	; 0x65f8 <__fp_cmp+0x46>
    65d2:	62 1b       	sub	r22, r18
    65d4:	73 0b       	sbc	r23, r19
    65d6:	84 0b       	sbc	r24, r20
    65d8:	95 0b       	sbc	r25, r21
    65da:	39 f4       	brne	.+14     	; 0x65ea <__fp_cmp+0x38>
    65dc:	0a 26       	eor	r0, r26
    65de:	61 f0       	breq	.+24     	; 0x65f8 <__fp_cmp+0x46>
    65e0:	23 2b       	or	r18, r19
    65e2:	24 2b       	or	r18, r20
    65e4:	25 2b       	or	r18, r21
    65e6:	21 f4       	brne	.+8      	; 0x65f0 <__fp_cmp+0x3e>
    65e8:	08 95       	ret
    65ea:	0a 26       	eor	r0, r26
    65ec:	09 f4       	brne	.+2      	; 0x65f0 <__fp_cmp+0x3e>
    65ee:	a1 40       	sbci	r26, 0x01	; 1
    65f0:	a6 95       	lsr	r26
    65f2:	8f ef       	ldi	r24, 0xFF	; 255
    65f4:	81 1d       	adc	r24, r1
    65f6:	81 1d       	adc	r24, r1
    65f8:	08 95       	ret

000065fa <__fp_inf>:
    65fa:	97 f9       	bld	r25, 7
    65fc:	9f 67       	ori	r25, 0x7F	; 127
    65fe:	80 e8       	ldi	r24, 0x80	; 128
    6600:	70 e0       	ldi	r23, 0x00	; 0
    6602:	60 e0       	ldi	r22, 0x00	; 0
    6604:	08 95       	ret

00006606 <__fp_nan>:
    6606:	9f ef       	ldi	r25, 0xFF	; 255
    6608:	80 ec       	ldi	r24, 0xC0	; 192
    660a:	08 95       	ret

0000660c <__fp_negdi>:
    660c:	90 95       	com	r25
    660e:	80 95       	com	r24
    6610:	70 95       	com	r23
    6612:	60 95       	com	r22
    6614:	50 95       	com	r21
    6616:	40 95       	com	r20
    6618:	30 95       	com	r19
    661a:	21 95       	neg	r18
    661c:	3f 4f       	sbci	r19, 0xFF	; 255
    661e:	4f 4f       	sbci	r20, 0xFF	; 255
    6620:	5f 4f       	sbci	r21, 0xFF	; 255
    6622:	6f 4f       	sbci	r22, 0xFF	; 255
    6624:	7f 4f       	sbci	r23, 0xFF	; 255
    6626:	8f 4f       	sbci	r24, 0xFF	; 255
    6628:	9f 4f       	sbci	r25, 0xFF	; 255
    662a:	08 95       	ret

0000662c <__fp_pscA>:
    662c:	00 24       	eor	r0, r0
    662e:	0a 94       	dec	r0
    6630:	16 16       	cp	r1, r22
    6632:	17 06       	cpc	r1, r23
    6634:	18 06       	cpc	r1, r24
    6636:	09 06       	cpc	r0, r25
    6638:	08 95       	ret

0000663a <__fp_pscB>:
    663a:	00 24       	eor	r0, r0
    663c:	0a 94       	dec	r0
    663e:	12 16       	cp	r1, r18
    6640:	13 06       	cpc	r1, r19
    6642:	14 06       	cpc	r1, r20
    6644:	05 06       	cpc	r0, r21
    6646:	08 95       	ret

00006648 <__fp_round>:
    6648:	09 2e       	mov	r0, r25
    664a:	03 94       	inc	r0
    664c:	00 0c       	add	r0, r0
    664e:	11 f4       	brne	.+4      	; 0x6654 <__fp_round+0xc>
    6650:	88 23       	and	r24, r24
    6652:	52 f0       	brmi	.+20     	; 0x6668 <__fp_round+0x20>
    6654:	bb 0f       	add	r27, r27
    6656:	40 f4       	brcc	.+16     	; 0x6668 <__fp_round+0x20>
    6658:	bf 2b       	or	r27, r31
    665a:	11 f4       	brne	.+4      	; 0x6660 <__fp_round+0x18>
    665c:	60 ff       	sbrs	r22, 0
    665e:	04 c0       	rjmp	.+8      	; 0x6668 <__fp_round+0x20>
    6660:	6f 5f       	subi	r22, 0xFF	; 255
    6662:	7f 4f       	sbci	r23, 0xFF	; 255
    6664:	8f 4f       	sbci	r24, 0xFF	; 255
    6666:	9f 4f       	sbci	r25, 0xFF	; 255
    6668:	08 95       	ret

0000666a <__fp_split3>:
    666a:	57 fd       	sbrc	r21, 7
    666c:	90 58       	subi	r25, 0x80	; 128
    666e:	44 0f       	add	r20, r20
    6670:	55 1f       	adc	r21, r21
    6672:	59 f0       	breq	.+22     	; 0x668a <__fp_splitA+0x10>
    6674:	5f 3f       	cpi	r21, 0xFF	; 255
    6676:	71 f0       	breq	.+28     	; 0x6694 <__fp_splitA+0x1a>
    6678:	47 95       	ror	r20

0000667a <__fp_splitA>:
    667a:	88 0f       	add	r24, r24
    667c:	97 fb       	bst	r25, 7
    667e:	99 1f       	adc	r25, r25
    6680:	61 f0       	breq	.+24     	; 0x669a <__fp_splitA+0x20>
    6682:	9f 3f       	cpi	r25, 0xFF	; 255
    6684:	79 f0       	breq	.+30     	; 0x66a4 <__fp_splitA+0x2a>
    6686:	87 95       	ror	r24
    6688:	08 95       	ret
    668a:	12 16       	cp	r1, r18
    668c:	13 06       	cpc	r1, r19
    668e:	14 06       	cpc	r1, r20
    6690:	55 1f       	adc	r21, r21
    6692:	f2 cf       	rjmp	.-28     	; 0x6678 <__fp_split3+0xe>
    6694:	46 95       	lsr	r20
    6696:	f1 df       	rcall	.-30     	; 0x667a <__fp_splitA>
    6698:	08 c0       	rjmp	.+16     	; 0x66aa <__fp_splitA+0x30>
    669a:	16 16       	cp	r1, r22
    669c:	17 06       	cpc	r1, r23
    669e:	18 06       	cpc	r1, r24
    66a0:	99 1f       	adc	r25, r25
    66a2:	f1 cf       	rjmp	.-30     	; 0x6686 <__fp_splitA+0xc>
    66a4:	86 95       	lsr	r24
    66a6:	71 05       	cpc	r23, r1
    66a8:	61 05       	cpc	r22, r1
    66aa:	08 94       	sec
    66ac:	08 95       	ret

000066ae <__fp_zero>:
    66ae:	e8 94       	clt

000066b0 <__fp_szero>:
    66b0:	bb 27       	eor	r27, r27
    66b2:	66 27       	eor	r22, r22
    66b4:	77 27       	eor	r23, r23
    66b6:	cb 01       	movw	r24, r22
    66b8:	97 f9       	bld	r25, 7
    66ba:	08 95       	ret

000066bc <__mulsf3>:
    66bc:	0e 94 71 33 	call	0x66e2	; 0x66e2 <__mulsf3x>
    66c0:	0c 94 24 33 	jmp	0x6648	; 0x6648 <__fp_round>
    66c4:	0e 94 16 33 	call	0x662c	; 0x662c <__fp_pscA>
    66c8:	38 f0       	brcs	.+14     	; 0x66d8 <__mulsf3+0x1c>
    66ca:	0e 94 1d 33 	call	0x663a	; 0x663a <__fp_pscB>
    66ce:	20 f0       	brcs	.+8      	; 0x66d8 <__mulsf3+0x1c>
    66d0:	95 23       	and	r25, r21
    66d2:	11 f0       	breq	.+4      	; 0x66d8 <__mulsf3+0x1c>
    66d4:	0c 94 fd 32 	jmp	0x65fa	; 0x65fa <__fp_inf>
    66d8:	0c 94 03 33 	jmp	0x6606	; 0x6606 <__fp_nan>
    66dc:	11 24       	eor	r1, r1
    66de:	0c 94 58 33 	jmp	0x66b0	; 0x66b0 <__fp_szero>

000066e2 <__mulsf3x>:
    66e2:	0e 94 35 33 	call	0x666a	; 0x666a <__fp_split3>
    66e6:	70 f3       	brcs	.-36     	; 0x66c4 <__mulsf3+0x8>

000066e8 <__mulsf3_pse>:
    66e8:	95 9f       	mul	r25, r21
    66ea:	c1 f3       	breq	.-16     	; 0x66dc <__mulsf3+0x20>
    66ec:	95 0f       	add	r25, r21
    66ee:	50 e0       	ldi	r21, 0x00	; 0
    66f0:	55 1f       	adc	r21, r21
    66f2:	62 9f       	mul	r22, r18
    66f4:	f0 01       	movw	r30, r0
    66f6:	72 9f       	mul	r23, r18
    66f8:	bb 27       	eor	r27, r27
    66fa:	f0 0d       	add	r31, r0
    66fc:	b1 1d       	adc	r27, r1
    66fe:	63 9f       	mul	r22, r19
    6700:	aa 27       	eor	r26, r26
    6702:	f0 0d       	add	r31, r0
    6704:	b1 1d       	adc	r27, r1
    6706:	aa 1f       	adc	r26, r26
    6708:	64 9f       	mul	r22, r20
    670a:	66 27       	eor	r22, r22
    670c:	b0 0d       	add	r27, r0
    670e:	a1 1d       	adc	r26, r1
    6710:	66 1f       	adc	r22, r22
    6712:	82 9f       	mul	r24, r18
    6714:	22 27       	eor	r18, r18
    6716:	b0 0d       	add	r27, r0
    6718:	a1 1d       	adc	r26, r1
    671a:	62 1f       	adc	r22, r18
    671c:	73 9f       	mul	r23, r19
    671e:	b0 0d       	add	r27, r0
    6720:	a1 1d       	adc	r26, r1
    6722:	62 1f       	adc	r22, r18
    6724:	83 9f       	mul	r24, r19
    6726:	a0 0d       	add	r26, r0
    6728:	61 1d       	adc	r22, r1
    672a:	22 1f       	adc	r18, r18
    672c:	74 9f       	mul	r23, r20
    672e:	33 27       	eor	r19, r19
    6730:	a0 0d       	add	r26, r0
    6732:	61 1d       	adc	r22, r1
    6734:	23 1f       	adc	r18, r19
    6736:	84 9f       	mul	r24, r20
    6738:	60 0d       	add	r22, r0
    673a:	21 1d       	adc	r18, r1
    673c:	82 2f       	mov	r24, r18
    673e:	76 2f       	mov	r23, r22
    6740:	6a 2f       	mov	r22, r26
    6742:	11 24       	eor	r1, r1
    6744:	9f 57       	subi	r25, 0x7F	; 127
    6746:	50 40       	sbci	r21, 0x00	; 0
    6748:	9a f0       	brmi	.+38     	; 0x6770 <__mulsf3_pse+0x88>
    674a:	f1 f0       	breq	.+60     	; 0x6788 <__mulsf3_pse+0xa0>
    674c:	88 23       	and	r24, r24
    674e:	4a f0       	brmi	.+18     	; 0x6762 <__mulsf3_pse+0x7a>
    6750:	ee 0f       	add	r30, r30
    6752:	ff 1f       	adc	r31, r31
    6754:	bb 1f       	adc	r27, r27
    6756:	66 1f       	adc	r22, r22
    6758:	77 1f       	adc	r23, r23
    675a:	88 1f       	adc	r24, r24
    675c:	91 50       	subi	r25, 0x01	; 1
    675e:	50 40       	sbci	r21, 0x00	; 0
    6760:	a9 f7       	brne	.-22     	; 0x674c <__mulsf3_pse+0x64>
    6762:	9e 3f       	cpi	r25, 0xFE	; 254
    6764:	51 05       	cpc	r21, r1
    6766:	80 f0       	brcs	.+32     	; 0x6788 <__mulsf3_pse+0xa0>
    6768:	0c 94 fd 32 	jmp	0x65fa	; 0x65fa <__fp_inf>
    676c:	0c 94 58 33 	jmp	0x66b0	; 0x66b0 <__fp_szero>
    6770:	5f 3f       	cpi	r21, 0xFF	; 255
    6772:	e4 f3       	brlt	.-8      	; 0x676c <__mulsf3_pse+0x84>
    6774:	98 3e       	cpi	r25, 0xE8	; 232
    6776:	d4 f3       	brlt	.-12     	; 0x676c <__mulsf3_pse+0x84>
    6778:	86 95       	lsr	r24
    677a:	77 95       	ror	r23
    677c:	67 95       	ror	r22
    677e:	b7 95       	ror	r27
    6780:	f7 95       	ror	r31
    6782:	e7 95       	ror	r30
    6784:	9f 5f       	subi	r25, 0xFF	; 255
    6786:	c1 f7       	brne	.-16     	; 0x6778 <__mulsf3_pse+0x90>
    6788:	fe 2b       	or	r31, r30
    678a:	88 0f       	add	r24, r24
    678c:	91 1d       	adc	r25, r1
    678e:	96 95       	lsr	r25
    6790:	87 95       	ror	r24
    6792:	97 f9       	bld	r25, 7
    6794:	08 95       	ret

00006796 <round>:
    6796:	0e 94 3d 33 	call	0x667a	; 0x667a <__fp_splitA>
    679a:	e8 f0       	brcs	.+58     	; 0x67d6 <round+0x40>
    679c:	9e 37       	cpi	r25, 0x7E	; 126
    679e:	e8 f0       	brcs	.+58     	; 0x67da <round+0x44>
    67a0:	96 39       	cpi	r25, 0x96	; 150
    67a2:	b8 f4       	brcc	.+46     	; 0x67d2 <round+0x3c>
    67a4:	9e 38       	cpi	r25, 0x8E	; 142
    67a6:	48 f4       	brcc	.+18     	; 0x67ba <round+0x24>
    67a8:	67 2f       	mov	r22, r23
    67aa:	78 2f       	mov	r23, r24
    67ac:	88 27       	eor	r24, r24
    67ae:	98 5f       	subi	r25, 0xF8	; 248
    67b0:	f9 cf       	rjmp	.-14     	; 0x67a4 <round+0xe>
    67b2:	86 95       	lsr	r24
    67b4:	77 95       	ror	r23
    67b6:	67 95       	ror	r22
    67b8:	93 95       	inc	r25
    67ba:	95 39       	cpi	r25, 0x95	; 149
    67bc:	d0 f3       	brcs	.-12     	; 0x67b2 <round+0x1c>
    67be:	b6 2f       	mov	r27, r22
    67c0:	b1 70       	andi	r27, 0x01	; 1
    67c2:	6b 0f       	add	r22, r27
    67c4:	71 1d       	adc	r23, r1
    67c6:	81 1d       	adc	r24, r1
    67c8:	20 f4       	brcc	.+8      	; 0x67d2 <round+0x3c>
    67ca:	87 95       	ror	r24
    67cc:	77 95       	ror	r23
    67ce:	67 95       	ror	r22
    67d0:	93 95       	inc	r25
    67d2:	0c 94 ef 33 	jmp	0x67de	; 0x67de <__fp_mintl>
    67d6:	0c 94 0a 34 	jmp	0x6814	; 0x6814 <__fp_mpack>
    67da:	0c 94 58 33 	jmp	0x66b0	; 0x66b0 <__fp_szero>

000067de <__fp_mintl>:
    67de:	88 23       	and	r24, r24
    67e0:	71 f4       	brne	.+28     	; 0x67fe <__fp_mintl+0x20>
    67e2:	77 23       	and	r23, r23
    67e4:	21 f0       	breq	.+8      	; 0x67ee <__fp_mintl+0x10>
    67e6:	98 50       	subi	r25, 0x08	; 8
    67e8:	87 2b       	or	r24, r23
    67ea:	76 2f       	mov	r23, r22
    67ec:	07 c0       	rjmp	.+14     	; 0x67fc <__fp_mintl+0x1e>
    67ee:	66 23       	and	r22, r22
    67f0:	11 f4       	brne	.+4      	; 0x67f6 <__fp_mintl+0x18>
    67f2:	99 27       	eor	r25, r25
    67f4:	0d c0       	rjmp	.+26     	; 0x6810 <__fp_mintl+0x32>
    67f6:	90 51       	subi	r25, 0x10	; 16
    67f8:	86 2b       	or	r24, r22
    67fa:	70 e0       	ldi	r23, 0x00	; 0
    67fc:	60 e0       	ldi	r22, 0x00	; 0
    67fe:	2a f0       	brmi	.+10     	; 0x680a <__fp_mintl+0x2c>
    6800:	9a 95       	dec	r25
    6802:	66 0f       	add	r22, r22
    6804:	77 1f       	adc	r23, r23
    6806:	88 1f       	adc	r24, r24
    6808:	da f7       	brpl	.-10     	; 0x6800 <__fp_mintl+0x22>
    680a:	88 0f       	add	r24, r24
    680c:	96 95       	lsr	r25
    680e:	87 95       	ror	r24
    6810:	97 f9       	bld	r25, 7
    6812:	08 95       	ret

00006814 <__fp_mpack>:
    6814:	9f 3f       	cpi	r25, 0xFF	; 255
    6816:	31 f0       	breq	.+12     	; 0x6824 <__fp_mpack_finite+0xc>

00006818 <__fp_mpack_finite>:
    6818:	91 50       	subi	r25, 0x01	; 1
    681a:	20 f4       	brcc	.+8      	; 0x6824 <__fp_mpack_finite+0xc>
    681c:	87 95       	ror	r24
    681e:	77 95       	ror	r23
    6820:	67 95       	ror	r22
    6822:	b7 95       	ror	r27
    6824:	88 0f       	add	r24, r24
    6826:	91 1d       	adc	r25, r1
    6828:	96 95       	lsr	r25
    682a:	87 95       	ror	r24
    682c:	97 f9       	bld	r25, 7
    682e:	08 95       	ret

00006830 <__mulsi3>:
    6830:	db 01       	movw	r26, r22
    6832:	8f 93       	push	r24
    6834:	9f 93       	push	r25
    6836:	0e 94 28 34 	call	0x6850	; 0x6850 <__muluhisi3>
    683a:	bf 91       	pop	r27
    683c:	af 91       	pop	r26
    683e:	a2 9f       	mul	r26, r18
    6840:	80 0d       	add	r24, r0
    6842:	91 1d       	adc	r25, r1
    6844:	a3 9f       	mul	r26, r19
    6846:	90 0d       	add	r25, r0
    6848:	b2 9f       	mul	r27, r18
    684a:	90 0d       	add	r25, r0
    684c:	11 24       	eor	r1, r1
    684e:	08 95       	ret

00006850 <__muluhisi3>:
    6850:	0e 94 3c 34 	call	0x6878	; 0x6878 <__umulhisi3>
    6854:	a5 9f       	mul	r26, r21
    6856:	90 0d       	add	r25, r0
    6858:	b4 9f       	mul	r27, r20
    685a:	90 0d       	add	r25, r0
    685c:	a4 9f       	mul	r26, r20
    685e:	80 0d       	add	r24, r0
    6860:	91 1d       	adc	r25, r1
    6862:	11 24       	eor	r1, r1
    6864:	08 95       	ret

00006866 <__adddi3>:
    6866:	2a 0d       	add	r18, r10
    6868:	3b 1d       	adc	r19, r11
    686a:	4c 1d       	adc	r20, r12
    686c:	5d 1d       	adc	r21, r13
    686e:	6e 1d       	adc	r22, r14
    6870:	7f 1d       	adc	r23, r15
    6872:	80 1f       	adc	r24, r16
    6874:	91 1f       	adc	r25, r17
    6876:	08 95       	ret

00006878 <__umulhisi3>:
    6878:	a2 9f       	mul	r26, r18
    687a:	b0 01       	movw	r22, r0
    687c:	b3 9f       	mul	r27, r19
    687e:	c0 01       	movw	r24, r0
    6880:	a3 9f       	mul	r26, r19
    6882:	70 0d       	add	r23, r0
    6884:	81 1d       	adc	r24, r1
    6886:	11 24       	eor	r1, r1
    6888:	91 1d       	adc	r25, r1
    688a:	b2 9f       	mul	r27, r18
    688c:	70 0d       	add	r23, r0
    688e:	81 1d       	adc	r24, r1
    6890:	11 24       	eor	r1, r1
    6892:	91 1d       	adc	r25, r1
    6894:	08 95       	ret

00006896 <malloc>:
    6896:	cf 93       	push	r28
    6898:	df 93       	push	r29
    689a:	82 30       	cpi	r24, 0x02	; 2
    689c:	91 05       	cpc	r25, r1
    689e:	10 f4       	brcc	.+4      	; 0x68a4 <malloc+0xe>
    68a0:	82 e0       	ldi	r24, 0x02	; 2
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	e0 91 94 2e 	lds	r30, 0x2E94	; 0x802e94 <__flp>
    68a8:	f0 91 95 2e 	lds	r31, 0x2E95	; 0x802e95 <__flp+0x1>
    68ac:	20 e0       	ldi	r18, 0x00	; 0
    68ae:	30 e0       	ldi	r19, 0x00	; 0
    68b0:	c0 e0       	ldi	r28, 0x00	; 0
    68b2:	d0 e0       	ldi	r29, 0x00	; 0
    68b4:	30 97       	sbiw	r30, 0x00	; 0
    68b6:	11 f1       	breq	.+68     	; 0x68fc <malloc+0x66>
    68b8:	40 81       	ld	r20, Z
    68ba:	51 81       	ldd	r21, Z+1	; 0x01
    68bc:	48 17       	cp	r20, r24
    68be:	59 07       	cpc	r21, r25
    68c0:	c0 f0       	brcs	.+48     	; 0x68f2 <malloc+0x5c>
    68c2:	48 17       	cp	r20, r24
    68c4:	59 07       	cpc	r21, r25
    68c6:	61 f4       	brne	.+24     	; 0x68e0 <malloc+0x4a>
    68c8:	82 81       	ldd	r24, Z+2	; 0x02
    68ca:	93 81       	ldd	r25, Z+3	; 0x03
    68cc:	20 97       	sbiw	r28, 0x00	; 0
    68ce:	19 f0       	breq	.+6      	; 0x68d6 <malloc+0x40>
    68d0:	8a 83       	std	Y+2, r24	; 0x02
    68d2:	9b 83       	std	Y+3, r25	; 0x03
    68d4:	2b c0       	rjmp	.+86     	; 0x692c <malloc+0x96>
    68d6:	80 93 94 2e 	sts	0x2E94, r24	; 0x802e94 <__flp>
    68da:	90 93 95 2e 	sts	0x2E95, r25	; 0x802e95 <__flp+0x1>
    68de:	26 c0       	rjmp	.+76     	; 0x692c <malloc+0x96>
    68e0:	21 15       	cp	r18, r1
    68e2:	31 05       	cpc	r19, r1
    68e4:	19 f0       	breq	.+6      	; 0x68ec <malloc+0x56>
    68e6:	42 17       	cp	r20, r18
    68e8:	53 07       	cpc	r21, r19
    68ea:	18 f4       	brcc	.+6      	; 0x68f2 <malloc+0x5c>
    68ec:	9a 01       	movw	r18, r20
    68ee:	be 01       	movw	r22, r28
    68f0:	df 01       	movw	r26, r30
    68f2:	ef 01       	movw	r28, r30
    68f4:	02 80       	ldd	r0, Z+2	; 0x02
    68f6:	f3 81       	ldd	r31, Z+3	; 0x03
    68f8:	e0 2d       	mov	r30, r0
    68fa:	dc cf       	rjmp	.-72     	; 0x68b4 <malloc+0x1e>
    68fc:	21 15       	cp	r18, r1
    68fe:	31 05       	cpc	r19, r1
    6900:	09 f1       	breq	.+66     	; 0x6944 <malloc+0xae>
    6902:	28 1b       	sub	r18, r24
    6904:	39 0b       	sbc	r19, r25
    6906:	24 30       	cpi	r18, 0x04	; 4
    6908:	31 05       	cpc	r19, r1
    690a:	90 f4       	brcc	.+36     	; 0x6930 <malloc+0x9a>
    690c:	12 96       	adiw	r26, 0x02	; 2
    690e:	8d 91       	ld	r24, X+
    6910:	9c 91       	ld	r25, X
    6912:	13 97       	sbiw	r26, 0x03	; 3
    6914:	61 15       	cp	r22, r1
    6916:	71 05       	cpc	r23, r1
    6918:	21 f0       	breq	.+8      	; 0x6922 <malloc+0x8c>
    691a:	fb 01       	movw	r30, r22
    691c:	82 83       	std	Z+2, r24	; 0x02
    691e:	93 83       	std	Z+3, r25	; 0x03
    6920:	04 c0       	rjmp	.+8      	; 0x692a <malloc+0x94>
    6922:	80 93 94 2e 	sts	0x2E94, r24	; 0x802e94 <__flp>
    6926:	90 93 95 2e 	sts	0x2E95, r25	; 0x802e95 <__flp+0x1>
    692a:	fd 01       	movw	r30, r26
    692c:	32 96       	adiw	r30, 0x02	; 2
    692e:	44 c0       	rjmp	.+136    	; 0x69b8 <malloc+0x122>
    6930:	fd 01       	movw	r30, r26
    6932:	e2 0f       	add	r30, r18
    6934:	f3 1f       	adc	r31, r19
    6936:	81 93       	st	Z+, r24
    6938:	91 93       	st	Z+, r25
    693a:	22 50       	subi	r18, 0x02	; 2
    693c:	31 09       	sbc	r19, r1
    693e:	2d 93       	st	X+, r18
    6940:	3c 93       	st	X, r19
    6942:	3a c0       	rjmp	.+116    	; 0x69b8 <malloc+0x122>
    6944:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    6948:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    694c:	23 2b       	or	r18, r19
    694e:	41 f4       	brne	.+16     	; 0x6960 <malloc+0xca>
    6950:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    6954:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6958:	20 93 92 2e 	sts	0x2E92, r18	; 0x802e92 <__brkval>
    695c:	30 93 93 2e 	sts	0x2E93, r19	; 0x802e93 <__brkval+0x1>
    6960:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    6964:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6968:	21 15       	cp	r18, r1
    696a:	31 05       	cpc	r19, r1
    696c:	41 f4       	brne	.+16     	; 0x697e <malloc+0xe8>
    696e:	2d b7       	in	r18, 0x3d	; 61
    6970:	3e b7       	in	r19, 0x3e	; 62
    6972:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6976:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    697a:	24 1b       	sub	r18, r20
    697c:	35 0b       	sbc	r19, r21
    697e:	e0 91 92 2e 	lds	r30, 0x2E92	; 0x802e92 <__brkval>
    6982:	f0 91 93 2e 	lds	r31, 0x2E93	; 0x802e93 <__brkval+0x1>
    6986:	e2 17       	cp	r30, r18
    6988:	f3 07       	cpc	r31, r19
    698a:	a0 f4       	brcc	.+40     	; 0x69b4 <malloc+0x11e>
    698c:	2e 1b       	sub	r18, r30
    698e:	3f 0b       	sbc	r19, r31
    6990:	28 17       	cp	r18, r24
    6992:	39 07       	cpc	r19, r25
    6994:	78 f0       	brcs	.+30     	; 0x69b4 <malloc+0x11e>
    6996:	ac 01       	movw	r20, r24
    6998:	4e 5f       	subi	r20, 0xFE	; 254
    699a:	5f 4f       	sbci	r21, 0xFF	; 255
    699c:	24 17       	cp	r18, r20
    699e:	35 07       	cpc	r19, r21
    69a0:	48 f0       	brcs	.+18     	; 0x69b4 <malloc+0x11e>
    69a2:	4e 0f       	add	r20, r30
    69a4:	5f 1f       	adc	r21, r31
    69a6:	40 93 92 2e 	sts	0x2E92, r20	; 0x802e92 <__brkval>
    69aa:	50 93 93 2e 	sts	0x2E93, r21	; 0x802e93 <__brkval+0x1>
    69ae:	81 93       	st	Z+, r24
    69b0:	91 93       	st	Z+, r25
    69b2:	02 c0       	rjmp	.+4      	; 0x69b8 <malloc+0x122>
    69b4:	e0 e0       	ldi	r30, 0x00	; 0
    69b6:	f0 e0       	ldi	r31, 0x00	; 0
    69b8:	cf 01       	movw	r24, r30
    69ba:	df 91       	pop	r29
    69bc:	cf 91       	pop	r28
    69be:	08 95       	ret

000069c0 <free>:
    69c0:	0f 93       	push	r16
    69c2:	1f 93       	push	r17
    69c4:	cf 93       	push	r28
    69c6:	df 93       	push	r29
    69c8:	00 97       	sbiw	r24, 0x00	; 0
    69ca:	09 f4       	brne	.+2      	; 0x69ce <free+0xe>
    69cc:	8c c0       	rjmp	.+280    	; 0x6ae6 <free+0x126>
    69ce:	fc 01       	movw	r30, r24
    69d0:	32 97       	sbiw	r30, 0x02	; 2
    69d2:	12 82       	std	Z+2, r1	; 0x02
    69d4:	13 82       	std	Z+3, r1	; 0x03
    69d6:	00 91 94 2e 	lds	r16, 0x2E94	; 0x802e94 <__flp>
    69da:	10 91 95 2e 	lds	r17, 0x2E95	; 0x802e95 <__flp+0x1>
    69de:	01 15       	cp	r16, r1
    69e0:	11 05       	cpc	r17, r1
    69e2:	81 f4       	brne	.+32     	; 0x6a04 <free+0x44>
    69e4:	20 81       	ld	r18, Z
    69e6:	31 81       	ldd	r19, Z+1	; 0x01
    69e8:	82 0f       	add	r24, r18
    69ea:	93 1f       	adc	r25, r19
    69ec:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    69f0:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    69f4:	28 17       	cp	r18, r24
    69f6:	39 07       	cpc	r19, r25
    69f8:	79 f5       	brne	.+94     	; 0x6a58 <free+0x98>
    69fa:	e0 93 92 2e 	sts	0x2E92, r30	; 0x802e92 <__brkval>
    69fe:	f0 93 93 2e 	sts	0x2E93, r31	; 0x802e93 <__brkval+0x1>
    6a02:	71 c0       	rjmp	.+226    	; 0x6ae6 <free+0x126>
    6a04:	d8 01       	movw	r26, r16
    6a06:	40 e0       	ldi	r20, 0x00	; 0
    6a08:	50 e0       	ldi	r21, 0x00	; 0
    6a0a:	ae 17       	cp	r26, r30
    6a0c:	bf 07       	cpc	r27, r31
    6a0e:	50 f4       	brcc	.+20     	; 0x6a24 <free+0x64>
    6a10:	12 96       	adiw	r26, 0x02	; 2
    6a12:	2d 91       	ld	r18, X+
    6a14:	3c 91       	ld	r19, X
    6a16:	13 97       	sbiw	r26, 0x03	; 3
    6a18:	ad 01       	movw	r20, r26
    6a1a:	21 15       	cp	r18, r1
    6a1c:	31 05       	cpc	r19, r1
    6a1e:	09 f1       	breq	.+66     	; 0x6a62 <free+0xa2>
    6a20:	d9 01       	movw	r26, r18
    6a22:	f3 cf       	rjmp	.-26     	; 0x6a0a <free+0x4a>
    6a24:	9d 01       	movw	r18, r26
    6a26:	da 01       	movw	r26, r20
    6a28:	22 83       	std	Z+2, r18	; 0x02
    6a2a:	33 83       	std	Z+3, r19	; 0x03
    6a2c:	60 81       	ld	r22, Z
    6a2e:	71 81       	ldd	r23, Z+1	; 0x01
    6a30:	86 0f       	add	r24, r22
    6a32:	97 1f       	adc	r25, r23
    6a34:	82 17       	cp	r24, r18
    6a36:	93 07       	cpc	r25, r19
    6a38:	69 f4       	brne	.+26     	; 0x6a54 <free+0x94>
    6a3a:	ec 01       	movw	r28, r24
    6a3c:	28 81       	ld	r18, Y
    6a3e:	39 81       	ldd	r19, Y+1	; 0x01
    6a40:	26 0f       	add	r18, r22
    6a42:	37 1f       	adc	r19, r23
    6a44:	2e 5f       	subi	r18, 0xFE	; 254
    6a46:	3f 4f       	sbci	r19, 0xFF	; 255
    6a48:	20 83       	st	Z, r18
    6a4a:	31 83       	std	Z+1, r19	; 0x01
    6a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    6a50:	82 83       	std	Z+2, r24	; 0x02
    6a52:	93 83       	std	Z+3, r25	; 0x03
    6a54:	45 2b       	or	r20, r21
    6a56:	29 f4       	brne	.+10     	; 0x6a62 <free+0xa2>
    6a58:	e0 93 94 2e 	sts	0x2E94, r30	; 0x802e94 <__flp>
    6a5c:	f0 93 95 2e 	sts	0x2E95, r31	; 0x802e95 <__flp+0x1>
    6a60:	42 c0       	rjmp	.+132    	; 0x6ae6 <free+0x126>
    6a62:	12 96       	adiw	r26, 0x02	; 2
    6a64:	ed 93       	st	X+, r30
    6a66:	fc 93       	st	X, r31
    6a68:	13 97       	sbiw	r26, 0x03	; 3
    6a6a:	ed 01       	movw	r28, r26
    6a6c:	49 91       	ld	r20, Y+
    6a6e:	59 91       	ld	r21, Y+
    6a70:	9e 01       	movw	r18, r28
    6a72:	24 0f       	add	r18, r20
    6a74:	35 1f       	adc	r19, r21
    6a76:	e2 17       	cp	r30, r18
    6a78:	f3 07       	cpc	r31, r19
    6a7a:	71 f4       	brne	.+28     	; 0x6a98 <free+0xd8>
    6a7c:	80 81       	ld	r24, Z
    6a7e:	91 81       	ldd	r25, Z+1	; 0x01
    6a80:	84 0f       	add	r24, r20
    6a82:	95 1f       	adc	r25, r21
    6a84:	02 96       	adiw	r24, 0x02	; 2
    6a86:	8d 93       	st	X+, r24
    6a88:	9c 93       	st	X, r25
    6a8a:	11 97       	sbiw	r26, 0x01	; 1
    6a8c:	82 81       	ldd	r24, Z+2	; 0x02
    6a8e:	93 81       	ldd	r25, Z+3	; 0x03
    6a90:	12 96       	adiw	r26, 0x02	; 2
    6a92:	8d 93       	st	X+, r24
    6a94:	9c 93       	st	X, r25
    6a96:	13 97       	sbiw	r26, 0x03	; 3
    6a98:	e0 e0       	ldi	r30, 0x00	; 0
    6a9a:	f0 e0       	ldi	r31, 0x00	; 0
    6a9c:	d8 01       	movw	r26, r16
    6a9e:	12 96       	adiw	r26, 0x02	; 2
    6aa0:	8d 91       	ld	r24, X+
    6aa2:	9c 91       	ld	r25, X
    6aa4:	13 97       	sbiw	r26, 0x03	; 3
    6aa6:	00 97       	sbiw	r24, 0x00	; 0
    6aa8:	19 f0       	breq	.+6      	; 0x6ab0 <free+0xf0>
    6aaa:	f8 01       	movw	r30, r16
    6aac:	8c 01       	movw	r16, r24
    6aae:	f6 cf       	rjmp	.-20     	; 0x6a9c <free+0xdc>
    6ab0:	8d 91       	ld	r24, X+
    6ab2:	9c 91       	ld	r25, X
    6ab4:	98 01       	movw	r18, r16
    6ab6:	2e 5f       	subi	r18, 0xFE	; 254
    6ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    6aba:	82 0f       	add	r24, r18
    6abc:	93 1f       	adc	r25, r19
    6abe:	20 91 92 2e 	lds	r18, 0x2E92	; 0x802e92 <__brkval>
    6ac2:	30 91 93 2e 	lds	r19, 0x2E93	; 0x802e93 <__brkval+0x1>
    6ac6:	28 17       	cp	r18, r24
    6ac8:	39 07       	cpc	r19, r25
    6aca:	69 f4       	brne	.+26     	; 0x6ae6 <free+0x126>
    6acc:	30 97       	sbiw	r30, 0x00	; 0
    6ace:	29 f4       	brne	.+10     	; 0x6ada <free+0x11a>
    6ad0:	10 92 94 2e 	sts	0x2E94, r1	; 0x802e94 <__flp>
    6ad4:	10 92 95 2e 	sts	0x2E95, r1	; 0x802e95 <__flp+0x1>
    6ad8:	02 c0       	rjmp	.+4      	; 0x6ade <free+0x11e>
    6ada:	12 82       	std	Z+2, r1	; 0x02
    6adc:	13 82       	std	Z+3, r1	; 0x03
    6ade:	00 93 92 2e 	sts	0x2E92, r16	; 0x802e92 <__brkval>
    6ae2:	10 93 93 2e 	sts	0x2E93, r17	; 0x802e93 <__brkval+0x1>
    6ae6:	df 91       	pop	r29
    6ae8:	cf 91       	pop	r28
    6aea:	1f 91       	pop	r17
    6aec:	0f 91       	pop	r16
    6aee:	08 95       	ret

00006af0 <realloc>:
    6af0:	6f 92       	push	r6
    6af2:	7f 92       	push	r7
    6af4:	8f 92       	push	r8
    6af6:	9f 92       	push	r9
    6af8:	af 92       	push	r10
    6afa:	bf 92       	push	r11
    6afc:	cf 92       	push	r12
    6afe:	df 92       	push	r13
    6b00:	ef 92       	push	r14
    6b02:	ff 92       	push	r15
    6b04:	0f 93       	push	r16
    6b06:	1f 93       	push	r17
    6b08:	cf 93       	push	r28
    6b0a:	df 93       	push	r29
    6b0c:	ec 01       	movw	r28, r24
    6b0e:	00 97       	sbiw	r24, 0x00	; 0
    6b10:	89 f4       	brne	.+34     	; 0x6b34 <realloc+0x44>
    6b12:	cb 01       	movw	r24, r22
    6b14:	df 91       	pop	r29
    6b16:	cf 91       	pop	r28
    6b18:	1f 91       	pop	r17
    6b1a:	0f 91       	pop	r16
    6b1c:	ff 90       	pop	r15
    6b1e:	ef 90       	pop	r14
    6b20:	df 90       	pop	r13
    6b22:	cf 90       	pop	r12
    6b24:	bf 90       	pop	r11
    6b26:	af 90       	pop	r10
    6b28:	9f 90       	pop	r9
    6b2a:	8f 90       	pop	r8
    6b2c:	7f 90       	pop	r7
    6b2e:	6f 90       	pop	r6
    6b30:	0c 94 4b 34 	jmp	0x6896	; 0x6896 <malloc>
    6b34:	fc 01       	movw	r30, r24
    6b36:	e6 0f       	add	r30, r22
    6b38:	f7 1f       	adc	r31, r23
    6b3a:	9c 01       	movw	r18, r24
    6b3c:	22 50       	subi	r18, 0x02	; 2
    6b3e:	31 09       	sbc	r19, r1
    6b40:	e2 17       	cp	r30, r18
    6b42:	f3 07       	cpc	r31, r19
    6b44:	08 f4       	brcc	.+2      	; 0x6b48 <realloc+0x58>
    6b46:	ac c0       	rjmp	.+344    	; 0x6ca0 <realloc+0x1b0>
    6b48:	d9 01       	movw	r26, r18
    6b4a:	0d 91       	ld	r16, X+
    6b4c:	1c 91       	ld	r17, X
    6b4e:	11 97       	sbiw	r26, 0x01	; 1
    6b50:	06 17       	cp	r16, r22
    6b52:	17 07       	cpc	r17, r23
    6b54:	b0 f0       	brcs	.+44     	; 0x6b82 <realloc+0x92>
    6b56:	05 30       	cpi	r16, 0x05	; 5
    6b58:	11 05       	cpc	r17, r1
    6b5a:	08 f4       	brcc	.+2      	; 0x6b5e <realloc+0x6e>
    6b5c:	9f c0       	rjmp	.+318    	; 0x6c9c <realloc+0x1ac>
    6b5e:	c8 01       	movw	r24, r16
    6b60:	04 97       	sbiw	r24, 0x04	; 4
    6b62:	86 17       	cp	r24, r22
    6b64:	97 07       	cpc	r25, r23
    6b66:	08 f4       	brcc	.+2      	; 0x6b6a <realloc+0x7a>
    6b68:	99 c0       	rjmp	.+306    	; 0x6c9c <realloc+0x1ac>
    6b6a:	02 50       	subi	r16, 0x02	; 2
    6b6c:	11 09       	sbc	r17, r1
    6b6e:	06 1b       	sub	r16, r22
    6b70:	17 0b       	sbc	r17, r23
    6b72:	01 93       	st	Z+, r16
    6b74:	11 93       	st	Z+, r17
    6b76:	6d 93       	st	X+, r22
    6b78:	7c 93       	st	X, r23
    6b7a:	cf 01       	movw	r24, r30
    6b7c:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <free>
    6b80:	8d c0       	rjmp	.+282    	; 0x6c9c <realloc+0x1ac>
    6b82:	5b 01       	movw	r10, r22
    6b84:	a0 1a       	sub	r10, r16
    6b86:	b1 0a       	sbc	r11, r17
    6b88:	4c 01       	movw	r8, r24
    6b8a:	80 0e       	add	r8, r16
    6b8c:	91 1e       	adc	r9, r17
    6b8e:	a0 91 94 2e 	lds	r26, 0x2E94	; 0x802e94 <__flp>
    6b92:	b0 91 95 2e 	lds	r27, 0x2E95	; 0x802e95 <__flp+0x1>
    6b96:	40 e0       	ldi	r20, 0x00	; 0
    6b98:	50 e0       	ldi	r21, 0x00	; 0
    6b9a:	e1 2c       	mov	r14, r1
    6b9c:	f1 2c       	mov	r15, r1
    6b9e:	10 97       	sbiw	r26, 0x00	; 0
    6ba0:	09 f4       	brne	.+2      	; 0x6ba4 <realloc+0xb4>
    6ba2:	4a c0       	rjmp	.+148    	; 0x6c38 <realloc+0x148>
    6ba4:	a8 15       	cp	r26, r8
    6ba6:	b9 05       	cpc	r27, r9
    6ba8:	d1 f5       	brne	.+116    	; 0x6c1e <realloc+0x12e>
    6baa:	6d 90       	ld	r6, X+
    6bac:	7c 90       	ld	r7, X
    6bae:	11 97       	sbiw	r26, 0x01	; 1
    6bb0:	63 01       	movw	r12, r6
    6bb2:	82 e0       	ldi	r24, 0x02	; 2
    6bb4:	c8 0e       	add	r12, r24
    6bb6:	d1 1c       	adc	r13, r1
    6bb8:	ca 14       	cp	r12, r10
    6bba:	db 04       	cpc	r13, r11
    6bbc:	80 f1       	brcs	.+96     	; 0x6c1e <realloc+0x12e>
    6bbe:	a3 01       	movw	r20, r6
    6bc0:	4a 19       	sub	r20, r10
    6bc2:	5b 09       	sbc	r21, r11
    6bc4:	6a 01       	movw	r12, r20
    6bc6:	82 e0       	ldi	r24, 0x02	; 2
    6bc8:	c8 0e       	add	r12, r24
    6bca:	d1 1c       	adc	r13, r1
    6bcc:	12 96       	adiw	r26, 0x02	; 2
    6bce:	bc 90       	ld	r11, X
    6bd0:	12 97       	sbiw	r26, 0x02	; 2
    6bd2:	13 96       	adiw	r26, 0x03	; 3
    6bd4:	ac 91       	ld	r26, X
    6bd6:	b5 e0       	ldi	r27, 0x05	; 5
    6bd8:	cb 16       	cp	r12, r27
    6bda:	d1 04       	cpc	r13, r1
    6bdc:	40 f0       	brcs	.+16     	; 0x6bee <realloc+0xfe>
    6bde:	b2 82       	std	Z+2, r11	; 0x02
    6be0:	a3 83       	std	Z+3, r26	; 0x03
    6be2:	40 83       	st	Z, r20
    6be4:	51 83       	std	Z+1, r21	; 0x01
    6be6:	d9 01       	movw	r26, r18
    6be8:	6d 93       	st	X+, r22
    6bea:	7c 93       	st	X, r23
    6bec:	0a c0       	rjmp	.+20     	; 0x6c02 <realloc+0x112>
    6bee:	0e 5f       	subi	r16, 0xFE	; 254
    6bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    6bf2:	c3 01       	movw	r24, r6
    6bf4:	80 0f       	add	r24, r16
    6bf6:	91 1f       	adc	r25, r17
    6bf8:	f9 01       	movw	r30, r18
    6bfa:	80 83       	st	Z, r24
    6bfc:	91 83       	std	Z+1, r25	; 0x01
    6bfe:	eb 2d       	mov	r30, r11
    6c00:	fa 2f       	mov	r31, r26
    6c02:	e1 14       	cp	r14, r1
    6c04:	f1 04       	cpc	r15, r1
    6c06:	31 f0       	breq	.+12     	; 0x6c14 <realloc+0x124>
    6c08:	d7 01       	movw	r26, r14
    6c0a:	12 96       	adiw	r26, 0x02	; 2
    6c0c:	ed 93       	st	X+, r30
    6c0e:	fc 93       	st	X, r31
    6c10:	13 97       	sbiw	r26, 0x03	; 3
    6c12:	44 c0       	rjmp	.+136    	; 0x6c9c <realloc+0x1ac>
    6c14:	e0 93 94 2e 	sts	0x2E94, r30	; 0x802e94 <__flp>
    6c18:	f0 93 95 2e 	sts	0x2E95, r31	; 0x802e95 <__flp+0x1>
    6c1c:	3f c0       	rjmp	.+126    	; 0x6c9c <realloc+0x1ac>
    6c1e:	8d 91       	ld	r24, X+
    6c20:	9c 91       	ld	r25, X
    6c22:	11 97       	sbiw	r26, 0x01	; 1
    6c24:	48 17       	cp	r20, r24
    6c26:	59 07       	cpc	r21, r25
    6c28:	08 f4       	brcc	.+2      	; 0x6c2c <realloc+0x13c>
    6c2a:	ac 01       	movw	r20, r24
    6c2c:	7d 01       	movw	r14, r26
    6c2e:	12 96       	adiw	r26, 0x02	; 2
    6c30:	0d 90       	ld	r0, X+
    6c32:	bc 91       	ld	r27, X
    6c34:	a0 2d       	mov	r26, r0
    6c36:	b3 cf       	rjmp	.-154    	; 0x6b9e <realloc+0xae>
    6c38:	80 91 92 2e 	lds	r24, 0x2E92	; 0x802e92 <__brkval>
    6c3c:	90 91 93 2e 	lds	r25, 0x2E93	; 0x802e93 <__brkval+0x1>
    6c40:	88 15       	cp	r24, r8
    6c42:	99 05       	cpc	r25, r9
    6c44:	e1 f4       	brne	.+56     	; 0x6c7e <realloc+0x18e>
    6c46:	46 17       	cp	r20, r22
    6c48:	57 07       	cpc	r21, r23
    6c4a:	c8 f4       	brcc	.+50     	; 0x6c7e <realloc+0x18e>
    6c4c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    6c50:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    6c54:	00 97       	sbiw	r24, 0x00	; 0
    6c56:	41 f4       	brne	.+16     	; 0x6c68 <realloc+0x178>
    6c58:	8d b7       	in	r24, 0x3d	; 61
    6c5a:	9e b7       	in	r25, 0x3e	; 62
    6c5c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6c60:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6c64:	84 1b       	sub	r24, r20
    6c66:	95 0b       	sbc	r25, r21
    6c68:	e8 17       	cp	r30, r24
    6c6a:	f9 07       	cpc	r31, r25
    6c6c:	c8 f4       	brcc	.+50     	; 0x6ca0 <realloc+0x1b0>
    6c6e:	e0 93 92 2e 	sts	0x2E92, r30	; 0x802e92 <__brkval>
    6c72:	f0 93 93 2e 	sts	0x2E93, r31	; 0x802e93 <__brkval+0x1>
    6c76:	f9 01       	movw	r30, r18
    6c78:	60 83       	st	Z, r22
    6c7a:	71 83       	std	Z+1, r23	; 0x01
    6c7c:	0f c0       	rjmp	.+30     	; 0x6c9c <realloc+0x1ac>
    6c7e:	cb 01       	movw	r24, r22
    6c80:	0e 94 4b 34 	call	0x6896	; 0x6896 <malloc>
    6c84:	7c 01       	movw	r14, r24
    6c86:	00 97       	sbiw	r24, 0x00	; 0
    6c88:	59 f0       	breq	.+22     	; 0x6ca0 <realloc+0x1b0>
    6c8a:	a8 01       	movw	r20, r16
    6c8c:	be 01       	movw	r22, r28
    6c8e:	0e 94 95 37 	call	0x6f2a	; 0x6f2a <memcpy>
    6c92:	ce 01       	movw	r24, r28
    6c94:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <free>
    6c98:	c7 01       	movw	r24, r14
    6c9a:	04 c0       	rjmp	.+8      	; 0x6ca4 <realloc+0x1b4>
    6c9c:	ce 01       	movw	r24, r28
    6c9e:	02 c0       	rjmp	.+4      	; 0x6ca4 <realloc+0x1b4>
    6ca0:	80 e0       	ldi	r24, 0x00	; 0
    6ca2:	90 e0       	ldi	r25, 0x00	; 0
    6ca4:	df 91       	pop	r29
    6ca6:	cf 91       	pop	r28
    6ca8:	1f 91       	pop	r17
    6caa:	0f 91       	pop	r16
    6cac:	ff 90       	pop	r15
    6cae:	ef 90       	pop	r14
    6cb0:	df 90       	pop	r13
    6cb2:	cf 90       	pop	r12
    6cb4:	bf 90       	pop	r11
    6cb6:	af 90       	pop	r10
    6cb8:	9f 90       	pop	r9
    6cba:	8f 90       	pop	r8
    6cbc:	7f 90       	pop	r7
    6cbe:	6f 90       	pop	r6
    6cc0:	08 95       	ret

00006cc2 <strtol>:
    6cc2:	2f 92       	push	r2
    6cc4:	3f 92       	push	r3
    6cc6:	4f 92       	push	r4
    6cc8:	5f 92       	push	r5
    6cca:	6f 92       	push	r6
    6ccc:	7f 92       	push	r7
    6cce:	8f 92       	push	r8
    6cd0:	9f 92       	push	r9
    6cd2:	af 92       	push	r10
    6cd4:	bf 92       	push	r11
    6cd6:	cf 92       	push	r12
    6cd8:	df 92       	push	r13
    6cda:	ef 92       	push	r14
    6cdc:	ff 92       	push	r15
    6cde:	0f 93       	push	r16
    6ce0:	1f 93       	push	r17
    6ce2:	cf 93       	push	r28
    6ce4:	df 93       	push	r29
    6ce6:	5c 01       	movw	r10, r24
    6ce8:	6b 01       	movw	r12, r22
    6cea:	7a 01       	movw	r14, r20
    6cec:	61 15       	cp	r22, r1
    6cee:	71 05       	cpc	r23, r1
    6cf0:	19 f0       	breq	.+6      	; 0x6cf8 <strtol+0x36>
    6cf2:	fb 01       	movw	r30, r22
    6cf4:	80 83       	st	Z, r24
    6cf6:	91 83       	std	Z+1, r25	; 0x01
    6cf8:	e1 14       	cp	r14, r1
    6cfa:	f1 04       	cpc	r15, r1
    6cfc:	29 f0       	breq	.+10     	; 0x6d08 <strtol+0x46>
    6cfe:	c7 01       	movw	r24, r14
    6d00:	02 97       	sbiw	r24, 0x02	; 2
    6d02:	83 97       	sbiw	r24, 0x23	; 35
    6d04:	08 f0       	brcs	.+2      	; 0x6d08 <strtol+0x46>
    6d06:	f1 c0       	rjmp	.+482    	; 0x6eea <strtol+0x228>
    6d08:	e5 01       	movw	r28, r10
    6d0a:	21 96       	adiw	r28, 0x01	; 1
    6d0c:	f5 01       	movw	r30, r10
    6d0e:	10 81       	ld	r17, Z
    6d10:	81 2f       	mov	r24, r17
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <isspace>
    6d18:	89 2b       	or	r24, r25
    6d1a:	11 f0       	breq	.+4      	; 0x6d20 <strtol+0x5e>
    6d1c:	5e 01       	movw	r10, r28
    6d1e:	f4 cf       	rjmp	.-24     	; 0x6d08 <strtol+0x46>
    6d20:	1d 32       	cpi	r17, 0x2D	; 45
    6d22:	29 f4       	brne	.+10     	; 0x6d2e <strtol+0x6c>
    6d24:	21 96       	adiw	r28, 0x01	; 1
    6d26:	f5 01       	movw	r30, r10
    6d28:	11 81       	ldd	r17, Z+1	; 0x01
    6d2a:	01 e0       	ldi	r16, 0x01	; 1
    6d2c:	07 c0       	rjmp	.+14     	; 0x6d3c <strtol+0x7a>
    6d2e:	1b 32       	cpi	r17, 0x2B	; 43
    6d30:	21 f4       	brne	.+8      	; 0x6d3a <strtol+0x78>
    6d32:	e5 01       	movw	r28, r10
    6d34:	22 96       	adiw	r28, 0x02	; 2
    6d36:	f5 01       	movw	r30, r10
    6d38:	11 81       	ldd	r17, Z+1	; 0x01
    6d3a:	00 e0       	ldi	r16, 0x00	; 0
    6d3c:	e1 14       	cp	r14, r1
    6d3e:	f1 04       	cpc	r15, r1
    6d40:	59 f1       	breq	.+86     	; 0x6d98 <strtol+0xd6>
    6d42:	f0 e1       	ldi	r31, 0x10	; 16
    6d44:	ef 16       	cp	r14, r31
    6d46:	f1 04       	cpc	r15, r1
    6d48:	61 f4       	brne	.+24     	; 0x6d62 <strtol+0xa0>
    6d4a:	10 33       	cpi	r17, 0x30	; 48
    6d4c:	e1 f4       	brne	.+56     	; 0x6d86 <strtol+0xc4>
    6d4e:	88 81       	ld	r24, Y
    6d50:	8f 7d       	andi	r24, 0xDF	; 223
    6d52:	88 35       	cpi	r24, 0x58	; 88
    6d54:	69 f5       	brne	.+90     	; 0x6db0 <strtol+0xee>
    6d56:	19 81       	ldd	r17, Y+1	; 0x01
    6d58:	22 96       	adiw	r28, 0x02	; 2
    6d5a:	02 60       	ori	r16, 0x02	; 2
    6d5c:	70 e1       	ldi	r23, 0x10	; 16
    6d5e:	e7 2e       	mov	r14, r23
    6d60:	f1 2c       	mov	r15, r1
    6d62:	88 e0       	ldi	r24, 0x08	; 8
    6d64:	e8 16       	cp	r14, r24
    6d66:	f1 04       	cpc	r15, r1
    6d68:	39 f1       	breq	.+78     	; 0x6db8 <strtol+0xf6>
    6d6a:	2c f4       	brge	.+10     	; 0x6d76 <strtol+0xb4>
    6d6c:	f2 e0       	ldi	r31, 0x02	; 2
    6d6e:	ef 16       	cp	r14, r31
    6d70:	f1 04       	cpc	r15, r1
    6d72:	c9 f1       	breq	.+114    	; 0x6de6 <strtol+0x124>
    6d74:	2a c0       	rjmp	.+84     	; 0x6dca <strtol+0x108>
    6d76:	8a e0       	ldi	r24, 0x0A	; 10
    6d78:	e8 16       	cp	r14, r24
    6d7a:	f1 04       	cpc	r15, r1
    6d7c:	79 f0       	breq	.+30     	; 0x6d9c <strtol+0xda>
    6d7e:	e0 e1       	ldi	r30, 0x10	; 16
    6d80:	ee 16       	cp	r14, r30
    6d82:	f1 04       	cpc	r15, r1
    6d84:	11 f5       	brne	.+68     	; 0x6dca <strtol+0x108>
    6d86:	50 e1       	ldi	r21, 0x10	; 16
    6d88:	e5 2e       	mov	r14, r21
    6d8a:	f1 2c       	mov	r15, r1
    6d8c:	81 2c       	mov	r8, r1
    6d8e:	91 2c       	mov	r9, r1
    6d90:	a1 2c       	mov	r10, r1
    6d92:	68 e0       	ldi	r22, 0x08	; 8
    6d94:	b6 2e       	mov	r11, r22
    6d96:	2c c0       	rjmp	.+88     	; 0x6df0 <strtol+0x12e>
    6d98:	10 33       	cpi	r17, 0x30	; 48
    6d9a:	c9 f2       	breq	.-78     	; 0x6d4e <strtol+0x8c>
    6d9c:	3a e0       	ldi	r19, 0x0A	; 10
    6d9e:	e3 2e       	mov	r14, r19
    6da0:	f1 2c       	mov	r15, r1
    6da2:	4c ec       	ldi	r20, 0xCC	; 204
    6da4:	84 2e       	mov	r8, r20
    6da6:	98 2c       	mov	r9, r8
    6da8:	a8 2c       	mov	r10, r8
    6daa:	4c e0       	ldi	r20, 0x0C	; 12
    6dac:	b4 2e       	mov	r11, r20
    6dae:	20 c0       	rjmp	.+64     	; 0x6df0 <strtol+0x12e>
    6db0:	10 e3       	ldi	r17, 0x30	; 48
    6db2:	e1 14       	cp	r14, r1
    6db4:	f1 04       	cpc	r15, r1
    6db6:	a9 f6       	brne	.-86     	; 0x6d62 <strtol+0xa0>
    6db8:	98 e0       	ldi	r25, 0x08	; 8
    6dba:	e9 2e       	mov	r14, r25
    6dbc:	f1 2c       	mov	r15, r1
    6dbe:	81 2c       	mov	r8, r1
    6dc0:	91 2c       	mov	r9, r1
    6dc2:	a1 2c       	mov	r10, r1
    6dc4:	20 e1       	ldi	r18, 0x10	; 16
    6dc6:	b2 2e       	mov	r11, r18
    6dc8:	13 c0       	rjmp	.+38     	; 0x6df0 <strtol+0x12e>
    6dca:	60 e0       	ldi	r22, 0x00	; 0
    6dcc:	70 e0       	ldi	r23, 0x00	; 0
    6dce:	80 e0       	ldi	r24, 0x00	; 0
    6dd0:	90 e8       	ldi	r25, 0x80	; 128
    6dd2:	97 01       	movw	r18, r14
    6dd4:	0f 2c       	mov	r0, r15
    6dd6:	00 0c       	add	r0, r0
    6dd8:	44 0b       	sbc	r20, r20
    6dda:	55 0b       	sbc	r21, r21
    6ddc:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <__udivmodsi4>
    6de0:	49 01       	movw	r8, r18
    6de2:	5a 01       	movw	r10, r20
    6de4:	05 c0       	rjmp	.+10     	; 0x6df0 <strtol+0x12e>
    6de6:	81 2c       	mov	r8, r1
    6de8:	91 2c       	mov	r9, r1
    6dea:	a1 2c       	mov	r10, r1
    6dec:	80 e4       	ldi	r24, 0x40	; 64
    6dee:	b8 2e       	mov	r11, r24
    6df0:	60 e0       	ldi	r22, 0x00	; 0
    6df2:	20 e0       	ldi	r18, 0x00	; 0
    6df4:	30 e0       	ldi	r19, 0x00	; 0
    6df6:	a9 01       	movw	r20, r18
    6df8:	27 01       	movw	r4, r14
    6dfa:	0f 2c       	mov	r0, r15
    6dfc:	00 0c       	add	r0, r0
    6dfe:	66 08       	sbc	r6, r6
    6e00:	77 08       	sbc	r7, r7
    6e02:	1e 01       	movw	r2, r28
    6e04:	e0 ed       	ldi	r30, 0xD0	; 208
    6e06:	e1 0f       	add	r30, r17
    6e08:	ea 30       	cpi	r30, 0x0A	; 10
    6e0a:	60 f0       	brcs	.+24     	; 0x6e24 <strtol+0x162>
    6e0c:	8f eb       	ldi	r24, 0xBF	; 191
    6e0e:	81 0f       	add	r24, r17
    6e10:	8a 31       	cpi	r24, 0x1A	; 26
    6e12:	10 f4       	brcc	.+4      	; 0x6e18 <strtol+0x156>
    6e14:	e9 ec       	ldi	r30, 0xC9	; 201
    6e16:	05 c0       	rjmp	.+10     	; 0x6e22 <strtol+0x160>
    6e18:	8f e9       	ldi	r24, 0x9F	; 159
    6e1a:	81 0f       	add	r24, r17
    6e1c:	8a 31       	cpi	r24, 0x1A	; 26
    6e1e:	28 f5       	brcc	.+74     	; 0x6e6a <strtol+0x1a8>
    6e20:	e9 ea       	ldi	r30, 0xA9	; 169
    6e22:	e1 0f       	add	r30, r17
    6e24:	8e 2f       	mov	r24, r30
    6e26:	90 e0       	ldi	r25, 0x00	; 0
    6e28:	8e 15       	cp	r24, r14
    6e2a:	9f 05       	cpc	r25, r15
    6e2c:	f4 f4       	brge	.+60     	; 0x6e6a <strtol+0x1a8>
    6e2e:	67 fd       	sbrc	r22, 7
    6e30:	18 c0       	rjmp	.+48     	; 0x6e62 <strtol+0x1a0>
    6e32:	82 16       	cp	r8, r18
    6e34:	93 06       	cpc	r9, r19
    6e36:	a4 06       	cpc	r10, r20
    6e38:	b5 06       	cpc	r11, r21
    6e3a:	90 f0       	brcs	.+36     	; 0x6e60 <strtol+0x19e>
    6e3c:	c3 01       	movw	r24, r6
    6e3e:	b2 01       	movw	r22, r4
    6e40:	0e 94 18 34 	call	0x6830	; 0x6830 <__mulsi3>
    6e44:	9b 01       	movw	r18, r22
    6e46:	ac 01       	movw	r20, r24
    6e48:	2e 0f       	add	r18, r30
    6e4a:	31 1d       	adc	r19, r1
    6e4c:	41 1d       	adc	r20, r1
    6e4e:	51 1d       	adc	r21, r1
    6e50:	21 30       	cpi	r18, 0x01	; 1
    6e52:	31 05       	cpc	r19, r1
    6e54:	41 05       	cpc	r20, r1
    6e56:	f0 e8       	ldi	r31, 0x80	; 128
    6e58:	5f 07       	cpc	r21, r31
    6e5a:	10 f4       	brcc	.+4      	; 0x6e60 <strtol+0x19e>
    6e5c:	61 e0       	ldi	r22, 0x01	; 1
    6e5e:	01 c0       	rjmp	.+2      	; 0x6e62 <strtol+0x1a0>
    6e60:	6f ef       	ldi	r22, 0xFF	; 255
    6e62:	21 96       	adiw	r28, 0x01	; 1
    6e64:	f1 01       	movw	r30, r2
    6e66:	10 81       	ld	r17, Z
    6e68:	cc cf       	rjmp	.-104    	; 0x6e02 <strtol+0x140>
    6e6a:	80 2f       	mov	r24, r16
    6e6c:	81 70       	andi	r24, 0x01	; 1
    6e6e:	c1 14       	cp	r12, r1
    6e70:	d1 04       	cpc	r13, r1
    6e72:	71 f0       	breq	.+28     	; 0x6e90 <strtol+0x1ce>
    6e74:	66 23       	and	r22, r22
    6e76:	29 f0       	breq	.+10     	; 0x6e82 <strtol+0x1c0>
    6e78:	21 97       	sbiw	r28, 0x01	; 1
    6e7a:	f6 01       	movw	r30, r12
    6e7c:	c0 83       	st	Z, r28
    6e7e:	d1 83       	std	Z+1, r29	; 0x01
    6e80:	07 c0       	rjmp	.+14     	; 0x6e90 <strtol+0x1ce>
    6e82:	01 ff       	sbrs	r16, 1
    6e84:	19 c0       	rjmp	.+50     	; 0x6eb8 <strtol+0x1f6>
    6e86:	22 97       	sbiw	r28, 0x02	; 2
    6e88:	f6 01       	movw	r30, r12
    6e8a:	c0 83       	st	Z, r28
    6e8c:	d1 83       	std	Z+1, r29	; 0x01
    6e8e:	14 c0       	rjmp	.+40     	; 0x6eb8 <strtol+0x1f6>
    6e90:	67 ff       	sbrs	r22, 7
    6e92:	12 c0       	rjmp	.+36     	; 0x6eb8 <strtol+0x1f6>
    6e94:	81 11       	cpse	r24, r1
    6e96:	05 c0       	rjmp	.+10     	; 0x6ea2 <strtol+0x1e0>
    6e98:	2f ef       	ldi	r18, 0xFF	; 255
    6e9a:	3f ef       	ldi	r19, 0xFF	; 255
    6e9c:	4f ef       	ldi	r20, 0xFF	; 255
    6e9e:	5f e7       	ldi	r21, 0x7F	; 127
    6ea0:	04 c0       	rjmp	.+8      	; 0x6eaa <strtol+0x1e8>
    6ea2:	20 e0       	ldi	r18, 0x00	; 0
    6ea4:	30 e0       	ldi	r19, 0x00	; 0
    6ea6:	40 e0       	ldi	r20, 0x00	; 0
    6ea8:	50 e8       	ldi	r21, 0x80	; 128
    6eaa:	82 e2       	ldi	r24, 0x22	; 34
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	80 93 96 2e 	sts	0x2E96, r24	; 0x802e96 <errno>
    6eb2:	90 93 97 2e 	sts	0x2E97, r25	; 0x802e97 <errno+0x1>
    6eb6:	16 c0       	rjmp	.+44     	; 0x6ee4 <strtol+0x222>
    6eb8:	88 23       	and	r24, r24
    6eba:	41 f0       	breq	.+16     	; 0x6ecc <strtol+0x20a>
    6ebc:	50 95       	com	r21
    6ebe:	40 95       	com	r20
    6ec0:	30 95       	com	r19
    6ec2:	21 95       	neg	r18
    6ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ec6:	4f 4f       	sbci	r20, 0xFF	; 255
    6ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    6eca:	0c c0       	rjmp	.+24     	; 0x6ee4 <strtol+0x222>
    6ecc:	57 ff       	sbrs	r21, 7
    6ece:	0a c0       	rjmp	.+20     	; 0x6ee4 <strtol+0x222>
    6ed0:	82 e2       	ldi	r24, 0x22	; 34
    6ed2:	90 e0       	ldi	r25, 0x00	; 0
    6ed4:	80 93 96 2e 	sts	0x2E96, r24	; 0x802e96 <errno>
    6ed8:	90 93 97 2e 	sts	0x2E97, r25	; 0x802e97 <errno+0x1>
    6edc:	2f ef       	ldi	r18, 0xFF	; 255
    6ede:	3f ef       	ldi	r19, 0xFF	; 255
    6ee0:	4f ef       	ldi	r20, 0xFF	; 255
    6ee2:	5f e7       	ldi	r21, 0x7F	; 127
    6ee4:	b9 01       	movw	r22, r18
    6ee6:	ca 01       	movw	r24, r20
    6ee8:	04 c0       	rjmp	.+8      	; 0x6ef2 <strtol+0x230>
    6eea:	60 e0       	ldi	r22, 0x00	; 0
    6eec:	70 e0       	ldi	r23, 0x00	; 0
    6eee:	80 e0       	ldi	r24, 0x00	; 0
    6ef0:	90 e0       	ldi	r25, 0x00	; 0
    6ef2:	df 91       	pop	r29
    6ef4:	cf 91       	pop	r28
    6ef6:	1f 91       	pop	r17
    6ef8:	0f 91       	pop	r16
    6efa:	ff 90       	pop	r15
    6efc:	ef 90       	pop	r14
    6efe:	df 90       	pop	r13
    6f00:	cf 90       	pop	r12
    6f02:	bf 90       	pop	r11
    6f04:	af 90       	pop	r10
    6f06:	9f 90       	pop	r9
    6f08:	8f 90       	pop	r8
    6f0a:	7f 90       	pop	r7
    6f0c:	6f 90       	pop	r6
    6f0e:	5f 90       	pop	r5
    6f10:	4f 90       	pop	r4
    6f12:	3f 90       	pop	r3
    6f14:	2f 90       	pop	r2
    6f16:	08 95       	ret

00006f18 <isspace>:
    6f18:	91 11       	cpse	r25, r1
    6f1a:	0c 94 9b 3a 	jmp	0x7536	; 0x7536 <__ctype_isfalse>
    6f1e:	80 32       	cpi	r24, 0x20	; 32
    6f20:	19 f0       	breq	.+6      	; 0x6f28 <isspace+0x10>
    6f22:	89 50       	subi	r24, 0x09	; 9
    6f24:	85 50       	subi	r24, 0x05	; 5
    6f26:	c8 f7       	brcc	.-14     	; 0x6f1a <isspace+0x2>
    6f28:	08 95       	ret

00006f2a <memcpy>:
    6f2a:	fb 01       	movw	r30, r22
    6f2c:	dc 01       	movw	r26, r24
    6f2e:	02 c0       	rjmp	.+4      	; 0x6f34 <memcpy+0xa>
    6f30:	01 90       	ld	r0, Z+
    6f32:	0d 92       	st	X+, r0
    6f34:	41 50       	subi	r20, 0x01	; 1
    6f36:	50 40       	sbci	r21, 0x00	; 0
    6f38:	d8 f7       	brcc	.-10     	; 0x6f30 <memcpy+0x6>
    6f3a:	08 95       	ret

00006f3c <strncmp>:
    6f3c:	fb 01       	movw	r30, r22
    6f3e:	dc 01       	movw	r26, r24
    6f40:	41 50       	subi	r20, 0x01	; 1
    6f42:	50 40       	sbci	r21, 0x00	; 0
    6f44:	30 f0       	brcs	.+12     	; 0x6f52 <strncmp+0x16>
    6f46:	8d 91       	ld	r24, X+
    6f48:	01 90       	ld	r0, Z+
    6f4a:	80 19       	sub	r24, r0
    6f4c:	19 f4       	brne	.+6      	; 0x6f54 <strncmp+0x18>
    6f4e:	00 20       	and	r0, r0
    6f50:	b9 f7       	brne	.-18     	; 0x6f40 <strncmp+0x4>
    6f52:	88 1b       	sub	r24, r24
    6f54:	99 0b       	sbc	r25, r25
    6f56:	08 95       	ret

00006f58 <strncpy>:
    6f58:	fb 01       	movw	r30, r22
    6f5a:	dc 01       	movw	r26, r24
    6f5c:	41 50       	subi	r20, 0x01	; 1
    6f5e:	50 40       	sbci	r21, 0x00	; 0
    6f60:	48 f0       	brcs	.+18     	; 0x6f74 <strncpy+0x1c>
    6f62:	01 90       	ld	r0, Z+
    6f64:	0d 92       	st	X+, r0
    6f66:	00 20       	and	r0, r0
    6f68:	c9 f7       	brne	.-14     	; 0x6f5c <strncpy+0x4>
    6f6a:	01 c0       	rjmp	.+2      	; 0x6f6e <strncpy+0x16>
    6f6c:	1d 92       	st	X+, r1
    6f6e:	41 50       	subi	r20, 0x01	; 1
    6f70:	50 40       	sbci	r21, 0x00	; 0
    6f72:	e0 f7       	brcc	.-8      	; 0x6f6c <strncpy+0x14>
    6f74:	08 95       	ret

00006f76 <fprintf>:
    6f76:	cf 93       	push	r28
    6f78:	df 93       	push	r29
    6f7a:	cd b7       	in	r28, 0x3d	; 61
    6f7c:	de b7       	in	r29, 0x3e	; 62
    6f7e:	ae 01       	movw	r20, r28
    6f80:	46 5f       	subi	r20, 0xF6	; 246
    6f82:	5f 4f       	sbci	r21, 0xFF	; 255
    6f84:	68 85       	ldd	r22, Y+8	; 0x08
    6f86:	79 85       	ldd	r23, Y+9	; 0x09
    6f88:	8e 81       	ldd	r24, Y+6	; 0x06
    6f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    6f8c:	0e 94 a6 38 	call	0x714c	; 0x714c <vfprintf>
    6f90:	df 91       	pop	r29
    6f92:	cf 91       	pop	r28
    6f94:	08 95       	ret

00006f96 <fputc>:
    6f96:	0f 93       	push	r16
    6f98:	1f 93       	push	r17
    6f9a:	cf 93       	push	r28
    6f9c:	df 93       	push	r29
    6f9e:	fb 01       	movw	r30, r22
    6fa0:	23 81       	ldd	r18, Z+3	; 0x03
    6fa2:	21 fd       	sbrc	r18, 1
    6fa4:	03 c0       	rjmp	.+6      	; 0x6fac <fputc+0x16>
    6fa6:	8f ef       	ldi	r24, 0xFF	; 255
    6fa8:	9f ef       	ldi	r25, 0xFF	; 255
    6faa:	28 c0       	rjmp	.+80     	; 0x6ffc <fputc+0x66>
    6fac:	22 ff       	sbrs	r18, 2
    6fae:	16 c0       	rjmp	.+44     	; 0x6fdc <fputc+0x46>
    6fb0:	46 81       	ldd	r20, Z+6	; 0x06
    6fb2:	57 81       	ldd	r21, Z+7	; 0x07
    6fb4:	24 81       	ldd	r18, Z+4	; 0x04
    6fb6:	35 81       	ldd	r19, Z+5	; 0x05
    6fb8:	42 17       	cp	r20, r18
    6fba:	53 07       	cpc	r21, r19
    6fbc:	44 f4       	brge	.+16     	; 0x6fce <fputc+0x38>
    6fbe:	a0 81       	ld	r26, Z
    6fc0:	b1 81       	ldd	r27, Z+1	; 0x01
    6fc2:	9d 01       	movw	r18, r26
    6fc4:	2f 5f       	subi	r18, 0xFF	; 255
    6fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    6fc8:	20 83       	st	Z, r18
    6fca:	31 83       	std	Z+1, r19	; 0x01
    6fcc:	8c 93       	st	X, r24
    6fce:	26 81       	ldd	r18, Z+6	; 0x06
    6fd0:	37 81       	ldd	r19, Z+7	; 0x07
    6fd2:	2f 5f       	subi	r18, 0xFF	; 255
    6fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd6:	26 83       	std	Z+6, r18	; 0x06
    6fd8:	37 83       	std	Z+7, r19	; 0x07
    6fda:	10 c0       	rjmp	.+32     	; 0x6ffc <fputc+0x66>
    6fdc:	eb 01       	movw	r28, r22
    6fde:	09 2f       	mov	r16, r25
    6fe0:	18 2f       	mov	r17, r24
    6fe2:	00 84       	ldd	r0, Z+8	; 0x08
    6fe4:	f1 85       	ldd	r31, Z+9	; 0x09
    6fe6:	e0 2d       	mov	r30, r0
    6fe8:	19 95       	eicall
    6fea:	89 2b       	or	r24, r25
    6fec:	e1 f6       	brne	.-72     	; 0x6fa6 <fputc+0x10>
    6fee:	8e 81       	ldd	r24, Y+6	; 0x06
    6ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    6ff2:	01 96       	adiw	r24, 0x01	; 1
    6ff4:	8e 83       	std	Y+6, r24	; 0x06
    6ff6:	9f 83       	std	Y+7, r25	; 0x07
    6ff8:	81 2f       	mov	r24, r17
    6ffa:	90 2f       	mov	r25, r16
    6ffc:	df 91       	pop	r29
    6ffe:	cf 91       	pop	r28
    7000:	1f 91       	pop	r17
    7002:	0f 91       	pop	r16
    7004:	08 95       	ret

00007006 <fwrite>:
    7006:	8f 92       	push	r8
    7008:	9f 92       	push	r9
    700a:	af 92       	push	r10
    700c:	bf 92       	push	r11
    700e:	cf 92       	push	r12
    7010:	df 92       	push	r13
    7012:	ef 92       	push	r14
    7014:	ff 92       	push	r15
    7016:	0f 93       	push	r16
    7018:	1f 93       	push	r17
    701a:	cf 93       	push	r28
    701c:	df 93       	push	r29
    701e:	5b 01       	movw	r10, r22
    7020:	4a 01       	movw	r8, r20
    7022:	79 01       	movw	r14, r18
    7024:	d9 01       	movw	r26, r18
    7026:	13 96       	adiw	r26, 0x03	; 3
    7028:	2c 91       	ld	r18, X
    702a:	21 ff       	sbrs	r18, 1
    702c:	1d c0       	rjmp	.+58     	; 0x7068 <fwrite+0x62>
    702e:	c0 e0       	ldi	r28, 0x00	; 0
    7030:	d0 e0       	ldi	r29, 0x00	; 0
    7032:	c8 15       	cp	r28, r8
    7034:	d9 05       	cpc	r29, r9
    7036:	d9 f0       	breq	.+54     	; 0x706e <fwrite+0x68>
    7038:	8c 01       	movw	r16, r24
    703a:	6c 01       	movw	r12, r24
    703c:	ca 0c       	add	r12, r10
    703e:	db 1c       	adc	r13, r11
    7040:	c8 01       	movw	r24, r16
    7042:	0c 15       	cp	r16, r12
    7044:	1d 05       	cpc	r17, r13
    7046:	71 f0       	breq	.+28     	; 0x7064 <fwrite+0x5e>
    7048:	0f 5f       	subi	r16, 0xFF	; 255
    704a:	1f 4f       	sbci	r17, 0xFF	; 255
    704c:	d7 01       	movw	r26, r14
    704e:	18 96       	adiw	r26, 0x08	; 8
    7050:	ed 91       	ld	r30, X+
    7052:	fc 91       	ld	r31, X
    7054:	19 97       	sbiw	r26, 0x09	; 9
    7056:	b7 01       	movw	r22, r14
    7058:	dc 01       	movw	r26, r24
    705a:	8c 91       	ld	r24, X
    705c:	19 95       	eicall
    705e:	89 2b       	or	r24, r25
    7060:	79 f3       	breq	.-34     	; 0x7040 <fwrite+0x3a>
    7062:	05 c0       	rjmp	.+10     	; 0x706e <fwrite+0x68>
    7064:	21 96       	adiw	r28, 0x01	; 1
    7066:	e5 cf       	rjmp	.-54     	; 0x7032 <fwrite+0x2c>
    7068:	80 e0       	ldi	r24, 0x00	; 0
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	01 c0       	rjmp	.+2      	; 0x7070 <fwrite+0x6a>
    706e:	ce 01       	movw	r24, r28
    7070:	df 91       	pop	r29
    7072:	cf 91       	pop	r28
    7074:	1f 91       	pop	r17
    7076:	0f 91       	pop	r16
    7078:	ff 90       	pop	r15
    707a:	ef 90       	pop	r14
    707c:	df 90       	pop	r13
    707e:	cf 90       	pop	r12
    7080:	bf 90       	pop	r11
    7082:	af 90       	pop	r10
    7084:	9f 90       	pop	r9
    7086:	8f 90       	pop	r8
    7088:	08 95       	ret

0000708a <snprintf>:
    708a:	0f 93       	push	r16
    708c:	1f 93       	push	r17
    708e:	cf 93       	push	r28
    7090:	df 93       	push	r29
    7092:	cd b7       	in	r28, 0x3d	; 61
    7094:	de b7       	in	r29, 0x3e	; 62
    7096:	2e 97       	sbiw	r28, 0x0e	; 14
    7098:	cd bf       	out	0x3d, r28	; 61
    709a:	de bf       	out	0x3e, r29	; 62
    709c:	0e 89       	ldd	r16, Y+22	; 0x16
    709e:	1f 89       	ldd	r17, Y+23	; 0x17
    70a0:	88 8d       	ldd	r24, Y+24	; 0x18
    70a2:	99 8d       	ldd	r25, Y+25	; 0x19
    70a4:	26 e0       	ldi	r18, 0x06	; 6
    70a6:	2c 83       	std	Y+4, r18	; 0x04
    70a8:	09 83       	std	Y+1, r16	; 0x01
    70aa:	1a 83       	std	Y+2, r17	; 0x02
    70ac:	97 ff       	sbrs	r25, 7
    70ae:	02 c0       	rjmp	.+4      	; 0x70b4 <snprintf+0x2a>
    70b0:	80 e0       	ldi	r24, 0x00	; 0
    70b2:	90 e8       	ldi	r25, 0x80	; 128
    70b4:	01 97       	sbiw	r24, 0x01	; 1
    70b6:	8d 83       	std	Y+5, r24	; 0x05
    70b8:	9e 83       	std	Y+6, r25	; 0x06
    70ba:	ae 01       	movw	r20, r28
    70bc:	44 5e       	subi	r20, 0xE4	; 228
    70be:	5f 4f       	sbci	r21, 0xFF	; 255
    70c0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    70c2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    70c4:	ce 01       	movw	r24, r28
    70c6:	01 96       	adiw	r24, 0x01	; 1
    70c8:	0e 94 a6 38 	call	0x714c	; 0x714c <vfprintf>
    70cc:	4d 81       	ldd	r20, Y+5	; 0x05
    70ce:	5e 81       	ldd	r21, Y+6	; 0x06
    70d0:	57 fd       	sbrc	r21, 7
    70d2:	0a c0       	rjmp	.+20     	; 0x70e8 <snprintf+0x5e>
    70d4:	2f 81       	ldd	r18, Y+7	; 0x07
    70d6:	38 85       	ldd	r19, Y+8	; 0x08
    70d8:	42 17       	cp	r20, r18
    70da:	53 07       	cpc	r21, r19
    70dc:	0c f4       	brge	.+2      	; 0x70e0 <snprintf+0x56>
    70de:	9a 01       	movw	r18, r20
    70e0:	f8 01       	movw	r30, r16
    70e2:	e2 0f       	add	r30, r18
    70e4:	f3 1f       	adc	r31, r19
    70e6:	10 82       	st	Z, r1
    70e8:	2e 96       	adiw	r28, 0x0e	; 14
    70ea:	cd bf       	out	0x3d, r28	; 61
    70ec:	de bf       	out	0x3e, r29	; 62
    70ee:	df 91       	pop	r29
    70f0:	cf 91       	pop	r28
    70f2:	1f 91       	pop	r17
    70f4:	0f 91       	pop	r16
    70f6:	08 95       	ret

000070f8 <sprintf>:
    70f8:	0f 93       	push	r16
    70fa:	1f 93       	push	r17
    70fc:	cf 93       	push	r28
    70fe:	df 93       	push	r29
    7100:	cd b7       	in	r28, 0x3d	; 61
    7102:	de b7       	in	r29, 0x3e	; 62
    7104:	2e 97       	sbiw	r28, 0x0e	; 14
    7106:	cd bf       	out	0x3d, r28	; 61
    7108:	de bf       	out	0x3e, r29	; 62
    710a:	0e 89       	ldd	r16, Y+22	; 0x16
    710c:	1f 89       	ldd	r17, Y+23	; 0x17
    710e:	86 e0       	ldi	r24, 0x06	; 6
    7110:	8c 83       	std	Y+4, r24	; 0x04
    7112:	09 83       	std	Y+1, r16	; 0x01
    7114:	1a 83       	std	Y+2, r17	; 0x02
    7116:	8f ef       	ldi	r24, 0xFF	; 255
    7118:	9f e7       	ldi	r25, 0x7F	; 127
    711a:	8d 83       	std	Y+5, r24	; 0x05
    711c:	9e 83       	std	Y+6, r25	; 0x06
    711e:	ae 01       	movw	r20, r28
    7120:	46 5e       	subi	r20, 0xE6	; 230
    7122:	5f 4f       	sbci	r21, 0xFF	; 255
    7124:	68 8d       	ldd	r22, Y+24	; 0x18
    7126:	79 8d       	ldd	r23, Y+25	; 0x19
    7128:	ce 01       	movw	r24, r28
    712a:	01 96       	adiw	r24, 0x01	; 1
    712c:	0e 94 a6 38 	call	0x714c	; 0x714c <vfprintf>
    7130:	2f 81       	ldd	r18, Y+7	; 0x07
    7132:	38 85       	ldd	r19, Y+8	; 0x08
    7134:	f8 01       	movw	r30, r16
    7136:	e2 0f       	add	r30, r18
    7138:	f3 1f       	adc	r31, r19
    713a:	10 82       	st	Z, r1
    713c:	2e 96       	adiw	r28, 0x0e	; 14
    713e:	cd bf       	out	0x3d, r28	; 61
    7140:	de bf       	out	0x3e, r29	; 62
    7142:	df 91       	pop	r29
    7144:	cf 91       	pop	r28
    7146:	1f 91       	pop	r17
    7148:	0f 91       	pop	r16
    714a:	08 95       	ret

0000714c <vfprintf>:
    714c:	2f 92       	push	r2
    714e:	3f 92       	push	r3
    7150:	4f 92       	push	r4
    7152:	5f 92       	push	r5
    7154:	6f 92       	push	r6
    7156:	7f 92       	push	r7
    7158:	8f 92       	push	r8
    715a:	9f 92       	push	r9
    715c:	af 92       	push	r10
    715e:	bf 92       	push	r11
    7160:	cf 92       	push	r12
    7162:	df 92       	push	r13
    7164:	ef 92       	push	r14
    7166:	ff 92       	push	r15
    7168:	0f 93       	push	r16
    716a:	1f 93       	push	r17
    716c:	cf 93       	push	r28
    716e:	df 93       	push	r29
    7170:	cd b7       	in	r28, 0x3d	; 61
    7172:	de b7       	in	r29, 0x3e	; 62
    7174:	2c 97       	sbiw	r28, 0x0c	; 12
    7176:	cd bf       	out	0x3d, r28	; 61
    7178:	de bf       	out	0x3e, r29	; 62
    717a:	7c 01       	movw	r14, r24
    717c:	6b 01       	movw	r12, r22
    717e:	8a 01       	movw	r16, r20
    7180:	fc 01       	movw	r30, r24
    7182:	16 82       	std	Z+6, r1	; 0x06
    7184:	17 82       	std	Z+7, r1	; 0x07
    7186:	83 81       	ldd	r24, Z+3	; 0x03
    7188:	81 ff       	sbrs	r24, 1
    718a:	bd c1       	rjmp	.+890    	; 0x7506 <vfprintf+0x3ba>
    718c:	ce 01       	movw	r24, r28
    718e:	01 96       	adiw	r24, 0x01	; 1
    7190:	4c 01       	movw	r8, r24
    7192:	f7 01       	movw	r30, r14
    7194:	93 81       	ldd	r25, Z+3	; 0x03
    7196:	f6 01       	movw	r30, r12
    7198:	93 fd       	sbrc	r25, 3
    719a:	85 91       	lpm	r24, Z+
    719c:	93 ff       	sbrs	r25, 3
    719e:	81 91       	ld	r24, Z+
    71a0:	6f 01       	movw	r12, r30
    71a2:	88 23       	and	r24, r24
    71a4:	09 f4       	brne	.+2      	; 0x71a8 <vfprintf+0x5c>
    71a6:	ab c1       	rjmp	.+854    	; 0x74fe <vfprintf+0x3b2>
    71a8:	85 32       	cpi	r24, 0x25	; 37
    71aa:	39 f4       	brne	.+14     	; 0x71ba <vfprintf+0x6e>
    71ac:	93 fd       	sbrc	r25, 3
    71ae:	85 91       	lpm	r24, Z+
    71b0:	93 ff       	sbrs	r25, 3
    71b2:	81 91       	ld	r24, Z+
    71b4:	6f 01       	movw	r12, r30
    71b6:	85 32       	cpi	r24, 0x25	; 37
    71b8:	29 f4       	brne	.+10     	; 0x71c4 <vfprintf+0x78>
    71ba:	b7 01       	movw	r22, r14
    71bc:	90 e0       	ldi	r25, 0x00	; 0
    71be:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    71c2:	e7 cf       	rjmp	.-50     	; 0x7192 <vfprintf+0x46>
    71c4:	51 2c       	mov	r5, r1
    71c6:	31 2c       	mov	r3, r1
    71c8:	20 e0       	ldi	r18, 0x00	; 0
    71ca:	20 32       	cpi	r18, 0x20	; 32
    71cc:	a0 f4       	brcc	.+40     	; 0x71f6 <vfprintf+0xaa>
    71ce:	8b 32       	cpi	r24, 0x2B	; 43
    71d0:	69 f0       	breq	.+26     	; 0x71ec <vfprintf+0xa0>
    71d2:	30 f4       	brcc	.+12     	; 0x71e0 <vfprintf+0x94>
    71d4:	80 32       	cpi	r24, 0x20	; 32
    71d6:	59 f0       	breq	.+22     	; 0x71ee <vfprintf+0xa2>
    71d8:	83 32       	cpi	r24, 0x23	; 35
    71da:	69 f4       	brne	.+26     	; 0x71f6 <vfprintf+0xaa>
    71dc:	20 61       	ori	r18, 0x10	; 16
    71de:	2c c0       	rjmp	.+88     	; 0x7238 <vfprintf+0xec>
    71e0:	8d 32       	cpi	r24, 0x2D	; 45
    71e2:	39 f0       	breq	.+14     	; 0x71f2 <vfprintf+0xa6>
    71e4:	80 33       	cpi	r24, 0x30	; 48
    71e6:	39 f4       	brne	.+14     	; 0x71f6 <vfprintf+0xaa>
    71e8:	21 60       	ori	r18, 0x01	; 1
    71ea:	26 c0       	rjmp	.+76     	; 0x7238 <vfprintf+0xec>
    71ec:	22 60       	ori	r18, 0x02	; 2
    71ee:	24 60       	ori	r18, 0x04	; 4
    71f0:	23 c0       	rjmp	.+70     	; 0x7238 <vfprintf+0xec>
    71f2:	28 60       	ori	r18, 0x08	; 8
    71f4:	21 c0       	rjmp	.+66     	; 0x7238 <vfprintf+0xec>
    71f6:	27 fd       	sbrc	r18, 7
    71f8:	27 c0       	rjmp	.+78     	; 0x7248 <vfprintf+0xfc>
    71fa:	30 ed       	ldi	r19, 0xD0	; 208
    71fc:	38 0f       	add	r19, r24
    71fe:	3a 30       	cpi	r19, 0x0A	; 10
    7200:	78 f4       	brcc	.+30     	; 0x7220 <vfprintf+0xd4>
    7202:	26 ff       	sbrs	r18, 6
    7204:	06 c0       	rjmp	.+12     	; 0x7212 <vfprintf+0xc6>
    7206:	fa e0       	ldi	r31, 0x0A	; 10
    7208:	5f 9e       	mul	r5, r31
    720a:	30 0d       	add	r19, r0
    720c:	11 24       	eor	r1, r1
    720e:	53 2e       	mov	r5, r19
    7210:	13 c0       	rjmp	.+38     	; 0x7238 <vfprintf+0xec>
    7212:	8a e0       	ldi	r24, 0x0A	; 10
    7214:	38 9e       	mul	r3, r24
    7216:	30 0d       	add	r19, r0
    7218:	11 24       	eor	r1, r1
    721a:	33 2e       	mov	r3, r19
    721c:	20 62       	ori	r18, 0x20	; 32
    721e:	0c c0       	rjmp	.+24     	; 0x7238 <vfprintf+0xec>
    7220:	8e 32       	cpi	r24, 0x2E	; 46
    7222:	21 f4       	brne	.+8      	; 0x722c <vfprintf+0xe0>
    7224:	26 fd       	sbrc	r18, 6
    7226:	6b c1       	rjmp	.+726    	; 0x74fe <vfprintf+0x3b2>
    7228:	20 64       	ori	r18, 0x40	; 64
    722a:	06 c0       	rjmp	.+12     	; 0x7238 <vfprintf+0xec>
    722c:	8c 36       	cpi	r24, 0x6C	; 108
    722e:	11 f4       	brne	.+4      	; 0x7234 <vfprintf+0xe8>
    7230:	20 68       	ori	r18, 0x80	; 128
    7232:	02 c0       	rjmp	.+4      	; 0x7238 <vfprintf+0xec>
    7234:	88 36       	cpi	r24, 0x68	; 104
    7236:	41 f4       	brne	.+16     	; 0x7248 <vfprintf+0xfc>
    7238:	f6 01       	movw	r30, r12
    723a:	93 fd       	sbrc	r25, 3
    723c:	85 91       	lpm	r24, Z+
    723e:	93 ff       	sbrs	r25, 3
    7240:	81 91       	ld	r24, Z+
    7242:	6f 01       	movw	r12, r30
    7244:	81 11       	cpse	r24, r1
    7246:	c1 cf       	rjmp	.-126    	; 0x71ca <vfprintf+0x7e>
    7248:	98 2f       	mov	r25, r24
    724a:	9f 7d       	andi	r25, 0xDF	; 223
    724c:	95 54       	subi	r25, 0x45	; 69
    724e:	93 30       	cpi	r25, 0x03	; 3
    7250:	28 f4       	brcc	.+10     	; 0x725c <vfprintf+0x110>
    7252:	0c 5f       	subi	r16, 0xFC	; 252
    7254:	1f 4f       	sbci	r17, 0xFF	; 255
    7256:	ff e3       	ldi	r31, 0x3F	; 63
    7258:	f9 83       	std	Y+1, r31	; 0x01
    725a:	0d c0       	rjmp	.+26     	; 0x7276 <vfprintf+0x12a>
    725c:	83 36       	cpi	r24, 0x63	; 99
    725e:	31 f0       	breq	.+12     	; 0x726c <vfprintf+0x120>
    7260:	83 37       	cpi	r24, 0x73	; 115
    7262:	71 f0       	breq	.+28     	; 0x7280 <vfprintf+0x134>
    7264:	83 35       	cpi	r24, 0x53	; 83
    7266:	09 f0       	breq	.+2      	; 0x726a <vfprintf+0x11e>
    7268:	5b c0       	rjmp	.+182    	; 0x7320 <vfprintf+0x1d4>
    726a:	22 c0       	rjmp	.+68     	; 0x72b0 <vfprintf+0x164>
    726c:	f8 01       	movw	r30, r16
    726e:	80 81       	ld	r24, Z
    7270:	89 83       	std	Y+1, r24	; 0x01
    7272:	0e 5f       	subi	r16, 0xFE	; 254
    7274:	1f 4f       	sbci	r17, 0xFF	; 255
    7276:	44 24       	eor	r4, r4
    7278:	43 94       	inc	r4
    727a:	51 2c       	mov	r5, r1
    727c:	54 01       	movw	r10, r8
    727e:	15 c0       	rjmp	.+42     	; 0x72aa <vfprintf+0x15e>
    7280:	38 01       	movw	r6, r16
    7282:	f2 e0       	ldi	r31, 0x02	; 2
    7284:	6f 0e       	add	r6, r31
    7286:	71 1c       	adc	r7, r1
    7288:	f8 01       	movw	r30, r16
    728a:	a0 80       	ld	r10, Z
    728c:	b1 80       	ldd	r11, Z+1	; 0x01
    728e:	26 ff       	sbrs	r18, 6
    7290:	03 c0       	rjmp	.+6      	; 0x7298 <vfprintf+0x14c>
    7292:	65 2d       	mov	r22, r5
    7294:	70 e0       	ldi	r23, 0x00	; 0
    7296:	02 c0       	rjmp	.+4      	; 0x729c <vfprintf+0x150>
    7298:	6f ef       	ldi	r22, 0xFF	; 255
    729a:	7f ef       	ldi	r23, 0xFF	; 255
    729c:	c5 01       	movw	r24, r10
    729e:	2c 87       	std	Y+12, r18	; 0x0c
    72a0:	0e 94 a9 3a 	call	0x7552	; 0x7552 <strnlen>
    72a4:	2c 01       	movw	r4, r24
    72a6:	83 01       	movw	r16, r6
    72a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    72aa:	2f 77       	andi	r18, 0x7F	; 127
    72ac:	22 2e       	mov	r2, r18
    72ae:	17 c0       	rjmp	.+46     	; 0x72de <vfprintf+0x192>
    72b0:	38 01       	movw	r6, r16
    72b2:	f2 e0       	ldi	r31, 0x02	; 2
    72b4:	6f 0e       	add	r6, r31
    72b6:	71 1c       	adc	r7, r1
    72b8:	f8 01       	movw	r30, r16
    72ba:	a0 80       	ld	r10, Z
    72bc:	b1 80       	ldd	r11, Z+1	; 0x01
    72be:	26 ff       	sbrs	r18, 6
    72c0:	03 c0       	rjmp	.+6      	; 0x72c8 <vfprintf+0x17c>
    72c2:	65 2d       	mov	r22, r5
    72c4:	70 e0       	ldi	r23, 0x00	; 0
    72c6:	02 c0       	rjmp	.+4      	; 0x72cc <vfprintf+0x180>
    72c8:	6f ef       	ldi	r22, 0xFF	; 255
    72ca:	7f ef       	ldi	r23, 0xFF	; 255
    72cc:	c5 01       	movw	r24, r10
    72ce:	2c 87       	std	Y+12, r18	; 0x0c
    72d0:	0e 94 9e 3a 	call	0x753c	; 0x753c <strnlen_P>
    72d4:	2c 01       	movw	r4, r24
    72d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    72d8:	20 68       	ori	r18, 0x80	; 128
    72da:	22 2e       	mov	r2, r18
    72dc:	83 01       	movw	r16, r6
    72de:	23 fc       	sbrc	r2, 3
    72e0:	1b c0       	rjmp	.+54     	; 0x7318 <vfprintf+0x1cc>
    72e2:	83 2d       	mov	r24, r3
    72e4:	90 e0       	ldi	r25, 0x00	; 0
    72e6:	48 16       	cp	r4, r24
    72e8:	59 06       	cpc	r5, r25
    72ea:	b0 f4       	brcc	.+44     	; 0x7318 <vfprintf+0x1cc>
    72ec:	b7 01       	movw	r22, r14
    72ee:	80 e2       	ldi	r24, 0x20	; 32
    72f0:	90 e0       	ldi	r25, 0x00	; 0
    72f2:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    72f6:	3a 94       	dec	r3
    72f8:	f4 cf       	rjmp	.-24     	; 0x72e2 <vfprintf+0x196>
    72fa:	f5 01       	movw	r30, r10
    72fc:	27 fc       	sbrc	r2, 7
    72fe:	85 91       	lpm	r24, Z+
    7300:	27 fe       	sbrs	r2, 7
    7302:	81 91       	ld	r24, Z+
    7304:	5f 01       	movw	r10, r30
    7306:	b7 01       	movw	r22, r14
    7308:	90 e0       	ldi	r25, 0x00	; 0
    730a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    730e:	31 10       	cpse	r3, r1
    7310:	3a 94       	dec	r3
    7312:	f1 e0       	ldi	r31, 0x01	; 1
    7314:	4f 1a       	sub	r4, r31
    7316:	51 08       	sbc	r5, r1
    7318:	41 14       	cp	r4, r1
    731a:	51 04       	cpc	r5, r1
    731c:	71 f7       	brne	.-36     	; 0x72fa <vfprintf+0x1ae>
    731e:	e5 c0       	rjmp	.+458    	; 0x74ea <vfprintf+0x39e>
    7320:	84 36       	cpi	r24, 0x64	; 100
    7322:	11 f0       	breq	.+4      	; 0x7328 <vfprintf+0x1dc>
    7324:	89 36       	cpi	r24, 0x69	; 105
    7326:	39 f5       	brne	.+78     	; 0x7376 <vfprintf+0x22a>
    7328:	f8 01       	movw	r30, r16
    732a:	27 ff       	sbrs	r18, 7
    732c:	07 c0       	rjmp	.+14     	; 0x733c <vfprintf+0x1f0>
    732e:	60 81       	ld	r22, Z
    7330:	71 81       	ldd	r23, Z+1	; 0x01
    7332:	82 81       	ldd	r24, Z+2	; 0x02
    7334:	93 81       	ldd	r25, Z+3	; 0x03
    7336:	0c 5f       	subi	r16, 0xFC	; 252
    7338:	1f 4f       	sbci	r17, 0xFF	; 255
    733a:	08 c0       	rjmp	.+16     	; 0x734c <vfprintf+0x200>
    733c:	60 81       	ld	r22, Z
    733e:	71 81       	ldd	r23, Z+1	; 0x01
    7340:	07 2e       	mov	r0, r23
    7342:	00 0c       	add	r0, r0
    7344:	88 0b       	sbc	r24, r24
    7346:	99 0b       	sbc	r25, r25
    7348:	0e 5f       	subi	r16, 0xFE	; 254
    734a:	1f 4f       	sbci	r17, 0xFF	; 255
    734c:	2f 76       	andi	r18, 0x6F	; 111
    734e:	72 2e       	mov	r7, r18
    7350:	97 ff       	sbrs	r25, 7
    7352:	09 c0       	rjmp	.+18     	; 0x7366 <vfprintf+0x21a>
    7354:	90 95       	com	r25
    7356:	80 95       	com	r24
    7358:	70 95       	com	r23
    735a:	61 95       	neg	r22
    735c:	7f 4f       	sbci	r23, 0xFF	; 255
    735e:	8f 4f       	sbci	r24, 0xFF	; 255
    7360:	9f 4f       	sbci	r25, 0xFF	; 255
    7362:	20 68       	ori	r18, 0x80	; 128
    7364:	72 2e       	mov	r7, r18
    7366:	2a e0       	ldi	r18, 0x0A	; 10
    7368:	30 e0       	ldi	r19, 0x00	; 0
    736a:	a4 01       	movw	r20, r8
    736c:	0e 94 b4 3a 	call	0x7568	; 0x7568 <__ultoa_invert>
    7370:	a8 2e       	mov	r10, r24
    7372:	a8 18       	sub	r10, r8
    7374:	44 c0       	rjmp	.+136    	; 0x73fe <vfprintf+0x2b2>
    7376:	85 37       	cpi	r24, 0x75	; 117
    7378:	29 f4       	brne	.+10     	; 0x7384 <vfprintf+0x238>
    737a:	2f 7e       	andi	r18, 0xEF	; 239
    737c:	b2 2e       	mov	r11, r18
    737e:	2a e0       	ldi	r18, 0x0A	; 10
    7380:	30 e0       	ldi	r19, 0x00	; 0
    7382:	25 c0       	rjmp	.+74     	; 0x73ce <vfprintf+0x282>
    7384:	f2 2f       	mov	r31, r18
    7386:	f9 7f       	andi	r31, 0xF9	; 249
    7388:	bf 2e       	mov	r11, r31
    738a:	8f 36       	cpi	r24, 0x6F	; 111
    738c:	c1 f0       	breq	.+48     	; 0x73be <vfprintf+0x272>
    738e:	18 f4       	brcc	.+6      	; 0x7396 <vfprintf+0x24a>
    7390:	88 35       	cpi	r24, 0x58	; 88
    7392:	79 f0       	breq	.+30     	; 0x73b2 <vfprintf+0x266>
    7394:	b4 c0       	rjmp	.+360    	; 0x74fe <vfprintf+0x3b2>
    7396:	80 37       	cpi	r24, 0x70	; 112
    7398:	19 f0       	breq	.+6      	; 0x73a0 <vfprintf+0x254>
    739a:	88 37       	cpi	r24, 0x78	; 120
    739c:	21 f0       	breq	.+8      	; 0x73a6 <vfprintf+0x25a>
    739e:	af c0       	rjmp	.+350    	; 0x74fe <vfprintf+0x3b2>
    73a0:	2f 2f       	mov	r18, r31
    73a2:	20 61       	ori	r18, 0x10	; 16
    73a4:	b2 2e       	mov	r11, r18
    73a6:	b4 fe       	sbrs	r11, 4
    73a8:	0d c0       	rjmp	.+26     	; 0x73c4 <vfprintf+0x278>
    73aa:	8b 2d       	mov	r24, r11
    73ac:	84 60       	ori	r24, 0x04	; 4
    73ae:	b8 2e       	mov	r11, r24
    73b0:	09 c0       	rjmp	.+18     	; 0x73c4 <vfprintf+0x278>
    73b2:	24 ff       	sbrs	r18, 4
    73b4:	0a c0       	rjmp	.+20     	; 0x73ca <vfprintf+0x27e>
    73b6:	9f 2f       	mov	r25, r31
    73b8:	96 60       	ori	r25, 0x06	; 6
    73ba:	b9 2e       	mov	r11, r25
    73bc:	06 c0       	rjmp	.+12     	; 0x73ca <vfprintf+0x27e>
    73be:	28 e0       	ldi	r18, 0x08	; 8
    73c0:	30 e0       	ldi	r19, 0x00	; 0
    73c2:	05 c0       	rjmp	.+10     	; 0x73ce <vfprintf+0x282>
    73c4:	20 e1       	ldi	r18, 0x10	; 16
    73c6:	30 e0       	ldi	r19, 0x00	; 0
    73c8:	02 c0       	rjmp	.+4      	; 0x73ce <vfprintf+0x282>
    73ca:	20 e1       	ldi	r18, 0x10	; 16
    73cc:	32 e0       	ldi	r19, 0x02	; 2
    73ce:	f8 01       	movw	r30, r16
    73d0:	b7 fe       	sbrs	r11, 7
    73d2:	07 c0       	rjmp	.+14     	; 0x73e2 <vfprintf+0x296>
    73d4:	60 81       	ld	r22, Z
    73d6:	71 81       	ldd	r23, Z+1	; 0x01
    73d8:	82 81       	ldd	r24, Z+2	; 0x02
    73da:	93 81       	ldd	r25, Z+3	; 0x03
    73dc:	0c 5f       	subi	r16, 0xFC	; 252
    73de:	1f 4f       	sbci	r17, 0xFF	; 255
    73e0:	06 c0       	rjmp	.+12     	; 0x73ee <vfprintf+0x2a2>
    73e2:	60 81       	ld	r22, Z
    73e4:	71 81       	ldd	r23, Z+1	; 0x01
    73e6:	80 e0       	ldi	r24, 0x00	; 0
    73e8:	90 e0       	ldi	r25, 0x00	; 0
    73ea:	0e 5f       	subi	r16, 0xFE	; 254
    73ec:	1f 4f       	sbci	r17, 0xFF	; 255
    73ee:	a4 01       	movw	r20, r8
    73f0:	0e 94 b4 3a 	call	0x7568	; 0x7568 <__ultoa_invert>
    73f4:	a8 2e       	mov	r10, r24
    73f6:	a8 18       	sub	r10, r8
    73f8:	fb 2d       	mov	r31, r11
    73fa:	ff 77       	andi	r31, 0x7F	; 127
    73fc:	7f 2e       	mov	r7, r31
    73fe:	76 fe       	sbrs	r7, 6
    7400:	0b c0       	rjmp	.+22     	; 0x7418 <vfprintf+0x2cc>
    7402:	37 2d       	mov	r19, r7
    7404:	3e 7f       	andi	r19, 0xFE	; 254
    7406:	a5 14       	cp	r10, r5
    7408:	50 f4       	brcc	.+20     	; 0x741e <vfprintf+0x2d2>
    740a:	74 fe       	sbrs	r7, 4
    740c:	0a c0       	rjmp	.+20     	; 0x7422 <vfprintf+0x2d6>
    740e:	72 fc       	sbrc	r7, 2
    7410:	08 c0       	rjmp	.+16     	; 0x7422 <vfprintf+0x2d6>
    7412:	37 2d       	mov	r19, r7
    7414:	3e 7e       	andi	r19, 0xEE	; 238
    7416:	05 c0       	rjmp	.+10     	; 0x7422 <vfprintf+0x2d6>
    7418:	ba 2c       	mov	r11, r10
    741a:	37 2d       	mov	r19, r7
    741c:	03 c0       	rjmp	.+6      	; 0x7424 <vfprintf+0x2d8>
    741e:	ba 2c       	mov	r11, r10
    7420:	01 c0       	rjmp	.+2      	; 0x7424 <vfprintf+0x2d8>
    7422:	b5 2c       	mov	r11, r5
    7424:	34 ff       	sbrs	r19, 4
    7426:	0d c0       	rjmp	.+26     	; 0x7442 <vfprintf+0x2f6>
    7428:	fe 01       	movw	r30, r28
    742a:	ea 0d       	add	r30, r10
    742c:	f1 1d       	adc	r31, r1
    742e:	80 81       	ld	r24, Z
    7430:	80 33       	cpi	r24, 0x30	; 48
    7432:	11 f4       	brne	.+4      	; 0x7438 <vfprintf+0x2ec>
    7434:	39 7e       	andi	r19, 0xE9	; 233
    7436:	09 c0       	rjmp	.+18     	; 0x744a <vfprintf+0x2fe>
    7438:	32 ff       	sbrs	r19, 2
    743a:	06 c0       	rjmp	.+12     	; 0x7448 <vfprintf+0x2fc>
    743c:	b3 94       	inc	r11
    743e:	b3 94       	inc	r11
    7440:	04 c0       	rjmp	.+8      	; 0x744a <vfprintf+0x2fe>
    7442:	83 2f       	mov	r24, r19
    7444:	86 78       	andi	r24, 0x86	; 134
    7446:	09 f0       	breq	.+2      	; 0x744a <vfprintf+0x2fe>
    7448:	b3 94       	inc	r11
    744a:	33 fd       	sbrc	r19, 3
    744c:	13 c0       	rjmp	.+38     	; 0x7474 <vfprintf+0x328>
    744e:	30 ff       	sbrs	r19, 0
    7450:	06 c0       	rjmp	.+12     	; 0x745e <vfprintf+0x312>
    7452:	5a 2c       	mov	r5, r10
    7454:	b3 14       	cp	r11, r3
    7456:	18 f4       	brcc	.+6      	; 0x745e <vfprintf+0x312>
    7458:	53 0c       	add	r5, r3
    745a:	5b 18       	sub	r5, r11
    745c:	b3 2c       	mov	r11, r3
    745e:	b3 14       	cp	r11, r3
    7460:	68 f4       	brcc	.+26     	; 0x747c <vfprintf+0x330>
    7462:	b7 01       	movw	r22, r14
    7464:	80 e2       	ldi	r24, 0x20	; 32
    7466:	90 e0       	ldi	r25, 0x00	; 0
    7468:	3c 87       	std	Y+12, r19	; 0x0c
    746a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    746e:	b3 94       	inc	r11
    7470:	3c 85       	ldd	r19, Y+12	; 0x0c
    7472:	f5 cf       	rjmp	.-22     	; 0x745e <vfprintf+0x312>
    7474:	b3 14       	cp	r11, r3
    7476:	10 f4       	brcc	.+4      	; 0x747c <vfprintf+0x330>
    7478:	3b 18       	sub	r3, r11
    747a:	01 c0       	rjmp	.+2      	; 0x747e <vfprintf+0x332>
    747c:	31 2c       	mov	r3, r1
    747e:	34 ff       	sbrs	r19, 4
    7480:	12 c0       	rjmp	.+36     	; 0x74a6 <vfprintf+0x35a>
    7482:	b7 01       	movw	r22, r14
    7484:	80 e3       	ldi	r24, 0x30	; 48
    7486:	90 e0       	ldi	r25, 0x00	; 0
    7488:	3c 87       	std	Y+12, r19	; 0x0c
    748a:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    748e:	3c 85       	ldd	r19, Y+12	; 0x0c
    7490:	32 ff       	sbrs	r19, 2
    7492:	17 c0       	rjmp	.+46     	; 0x74c2 <vfprintf+0x376>
    7494:	31 fd       	sbrc	r19, 1
    7496:	03 c0       	rjmp	.+6      	; 0x749e <vfprintf+0x352>
    7498:	88 e7       	ldi	r24, 0x78	; 120
    749a:	90 e0       	ldi	r25, 0x00	; 0
    749c:	02 c0       	rjmp	.+4      	; 0x74a2 <vfprintf+0x356>
    749e:	88 e5       	ldi	r24, 0x58	; 88
    74a0:	90 e0       	ldi	r25, 0x00	; 0
    74a2:	b7 01       	movw	r22, r14
    74a4:	0c c0       	rjmp	.+24     	; 0x74be <vfprintf+0x372>
    74a6:	83 2f       	mov	r24, r19
    74a8:	86 78       	andi	r24, 0x86	; 134
    74aa:	59 f0       	breq	.+22     	; 0x74c2 <vfprintf+0x376>
    74ac:	31 ff       	sbrs	r19, 1
    74ae:	02 c0       	rjmp	.+4      	; 0x74b4 <vfprintf+0x368>
    74b0:	8b e2       	ldi	r24, 0x2B	; 43
    74b2:	01 c0       	rjmp	.+2      	; 0x74b6 <vfprintf+0x36a>
    74b4:	80 e2       	ldi	r24, 0x20	; 32
    74b6:	37 fd       	sbrc	r19, 7
    74b8:	8d e2       	ldi	r24, 0x2D	; 45
    74ba:	b7 01       	movw	r22, r14
    74bc:	90 e0       	ldi	r25, 0x00	; 0
    74be:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    74c2:	a5 14       	cp	r10, r5
    74c4:	38 f4       	brcc	.+14     	; 0x74d4 <vfprintf+0x388>
    74c6:	b7 01       	movw	r22, r14
    74c8:	80 e3       	ldi	r24, 0x30	; 48
    74ca:	90 e0       	ldi	r25, 0x00	; 0
    74cc:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    74d0:	5a 94       	dec	r5
    74d2:	f7 cf       	rjmp	.-18     	; 0x74c2 <vfprintf+0x376>
    74d4:	aa 94       	dec	r10
    74d6:	f4 01       	movw	r30, r8
    74d8:	ea 0d       	add	r30, r10
    74da:	f1 1d       	adc	r31, r1
    74dc:	80 81       	ld	r24, Z
    74de:	b7 01       	movw	r22, r14
    74e0:	90 e0       	ldi	r25, 0x00	; 0
    74e2:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    74e6:	a1 10       	cpse	r10, r1
    74e8:	f5 cf       	rjmp	.-22     	; 0x74d4 <vfprintf+0x388>
    74ea:	33 20       	and	r3, r3
    74ec:	09 f4       	brne	.+2      	; 0x74f0 <vfprintf+0x3a4>
    74ee:	51 ce       	rjmp	.-862    	; 0x7192 <vfprintf+0x46>
    74f0:	b7 01       	movw	r22, r14
    74f2:	80 e2       	ldi	r24, 0x20	; 32
    74f4:	90 e0       	ldi	r25, 0x00	; 0
    74f6:	0e 94 cb 37 	call	0x6f96	; 0x6f96 <fputc>
    74fa:	3a 94       	dec	r3
    74fc:	f6 cf       	rjmp	.-20     	; 0x74ea <vfprintf+0x39e>
    74fe:	f7 01       	movw	r30, r14
    7500:	86 81       	ldd	r24, Z+6	; 0x06
    7502:	97 81       	ldd	r25, Z+7	; 0x07
    7504:	02 c0       	rjmp	.+4      	; 0x750a <vfprintf+0x3be>
    7506:	8f ef       	ldi	r24, 0xFF	; 255
    7508:	9f ef       	ldi	r25, 0xFF	; 255
    750a:	2c 96       	adiw	r28, 0x0c	; 12
    750c:	cd bf       	out	0x3d, r28	; 61
    750e:	de bf       	out	0x3e, r29	; 62
    7510:	df 91       	pop	r29
    7512:	cf 91       	pop	r28
    7514:	1f 91       	pop	r17
    7516:	0f 91       	pop	r16
    7518:	ff 90       	pop	r15
    751a:	ef 90       	pop	r14
    751c:	df 90       	pop	r13
    751e:	cf 90       	pop	r12
    7520:	bf 90       	pop	r11
    7522:	af 90       	pop	r10
    7524:	9f 90       	pop	r9
    7526:	8f 90       	pop	r8
    7528:	7f 90       	pop	r7
    752a:	6f 90       	pop	r6
    752c:	5f 90       	pop	r5
    752e:	4f 90       	pop	r4
    7530:	3f 90       	pop	r3
    7532:	2f 90       	pop	r2
    7534:	08 95       	ret

00007536 <__ctype_isfalse>:
    7536:	99 27       	eor	r25, r25
    7538:	88 27       	eor	r24, r24

0000753a <__ctype_istrue>:
    753a:	08 95       	ret

0000753c <strnlen_P>:
    753c:	fc 01       	movw	r30, r24
    753e:	05 90       	lpm	r0, Z+
    7540:	61 50       	subi	r22, 0x01	; 1
    7542:	70 40       	sbci	r23, 0x00	; 0
    7544:	01 10       	cpse	r0, r1
    7546:	d8 f7       	brcc	.-10     	; 0x753e <strnlen_P+0x2>
    7548:	80 95       	com	r24
    754a:	90 95       	com	r25
    754c:	8e 0f       	add	r24, r30
    754e:	9f 1f       	adc	r25, r31
    7550:	08 95       	ret

00007552 <strnlen>:
    7552:	fc 01       	movw	r30, r24
    7554:	61 50       	subi	r22, 0x01	; 1
    7556:	70 40       	sbci	r23, 0x00	; 0
    7558:	01 90       	ld	r0, Z+
    755a:	01 10       	cpse	r0, r1
    755c:	d8 f7       	brcc	.-10     	; 0x7554 <strnlen+0x2>
    755e:	80 95       	com	r24
    7560:	90 95       	com	r25
    7562:	8e 0f       	add	r24, r30
    7564:	9f 1f       	adc	r25, r31
    7566:	08 95       	ret

00007568 <__ultoa_invert>:
    7568:	fa 01       	movw	r30, r20
    756a:	aa 27       	eor	r26, r26
    756c:	28 30       	cpi	r18, 0x08	; 8
    756e:	51 f1       	breq	.+84     	; 0x75c4 <__ultoa_invert+0x5c>
    7570:	20 31       	cpi	r18, 0x10	; 16
    7572:	81 f1       	breq	.+96     	; 0x75d4 <__ultoa_invert+0x6c>
    7574:	e8 94       	clt
    7576:	6f 93       	push	r22
    7578:	6e 7f       	andi	r22, 0xFE	; 254
    757a:	6e 5f       	subi	r22, 0xFE	; 254
    757c:	7f 4f       	sbci	r23, 0xFF	; 255
    757e:	8f 4f       	sbci	r24, 0xFF	; 255
    7580:	9f 4f       	sbci	r25, 0xFF	; 255
    7582:	af 4f       	sbci	r26, 0xFF	; 255
    7584:	b1 e0       	ldi	r27, 0x01	; 1
    7586:	3e d0       	rcall	.+124    	; 0x7604 <__ultoa_invert+0x9c>
    7588:	b4 e0       	ldi	r27, 0x04	; 4
    758a:	3c d0       	rcall	.+120    	; 0x7604 <__ultoa_invert+0x9c>
    758c:	67 0f       	add	r22, r23
    758e:	78 1f       	adc	r23, r24
    7590:	89 1f       	adc	r24, r25
    7592:	9a 1f       	adc	r25, r26
    7594:	a1 1d       	adc	r26, r1
    7596:	68 0f       	add	r22, r24
    7598:	79 1f       	adc	r23, r25
    759a:	8a 1f       	adc	r24, r26
    759c:	91 1d       	adc	r25, r1
    759e:	a1 1d       	adc	r26, r1
    75a0:	6a 0f       	add	r22, r26
    75a2:	71 1d       	adc	r23, r1
    75a4:	81 1d       	adc	r24, r1
    75a6:	91 1d       	adc	r25, r1
    75a8:	a1 1d       	adc	r26, r1
    75aa:	20 d0       	rcall	.+64     	; 0x75ec <__ultoa_invert+0x84>
    75ac:	09 f4       	brne	.+2      	; 0x75b0 <__ultoa_invert+0x48>
    75ae:	68 94       	set
    75b0:	3f 91       	pop	r19
    75b2:	2a e0       	ldi	r18, 0x0A	; 10
    75b4:	26 9f       	mul	r18, r22
    75b6:	11 24       	eor	r1, r1
    75b8:	30 19       	sub	r19, r0
    75ba:	30 5d       	subi	r19, 0xD0	; 208
    75bc:	31 93       	st	Z+, r19
    75be:	de f6       	brtc	.-74     	; 0x7576 <__ultoa_invert+0xe>
    75c0:	cf 01       	movw	r24, r30
    75c2:	08 95       	ret
    75c4:	46 2f       	mov	r20, r22
    75c6:	47 70       	andi	r20, 0x07	; 7
    75c8:	40 5d       	subi	r20, 0xD0	; 208
    75ca:	41 93       	st	Z+, r20
    75cc:	b3 e0       	ldi	r27, 0x03	; 3
    75ce:	0f d0       	rcall	.+30     	; 0x75ee <__ultoa_invert+0x86>
    75d0:	c9 f7       	brne	.-14     	; 0x75c4 <__ultoa_invert+0x5c>
    75d2:	f6 cf       	rjmp	.-20     	; 0x75c0 <__ultoa_invert+0x58>
    75d4:	46 2f       	mov	r20, r22
    75d6:	4f 70       	andi	r20, 0x0F	; 15
    75d8:	40 5d       	subi	r20, 0xD0	; 208
    75da:	4a 33       	cpi	r20, 0x3A	; 58
    75dc:	18 f0       	brcs	.+6      	; 0x75e4 <__ultoa_invert+0x7c>
    75de:	49 5d       	subi	r20, 0xD9	; 217
    75e0:	31 fd       	sbrc	r19, 1
    75e2:	40 52       	subi	r20, 0x20	; 32
    75e4:	41 93       	st	Z+, r20
    75e6:	02 d0       	rcall	.+4      	; 0x75ec <__ultoa_invert+0x84>
    75e8:	a9 f7       	brne	.-22     	; 0x75d4 <__ultoa_invert+0x6c>
    75ea:	ea cf       	rjmp	.-44     	; 0x75c0 <__ultoa_invert+0x58>
    75ec:	b4 e0       	ldi	r27, 0x04	; 4
    75ee:	a6 95       	lsr	r26
    75f0:	97 95       	ror	r25
    75f2:	87 95       	ror	r24
    75f4:	77 95       	ror	r23
    75f6:	67 95       	ror	r22
    75f8:	ba 95       	dec	r27
    75fa:	c9 f7       	brne	.-14     	; 0x75ee <__ultoa_invert+0x86>
    75fc:	00 97       	sbiw	r24, 0x00	; 0
    75fe:	61 05       	cpc	r22, r1
    7600:	71 05       	cpc	r23, r1
    7602:	08 95       	ret
    7604:	9b 01       	movw	r18, r22
    7606:	ac 01       	movw	r20, r24
    7608:	0a 2e       	mov	r0, r26
    760a:	06 94       	lsr	r0
    760c:	57 95       	ror	r21
    760e:	47 95       	ror	r20
    7610:	37 95       	ror	r19
    7612:	27 95       	ror	r18
    7614:	ba 95       	dec	r27
    7616:	c9 f7       	brne	.-14     	; 0x760a <__ultoa_invert+0xa2>
    7618:	62 0f       	add	r22, r18
    761a:	73 1f       	adc	r23, r19
    761c:	84 1f       	adc	r24, r20
    761e:	95 1f       	adc	r25, r21
    7620:	a0 1d       	adc	r26, r0
    7622:	08 95       	ret

00007624 <eeprom_read_block>:
    7624:	e0 ec       	ldi	r30, 0xC0	; 192
    7626:	f1 e0       	ldi	r31, 0x01	; 1
    7628:	a7 85       	ldd	r26, Z+15	; 0x0f
    762a:	a7 fd       	sbrc	r26, 7
    762c:	fd cf       	rjmp	.-6      	; 0x7628 <eeprom_read_block+0x4>
    762e:	a4 85       	ldd	r26, Z+12	; 0x0c
    7630:	a8 60       	ori	r26, 0x08	; 8
    7632:	a4 87       	std	Z+12, r26	; 0x0c
    7634:	60 50       	subi	r22, 0x00	; 0
    7636:	70 4f       	sbci	r23, 0xF0	; 240
    7638:	0c 94 95 37 	jmp	0x6f2a	; 0x6f2a <memcpy>

0000763c <eeprom_update_block>:
    763c:	dc 01       	movw	r26, r24
    763e:	a4 0f       	add	r26, r20
    7640:	b5 1f       	adc	r27, r21
    7642:	41 50       	subi	r20, 0x01	; 1
    7644:	50 40       	sbci	r21, 0x00	; 0
    7646:	48 f0       	brcs	.+18     	; 0x765a <eeprom_update_block+0x1e>
    7648:	cb 01       	movw	r24, r22
    764a:	84 0f       	add	r24, r20
    764c:	95 1f       	adc	r25, r21
    764e:	2e 91       	ld	r18, -X
    7650:	0e 94 2f 3b 	call	0x765e	; 0x765e <eeprom_update_r18>
    7654:	41 50       	subi	r20, 0x01	; 1
    7656:	50 40       	sbci	r21, 0x00	; 0
    7658:	d0 f7       	brcc	.-12     	; 0x764e <eeprom_update_block+0x12>
    765a:	08 95       	ret

0000765c <eeprom_update_byte>:
    765c:	26 2f       	mov	r18, r22

0000765e <eeprom_update_r18>:
    765e:	0e 94 60 3b 	call	0x76c0	; 0x76c0 <eeprom_mapen>
    7662:	00 80       	ld	r0, Z
    7664:	02 16       	cp	r0, r18
    7666:	19 f0       	breq	.+6      	; 0x766e <eeprom_update_r18+0x10>
    7668:	0e 94 3a 3b 	call	0x7674	; 0x7674 <eeprom_write_r18>
    766c:	01 97       	sbiw	r24, 0x01	; 1
    766e:	01 97       	sbiw	r24, 0x01	; 1
    7670:	08 95       	ret

00007672 <eeprom_write_byte>:
    7672:	26 2f       	mov	r18, r22

00007674 <eeprom_write_r18>:
    7674:	e0 ec       	ldi	r30, 0xC0	; 192
    7676:	f1 e0       	ldi	r31, 0x01	; 1
    7678:	37 85       	ldd	r19, Z+15	; 0x0f
    767a:	37 fd       	sbrc	r19, 7
    767c:	fd cf       	rjmp	.-6      	; 0x7678 <eeprom_write_r18+0x4>
    767e:	34 85       	ldd	r19, Z+12	; 0x0c
    7680:	37 7f       	andi	r19, 0xF7	; 247
    7682:	34 87       	std	Z+12, r19	; 0x0c
    7684:	37 85       	ldd	r19, Z+15	; 0x0f
    7686:	31 ff       	sbrs	r19, 1
    7688:	09 c0       	rjmp	.+18     	; 0x769c <eeprom_write_r18+0x28>
    768a:	36 e3       	ldi	r19, 0x36	; 54
    768c:	32 87       	std	Z+10, r19	; 0x0a
    768e:	38 ed       	ldi	r19, 0xD8	; 216
    7690:	34 bf       	out	0x34, r19	; 52
    7692:	31 e0       	ldi	r19, 0x01	; 1
    7694:	33 87       	std	Z+11, r19	; 0x0b
    7696:	37 85       	ldd	r19, Z+15	; 0x0f
    7698:	37 fd       	sbrc	r19, 7
    769a:	fd cf       	rjmp	.-6      	; 0x7696 <eeprom_write_r18+0x22>
    769c:	33 e3       	ldi	r19, 0x33	; 51
    769e:	32 87       	std	Z+10, r19	; 0x0a
    76a0:	80 83       	st	Z, r24
    76a2:	91 83       	std	Z+1, r25	; 0x01
    76a4:	12 82       	std	Z+2, r1	; 0x02
    76a6:	24 83       	std	Z+4, r18	; 0x04
    76a8:	25 e3       	ldi	r18, 0x35	; 53
    76aa:	22 87       	std	Z+10, r18	; 0x0a
    76ac:	28 ed       	ldi	r18, 0xD8	; 216
    76ae:	31 e0       	ldi	r19, 0x01	; 1
    76b0:	24 bf       	out	0x34, r18	; 52
    76b2:	33 87       	std	Z+11, r19	; 0x0b
    76b4:	01 96       	adiw	r24, 0x01	; 1
    76b6:	08 95       	ret

000076b8 <eeprom_read_byte>:
    76b8:	03 d0       	rcall	.+6      	; 0x76c0 <eeprom_mapen>
    76ba:	80 81       	ld	r24, Z
    76bc:	99 27       	eor	r25, r25
    76be:	08 95       	ret

000076c0 <eeprom_mapen>:
    76c0:	e0 ec       	ldi	r30, 0xC0	; 192
    76c2:	f1 e0       	ldi	r31, 0x01	; 1
    76c4:	37 85       	ldd	r19, Z+15	; 0x0f
    76c6:	37 fd       	sbrc	r19, 7
    76c8:	fd cf       	rjmp	.-6      	; 0x76c4 <eeprom_mapen+0x4>
    76ca:	34 85       	ldd	r19, Z+12	; 0x0c
    76cc:	38 60       	ori	r19, 0x08	; 8
    76ce:	34 87       	std	Z+12, r19	; 0x0c
    76d0:	fc 01       	movw	r30, r24
    76d2:	e0 50       	subi	r30, 0x00	; 0
    76d4:	f0 4f       	sbci	r31, 0xF0	; 240
    76d6:	08 95       	ret

000076d8 <__udivmodsi4>:
    76d8:	a1 e2       	ldi	r26, 0x21	; 33
    76da:	1a 2e       	mov	r1, r26
    76dc:	aa 1b       	sub	r26, r26
    76de:	bb 1b       	sub	r27, r27
    76e0:	fd 01       	movw	r30, r26
    76e2:	0d c0       	rjmp	.+26     	; 0x76fe <__udivmodsi4_ep>

000076e4 <__udivmodsi4_loop>:
    76e4:	aa 1f       	adc	r26, r26
    76e6:	bb 1f       	adc	r27, r27
    76e8:	ee 1f       	adc	r30, r30
    76ea:	ff 1f       	adc	r31, r31
    76ec:	a2 17       	cp	r26, r18
    76ee:	b3 07       	cpc	r27, r19
    76f0:	e4 07       	cpc	r30, r20
    76f2:	f5 07       	cpc	r31, r21
    76f4:	20 f0       	brcs	.+8      	; 0x76fe <__udivmodsi4_ep>
    76f6:	a2 1b       	sub	r26, r18
    76f8:	b3 0b       	sbc	r27, r19
    76fa:	e4 0b       	sbc	r30, r20
    76fc:	f5 0b       	sbc	r31, r21

000076fe <__udivmodsi4_ep>:
    76fe:	66 1f       	adc	r22, r22
    7700:	77 1f       	adc	r23, r23
    7702:	88 1f       	adc	r24, r24
    7704:	99 1f       	adc	r25, r25
    7706:	1a 94       	dec	r1
    7708:	69 f7       	brne	.-38     	; 0x76e4 <__udivmodsi4_loop>
    770a:	60 95       	com	r22
    770c:	70 95       	com	r23
    770e:	80 95       	com	r24
    7710:	90 95       	com	r25
    7712:	9b 01       	movw	r18, r22
    7714:	ac 01       	movw	r20, r24
    7716:	bd 01       	movw	r22, r26
    7718:	cf 01       	movw	r24, r30
    771a:	08 95       	ret

0000771c <_exit>:
    771c:	f8 94       	cli

0000771e <__stop_program>:
    771e:	ff cf       	rjmp	.-2      	; 0x771e <__stop_program>
