
H2A_SECOM_MotorDriver_6_2(2).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000007a0  00802000  00007c5e  00007cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006f5  008027a0  008027a0  00008492  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008492  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000084f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00008530  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bc74  00000000  00000000  000089b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000046c2  00000000  00000000  00014624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003803  00000000  00000000  00018ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001314  00000000  00000000  0001c4ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005fe4  00000000  00000000  0001d800  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e05  00000000  00000000  000237e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  000295e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 01 	jmp	0x35e	; 0x35e <__ctors_end>
       4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
       8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
       c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      10:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      14:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      18:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      1c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      20:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      24:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      28:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      2c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      30:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      34:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      38:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      3c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      40:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      44:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      48:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      4c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      50:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      54:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      58:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      5c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      60:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      64:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      68:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      6c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      70:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      74:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      78:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      7c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      80:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      84:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      88:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      8c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      90:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      94:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      98:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      9c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      a8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      ac:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      b8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      bc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      c8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      cc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      d0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      d4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      d8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      dc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      e0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      e4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      e8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      ec:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      f0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      f4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      f8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
      fc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     100:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     104:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     108:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     10c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     110:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     114:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     118:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     11c:	0c 94 94 25 	jmp	0x4b28	; 0x4b28 <__vector_71>
     120:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     124:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     128:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     12c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     130:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     134:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     138:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     13c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     140:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     144:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     148:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     14c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     150:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     154:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     158:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     15c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     160:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <__vector_88>
     164:	0c 94 b8 2e 	jmp	0x5d70	; 0x5d70 <__vector_89>
     168:	0c 94 e9 2e 	jmp	0x5dd2	; 0x5dd2 <__vector_90>
     16c:	0c 94 06 2f 	jmp	0x5e0c	; 0x5e0c <__vector_91>
     170:	0c 94 2e 2f 	jmp	0x5e5c	; 0x5e5c <__vector_92>
     174:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     178:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     17c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     180:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     184:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     188:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     18c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     190:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     194:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     198:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     19c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1a0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1a4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1a8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1ac:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1b0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1b4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1b8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1bc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1c0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1c4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1c8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1cc:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1d0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1d4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1d8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1dc:	0c 94 5f 2f 	jmp	0x5ebe	; 0x5ebe <__vector_119>
     1e0:	0c 94 87 2f 	jmp	0x5f0e	; 0x5f0e <__vector_120>
     1e4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1e8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1ec:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1f0:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1f4:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>
     1f8:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <GetDiodeStatus>
     200:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <GetSupercapPower>
     204:	0c 94 49 0c 	jmp	0x1892	; 0x1892 <GetSupercapCurrent>
     208:	0c 94 f7 2c 	jmp	0x59ee	; 0x59ee <AcceptDataGPSTime>
     20c:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <GetFuelCellEnergy>
     210:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <GetTimeSnapshot>
     214:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <GetFuelCellVoltage>
     218:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <GetWheelDistance>
     21c:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <GetWheelSpeedH2A>
     220:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <GetFuelCellPower>
     224:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <GetSupercapEnergy>
     228:	0c 94 53 0f 	jmp	0x1ea6	; 0x1ea6 <GetWheelSpeedEVA>
     22c:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <GetMotorCurrent>
     230:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <GetCruiseControlButtonStatus>
     234:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <AcceptDataGPSSpeed>
     238:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <GetFullPowerButtonStatus>
     23c:	0c 94 db 09 	jmp	0x13b6	; 0x13b6 <CoreAnalogTakeSnapshot485>
     240:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <Ctrl_putchar>
     244:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <AcceptDataGPSPosition>
     248:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <GetFuelCellCurrent>
     24c:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <GetMotorVoltage>
     250:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <GetSupercapVoltage>
     254:	0c 94 e9 2c 	jmp	0x59d2	; 0x59d2 <AcceptDataGPSDirection>
     258:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <GetMotorDriverTemp>

0000025c <__trampolines_end>:
     25c:	6e 61       	ori	r22, 0x1E	; 30
     25e:	6e 00       	.word	0x006e	; ????

00000260 <__c.2332>:
     260:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     270:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     280:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     290:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2a0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2b0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2c0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2d0:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2e0:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2f0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     300:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     310:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     320:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     330:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     340:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     350:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000035e <__ctors_end>:
     35e:	11 24       	eor	r1, r1
     360:	1f be       	out	0x3f, r1	; 63
     362:	cf ef       	ldi	r28, 0xFF	; 255
     364:	cd bf       	out	0x3d, r28	; 61
     366:	df e5       	ldi	r29, 0x5F	; 95
     368:	de bf       	out	0x3e, r29	; 62
     36a:	00 e0       	ldi	r16, 0x00	; 0
     36c:	0c bf       	out	0x3c, r16	; 60

0000036e <__do_copy_data>:
     36e:	17 e2       	ldi	r17, 0x27	; 39
     370:	a0 e0       	ldi	r26, 0x00	; 0
     372:	b0 e2       	ldi	r27, 0x20	; 32
     374:	ee e5       	ldi	r30, 0x5E	; 94
     376:	fc e7       	ldi	r31, 0x7C	; 124
     378:	00 e0       	ldi	r16, 0x00	; 0
     37a:	0b bf       	out	0x3b, r16	; 59
     37c:	02 c0       	rjmp	.+4      	; 0x382 <__do_copy_data+0x14>
     37e:	07 90       	elpm	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	a0 3a       	cpi	r26, 0xA0	; 160
     384:	b1 07       	cpc	r27, r17
     386:	d9 f7       	brne	.-10     	; 0x37e <__do_copy_data+0x10>

00000388 <__do_clear_bss>:
     388:	2e e2       	ldi	r18, 0x2E	; 46
     38a:	a0 ea       	ldi	r26, 0xA0	; 160
     38c:	b7 e2       	ldi	r27, 0x27	; 39
     38e:	01 c0       	rjmp	.+2      	; 0x392 <.do_clear_bss_start>

00000390 <.do_clear_bss_loop>:
     390:	1d 92       	st	X+, r1

00000392 <.do_clear_bss_start>:
     392:	a5 39       	cpi	r26, 0x95	; 149
     394:	b2 07       	cpc	r27, r18
     396:	e1 f7       	brne	.-8      	; 0x390 <.do_clear_bss_loop>
     398:	0e 94 07 06 	call	0xc0e	; 0xc0e <main>
     39c:	0c 94 2d 3e 	jmp	0x7c5a	; 0x7c5a <_exit>

000003a0 <__bad_interrupt>:
     3a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a4 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
     3a4:	0f 93       	push	r16
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	2f b7       	in	r18, 0x3f	; 63
     3b2:	29 83       	std	Y+1, r18	; 0x01
     3b4:	f8 94       	cli
     3b6:	1b be       	out	0x3b, r1	; 59
     3b8:	fc 01       	movw	r30, r24
     3ba:	08 ed       	ldi	r16, 0xD8	; 216
     3bc:	04 bf       	out	0x34, r16	; 52
     3be:	60 83       	st	Z, r22
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	8f bf       	out	0x3f, r24	; 63
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	0f 91       	pop	r16
     3cc:	08 95       	ret

000003ce <CLKSYS_XOSC_Config>:
     3ce:	61 11       	cpse	r22, r1
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <CLKSYS_XOSC_Config+0x8>
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <CLKSYS_XOSC_Config+0xa>
     3d6:	90 e2       	ldi	r25, 0x20	; 32
     3d8:	84 2b       	or	r24, r20
     3da:	89 2b       	or	r24, r25
     3dc:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
     3e0:	08 95       	ret

000003e2 <CLKSYS_PLL_Config>:
     3e2:	6f 71       	andi	r22, 0x1F	; 31
     3e4:	86 2b       	or	r24, r22
     3e6:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
     3ea:	08 95       	ret

000003ec <CLKSYS_Disable>:
     3ec:	e0 e5       	ldi	r30, 0x50	; 80
     3ee:	f0 e0       	ldi	r31, 0x00	; 0
     3f0:	90 81       	ld	r25, Z
     3f2:	28 2f       	mov	r18, r24
     3f4:	20 95       	com	r18
     3f6:	92 23       	and	r25, r18
     3f8:	90 83       	st	Z, r25
     3fa:	90 81       	ld	r25, Z
     3fc:	89 23       	and	r24, r25
     3fe:	08 95       	ret

00000400 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     408:	00 e4       	ldi	r16, 0x40	; 64
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	f8 01       	movw	r30, r16
     40e:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
     410:	68 7f       	andi	r22, 0xF8	; 248
     412:	68 2b       	or	r22, r24
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     41c:	f8 01       	movw	r30, r16
     41e:	80 81       	ld	r24, Z
	return clkCtrl;
}
     420:	8c 23       	and	r24, r28
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <InitSlave>:
 *
 */
void freeSlave (){

	free(sOwnSensor);
	free(sWantedSensor);
     42a:	80 93 fb 27 	sts	0x27FB, r24	; 0x8027fb <sMyAdress>
     42e:	90 93 fc 27 	sts	0x27FC, r25	; 0x8027fc <sMyAdress+0x1>
     432:	10 92 f9 27 	sts	0x27F9, r1	; 0x8027f9 <sNumOwnSensor>
     436:	10 92 fa 27 	sts	0x27FA, r1	; 0x8027fa <sNumOwnSensor+0x1>
     43a:	10 92 f7 27 	sts	0x27F7, r1	; 0x8027f7 <sNumWantedSensor>
     43e:	10 92 f8 27 	sts	0x27F8, r1	; 0x8027f8 <sNumWantedSensor+0x1>
     442:	10 92 f5 27 	sts	0x27F5, r1	; 0x8027f5 <sOwnSensor>
     446:	10 92 f6 27 	sts	0x27F6, r1	; 0x8027f6 <sOwnSensor+0x1>
     44a:	10 92 f3 27 	sts	0x27F3, r1	; 0x8027f3 <sWantedSensor>
     44e:	10 92 f4 27 	sts	0x27F4, r1	; 0x8027f4 <sWantedSensor+0x1>
     452:	08 95       	ret

00000454 <AddSlaveOwnSensor>:
     454:	8f 92       	push	r8
     456:	9f 92       	push	r9
     458:	af 92       	push	r10
     45a:	bf 92       	push	r11
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	4c 01       	movw	r8, r24
     46e:	6b 01       	movw	r12, r22
     470:	5a 01       	movw	r10, r20
     472:	79 01       	movw	r14, r18
     474:	00 91 f9 27 	lds	r16, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     478:	10 91 fa 27 	lds	r17, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     47c:	0f 5f       	subi	r16, 0xFF	; 255
     47e:	1f 4f       	sbci	r17, 0xFF	; 255
     480:	8b e0       	ldi	r24, 0x0B	; 11
     482:	80 9f       	mul	r24, r16
     484:	e0 01       	movw	r28, r0
     486:	81 9f       	mul	r24, r17
     488:	d0 0d       	add	r29, r0
     48a:	11 24       	eor	r1, r1
     48c:	be 01       	movw	r22, r28
     48e:	80 91 f5 27 	lds	r24, 0x27F5	; 0x8027f5 <sOwnSensor>
     492:	90 91 f6 27 	lds	r25, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     496:	0e 94 32 39 	call	0x7264	; 0x7264 <realloc>
     49a:	80 93 f5 27 	sts	0x27F5, r24	; 0x8027f5 <sOwnSensor>
     49e:	90 93 f6 27 	sts	0x27F6, r25	; 0x8027f6 <sOwnSensor+0x1>
     4a2:	00 97       	sbiw	r24, 0x00	; 0
     4a4:	b9 f0       	breq	.+46     	; 0x4d4 <AddSlaveOwnSensor+0x80>
     4a6:	2b 97       	sbiw	r28, 0x0b	; 11
     4a8:	c8 0f       	add	r28, r24
     4aa:	d9 1f       	adc	r29, r25
     4ac:	44 e0       	ldi	r20, 0x04	; 4
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	b4 01       	movw	r22, r8
     4b2:	ce 01       	movw	r24, r28
     4b4:	0e 94 48 3c 	call	0x7890	; 0x7890 <strncpy>
     4b8:	1c 82       	std	Y+4, r1	; 0x04
     4ba:	a9 86       	std	Y+9, r10	; 0x09
     4bc:	ba 86       	std	Y+10, r11	; 0x0a
     4be:	cf 82       	std	Y+7, r12	; 0x07
     4c0:	d8 86       	std	Y+8, r13	; 0x08
     4c2:	ed 82       	std	Y+5, r14	; 0x05
     4c4:	fe 82       	std	Y+6, r15	; 0x06
     4c6:	00 93 f9 27 	sts	0x27F9, r16	; 0x8027f9 <sNumOwnSensor>
     4ca:	10 93 fa 27 	sts	0x27FA, r17	; 0x8027fa <sNumOwnSensor+0x1>
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <AddSlaveOwnSensor+0x84>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	df 90       	pop	r13
     4e6:	cf 90       	pop	r12
     4e8:	bf 90       	pop	r11
     4ea:	af 90       	pop	r10
     4ec:	9f 90       	pop	r9
     4ee:	8f 90       	pop	r8
     4f0:	08 95       	ret

000004f2 <AddWantedSensor>:
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	5c 01       	movw	r10, r24
     508:	6b 01       	movw	r12, r22
     50a:	e0 90 f7 27 	lds	r14, 0x27F7	; 0x8027f7 <sNumWantedSensor>
     50e:	f0 90 f8 27 	lds	r15, 0x27F8	; 0x8027f8 <sNumWantedSensor+0x1>
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	e8 1a       	sub	r14, r24
     516:	f8 0a       	sbc	r15, r24
     518:	87 01       	movw	r16, r14
     51a:	00 0f       	add	r16, r16
     51c:	11 1f       	adc	r17, r17
     51e:	00 0f       	add	r16, r16
     520:	11 1f       	adc	r17, r17
     522:	00 0f       	add	r16, r16
     524:	11 1f       	adc	r17, r17
     526:	0e 19       	sub	r16, r14
     528:	1f 09       	sbc	r17, r15
     52a:	b8 01       	movw	r22, r16
     52c:	80 91 f3 27 	lds	r24, 0x27F3	; 0x8027f3 <sWantedSensor>
     530:	90 91 f4 27 	lds	r25, 0x27F4	; 0x8027f4 <sWantedSensor+0x1>
     534:	0e 94 32 39 	call	0x7264	; 0x7264 <realloc>
     538:	80 93 f3 27 	sts	0x27F3, r24	; 0x8027f3 <sWantedSensor>
     53c:	90 93 f4 27 	sts	0x27F4, r25	; 0x8027f4 <sWantedSensor+0x1>
     540:	00 97       	sbiw	r24, 0x00	; 0
     542:	a9 f0       	breq	.+42     	; 0x56e <AddWantedSensor+0x7c>
     544:	07 50       	subi	r16, 0x07	; 7
     546:	11 09       	sbc	r17, r1
     548:	ec 01       	movw	r28, r24
     54a:	c0 0f       	add	r28, r16
     54c:	d1 1f       	adc	r29, r17
     54e:	44 e0       	ldi	r20, 0x04	; 4
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	b5 01       	movw	r22, r10
     554:	ce 01       	movw	r24, r28
     556:	0e 94 48 3c 	call	0x7890	; 0x7890 <strncpy>
     55a:	1c 82       	std	Y+4, r1	; 0x04
     55c:	cd 82       	std	Y+5, r12	; 0x05
     55e:	de 82       	std	Y+6, r13	; 0x06
     560:	e0 92 f7 27 	sts	0x27F7, r14	; 0x8027f7 <sNumWantedSensor>
     564:	f0 92 f8 27 	sts	0x27F8, r15	; 0x8027f8 <sNumWantedSensor+0x1>
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <AddWantedSensor+0x80>
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	08 95       	ret

00000588 <HandleSnapshot>:
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
    }
}

//update value of sensors of sensors of a slave
void HandleSnapshot(){
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     590:	80 91 f9 27 	lds	r24, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     594:	90 91 fa 27 	lds	r25, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     598:	18 16       	cp	r1, r24
     59a:	19 06       	cpc	r1, r25
     59c:	e4 f4       	brge	.+56     	; 0x5d6 <HandleSnapshot+0x4e>
     59e:	00 e0       	ldi	r16, 0x00	; 0
     5a0:	10 e0       	ldi	r17, 0x00	; 0
     5a2:	c0 e0       	ldi	r28, 0x00	; 0
     5a4:	d0 e0       	ldi	r29, 0x00	; 0
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
     5a6:	80 91 f5 27 	lds	r24, 0x27F5	; 0x8027f5 <sOwnSensor>
     5aa:	90 91 f6 27 	lds	r25, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     5ae:	80 0f       	add	r24, r16
     5b0:	91 1f       	adc	r25, r17
     5b2:	dc 01       	movw	r26, r24
     5b4:	19 96       	adiw	r26, 0x09	; 9
     5b6:	ed 91       	ld	r30, X+
     5b8:	fc 91       	ld	r31, X
     5ba:	1a 97       	sbiw	r26, 0x0a	; 10
     5bc:	30 97       	sbiw	r30, 0x00	; 0
     5be:	09 f0       	breq	.+2      	; 0x5c2 <HandleSnapshot+0x3a>
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
     5c0:	19 95       	eicall
//update value of sensors of sensors of a slave
void HandleSnapshot(){

	int sensorIndex;

	for(sensorIndex=0; sensorIndex < sNumOwnSensor; sensorIndex++){
     5c2:	21 96       	adiw	r28, 0x01	; 1
     5c4:	05 5f       	subi	r16, 0xF5	; 245
     5c6:	1f 4f       	sbci	r17, 0xFF	; 255
     5c8:	80 91 f9 27 	lds	r24, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     5cc:	90 91 fa 27 	lds	r25, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     5d0:	c8 17       	cp	r28, r24
     5d2:	d9 07       	cpc	r29, r25
     5d4:	44 f3       	brlt	.-48     	; 0x5a6 <HandleSnapshot+0x1e>
		if(sOwnSensor[sensorIndex].fpTakeSnapshot != NULL)
			sOwnSensor[sensorIndex].fpTakeSnapshot(sOwnSensor[sensorIndex].subadress);
	}
}
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	08 95       	ret

000005e0 <HandleCmdS>:
 *
 * \param 1 response      :  the buffer where the response is saved
 * \param 2 dataFromMaster: the received message from the master
 *
 */
static void HandleCmdS(char* response, char* dataFromMaster){
     5e0:	9f 92       	push	r9
     5e2:	af 92       	push	r10
     5e4:	bf 92       	push	r11
     5e6:	cf 92       	push	r12
     5e8:	df 92       	push	r13
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	25 97       	sbiw	r28, 0x05	; 5
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	d8 2e       	mov	r13, r24
     602:	c9 2e       	mov	r12, r25
     604:	8b 01       	movw	r16, r22
	int position=0, err =0;
	char adr[SUBADR_LENG];

	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
     606:	68 5f       	subi	r22, 0xF8	; 248
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	44 e0       	ldi	r20, 0x04	; 4
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	ce 01       	movw	r24, r28
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	0e 94 48 3c 	call	0x7890	; 0x7890 <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     616:	1d 82       	std	Y+5, r1	; 0x05

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){
     618:	44 e0       	ldi	r20, 0x04	; 4
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	64 ec       	ldi	r22, 0xC4	; 196
     61e:	70 e2       	ldi	r23, 0x20	; 32
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	0e 94 3a 3c 	call	0x7874	; 0x7874 <strncmp>
     628:	89 2b       	or	r24, r25
     62a:	41 f0       	breq	.+16     	; 0x63c <HandleCmdS+0x5c>

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     62c:	40 91 f7 27 	lds	r20, 0x27F7	; 0x8027f7 <sNumWantedSensor>
     630:	50 91 f8 27 	lds	r21, 0x27F8	; 0x8027f8 <sNumWantedSensor+0x1>
     634:	14 16       	cp	r1, r20
     636:	15 06       	cpc	r1, r21
     638:	24 f0       	brlt	.+8      	; 0x642 <HandleCmdS+0x62>
     63a:	80 c0       	rjmp	.+256    	; 0x73c <HandleCmdS+0x15c>
	strncpy(adr,dataFromMaster + SENSADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

	if(strncmp(adr,"SN00",SUBADR_LENG-1)==0){

		HandleSnapshot();
     63c:	0e 94 c4 02 	call	0x588	; 0x588 <HandleSnapshot>
     640:	99 c0       	rjmp	.+306    	; 0x774 <HandleCmdS+0x194>
static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
		if(/*!strncmp(adressSensor,sWantedSensor[i].subadress,SUBADR_LENG-1)*/ FindSensorOK( adressSensor, sWantedSensor[i].subadress )){
     642:	a0 90 f3 27 	lds	r10, 0x27F3	; 0x8027f3 <sWantedSensor>
     646:	b0 90 f4 27 	lds	r11, 0x27F4	; 0x8027f4 <sWantedSensor+0x1>
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     64a:	39 81       	ldd	r19, Y+1	; 0x01
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     64c:	6a 81       	ldd	r22, Y+2	; 0x02
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     64e:	7b 81       	ldd	r23, Y+3	; 0x03
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     650:	9c 80       	ldd	r9, Y+4	; 0x04
     652:	f5 01       	movw	r30, r10
     654:	ee 24       	eor	r14, r14
     656:	ea 94       	dec	r14
     658:	fe 2c       	mov	r15, r14
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	df 01       	movw	r26, r30
 */

static uint8_t FindSensorOK( char *subadres, char *sensor ){
	uint8_t err = 0;

	if( sensor[0] == '*' || sensor[0] == subadres[0] ){
     660:	20 81       	ld	r18, Z
     662:	2a 32       	cpi	r18, 0x2A	; 42
     664:	11 f0       	breq	.+4      	; 0x66a <HandleCmdS+0x8a>
     666:	23 13       	cpse	r18, r19
     668:	17 c0       	rjmp	.+46     	; 0x698 <HandleCmdS+0xb8>
		if( sensor[1] == '*' || sensor[1] == subadres[1] ){
     66a:	11 96       	adiw	r26, 0x01	; 1
     66c:	2c 91       	ld	r18, X
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	2a 32       	cpi	r18, 0x2A	; 42
     672:	11 f0       	breq	.+4      	; 0x678 <HandleCmdS+0x98>
     674:	26 13       	cpse	r18, r22
     676:	10 c0       	rjmp	.+32     	; 0x698 <HandleCmdS+0xb8>
			if( sensor[2] == '*' || sensor[2] == subadres[2] ){
     678:	12 96       	adiw	r26, 0x02	; 2
     67a:	2c 91       	ld	r18, X
     67c:	12 97       	sbiw	r26, 0x02	; 2
     67e:	2a 32       	cpi	r18, 0x2A	; 42
     680:	11 f0       	breq	.+4      	; 0x686 <HandleCmdS+0xa6>
     682:	27 13       	cpse	r18, r23
     684:	09 c0       	rjmp	.+18     	; 0x698 <HandleCmdS+0xb8>
				if( sensor[3] == '*' || sensor[3] == subadres[3] ){
     686:	13 96       	adiw	r26, 0x03	; 3
     688:	2c 91       	ld	r18, X
     68a:	2a 32       	cpi	r18, 0x2A	; 42
     68c:	21 f0       	breq	.+8      	; 0x696 <HandleCmdS+0xb6>
     68e:	29 11       	cpse	r18, r9
     690:	03 c0       	rjmp	.+6      	; 0x698 <HandleCmdS+0xb8>
     692:	7c 01       	movw	r14, r24
     694:	01 c0       	rjmp	.+2      	; 0x698 <HandleCmdS+0xb8>
     696:	7c 01       	movw	r14, r24

static int FindWantedSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i<sNumWantedSensor;i++){
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	37 96       	adiw	r30, 0x07	; 7
     69c:	48 17       	cp	r20, r24
     69e:	59 07       	cpc	r21, r25
     6a0:	f1 f6       	brne	.-68     	; 0x65e <HandleCmdS+0x7e>

		HandleSnapshot();
	}
	else{
		position = FindWantedSensorIndex(adr);
		if(position != -1){
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	e8 16       	cp	r14, r24
     6a6:	f8 06       	cpc	r15, r24
     6a8:	09 f4       	brne	.+2      	; 0x6ac <HandleCmdS+0xcc>
     6aa:	48 c0       	rjmp	.+144    	; 0x73c <HandleCmdS+0x15c>
			err = (*sWantedSensor[position].fpSetData)(adr,dataFromMaster + SETDATA_POS);
     6ac:	b8 01       	movw	r22, r16
     6ae:	64 5f       	subi	r22, 0xF4	; 244
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	c7 01       	movw	r24, r14
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	8e 19       	sub	r24, r14
     6c2:	9f 09       	sbc	r25, r15
     6c4:	f5 01       	movw	r30, r10
     6c6:	e8 0f       	add	r30, r24
     6c8:	f9 1f       	adc	r31, r25
     6ca:	05 80       	ldd	r0, Z+5	; 0x05
     6cc:	f6 81       	ldd	r31, Z+6	; 0x06
     6ce:	e0 2d       	mov	r30, r0
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	19 95       	eicall

			if(err==0){
     6d6:	89 2b       	or	r24, r25
     6d8:	a1 f4       	brne	.+40     	; 0x702 <HandleCmdS+0x122>
				snprintf(response,MAXDATA-1,"$%03dSOK",sMyAdress);
     6da:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     6de:	8f 93       	push	r24
     6e0:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     6e4:	8f 93       	push	r24
     6e6:	89 ec       	ldi	r24, 0xC9	; 201
     6e8:	90 e2       	ldi	r25, 0x20	; 32
     6ea:	9f 93       	push	r25
     6ec:	8f 93       	push	r24
     6ee:	1f 92       	push	r1
     6f0:	8d e4       	ldi	r24, 0x4D	; 77
     6f2:	8f 93       	push	r24
     6f4:	cf 92       	push	r12
     6f6:	df 92       	push	r13
     6f8:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
     6fc:	cd bf       	out	0x3d, r28	; 61
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	39 c0       	rjmp	.+114    	; 0x774 <HandleCmdS+0x194>
			}
			else{
				snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault'",sMyAdress);
     702:	ed 2d       	mov	r30, r13
     704:	fc 2d       	mov	r31, r12
     706:	df 01       	movw	r26, r30
     708:	0d 90       	ld	r0, X+
     70a:	00 20       	and	r0, r0
     70c:	e9 f7       	brne	.-6      	; 0x708 <HandleCmdS+0x128>
     70e:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     712:	8f 93       	push	r24
     714:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     718:	8f 93       	push	r24
     71a:	82 ed       	ldi	r24, 0xD2	; 210
     71c:	90 e2       	ldi	r25, 0x20	; 32
     71e:	9f 93       	push	r25
     720:	8f 93       	push	r24
     722:	ea 1b       	sub	r30, r26
     724:	fb 0b       	sbc	r31, r27
     726:	e1 5b       	subi	r30, 0xB1	; 177
     728:	ff 4f       	sbci	r31, 0xFF	; 255
     72a:	ff 93       	push	r31
     72c:	ef 93       	push	r30
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
     736:	cd bf       	out	0x3d, r28	; 61
     738:	de bf       	out	0x3e, r29	; 62
     73a:	1c c0       	rjmp	.+56     	; 0x774 <HandleCmdS+0x194>
			}
		}
		else{
			snprintf(response,MAXDATA-strlen(response),"$%03dSF'Fault wrong sensor'",sMyAdress);
     73c:	ed 2d       	mov	r30, r13
     73e:	fc 2d       	mov	r31, r12
     740:	df 01       	movw	r26, r30
     742:	0d 90       	ld	r0, X+
     744:	00 20       	and	r0, r0
     746:	e9 f7       	brne	.-6      	; 0x742 <HandleCmdS+0x162>
     748:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     74c:	8f 93       	push	r24
     74e:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     752:	8f 93       	push	r24
     754:	81 ee       	ldi	r24, 0xE1	; 225
     756:	90 e2       	ldi	r25, 0x20	; 32
     758:	9f 93       	push	r25
     75a:	8f 93       	push	r24
     75c:	ea 1b       	sub	r30, r26
     75e:	fb 0b       	sbc	r31, r27
     760:	e1 5b       	subi	r30, 0xB1	; 177
     762:	ff 4f       	sbci	r31, 0xFF	; 255
     764:	ff 93       	push	r31
     766:	ef 93       	push	r30
     768:	cf 92       	push	r12
     76a:	df 92       	push	r13
     76c:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
     770:	cd bf       	out	0x3d, r28	; 61
     772:	de bf       	out	0x3e, r29	; 62
		}
	}
}
     774:	25 96       	adiw	r28, 0x05	; 5
     776:	cd bf       	out	0x3d, r28	; 61
     778:	de bf       	out	0x3e, r29	; 62
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	bf 90       	pop	r11
     78c:	af 90       	pop	r10
     78e:	9f 90       	pop	r9
     790:	08 95       	ret

00000792 <SendLineRS485>:
 *
 * \param 1 data : data from the slave
 *
 */

void SendLineRS485(char* data){
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
	int i;
	
	while(*data != '\0'){
     798:	07 c0       	rjmp	.+14     	; 0x7a8 <SendLineRS485+0x16>
		WriteByte_Comm485(*data++);
     79a:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <WriteByte_Comm485>
     79e:	86 e6       	ldi	r24, 0x66	; 102
     7a0:	94 e0       	ldi	r25, 0x04	; 4
		for(i = 0; i <= 1125; i++){
			asm volatile("nop");
     7a2:	00 00       	nop
     7a4:	01 97       	sbiw	r24, 0x01	; 1
void SendLineRS485(char* data){
	int i;
	
	while(*data != '\0'){
		WriteByte_Comm485(*data++);
		for(i = 0; i <= 1125; i++){
     7a6:	e9 f7       	brne	.-6      	; 0x7a2 <SendLineRS485+0x10>
 */

void SendLineRS485(char* data){
	int i;
	
	while(*data != '\0'){
     7a8:	89 91       	ld	r24, Y+
     7aa:	81 11       	cpse	r24, r1
     7ac:	f6 cf       	rjmp	.-20     	; 0x79a <SendLineRS485+0x8>
		for(i = 0; i <= 1125; i++){
			asm volatile("nop");
		}
	}
	// add \r\n to the sentence
	WriteByte_Comm485(0x0D);
     7ae:	8d e0       	ldi	r24, 0x0D	; 13
     7b0:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <WriteByte_Comm485>
	WriteByte_Comm485(0x0A);
     7b4:	8a e0       	ldi	r24, 0x0A	; 10
     7b6:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <WriteByte_Comm485>
}
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <ReadLineRS45>:
 *
 * \param 1 data : data from the master
 *
 */

uint8_t ReadLineRS45( char *Data ){
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	ec 01       	movw	r28, r24
	static char getKarakter;
	uint8_t len, returnValue = 0;
     7c8:	10 e0       	ldi	r17, 0x00	; 0

	while( CanRead_Comm485() != 0 && returnValue == 0 ){
     7ca:	20 c0       	rjmp	.+64     	; 0x80c <ReadLineRS45+0x4c>
		getKarakter = (char )ReadByte_Comm485();
     7cc:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <ReadByte_Comm485>
		if( getKarakter == SLAVESENTENCE || getKarakter == MASTERSENTENCE ){
     7d0:	9d ed       	ldi	r25, 0xDD	; 221
     7d2:	98 0f       	add	r25, r24
     7d4:	92 30       	cpi	r25, 0x02	; 2
     7d6:	18 f4       	brcc	.+6      	; 0x7de <ReadLineRS45+0x1e>
			Data[0] = getKarakter;
     7d8:	88 83       	st	Y, r24
			Data[1] = '\0';
     7da:	19 82       	std	Y+1, r1	; 0x01
     7dc:	17 c0       	rjmp	.+46     	; 0x80c <ReadLineRS45+0x4c>
		}
		else if( Data[0] == SLAVESENTENCE || Data[0] == MASTERSENTENCE ){
     7de:	98 81       	ld	r25, Y
     7e0:	93 52       	subi	r25, 0x23	; 35
     7e2:	92 30       	cpi	r25, 0x02	; 2
     7e4:	98 f4       	brcc	.+38     	; 0x80c <ReadLineRS45+0x4c>
			len = strlen(Data);
     7e6:	fe 01       	movw	r30, r28
     7e8:	01 90       	ld	r0, Z+
     7ea:	00 20       	and	r0, r0
     7ec:	e9 f7       	brne	.-6      	; 0x7e8 <ReadLineRS45+0x28>
     7ee:	31 97       	sbiw	r30, 0x01	; 1
     7f0:	ec 1b       	sub	r30, r28
     7f2:	fd 0b       	sbc	r31, r29
			if(len < MAXCHARACTERSSENTENCE - 1) {
     7f4:	e2 35       	cpi	r30, 0x52	; 82
     7f6:	50 f4       	brcc	.+20     	; 0x80c <ReadLineRS45+0x4c>
				Data[len] = getKarakter;
     7f8:	9e 01       	movw	r18, r28
     7fa:	2e 0f       	add	r18, r30
     7fc:	31 1d       	adc	r19, r1
     7fe:	f9 01       	movw	r30, r18
     800:	80 83       	st	Z, r24
				Data[len + 1] = '\0';
     802:	11 82       	std	Z+1, r1	; 0x01
 *
 */

uint8_t ReadLineRS45( char *Data ){
	static char getKarakter;
	uint8_t len, returnValue = 0;
     804:	11 e0       	ldi	r17, 0x01	; 1
     806:	8a 30       	cpi	r24, 0x0A	; 10
     808:	09 f0       	breq	.+2      	; 0x80c <ReadLineRS45+0x4c>
     80a:	10 e0       	ldi	r17, 0x00	; 0

	while( CanRead_Comm485() != 0 && returnValue == 0 ){
     80c:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <CanRead_Comm485>
     810:	88 23       	and	r24, r24
     812:	11 f0       	breq	.+4      	; 0x818 <ReadLineRS45+0x58>
     814:	11 23       	and	r17, r17
     816:	d1 f2       	breq	.-76     	; 0x7cc <ReadLineRS45+0xc>
				}
			}			
		}
	}
	return returnValue;
}
     818:	81 2f       	mov	r24, r17
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	08 95       	ret

00000822 <ScanDataInSlave>:
 * \return 0: if there is a fault in the adress of the slave
 *            or the checksum of the master or the message is not from the master
 *            else
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
     822:	4f 92       	push	r4
     824:	5f 92       	push	r5
     826:	6f 92       	push	r6
     828:	7f 92       	push	r7
     82a:	8f 92       	push	r8
     82c:	9f 92       	push	r9
     82e:	af 92       	push	r10
     830:	bf 92       	push	r11
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	25 97       	sbiw	r28, 0x05	; 5
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	8c 01       	movw	r16, r24
 * \return adress of the slave in integer
 *
 */
static int GetAdressFromMaster (char* dataMaster){

   return strtol(dataMaster + 1,NULL,10);
     84e:	4a e0       	ldi	r20, 0x0A	; 10
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	0e 94 17 3a 	call	0x742e	; 0x742e <strtol>
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     85c:	f8 01       	movw	r30, r16
     85e:	20 81       	ld	r18, Z
     860:	23 32       	cpi	r18, 0x23	; 35
     862:	09 f0       	breq	.+2      	; 0x866 <ScanDataInSlave+0x44>
     864:	bd c1       	rjmp	.+890    	; 0xbe0 <ScanDataInSlave+0x3be>
 * \return 1
 */
uint8_t ScanDataInSlave (char* dataFromMaster){
	int err = 0;
    int adress = GetAdressFromMaster(dataFromMaster);
    char cmd = dataFromMaster[COMMAND];
     866:	84 81       	ldd	r24, Z+4	; 0x04
	 * check if the adress from the master is for the broadcast ('000') or not
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
     868:	e0 90 fb 27 	lds	r14, 0x27FB	; 0x8027fb <sMyAdress>
     86c:	f0 90 fc 27 	lds	r15, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     870:	e6 16       	cp	r14, r22
     872:	f7 06       	cpc	r15, r23
     874:	19 f0       	breq	.+6      	; 0x87c <ScanDataInSlave+0x5a>
     876:	67 2b       	or	r22, r23
     878:	21 f0       	breq	.+8      	; 0x882 <ScanDataInSlave+0x60>
     87a:	b4 c1       	rjmp	.+872    	; 0xbe4 <ScanDataInSlave+0x3c2>
       err = 0;
    }
    else{
	 if(adress == BROADCAST) {
     87c:	e1 14       	cp	r14, r1
     87e:	f1 04       	cpc	r15, r1
     880:	49 f4       	brne	.+18     	; 0x894 <ScanDataInSlave+0x72>
		if(cmd =='S'){
     882:	83 35       	cpi	r24, 0x53	; 83
     884:	09 f0       	breq	.+2      	; 0x888 <ScanDataInSlave+0x66>
     886:	a8 c1       	rjmp	.+848    	; 0xbd8 <ScanDataInSlave+0x3b6>
			HandleCmdS(responseSlave,dataFromMaster);
     888:	b8 01       	movw	r22, r16
     88a:	80 ea       	ldi	r24, 0xA0	; 160
     88c:	97 e2       	ldi	r25, 0x27	; 39
     88e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <HandleCmdS>
     892:	a2 c1       	rjmp	.+836    	; 0xbd8 <ScanDataInSlave+0x3b6>
		}
		err =1;
	 }
	 else{

      switch(cmd){
     894:	89 34       	cpi	r24, 0x49	; 73
     896:	01 f1       	breq	.+64     	; 0x8d8 <ScanDataInSlave+0xb6>
     898:	30 f4       	brcc	.+12     	; 0x8a6 <ScanDataInSlave+0x84>
     89a:	81 34       	cpi	r24, 0x41	; 65
     89c:	59 f0       	breq	.+22     	; 0x8b4 <ScanDataInSlave+0x92>
     89e:	87 34       	cpi	r24, 0x47	; 71
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <ScanDataInSlave+0x82>
     8a2:	c5 c0       	rjmp	.+394    	; 0xa2e <ScanDataInSlave+0x20c>
     8a4:	66 c1       	rjmp	.+716    	; 0xb72 <ScanDataInSlave+0x350>
     8a6:	83 35       	cpi	r24, 0x53	; 83
     8a8:	09 f4       	brne	.+2      	; 0x8ac <ScanDataInSlave+0x8a>
     8aa:	5e c1       	rjmp	.+700    	; 0xb68 <ScanDataInSlave+0x346>
     8ac:	87 35       	cpi	r24, 0x57	; 87
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <ScanDataInSlave+0x90>
     8b0:	69 c0       	rjmp	.+210    	; 0x984 <ScanDataInSlave+0x162>
     8b2:	5f c1       	rjmp	.+702    	; 0xb72 <ScanDataInSlave+0x350>
 * \param 1 response : the buffer where the response is saved
 *
 */
static void HandleCmdA(char* response){

    snprintf(response,MAXDATA-1,"$%03dA'Slave available'",sMyAdress);
     8b4:	ff 92       	push	r15
     8b6:	ef 92       	push	r14
     8b8:	8d ef       	ldi	r24, 0xFD	; 253
     8ba:	90 e2       	ldi	r25, 0x20	; 32
     8bc:	9f 93       	push	r25
     8be:	8f 93       	push	r24
     8c0:	1f 92       	push	r1
     8c2:	8d e4       	ldi	r24, 0x4D	; 77
     8c4:	8f 93       	push	r24
     8c6:	80 ea       	ldi	r24, 0xA0	; 160
     8c8:	97 e2       	ldi	r25, 0x27	; 39
     8ca:	9f 93       	push	r25
     8cc:	8f 93       	push	r24
     8ce:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	4d c1       	rjmp	.+666    	; 0xb72 <ScanDataInSlave+0x350>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     8d8:	4a e0       	ldi	r20, 0x0A	; 10
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	c8 01       	movw	r24, r16
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	0e 94 17 3a 	call	0x742e	; 0x742e <strtol>
static void HandleCmdI(char* response, char* dataFromMaster){
	static int index =0;

	index = GetIndexFromMaster(dataFromMaster);

    if(index > 0 && index <= sNumOwnSensor) {
     8e8:	16 16       	cp	r1, r22
     8ea:	17 06       	cpc	r1, r23
     8ec:	b4 f5       	brge	.+108    	; 0x95a <ScanDataInSlave+0x138>
     8ee:	40 91 f9 27 	lds	r20, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     8f2:	50 91 fa 27 	lds	r21, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     8f6:	46 17       	cp	r20, r22
     8f8:	57 07       	cpc	r21, r23
     8fa:	7c f1       	brlt	.+94     	; 0x95a <ScanDataInSlave+0x138>
        snprintf(response,MAXDATA-1,"$%03dI%02d%s,%02d'Sensor %d'",sMyAdress,index,sOwnSensor[index-1].subadress,sOwnSensor[index-1].measure_interval,index);
     8fc:	2b e0       	ldi	r18, 0x0B	; 11
     8fe:	26 9f       	mul	r18, r22
     900:	f0 01       	movw	r30, r0
     902:	27 9f       	mul	r18, r23
     904:	f0 0d       	add	r31, r0
     906:	11 24       	eor	r1, r1
     908:	9f 01       	movw	r18, r30
     90a:	2b 50       	subi	r18, 0x0B	; 11
     90c:	31 09       	sbc	r19, r1
     90e:	e0 91 f5 27 	lds	r30, 0x27F5	; 0x8027f5 <sOwnSensor>
     912:	f0 91 f6 27 	lds	r31, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     916:	e2 0f       	add	r30, r18
     918:	f3 1f       	adc	r31, r19
     91a:	7f 93       	push	r23
     91c:	6f 93       	push	r22
     91e:	26 81       	ldd	r18, Z+6	; 0x06
     920:	2f 93       	push	r18
     922:	25 81       	ldd	r18, Z+5	; 0x05
     924:	2f 93       	push	r18
     926:	ff 93       	push	r31
     928:	ef 93       	push	r30
     92a:	7f 93       	push	r23
     92c:	6f 93       	push	r22
     92e:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     932:	8f 93       	push	r24
     934:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     938:	8f 93       	push	r24
     93a:	85 e1       	ldi	r24, 0x15	; 21
     93c:	91 e2       	ldi	r25, 0x21	; 33
     93e:	9f 93       	push	r25
     940:	8f 93       	push	r24
     942:	1f 92       	push	r1
     944:	8d e4       	ldi	r24, 0x4D	; 77
     946:	8f 93       	push	r24
     948:	80 ea       	ldi	r24, 0xA0	; 160
     94a:	97 e2       	ldi	r25, 0x27	; 39
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
     954:	cd bf       	out	0x3d, r28	; 61
     956:	de bf       	out	0x3e, r29	; 62
     958:	0c c1       	rjmp	.+536    	; 0xb72 <ScanDataInSlave+0x350>
    }
// the slave sends 0000,0000 if all the sensors that exists are already given
    else{
        sprintf(response,"$%03dI%02d0000,0000'No sensor'", sMyAdress,index);
     95a:	7f 93       	push	r23
     95c:	6f 93       	push	r22
     95e:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     962:	8f 93       	push	r24
     964:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     968:	8f 93       	push	r24
     96a:	82 e3       	ldi	r24, 0x32	; 50
     96c:	91 e2       	ldi	r25, 0x21	; 33
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	80 ea       	ldi	r24, 0xA0	; 160
     974:	97 e2       	ldi	r25, 0x27	; 39
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <sprintf>
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	de bf       	out	0x3e, r29	; 62
     982:	f7 c0       	rjmp	.+494    	; 0xb72 <ScanDataInSlave+0x350>
 * \param dataMaster:  the data from the master
 *
 * \return int: the index
 */
static int GetIndexFromMaster (char* dataFromMaster){
    return strtol(dataFromMaster + INDEX_SUBADR_POS,NULL,10);
     984:	4a e0       	ldi	r20, 0x0A	; 10
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	60 e0       	ldi	r22, 0x00	; 0
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	c8 01       	movw	r24, r16
     98e:	05 96       	adiw	r24, 0x05	; 5
     990:	0e 94 17 3a 	call	0x742e	; 0x742e <strtol>
     994:	9b 01       	movw	r18, r22
 */
static void HandleCmdW(char* response, char* dataFromMaster){

    int index = GetIndexFromMaster(dataFromMaster);

    if(index > 0 && index <= sNumWantedSensor){
     996:	16 16       	cp	r1, r22
     998:	17 06       	cpc	r1, r23
     99a:	8c f5       	brge	.+98     	; 0x9fe <ScanDataInSlave+0x1dc>
     99c:	40 91 f7 27 	lds	r20, 0x27F7	; 0x8027f7 <sNumWantedSensor>
     9a0:	50 91 f8 27 	lds	r21, 0x27F8	; 0x8027f8 <sNumWantedSensor+0x1>
     9a4:	46 17       	cp	r20, r22
     9a6:	57 07       	cpc	r21, r23
     9a8:	54 f1       	brlt	.+84     	; 0x9fe <ScanDataInSlave+0x1dc>
        snprintf(response,MAXDATA-1,"$%03dW%02d%s'Wants slave'",sMyAdress,index,sWantedSensor[index-1].subadress);
     9aa:	22 0f       	add	r18, r18
     9ac:	33 1f       	adc	r19, r19
     9ae:	22 0f       	add	r18, r18
     9b0:	33 1f       	adc	r19, r19
     9b2:	22 0f       	add	r18, r18
     9b4:	33 1f       	adc	r19, r19
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	27 50       	subi	r18, 0x07	; 7
     9bc:	31 09       	sbc	r19, r1
     9be:	40 91 f3 27 	lds	r20, 0x27F3	; 0x8027f3 <sWantedSensor>
     9c2:	50 91 f4 27 	lds	r21, 0x27F4	; 0x8027f4 <sWantedSensor+0x1>
     9c6:	24 0f       	add	r18, r20
     9c8:	35 1f       	adc	r19, r21
     9ca:	3f 93       	push	r19
     9cc:	2f 93       	push	r18
     9ce:	7f 93       	push	r23
     9d0:	6f 93       	push	r22
     9d2:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     9d6:	8f 93       	push	r24
     9d8:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     9dc:	8f 93       	push	r24
     9de:	81 e5       	ldi	r24, 0x51	; 81
     9e0:	91 e2       	ldi	r25, 0x21	; 33
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	1f 92       	push	r1
     9e8:	8d e4       	ldi	r24, 0x4D	; 77
     9ea:	8f 93       	push	r24
     9ec:	80 ea       	ldi	r24, 0xA0	; 160
     9ee:	97 e2       	ldi	r25, 0x27	; 39
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
     9f8:	cd bf       	out	0x3d, r28	; 61
     9fa:	de bf       	out	0x3e, r29	; 62
     9fc:	ba c0       	rjmp	.+372    	; 0xb72 <ScanDataInSlave+0x350>
    }
// the slave sends 0000 if all sensor that exists in the buffer are given
    else {
       snprintf(response,MAXDATA-1,"$%03dW%02d0000'All done'", sMyAdress,index);
     9fe:	7f 93       	push	r23
     a00:	6f 93       	push	r22
     a02:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     a06:	8f 93       	push	r24
     a08:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     a0c:	8f 93       	push	r24
     a0e:	8b e6       	ldi	r24, 0x6B	; 107
     a10:	91 e2       	ldi	r25, 0x21	; 33
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	1f 92       	push	r1
     a18:	8d e4       	ldi	r24, 0x4D	; 77
     a1a:	8f 93       	push	r24
     a1c:	80 ea       	ldi	r24, 0xA0	; 160
     a1e:	97 e2       	ldi	r25, 0x27	; 39
     a20:	9f 93       	push	r25
     a22:	8f 93       	push	r24
     a24:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	de bf       	out	0x3e, r29	; 62
     a2c:	a2 c0       	rjmp	.+324    	; 0xb72 <ScanDataInSlave+0x350>
 */
static void HandleCmdG(char* response, char* dataFromMaster){
    int sensorIndex, err;
    char adr[SUBADR_LENG];

    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
     a2e:	44 e0       	ldi	r20, 0x04	; 4
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	b8 01       	movw	r22, r16
     a34:	6b 5f       	subi	r22, 0xFB	; 251
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	ce 01       	movw	r24, r28
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	0e 94 48 3c 	call	0x7890	; 0x7890 <strncpy>
	adr[SUBADR_LENG-1] = '\0';
     a40:	1d 82       	std	Y+5, r1	; 0x05

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     a42:	80 90 f9 27 	lds	r8, 0x27F9	; 0x8027f9 <sNumOwnSensor>
     a46:	90 90 fa 27 	lds	r9, 0x27FA	; 0x8027fa <sNumOwnSensor+0x1>
     a4a:	18 14       	cp	r1, r8
     a4c:	19 04       	cpc	r1, r9
     a4e:	0c f0       	brlt	.+2      	; 0xa52 <ScanDataInSlave+0x230>
     a50:	78 c0       	rjmp	.+240    	; 0xb42 <ScanDataInSlave+0x320>
		if(!strncmp(adressSensor,sOwnSensor[i].subadress,strlen(adressSensor))){
     a52:	de 01       	movw	r26, r28
     a54:	11 96       	adiw	r26, 0x01	; 1
     a56:	fd 01       	movw	r30, r26
     a58:	01 90       	ld	r0, Z+
     a5a:	00 20       	and	r0, r0
     a5c:	e9 f7       	brne	.-6      	; 0xa58 <ScanDataInSlave+0x236>
     a5e:	31 97       	sbiw	r30, 0x01	; 1
     a60:	3f 01       	movw	r6, r30
     a62:	6a 1a       	sub	r6, r26
     a64:	7b 0a       	sbc	r7, r27
     a66:	a0 90 f5 27 	lds	r10, 0x27F5	; 0x8027f5 <sOwnSensor>
     a6a:	b0 90 f6 27 	lds	r11, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     a6e:	44 24       	eor	r4, r4
     a70:	4a 94       	dec	r4
     a72:	54 2c       	mov	r5, r4
     a74:	c1 2c       	mov	r12, r1
     a76:	d1 2c       	mov	r13, r1
     a78:	a3 01       	movw	r20, r6
     a7a:	b5 01       	movw	r22, r10
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 3a 3c 	call	0x7874	; 0x7874 <strncmp>
     a84:	89 2b       	or	r24, r25
     a86:	09 f4       	brne	.+2      	; 0xa8a <ScanDataInSlave+0x268>
     a88:	26 01       	movw	r4, r12

static int FindOwnSensorIndex(char *adressSensor){
	int i=0;
	int position = -1;

	for(i=0; i < sNumOwnSensor; i++){
     a8a:	9f ef       	ldi	r25, 0xFF	; 255
     a8c:	c9 1a       	sub	r12, r25
     a8e:	d9 0a       	sbc	r13, r25
     a90:	eb e0       	ldi	r30, 0x0B	; 11
     a92:	ae 0e       	add	r10, r30
     a94:	b1 1c       	adc	r11, r1
     a96:	c8 14       	cp	r12, r8
     a98:	d9 04       	cpc	r13, r9
     a9a:	71 f7       	brne	.-36     	; 0xa78 <ScanDataInSlave+0x256>
    strncpy(adr,dataFromMaster + INDEX_SUBADR_POS, SUBADR_LENG-1);
	adr[SUBADR_LENG-1] = '\0';

    sensorIndex = FindOwnSensorIndex(adr);

    if(sensorIndex !=-1){
     a9c:	ff ef       	ldi	r31, 0xFF	; 255
     a9e:	4f 16       	cp	r4, r31
     aa0:	5f 06       	cpc	r5, r31
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <ScanDataInSlave+0x284>
     aa4:	4e c0       	rjmp	.+156    	; 0xb42 <ScanDataInSlave+0x320>
		//sensorIndex is -1 if sensor not found
        sprintf(response,"$%03dG",sMyAdress);
     aa6:	ff 92       	push	r15
     aa8:	ef 92       	push	r14
     aaa:	84 e8       	ldi	r24, 0x84	; 132
     aac:	91 e2       	ldi	r25, 0x21	; 33
     aae:	9f 93       	push	r25
     ab0:	8f 93       	push	r24
     ab2:	0f 2e       	mov	r0, r31
     ab4:	f0 ea       	ldi	r31, 0xA0	; 160
     ab6:	ef 2e       	mov	r14, r31
     ab8:	f7 e2       	ldi	r31, 0x27	; 39
     aba:	ff 2e       	mov	r15, r31
     abc:	f0 2d       	mov	r31, r0
     abe:	ff 92       	push	r15
     ac0:	ef 92       	push	r14
     ac2:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <sprintf>
        err= sOwnSensor[sensorIndex].fpGetData(adr,response + strlen(response), MAXDATA-1-strlen(response) );
     ac6:	f7 01       	movw	r30, r14
     ac8:	01 90       	ld	r0, Z+
     aca:	00 20       	and	r0, r0
     acc:	e9 f7       	brne	.-6      	; 0xac8 <ScanDataInSlave+0x2a6>
     ace:	31 97       	sbiw	r30, 0x01	; 1
     ad0:	e0 5a       	subi	r30, 0xA0	; 160
     ad2:	f7 42       	sbci	r31, 0x27	; 39
     ad4:	4d e4       	ldi	r20, 0x4D	; 77
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	4e 1b       	sub	r20, r30
     ada:	5f 0b       	sbc	r21, r31
     adc:	bf 01       	movw	r22, r30
     ade:	60 56       	subi	r22, 0x60	; 96
     ae0:	78 4d       	sbci	r23, 0xD8	; 216
     ae2:	2b e0       	ldi	r18, 0x0B	; 11
     ae4:	24 9d       	mul	r18, r4
     ae6:	c0 01       	movw	r24, r0
     ae8:	25 9d       	mul	r18, r5
     aea:	90 0d       	add	r25, r0
     aec:	11 24       	eor	r1, r1
     aee:	e0 91 f5 27 	lds	r30, 0x27F5	; 0x8027f5 <sOwnSensor>
     af2:	f0 91 f6 27 	lds	r31, 0x27F6	; 0x8027f6 <sOwnSensor+0x1>
     af6:	e8 0f       	add	r30, r24
     af8:	f9 1f       	adc	r31, r25
     afa:	07 80       	ldd	r0, Z+7	; 0x07
     afc:	f0 85       	ldd	r31, Z+8	; 0x08
     afe:	e0 2d       	mov	r30, r0
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	19 95       	eicall
        if(err){
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	89 2b       	or	r24, r25
     b14:	71 f1       	breq	.+92     	; 0xb72 <ScanDataInSlave+0x350>
			sprintf(response,"$%03dGF'Memory fault'",sMyAdress);
     b16:	80 91 fc 27 	lds	r24, 0x27FC	; 0x8027fc <sMyAdress+0x1>
     b1a:	8f 93       	push	r24
     b1c:	80 91 fb 27 	lds	r24, 0x27FB	; 0x8027fb <sMyAdress>
     b20:	8f 93       	push	r24
     b22:	8b e8       	ldi	r24, 0x8B	; 139
     b24:	91 e2       	ldi	r25, 0x21	; 33
     b26:	9f 93       	push	r25
     b28:	8f 93       	push	r24
     b2a:	c7 01       	movw	r24, r14
     b2c:	9f 93       	push	r25
     b2e:	ef 92       	push	r14
     b30:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <sprintf>
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	18 c0       	rjmp	.+48     	; 0xb72 <ScanDataInSlave+0x350>
		}
    }
    else{
        sprintf(response,"$%03dGF'Sensor not found'",sMyAdress);
     b42:	ff 92       	push	r15
     b44:	ef 92       	push	r14
     b46:	81 ea       	ldi	r24, 0xA1	; 161
     b48:	91 e2       	ldi	r25, 0x21	; 33
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	80 ea       	ldi	r24, 0xA0	; 160
     b50:	97 e2       	ldi	r25, 0x27	; 39
     b52:	9f 93       	push	r25
     b54:	8f 93       	push	r24
     b56:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <sprintf>
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <ScanDataInSlave+0x350>
                break;

      case 'G': HandleCmdG(responseSlave,dataFromMaster);
                break;

      case 'S': HandleCmdS(responseSlave,dataFromMaster);
     b68:	b8 01       	movw	r22, r16
     b6a:	80 ea       	ldi	r24, 0xA0	; 160
     b6c:	97 e2       	ldi	r25, 0x27	; 39
     b6e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <HandleCmdS>
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     b72:	80 91 a1 27 	lds	r24, 0x27A1	; 0x8027a1 <__data_end+0x1>
     b76:	85 32       	cpi	r24, 0x25	; 37
     b78:	61 f0       	breq	.+24     	; 0xb92 <ScanDataInSlave+0x370>
     b7a:	88 23       	and	r24, r24
     b7c:	61 f0       	breq	.+24     	; 0xb96 <ScanDataInSlave+0x374>
     b7e:	e2 ea       	ldi	r30, 0xA2	; 162
     b80:	f7 e2       	ldi	r31, 0x27	; 39
     b82:	90 e0       	ldi	r25, 0x00	; 0
		sChecksum^=*dataMaster++;
     b84:	98 27       	eor	r25, r24
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
	dataMaster++;
    while(*dataMaster != CHECKSUMSIGN && *dataMaster != '\0'){
     b86:	81 91       	ld	r24, Z+
     b88:	85 32       	cpi	r24, 0x25	; 37
     b8a:	31 f0       	breq	.+12     	; 0xb98 <ScanDataInSlave+0x376>
     b8c:	81 11       	cpse	r24, r1
     b8e:	fa cf       	rjmp	.-12     	; 0xb84 <ScanDataInSlave+0x362>
     b90:	03 c0       	rjmp	.+6      	; 0xb98 <ScanDataInSlave+0x376>
 *
 * \return checksum value
 */

static uint8_t DataChecksum(char *dataMaster){
    uint8_t sChecksum = 0;
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	01 c0       	rjmp	.+2      	; 0xb98 <ScanDataInSlave+0x376>
     b96:	90 e0       	ldi	r25, 0x00	; 0
                break;

      default:  break;
    }
    // add '%' and the checksum to the sentence and then send it through the line of the RS485
    snprintf(responseSlave+strlen(responseSlave),MAXCHARACTERSSENTENCE-strlen(responseSlave),"%%%02X",DataChecksum(responseSlave));
     b98:	e0 ea       	ldi	r30, 0xA0	; 160
     b9a:	f7 e2       	ldi	r31, 0x27	; 39
     b9c:	01 90       	ld	r0, Z+
     b9e:	00 20       	and	r0, r0
     ba0:	e9 f7       	brne	.-6      	; 0xb9c <ScanDataInSlave+0x37a>
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	e0 5a       	subi	r30, 0xA0	; 160
     ba6:	f7 42       	sbci	r31, 0x27	; 39
     ba8:	1f 92       	push	r1
     baa:	9f 93       	push	r25
     bac:	8b eb       	ldi	r24, 0xBB	; 187
     bae:	91 e2       	ldi	r25, 0x21	; 33
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	83 e5       	ldi	r24, 0x53	; 83
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	8e 1b       	sub	r24, r30
     bba:	9f 0b       	sbc	r25, r31
     bbc:	9f 93       	push	r25
     bbe:	8f 93       	push	r24
     bc0:	e0 56       	subi	r30, 0x60	; 96
     bc2:	f8 4d       	sbci	r31, 0xD8	; 216
     bc4:	ff 93       	push	r31
     bc6:	ef 93       	push	r30
     bc8:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    SendLineRS485(responseSlave);
     bcc:	80 ea       	ldi	r24, 0xA0	; 160
     bce:	97 e2       	ldi	r25, 0x27	; 39
     bd0:	0e 94 c9 03 	call	0x792	; 0x792 <SendLineRS485>
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	de bf       	out	0x3e, r29	; 62
    err =1;
	}
	dataFromMaster[0] = '\0';
     bd8:	f8 01       	movw	r30, r16
     bda:	10 82       	st	Z, r1
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <ScanDataInSlave+0x3c4>
	 * check if the checksum  of the master's sentence is equal to the calculated checksum
	 * if one of these conditions is false then return 0
	 * else if the adress is a for the broadcast the the command must be 'SET'
	*/
    if((dataFromMaster[KARAKTERSOORTZIN] != MASTERSENTENCE) || ((adress != sMyAdress) && (adress != BROADCAST))/* || (!CheckChecksum(dataFromMaster))*/){
       err = 0;
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <ScanDataInSlave+0x3c4>
     be4:	80 e0       	ldi	r24, 0x00	; 0
    err =1;
	}
	dataFromMaster[0] = '\0';
	}
	return err;
}
     be6:	25 96       	adiw	r28, 0x05	; 5
     be8:	cd bf       	out	0x3d, r28	; 61
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	bf 90       	pop	r11
     bfe:	af 90       	pop	r10
     c00:	9f 90       	pop	r9
     c02:	8f 90       	pop	r8
     c04:	7f 90       	pop	r7
     c06:	6f 90       	pop	r6
     c08:	5f 90       	pop	r5
     c0a:	4f 90       	pop	r4
     c0c:	08 95       	ret

00000c0e <main>:
}


static void InitClocks(void)
{
	CLKSYS_XOSC_Config( OSC_FRQRANGE_12TO16_gc, 0, OSC_XOSCSEL_XTAL_16KCLK_gc );
     c0e:	4b e0       	ldi	r20, 0x0B	; 11
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	80 ec       	ldi	r24, 0xC0	; 192
     c14:	0e 94 e7 01 	call	0x3ce	; 0x3ce <CLKSYS_XOSC_Config>
	CLKSYS_Enable( OSC_XOSCEN_bm );
     c18:	e0 e5       	ldi	r30, 0x50	; 80
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	88 60       	ori	r24, 0x08	; 8
     c20:	80 83       	st	Z, r24
// do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
	do {} while ( CLKSYS_IsReady( OSC_XOSCRDY_bm ) == 0 );
     c22:	81 81       	ldd	r24, Z+1	; 0x01
     c24:	83 ff       	sbrs	r24, 3
     c26:	fd cf       	rjmp	.-6      	; 0xc22 <main+0x14>
	CLKSYS_PLL_Config( OSC_PLLSRC_XOSC_gc, 2);
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	80 ec       	ldi	r24, 0xC0	; 192
     c2c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <CLKSYS_PLL_Config>
	CLKSYS_Enable( OSC_PLLEN_bm );
     c30:	e0 e5       	ldi	r30, 0x50	; 80
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	80 61       	ori	r24, 0x10	; 16
     c38:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	84 ff       	sbrs	r24, 4
     c3e:	fd cf       	rjmp	.-6      	; 0xc3a <main+0x2c>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     c40:	84 e0       	ldi	r24, 0x04	; 4
     c42:	0e 94 00 02 	call	0x400	; 0x400 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 f6 01 	call	0x3ec	; 0x3ec <CLKSYS_Disable>
	CLKSYS_Disable( OSC_RC32MEN_bm );
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <CLKSYS_Disable>
	
} /* InitClocks */


static void InitIO(void) {
	PORTC.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm;
     c52:	e0 e4       	ldi	r30, 0x40	; 64
     c54:	f6 e0       	ldi	r31, 0x06	; 6
     c56:	8f e7       	ldi	r24, 0x7F	; 127
     c58:	82 83       	std	Z+2, r24	; 0x02
	PORTC.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     c5a:	80 e1       	ldi	r24, 0x10	; 16
     c5c:	80 8b       	std	Z+16, r24	; 0x10
	
	PORTD.DIRCLR = PIN0_bm;
     c5e:	e0 e6       	ldi	r30, 0x60	; 96
     c60:	f6 e0       	ldi	r31, 0x06	; 6
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	92 83       	std	Z+2, r25	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLDOWN_gc;
     c66:	80 8b       	std	Z+16, r24	; 0x10
		
	PORTE.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN6_bm | PIN7_bm;
     c68:	e0 e8       	ldi	r30, 0x80	; 128
     c6a:	f6 e0       	ldi	r31, 0x06	; 6
     c6c:	8f ec       	ldi	r24, 0xCF	; 207
     c6e:	80 83       	st	Z, r24
	PORTE.OUTCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     c70:	8f e0       	ldi	r24, 0x0F	; 15
     c72:	86 83       	std	Z+6, r24	; 0x06
	
	PORTF.DIR = PIN0_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
     c74:	e0 ea       	ldi	r30, 0xA0	; 160
     c76:	f6 e0       	ldi	r31, 0x06	; 6
     c78:	89 ef       	ldi	r24, 0xF9	; 249
     c7a:	80 83       	st	Z, r24
	PORTF.OUTCLR = PIN3_bm | PIN4_bm | PIN5_bm;
     c7c:	88 e3       	ldi	r24, 0x38	; 56
     c7e:	86 83       	std	Z+6, r24	; 0x06
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
	static char slaveData[MAXCHARACTERSSENTENCE];
	
	InitClocks();
	InitIO();
	InitUtil();
     c80:	0e 94 27 31 	call	0x624e	; 0x624e <InitUtil>
	InitTimer();
     c84:	0e 94 b8 2f 	call	0x5f70	; 0x5f70 <InitTimer>
	InitSerial();
     c88:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <InitSerial>
	InitSlave(GetBusID());
     c8c:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <GetBusID>
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 15 02 	call	0x42a	; 0x42a <InitSlave>
	InitCoreAnalog();
     c96:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <InitCoreAnalog>
	Init9DOF();
     c9a:	0e 94 70 07 	call	0xee0	; 0xee0 <Init9DOF>
	InitReadBussensors();
     c9e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <InitReadBussensors>

	sei();
     ca2:	78 94       	sei
	
	PrintResetHeader(&gCtrl_IO);
     ca4:	86 e5       	ldi	r24, 0x56	; 86
     ca6:	90 e2       	ldi	r25, 0x20	; 32
     ca8:	0e 94 5f 25 	call	0x4abe	; 0x4abe <PrintResetHeader>
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
	uint8_t debugPrintstate = DEBUGPRINT_START, escTimeoutActive = 0;
     cac:	c0 e0       	ldi	r28, 0x00	; 0
     cae:	31 2c       	mov	r3, r1
#define ESC_TIMEOUT			(CYCLES_PER_SECOND)
#define PRINT_ID_INTERVAL	((uint32_t)10*60*(CYCLES_PER_SECOND))

int main(void)
{
	uint32_t prev = 0, prevIDPrint = 0, now;
     cb0:	41 2c       	mov	r4, r1
     cb2:	51 2c       	mov	r5, r1
     cb4:	32 01       	movw	r6, r4
     cb6:	81 2c       	mov	r8, r1
     cb8:	91 2c       	mov	r9, r1
     cba:	54 01       	movw	r10, r8

		/* Handle the slave code */
		if(CanRead_Comm485())
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     cbc:	00 ea       	ldi	r16, 0xA0	; 160
     cbe:	16 e0       	ldi	r17, 0x06	; 6
     cc0:	d0 e3       	ldi	r29, 0x30	; 48

	sei();
	
	PrintResetHeader(&gCtrl_IO);
	while(1) {
		Process9DOF();
     cc2:	0e 94 15 07 	call	0xe2a	; 0xe2a <Process9DOF>
		
		if(CanRead_Ctrl()) {
     cc6:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <CanRead_Ctrl>
     cca:	88 23       	and	r24, r24
     ccc:	e1 f0       	breq	.+56     	; 0xd06 <main+0xf8>
			switch(ReadByte_Ctrl()) {
     cce:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
     cd2:	83 34       	cpi	r24, 0x43	; 67
     cd4:	51 f0       	breq	.+20     	; 0xcea <main+0xdc>
     cd6:	83 36       	cpi	r24, 0x63	; 99
     cd8:	41 f0       	breq	.+16     	; 0xcea <main+0xdc>
     cda:	8b 31       	cpi	r24, 0x1B	; 27
     cdc:	51 f4       	brne	.+20     	; 0xcf2 <main+0xe4>
				case 0x1B:
					/* ESC -- sync character for avrdude. The programmer is trying to talk to us, so reset the chip */
					CCPWrite( &RST.CTRL, RST_SWRST_bm );
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	89 e7       	ldi	r24, 0x79	; 121
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <CCPWrite>
					break;
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <main+0xe4>
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
     cea:	86 e5       	ldi	r24, 0x56	; 86
     cec:	90 e2       	ldi	r25, 0x20	; 32
     cee:	0e 94 4e 12 	call	0x249c	; 0x249c <CalibrateChannel>
					break;
			}
			escTimeoutActive = 1;
			prev = GetSessionCycleCount();
     cf2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <GetSessionCycleCount>
     cf6:	4b 01       	movw	r8, r22
     cf8:	5c 01       	movw	r10, r24
		}
		now = GetSessionCycleCount();
     cfa:	0e 94 59 18 	call	0x30b2	; 0x30b2 <GetSessionCycleCount>
     cfe:	6b 01       	movw	r12, r22
     d00:	7c 01       	movw	r14, r24
				case 'c':
				case 'C':
					CalibrateChannel(&gCtrl_IO);
					break;
			}
			escTimeoutActive = 1;
     d02:	c1 e0       	ldi	r28, 0x01	; 1
     d04:	07 c0       	rjmp	.+14     	; 0xd14 <main+0x106>
			prev = GetSessionCycleCount();
		}
		now = GetSessionCycleCount();
     d06:	0e 94 59 18 	call	0x30b2	; 0x30b2 <GetSessionCycleCount>
     d0a:	6b 01       	movw	r12, r22
     d0c:	7c 01       	movw	r14, r24
		if(escTimeoutActive) {
     d0e:	cc 23       	and	r28, r28
     d10:	09 f4       	brne	.+2      	; 0xd14 <main+0x106>
     d12:	84 c0       	rjmp	.+264    	; 0xe1c <main+0x20e>
			if(now - prev >= ESC_TIMEOUT)
     d14:	d7 01       	movw	r26, r14
     d16:	c6 01       	movw	r24, r12
     d18:	88 19       	sub	r24, r8
     d1a:	99 09       	sbc	r25, r9
     d1c:	aa 09       	sbc	r26, r10
     d1e:	bb 09       	sbc	r27, r11
     d20:	88 38       	cpi	r24, 0x88	; 136
     d22:	93 41       	sbci	r25, 0x13	; 19
     d24:	a1 05       	cpc	r26, r1
     d26:	b1 05       	cpc	r27, r1
     d28:	08 f0       	brcs	.+2      	; 0xd2c <main+0x11e>
     d2a:	78 c0       	rjmp	.+240    	; 0xe1c <main+0x20e>
     d2c:	62 c0       	rjmp	.+196    	; 0xdf2 <main+0x1e4>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	38 16       	cp	r3, r24
     d32:	09 f4       	brne	.+2      	; 0xd36 <main+0x128>
     d34:	41 c0       	rjmp	.+130    	; 0xdb8 <main+0x1aa>
     d36:	83 15       	cp	r24, r3
     d38:	30 f0       	brcs	.+12     	; 0xd46 <main+0x138>
     d3a:	33 20       	and	r3, r3
     d3c:	41 f0       	breq	.+16     	; 0xd4e <main+0x140>
     d3e:	e1 e0       	ldi	r30, 0x01	; 1
     d40:	3e 16       	cp	r3, r30
     d42:	21 f1       	breq	.+72     	; 0xd8c <main+0x17e>
     d44:	54 c0       	rjmp	.+168    	; 0xdee <main+0x1e0>
     d46:	f3 e0       	ldi	r31, 0x03	; 3
     d48:	3f 12       	cpse	r3, r31
     d4a:	51 c0       	rjmp	.+162    	; 0xdee <main+0x1e0>
     d4c:	3f c0       	rjmp	.+126    	; 0xdcc <main+0x1be>
				case DEBUGPRINT_START:
					if(now - prevIDPrint >= PRINT_ID_INTERVAL) {
     d4e:	c4 18       	sub	r12, r4
     d50:	d5 08       	sbc	r13, r5
     d52:	e6 08       	sbc	r14, r6
     d54:	f7 08       	sbc	r15, r7
     d56:	20 ec       	ldi	r18, 0xC0	; 192
     d58:	c2 16       	cp	r12, r18
     d5a:	26 ec       	ldi	r18, 0xC6	; 198
     d5c:	d2 06       	cpc	r13, r18
     d5e:	2d e2       	ldi	r18, 0x2D	; 45
     d60:	e2 06       	cpc	r14, r18
     d62:	f1 04       	cpc	r15, r1
     d64:	68 f0       	brcs	.+26     	; 0xd80 <main+0x172>
						prevIDPrint += PRINT_ID_INTERVAL;
     d66:	80 ec       	ldi	r24, 0xC0	; 192
     d68:	48 0e       	add	r4, r24
     d6a:	86 ec       	ldi	r24, 0xC6	; 198
     d6c:	58 1e       	adc	r5, r24
     d6e:	8d e2       	ldi	r24, 0x2D	; 45
     d70:	68 1e       	adc	r6, r24
     d72:	71 1c       	adc	r7, r1
						PrintResetHeader(&gCtrl_IO);
     d74:	86 e5       	ldi	r24, 0x56	; 86
     d76:	90 e2       	ldi	r25, 0x20	; 32
     d78:	0e 94 5f 25 	call	0x4abe	; 0x4abe <PrintResetHeader>
     d7c:	c0 e0       	ldi	r28, 0x00	; 0
     d7e:	39 c0       	rjmp	.+114    	; 0xdf2 <main+0x1e4>
					}
					else {
						TakeSnapshot();
     d80:	0e 94 55 18 	call	0x30aa	; 0x30aa <TakeSnapshot>
     d84:	c0 e0       	ldi	r28, 0x00	; 0
						debugPrintstate = DEBUGPRINT_ANALOG;
     d86:	33 24       	eor	r3, r3
     d88:	33 94       	inc	r3
     d8a:	33 c0       	rjmp	.+102    	; 0xdf2 <main+0x1e4>
					}
					break;
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
     d8c:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
     d90:	80 73       	andi	r24, 0x30	; 48
     d92:	49 f4       	brne	.+18     	; 0xda6 <main+0x198>
						PrintCSV_H2A(&gCtrl_IO);
     d94:	86 e5       	ldi	r24, 0x56	; 86
     d96:	90 e2       	ldi	r25, 0x20	; 32
     d98:	0e 94 76 18 	call	0x30ec	; 0x30ec <PrintCSV_H2A>
     d9c:	c0 e0       	ldi	r28, 0x00	; 0
					}
					else {
						PrintCSV_EVA(&gCtrl_IO);
					}
					debugPrintstate = DEBUGPRINT_9DOF;
     d9e:	68 94       	set
     da0:	33 24       	eor	r3, r3
     da2:	31 f8       	bld	r3, 1
     da4:	26 c0       	rjmp	.+76     	; 0xdf2 <main+0x1e4>
				case DEBUGPRINT_ANALOG:
					if(I_AM_H2A) {
						PrintCSV_H2A(&gCtrl_IO);
					}
					else {
						PrintCSV_EVA(&gCtrl_IO);
     da6:	86 e5       	ldi	r24, 0x56	; 86
     da8:	90 e2       	ldi	r25, 0x20	; 32
     daa:	0e 94 9a 20 	call	0x4134	; 0x4134 <PrintCSV_EVA>
     dae:	c0 e0       	ldi	r28, 0x00	; 0
					}
					debugPrintstate = DEBUGPRINT_9DOF;
     db0:	68 94       	set
     db2:	33 24       	eor	r3, r3
     db4:	31 f8       	bld	r3, 1
     db6:	1d c0       	rjmp	.+58     	; 0xdf2 <main+0x1e4>
					break;
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
     db8:	86 e5       	ldi	r24, 0x56	; 86
     dba:	90 e2       	ldi	r25, 0x20	; 32
     dbc:	0e 94 23 09 	call	0x1246	; 0x1246 <PrintCSV_9DOF>
					debugPrintstate = DEBUGPRINT_BUS;
					break;
     dc0:	c0 e0       	ldi	r28, 0x00	; 0
					}
					debugPrintstate = DEBUGPRINT_9DOF;
					break;
				case DEBUGPRINT_9DOF:
					PrintCSV_9DOF(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_BUS;
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f3 e0       	ldi	r31, 0x03	; 3
     dc6:	3f 2e       	mov	r3, r31
     dc8:	f0 2d       	mov	r31, r0
					break;
     dca:	13 c0       	rjmp	.+38     	; 0xdf2 <main+0x1e4>
				case DEBUGPRINT_BUS:
					PrintBussensors(&gCtrl_IO);
     dcc:	86 e5       	ldi	r24, 0x56	; 86
     dce:	90 e2       	ldi	r25, 0x20	; 32
     dd0:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <PrintBussensors>
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
     dd4:	26 e5       	ldi	r18, 0x56	; 86
     dd6:	30 e2       	ldi	r19, 0x20	; 32
     dd8:	43 e0       	ldi	r20, 0x03	; 3
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	82 ec       	ldi	r24, 0xC2	; 194
     de2:	91 e2       	ldi	r25, 0x21	; 33
     de4:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
     de8:	c0 e0       	ldi	r28, 0x00	; 0
				default:
					debugPrintstate = DEBUGPRINT_START;
     dea:	31 2c       	mov	r3, r1
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <main+0x1e4>
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
			switch(debugPrintstate) {
     dee:	c0 e0       	ldi	r28, 0x00	; 0
					PrintBussensors(&gCtrl_IO);
					debugPrintstate = DEBUGPRINT_DONE;
				case DEBUGPRINT_DONE:
					fprintf(&gCtrl_IO, "<\r\n");
				default:
					debugPrintstate = DEBUGPRINT_START;
     df0:	31 2c       	mov	r3, r1
			}
		}

		/* Handle the slave code */
		if(CanRead_Comm485())
     df2:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <CanRead_Comm485>
     df6:	88 23       	and	r24, r24
     df8:	19 f0       	breq	.+6      	; 0xe00 <main+0x1f2>
			PORTF.OUTCLR = PIN4_bm | PIN5_bm;
     dfa:	f8 01       	movw	r30, r16
     dfc:	d6 83       	std	Z+6, r29	; 0x06
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <main+0x1f6>
		else
			PORTF.OUTSET = PIN4_bm | PIN5_bm;
     e00:	f8 01       	movw	r30, r16
     e02:	d5 83       	std	Z+5, r29	; 0x05
		if ( ReadLineRS45( slaveData ) == 1 ){
     e04:	8d ef       	ldi	r24, 0xFD	; 253
     e06:	97 e2       	ldi	r25, 0x27	; 39
     e08:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <ReadLineRS45>
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	09 f0       	breq	.+2      	; 0xe12 <main+0x204>
     e10:	58 cf       	rjmp	.-336    	; 0xcc2 <main+0xb4>
			ScanDataInSlave(slaveData);
     e12:	8d ef       	ldi	r24, 0xFD	; 253
     e14:	97 e2       	ldi	r25, 0x27	; 39
     e16:	0e 94 11 04 	call	0x822	; 0x822 <ScanDataInSlave>
     e1a:	53 cf       	rjmp	.-346    	; 0xcc2 <main+0xb4>
			if(now - prev >= ESC_TIMEOUT)
				escTimeoutActive = 0;
		}

		/* Dump data on the serial (debug) port */
		if(!escTimeoutActive && CanWrite_Ctrl() >= PRINTCSV_LINELEN) {
     e1c:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <CanWrite_Ctrl>
     e20:	86 39       	cpi	r24, 0x96	; 150
     e22:	08 f0       	brcs	.+2      	; 0xe26 <main+0x218>
     e24:	84 cf       	rjmp	.-248    	; 0xd2e <main+0x120>
     e26:	c0 e0       	ldi	r28, 0x00	; 0
     e28:	e4 cf       	rjmp	.-56     	; 0xdf2 <main+0x1e4>

00000e2a <Process9DOF>:
	S9DOFWrite(0x21, 0x00, SELECT_G);
	
} /* Init9DOF */


void Process9DOF(void) {
     e2a:	08 95       	ret

00000e2c <S9DOFWrite>:
		);
	
} /* PrintCSV_9DOF */


void S9DOFWrite(char Address, char Data, uint8_t xm_or_g) {
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
	uint8_t bit = 0, i;

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTCLR = CS_G;
     e34:	41 30       	cpi	r20, 0x01	; 1
     e36:	21 f4       	brne	.+8      	; 0xe40 <S9DOFWrite+0x14>
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     e3e:	40 c0       	rjmp	.+128    	; 0xec0 <S9DOFWrite+0x94>
	else CS_XM_POORT.OUTCLR = CS_XM;
     e40:	90 e8       	ldi	r25, 0x80	; 128
     e42:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     e46:	3c c0       	rjmp	.+120    	; 0xec0 <S9DOFWrite+0x94>

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     e48:	96 83       	std	Z+6, r25	; 0x06
		bit = ((Address << i) & 0x80);
		if (bit) {SDA_POORT.OUTSET = SDA;}
     e4a:	de 01       	movw	r26, r28
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <S9DOFWrite+0x28>
     e50:	aa 0f       	add	r26, r26
     e52:	bb 1f       	adc	r27, r27
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <S9DOFWrite+0x24>
     e58:	aa 23       	and	r26, r26
     e5a:	24 f4       	brge	.+8      	; 0xe64 <S9DOFWrite+0x38>
     e5c:	d8 01       	movw	r26, r16
     e5e:	15 96       	adiw	r26, 0x05	; 5
     e60:	8c 93       	st	X, r24
     e62:	03 c0       	rjmp	.+6      	; 0xe6a <S9DOFWrite+0x3e>
		else {SDA_POORT.OUTCLR = SDA;}
     e64:	d8 01       	movw	r26, r16
     e66:	16 96       	adiw	r26, 0x06	; 6
     e68:	8c 93       	st	X, r24
		SCL_POORT.OUTSET = SCL;
     e6a:	95 83       	std	Z+5, r25	; 0x05
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
	uint8_t bit = 0, i;

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTCLR = CS_G;
	else CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
     e70:	28 30       	cpi	r18, 0x08	; 8
     e72:	31 05       	cpc	r19, r1
     e74:	49 f7       	brne	.-46     	; 0xe48 <S9DOFWrite+0x1c>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     e7a:	e0 e6       	ldi	r30, 0x60	; 96
     e7c:	f6 e0       	ldi	r31, 0x06	; 6
     e7e:	21 e0       	ldi	r18, 0x01	; 1
		bit = ((Data << i) & 0x80);
		if (bit) {SDA_POORT.OUTSET = SDA;}
     e80:	70 e0       	ldi	r23, 0x00	; 0
		else {SDA_POORT.OUTCLR = SDA;}
     e82:	c0 e8       	ldi	r28, 0x80	; 128
     e84:	d6 e0       	ldi	r29, 0x06	; 6
     e86:	30 e4       	ldi	r19, 0x40	; 64
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     e88:	26 83       	std	Z+6, r18	; 0x06
		bit = ((Data << i) & 0x80);
		if (bit) {SDA_POORT.OUTSET = SDA;}
     e8a:	db 01       	movw	r26, r22
     e8c:	08 2e       	mov	r0, r24
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <S9DOFWrite+0x68>
     e90:	aa 0f       	add	r26, r26
     e92:	bb 1f       	adc	r27, r27
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <S9DOFWrite+0x64>
     e98:	aa 23       	and	r26, r26
     e9a:	14 f4       	brge	.+4      	; 0xea0 <S9DOFWrite+0x74>
     e9c:	3d 83       	std	Y+5, r19	; 0x05
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <S9DOFWrite+0x76>
		else {SDA_POORT.OUTCLR = SDA;}
     ea0:	3e 83       	std	Y+6, r19	; 0x06
		SCL_POORT.OUTSET = SCL;
     ea2:	25 83       	std	Z+5, r18	; 0x05
     ea4:	01 96       	adiw	r24, 0x01	; 1
		else {SDA_POORT.OUTCLR = SDA;}
		SCL_POORT.OUTSET = SCL;
	}


	for(i = 0; i < 8; i++) {
     ea6:	88 30       	cpi	r24, 0x08	; 8
     ea8:	91 05       	cpc	r25, r1
     eaa:	71 f7       	brne	.-36     	; 0xe88 <S9DOFWrite+0x5c>
		if (bit) {SDA_POORT.OUTSET = SDA;}
		else {SDA_POORT.OUTCLR = SDA;}
		SCL_POORT.OUTSET = SCL;
	}

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTSET = CS_G;
     eac:	41 30       	cpi	r20, 0x01	; 1
     eae:	21 f4       	brne	.+8      	; 0xeb8 <S9DOFWrite+0x8c>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <S9DOFWrite+0xaa>
	else CS_XM_POORT.OUTSET = CS_XM;
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
		
} /* S9DOFWrite */
     ebe:	0b c0       	rjmp	.+22     	; 0xed6 <S9DOFWrite+0xaa>
		);
	
} /* PrintCSV_9DOF */


void S9DOFWrite(char Address, char Data, uint8_t xm_or_g) {
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTCLR = CS_G;
	else CS_XM_POORT.OUTCLR = CS_XM;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     ec4:	e0 e6       	ldi	r30, 0x60	; 96
     ec6:	f6 e0       	ldi	r31, 0x06	; 6
     ec8:	91 e0       	ldi	r25, 0x01	; 1
		bit = ((Address << i) & 0x80);
		if (bit) {SDA_POORT.OUTSET = SDA;}
     eca:	c8 2f       	mov	r28, r24
     ecc:	d0 e0       	ldi	r29, 0x00	; 0
		else {SDA_POORT.OUTCLR = SDA;}
     ece:	00 e8       	ldi	r16, 0x80	; 128
     ed0:	16 e0       	ldi	r17, 0x06	; 6
     ed2:	80 e4       	ldi	r24, 0x40	; 64
     ed4:	b9 cf       	rjmp	.-142    	; 0xe48 <S9DOFWrite+0x1c>
	}

	if (xm_or_g == SELECT_G)CS_G_POORT.OUTSET = CS_G;
	else CS_XM_POORT.OUTSET = CS_XM;
		
} /* S9DOFWrite */
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	08 95       	ret

00000ee0 <Init9DOF>:

#define SENSORS_GRAVITY_EARTH	9.81
#define GYRO_RES	0.0074770348//245/32768


void Init9DOF(void) {
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
	
	SDA_POORT.DIRSET	=	SDA;
     ee4:	a0 e8       	ldi	r26, 0x80	; 128
     ee6:	b6 e0       	ldi	r27, 0x06	; 6
     ee8:	20 e4       	ldi	r18, 0x40	; 64
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	2c 93       	st	X, r18
     eee:	11 97       	sbiw	r26, 0x01	; 1
	CS_G_POORT.DIRSET	=	CS_G;
     ef0:	e0 e4       	ldi	r30, 0x40	; 64
     ef2:	f6 e0       	ldi	r31, 0x06	; 6
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	81 83       	std	Z+1, r24	; 0x01
	CS_XM_POORT.DIRSET	=	CS_XM;
     ef8:	90 e8       	ldi	r25, 0x80	; 128
     efa:	91 83       	std	Z+1, r25	; 0x01
	SCL_POORT.DIRSET	=	SCL;
     efc:	c0 e6       	ldi	r28, 0x60	; 96
     efe:	d6 e0       	ldi	r29, 0x06	; 6
     f00:	89 83       	std	Y+1, r24	; 0x01

	SCL_POORT.OUTSET	=	SCL;
     f02:	8d 83       	std	Y+5, r24	; 0x05
	SDA_POORT.OUTCLR	=	SDA;
     f04:	16 96       	adiw	r26, 0x06	; 6
     f06:	2c 93       	st	X, r18
     f08:	16 97       	sbiw	r26, 0x06	; 6
	CS_G_POORT.OUTSET	=	CS_G;
     f0a:	85 83       	std	Z+5, r24	; 0x05
	CS_XM_POORT.OUTSET	=	CS_XM;
     f0c:	95 83       	std	Z+5, r25	; 0x05

	SDO_G_POORT.DIRCLR	=	SDO_G;
     f0e:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
	SDO_XM_POORT.DIRCLR	=	SDO_XM;
     f12:	12 96       	adiw	r26, 0x02	; 2
     f14:	9c 93       	st	X, r25

	S9DOFWrite(0x20, 0x47, SELECT_XM);
     f16:	40 e0       	ldi	r20, 0x00	; 0
     f18:	67 e4       	ldi	r22, 0x47	; 71
     f1a:	80 e2       	ldi	r24, 0x20	; 32
     f1c:	0e 94 16 07 	call	0xe2c	; 0xe2c <S9DOFWrite>
	S9DOFWrite(0x21, 0x08, SELECT_XM);
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	68 e0       	ldi	r22, 0x08	; 8
     f24:	81 e2       	ldi	r24, 0x21	; 33
     f26:	0e 94 16 07 	call	0xe2c	; 0xe2c <S9DOFWrite>
	S9DOFWrite(0x24, 0x94, SELECT_XM);//was 0x10
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	64 e9       	ldi	r22, 0x94	; 148
     f2e:	84 e2       	ldi	r24, 0x24	; 36
     f30:	0e 94 16 07 	call	0xe2c	; 0xe2c <S9DOFWrite>
	S9DOFWrite(0x25, 0x20, SELECT_XM);
     f34:	40 e0       	ldi	r20, 0x00	; 0
     f36:	60 e2       	ldi	r22, 0x20	; 32
     f38:	85 e2       	ldi	r24, 0x25	; 37
     f3a:	0e 94 16 07 	call	0xe2c	; 0xe2c <S9DOFWrite>
	S9DOFWrite(0x26, 0x00, SELECT_XM);
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	86 e2       	ldi	r24, 0x26	; 38
     f44:	0e 94 16 07 	call	0xe2c	; 0xe2c <S9DOFWrite>

	S9DOFWrite(0x20, 0x8F, SELECT_G);
     f48:	41 e0       	ldi	r20, 0x01	; 1
     f4a:	6f e8       	ldi	r22, 0x8F	; 143
     f4c:	80 e2       	ldi	r24, 0x20	; 32
     f4e:	0e 94 16 07 	call	0xe2c	; 0xe2c <S9DOFWrite>
	S9DOFWrite(0x21, 0x00, SELECT_G);
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	81 e2       	ldi	r24, 0x21	; 33
     f58:	0e 94 16 07 	call	0xe2c	; 0xe2c <S9DOFWrite>
	
} /* Init9DOF */
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <S9DOFRead>:
	else CS_XM_POORT.OUTSET = CS_XM;
		
} /* S9DOFWrite */


uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
     f62:	4f 92       	push	r4
     f64:	5f 92       	push	r5
     f66:	7f 92       	push	r7
     f68:	8f 92       	push	r8
     f6a:	9f 92       	push	r9
     f6c:	af 92       	push	r10
     f6e:	bf 92       	push	r11
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	76 2e       	mov	r7, r22
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;

	if (xm_or_g == SELECT_G)
     f82:	41 30       	cpi	r20, 0x01	; 1
     f84:	21 f4       	brne	.+8      	; 0xf8e <S9DOFRead+0x2c>
		CS_G_POORT.OUTCLR = CS_G;
     f86:	91 e0       	ldi	r25, 0x01	; 1
     f88:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <S9DOFRead+0x32>
	else 
		CS_XM_POORT.OUTCLR = CS_XM;
     f8e:	90 e8       	ldi	r25, 0x80	; 128
     f90:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>

	Address |= 0x80;
     f94:	80 68       	ori	r24, 0x80	; 128
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	70 e0       	ldi	r23, 0x00	; 0

	for(i = 0; i < 8; i++) {
		bit = !!((Address << i) & 0x80);
		if (bit) {
     f9a:	a8 2f       	mov	r26, r24
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
			SDA_POORT.OUTSET = SDA;
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     f9e:	0f 2e       	mov	r0, r31
     fa0:	f0 e8       	ldi	r31, 0x80	; 128
     fa2:	ef 2e       	mov	r14, r31
     fa4:	f6 e0       	ldi	r31, 0x06	; 6
     fa6:	ff 2e       	mov	r15, r31
     fa8:	f0 2d       	mov	r31, r0
     faa:	80 e4       	ldi	r24, 0x40	; 64
		}
		SCL_POORT.OUTCLR = SCL;
     fac:	e0 e6       	ldi	r30, 0x60	; 96
     fae:	f6 e0       	ldi	r31, 0x06	; 6
     fb0:	91 e0       	ldi	r25, 0x01	; 1

	Address |= 0x80;

	for(i = 0; i < 8; i++) {
		bit = !!((Address << i) & 0x80);
		if (bit) {
     fb2:	9d 01       	movw	r18, r26
     fb4:	06 2e       	mov	r0, r22
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <S9DOFRead+0x5a>
     fb8:	22 0f       	add	r18, r18
     fba:	33 1f       	adc	r19, r19
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <S9DOFRead+0x56>
     fc0:	27 ff       	sbrs	r18, 7
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <S9DOFRead+0x68>
			SDA_POORT.OUTSET = SDA;
     fc4:	e7 01       	movw	r28, r14
     fc6:	8d 83       	std	Y+5, r24	; 0x05
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <S9DOFRead+0x6c>
		}
		else {
			SDA_POORT.OUTCLR = SDA;
     fca:	e7 01       	movw	r28, r14
     fcc:	8e 83       	std	Y+6, r24	; 0x06
		}
		SCL_POORT.OUTCLR = SCL;
     fce:	96 83       	std	Z+6, r25	; 0x06
		SCL_POORT.OUTSET = SCL;
     fd0:	95 83       	std	Z+5, r25	; 0x05
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
	else 
		CS_XM_POORT.OUTCLR = CS_XM;

	Address |= 0x80;

	for(i = 0; i < 8; i++) {
     fd6:	68 30       	cpi	r22, 0x08	; 8
     fd8:	71 05       	cpc	r23, r1
     fda:	59 f7       	brne	.-42     	; 0xfb2 <S9DOFRead+0x50>
			SDA_POORT.OUTCLR = SDA;
		}
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;
     fdc:	80 e4       	ldi	r24, 0x40	; 64
     fde:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
     fe2:	98 e0       	ldi	r25, 0x08	; 8
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
     fe8:	e0 e0       	ldi	r30, 0x00	; 0
     fea:	f0 e0       	ldi	r31, 0x00	; 0
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
     fec:	c0 e6       	ldi	r28, 0x60	; 96
     fee:	d6 e0       	ldi	r29, 0x06	; 6
     ff0:	51 e0       	ldi	r21, 0x01	; 1
		SCL_POORT.OUTSET = SCL;
		
		if(SDO_G_POORT.IN & SDO_G)bitG = 1;
     ff2:	0f 2e       	mov	r0, r31
     ff4:	f0 ea       	ldi	r31, 0xA0	; 160
     ff6:	cf 2e       	mov	r12, r31
     ff8:	f6 e0       	ldi	r31, 0x06	; 6
     ffa:	df 2e       	mov	r13, r31
     ffc:	f0 2d       	mov	r31, r0
		else bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;

		if(SDO_XM_POORT.IN & SDO_XM)bitXM = 1;
     ffe:	0f 2e       	mov	r0, r31
    1000:	f0 e8       	ldi	r31, 0x80	; 128
    1002:	ef 2e       	mov	r14, r31
    1004:	f6 e0       	ldi	r31, 0x06	; 6
    1006:	ff 2e       	mov	r15, r31
    1008:	f0 2d       	mov	r31, r0
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
		SCL_POORT.OUTCLR = SCL;
    100a:	5e 83       	std	Y+6, r21	; 0x06
		SCL_POORT.OUTSET = SCL;
    100c:	5d 83       	std	Y+5, r21	; 0x05
		
		if(SDO_G_POORT.IN & SDO_G)bitG = 1;
    100e:	d6 01       	movw	r26, r12
    1010:	18 96       	adiw	r26, 0x08	; 8
    1012:	8c 91       	ld	r24, X
		else bitG = 0;
		byteGyroG = ((byteGyroG&0x7F)<<1)|bitG;
    1014:	ee 0f       	add	r30, r30
    1016:	ff 1f       	adc	r31, r31
    1018:	ff 27       	eor	r31, r31
    101a:	80 fb       	bst	r24, 0
    101c:	44 24       	eor	r4, r4
    101e:	40 f8       	bld	r4, 0
    1020:	51 2c       	mov	r5, r1
    1022:	e4 29       	or	r30, r4
    1024:	f5 29       	or	r31, r5

		if(SDO_XM_POORT.IN & SDO_XM)bitXM = 1;
    1026:	d7 01       	movw	r26, r14
    1028:	18 96       	adiw	r26, 0x08	; 8
    102a:	ac 90       	ld	r10, X
		else bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
    102c:	49 01       	movw	r8, r18
    102e:	88 0c       	add	r8, r8
    1030:	99 1c       	adc	r9, r9
    1032:	99 24       	eor	r9, r9
    1034:	2a 2d       	mov	r18, r10
    1036:	aa 0c       	add	r10, r10
    1038:	33 0b       	sbc	r19, r19
    103a:	59 01       	movw	r10, r18
    103c:	aa 24       	eor	r10, r10
    103e:	bb 0c       	add	r11, r11
    1040:	aa 1c       	adc	r10, r10
    1042:	bb 24       	eor	r11, r11
    1044:	95 01       	movw	r18, r10
    1046:	28 29       	or	r18, r8
    1048:	39 29       	or	r19, r9
    104a:	91 50       	subi	r25, 0x01	; 1
		SCL_POORT.OUTCLR = SCL;
		SCL_POORT.OUTSET = SCL;
	}
	SDA_POORT.OUTSET = SDA;

	for(i = 0; i < 8; i++) {
    104c:	f1 f6       	brne	.-68     	; 0x100a <S9DOFRead+0xa8>
		if(SDO_XM_POORT.IN & SDO_XM)bitXM = 1;
		else bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
	}

	if(bytes>1) {
    104e:	b1 e0       	ldi	r27, 0x01	; 1
    1050:	b7 15       	cp	r27, r7
    1052:	d8 f5       	brcc	.+118    	; 0x10ca <S9DOFRead+0x168>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	c0 e0       	ldi	r28, 0x00	; 0
    105a:	d0 e0       	ldi	r29, 0x00	; 0
		for(int count = 0; count < 8; count++) {
			SCL_POORT.OUTCLR = SCL;
    105c:	0f 2e       	mov	r0, r31
    105e:	f0 e6       	ldi	r31, 0x60	; 96
    1060:	ef 2e       	mov	r14, r31
    1062:	f6 e0       	ldi	r31, 0x06	; 6
    1064:	ff 2e       	mov	r15, r31
    1066:	f0 2d       	mov	r31, r0
    1068:	51 e0       	ldi	r21, 0x01	; 1

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
    106a:	0f 2e       	mov	r0, r31
    106c:	f0 ea       	ldi	r31, 0xA0	; 160
    106e:	af 2e       	mov	r10, r31
    1070:	f6 e0       	ldi	r31, 0x06	; 6
    1072:	bf 2e       	mov	r11, r31
    1074:	f0 2d       	mov	r31, r0
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;

			if(SDO_XM_POORT.IN & SDO_XM)
    1076:	0f 2e       	mov	r0, r31
    1078:	f0 e8       	ldi	r31, 0x80	; 128
    107a:	cf 2e       	mov	r12, r31
    107c:	f6 e0       	ldi	r31, 0x06	; 6
    107e:	df 2e       	mov	r13, r31
    1080:	f0 2d       	mov	r31, r0
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
	}

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
			SCL_POORT.OUTCLR = SCL;
    1082:	d7 01       	movw	r26, r14
    1084:	16 96       	adiw	r26, 0x06	; 6
    1086:	5c 93       	st	X, r21

			if(SDO_G_POORT.IN & SDO_G)	bitG = 1;
    1088:	d5 01       	movw	r26, r10
    108a:	18 96       	adiw	r26, 0x08	; 8
    108c:	9c 90       	ld	r9, X
			else bitG = 0;
			byte2GyroG = ((byte2GyroG&0x7F)<<1)|bitG;
    108e:	cc 0f       	add	r28, r28
    1090:	dd 1f       	adc	r29, r29
    1092:	dd 27       	eor	r29, r29
    1094:	09 2d       	mov	r16, r9
    1096:	01 70       	andi	r16, 0x01	; 1
    1098:	10 e0       	ldi	r17, 0x00	; 0
    109a:	c0 2b       	or	r28, r16
    109c:	d1 2b       	or	r29, r17

			if(SDO_XM_POORT.IN & SDO_XM)
    109e:	d6 01       	movw	r26, r12
    10a0:	18 96       	adiw	r26, 0x08	; 8
    10a2:	9c 90       	ld	r9, X
				bitXM = 1;
			else 
				bitXM = 0;
			byte2GyroXM = ((byte2GyroXM &0x7F)<<1)|bitXM;
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	99 27       	eor	r25, r25
    10aa:	a9 2d       	mov	r26, r9
    10ac:	99 0c       	add	r9, r9
    10ae:	bb 0b       	sbc	r27, r27
    10b0:	aa 27       	eor	r26, r26
    10b2:	bb 0f       	add	r27, r27
    10b4:	aa 1f       	adc	r26, r26
    10b6:	bb 27       	eor	r27, r27
    10b8:	8a 2b       	or	r24, r26
    10ba:	9b 2b       	or	r25, r27

			SCL_POORT.OUTSET = SCL;
    10bc:	d7 01       	movw	r26, r14
    10be:	15 96       	adiw	r26, 0x05	; 5
    10c0:	5c 93       	st	X, r21
    10c2:	61 50       	subi	r22, 0x01	; 1
    10c4:	71 09       	sbc	r23, r1
		else bitXM = 0;
		byteGyroXM = ((byteGyroXM&0x7F)<<1)|bitXM;
	}

	if(bytes>1) {
		for(int count = 0; count < 8; count++) {
    10c6:	e9 f6       	brne	.-70     	; 0x1082 <S9DOFRead+0x120>
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <S9DOFRead+0x170>
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
	uint16_t byteGyroXM = 0, byte2GyroXM = 0;
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
uint16_t S9DOFRead(char Address, uint8_t bytes, uint8_t xm_or_g) {
	uint8_t bit, i;
	int8_t bitG = 0;
	int8_t bitXM = 0;
	uint16_t data = 0;
	uint16_t byteGyroG = 0, byte2GyroG =0;
    10ce:	c0 e0       	ldi	r28, 0x00	; 0
    10d0:	d0 e0       	ldi	r29, 0x00	; 0

			SCL_POORT.OUTSET = SCL;
		}
	}

	if (xm_or_g == SELECT_G)
    10d2:	41 30       	cpi	r20, 0x01	; 1
    10d4:	41 f4       	brne	.+16     	; 0x10e6 <S9DOFRead+0x184>
		CS_G_POORT.OUTSET = CS_G;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	else 
		CS_XM_POORT.OUTSET = CS_XM;

	if (xm_or_g == SELECT_G) 
		data = (((uint16_t) byte2GyroG) << 8) | byteGyroG;
    10dc:	9c 2f       	mov	r25, r28
    10de:	88 27       	eor	r24, r24
    10e0:	8e 2b       	or	r24, r30
    10e2:	9f 2b       	or	r25, r31
    10e4:	07 c0       	rjmp	.+14     	; 0x10f4 <S9DOFRead+0x192>
	}

	if (xm_or_g == SELECT_G)
		CS_G_POORT.OUTSET = CS_G;
	else 
		CS_XM_POORT.OUTSET = CS_XM;
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	40 93 45 06 	sts	0x0645, r20	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>

	if (xm_or_g == SELECT_G) 
		data = (((uint16_t) byte2GyroG) << 8) | byteGyroG;
	else 
		data = (((uint16_t) byte2GyroXM) << 8) | byteGyroXM;
    10ec:	98 2f       	mov	r25, r24
    10ee:	88 27       	eor	r24, r24
    10f0:	82 2b       	or	r24, r18
    10f2:	93 2b       	or	r25, r19

	return data;
}
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	bf 90       	pop	r11
    1106:	af 90       	pop	r10
    1108:	9f 90       	pop	r9
    110a:	8f 90       	pop	r8
    110c:	7f 90       	pop	r7
    110e:	5f 90       	pop	r5
    1110:	4f 90       	pop	r4
    1112:	08 95       	ret

00001114 <GyroGetTemp>:


float GyroGetTemp(void) {
	int16_t data = 0;

	data = (int16_t)S9DOFRead(0xC5,2,SELECT_XM);
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	62 e0       	ldi	r22, 0x02	; 2
    1118:	85 ec       	ldi	r24, 0xC5	; 197
    111a:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>

	return data / 8.0f;
    111e:	bc 01       	movw	r22, r24
    1120:	99 0f       	add	r25, r25
    1122:	88 0b       	sbc	r24, r24
    1124:	99 0b       	sbc	r25, r25
    1126:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	5e e3       	ldi	r21, 0x3E	; 62
    1132:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
}
    1136:	08 95       	ret

00001138 <GyroGetMagnetic>:


float GyroGetMagnetic(uint8_t X_Y_Z)
{
	int16_t data = 0;
	if (X_Y_Z == GET_X)
    1138:	81 11       	cpse	r24, r1
    113a:	06 c0       	rjmp	.+12     	; 0x1148 <GyroGetMagnetic+0x10>
	{
		data = (int16_t) S9DOFRead(0xC8,2,SELECT_XM);
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	62 e0       	ldi	r22, 0x02	; 2
    1140:	88 ec       	ldi	r24, 0xC8	; 200
    1142:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    1146:	12 c0       	rjmp	.+36     	; 0x116c <GyroGetMagnetic+0x34>
	}
	if (X_Y_Z == GET_Y)
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	31 f4       	brne	.+12     	; 0x1158 <GyroGetMagnetic+0x20>
	{
		data = (int16_t) S9DOFRead(0xCA,2,SELECT_XM);
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	62 e0       	ldi	r22, 0x02	; 2
    1150:	8a ec       	ldi	r24, 0xCA	; 202
    1152:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    1156:	0a c0       	rjmp	.+20     	; 0x116c <GyroGetMagnetic+0x34>
	}
	if (X_Y_Z == GET_Z)
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	31 f4       	brne	.+12     	; 0x1168 <GyroGetMagnetic+0x30>
	{
		data = (int16_t) S9DOFRead(0xCC,2,SELECT_XM);
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	62 e0       	ldi	r22, 0x02	; 2
    1160:	8c ec       	ldi	r24, 0xCC	; 204
    1162:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    1166:	02 c0       	rjmp	.+4      	; 0x116c <GyroGetMagnetic+0x34>
}


float GyroGetMagnetic(uint8_t X_Y_Z)
{
	int16_t data = 0;
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	90 e0       	ldi	r25, 0x00	; 0

//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = ((float)data / 1000)*LSM9DS0_MAG_MGAUSS_4GAUSS;

	return return_data;
    116c:	bc 01       	movw	r22, r24
    116e:	99 0f       	add	r25, r25
    1170:	88 0b       	sbc	r24, r24
    1172:	99 0b       	sbc	r25, r25
    1174:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	4a e7       	ldi	r20, 0x7A	; 122
    117e:	54 e4       	ldi	r21, 0x44	; 68
    1180:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1184:	2a e0       	ldi	r18, 0x0A	; 10
    1186:	37 ed       	ldi	r19, 0xD7	; 215
    1188:	43 e2       	ldi	r20, 0x23	; 35
    118a:	5e e3       	ldi	r21, 0x3E	; 62
    118c:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
}
    1190:	08 95       	ret

00001192 <GyroGetAcceleration>:


float GyroGetAcceleration(uint8_t X_Y_Z) {
	int16_t data = 0;
	
	if (X_Y_Z == GET_X)
    1192:	81 11       	cpse	r24, r1
    1194:	06 c0       	rjmp	.+12     	; 0x11a2 <GyroGetAcceleration+0x10>
	{
		data = (int16_t) S9DOFRead(0xE8,2,SELECT_XM);
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	62 e0       	ldi	r22, 0x02	; 2
    119a:	88 ee       	ldi	r24, 0xE8	; 232
    119c:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    11a0:	12 c0       	rjmp	.+36     	; 0x11c6 <GyroGetAcceleration+0x34>
	}
	if (X_Y_Z == GET_Y)
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <GyroGetAcceleration+0x20>
	{
		data = (int16_t) S9DOFRead(0xEA,2,SELECT_XM);
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	62 e0       	ldi	r22, 0x02	; 2
    11aa:	8a ee       	ldi	r24, 0xEA	; 234
    11ac:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    11b0:	0a c0       	rjmp	.+20     	; 0x11c6 <GyroGetAcceleration+0x34>
	}
	if (X_Y_Z == GET_Z)
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	31 f4       	brne	.+12     	; 0x11c2 <GyroGetAcceleration+0x30>
	{
		data = (int16_t) S9DOFRead(0xEC,2,SELECT_XM);
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	62 e0       	ldi	r22, 0x02	; 2
    11ba:	8c ee       	ldi	r24, 0xEC	; 236
    11bc:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GyroGetAcceleration+0x34>
	return return_data;
}


float GyroGetAcceleration(uint8_t X_Y_Z) {
	int16_t data = 0;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0

	//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = (((float)data / 1000) * SENSORS_GRAVITY_EARTH)*LSM9DS0_ACCEL_MG_LSB_4G; // factor voor

	return return_data;
    11c6:	bc 01       	movw	r22, r24
    11c8:	99 0f       	add	r25, r25
    11ca:	88 0b       	sbc	r24, r24
    11cc:	99 0b       	sbc	r25, r25
    11ce:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	4a e7       	ldi	r20, 0x7A	; 122
    11d8:	54 e4       	ldi	r21, 0x44	; 68
    11da:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    11de:	23 ec       	ldi	r18, 0xC3	; 195
    11e0:	35 ef       	ldi	r19, 0xF5	; 245
    11e2:	4c e1       	ldi	r20, 0x1C	; 28
    11e4:	51 e4       	ldi	r21, 0x41	; 65
    11e6:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    11ea:	23 e2       	ldi	r18, 0x23	; 35
    11ec:	3b ed       	ldi	r19, 0xDB	; 219
    11ee:	49 ef       	ldi	r20, 0xF9	; 249
    11f0:	5d e3       	ldi	r21, 0x3D	; 61
    11f2:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
}
    11f6:	08 95       	ret

000011f8 <GyroGetGyro>:


float GyroGetGyro(uint8_t X_Y_Z) {
	int16_t data = 0;

	if (X_Y_Z == GET_X)
    11f8:	81 11       	cpse	r24, r1
    11fa:	06 c0       	rjmp	.+12     	; 0x1208 <GyroGetGyro+0x10>
	{
		data = (int16_t) S9DOFRead(0x68,2,SELECT_G);
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	62 e0       	ldi	r22, 0x02	; 2
    1200:	88 e6       	ldi	r24, 0x68	; 104
    1202:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    1206:	12 c0       	rjmp	.+36     	; 0x122c <GyroGetGyro+0x34>
	}
	if (X_Y_Z == GET_Y)
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	31 f4       	brne	.+12     	; 0x1218 <GyroGetGyro+0x20>
	{
		data = (int16_t) S9DOFRead(0x6A,2,SELECT_G);
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	62 e0       	ldi	r22, 0x02	; 2
    1210:	8a e6       	ldi	r24, 0x6A	; 106
    1212:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    1216:	0a c0       	rjmp	.+20     	; 0x122c <GyroGetGyro+0x34>
	}
	if (X_Y_Z == GET_Z)
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	31 f4       	brne	.+12     	; 0x1228 <GyroGetGyro+0x30>
	{
		data = (int16_t) S9DOFRead(0x6C,2,SELECT_G);
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	62 e0       	ldi	r22, 0x02	; 2
    1220:	8c e6       	ldi	r24, 0x6C	; 108
    1222:	0e 94 b1 07 	call	0xf62	; 0xf62 <S9DOFRead>
    1226:	02 c0       	rjmp	.+4      	; 0x122c <GyroGetGyro+0x34>
	return return_data;
}


float GyroGetGyro(uint8_t X_Y_Z) {
	int16_t data = 0;
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0

//if(data||0x8000)data = (~data +1)*(-1);

	float return_data = ((float)data)*LSM9DS0_GYRO_DPS_DIGIT_245DPS;

	return return_data;
    122c:	bc 01       	movw	r22, r24
    122e:	99 0f       	add	r25, r25
    1230:	88 0b       	sbc	r24, r24
    1232:	99 0b       	sbc	r25, r25
    1234:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1238:	29 e2       	ldi	r18, 0x29	; 41
    123a:	3c e5       	ldi	r19, 0x5C	; 92
    123c:	4f e0       	ldi	r20, 0x0F	; 15
    123e:	5c e3       	ldi	r21, 0x3C	; 60
    1240:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
}
    1244:	08 95       	ret

00001246 <PrintCSV_9DOF>:
void Process9DOF(void) {
	
} /* Process9DOF */


void PrintCSV_9DOF(FILE *fd) {
    1246:	2f 92       	push	r2
    1248:	3f 92       	push	r3
    124a:	4f 92       	push	r4
    124c:	5f 92       	push	r5
    124e:	6f 92       	push	r6
    1250:	7f 92       	push	r7
    1252:	8f 92       	push	r8
    1254:	9f 92       	push	r9
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	cf 92       	push	r12
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	66 97       	sbiw	r28, 0x16	; 22
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	8b 8b       	std	Y+19, r24	; 0x13
    1276:	9c 8b       	std	Y+20, r25	; 0x14
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
		GyroGetTemp()
    1278:	0e 94 8a 08 	call	0x1114	; 0x1114 <GyroGetTemp>
    127c:	56 2e       	mov	r5, r22
    127e:	47 2e       	mov	r4, r23
    1280:	38 2e       	mov	r3, r24
    1282:	29 2e       	mov	r2, r25
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <GyroGetGyro>
    128a:	96 2e       	mov	r9, r22
    128c:	87 2e       	mov	r8, r23
    128e:	78 2e       	mov	r7, r24
    1290:	69 2e       	mov	r6, r25
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <GyroGetGyro>
    1298:	69 83       	std	Y+1, r22	; 0x01
    129a:	7a 83       	std	Y+2, r23	; 0x02
    129c:	b8 2e       	mov	r11, r24
    129e:	a9 2e       	mov	r10, r25
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <GyroGetGyro>
    12a6:	6b 83       	std	Y+3, r22	; 0x03
    12a8:	7c 83       	std	Y+4, r23	; 0x04
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	9e 83       	std	Y+6, r25	; 0x06
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
		GyroGetMagnetic(GET_X), GyroGetMagnetic(GET_Y), GyroGetMagnetic(GET_Z),
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	0e 94 9c 08 	call	0x1138	; 0x1138 <GyroGetMagnetic>
    12b4:	6f 83       	std	Y+7, r22	; 0x07
    12b6:	78 87       	std	Y+8, r23	; 0x08
    12b8:	89 87       	std	Y+9, r24	; 0x09
    12ba:	9a 87       	std	Y+10, r25	; 0x0a
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	0e 94 9c 08 	call	0x1138	; 0x1138 <GyroGetMagnetic>
    12c2:	6b 87       	std	Y+11, r22	; 0x0b
    12c4:	7c 87       	std	Y+12, r23	; 0x0c
    12c6:	8d 87       	std	Y+13, r24	; 0x0d
    12c8:	9e 87       	std	Y+14, r25	; 0x0e
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	0e 94 9c 08 	call	0x1138	; 0x1138 <GyroGetMagnetic>
    12d0:	6f 87       	std	Y+15, r22	; 0x0f
    12d2:	78 8b       	std	Y+16, r23	; 0x10
    12d4:	89 8b       	std	Y+17, r24	; 0x11
    12d6:	9a 8b       	std	Y+18, r25	; 0x12
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0,0.0,0.0,
		0.0
#else
		GyroGetAcceleration(GET_X), GyroGetAcceleration(GET_Y), GyroGetAcceleration(GET_Z),
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	0e 94 c9 08 	call	0x1192	; 0x1192 <GyroGetAcceleration>
    12de:	f6 2e       	mov	r15, r22
    12e0:	e7 2e       	mov	r14, r23
    12e2:	d8 2e       	mov	r13, r24
    12e4:	c9 2e       	mov	r12, r25
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	0e 94 c9 08 	call	0x1192	; 0x1192 <GyroGetAcceleration>
    12ec:	6d 8b       	std	Y+21, r22	; 0x15
    12ee:	7e 8b       	std	Y+22, r23	; 0x16
    12f0:	18 2f       	mov	r17, r24
    12f2:	09 2f       	mov	r16, r25
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	0e 94 c9 08 	call	0x1192	; 0x1192 <GyroGetAcceleration>


void PrintCSV_9DOF(FILE *fd) {
	
	// Dummy print for now. Format will be: Accel[XYZ],Magneto[XYZ],Gyro[XYZ],Temp
	fprintf(fd, "%.3f,%.3f,%.3f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,",
    12fa:	2f 92       	push	r2
    12fc:	3f 92       	push	r3
    12fe:	4f 92       	push	r4
    1300:	5f 92       	push	r5
    1302:	6f 92       	push	r6
    1304:	7f 92       	push	r7
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	2a 81       	ldd	r18, Y+2	; 0x02
    1310:	2f 93       	push	r18
    1312:	29 81       	ldd	r18, Y+1	; 0x01
    1314:	2f 93       	push	r18
    1316:	2e 81       	ldd	r18, Y+6	; 0x06
    1318:	2f 93       	push	r18
    131a:	2d 81       	ldd	r18, Y+5	; 0x05
    131c:	2f 93       	push	r18
    131e:	2c 81       	ldd	r18, Y+4	; 0x04
    1320:	2f 93       	push	r18
    1322:	2b 81       	ldd	r18, Y+3	; 0x03
    1324:	2f 93       	push	r18
    1326:	2a 85       	ldd	r18, Y+10	; 0x0a
    1328:	2f 93       	push	r18
    132a:	29 85       	ldd	r18, Y+9	; 0x09
    132c:	2f 93       	push	r18
    132e:	28 85       	ldd	r18, Y+8	; 0x08
    1330:	2f 93       	push	r18
    1332:	2f 81       	ldd	r18, Y+7	; 0x07
    1334:	2f 93       	push	r18
    1336:	2e 85       	ldd	r18, Y+14	; 0x0e
    1338:	2f 93       	push	r18
    133a:	2d 85       	ldd	r18, Y+13	; 0x0d
    133c:	2f 93       	push	r18
    133e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1340:	2f 93       	push	r18
    1342:	2b 85       	ldd	r18, Y+11	; 0x0b
    1344:	2f 93       	push	r18
    1346:	2a 89       	ldd	r18, Y+18	; 0x12
    1348:	2f 93       	push	r18
    134a:	29 89       	ldd	r18, Y+17	; 0x11
    134c:	2f 93       	push	r18
    134e:	28 89       	ldd	r18, Y+16	; 0x10
    1350:	2f 93       	push	r18
    1352:	2f 85       	ldd	r18, Y+15	; 0x0f
    1354:	2f 93       	push	r18
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	2e 89       	ldd	r18, Y+22	; 0x16
    1364:	2f 93       	push	r18
    1366:	2d 89       	ldd	r18, Y+21	; 0x15
    1368:	2f 93       	push	r18
    136a:	9f 93       	push	r25
    136c:	8f 93       	push	r24
    136e:	7f 93       	push	r23
    1370:	6f 93       	push	r22
    1372:	86 ec       	ldi	r24, 0xC6	; 198
    1374:	91 e2       	ldi	r25, 0x21	; 33
    1376:	9f 93       	push	r25
    1378:	8f 93       	push	r24
    137a:	8c 89       	ldd	r24, Y+20	; 0x14
    137c:	8f 93       	push	r24
    137e:	9b 89       	ldd	r25, Y+19	; 0x13
    1380:	9f 93       	push	r25
    1382:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
		GyroGetGyro(GET_X), GyroGetGyro(GET_Y), GyroGetGyro(GET_Z),
		GyroGetTemp()
#endif
		);
	
} /* PrintCSV_9DOF */
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	66 96       	adiw	r28, 0x16	; 22
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	af 90       	pop	r10
    13a4:	9f 90       	pop	r9
    13a6:	8f 90       	pop	r8
    13a8:	7f 90       	pop	r7
    13aa:	6f 90       	pop	r6
    13ac:	5f 90       	pop	r5
    13ae:	4f 90       	pop	r4
    13b0:	3f 90       	pop	r3
    13b2:	2f 90       	pop	r2
    13b4:	08 95       	ret

000013b6 <CoreAnalogTakeSnapshot485>:

uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
	
} /* IsSnapshotCoreAnalogDone */
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	80 93 e6 28 	sts	0x28E6, r24	; 0x8028e6 <sTakeSnapshot485>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	08 95       	ret

000013c2 <GetCruiseControlButtonStatus>:
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	8b 01       	movw	r16, r22
    13ce:	ea 01       	movw	r28, r20
    13d0:	60 91 53 29 	lds	r22, 0x2953	; 0x802953 <sSensorDataSnapshot485+0x68>
    13d4:	70 91 54 29 	lds	r23, 0x2954	; 0x802954 <sSensorDataSnapshot485+0x69>
    13d8:	80 91 55 29 	lds	r24, 0x2955	; 0x802955 <sSensorDataSnapshot485+0x6a>
    13dc:	90 91 56 29 	lds	r25, 0x2956	; 0x802956 <sSensorDataSnapshot485+0x6b>
    13e0:	f0 90 4d 29 	lds	r15, 0x294D	; 0x80294d <sSensorDataSnapshot485+0x62>
    13e4:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e4       	ldi	r19, 0x40	; 64
    13ec:	4c e9       	ldi	r20, 0x9C	; 156
    13ee:	55 e4       	ldi	r21, 0x45	; 69
    13f0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    13f4:	9f 93       	push	r25
    13f6:	8f 93       	push	r24
    13f8:	7f 93       	push	r23
    13fa:	6f 93       	push	r22
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	f1 10       	cpse	r15, r1
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	9f 93       	push	r25
    1406:	8f 93       	push	r24
    1408:	89 ef       	ldi	r24, 0xF9	; 249
    140a:	91 e2       	ldi	r25, 0x21	; 33
    140c:	9f 93       	push	r25
    140e:	8f 93       	push	r24
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	1f 93       	push	r17
    1416:	0f 93       	push	r16
    1418:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    141c:	ed b7       	in	r30, 0x3d	; 61
    141e:	fe b7       	in	r31, 0x3e	; 62
    1420:	3c 96       	adiw	r30, 0x0c	; 12
    1422:	ed bf       	out	0x3d, r30	; 61
    1424:	fe bf       	out	0x3e, r31	; 62
    1426:	8c 17       	cp	r24, r28
    1428:	9d 07       	cpc	r25, r29
    142a:	2c f0       	brlt	.+10     	; 0x1436 <GetCruiseControlButtonStatus+0x74>
    142c:	f8 01       	movw	r30, r16
    142e:	10 82       	st	Z, r1
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GetCruiseControlButtonStatus+0x78>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	ff 90       	pop	r15
    1444:	08 95       	ret

00001446 <GetFullPowerButtonStatus>:
    1446:	ff 92       	push	r15
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	8b 01       	movw	r16, r22
    1452:	ea 01       	movw	r28, r20
    1454:	60 91 4f 29 	lds	r22, 0x294F	; 0x80294f <sSensorDataSnapshot485+0x64>
    1458:	70 91 50 29 	lds	r23, 0x2950	; 0x802950 <sSensorDataSnapshot485+0x65>
    145c:	80 91 51 29 	lds	r24, 0x2951	; 0x802951 <sSensorDataSnapshot485+0x66>
    1460:	90 91 52 29 	lds	r25, 0x2952	; 0x802952 <sSensorDataSnapshot485+0x67>
    1464:	f0 90 4c 29 	lds	r15, 0x294C	; 0x80294c <sSensorDataSnapshot485+0x61>
    1468:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e4       	ldi	r19, 0x40	; 64
    1470:	4c e9       	ldi	r20, 0x9C	; 156
    1472:	55 e4       	ldi	r21, 0x45	; 69
    1474:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1478:	9f 93       	push	r25
    147a:	8f 93       	push	r24
    147c:	7f 93       	push	r23
    147e:	6f 93       	push	r22
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	f1 10       	cpse	r15, r1
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	9f 93       	push	r25
    148a:	8f 93       	push	r24
    148c:	89 ef       	ldi	r24, 0xF9	; 249
    148e:	91 e2       	ldi	r25, 0x21	; 33
    1490:	9f 93       	push	r25
    1492:	8f 93       	push	r24
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	1f 93       	push	r17
    149a:	0f 93       	push	r16
    149c:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    14a0:	ed b7       	in	r30, 0x3d	; 61
    14a2:	fe b7       	in	r31, 0x3e	; 62
    14a4:	3c 96       	adiw	r30, 0x0c	; 12
    14a6:	ed bf       	out	0x3d, r30	; 61
    14a8:	fe bf       	out	0x3e, r31	; 62
    14aa:	8c 17       	cp	r24, r28
    14ac:	9d 07       	cpc	r25, r29
    14ae:	2c f0       	brlt	.+10     	; 0x14ba <GetFullPowerButtonStatus+0x74>
    14b0:	f8 01       	movw	r30, r16
    14b2:	10 82       	st	Z, r1
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <GetFullPowerButtonStatus+0x78>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	08 95       	ret

000014ca <GetMotorDriverTemp>:
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	8b 01       	movw	r16, r22
    14d4:	ea 01       	movw	r28, r20
    14d6:	60 91 18 29 	lds	r22, 0x2918	; 0x802918 <sSensorDataSnapshot485+0x2d>
    14da:	70 91 19 29 	lds	r23, 0x2919	; 0x802919 <sSensorDataSnapshot485+0x2e>
    14de:	80 91 1a 29 	lds	r24, 0x291A	; 0x80291a <sSensorDataSnapshot485+0x2f>
    14e2:	90 91 1b 29 	lds	r25, 0x291B	; 0x80291b <sSensorDataSnapshot485+0x30>
    14e6:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e2       	ldi	r20, 0x20	; 32
    14f0:	59 e4       	ldi	r21, 0x49	; 73
    14f2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    14f6:	9f 93       	push	r25
    14f8:	8f 93       	push	r24
    14fa:	7f 93       	push	r23
    14fc:	6f 93       	push	r22
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	92 e2       	ldi	r25, 0x22	; 34
    1502:	9f 93       	push	r25
    1504:	8f 93       	push	r24
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	1f 93       	push	r17
    150c:	0f 93       	push	r16
    150e:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1512:	ed b7       	in	r30, 0x3d	; 61
    1514:	fe b7       	in	r31, 0x3e	; 62
    1516:	3a 96       	adiw	r30, 0x0a	; 10
    1518:	ed bf       	out	0x3d, r30	; 61
    151a:	fe bf       	out	0x3e, r31	; 62
    151c:	8c 17       	cp	r24, r28
    151e:	9d 07       	cpc	r25, r29
    1520:	2c f0       	brlt	.+10     	; 0x152c <GetMotorDriverTemp+0x62>
    1522:	f8 01       	movw	r30, r16
    1524:	10 82       	st	Z, r1
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <GetMotorDriverTemp+0x66>
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	08 95       	ret

0000153a <GetWheelSpeedH2A>:
    153a:	cf 92       	push	r12
    153c:	df 92       	push	r13
    153e:	ef 92       	push	r14
    1540:	ff 92       	push	r15
    1542:	0f 93       	push	r16
    1544:	1f 93       	push	r17
    1546:	cf 93       	push	r28
    1548:	df 93       	push	r29
    154a:	8b 01       	movw	r16, r22
    154c:	ea 01       	movw	r28, r20
    154e:	60 91 44 29 	lds	r22, 0x2944	; 0x802944 <sSensorDataSnapshot485+0x59>
    1552:	70 91 45 29 	lds	r23, 0x2945	; 0x802945 <sSensorDataSnapshot485+0x5a>
    1556:	80 91 46 29 	lds	r24, 0x2946	; 0x802946 <sSensorDataSnapshot485+0x5b>
    155a:	90 91 47 29 	lds	r25, 0x2947	; 0x802947 <sSensorDataSnapshot485+0x5c>
    155e:	61 15       	cp	r22, r1
    1560:	71 05       	cpc	r23, r1
    1562:	81 05       	cpc	r24, r1
    1564:	91 05       	cpc	r25, r1
    1566:	09 f1       	breq	.+66     	; 0x15aa <GetWheelSpeedH2A+0x70>
    1568:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	57 e3       	ldi	r21, 0x37	; 55
    1574:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1578:	9b 01       	movw	r18, r22
    157a:	ac 01       	movw	r20, r24
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e8       	ldi	r23, 0x80	; 128
    1580:	8b e8       	ldi	r24, 0x8B	; 139
    1582:	94 e4       	ldi	r25, 0x44	; 68
    1584:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1588:	f6 2e       	mov	r15, r22
    158a:	e7 2e       	mov	r14, r23
    158c:	d8 2e       	mov	r13, r24
    158e:	c9 2e       	mov	r12, r25
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <__cmpsf2>
    159c:	88 23       	and	r24, r24
    159e:	4c f4       	brge	.+18     	; 0x15b2 <GetWheelSpeedH2A+0x78>
    15a0:	f1 2c       	mov	r15, r1
    15a2:	e1 2c       	mov	r14, r1
    15a4:	d1 2c       	mov	r13, r1
    15a6:	c1 2c       	mov	r12, r1
    15a8:	04 c0       	rjmp	.+8      	; 0x15b2 <GetWheelSpeedH2A+0x78>
    15aa:	f1 2c       	mov	r15, r1
    15ac:	e1 2c       	mov	r14, r1
    15ae:	d1 2c       	mov	r13, r1
    15b0:	c1 2c       	mov	r12, r1
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	92 e2       	ldi	r25, 0x22	; 34
    15be:	9f 93       	push	r25
    15c0:	8f 93       	push	r24
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	1f 93       	push	r17
    15c8:	0f 93       	push	r16
    15ca:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    15ce:	ed b7       	in	r30, 0x3d	; 61
    15d0:	fe b7       	in	r31, 0x3e	; 62
    15d2:	3a 96       	adiw	r30, 0x0a	; 10
    15d4:	ed bf       	out	0x3d, r30	; 61
    15d6:	fe bf       	out	0x3e, r31	; 62
    15d8:	8c 17       	cp	r24, r28
    15da:	9d 07       	cpc	r25, r29
    15dc:	2c f0       	brlt	.+10     	; 0x15e8 <GetWheelSpeedH2A+0xae>
    15de:	f8 01       	movw	r30, r16
    15e0:	10 82       	st	Z, r1
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <GetWheelSpeedH2A+0xb2>
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	df 90       	pop	r13
    15fa:	cf 90       	pop	r12
    15fc:	08 95       	ret

000015fe <GetDiodeStatus>:
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	8b 01       	movw	r16, r22
    160a:	ea 01       	movw	r28, r20
    160c:	eb ee       	ldi	r30, 0xEB	; 235
    160e:	f8 e2       	ldi	r31, 0x28	; 40
    1610:	61 a5       	ldd	r22, Z+41	; 0x29
    1612:	72 a5       	ldd	r23, Z+42	; 0x2a
    1614:	83 a5       	ldd	r24, Z+43	; 0x2b
    1616:	94 a5       	ldd	r25, Z+44	; 0x2c
    1618:	f0 a4       	ldd	r15, Z+40	; 0x28
    161a:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e4       	ldi	r19, 0x40	; 64
    1622:	4c e9       	ldi	r20, 0x9C	; 156
    1624:	55 e4       	ldi	r21, 0x45	; 69
    1626:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    162a:	9f 93       	push	r25
    162c:	8f 93       	push	r24
    162e:	7f 93       	push	r23
    1630:	6f 93       	push	r22
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	f1 10       	cpse	r15, r1
    1638:	01 c0       	rjmp	.+2      	; 0x163c <GetDiodeStatus+0x3e>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	9f 93       	push	r25
    163e:	8f 93       	push	r24
    1640:	89 ef       	ldi	r24, 0xF9	; 249
    1642:	91 e2       	ldi	r25, 0x21	; 33
    1644:	9f 93       	push	r25
    1646:	8f 93       	push	r24
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	1f 93       	push	r17
    164e:	0f 93       	push	r16
    1650:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1654:	ed b7       	in	r30, 0x3d	; 61
    1656:	fe b7       	in	r31, 0x3e	; 62
    1658:	3c 96       	adiw	r30, 0x0c	; 12
    165a:	ed bf       	out	0x3d, r30	; 61
    165c:	fe bf       	out	0x3e, r31	; 62
    165e:	8c 17       	cp	r24, r28
    1660:	9d 07       	cpc	r25, r29
    1662:	2c f0       	brlt	.+10     	; 0x166e <GetDiodeStatus+0x70>
    1664:	f8 01       	movw	r30, r16
    1666:	10 82       	st	Z, r1
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GetDiodeStatus+0x74>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	08 95       	ret

0000167e <GetTimeSnapshot>:
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	8b 01       	movw	r16, r22
    1688:	ea 01       	movw	r28, r20
    168a:	60 91 e7 28 	lds	r22, 0x28E7	; 0x8028e7 <sSessionCycleCountSnapshot485>
    168e:	70 91 e8 28 	lds	r23, 0x28E8	; 0x8028e8 <sSessionCycleCountSnapshot485+0x1>
    1692:	80 91 e9 28 	lds	r24, 0x28E9	; 0x8028e9 <sSessionCycleCountSnapshot485+0x2>
    1696:	90 91 ea 28 	lds	r25, 0x28EA	; 0x8028ea <sSessionCycleCountSnapshot485+0x3>
    169a:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e4       	ldi	r19, 0x40	; 64
    16a2:	4c e9       	ldi	r20, 0x9C	; 156
    16a4:	55 e4       	ldi	r21, 0x45	; 69
    16a6:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    16aa:	9f 93       	push	r25
    16ac:	8f 93       	push	r24
    16ae:	7f 93       	push	r23
    16b0:	6f 93       	push	r22
    16b2:	8c ef       	ldi	r24, 0xFC	; 252
    16b4:	91 e2       	ldi	r25, 0x21	; 33
    16b6:	9f 93       	push	r25
    16b8:	8f 93       	push	r24
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	1f 93       	push	r17
    16c0:	0f 93       	push	r16
    16c2:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    16c6:	ed b7       	in	r30, 0x3d	; 61
    16c8:	fe b7       	in	r31, 0x3e	; 62
    16ca:	3a 96       	adiw	r30, 0x0a	; 10
    16cc:	ed bf       	out	0x3d, r30	; 61
    16ce:	fe bf       	out	0x3e, r31	; 62
    16d0:	8c 17       	cp	r24, r28
    16d2:	9d 07       	cpc	r25, r29
    16d4:	2c f0       	brlt	.+10     	; 0x16e0 <GetTimeSnapshot+0x62>
    16d6:	f8 01       	movw	r30, r16
    16d8:	10 82       	st	Z, r1
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <GetTimeSnapshot+0x66>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	df 91       	pop	r29
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	0f 91       	pop	r16
    16ec:	08 95       	ret

000016ee <GetSupercapEnergy>:
    16ee:	4f 92       	push	r4
    16f0:	5f 92       	push	r5
    16f2:	6f 92       	push	r6
    16f4:	7f 92       	push	r7
    16f6:	8f 92       	push	r8
    16f8:	9f 92       	push	r9
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	8b 01       	movw	r16, r22
    1710:	ea 01       	movw	r28, r20
    1712:	eb ee       	ldi	r30, 0xEB	; 235
    1714:	f8 e2       	ldi	r31, 0x28	; 40
    1716:	20 a1       	ldd	r18, Z+32	; 0x20
    1718:	31 a1       	ldd	r19, Z+33	; 0x21
    171a:	42 a1       	ldd	r20, Z+34	; 0x22
    171c:	53 a1       	ldd	r21, Z+35	; 0x23
    171e:	64 a1       	ldd	r22, Z+36	; 0x24
    1720:	75 a1       	ldd	r23, Z+37	; 0x25
    1722:	86 a1       	ldd	r24, Z+38	; 0x26
    1724:	97 a1       	ldd	r25, Z+39	; 0x27
    1726:	e2 ee       	ldi	r30, 0xE2	; 226
    1728:	f9 e2       	ldi	r31, 0x29	; 41
    172a:	40 88       	ldd	r4, Z+16	; 0x10
    172c:	51 88       	ldd	r5, Z+17	; 0x11
    172e:	62 88       	ldd	r6, Z+18	; 0x12
    1730:	73 88       	ldd	r7, Z+19	; 0x13
    1732:	84 88       	ldd	r8, Z+20	; 0x14
    1734:	95 88       	ldd	r9, Z+21	; 0x15
    1736:	a6 88       	ldd	r10, Z+22	; 0x16
    1738:	b7 88       	ldd	r11, Z+23	; 0x17
    173a:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__floatdisf>
    173e:	6b 01       	movw	r12, r22
    1740:	7c 01       	movw	r14, r24
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e4       	ldi	r19, 0x40	; 64
    1746:	4c e9       	ldi	r20, 0x9C	; 156
    1748:	55 e4       	ldi	r21, 0x45	; 69
    174a:	c3 01       	movw	r24, r6
    174c:	b2 01       	movw	r22, r4
    174e:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1752:	a5 01       	movw	r20, r10
    1754:	94 01       	movw	r18, r8
    1756:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	c7 01       	movw	r24, r14
    1760:	b6 01       	movw	r22, r12
    1762:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1766:	9f 93       	push	r25
    1768:	8f 93       	push	r24
    176a:	7f 93       	push	r23
    176c:	6f 93       	push	r22
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	92 e2       	ldi	r25, 0x22	; 34
    1772:	9f 93       	push	r25
    1774:	8f 93       	push	r24
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	1f 93       	push	r17
    177c:	0f 93       	push	r16
    177e:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1782:	ed b7       	in	r30, 0x3d	; 61
    1784:	fe b7       	in	r31, 0x3e	; 62
    1786:	3a 96       	adiw	r30, 0x0a	; 10
    1788:	ed bf       	out	0x3d, r30	; 61
    178a:	fe bf       	out	0x3e, r31	; 62
    178c:	8c 17       	cp	r24, r28
    178e:	9d 07       	cpc	r25, r29
    1790:	2c f0       	brlt	.+10     	; 0x179c <GetSupercapEnergy+0xae>
    1792:	f8 01       	movw	r30, r16
    1794:	10 82       	st	Z, r1
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GetSupercapEnergy+0xb2>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	bf 90       	pop	r11
    17b2:	af 90       	pop	r10
    17b4:	9f 90       	pop	r9
    17b6:	8f 90       	pop	r8
    17b8:	7f 90       	pop	r7
    17ba:	6f 90       	pop	r6
    17bc:	5f 90       	pop	r5
    17be:	4f 90       	pop	r4
    17c0:	08 95       	ret

000017c2 <GetSupercapPower>:
    17c2:	4f 92       	push	r4
    17c4:	5f 92       	push	r5
    17c6:	6f 92       	push	r6
    17c8:	7f 92       	push	r7
    17ca:	8f 92       	push	r8
    17cc:	9f 92       	push	r9
    17ce:	af 92       	push	r10
    17d0:	bf 92       	push	r11
    17d2:	cf 92       	push	r12
    17d4:	df 92       	push	r13
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	8b 01       	movw	r16, r22
    17e4:	ea 01       	movw	r28, r20
    17e6:	60 91 ff 28 	lds	r22, 0x28FF	; 0x8028ff <sSensorDataSnapshot485+0x14>
    17ea:	70 91 00 29 	lds	r23, 0x2900	; 0x802900 <sSensorDataSnapshot485+0x15>
    17ee:	80 91 01 29 	lds	r24, 0x2901	; 0x802901 <sSensorDataSnapshot485+0x16>
    17f2:	90 91 02 29 	lds	r25, 0x2902	; 0x802902 <sSensorDataSnapshot485+0x17>
    17f6:	e2 ee       	ldi	r30, 0xE2	; 226
    17f8:	f9 e2       	ldi	r31, 0x29	; 41
    17fa:	40 88       	ldd	r4, Z+16	; 0x10
    17fc:	51 88       	ldd	r5, Z+17	; 0x11
    17fe:	62 88       	ldd	r6, Z+18	; 0x12
    1800:	73 88       	ldd	r7, Z+19	; 0x13
    1802:	84 88       	ldd	r8, Z+20	; 0x14
    1804:	95 88       	ldd	r9, Z+21	; 0x15
    1806:	a6 88       	ldd	r10, Z+22	; 0x16
    1808:	b7 88       	ldd	r11, Z+23	; 0x17
    180a:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    180e:	6b 01       	movw	r12, r22
    1810:	7c 01       	movw	r14, r24
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	53 e4       	ldi	r21, 0x43	; 67
    181a:	c3 01       	movw	r24, r6
    181c:	b2 01       	movw	r22, r4
    181e:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1822:	a5 01       	movw	r20, r10
    1824:	94 01       	movw	r18, r8
    1826:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    182a:	9b 01       	movw	r18, r22
    182c:	ac 01       	movw	r20, r24
    182e:	c7 01       	movw	r24, r14
    1830:	b6 01       	movw	r22, r12
    1832:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1836:	9f 93       	push	r25
    1838:	8f 93       	push	r24
    183a:	7f 93       	push	r23
    183c:	6f 93       	push	r22
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	92 e2       	ldi	r25, 0x22	; 34
    1842:	9f 93       	push	r25
    1844:	8f 93       	push	r24
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	1f 93       	push	r17
    184c:	0f 93       	push	r16
    184e:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1852:	ed b7       	in	r30, 0x3d	; 61
    1854:	fe b7       	in	r31, 0x3e	; 62
    1856:	3a 96       	adiw	r30, 0x0a	; 10
    1858:	ed bf       	out	0x3d, r30	; 61
    185a:	fe bf       	out	0x3e, r31	; 62
    185c:	8c 17       	cp	r24, r28
    185e:	9d 07       	cpc	r25, r29
    1860:	2c f0       	brlt	.+10     	; 0x186c <GetSupercapPower+0xaa>
    1862:	f8 01       	movw	r30, r16
    1864:	10 82       	st	Z, r1
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GetSupercapPower+0xae>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	cf 90       	pop	r12
    1880:	bf 90       	pop	r11
    1882:	af 90       	pop	r10
    1884:	9f 90       	pop	r9
    1886:	8f 90       	pop	r8
    1888:	7f 90       	pop	r7
    188a:	6f 90       	pop	r6
    188c:	5f 90       	pop	r5
    188e:	4f 90       	pop	r4
    1890:	08 95       	ret

00001892 <GetSupercapCurrent>:
    1892:	8f 92       	push	r8
    1894:	9f 92       	push	r9
    1896:	af 92       	push	r10
    1898:	bf 92       	push	r11
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	8b 01       	movw	r16, r22
    18ac:	ea 01       	movw	r28, r20
    18ae:	60 91 f7 28 	lds	r22, 0x28F7	; 0x8028f7 <sSensorDataSnapshot485+0xc>
    18b2:	70 91 f8 28 	lds	r23, 0x28F8	; 0x8028f8 <sSensorDataSnapshot485+0xd>
    18b6:	80 91 f9 28 	lds	r24, 0x28F9	; 0x8028f9 <sSensorDataSnapshot485+0xe>
    18ba:	90 91 fa 28 	lds	r25, 0x28FA	; 0x8028fa <sSensorDataSnapshot485+0xf>
    18be:	80 90 f6 29 	lds	r8, 0x29F6	; 0x8029f6 <sCal+0x14>
    18c2:	90 90 f7 29 	lds	r9, 0x29F7	; 0x8029f7 <sCal+0x15>
    18c6:	a0 90 f8 29 	lds	r10, 0x29F8	; 0x8029f8 <sCal+0x16>
    18ca:	b0 90 f9 29 	lds	r11, 0x29F9	; 0x8029f9 <sCal+0x17>
    18ce:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    18d2:	6b 01       	movw	r12, r22
    18d4:	7c 01       	movw	r14, r24
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	57 e4       	ldi	r21, 0x47	; 71
    18de:	c5 01       	movw	r24, r10
    18e0:	b4 01       	movw	r22, r8
    18e2:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    18e6:	9b 01       	movw	r18, r22
    18e8:	ac 01       	movw	r20, r24
    18ea:	c7 01       	movw	r24, r14
    18ec:	b6 01       	movw	r22, r12
    18ee:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    18f2:	9f 93       	push	r25
    18f4:	8f 93       	push	r24
    18f6:	7f 93       	push	r23
    18f8:	6f 93       	push	r22
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	92 e2       	ldi	r25, 0x22	; 34
    18fe:	9f 93       	push	r25
    1900:	8f 93       	push	r24
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	1f 93       	push	r17
    1908:	0f 93       	push	r16
    190a:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    190e:	ed b7       	in	r30, 0x3d	; 61
    1910:	fe b7       	in	r31, 0x3e	; 62
    1912:	3a 96       	adiw	r30, 0x0a	; 10
    1914:	ed bf       	out	0x3d, r30	; 61
    1916:	fe bf       	out	0x3e, r31	; 62
    1918:	8c 17       	cp	r24, r28
    191a:	9d 07       	cpc	r25, r29
    191c:	2c f0       	brlt	.+10     	; 0x1928 <GetSupercapCurrent+0x96>
    191e:	f8 01       	movw	r30, r16
    1920:	10 82       	st	Z, r1
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 c0       	rjmp	.+4      	; 0x192c <GetSupercapCurrent+0x9a>
    1928:	80 e0       	ldi	r24, 0x00	; 0
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	ff 90       	pop	r15
    1936:	ef 90       	pop	r14
    1938:	df 90       	pop	r13
    193a:	cf 90       	pop	r12
    193c:	bf 90       	pop	r11
    193e:	af 90       	pop	r10
    1940:	9f 90       	pop	r9
    1942:	8f 90       	pop	r8
    1944:	08 95       	ret

00001946 <GetSupercapVoltage>:
    1946:	8f 92       	push	r8
    1948:	9f 92       	push	r9
    194a:	af 92       	push	r10
    194c:	bf 92       	push	r11
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	8b 01       	movw	r16, r22
    1960:	ea 01       	movw	r28, r20
    1962:	60 91 f3 28 	lds	r22, 0x28F3	; 0x8028f3 <sSensorDataSnapshot485+0x8>
    1966:	70 91 f4 28 	lds	r23, 0x28F4	; 0x8028f4 <sSensorDataSnapshot485+0x9>
    196a:	80 91 f5 28 	lds	r24, 0x28F5	; 0x8028f5 <sSensorDataSnapshot485+0xa>
    196e:	90 91 f6 28 	lds	r25, 0x28F6	; 0x8028f6 <sSensorDataSnapshot485+0xb>
    1972:	80 90 f2 29 	lds	r8, 0x29F2	; 0x8029f2 <sCal+0x10>
    1976:	90 90 f3 29 	lds	r9, 0x29F3	; 0x8029f3 <sCal+0x11>
    197a:	a0 90 f4 29 	lds	r10, 0x29F4	; 0x8029f4 <sCal+0x12>
    197e:	b0 90 f5 29 	lds	r11, 0x29F5	; 0x8029f5 <sCal+0x13>
    1982:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1986:	6b 01       	movw	r12, r22
    1988:	7c 01       	movw	r14, r24
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e8       	ldi	r20, 0x80	; 128
    1990:	57 e4       	ldi	r21, 0x47	; 71
    1992:	c5 01       	movw	r24, r10
    1994:	b4 01       	movw	r22, r8
    1996:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    199a:	9b 01       	movw	r18, r22
    199c:	ac 01       	movw	r20, r24
    199e:	c7 01       	movw	r24, r14
    19a0:	b6 01       	movw	r22, r12
    19a2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    19a6:	9f 93       	push	r25
    19a8:	8f 93       	push	r24
    19aa:	7f 93       	push	r23
    19ac:	6f 93       	push	r22
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	92 e2       	ldi	r25, 0x22	; 34
    19b2:	9f 93       	push	r25
    19b4:	8f 93       	push	r24
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	1f 93       	push	r17
    19bc:	0f 93       	push	r16
    19be:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    19c2:	ed b7       	in	r30, 0x3d	; 61
    19c4:	fe b7       	in	r31, 0x3e	; 62
    19c6:	3a 96       	adiw	r30, 0x0a	; 10
    19c8:	ed bf       	out	0x3d, r30	; 61
    19ca:	fe bf       	out	0x3e, r31	; 62
    19cc:	8c 17       	cp	r24, r28
    19ce:	9d 07       	cpc	r25, r29
    19d0:	2c f0       	brlt	.+10     	; 0x19dc <GetSupercapVoltage+0x96>
    19d2:	f8 01       	movw	r30, r16
    19d4:	10 82       	st	Z, r1
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <GetSupercapVoltage+0x9a>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	9f 90       	pop	r9
    19f6:	8f 90       	pop	r8
    19f8:	08 95       	ret

000019fa <GetFuelCellEnergy>:
    19fa:	4f 92       	push	r4
    19fc:	5f 92       	push	r5
    19fe:	6f 92       	push	r6
    1a00:	7f 92       	push	r7
    1a02:	8f 92       	push	r8
    1a04:	9f 92       	push	r9
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	8b 01       	movw	r16, r22
    1a1c:	ea 01       	movw	r28, r20
    1a1e:	eb ee       	ldi	r30, 0xEB	; 235
    1a20:	f8 e2       	ldi	r31, 0x28	; 40
    1a22:	20 8d       	ldd	r18, Z+24	; 0x18
    1a24:	31 8d       	ldd	r19, Z+25	; 0x19
    1a26:	42 8d       	ldd	r20, Z+26	; 0x1a
    1a28:	53 8d       	ldd	r21, Z+27	; 0x1b
    1a2a:	64 8d       	ldd	r22, Z+28	; 0x1c
    1a2c:	75 8d       	ldd	r23, Z+29	; 0x1d
    1a2e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a30:	97 8d       	ldd	r25, Z+31	; 0x1f
    1a32:	e2 ee       	ldi	r30, 0xE2	; 226
    1a34:	f9 e2       	ldi	r31, 0x29	; 41
    1a36:	40 84       	ldd	r4, Z+8	; 0x08
    1a38:	51 84       	ldd	r5, Z+9	; 0x09
    1a3a:	62 84       	ldd	r6, Z+10	; 0x0a
    1a3c:	73 84       	ldd	r7, Z+11	; 0x0b
    1a3e:	84 84       	ldd	r8, Z+12	; 0x0c
    1a40:	95 84       	ldd	r9, Z+13	; 0x0d
    1a42:	a6 84       	ldd	r10, Z+14	; 0x0e
    1a44:	b7 84       	ldd	r11, Z+15	; 0x0f
    1a46:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__floatdisf>
    1a4a:	6b 01       	movw	r12, r22
    1a4c:	7c 01       	movw	r14, r24
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e4       	ldi	r19, 0x40	; 64
    1a52:	4c e9       	ldi	r20, 0x9C	; 156
    1a54:	55 e4       	ldi	r21, 0x45	; 69
    1a56:	c3 01       	movw	r24, r6
    1a58:	b2 01       	movw	r22, r4
    1a5a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1a5e:	a5 01       	movw	r20, r10
    1a60:	94 01       	movw	r18, r8
    1a62:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1a66:	9b 01       	movw	r18, r22
    1a68:	ac 01       	movw	r20, r24
    1a6a:	c7 01       	movw	r24, r14
    1a6c:	b6 01       	movw	r22, r12
    1a6e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1a72:	9f 93       	push	r25
    1a74:	8f 93       	push	r24
    1a76:	7f 93       	push	r23
    1a78:	6f 93       	push	r22
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	92 e2       	ldi	r25, 0x22	; 34
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	1f 93       	push	r17
    1a88:	0f 93       	push	r16
    1a8a:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1a8e:	ed b7       	in	r30, 0x3d	; 61
    1a90:	fe b7       	in	r31, 0x3e	; 62
    1a92:	3a 96       	adiw	r30, 0x0a	; 10
    1a94:	ed bf       	out	0x3d, r30	; 61
    1a96:	fe bf       	out	0x3e, r31	; 62
    1a98:	8c 17       	cp	r24, r28
    1a9a:	9d 07       	cpc	r25, r29
    1a9c:	2c f0       	brlt	.+10     	; 0x1aa8 <GetFuelCellEnergy+0xae>
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	10 82       	st	Z, r1
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <GetFuelCellEnergy+0xb2>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	1f 91       	pop	r17
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	9f 90       	pop	r9
    1ac2:	8f 90       	pop	r8
    1ac4:	7f 90       	pop	r7
    1ac6:	6f 90       	pop	r6
    1ac8:	5f 90       	pop	r5
    1aca:	4f 90       	pop	r4
    1acc:	08 95       	ret

00001ace <GetFuelCellPower>:
    1ace:	4f 92       	push	r4
    1ad0:	5f 92       	push	r5
    1ad2:	6f 92       	push	r6
    1ad4:	7f 92       	push	r7
    1ad6:	8f 92       	push	r8
    1ad8:	9f 92       	push	r9
    1ada:	af 92       	push	r10
    1adc:	bf 92       	push	r11
    1ade:	cf 92       	push	r12
    1ae0:	df 92       	push	r13
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	8b 01       	movw	r16, r22
    1af0:	ea 01       	movw	r28, r20
    1af2:	60 91 fb 28 	lds	r22, 0x28FB	; 0x8028fb <sSensorDataSnapshot485+0x10>
    1af6:	70 91 fc 28 	lds	r23, 0x28FC	; 0x8028fc <sSensorDataSnapshot485+0x11>
    1afa:	80 91 fd 28 	lds	r24, 0x28FD	; 0x8028fd <sSensorDataSnapshot485+0x12>
    1afe:	90 91 fe 28 	lds	r25, 0x28FE	; 0x8028fe <sSensorDataSnapshot485+0x13>
    1b02:	e2 ee       	ldi	r30, 0xE2	; 226
    1b04:	f9 e2       	ldi	r31, 0x29	; 41
    1b06:	40 84       	ldd	r4, Z+8	; 0x08
    1b08:	51 84       	ldd	r5, Z+9	; 0x09
    1b0a:	62 84       	ldd	r6, Z+10	; 0x0a
    1b0c:	73 84       	ldd	r7, Z+11	; 0x0b
    1b0e:	84 84       	ldd	r8, Z+12	; 0x0c
    1b10:	95 84       	ldd	r9, Z+13	; 0x0d
    1b12:	a6 84       	ldd	r10, Z+14	; 0x0e
    1b14:	b7 84       	ldd	r11, Z+15	; 0x0f
    1b16:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1b1a:	6b 01       	movw	r12, r22
    1b1c:	7c 01       	movw	r14, r24
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	53 e4       	ldi	r21, 0x43	; 67
    1b26:	c3 01       	movw	r24, r6
    1b28:	b2 01       	movw	r22, r4
    1b2a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1b2e:	a5 01       	movw	r20, r10
    1b30:	94 01       	movw	r18, r8
    1b32:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1b36:	9b 01       	movw	r18, r22
    1b38:	ac 01       	movw	r20, r24
    1b3a:	c7 01       	movw	r24, r14
    1b3c:	b6 01       	movw	r22, r12
    1b3e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1b42:	9f 93       	push	r25
    1b44:	8f 93       	push	r24
    1b46:	7f 93       	push	r23
    1b48:	6f 93       	push	r22
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	92 e2       	ldi	r25, 0x22	; 34
    1b4e:	9f 93       	push	r25
    1b50:	8f 93       	push	r24
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	1f 93       	push	r17
    1b58:	0f 93       	push	r16
    1b5a:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1b5e:	ed b7       	in	r30, 0x3d	; 61
    1b60:	fe b7       	in	r31, 0x3e	; 62
    1b62:	3a 96       	adiw	r30, 0x0a	; 10
    1b64:	ed bf       	out	0x3d, r30	; 61
    1b66:	fe bf       	out	0x3e, r31	; 62
    1b68:	8c 17       	cp	r24, r28
    1b6a:	9d 07       	cpc	r25, r29
    1b6c:	2c f0       	brlt	.+10     	; 0x1b78 <GetFuelCellPower+0xaa>
    1b6e:	f8 01       	movw	r30, r16
    1b70:	10 82       	st	Z, r1
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <GetFuelCellPower+0xae>
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	bf 90       	pop	r11
    1b8e:	af 90       	pop	r10
    1b90:	9f 90       	pop	r9
    1b92:	8f 90       	pop	r8
    1b94:	7f 90       	pop	r7
    1b96:	6f 90       	pop	r6
    1b98:	5f 90       	pop	r5
    1b9a:	4f 90       	pop	r4
    1b9c:	08 95       	ret

00001b9e <GetFuelCellCurrent>:
    1b9e:	8f 92       	push	r8
    1ba0:	9f 92       	push	r9
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	8b 01       	movw	r16, r22
    1bb8:	ea 01       	movw	r28, r20
    1bba:	60 91 ef 28 	lds	r22, 0x28EF	; 0x8028ef <sSensorDataSnapshot485+0x4>
    1bbe:	70 91 f0 28 	lds	r23, 0x28F0	; 0x8028f0 <sSensorDataSnapshot485+0x5>
    1bc2:	80 91 f1 28 	lds	r24, 0x28F1	; 0x8028f1 <sSensorDataSnapshot485+0x6>
    1bc6:	90 91 f2 28 	lds	r25, 0x28F2	; 0x8028f2 <sSensorDataSnapshot485+0x7>
    1bca:	80 90 ee 29 	lds	r8, 0x29EE	; 0x8029ee <sCal+0xc>
    1bce:	90 90 ef 29 	lds	r9, 0x29EF	; 0x8029ef <sCal+0xd>
    1bd2:	a0 90 f0 29 	lds	r10, 0x29F0	; 0x8029f0 <sCal+0xe>
    1bd6:	b0 90 f1 29 	lds	r11, 0x29F1	; 0x8029f1 <sCal+0xf>
    1bda:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1bde:	6b 01       	movw	r12, r22
    1be0:	7c 01       	movw	r14, r24
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	57 e4       	ldi	r21, 0x47	; 71
    1bea:	c5 01       	movw	r24, r10
    1bec:	b4 01       	movw	r22, r8
    1bee:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1bf2:	9b 01       	movw	r18, r22
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	b6 01       	movw	r22, r12
    1bfa:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1bfe:	9f 93       	push	r25
    1c00:	8f 93       	push	r24
    1c02:	7f 93       	push	r23
    1c04:	6f 93       	push	r22
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	92 e2       	ldi	r25, 0x22	; 34
    1c0a:	9f 93       	push	r25
    1c0c:	8f 93       	push	r24
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	1f 93       	push	r17
    1c14:	0f 93       	push	r16
    1c16:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1c1a:	ed b7       	in	r30, 0x3d	; 61
    1c1c:	fe b7       	in	r31, 0x3e	; 62
    1c1e:	3a 96       	adiw	r30, 0x0a	; 10
    1c20:	ed bf       	out	0x3d, r30	; 61
    1c22:	fe bf       	out	0x3e, r31	; 62
    1c24:	8c 17       	cp	r24, r28
    1c26:	9d 07       	cpc	r25, r29
    1c28:	2c f0       	brlt	.+10     	; 0x1c34 <GetFuelCellCurrent+0x96>
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	10 82       	st	Z, r1
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <GetFuelCellCurrent+0x9a>
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	df 90       	pop	r13
    1c46:	cf 90       	pop	r12
    1c48:	bf 90       	pop	r11
    1c4a:	af 90       	pop	r10
    1c4c:	9f 90       	pop	r9
    1c4e:	8f 90       	pop	r8
    1c50:	08 95       	ret

00001c52 <GetFuelCellVoltage>:
    1c52:	8f 92       	push	r8
    1c54:	9f 92       	push	r9
    1c56:	af 92       	push	r10
    1c58:	bf 92       	push	r11
    1c5a:	cf 92       	push	r12
    1c5c:	df 92       	push	r13
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	1f 93       	push	r17
    1c66:	cf 93       	push	r28
    1c68:	df 93       	push	r29
    1c6a:	8b 01       	movw	r16, r22
    1c6c:	ea 01       	movw	r28, r20
    1c6e:	60 91 eb 28 	lds	r22, 0x28EB	; 0x8028eb <sSensorDataSnapshot485>
    1c72:	70 91 ec 28 	lds	r23, 0x28EC	; 0x8028ec <sSensorDataSnapshot485+0x1>
    1c76:	80 91 ed 28 	lds	r24, 0x28ED	; 0x8028ed <sSensorDataSnapshot485+0x2>
    1c7a:	90 91 ee 28 	lds	r25, 0x28EE	; 0x8028ee <sSensorDataSnapshot485+0x3>
    1c7e:	80 90 ea 29 	lds	r8, 0x29EA	; 0x8029ea <sCal+0x8>
    1c82:	90 90 eb 29 	lds	r9, 0x29EB	; 0x8029eb <sCal+0x9>
    1c86:	a0 90 ec 29 	lds	r10, 0x29EC	; 0x8029ec <sCal+0xa>
    1c8a:	b0 90 ed 29 	lds	r11, 0x29ED	; 0x8029ed <sCal+0xb>
    1c8e:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1c92:	6b 01       	movw	r12, r22
    1c94:	7c 01       	movw	r14, r24
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	57 e4       	ldi	r21, 0x47	; 71
    1c9e:	c5 01       	movw	r24, r10
    1ca0:	b4 01       	movw	r22, r8
    1ca2:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1ca6:	9b 01       	movw	r18, r22
    1ca8:	ac 01       	movw	r20, r24
    1caa:	c7 01       	movw	r24, r14
    1cac:	b6 01       	movw	r22, r12
    1cae:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1cb2:	9f 93       	push	r25
    1cb4:	8f 93       	push	r24
    1cb6:	7f 93       	push	r23
    1cb8:	6f 93       	push	r22
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	92 e2       	ldi	r25, 0x22	; 34
    1cbe:	9f 93       	push	r25
    1cc0:	8f 93       	push	r24
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	1f 93       	push	r17
    1cc8:	0f 93       	push	r16
    1cca:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1cce:	ed b7       	in	r30, 0x3d	; 61
    1cd0:	fe b7       	in	r31, 0x3e	; 62
    1cd2:	3a 96       	adiw	r30, 0x0a	; 10
    1cd4:	ed bf       	out	0x3d, r30	; 61
    1cd6:	fe bf       	out	0x3e, r31	; 62
    1cd8:	8c 17       	cp	r24, r28
    1cda:	9d 07       	cpc	r25, r29
    1cdc:	2c f0       	brlt	.+10     	; 0x1ce8 <GetFuelCellVoltage+0x96>
    1cde:	f8 01       	movw	r30, r16
    1ce0:	10 82       	st	Z, r1
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <GetFuelCellVoltage+0x9a>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	1f 91       	pop	r17
    1cf2:	0f 91       	pop	r16
    1cf4:	ff 90       	pop	r15
    1cf6:	ef 90       	pop	r14
    1cf8:	df 90       	pop	r13
    1cfa:	cf 90       	pop	r12
    1cfc:	bf 90       	pop	r11
    1cfe:	af 90       	pop	r10
    1d00:	9f 90       	pop	r9
    1d02:	8f 90       	pop	r8
    1d04:	08 95       	ret

00001d06 <GetMotorCurrent>:
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	8b 01       	movw	r16, r22
    1d10:	ea 01       	movw	r28, r20
    1d12:	60 91 20 29 	lds	r22, 0x2920	; 0x802920 <sSensorDataSnapshot485+0x35>
    1d16:	70 91 21 29 	lds	r23, 0x2921	; 0x802921 <sSensorDataSnapshot485+0x36>
    1d1a:	80 91 22 29 	lds	r24, 0x2922	; 0x802922 <sSensorDataSnapshot485+0x37>
    1d1e:	90 91 23 29 	lds	r25, 0x2923	; 0x802923 <sSensorDataSnapshot485+0x38>
    1d22:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	48 e4       	ldi	r20, 0x48	; 72
    1d2c:	5b e4       	ldi	r21, 0x4B	; 75
    1d2e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	4a e7       	ldi	r20, 0x7A	; 122
    1d38:	5c e4       	ldi	r21, 0x4C	; 76
    1d3a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1d3e:	9f 93       	push	r25
    1d40:	8f 93       	push	r24
    1d42:	7f 93       	push	r23
    1d44:	6f 93       	push	r22
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	92 e2       	ldi	r25, 0x22	; 34
    1d4a:	9f 93       	push	r25
    1d4c:	8f 93       	push	r24
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	1f 93       	push	r17
    1d54:	0f 93       	push	r16
    1d56:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1d5a:	ed b7       	in	r30, 0x3d	; 61
    1d5c:	fe b7       	in	r31, 0x3e	; 62
    1d5e:	3a 96       	adiw	r30, 0x0a	; 10
    1d60:	ed bf       	out	0x3d, r30	; 61
    1d62:	fe bf       	out	0x3e, r31	; 62
    1d64:	8c 17       	cp	r24, r28
    1d66:	9d 07       	cpc	r25, r29
    1d68:	2c f0       	brlt	.+10     	; 0x1d74 <GetMotorCurrent+0x6e>
    1d6a:	f8 01       	movw	r30, r16
    1d6c:	10 82       	st	Z, r1
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <GetMotorCurrent+0x72>
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	08 95       	ret

00001d82 <GetMotorVoltage>:
    1d82:	8f 92       	push	r8
    1d84:	9f 92       	push	r9
    1d86:	af 92       	push	r10
    1d88:	bf 92       	push	r11
    1d8a:	cf 92       	push	r12
    1d8c:	df 92       	push	r13
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	8b 01       	movw	r16, r22
    1d9c:	ea 01       	movw	r28, r20
    1d9e:	60 91 1c 29 	lds	r22, 0x291C	; 0x80291c <sSensorDataSnapshot485+0x31>
    1da2:	70 91 1d 29 	lds	r23, 0x291D	; 0x80291d <sSensorDataSnapshot485+0x32>
    1da6:	80 91 1e 29 	lds	r24, 0x291E	; 0x80291e <sSensorDataSnapshot485+0x33>
    1daa:	90 91 1f 29 	lds	r25, 0x291F	; 0x80291f <sSensorDataSnapshot485+0x34>
    1dae:	80 90 02 2a 	lds	r8, 0x2A02	; 0x802a02 <sCal+0x20>
    1db2:	90 90 03 2a 	lds	r9, 0x2A03	; 0x802a03 <sCal+0x21>
    1db6:	a0 90 04 2a 	lds	r10, 0x2A04	; 0x802a04 <sCal+0x22>
    1dba:	b0 90 05 2a 	lds	r11, 0x2A05	; 0x802a05 <sCal+0x23>
    1dbe:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1dc2:	6b 01       	movw	r12, r22
    1dc4:	7c 01       	movw	r14, r24
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	57 e4       	ldi	r21, 0x47	; 71
    1dce:	c5 01       	movw	r24, r10
    1dd0:	b4 01       	movw	r22, r8
    1dd2:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	ac 01       	movw	r20, r24
    1dda:	c7 01       	movw	r24, r14
    1ddc:	b6 01       	movw	r22, r12
    1dde:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1de2:	9f 93       	push	r25
    1de4:	8f 93       	push	r24
    1de6:	7f 93       	push	r23
    1de8:	6f 93       	push	r22
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	92 e2       	ldi	r25, 0x22	; 34
    1dee:	9f 93       	push	r25
    1df0:	8f 93       	push	r24
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	1f 93       	push	r17
    1df8:	0f 93       	push	r16
    1dfa:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1dfe:	ed b7       	in	r30, 0x3d	; 61
    1e00:	fe b7       	in	r31, 0x3e	; 62
    1e02:	3a 96       	adiw	r30, 0x0a	; 10
    1e04:	ed bf       	out	0x3d, r30	; 61
    1e06:	fe bf       	out	0x3e, r31	; 62
    1e08:	8c 17       	cp	r24, r28
    1e0a:	9d 07       	cpc	r25, r29
    1e0c:	2c f0       	brlt	.+10     	; 0x1e18 <GetMotorVoltage+0x96>
    1e0e:	f8 01       	movw	r30, r16
    1e10:	10 82       	st	Z, r1
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <GetMotorVoltage+0x9a>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	df 90       	pop	r13
    1e2a:	cf 90       	pop	r12
    1e2c:	bf 90       	pop	r11
    1e2e:	af 90       	pop	r10
    1e30:	9f 90       	pop	r9
    1e32:	8f 90       	pop	r8
    1e34:	08 95       	ret

00001e36 <GetWheelDistance>:
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	8b 01       	movw	r16, r22
    1e40:	ea 01       	movw	r28, r20
    1e42:	60 91 48 29 	lds	r22, 0x2948	; 0x802948 <sSensorDataSnapshot485+0x5d>
    1e46:	70 91 49 29 	lds	r23, 0x2949	; 0x802949 <sSensorDataSnapshot485+0x5e>
    1e4a:	80 91 4a 29 	lds	r24, 0x294A	; 0x80294a <sSensorDataSnapshot485+0x5f>
    1e4e:	90 91 4b 29 	lds	r25, 0x294B	; 0x80294b <sSensorDataSnapshot485+0x60>
    1e52:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    1e56:	2e e4       	ldi	r18, 0x4E	; 78
    1e58:	32 e6       	ldi	r19, 0x62	; 98
    1e5a:	40 ee       	ldi	r20, 0xE0	; 224
    1e5c:	5c e3       	ldi	r21, 0x3C	; 60
    1e5e:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1e62:	9f 93       	push	r25
    1e64:	8f 93       	push	r24
    1e66:	7f 93       	push	r23
    1e68:	6f 93       	push	r22
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	92 e2       	ldi	r25, 0x22	; 34
    1e6e:	9f 93       	push	r25
    1e70:	8f 93       	push	r24
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	1f 93       	push	r17
    1e78:	0f 93       	push	r16
    1e7a:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1e7e:	ed b7       	in	r30, 0x3d	; 61
    1e80:	fe b7       	in	r31, 0x3e	; 62
    1e82:	3a 96       	adiw	r30, 0x0a	; 10
    1e84:	ed bf       	out	0x3d, r30	; 61
    1e86:	fe bf       	out	0x3e, r31	; 62
    1e88:	8c 17       	cp	r24, r28
    1e8a:	9d 07       	cpc	r25, r29
    1e8c:	2c f0       	brlt	.+10     	; 0x1e98 <GetWheelDistance+0x62>
    1e8e:	f8 01       	movw	r30, r16
    1e90:	10 82       	st	Z, r1
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <GetWheelDistance+0x66>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <GetWheelSpeedEVA>:
    1ea6:	cf 92       	push	r12
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	8b 01       	movw	r16, r22
    1eb8:	ea 01       	movw	r28, r20
    1eba:	60 91 44 29 	lds	r22, 0x2944	; 0x802944 <sSensorDataSnapshot485+0x59>
    1ebe:	70 91 45 29 	lds	r23, 0x2945	; 0x802945 <sSensorDataSnapshot485+0x5a>
    1ec2:	80 91 46 29 	lds	r24, 0x2946	; 0x802946 <sSensorDataSnapshot485+0x5b>
    1ec6:	90 91 47 29 	lds	r25, 0x2947	; 0x802947 <sSensorDataSnapshot485+0x5c>
    1eca:	61 15       	cp	r22, r1
    1ecc:	71 05       	cpc	r23, r1
    1ece:	81 05       	cpc	r24, r1
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	09 f1       	breq	.+66     	; 0x1f16 <GetWheelSpeedEVA+0x70>
    1ed4:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	57 e3       	ldi	r21, 0x37	; 55
    1ee0:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    1ee4:	9b 01       	movw	r18, r22
    1ee6:	ac 01       	movw	r20, r24
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	74 e8       	ldi	r23, 0x84	; 132
    1eec:	86 ef       	ldi	r24, 0xF6	; 246
    1eee:	93 e4       	ldi	r25, 0x43	; 67
    1ef0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    1ef4:	f6 2e       	mov	r15, r22
    1ef6:	e7 2e       	mov	r14, r23
    1ef8:	d8 2e       	mov	r13, r24
    1efa:	c9 2e       	mov	r12, r25
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <__cmpsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	4c f4       	brge	.+18     	; 0x1f1e <GetWheelSpeedEVA+0x78>
    1f0c:	f1 2c       	mov	r15, r1
    1f0e:	e1 2c       	mov	r14, r1
    1f10:	d1 2c       	mov	r13, r1
    1f12:	c1 2c       	mov	r12, r1
    1f14:	04 c0       	rjmp	.+8      	; 0x1f1e <GetWheelSpeedEVA+0x78>
    1f16:	f1 2c       	mov	r15, r1
    1f18:	e1 2c       	mov	r14, r1
    1f1a:	d1 2c       	mov	r13, r1
    1f1c:	c1 2c       	mov	r12, r1
    1f1e:	cf 92       	push	r12
    1f20:	df 92       	push	r13
    1f22:	ef 92       	push	r14
    1f24:	ff 92       	push	r15
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	92 e2       	ldi	r25, 0x22	; 34
    1f2a:	9f 93       	push	r25
    1f2c:	8f 93       	push	r24
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	1f 93       	push	r17
    1f34:	0f 93       	push	r16
    1f36:	0e 94 f0 3c 	call	0x79e0	; 0x79e0 <snprintf>
    1f3a:	ed b7       	in	r30, 0x3d	; 61
    1f3c:	fe b7       	in	r31, 0x3e	; 62
    1f3e:	3a 96       	adiw	r30, 0x0a	; 10
    1f40:	ed bf       	out	0x3d, r30	; 61
    1f42:	fe bf       	out	0x3e, r31	; 62
    1f44:	8c 17       	cp	r24, r28
    1f46:	9d 07       	cpc	r25, r29
    1f48:	2c f0       	brlt	.+10     	; 0x1f54 <GetWheelSpeedEVA+0xae>
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	10 82       	st	Z, r1
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <GetWheelSpeedEVA+0xb2>
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	df 90       	pop	r13
    1f66:	cf 90       	pop	r12
    1f68:	08 95       	ret

00001f6a <InitCoreAnalog>:
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	80 e2       	ldi	r24, 0x20	; 32
    1f7a:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    1f7e:	c0 e0       	ldi	r28, 0x00	; 0
    1f80:	d2 e0       	ldi	r29, 0x02	; 2
    1f82:	8c 87       	std	Y+12, r24	; 0x0c
    1f84:	81 e2       	ldi	r24, 0x21	; 33
    1f86:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    1f8a:	8d 87       	std	Y+13, r24	; 0x0d
    1f8c:	84 e2       	ldi	r24, 0x24	; 36
    1f8e:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    1f92:	00 e4       	ldi	r16, 0x40	; 64
    1f94:	12 e0       	ldi	r17, 0x02	; 2
    1f96:	f8 01       	movw	r30, r16
    1f98:	84 87       	std	Z+12, r24	; 0x0c
    1f9a:	85 e2       	ldi	r24, 0x25	; 37
    1f9c:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	85 87       	std	Z+13, r24	; 0x0d
    1fa4:	e0 e0       	ldi	r30, 0x00	; 0
    1fa6:	f6 e0       	ldi	r31, 0x06	; 6
    1fa8:	14 82       	std	Z+4, r1	; 0x04
    1faa:	10 82       	st	Z, r1
    1fac:	a0 e2       	ldi	r26, 0x20	; 32
    1fae:	b6 e0       	ldi	r27, 0x06	; 6
    1fb0:	14 96       	adiw	r26, 0x04	; 4
    1fb2:	1c 92       	st	X, r1
    1fb4:	14 97       	sbiw	r26, 0x04	; 4
    1fb6:	1c 92       	st	X, r1
    1fb8:	87 e0       	ldi	r24, 0x07	; 7
    1fba:	80 8b       	std	Z+16, r24	; 0x10
    1fbc:	81 8b       	std	Z+17, r24	; 0x11
    1fbe:	82 8b       	std	Z+18, r24	; 0x12
    1fc0:	83 8b       	std	Z+19, r24	; 0x13
    1fc2:	84 8b       	std	Z+20, r24	; 0x14
    1fc4:	85 8b       	std	Z+21, r24	; 0x15
    1fc6:	86 8b       	std	Z+22, r24	; 0x16
    1fc8:	50 96       	adiw	r26, 0x10	; 16
    1fca:	8c 93       	st	X, r24
    1fcc:	50 97       	sbiw	r26, 0x10	; 16
    1fce:	51 96       	adiw	r26, 0x11	; 17
    1fd0:	8c 93       	st	X, r24
    1fd2:	51 97       	sbiw	r26, 0x11	; 17
    1fd4:	52 96       	adiw	r26, 0x12	; 18
    1fd6:	8c 93       	st	X, r24
    1fd8:	52 97       	sbiw	r26, 0x12	; 18
    1fda:	53 96       	adiw	r26, 0x13	; 19
    1fdc:	8c 93       	st	X, r24
    1fde:	53 97       	sbiw	r26, 0x13	; 19
    1fe0:	54 96       	adiw	r26, 0x14	; 20
    1fe2:	8c 93       	st	X, r24
    1fe4:	54 97       	sbiw	r26, 0x14	; 20
    1fe6:	55 96       	adiw	r26, 0x15	; 21
    1fe8:	8c 93       	st	X, r24
    1fea:	55 97       	sbiw	r26, 0x15	; 21
    1fec:	56 96       	adiw	r26, 0x16	; 22
    1fee:	8c 93       	st	X, r24
    1ff0:	56 97       	sbiw	r26, 0x16	; 22
    1ff2:	57 96       	adiw	r26, 0x17	; 23
    1ff4:	8c 93       	st	X, r24
    1ff6:	68 94       	set
    1ff8:	dd 24       	eor	r13, r13
    1ffa:	d4 f8       	bld	r13, 4
    1ffc:	d7 8a       	std	Z+23, r13	; 0x17
    1ffe:	d9 82       	std	Y+1, r13	; 0x01
    2000:	50 e2       	ldi	r21, 0x20	; 32
    2002:	5a 83       	std	Y+2, r21	; 0x02
    2004:	46 ec       	ldi	r20, 0xC6	; 198
    2006:	4b 83       	std	Y+3, r20	; 0x03
    2008:	33 e0       	ldi	r19, 0x03	; 3
    200a:	3c 83       	std	Y+4, r19	; 0x04
    200c:	68 94       	set
    200e:	ff 24       	eor	r15, r15
    2010:	f1 f8       	bld	r15, 1
    2012:	f8 a2       	std	Y+32, r15	; 0x20
    2014:	f8 a6       	std	Y+40, r15	; 0x28
    2016:	f8 aa       	std	Y+48, r15	; 0x30
    2018:	f8 ae       	std	Y+56, r15	; 0x38
    201a:	89 e2       	ldi	r24, 0x29	; 41
    201c:	89 a3       	std	Y+33, r24	; 0x21
    201e:	99 e1       	ldi	r25, 0x19	; 25
    2020:	99 a7       	std	Y+41, r25	; 0x29
    2022:	91 e3       	ldi	r25, 0x31	; 49
    2024:	99 ab       	std	Y+49, r25	; 0x31
    2026:	21 e6       	ldi	r18, 0x61	; 97
    2028:	29 af       	std	Y+57, r18	; 0x39
    202a:	ee 24       	eor	r14, r14
    202c:	e3 94       	inc	r14
    202e:	ea a2       	std	Y+34, r14	; 0x22
    2030:	e8 82       	st	Y, r14
    2032:	f8 01       	movw	r30, r16
    2034:	d1 82       	std	Z+1, r13	; 0x01
    2036:	52 83       	std	Z+2, r21	; 0x02
    2038:	43 83       	std	Z+3, r20	; 0x03
    203a:	34 83       	std	Z+4, r19	; 0x04
    203c:	f0 a2       	std	Z+32, r15	; 0x20
    203e:	f0 a6       	std	Z+40, r15	; 0x28
    2040:	f0 aa       	std	Z+48, r15	; 0x30
    2042:	f0 ae       	std	Z+56, r15	; 0x38
    2044:	21 a3       	std	Z+33, r18	; 0x21
    2046:	21 e5       	ldi	r18, 0x51	; 81
    2048:	21 a7       	std	Z+41, r18	; 0x29
    204a:	91 ab       	std	Z+49, r25	; 0x31
    204c:	81 af       	std	Z+57, r24	; 0x39
    204e:	e0 82       	st	Z, r14
    2050:	e0 ea       	ldi	r30, 0xA0	; 160
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	81 60       	ori	r24, 0x01	; 1
    2058:	82 83       	std	Z+2, r24	; 0x02
    205a:	e2 ee       	ldi	r30, 0xE2	; 226
    205c:	f9 e2       	ldi	r31, 0x29	; 41
    205e:	8b ea       	ldi	r24, 0xAB	; 171
    2060:	9a ea       	ldi	r25, 0xAA	; 170
    2062:	a6 e2       	ldi	r26, 0x26	; 38
    2064:	b2 e4       	ldi	r27, 0x42	; 66
    2066:	80 87       	std	Z+8, r24	; 0x08
    2068:	91 87       	std	Z+9, r25	; 0x09
    206a:	a2 87       	std	Z+10, r26	; 0x0a
    206c:	b3 87       	std	Z+11, r27	; 0x0b
    206e:	47 e2       	ldi	r20, 0x27	; 39
    2070:	51 e1       	ldi	r21, 0x11	; 17
    2072:	64 eb       	ldi	r22, 0xB4	; 180
    2074:	72 e4       	ldi	r23, 0x42	; 66
    2076:	44 87       	std	Z+12, r20	; 0x0c
    2078:	55 87       	std	Z+13, r21	; 0x0d
    207a:	66 87       	std	Z+14, r22	; 0x0e
    207c:	77 87       	std	Z+15, r23	; 0x0f
    207e:	80 8b       	std	Z+16, r24	; 0x10
    2080:	91 8b       	std	Z+17, r25	; 0x11
    2082:	a2 8b       	std	Z+18, r26	; 0x12
    2084:	b3 8b       	std	Z+19, r27	; 0x13
    2086:	4f e1       	ldi	r20, 0x1F	; 31
    2088:	5e e8       	ldi	r21, 0x8E	; 142
    208a:	60 eb       	ldi	r22, 0xB0	; 176
    208c:	72 e4       	ldi	r23, 0x42	; 66
    208e:	44 8b       	std	Z+20, r20	; 0x14
    2090:	55 8b       	std	Z+21, r21	; 0x15
    2092:	66 8b       	std	Z+22, r22	; 0x16
    2094:	77 8b       	std	Z+23, r23	; 0x17
    2096:	80 a3       	std	Z+32, r24	; 0x20
    2098:	91 a3       	std	Z+33, r25	; 0x21
    209a:	a2 a3       	std	Z+34, r26	; 0x22
    209c:	b3 a3       	std	Z+35, r27	; 0x23
    209e:	4d e5       	ldi	r20, 0x5D	; 93
    20a0:	55 e8       	ldi	r21, 0x85	; 133
    20a2:	6f e6       	ldi	r22, 0x6F	; 111
    20a4:	72 e4       	ldi	r23, 0x42	; 66
    20a6:	44 a3       	std	Z+36, r20	; 0x24
    20a8:	55 a3       	std	Z+37, r21	; 0x25
    20aa:	66 a3       	std	Z+38, r22	; 0x26
    20ac:	77 a3       	std	Z+39, r23	; 0x27
    20ae:	80 a7       	std	Z+40, r24	; 0x28
    20b0:	91 a7       	std	Z+41, r25	; 0x29
    20b2:	a2 a7       	std	Z+42, r26	; 0x2a
    20b4:	b3 a7       	std	Z+43, r27	; 0x2b
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a8 e4       	ldi	r26, 0x48	; 72
    20bc:	b2 e4       	ldi	r27, 0x42	; 66
    20be:	84 a7       	std	Z+44, r24	; 0x2c
    20c0:	95 a7       	std	Z+45, r25	; 0x2d
    20c2:	a6 a7       	std	Z+46, r26	; 0x2e
    20c4:	b7 a7       	std	Z+47, r27	; 0x2f
    20c6:	44 e0       	ldi	r20, 0x04	; 4
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	8a ee       	ldi	r24, 0xEA	; 234
    20d0:	99 e2       	ldi	r25, 0x29	; 41
    20d2:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    20d6:	44 e0       	ldi	r20, 0x04	; 4
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	60 e1       	ldi	r22, 0x10	; 16
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	8e ee       	ldi	r24, 0xEE	; 238
    20e0:	99 e2       	ldi	r25, 0x29	; 41
    20e2:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    20e6:	44 e0       	ldi	r20, 0x04	; 4
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	60 e2       	ldi	r22, 0x20	; 32
    20ec:	70 e0       	ldi	r23, 0x00	; 0
    20ee:	82 ef       	ldi	r24, 0xF2	; 242
    20f0:	99 e2       	ldi	r25, 0x29	; 41
    20f2:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    20f6:	44 e0       	ldi	r20, 0x04	; 4
    20f8:	50 e0       	ldi	r21, 0x00	; 0
    20fa:	60 e3       	ldi	r22, 0x30	; 48
    20fc:	70 e0       	ldi	r23, 0x00	; 0
    20fe:	86 ef       	ldi	r24, 0xF6	; 246
    2100:	99 e2       	ldi	r25, 0x29	; 41
    2102:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2106:	42 e0       	ldi	r20, 0x02	; 2
    2108:	50 e0       	ldi	r21, 0x00	; 0
    210a:	60 e4       	ldi	r22, 0x40	; 64
    210c:	70 e0       	ldi	r23, 0x00	; 0
    210e:	82 ee       	ldi	r24, 0xE2	; 226
    2110:	99 e2       	ldi	r25, 0x29	; 41
    2112:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2116:	42 e0       	ldi	r20, 0x02	; 2
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	64 e4       	ldi	r22, 0x44	; 68
    211c:	70 e0       	ldi	r23, 0x00	; 0
    211e:	84 ee       	ldi	r24, 0xE4	; 228
    2120:	99 e2       	ldi	r25, 0x29	; 41
    2122:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2126:	42 e0       	ldi	r20, 0x02	; 2
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	68 e4       	ldi	r22, 0x48	; 72
    212c:	70 e0       	ldi	r23, 0x00	; 0
    212e:	86 ee       	ldi	r24, 0xE6	; 230
    2130:	99 e2       	ldi	r25, 0x29	; 41
    2132:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2136:	42 e0       	ldi	r20, 0x02	; 2
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	6c e4       	ldi	r22, 0x4C	; 76
    213c:	70 e0       	ldi	r23, 0x00	; 0
    213e:	88 ee       	ldi	r24, 0xE8	; 232
    2140:	99 e2       	ldi	r25, 0x29	; 41
    2142:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2146:	44 e0       	ldi	r20, 0x04	; 4
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	60 e5       	ldi	r22, 0x50	; 80
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	9a e2       	ldi	r25, 0x2A	; 42
    2152:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2156:	44 e0       	ldi	r20, 0x04	; 4
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	60 e6       	ldi	r22, 0x60	; 96
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	86 e0       	ldi	r24, 0x06	; 6
    2160:	9a e2       	ldi	r25, 0x2A	; 42
    2162:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2166:	44 e0       	ldi	r20, 0x04	; 4
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	60 e7       	ldi	r22, 0x70	; 112
    216c:	70 e0       	ldi	r23, 0x00	; 0
    216e:	8a e0       	ldi	r24, 0x0A	; 10
    2170:	9a e2       	ldi	r25, 0x2A	; 42
    2172:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2176:	44 e0       	ldi	r20, 0x04	; 4
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	60 e8       	ldi	r22, 0x80	; 128
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	8e e0       	ldi	r24, 0x0E	; 14
    2180:	9a e2       	ldi	r25, 0x2A	; 42
    2182:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2186:	42 e0       	ldi	r20, 0x02	; 2
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	60 e9       	ldi	r22, 0x90	; 144
    218c:	70 e0       	ldi	r23, 0x00	; 0
    218e:	8a ef       	ldi	r24, 0xFA	; 250
    2190:	99 e2       	ldi	r25, 0x29	; 41
    2192:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2196:	42 e0       	ldi	r20, 0x02	; 2
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	64 e9       	ldi	r22, 0x94	; 148
    219c:	70 e0       	ldi	r23, 0x00	; 0
    219e:	8c ef       	ldi	r24, 0xFC	; 252
    21a0:	99 e2       	ldi	r25, 0x29	; 41
    21a2:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    21a6:	42 e0       	ldi	r20, 0x02	; 2
    21a8:	50 e0       	ldi	r21, 0x00	; 0
    21aa:	68 e9       	ldi	r22, 0x98	; 152
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	8e ef       	ldi	r24, 0xFE	; 254
    21b0:	99 e2       	ldi	r25, 0x29	; 41
    21b2:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    21b6:	42 e0       	ldi	r20, 0x02	; 2
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	6c e9       	ldi	r22, 0x9C	; 156
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	9a e2       	ldi	r25, 0x2A	; 42
    21c2:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    21c6:	e0 e2       	ldi	r30, 0x20	; 32
    21c8:	f3 e0       	ldi	r31, 0x03	; 3
    21ca:	85 e0       	ldi	r24, 0x05	; 5
    21cc:	80 83       	st	Z, r24
    21ce:	11 82       	std	Z+1, r1	; 0x01
    21d0:	d2 82       	std	Z+2, r13	; 0x02
    21d2:	8e ea       	ldi	r24, 0xAE	; 174
    21d4:	95 e0       	ldi	r25, 0x05	; 5
    21d6:	80 8f       	std	Z+24, r24	; 0x18
    21d8:	91 8f       	std	Z+25, r25	; 0x19
    21da:	e0 e0       	ldi	r30, 0x00	; 0
    21dc:	f8 e0       	ldi	r31, 0x08	; 8
    21de:	11 82       	std	Z+1, r1	; 0x01
    21e0:	13 82       	std	Z+3, r1	; 0x03
    21e2:	14 82       	std	Z+4, r1	; 0x04
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	99 e1       	ldi	r25, 0x19	; 25
    21e8:	86 a3       	std	Z+38, r24	; 0x26
    21ea:	97 a3       	std	Z+39, r25	; 0x27
    21ec:	16 82       	std	Z+6, r1	; 0x06
    21ee:	17 82       	std	Z+7, r1	; 0x07
    21f0:	10 a2       	std	Z+32, r1	; 0x20
    21f2:	11 a2       	std	Z+33, r1	; 0x21
    21f4:	e0 82       	st	Z, r14
    21f6:	a0 e8       	ldi	r26, 0x80	; 128
    21f8:	b1 e0       	ldi	r27, 0x01	; 1
    21fa:	80 ec       	ldi	r24, 0xC0	; 192
    21fc:	8c 93       	st	X, r24
    21fe:	e0 e4       	ldi	r30, 0x40	; 64
    2200:	f8 e0       	ldi	r31, 0x08	; 8
    2202:	8c e0       	ldi	r24, 0x0C	; 12
    2204:	80 83       	st	Z, r24
    2206:	11 82       	std	Z+1, r1	; 0x01
    2208:	13 82       	std	Z+3, r1	; 0x03
    220a:	14 82       	std	Z+4, r1	; 0x04
    220c:	16 82       	std	Z+6, r1	; 0x06
    220e:	17 82       	std	Z+7, r1	; 0x07
    2210:	e0 86       	std	Z+8, r14	; 0x08
    2212:	8f ef       	ldi	r24, 0xFF	; 255
    2214:	9f ef       	ldi	r25, 0xFF	; 255
    2216:	86 a3       	std	Z+38, r24	; 0x26
    2218:	97 a3       	std	Z+39, r25	; 0x27
    221a:	e0 e4       	ldi	r30, 0x40	; 64
    221c:	f6 e0       	ldi	r31, 0x06	; 6
    221e:	80 e4       	ldi	r24, 0x40	; 64
    2220:	82 83       	std	Z+2, r24	; 0x02
    2222:	e6 8a       	std	Z+22, r14	; 0x16
    2224:	86 e6       	ldi	r24, 0x66	; 102
    2226:	14 96       	adiw	r26, 0x04	; 4
    2228:	8c 93       	st	X, r24
    222a:	14 97       	sbiw	r26, 0x04	; 4
    222c:	1c 96       	adiw	r26, 0x0c	; 12
    222e:	fc 92       	st	X, r15
    2230:	e0 e6       	ldi	r30, 0x60	; 96
    2232:	f6 e0       	ldi	r31, 0x06	; 6
    2234:	80 85       	ldd	r24, Z+8	; 0x08
    2236:	90 85       	ldd	r25, Z+8	; 0x08
    2238:	80 73       	andi	r24, 0x30	; 48
    223a:	21 e0       	ldi	r18, 0x01	; 1
    223c:	80 31       	cpi	r24, 0x10	; 16
    223e:	09 f0       	breq	.+2      	; 0x2242 <InitCoreAnalog+0x2d8>
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	21 11       	cpse	r18, r1
    2244:	08 c0       	rjmp	.+16     	; 0x2256 <InitCoreAnalog+0x2ec>
    2246:	90 73       	andi	r25, 0x30	; 48
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 32       	cpi	r25, 0x20	; 32
    224c:	09 f0       	breq	.+2      	; 0x2250 <InitCoreAnalog+0x2e6>
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	88 23       	and	r24, r24
    2252:	09 f4       	brne	.+2      	; 0x2256 <InitCoreAnalog+0x2ec>
    2254:	49 c0       	rjmp	.+146    	; 0x22e8 <InitCoreAnalog+0x37e>
    2256:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    225a:	80 73       	andi	r24, 0x30	; 48
    225c:	80 31       	cpi	r24, 0x10	; 16
    225e:	19 f0       	breq	.+6      	; 0x2266 <InitCoreAnalog+0x2fc>
    2260:	8b e0       	ldi	r24, 0x0B	; 11
    2262:	92 e2       	ldi	r25, 0x22	; 34
    2264:	02 c0       	rjmp	.+4      	; 0x226a <InitCoreAnalog+0x300>
    2266:	86 e0       	ldi	r24, 0x06	; 6
    2268:	92 e2       	ldi	r25, 0x22	; 34
    226a:	21 e0       	ldi	r18, 0x01	; 1
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4b ed       	ldi	r20, 0xDB	; 219
    2270:	59 e0       	ldi	r21, 0x09	; 9
    2272:	63 e5       	ldi	r22, 0x53	; 83
    2274:	7f e0       	ldi	r23, 0x0F	; 15
    2276:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    227a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    227e:	80 73       	andi	r24, 0x30	; 48
    2280:	80 31       	cpi	r24, 0x10	; 16
    2282:	19 f0       	breq	.+6      	; 0x228a <InitCoreAnalog+0x320>
    2284:	85 e1       	ldi	r24, 0x15	; 21
    2286:	92 e2       	ldi	r25, 0x22	; 34
    2288:	02 c0       	rjmp	.+4      	; 0x228e <InitCoreAnalog+0x324>
    228a:	80 e1       	ldi	r24, 0x10	; 16
    228c:	92 e2       	ldi	r25, 0x22	; 34
    228e:	21 e0       	ldi	r18, 0x01	; 1
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	6b e1       	ldi	r22, 0x1B	; 27
    2298:	7f e0       	ldi	r23, 0x0F	; 15
    229a:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    229e:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    22a2:	80 73       	andi	r24, 0x30	; 48
    22a4:	80 31       	cpi	r24, 0x10	; 16
    22a6:	19 f0       	breq	.+6      	; 0x22ae <InitCoreAnalog+0x344>
    22a8:	8f e1       	ldi	r24, 0x1F	; 31
    22aa:	92 e2       	ldi	r25, 0x22	; 34
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <InitCoreAnalog+0x348>
    22ae:	8a e1       	ldi	r24, 0x1A	; 26
    22b0:	92 e2       	ldi	r25, 0x22	; 34
    22b2:	21 e0       	ldi	r18, 0x01	; 1
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e0       	ldi	r20, 0x00	; 0
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	61 ec       	ldi	r22, 0xC1	; 193
    22bc:	7e e0       	ldi	r23, 0x0E	; 14
    22be:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    22c2:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    22c6:	80 73       	andi	r24, 0x30	; 48
    22c8:	80 31       	cpi	r24, 0x10	; 16
    22ca:	19 f0       	breq	.+6      	; 0x22d2 <InitCoreAnalog+0x368>
    22cc:	89 e2       	ldi	r24, 0x29	; 41
    22ce:	92 e2       	ldi	r25, 0x22	; 34
    22d0:	02 c0       	rjmp	.+4      	; 0x22d6 <InitCoreAnalog+0x36c>
    22d2:	84 e2       	ldi	r24, 0x24	; 36
    22d4:	92 e2       	ldi	r25, 0x22	; 34
    22d6:	21 e0       	ldi	r18, 0x01	; 1
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	50 e0       	ldi	r21, 0x00	; 0
    22de:	63 e8       	ldi	r22, 0x83	; 131
    22e0:	7e e0       	ldi	r23, 0x0E	; 14
    22e2:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    22e6:	af c0       	rjmp	.+350    	; 0x2446 <InitCoreAnalog+0x4dc>
    22e8:	21 e0       	ldi	r18, 0x01	; 1
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	69 e2       	ldi	r22, 0x29	; 41
    22f2:	7e e0       	ldi	r23, 0x0E	; 14
    22f4:	8e e2       	ldi	r24, 0x2E	; 46
    22f6:	92 e2       	ldi	r25, 0x22	; 34
    22f8:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    22fc:	21 e0       	ldi	r18, 0x01	; 1
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	6f ec       	ldi	r22, 0xCF	; 207
    2306:	7d e0       	ldi	r23, 0x0D	; 13
    2308:	83 e3       	ldi	r24, 0x33	; 51
    230a:	92 e2       	ldi	r25, 0x22	; 34
    230c:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2310:	21 e0       	ldi	r18, 0x01	; 1
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	67 e6       	ldi	r22, 0x67	; 103
    231a:	7d e0       	ldi	r23, 0x0D	; 13
    231c:	88 e3       	ldi	r24, 0x38	; 56
    231e:	92 e2       	ldi	r25, 0x22	; 34
    2320:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2324:	25 e0       	ldi	r18, 0x05	; 5
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	6d ef       	ldi	r22, 0xFD	; 253
    232e:	7c e0       	ldi	r23, 0x0C	; 12
    2330:	8d e3       	ldi	r24, 0x3D	; 61
    2332:	92 e2       	ldi	r25, 0x22	; 34
    2334:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2338:	21 e0       	ldi	r18, 0x01	; 1
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	63 ea       	ldi	r22, 0xA3	; 163
    2342:	7c e0       	ldi	r23, 0x0C	; 12
    2344:	82 e4       	ldi	r24, 0x42	; 66
    2346:	92 e2       	ldi	r25, 0x22	; 34
    2348:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    234c:	21 e0       	ldi	r18, 0x01	; 1
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	69 e4       	ldi	r22, 0x49	; 73
    2356:	7c e0       	ldi	r23, 0x0C	; 12
    2358:	87 e4       	ldi	r24, 0x47	; 71
    235a:	92 e2       	ldi	r25, 0x22	; 34
    235c:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2360:	21 e0       	ldi	r18, 0x01	; 1
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	61 ee       	ldi	r22, 0xE1	; 225
    236a:	7b e0       	ldi	r23, 0x0B	; 11
    236c:	8c e4       	ldi	r24, 0x4C	; 76
    236e:	92 e2       	ldi	r25, 0x22	; 34
    2370:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2374:	25 e0       	ldi	r18, 0x05	; 5
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	67 e7       	ldi	r22, 0x77	; 119
    237e:	7b e0       	ldi	r23, 0x0B	; 11
    2380:	81 e5       	ldi	r24, 0x51	; 81
    2382:	92 e2       	ldi	r25, 0x22	; 34
    2384:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2388:	21 e0       	ldi	r18, 0x01	; 1
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	50 e0       	ldi	r21, 0x00	; 0
    2390:	6f e3       	ldi	r22, 0x3F	; 63
    2392:	7b e0       	ldi	r23, 0x0B	; 11
    2394:	86 e5       	ldi	r24, 0x56	; 86
    2396:	92 e2       	ldi	r25, 0x22	; 34
    2398:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    239c:	2a e0       	ldi	r18, 0x0A	; 10
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	50 e0       	ldi	r21, 0x00	; 0
    23a4:	6f ef       	ldi	r22, 0xFF	; 255
    23a6:	7a e0       	ldi	r23, 0x0A	; 10
    23a8:	8b e5       	ldi	r24, 0x5B	; 91
    23aa:	92 e2       	ldi	r25, 0x22	; 34
    23ac:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    23b0:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    23b4:	80 73       	andi	r24, 0x30	; 48
    23b6:	09 f0       	breq	.+2      	; 0x23ba <InitCoreAnalog+0x450>
    23b8:	46 c0       	rjmp	.+140    	; 0x2446 <InitCoreAnalog+0x4dc>
    23ba:	21 e0       	ldi	r18, 0x01	; 1
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4b ed       	ldi	r20, 0xDB	; 219
    23c0:	59 e0       	ldi	r21, 0x09	; 9
    23c2:	6d e9       	ldi	r22, 0x9D	; 157
    23c4:	7a e0       	ldi	r23, 0x0A	; 10
    23c6:	86 e0       	ldi	r24, 0x06	; 6
    23c8:	92 e2       	ldi	r25, 0x22	; 34
    23ca:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    23ce:	21 e0       	ldi	r18, 0x01	; 1
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	6b e1       	ldi	r22, 0x1B	; 27
    23d8:	7f e0       	ldi	r23, 0x0F	; 15
    23da:	80 e1       	ldi	r24, 0x10	; 16
    23dc:	92 e2       	ldi	r25, 0x22	; 34
    23de:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    23e2:	21 e0       	ldi	r18, 0x01	; 1
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	61 ec       	ldi	r22, 0xC1	; 193
    23ec:	7e e0       	ldi	r23, 0x0E	; 14
    23ee:	8a e1       	ldi	r24, 0x1A	; 26
    23f0:	92 e2       	ldi	r25, 0x22	; 34
    23f2:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    23f6:	21 e0       	ldi	r18, 0x01	; 1
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	63 e8       	ldi	r22, 0x83	; 131
    2400:	7e e0       	ldi	r23, 0x0E	; 14
    2402:	84 e2       	ldi	r24, 0x24	; 36
    2404:	92 e2       	ldi	r25, 0x22	; 34
    2406:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    240a:	2a e0       	ldi	r18, 0x0A	; 10
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e0       	ldi	r20, 0x00	; 0
    2410:	50 e0       	ldi	r21, 0x00	; 0
    2412:	65 e6       	ldi	r22, 0x65	; 101
    2414:	7a e0       	ldi	r23, 0x0A	; 10
    2416:	80 e6       	ldi	r24, 0x60	; 96
    2418:	92 e2       	ldi	r25, 0x22	; 34
    241a:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    241e:	25 e0       	ldi	r18, 0x05	; 5
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e0       	ldi	r20, 0x00	; 0
    2424:	50 e0       	ldi	r21, 0x00	; 0
    2426:	63 e2       	ldi	r22, 0x23	; 35
    2428:	7a e0       	ldi	r23, 0x0A	; 10
    242a:	85 e6       	ldi	r24, 0x65	; 101
    242c:	92 e2       	ldi	r25, 0x22	; 34
    242e:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2432:	25 e0       	ldi	r18, 0x05	; 5
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	61 ee       	ldi	r22, 0xE1	; 225
    243c:	79 e0       	ldi	r23, 0x09	; 9
    243e:	8a e6       	ldi	r24, 0x6A	; 106
    2440:	92 e2       	ldi	r25, 0x22	; 34
    2442:	0e 94 2a 02 	call	0x454	; 0x454 <AddSlaveOwnSensor>
    2446:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    244a:	80 73       	andi	r24, 0x30	; 48
    244c:	80 31       	cpi	r24, 0x10	; 16
    244e:	29 f0       	breq	.+10     	; 0x245a <InitCoreAnalog+0x4f0>
    2450:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    2454:	80 73       	andi	r24, 0x30	; 48
    2456:	80 32       	cpi	r24, 0x20	; 32
    2458:	69 f4       	brne	.+26     	; 0x2474 <InitCoreAnalog+0x50a>
    245a:	86 e6       	ldi	r24, 0x66	; 102
    245c:	9e ed       	ldi	r25, 0xDE	; 222
    245e:	a0 e2       	ldi	r26, 0x20	; 32
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	80 93 dd 28 	sts	0x28DD, r24	; 0x8028dd <sCC2MinSpeed>
    2466:	90 93 de 28 	sts	0x28DE, r25	; 0x8028de <sCC2MinSpeed+0x1>
    246a:	a0 93 df 28 	sts	0x28DF, r26	; 0x8028df <sCC2MinSpeed+0x2>
    246e:	b0 93 e0 28 	sts	0x28E0, r27	; 0x8028e0 <sCC2MinSpeed+0x3>
    2472:	0c c0       	rjmp	.+24     	; 0x248c <InitCoreAnalog+0x522>
    2474:	86 e6       	ldi	r24, 0x66	; 102
    2476:	96 e6       	ldi	r25, 0x66	; 102
    2478:	aa e4       	ldi	r26, 0x4A	; 74
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	80 93 dd 28 	sts	0x28DD, r24	; 0x8028dd <sCC2MinSpeed>
    2480:	90 93 de 28 	sts	0x28DE, r25	; 0x8028de <sCC2MinSpeed+0x1>
    2484:	a0 93 df 28 	sts	0x28DF, r26	; 0x8028df <sCC2MinSpeed+0x2>
    2488:	b0 93 e0 28 	sts	0x28E0, r27	; 0x8028e0 <sCC2MinSpeed+0x3>
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	ff 90       	pop	r15
    2496:	ef 90       	pop	r14
    2498:	df 90       	pop	r13
    249a:	08 95       	ret

0000249c <CalibrateChannel>:
    249c:	2f 92       	push	r2
    249e:	3f 92       	push	r3
    24a0:	4f 92       	push	r4
    24a2:	5f 92       	push	r5
    24a4:	6f 92       	push	r6
    24a6:	7f 92       	push	r7
    24a8:	8f 92       	push	r8
    24aa:	9f 92       	push	r9
    24ac:	af 92       	push	r10
    24ae:	bf 92       	push	r11
    24b0:	cf 92       	push	r12
    24b2:	df 92       	push	r13
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	c2 5a       	subi	r28, 0xA2	; 162
    24c6:	d1 09       	sbc	r29, r1
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	28 2e       	mov	r2, r24
    24ce:	89 2e       	mov	r8, r25
    24d0:	80 e6       	ldi	r24, 0x60	; 96
    24d2:	e4 e6       	ldi	r30, 0x64	; 100
    24d4:	f0 e2       	ldi	r31, 0x20	; 32
    24d6:	de 01       	movw	r26, r28
    24d8:	11 96       	adiw	r26, 0x01	; 1
    24da:	01 90       	ld	r0, Z+
    24dc:	0d 92       	st	X+, r0
    24de:	8a 95       	dec	r24
    24e0:	e1 f7       	brne	.-8      	; 0x24da <CalibrateChannel+0x3e>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 64 29 	sts	0x2964, r24	; 0x802964 <sTakeSnapshot>
    24e8:	80 91 64 29 	lds	r24, 0x2964	; 0x802964 <sTakeSnapshot>
    24ec:	81 11       	cpse	r24, r1
    24ee:	fc cf       	rjmp	.-8      	; 0x24e8 <CalibrateChannel+0x4c>
    24f0:	80 91 c6 29 	lds	r24, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5d>
    24f4:	90 91 c7 29 	lds	r25, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5e>
    24f8:	a0 91 c8 29 	lds	r26, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5f>
    24fc:	b0 91 c9 29 	lds	r27, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x60>
    2500:	85 36       	cpi	r24, 0x65	; 101
    2502:	91 05       	cpc	r25, r1
    2504:	a1 05       	cpc	r26, r1
    2506:	b1 05       	cpc	r27, r1
    2508:	58 f0       	brcs	.+22     	; 0x2520 <CalibrateChannel+0x84>
    250a:	22 2d       	mov	r18, r2
    250c:	38 2d       	mov	r19, r8
    250e:	42 e4       	ldi	r20, 0x42	; 66
    2510:	50 e0       	ldi	r21, 0x00	; 0
    2512:	61 e0       	ldi	r22, 0x01	; 1
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	8f e6       	ldi	r24, 0x6F	; 111
    2518:	92 e2       	ldi	r25, 0x22	; 34
    251a:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    251e:	ae c5       	rjmp	.+2908   	; 0x307c <CalibrateChannel+0xbe0>
    2520:	22 2d       	mov	r18, r2
    2522:	38 2d       	mov	r19, r8
    2524:	48 e1       	ldi	r20, 0x18	; 24
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	70 e0       	ldi	r23, 0x00	; 0
    252c:	82 eb       	ldi	r24, 0xB2	; 178
    252e:	92 e2       	ldi	r25, 0x22	; 34
    2530:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    2534:	00 e6       	ldi	r16, 0x60	; 96
    2536:	16 e0       	ldi	r17, 0x06	; 6
    2538:	0f 2e       	mov	r0, r31
    253a:	f3 ef       	ldi	r31, 0xF3	; 243
    253c:	ef 2e       	mov	r14, r31
    253e:	f2 e2       	ldi	r31, 0x22	; 34
    2540:	ff 2e       	mov	r15, r31
    2542:	f0 2d       	mov	r31, r0
    2544:	22 2d       	mov	r18, r2
    2546:	38 2d       	mov	r19, r8
    2548:	47 e2       	ldi	r20, 0x27	; 39
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	61 e0       	ldi	r22, 0x01	; 1
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	8b ec       	ldi	r24, 0xCB	; 203
    2552:	92 e2       	ldi	r25, 0x22	; 34
    2554:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    2558:	d1 2c       	mov	r13, r1
    255a:	1f c0       	rjmp	.+62     	; 0x259a <CalibrateChannel+0xfe>
    255c:	fc 01       	movw	r30, r24
    255e:	ee 0f       	add	r30, r30
    2560:	ff 1f       	adc	r31, r31
    2562:	e8 0f       	add	r30, r24
    2564:	f9 1f       	adc	r31, r25
    2566:	ee 0f       	add	r30, r30
    2568:	ff 1f       	adc	r31, r31
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	21 e0       	ldi	r18, 0x01	; 1
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	2c 0f       	add	r18, r28
    2574:	3d 1f       	adc	r19, r29
    2576:	e2 0f       	add	r30, r18
    2578:	f3 1f       	adc	r31, r19
    257a:	21 81       	ldd	r18, Z+1	; 0x01
    257c:	2f 93       	push	r18
    257e:	20 81       	ld	r18, Z
    2580:	2f 93       	push	r18
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	9f 93       	push	r25
    2586:	8f 93       	push	r24
    2588:	ff 92       	push	r15
    258a:	ef 92       	push	r14
    258c:	8f 92       	push	r8
    258e:	2f 92       	push	r2
    2590:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2594:	d3 94       	inc	r13
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	8d 2d       	mov	r24, r13
    259c:	0d 2c       	mov	r0, r13
    259e:	00 0c       	add	r0, r0
    25a0:	99 0b       	sbc	r25, r25
    25a2:	d8 01       	movw	r26, r16
    25a4:	18 96       	adiw	r26, 0x08	; 8
    25a6:	2c 91       	ld	r18, X
    25a8:	18 97       	sbiw	r26, 0x08	; 8
    25aa:	18 96       	adiw	r26, 0x08	; 8
    25ac:	3c 91       	ld	r19, X
    25ae:	20 73       	andi	r18, 0x30	; 48
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	20 31       	cpi	r18, 0x10	; 16
    25b4:	09 f0       	breq	.+2      	; 0x25b8 <CalibrateChannel+0x11c>
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	41 11       	cpse	r20, r1
    25ba:	0a c0       	rjmp	.+20     	; 0x25d0 <CalibrateChannel+0x134>
    25bc:	30 73       	andi	r19, 0x30	; 48
    25be:	21 e0       	ldi	r18, 0x01	; 1
    25c0:	30 32       	cpi	r19, 0x20	; 32
    25c2:	09 f0       	breq	.+2      	; 0x25c6 <CalibrateChannel+0x12a>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	21 11       	cpse	r18, r1
    25c8:	03 c0       	rjmp	.+6      	; 0x25d0 <CalibrateChannel+0x134>
    25ca:	28 e0       	ldi	r18, 0x08	; 8
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <CalibrateChannel+0x138>
    25d0:	24 e0       	ldi	r18, 0x04	; 4
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	82 17       	cp	r24, r18
    25d6:	93 07       	cpc	r25, r19
    25d8:	0c f2       	brlt	.-126    	; 0x255c <CalibrateChannel+0xc0>
    25da:	22 2d       	mov	r18, r2
    25dc:	38 2d       	mov	r19, r8
    25de:	43 e0       	ldi	r20, 0x03	; 3
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	61 e0       	ldi	r22, 0x01	; 1
    25e4:	70 e0       	ldi	r23, 0x00	; 0
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	92 e2       	ldi	r25, 0x22	; 34
    25ea:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <CalibrateChannel+0x158>
    25f0:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
    25f4:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <CanRead_Ctrl>
    25f8:	81 11       	cpse	r24, r1
    25fa:	fa cf       	rjmp	.-12     	; 0x25f0 <CalibrateChannel+0x154>
    25fc:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
    2600:	0f 2e       	mov	r0, r31
    2602:	ff ec       	ldi	r31, 0xCF	; 207
    2604:	cf 2e       	mov	r12, r31
    2606:	f0 2d       	mov	r31, r0
    2608:	c8 0e       	add	r12, r24
    260a:	22 2d       	mov	r18, r2
    260c:	38 2d       	mov	r19, r8
    260e:	42 e0       	ldi	r20, 0x02	; 2
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	85 e2       	ldi	r24, 0x25	; 37
    2618:	94 e2       	ldi	r25, 0x24	; 36
    261a:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    261e:	cd 14       	cp	r12, r13
    2620:	1c f4       	brge	.+6      	; 0x2628 <CalibrateChannel+0x18c>
    2622:	cc 20       	and	r12, r12
    2624:	0c f0       	brlt	.+2      	; 0x2628 <CalibrateChannel+0x18c>
    2626:	48 c3       	rjmp	.+1680   	; 0x2cb8 <CalibrateChannel+0x81c>
    2628:	22 2d       	mov	r18, r2
    262a:	38 2d       	mov	r19, r8
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	61 e0       	ldi	r22, 0x01	; 1
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	83 e0       	ldi	r24, 0x03	; 3
    2636:	93 e2       	ldi	r25, 0x23	; 35
    2638:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    263c:	83 cf       	rjmp	.-250    	; 0x2544 <CalibrateChannel+0xa8>
    263e:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
    2642:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <CanRead_Ctrl>
    2646:	81 11       	cpse	r24, r1
    2648:	fa cf       	rjmp	.-12     	; 0x263e <CalibrateChannel+0x1a2>
    264a:	c3 2c       	mov	r12, r3
    264c:	03 2c       	mov	r0, r3
    264e:	00 0c       	add	r0, r0
    2650:	dd 08       	sbc	r13, r13
    2652:	9f 92       	push	r9
    2654:	af 92       	push	r10
    2656:	c6 01       	movw	r24, r12
    2658:	01 96       	adiw	r24, 0x01	; 1
    265a:	9f 93       	push	r25
    265c:	8f 93       	push	r24
    265e:	e4 e2       	ldi	r30, 0x24	; 36
    2660:	f3 e2       	ldi	r31, 0x23	; 35
    2662:	ff 93       	push	r31
    2664:	ef 93       	push	r30
    2666:	8f 92       	push	r8
    2668:	2f 92       	push	r2
    266a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	41 2c       	mov	r4, r1
    2674:	51 2c       	mov	r5, r1
    2676:	32 01       	movw	r6, r4
    2678:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
    267c:	18 2f       	mov	r17, r24
    267e:	08 2e       	mov	r0, r24
    2680:	00 0c       	add	r0, r0
    2682:	99 0b       	sbc	r25, r25
    2684:	c0 97       	sbiw	r24, 0x30	; 48
    2686:	0a 97       	sbiw	r24, 0x0a	; 10
    2688:	08 f0       	brcs	.+2      	; 0x268c <CalibrateChannel+0x1f0>
    268a:	8a c3       	rjmp	.+1812   	; 0x2da0 <CalibrateChannel+0x904>
    268c:	62 2d       	mov	r22, r2
    268e:	78 2d       	mov	r23, r8
    2690:	81 2f       	mov	r24, r17
    2692:	01 2e       	mov	r0, r17
    2694:	00 0c       	add	r0, r0
    2696:	99 0b       	sbc	r25, r25
    2698:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    269c:	44 0c       	add	r4, r4
    269e:	55 1c       	adc	r5, r5
    26a0:	66 1c       	adc	r6, r6
    26a2:	77 1c       	adc	r7, r7
    26a4:	d3 01       	movw	r26, r6
    26a6:	c2 01       	movw	r24, r4
    26a8:	88 0f       	add	r24, r24
    26aa:	99 1f       	adc	r25, r25
    26ac:	aa 1f       	adc	r26, r26
    26ae:	bb 1f       	adc	r27, r27
    26b0:	88 0f       	add	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	aa 1f       	adc	r26, r26
    26b6:	bb 1f       	adc	r27, r27
    26b8:	48 0e       	add	r4, r24
    26ba:	59 1e       	adc	r5, r25
    26bc:	6a 1e       	adc	r6, r26
    26be:	7b 1e       	adc	r7, r27
    26c0:	81 2f       	mov	r24, r17
    26c2:	11 0f       	add	r17, r17
    26c4:	99 0b       	sbc	r25, r25
    26c6:	aa 0b       	sbc	r26, r26
    26c8:	bb 0b       	sbc	r27, r27
    26ca:	48 0e       	add	r4, r24
    26cc:	59 1e       	adc	r5, r25
    26ce:	6a 1e       	adc	r6, r26
    26d0:	7b 1e       	adc	r7, r27
    26d2:	90 e3       	ldi	r25, 0x30	; 48
    26d4:	49 1a       	sub	r4, r25
    26d6:	51 08       	sbc	r5, r1
    26d8:	61 08       	sbc	r6, r1
    26da:	71 08       	sbc	r7, r1
    26dc:	cd cf       	rjmp	.-102    	; 0x2678 <CalibrateChannel+0x1dc>
    26de:	80 91 64 29 	lds	r24, 0x2964	; 0x802964 <sTakeSnapshot>
    26e2:	81 11       	cpse	r24, r1
    26e4:	fc cf       	rjmp	.-8      	; 0x26de <CalibrateChannel+0x242>
    26e6:	cd 56       	subi	r28, 0x6D	; 109
    26e8:	df 4f       	sbci	r29, 0xFF	; 255
    26ea:	a8 81       	ld	r26, Y
    26ec:	b9 81       	ldd	r27, Y+1	; 0x01
    26ee:	c3 59       	subi	r28, 0x93	; 147
    26f0:	d0 40       	sbci	r29, 0x00	; 0
    26f2:	ed 91       	ld	r30, X+
    26f4:	fc 91       	ld	r31, X
    26f6:	60 81       	ld	r22, Z
    26f8:	71 81       	ldd	r23, Z+1	; 0x01
    26fa:	82 81       	ldd	r24, Z+2	; 0x02
    26fc:	93 81       	ldd	r25, Z+3	; 0x03
    26fe:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e8       	ldi	r20, 0x80	; 128
    2708:	57 e3       	ldi	r21, 0x37	; 55
    270a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    270e:	2b 01       	movw	r4, r22
    2710:	3c 01       	movw	r6, r24
    2712:	cc 0c       	add	r12, r12
    2714:	dd 1c       	adc	r13, r13
    2716:	cc 0c       	add	r12, r12
    2718:	dd 1c       	adc	r13, r13
    271a:	e1 e6       	ldi	r30, 0x61	; 97
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	ec 0f       	add	r30, r28
    2720:	fd 1f       	adc	r31, r29
    2722:	ec 0d       	add	r30, r12
    2724:	fd 1d       	adc	r31, r13
    2726:	60 83       	st	Z, r22
    2728:	71 83       	std	Z+1, r23	; 0x01
    272a:	82 83       	std	Z+2, r24	; 0x02
    272c:	93 83       	std	Z+3, r25	; 0x03
    272e:	c9 56       	subi	r28, 0x69	; 105
    2730:	df 4f       	sbci	r29, 0xFF	; 255
    2732:	e8 81       	ld	r30, Y
    2734:	f9 81       	ldd	r31, Y+1	; 0x01
    2736:	c7 59       	subi	r28, 0x97	; 151
    2738:	d0 40       	sbci	r29, 0x00	; 0
    273a:	c0 80       	ld	r12, Z
    273c:	d1 80       	ldd	r13, Z+1	; 0x01
    273e:	d6 01       	movw	r26, r12
    2740:	8d 91       	ld	r24, X+
    2742:	9d 91       	ld	r25, X+
    2744:	0d 90       	ld	r0, X+
    2746:	bc 91       	ld	r27, X
    2748:	a0 2d       	mov	r26, r0
    274a:	c1 57       	subi	r28, 0x71	; 113
    274c:	df 4f       	sbci	r29, 0xFF	; 255
    274e:	88 83       	st	Y, r24
    2750:	99 83       	std	Y+1, r25	; 0x01
    2752:	aa 83       	std	Y+2, r26	; 0x02
    2754:	bb 83       	std	Y+3, r27	; 0x03
    2756:	cf 58       	subi	r28, 0x8F	; 143
    2758:	d0 40       	sbci	r29, 0x00	; 0
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4a e7       	ldi	r20, 0x7A	; 122
    2760:	54 e4       	ldi	r21, 0x44	; 68
    2762:	c3 01       	movw	r24, r6
    2764:	b2 01       	movw	r22, r4
    2766:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    276a:	9f 93       	push	r25
    276c:	8f 93       	push	r24
    276e:	7f 93       	push	r23
    2770:	6f 93       	push	r22
    2772:	c1 57       	subi	r28, 0x71	; 113
    2774:	df 4f       	sbci	r29, 0xFF	; 255
    2776:	28 81       	ld	r18, Y
    2778:	39 81       	ldd	r19, Y+1	; 0x01
    277a:	4a 81       	ldd	r20, Y+2	; 0x02
    277c:	5b 81       	ldd	r21, Y+3	; 0x03
    277e:	cf 58       	subi	r28, 0x8F	; 143
    2780:	d0 40       	sbci	r29, 0x00	; 0
    2782:	c3 01       	movw	r24, r6
    2784:	b2 01       	movw	r22, r4
    2786:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    278a:	9f 93       	push	r25
    278c:	8f 93       	push	r24
    278e:	7f 93       	push	r23
    2790:	6f 93       	push	r22
    2792:	1f 93       	push	r17
    2794:	0f 93       	push	r16
    2796:	ff 92       	push	r15
    2798:	ef 92       	push	r14
    279a:	e9 e5       	ldi	r30, 0x59	; 89
    279c:	f3 e2       	ldi	r31, 0x23	; 35
    279e:	ff 93       	push	r31
    27a0:	ef 93       	push	r30
    27a2:	8f 92       	push	r8
    27a4:	2f 92       	push	r2
    27a6:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
    27b2:	98 2f       	mov	r25, r24
    27b4:	89 37       	cpi	r24, 0x79	; 121
    27b6:	09 f4       	brne	.+2      	; 0x27ba <CalibrateChannel+0x31e>
    27b8:	54 c3       	rjmp	.+1704   	; 0x2e62 <CalibrateChannel+0x9c6>
    27ba:	89 35       	cpi	r24, 0x59	; 89
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <CalibrateChannel+0x324>
    27be:	14 c3       	rjmp	.+1576   	; 0x2de8 <CalibrateChannel+0x94c>
    27c0:	8f 7d       	andi	r24, 0xDF	; 223
    27c2:	8e 34       	cpi	r24, 0x4E	; 78
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <CalibrateChannel+0x32c>
    27c6:	22 c3       	rjmp	.+1604   	; 0x2e0c <CalibrateChannel+0x970>
    27c8:	9b 31       	cpi	r25, 0x1B	; 27
    27ca:	89 f7       	brne	.-30     	; 0x27ae <CalibrateChannel+0x312>
    27cc:	38 c3       	rjmp	.+1648   	; 0x2e3e <CalibrateChannel+0x9a2>
    27ce:	33 94       	inc	r3
    27d0:	94 e0       	ldi	r25, 0x04	; 4
    27d2:	93 15       	cp	r25, r3
    27d4:	d4 f0       	brlt	.+52     	; 0x280a <CalibrateChannel+0x36e>
    27d6:	22 2d       	mov	r18, r2
    27d8:	38 2d       	mov	r19, r8
    27da:	47 e2       	ldi	r20, 0x27	; 39
    27dc:	50 e0       	ldi	r21, 0x00	; 0
    27de:	61 e0       	ldi	r22, 0x01	; 1
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	8d ea       	ldi	r24, 0xAD	; 173
    27e4:	93 e2       	ldi	r25, 0x23	; 35
    27e6:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    27ea:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
    27ee:	98 2f       	mov	r25, r24
    27f0:	89 37       	cpi	r24, 0x79	; 121
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <CalibrateChannel+0x35a>
    27f4:	48 c3       	rjmp	.+1680   	; 0x2e86 <CalibrateChannel+0x9ea>
    27f6:	89 35       	cpi	r24, 0x59	; 89
    27f8:	09 f4       	brne	.+2      	; 0x27fc <CalibrateChannel+0x360>
    27fa:	57 c3       	rjmp	.+1710   	; 0x2eaa <CalibrateChannel+0xa0e>
    27fc:	8f 7d       	andi	r24, 0xDF	; 223
    27fe:	8e 34       	cpi	r24, 0x4E	; 78
    2800:	09 f4       	brne	.+2      	; 0x2804 <CalibrateChannel+0x368>
    2802:	65 c3       	rjmp	.+1738   	; 0x2ece <CalibrateChannel+0xa32>
    2804:	9b 31       	cpi	r25, 0x1B	; 27
    2806:	89 f7       	brne	.-30     	; 0x27ea <CalibrateChannel+0x34e>
    2808:	62 c3       	rjmp	.+1732   	; 0x2ece <CalibrateChannel+0xa32>
    280a:	a1 e0       	ldi	r26, 0x01	; 1
    280c:	a3 15       	cp	r26, r3
    280e:	1c f4       	brge	.+6      	; 0x2816 <CalibrateChannel+0x37a>
    2810:	13 14       	cp	r1, r3
    2812:	64 f0       	brlt	.+24     	; 0x282c <CalibrateChannel+0x390>
    2814:	cc c3       	rjmp	.+1944   	; 0x2fae <CalibrateChannel+0xb12>
    2816:	22 2d       	mov	r18, r2
    2818:	38 2d       	mov	r19, r8
    281a:	42 e5       	ldi	r20, 0x52	; 82
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	61 e0       	ldi	r22, 0x01	; 1
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	85 ed       	ldi	r24, 0xD5	; 213
    2824:	93 e2       	ldi	r25, 0x23	; 35
    2826:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    282a:	28 c4       	rjmp	.+2128   	; 0x307c <CalibrateChannel+0xbe0>
    282c:	3e 01       	movw	r6, r28
    282e:	b5 e7       	ldi	r27, 0x75	; 117
    2830:	6b 0e       	add	r6, r27
    2832:	71 1c       	adc	r7, r1
    2834:	5e 01       	movw	r10, r28
    2836:	e1 e6       	ldi	r30, 0x61	; 97
    2838:	ae 0e       	add	r10, r30
    283a:	b1 1c       	adc	r11, r1
    283c:	75 01       	movw	r14, r10
    283e:	83 01       	movw	r16, r6
    2840:	cd 56       	subi	r28, 0x6D	; 109
    2842:	df 4f       	sbci	r29, 0xFF	; 255
    2844:	18 82       	st	Y, r1
    2846:	19 82       	std	Y+1, r1	; 0x01
    2848:	1a 82       	std	Y+2, r1	; 0x02
    284a:	1b 82       	std	Y+3, r1	; 0x03
    284c:	c3 59       	subi	r28, 0x93	; 147
    284e:	d0 40       	sbci	r29, 0x00	; 0
    2850:	c1 57       	subi	r28, 0x71	; 113
    2852:	df 4f       	sbci	r29, 0xFF	; 255
    2854:	18 82       	st	Y, r1
    2856:	19 82       	std	Y+1, r1	; 0x01
    2858:	1a 82       	std	Y+2, r1	; 0x02
    285a:	1b 82       	std	Y+3, r1	; 0x03
    285c:	cf 58       	subi	r28, 0x8F	; 143
    285e:	d0 40       	sbci	r29, 0x00	; 0
    2860:	91 2c       	mov	r9, r1
    2862:	d8 01       	movw	r26, r16
    2864:	2d 91       	ld	r18, X+
    2866:	3d 91       	ld	r19, X+
    2868:	4d 91       	ld	r20, X+
    286a:	5d 91       	ld	r21, X+
    286c:	8d 01       	movw	r16, r26
    286e:	c1 57       	subi	r28, 0x71	; 113
    2870:	df 4f       	sbci	r29, 0xFF	; 255
    2872:	68 81       	ld	r22, Y
    2874:	79 81       	ldd	r23, Y+1	; 0x01
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	cf 58       	subi	r28, 0x8F	; 143
    287c:	d0 40       	sbci	r29, 0x00	; 0
    287e:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    2882:	c1 57       	subi	r28, 0x71	; 113
    2884:	df 4f       	sbci	r29, 0xFF	; 255
    2886:	68 83       	st	Y, r22
    2888:	79 83       	std	Y+1, r23	; 0x01
    288a:	8a 83       	std	Y+2, r24	; 0x02
    288c:	9b 83       	std	Y+3, r25	; 0x03
    288e:	cf 58       	subi	r28, 0x8F	; 143
    2890:	d0 40       	sbci	r29, 0x00	; 0
    2892:	f7 01       	movw	r30, r14
    2894:	21 91       	ld	r18, Z+
    2896:	31 91       	ld	r19, Z+
    2898:	41 91       	ld	r20, Z+
    289a:	51 91       	ld	r21, Z+
    289c:	7f 01       	movw	r14, r30
    289e:	cd 56       	subi	r28, 0x6D	; 109
    28a0:	df 4f       	sbci	r29, 0xFF	; 255
    28a2:	68 81       	ld	r22, Y
    28a4:	79 81       	ldd	r23, Y+1	; 0x01
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	9b 81       	ldd	r25, Y+3	; 0x03
    28aa:	c3 59       	subi	r28, 0x93	; 147
    28ac:	d0 40       	sbci	r29, 0x00	; 0
    28ae:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    28b2:	cd 56       	subi	r28, 0x6D	; 109
    28b4:	df 4f       	sbci	r29, 0xFF	; 255
    28b6:	68 83       	st	Y, r22
    28b8:	79 83       	std	Y+1, r23	; 0x01
    28ba:	8a 83       	std	Y+2, r24	; 0x02
    28bc:	9b 83       	std	Y+3, r25	; 0x03
    28be:	c3 59       	subi	r28, 0x93	; 147
    28c0:	d0 40       	sbci	r29, 0x00	; 0
    28c2:	93 94       	inc	r9
    28c4:	39 10       	cpse	r3, r9
    28c6:	cd cf       	rjmp	.-102    	; 0x2862 <CalibrateChannel+0x3c6>
    28c8:	17 c3       	rjmp	.+1582   	; 0x2ef8 <CalibrateChannel+0xa5c>
    28ca:	d3 01       	movw	r26, r6
    28cc:	6d 91       	ld	r22, X+
    28ce:	7d 91       	ld	r23, X+
    28d0:	8d 91       	ld	r24, X+
    28d2:	9d 91       	ld	r25, X+
    28d4:	3d 01       	movw	r6, r26
    28d6:	20 2f       	mov	r18, r16
    28d8:	3f 2d       	mov	r19, r15
    28da:	4d 2d       	mov	r20, r13
    28dc:	5e 2d       	mov	r21, r14
    28de:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    28e2:	c1 57       	subi	r28, 0x71	; 113
    28e4:	df 4f       	sbci	r29, 0xFF	; 255
    28e6:	68 83       	st	Y, r22
    28e8:	79 83       	std	Y+1, r23	; 0x01
    28ea:	8a 83       	std	Y+2, r24	; 0x02
    28ec:	9b 83       	std	Y+3, r25	; 0x03
    28ee:	cf 58       	subi	r28, 0x8F	; 143
    28f0:	d0 40       	sbci	r29, 0x00	; 0
    28f2:	9b 01       	movw	r18, r22
    28f4:	ac 01       	movw	r20, r24
    28f6:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    28fa:	9b 01       	movw	r18, r22
    28fc:	ac 01       	movw	r20, r24
    28fe:	cd 56       	subi	r28, 0x6D	; 109
    2900:	df 4f       	sbci	r29, 0xFF	; 255
    2902:	68 81       	ld	r22, Y
    2904:	79 81       	ldd	r23, Y+1	; 0x01
    2906:	8a 81       	ldd	r24, Y+2	; 0x02
    2908:	9b 81       	ldd	r25, Y+3	; 0x03
    290a:	c3 59       	subi	r28, 0x93	; 147
    290c:	d0 40       	sbci	r29, 0x00	; 0
    290e:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    2912:	cd 56       	subi	r28, 0x6D	; 109
    2914:	df 4f       	sbci	r29, 0xFF	; 255
    2916:	68 83       	st	Y, r22
    2918:	79 83       	std	Y+1, r23	; 0x01
    291a:	8a 83       	std	Y+2, r24	; 0x02
    291c:	9b 83       	std	Y+3, r25	; 0x03
    291e:	c3 59       	subi	r28, 0x93	; 147
    2920:	d0 40       	sbci	r29, 0x00	; 0
    2922:	f5 01       	movw	r30, r10
    2924:	61 91       	ld	r22, Z+
    2926:	71 91       	ld	r23, Z+
    2928:	81 91       	ld	r24, Z+
    292a:	91 91       	ld	r25, Z+
    292c:	5f 01       	movw	r10, r30
    292e:	c1 56       	subi	r28, 0x61	; 97
    2930:	df 4f       	sbci	r29, 0xFF	; 255
    2932:	28 81       	ld	r18, Y
    2934:	cf 59       	subi	r28, 0x9F	; 159
    2936:	d0 40       	sbci	r29, 0x00	; 0
    2938:	39 2d       	mov	r19, r9
    293a:	44 2d       	mov	r20, r4
    293c:	55 2d       	mov	r21, r5
    293e:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    2942:	c1 57       	subi	r28, 0x71	; 113
    2944:	df 4f       	sbci	r29, 0xFF	; 255
    2946:	28 81       	ld	r18, Y
    2948:	39 81       	ldd	r19, Y+1	; 0x01
    294a:	4a 81       	ldd	r20, Y+2	; 0x02
    294c:	5b 81       	ldd	r21, Y+3	; 0x03
    294e:	cf 58       	subi	r28, 0x8F	; 143
    2950:	d0 40       	sbci	r29, 0x00	; 0
    2952:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    2956:	9b 01       	movw	r18, r22
    2958:	ac 01       	movw	r20, r24
    295a:	c9 56       	subi	r28, 0x69	; 105
    295c:	df 4f       	sbci	r29, 0xFF	; 255
    295e:	68 81       	ld	r22, Y
    2960:	79 81       	ldd	r23, Y+1	; 0x01
    2962:	8a 81       	ldd	r24, Y+2	; 0x02
    2964:	9b 81       	ldd	r25, Y+3	; 0x03
    2966:	c7 59       	subi	r28, 0x97	; 151
    2968:	d0 40       	sbci	r29, 0x00	; 0
    296a:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    296e:	c9 56       	subi	r28, 0x69	; 105
    2970:	df 4f       	sbci	r29, 0xFF	; 255
    2972:	68 83       	st	Y, r22
    2974:	79 83       	std	Y+1, r23	; 0x01
    2976:	8a 83       	std	Y+2, r24	; 0x02
    2978:	9b 83       	std	Y+3, r25	; 0x03
    297a:	c7 59       	subi	r28, 0x97	; 151
    297c:	d0 40       	sbci	r29, 0x00	; 0
    297e:	1f 5f       	subi	r17, 0xFF	; 255
    2980:	31 12       	cpse	r3, r17
    2982:	a3 cf       	rjmp	.-186    	; 0x28ca <CalibrateChannel+0x42e>
    2984:	cf 55       	subi	r28, 0x5F	; 95
    2986:	df 4f       	sbci	r29, 0xFF	; 255
    2988:	c8 80       	ld	r12, Y
    298a:	d9 80       	ldd	r13, Y+1	; 0x01
    298c:	c1 5a       	subi	r28, 0xA1	; 161
    298e:	d0 40       	sbci	r29, 0x00	; 0
    2990:	cd 56       	subi	r28, 0x6D	; 109
    2992:	df 4f       	sbci	r29, 0xFF	; 255
    2994:	28 81       	ld	r18, Y
    2996:	39 81       	ldd	r19, Y+1	; 0x01
    2998:	4a 81       	ldd	r20, Y+2	; 0x02
    299a:	5b 81       	ldd	r21, Y+3	; 0x03
    299c:	c3 59       	subi	r28, 0x93	; 147
    299e:	d0 40       	sbci	r29, 0x00	; 0
    29a0:	c9 56       	subi	r28, 0x69	; 105
    29a2:	df 4f       	sbci	r29, 0xFF	; 255
    29a4:	68 81       	ld	r22, Y
    29a6:	79 81       	ldd	r23, Y+1	; 0x01
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	c7 59       	subi	r28, 0x97	; 151
    29ae:	d0 40       	sbci	r29, 0x00	; 0
    29b0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    29b4:	c1 57       	subi	r28, 0x71	; 113
    29b6:	df 4f       	sbci	r29, 0xFF	; 255
    29b8:	68 83       	st	Y, r22
    29ba:	79 83       	std	Y+1, r23	; 0x01
    29bc:	8a 83       	std	Y+2, r24	; 0x02
    29be:	9b 83       	std	Y+3, r25	; 0x03
    29c0:	cf 58       	subi	r28, 0x8F	; 143
    29c2:	d0 40       	sbci	r29, 0x00	; 0
    29c4:	20 2f       	mov	r18, r16
    29c6:	3f 2d       	mov	r19, r15
    29c8:	c0 56       	subi	r28, 0x60	; 96
    29ca:	df 4f       	sbci	r29, 0xFF	; 255
    29cc:	48 81       	ld	r20, Y
    29ce:	c0 5a       	subi	r28, 0xA0	; 160
    29d0:	d0 40       	sbci	r29, 0x00	; 0
    29d2:	5e 2d       	mov	r21, r14
    29d4:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    29d8:	9b 01       	movw	r18, r22
    29da:	ac 01       	movw	r20, r24
    29dc:	c1 56       	subi	r28, 0x61	; 97
    29de:	df 4f       	sbci	r29, 0xFF	; 255
    29e0:	68 81       	ld	r22, Y
    29e2:	cf 59       	subi	r28, 0x9F	; 159
    29e4:	d0 40       	sbci	r29, 0x00	; 0
    29e6:	79 2d       	mov	r23, r9
    29e8:	84 2d       	mov	r24, r4
    29ea:	95 2d       	mov	r25, r5
    29ec:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__subsf3>
    29f0:	cd 56       	subi	r28, 0x6D	; 109
    29f2:	df 4f       	sbci	r29, 0xFF	; 255
    29f4:	68 83       	st	Y, r22
    29f6:	79 83       	std	Y+1, r23	; 0x01
    29f8:	8a 83       	std	Y+2, r24	; 0x02
    29fa:	9b 83       	std	Y+3, r25	; 0x03
    29fc:	c3 59       	subi	r28, 0x93	; 147
    29fe:	d0 40       	sbci	r29, 0x00	; 0
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <CalibrateChannel+0x56a>
    2a02:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
    2a06:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <CanRead_Ctrl>
    2a0a:	81 11       	cpse	r24, r1
    2a0c:	fa cf       	rjmp	.-12     	; 0x2a02 <CalibrateChannel+0x566>
    2a0e:	c2 56       	subi	r28, 0x62	; 98
    2a10:	df 4f       	sbci	r29, 0xFF	; 255
    2a12:	f8 81       	ld	r31, Y
    2a14:	ce 59       	subi	r28, 0x9E	; 158
    2a16:	d0 40       	sbci	r29, 0x00	; 0
    2a18:	ff 93       	push	r31
    2a1a:	c3 56       	subi	r28, 0x63	; 99
    2a1c:	df 4f       	sbci	r29, 0xFF	; 255
    2a1e:	28 81       	ld	r18, Y
    2a20:	cd 59       	subi	r28, 0x9D	; 157
    2a22:	d0 40       	sbci	r29, 0x00	; 0
    2a24:	2f 93       	push	r18
    2a26:	88 e2       	ldi	r24, 0x28	; 40
    2a28:	94 e2       	ldi	r25, 0x24	; 36
    2a2a:	9f 93       	push	r25
    2a2c:	8f 93       	push	r24
    2a2e:	8f 92       	push	r8
    2a30:	2f 92       	push	r2
    2a32:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2a36:	d6 01       	movw	r26, r12
    2a38:	4d 90       	ld	r4, X+
    2a3a:	5d 90       	ld	r5, X+
    2a3c:	6d 90       	ld	r6, X+
    2a3e:	7c 90       	ld	r7, X
    2a40:	c5 56       	subi	r28, 0x65	; 101
    2a42:	df 4f       	sbci	r29, 0xFF	; 255
    2a44:	e8 81       	ld	r30, Y
    2a46:	f9 81       	ldd	r31, Y+1	; 0x01
    2a48:	cb 59       	subi	r28, 0x9B	; 155
    2a4a:	d0 40       	sbci	r29, 0x00	; 0
    2a4c:	ee 0f       	add	r30, r30
    2a4e:	ff 1f       	adc	r31, r31
    2a50:	c5 56       	subi	r28, 0x65	; 101
    2a52:	df 4f       	sbci	r29, 0xFF	; 255
    2a54:	28 81       	ld	r18, Y
    2a56:	39 81       	ldd	r19, Y+1	; 0x01
    2a58:	cb 59       	subi	r28, 0x9B	; 155
    2a5a:	d0 40       	sbci	r29, 0x00	; 0
    2a5c:	e2 0f       	add	r30, r18
    2a5e:	f3 1f       	adc	r31, r19
    2a60:	ee 0f       	add	r30, r30
    2a62:	ff 1f       	adc	r31, r31
    2a64:	ee 0f       	add	r30, r30
    2a66:	ff 1f       	adc	r31, r31
    2a68:	ec 0f       	add	r30, r28
    2a6a:	fd 1f       	adc	r31, r29
    2a6c:	07 81       	ldd	r16, Z+7	; 0x07
    2a6e:	10 85       	ldd	r17, Z+8	; 0x08
    2a70:	d8 01       	movw	r26, r16
    2a72:	ad 90       	ld	r10, X+
    2a74:	bc 90       	ld	r11, X
    2a76:	11 97       	sbiw	r26, 0x01	; 1
    2a78:	ed 90       	ld	r14, X+
    2a7a:	fc 90       	ld	r15, X
    2a7c:	cd 56       	subi	r28, 0x6D	; 109
    2a7e:	df 4f       	sbci	r29, 0xFF	; 255
    2a80:	68 81       	ld	r22, Y
    2a82:	79 81       	ldd	r23, Y+1	; 0x01
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	c3 59       	subi	r28, 0x93	; 147
    2a8a:	d0 40       	sbci	r29, 0x00	; 0
    2a8c:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <round>
    2a90:	cd 56       	subi	r28, 0x6D	; 109
    2a92:	df 4f       	sbci	r29, 0xFF	; 255
    2a94:	68 83       	st	Y, r22
    2a96:	79 83       	std	Y+1, r23	; 0x01
    2a98:	8a 83       	std	Y+2, r24	; 0x02
    2a9a:	9b 83       	std	Y+3, r25	; 0x03
    2a9c:	c3 59       	subi	r28, 0x93	; 147
    2a9e:	d0 40       	sbci	r29, 0x00	; 0
    2aa0:	7f 92       	push	r7
    2aa2:	6f 92       	push	r6
    2aa4:	5f 92       	push	r5
    2aa6:	4f 92       	push	r4
    2aa8:	ce 56       	subi	r28, 0x6E	; 110
    2aaa:	df 4f       	sbci	r29, 0xFF	; 255
    2aac:	b8 81       	ld	r27, Y
    2aae:	c2 59       	subi	r28, 0x92	; 146
    2ab0:	d0 40       	sbci	r29, 0x00	; 0
    2ab2:	bf 93       	push	r27
    2ab4:	cf 56       	subi	r28, 0x6F	; 111
    2ab6:	df 4f       	sbci	r29, 0xFF	; 255
    2ab8:	e8 81       	ld	r30, Y
    2aba:	c1 59       	subi	r28, 0x91	; 145
    2abc:	d0 40       	sbci	r29, 0x00	; 0
    2abe:	ef 93       	push	r30
    2ac0:	c0 57       	subi	r28, 0x70	; 112
    2ac2:	df 4f       	sbci	r29, 0xFF	; 255
    2ac4:	f8 81       	ld	r31, Y
    2ac6:	c0 59       	subi	r28, 0x90	; 144
    2ac8:	d0 40       	sbci	r29, 0x00	; 0
    2aca:	ff 93       	push	r31
    2acc:	c1 57       	subi	r28, 0x71	; 113
    2ace:	df 4f       	sbci	r29, 0xFF	; 255
    2ad0:	28 81       	ld	r18, Y
    2ad2:	cf 58       	subi	r28, 0x8F	; 143
    2ad4:	d0 40       	sbci	r29, 0x00	; 0
    2ad6:	2f 93       	push	r18
    2ad8:	bf 92       	push	r11
    2ada:	af 92       	push	r10
    2adc:	b7 01       	movw	r22, r14
    2ade:	ff 0c       	add	r15, r15
    2ae0:	88 0b       	sbc	r24, r24
    2ae2:	99 0b       	sbc	r25, r25
    2ae4:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    2ae8:	cd 56       	subi	r28, 0x6D	; 109
    2aea:	df 4f       	sbci	r29, 0xFF	; 255
    2aec:	28 81       	ld	r18, Y
    2aee:	39 81       	ldd	r19, Y+1	; 0x01
    2af0:	4a 81       	ldd	r20, Y+2	; 0x02
    2af2:	5b 81       	ldd	r21, Y+3	; 0x03
    2af4:	c3 59       	subi	r28, 0x93	; 147
    2af6:	d0 40       	sbci	r29, 0x00	; 0
    2af8:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    2afc:	9f 93       	push	r25
    2afe:	8f 93       	push	r24
    2b00:	7f 93       	push	r23
    2b02:	6f 93       	push	r22
    2b04:	8c e4       	ldi	r24, 0x4C	; 76
    2b06:	94 e2       	ldi	r25, 0x24	; 36
    2b08:	9f 93       	push	r25
    2b0a:	8f 93       	push	r24
    2b0c:	8f 92       	push	r8
    2b0e:	2f 92       	push	r2
    2b10:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2b14:	cd bf       	out	0x3d, r28	; 61
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0e 94 0f 2e 	call	0x5c1e	; 0x5c1e <ReadByte_Ctrl>
    2b1c:	98 2f       	mov	r25, r24
    2b1e:	89 37       	cpi	r24, 0x79	; 121
    2b20:	09 f4       	brne	.+2      	; 0x2b24 <CalibrateChannel+0x688>
    2b22:	74 c2       	rjmp	.+1256   	; 0x300c <CalibrateChannel+0xb70>
    2b24:	89 35       	cpi	r24, 0x59	; 89
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <CalibrateChannel+0x68e>
    2b28:	83 c2       	rjmp	.+1286   	; 0x3030 <CalibrateChannel+0xb94>
    2b2a:	8f 7d       	andi	r24, 0xDF	; 223
    2b2c:	8e 34       	cpi	r24, 0x4E	; 78
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <CalibrateChannel+0x696>
    2b30:	91 c2       	rjmp	.+1314   	; 0x3054 <CalibrateChannel+0xbb8>
    2b32:	9b 31       	cpi	r25, 0x1B	; 27
    2b34:	89 f7       	brne	.-30     	; 0x2b18 <CalibrateChannel+0x67c>
    2b36:	8e c2       	rjmp	.+1308   	; 0x3054 <CalibrateChannel+0xbb8>
    2b38:	d8 01       	movw	r26, r16
    2b3a:	6d 91       	ld	r22, X+
    2b3c:	7c 91       	ld	r23, X
    2b3e:	07 2e       	mov	r0, r23
    2b40:	00 0c       	add	r0, r0
    2b42:	88 0b       	sbc	r24, r24
    2b44:	99 0b       	sbc	r25, r25
    2b46:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    2b4a:	cd 56       	subi	r28, 0x6D	; 109
    2b4c:	df 4f       	sbci	r29, 0xFF	; 255
    2b4e:	28 81       	ld	r18, Y
    2b50:	39 81       	ldd	r19, Y+1	; 0x01
    2b52:	4a 81       	ldd	r20, Y+2	; 0x02
    2b54:	5b 81       	ldd	r21, Y+3	; 0x03
    2b56:	c3 59       	subi	r28, 0x93	; 147
    2b58:	d0 40       	sbci	r29, 0x00	; 0
    2b5a:	0e 94 65 31 	call	0x62ca	; 0x62ca <__addsf3>
    2b5e:	0e 94 48 32 	call	0x6490	; 0x6490 <__fixsfsi>
    2b62:	f8 01       	movw	r30, r16
    2b64:	60 83       	st	Z, r22
    2b66:	71 83       	std	Z+1, r23	; 0x01
    2b68:	c1 57       	subi	r28, 0x71	; 113
    2b6a:	df 4f       	sbci	r29, 0xFF	; 255
    2b6c:	88 81       	ld	r24, Y
    2b6e:	99 81       	ldd	r25, Y+1	; 0x01
    2b70:	aa 81       	ldd	r26, Y+2	; 0x02
    2b72:	bb 81       	ldd	r27, Y+3	; 0x03
    2b74:	cf 58       	subi	r28, 0x8F	; 143
    2b76:	d0 40       	sbci	r29, 0x00	; 0
    2b78:	f6 01       	movw	r30, r12
    2b7a:	80 83       	st	Z, r24
    2b7c:	91 83       	std	Z+1, r25	; 0x01
    2b7e:	a2 83       	std	Z+2, r26	; 0x02
    2b80:	b3 83       	std	Z+3, r27	; 0x03
    2b82:	c5 56       	subi	r28, 0x65	; 101
    2b84:	df 4f       	sbci	r29, 0xFF	; 255
    2b86:	e8 80       	ld	r14, Y
    2b88:	f9 80       	ldd	r15, Y+1	; 0x01
    2b8a:	cb 59       	subi	r28, 0x9B	; 155
    2b8c:	d0 40       	sbci	r29, 0x00	; 0
    2b8e:	ee 0c       	add	r14, r14
    2b90:	ff 1c       	adc	r15, r15
    2b92:	c5 56       	subi	r28, 0x65	; 101
    2b94:	df 4f       	sbci	r29, 0xFF	; 255
    2b96:	e8 81       	ld	r30, Y
    2b98:	f9 81       	ldd	r31, Y+1	; 0x01
    2b9a:	cb 59       	subi	r28, 0x9B	; 155
    2b9c:	d0 40       	sbci	r29, 0x00	; 0
    2b9e:	ee 0d       	add	r30, r14
    2ba0:	ff 1d       	adc	r31, r15
    2ba2:	ee 0f       	add	r30, r30
    2ba4:	ff 1f       	adc	r31, r31
    2ba6:	ee 0f       	add	r30, r30
    2ba8:	ff 1f       	adc	r31, r31
    2baa:	21 e0       	ldi	r18, 0x01	; 1
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	2c 0f       	add	r18, r28
    2bb0:	3d 1f       	adc	r19, r29
    2bb2:	e2 0f       	add	r30, r18
    2bb4:	f3 1f       	adc	r31, r19
    2bb6:	a2 84       	ldd	r10, Z+10	; 0x0a
    2bb8:	b3 84       	ldd	r11, Z+11	; 0x0b
    2bba:	42 e0       	ldi	r20, 0x02	; 2
    2bbc:	50 e0       	ldi	r21, 0x00	; 0
    2bbe:	b5 01       	movw	r22, r10
    2bc0:	c8 01       	movw	r24, r16
    2bc2:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <UpdateEEPROM>
    2bc6:	c5 56       	subi	r28, 0x65	; 101
    2bc8:	df 4f       	sbci	r29, 0xFF	; 255
    2bca:	e8 81       	ld	r30, Y
    2bcc:	f9 81       	ldd	r31, Y+1	; 0x01
    2bce:	cb 59       	subi	r28, 0x9B	; 155
    2bd0:	d0 40       	sbci	r29, 0x00	; 0
    2bd2:	ee 0d       	add	r30, r14
    2bd4:	ff 1d       	adc	r31, r15
    2bd6:	ee 0f       	add	r30, r30
    2bd8:	ff 1f       	adc	r31, r31
    2bda:	ee 0f       	add	r30, r30
    2bdc:	ff 1f       	adc	r31, r31
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	8c 0f       	add	r24, r28
    2be4:	9d 1f       	adc	r25, r29
    2be6:	e8 0f       	add	r30, r24
    2be8:	f9 1f       	adc	r31, r25
    2bea:	e0 84       	ldd	r14, Z+8	; 0x08
    2bec:	f1 84       	ldd	r15, Z+9	; 0x09
    2bee:	44 e0       	ldi	r20, 0x04	; 4
    2bf0:	50 e0       	ldi	r21, 0x00	; 0
    2bf2:	b7 01       	movw	r22, r14
    2bf4:	c6 01       	movw	r24, r12
    2bf6:	0e 94 dc 30 	call	0x61b8	; 0x61b8 <UpdateEEPROM>
    2bfa:	f6 01       	movw	r30, r12
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	a2 81       	ldd	r26, Z+2	; 0x02
    2c02:	b3 81       	ldd	r27, Z+3	; 0x03
    2c04:	f8 01       	movw	r30, r16
    2c06:	20 81       	ld	r18, Z
    2c08:	31 81       	ldd	r19, Z+1	; 0x01
    2c0a:	bf 93       	push	r27
    2c0c:	af 93       	push	r26
    2c0e:	9f 93       	push	r25
    2c10:	8f 93       	push	r24
    2c12:	3f 93       	push	r19
    2c14:	2f 93       	push	r18
    2c16:	83 e9       	ldi	r24, 0x93	; 147
    2c18:	94 e2       	ldi	r25, 0x24	; 36
    2c1a:	9f 93       	push	r25
    2c1c:	8f 93       	push	r24
    2c1e:	8f 92       	push	r8
    2c20:	2f 92       	push	r2
    2c22:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2c26:	42 e0       	ldi	r20, 0x02	; 2
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	b5 01       	movw	r22, r10
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	87 57       	subi	r24, 0x77	; 119
    2c30:	9f 4f       	sbci	r25, 0xFF	; 255
    2c32:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2c36:	44 e0       	ldi	r20, 0x04	; 4
    2c38:	50 e0       	ldi	r21, 0x00	; 0
    2c3a:	b7 01       	movw	r22, r14
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	85 57       	subi	r24, 0x75	; 117
    2c40:	9f 4f       	sbci	r25, 0xFF	; 255
    2c42:	0e 94 79 30 	call	0x60f2	; 0x60f2 <TryReadEEPROM>
    2c46:	c2 57       	subi	r28, 0x72	; 114
    2c48:	df 4f       	sbci	r29, 0xFF	; 255
    2c4a:	88 81       	ld	r24, Y
    2c4c:	ce 58       	subi	r28, 0x8E	; 142
    2c4e:	d0 40       	sbci	r29, 0x00	; 0
    2c50:	8f 93       	push	r24
    2c52:	c3 57       	subi	r28, 0x73	; 115
    2c54:	df 4f       	sbci	r29, 0xFF	; 255
    2c56:	88 81       	ld	r24, Y
    2c58:	cd 58       	subi	r28, 0x8D	; 141
    2c5a:	d0 40       	sbci	r29, 0x00	; 0
    2c5c:	8f 93       	push	r24
    2c5e:	c4 57       	subi	r28, 0x74	; 116
    2c60:	df 4f       	sbci	r29, 0xFF	; 255
    2c62:	88 81       	ld	r24, Y
    2c64:	cc 58       	subi	r28, 0x8C	; 140
    2c66:	d0 40       	sbci	r29, 0x00	; 0
    2c68:	8f 93       	push	r24
    2c6a:	c5 57       	subi	r28, 0x75	; 117
    2c6c:	df 4f       	sbci	r29, 0xFF	; 255
    2c6e:	88 81       	ld	r24, Y
    2c70:	cb 58       	subi	r28, 0x8B	; 139
    2c72:	d0 40       	sbci	r29, 0x00	; 0
    2c74:	8f 93       	push	r24
    2c76:	c6 57       	subi	r28, 0x76	; 118
    2c78:	df 4f       	sbci	r29, 0xFF	; 255
    2c7a:	88 81       	ld	r24, Y
    2c7c:	ca 58       	subi	r28, 0x8A	; 138
    2c7e:	d0 40       	sbci	r29, 0x00	; 0
    2c80:	8f 93       	push	r24
    2c82:	c7 57       	subi	r28, 0x77	; 119
    2c84:	df 4f       	sbci	r29, 0xFF	; 255
    2c86:	88 81       	ld	r24, Y
    2c88:	c9 58       	subi	r28, 0x89	; 137
    2c8a:	d0 40       	sbci	r29, 0x00	; 0
    2c8c:	8f 93       	push	r24
    2c8e:	89 eb       	ldi	r24, 0xB9	; 185
    2c90:	94 e2       	ldi	r25, 0x24	; 36
    2c92:	9f 93       	push	r25
    2c94:	8f 93       	push	r24
    2c96:	8f 92       	push	r8
    2c98:	2f 92       	push	r2
    2c9a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2c9e:	22 2d       	mov	r18, r2
    2ca0:	38 2d       	mov	r19, r8
    2ca2:	4c e2       	ldi	r20, 0x2C	; 44
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	61 e0       	ldi	r22, 0x01	; 1
    2ca8:	70 e0       	ldi	r23, 0x00	; 0
    2caa:	8f ed       	ldi	r24, 0xDF	; 223
    2cac:	94 e2       	ldi	r25, 0x24	; 36
    2cae:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	e2 c1       	rjmp	.+964    	; 0x307c <CalibrateChannel+0xbe0>
    2cb8:	8c 2d       	mov	r24, r12
    2cba:	0c 2c       	mov	r0, r12
    2cbc:	00 0c       	add	r0, r0
    2cbe:	99 0b       	sbc	r25, r25
    2cc0:	c5 56       	subi	r28, 0x65	; 101
    2cc2:	df 4f       	sbci	r29, 0xFF	; 255
    2cc4:	88 83       	st	Y, r24
    2cc6:	99 83       	std	Y+1, r25	; 0x01
    2cc8:	cb 59       	subi	r28, 0x9B	; 155
    2cca:	d0 40       	sbci	r29, 0x00	; 0
    2ccc:	fc 01       	movw	r30, r24
    2cce:	ee 0f       	add	r30, r30
    2cd0:	ff 1f       	adc	r31, r31
    2cd2:	e8 0f       	add	r30, r24
    2cd4:	f9 1f       	adc	r31, r25
    2cd6:	ee 0f       	add	r30, r30
    2cd8:	ff 1f       	adc	r31, r31
    2cda:	ee 0f       	add	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	a1 e0       	ldi	r26, 0x01	; 1
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	ac 0f       	add	r26, r28
    2ce4:	bd 1f       	adc	r27, r29
    2ce6:	ea 0f       	add	r30, r26
    2ce8:	fb 1f       	adc	r31, r27
    2cea:	b0 81       	ld	r27, Z
    2cec:	c3 56       	subi	r28, 0x63	; 99
    2cee:	df 4f       	sbci	r29, 0xFF	; 255
    2cf0:	b8 83       	st	Y, r27
    2cf2:	cd 59       	subi	r28, 0x9D	; 157
    2cf4:	d0 40       	sbci	r29, 0x00	; 0
    2cf6:	21 81       	ldd	r18, Z+1	; 0x01
    2cf8:	c2 56       	subi	r28, 0x62	; 98
    2cfa:	df 4f       	sbci	r29, 0xFF	; 255
    2cfc:	28 83       	st	Y, r18
    2cfe:	ce 59       	subi	r28, 0x9E	; 158
    2d00:	d0 40       	sbci	r29, 0x00	; 0
    2d02:	2f 93       	push	r18
    2d04:	bf 93       	push	r27
    2d06:	8c e0       	ldi	r24, 0x0C	; 12
    2d08:	95 e2       	ldi	r25, 0x25	; 37
    2d0a:	9f 93       	push	r25
    2d0c:	8f 93       	push	r24
    2d0e:	8f 92       	push	r8
    2d10:	2f 92       	push	r2
    2d12:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2d16:	1f 92       	push	r1
    2d18:	85 e0       	ldi	r24, 0x05	; 5
    2d1a:	8f 93       	push	r24
    2d1c:	85 e2       	ldi	r24, 0x25	; 37
    2d1e:	95 e2       	ldi	r25, 0x25	; 37
    2d20:	9f 93       	push	r25
    2d22:	8f 93       	push	r24
    2d24:	8f 92       	push	r8
    2d26:	2f 92       	push	r2
    2d28:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	de bf       	out	0x3e, r29	; 62
    2d30:	c0 fe       	sbrs	r12, 0
    2d32:	03 c0       	rjmp	.+6      	; 0x2d3a <CalibrateChannel+0x89e>
    2d34:	83 e5       	ldi	r24, 0x53	; 83
    2d36:	95 e2       	ldi	r25, 0x25	; 37
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <CalibrateChannel+0x8a2>
    2d3a:	86 e5       	ldi	r24, 0x56	; 86
    2d3c:	95 e2       	ldi	r25, 0x25	; 37
    2d3e:	a8 2e       	mov	r10, r24
    2d40:	99 2e       	mov	r9, r25
    2d42:	31 2c       	mov	r3, r1
    2d44:	bb 24       	eor	r11, r11
    2d46:	b3 94       	inc	r11
    2d48:	c5 56       	subi	r28, 0x65	; 101
    2d4a:	df 4f       	sbci	r29, 0xFF	; 255
    2d4c:	88 81       	ld	r24, Y
    2d4e:	99 81       	ldd	r25, Y+1	; 0x01
    2d50:	cb 59       	subi	r28, 0x9B	; 155
    2d52:	d0 40       	sbci	r29, 0x00	; 0
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	c5 56       	subi	r28, 0x65	; 101
    2d5a:	df 4f       	sbci	r29, 0xFF	; 255
    2d5c:	a8 81       	ld	r26, Y
    2d5e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d60:	cb 59       	subi	r28, 0x9B	; 155
    2d62:	d0 40       	sbci	r29, 0x00	; 0
    2d64:	8a 0f       	add	r24, r26
    2d66:	9b 1f       	adc	r25, r27
    2d68:	88 0f       	add	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	88 0f       	add	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	e1 e0       	ldi	r30, 0x01	; 1
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	ec 0f       	add	r30, r28
    2d76:	fd 1f       	adc	r31, r29
    2d78:	8e 0f       	add	r24, r30
    2d7a:	9f 1f       	adc	r25, r31
    2d7c:	9c 01       	movw	r18, r24
    2d7e:	2e 5f       	subi	r18, 0xFE	; 254
    2d80:	3f 4f       	sbci	r19, 0xFF	; 255
    2d82:	cd 56       	subi	r28, 0x6D	; 109
    2d84:	df 4f       	sbci	r29, 0xFF	; 255
    2d86:	28 83       	st	Y, r18
    2d88:	39 83       	std	Y+1, r19	; 0x01
    2d8a:	c3 59       	subi	r28, 0x93	; 147
    2d8c:	d0 40       	sbci	r29, 0x00	; 0
    2d8e:	dc 01       	movw	r26, r24
    2d90:	14 96       	adiw	r26, 0x04	; 4
    2d92:	c9 56       	subi	r28, 0x69	; 105
    2d94:	df 4f       	sbci	r29, 0xFF	; 255
    2d96:	a8 83       	st	Y, r26
    2d98:	b9 83       	std	Y+1, r27	; 0x01
    2d9a:	c7 59       	subi	r28, 0x97	; 151
    2d9c:	d0 40       	sbci	r29, 0x00	; 0
    2d9e:	51 cc       	rjmp	.-1886   	; 0x2642 <CalibrateChannel+0x1a6>
    2da0:	c3 01       	movw	r24, r6
    2da2:	b2 01       	movw	r22, r4
    2da4:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a e7       	ldi	r20, 0x7A	; 122
    2dae:	54 e4       	ldi	r21, 0x44	; 68
    2db0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    2db4:	e6 2e       	mov	r14, r22
    2db6:	f7 2e       	mov	r15, r23
    2db8:	08 2f       	mov	r16, r24
    2dba:	19 2f       	mov	r17, r25
    2dbc:	f6 01       	movw	r30, r12
    2dbe:	ee 0f       	add	r30, r30
    2dc0:	ff 1f       	adc	r31, r31
    2dc2:	ee 0f       	add	r30, r30
    2dc4:	ff 1f       	adc	r31, r31
    2dc6:	25 e7       	ldi	r18, 0x75	; 117
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	2c 0f       	add	r18, r28
    2dcc:	3d 1f       	adc	r19, r29
    2dce:	e2 0f       	add	r30, r18
    2dd0:	f3 1f       	adc	r31, r19
    2dd2:	86 2f       	mov	r24, r22
    2dd4:	9f 2d       	mov	r25, r15
    2dd6:	a0 2f       	mov	r26, r16
    2dd8:	b1 2f       	mov	r27, r17
    2dda:	80 83       	st	Z, r24
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	a2 83       	std	Z+2, r26	; 0x02
    2de0:	b3 83       	std	Z+3, r27	; 0x03
    2de2:	b0 92 64 29 	sts	0x2964, r11	; 0x802964 <sTakeSnapshot>
    2de6:	7b cc       	rjmp	.-1802   	; 0x26de <CalibrateChannel+0x242>
    2de8:	1f 92       	push	r1
    2dea:	89 e5       	ldi	r24, 0x59	; 89
    2dec:	8f 93       	push	r24
    2dee:	89 e5       	ldi	r24, 0x59	; 89
    2df0:	95 e2       	ldi	r25, 0x25	; 37
    2df2:	9f 93       	push	r25
    2df4:	8f 93       	push	r24
    2df6:	8f 92       	push	r8
    2df8:	2f 92       	push	r2
    2dfa:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	e1 cc       	rjmp	.-1598   	; 0x27ce <CalibrateChannel+0x332>
    2e0c:	29 2f       	mov	r18, r25
    2e0e:	09 2e       	mov	r0, r25
    2e10:	00 0c       	add	r0, r0
    2e12:	33 0b       	sbc	r19, r19
    2e14:	3f 93       	push	r19
    2e16:	9f 93       	push	r25
    2e18:	e9 e5       	ldi	r30, 0x59	; 89
    2e1a:	f5 e2       	ldi	r31, 0x25	; 37
    2e1c:	ff 93       	push	r31
    2e1e:	ef 93       	push	r30
    2e20:	8f 92       	push	r8
    2e22:	2f 92       	push	r2
    2e24:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	34 e0       	ldi	r19, 0x04	; 4
    2e36:	33 15       	cp	r19, r3
    2e38:	0c f0       	brlt	.+2      	; 0x2e3c <CalibrateChannel+0x9a0>
    2e3a:	03 cc       	rjmp	.-2042   	; 0x2642 <CalibrateChannel+0x1a6>
    2e3c:	e6 cc       	rjmp	.-1588   	; 0x280a <CalibrateChannel+0x36e>
    2e3e:	1f 92       	push	r1
    2e40:	8b e1       	ldi	r24, 0x1B	; 27
    2e42:	8f 93       	push	r24
    2e44:	89 e5       	ldi	r24, 0x59	; 89
    2e46:	95 e2       	ldi	r25, 0x25	; 37
    2e48:	9f 93       	push	r25
    2e4a:	8f 93       	push	r24
    2e4c:	8f 92       	push	r8
    2e4e:	2f 92       	push	r2
    2e50:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	d4 cc       	rjmp	.-1624   	; 0x280a <CalibrateChannel+0x36e>
    2e62:	1f 92       	push	r1
    2e64:	89 e7       	ldi	r24, 0x79	; 121
    2e66:	8f 93       	push	r24
    2e68:	89 e5       	ldi	r24, 0x59	; 89
    2e6a:	95 e2       	ldi	r25, 0x25	; 37
    2e6c:	9f 93       	push	r25
    2e6e:	8f 93       	push	r24
    2e70:	8f 92       	push	r8
    2e72:	2f 92       	push	r2
    2e74:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	0f 90       	pop	r0
    2e7e:	0f 90       	pop	r0
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	a4 cc       	rjmp	.-1720   	; 0x27ce <CalibrateChannel+0x332>
    2e86:	1f 92       	push	r1
    2e88:	89 e7       	ldi	r24, 0x79	; 121
    2e8a:	8f 93       	push	r24
    2e8c:	e9 e5       	ldi	r30, 0x59	; 89
    2e8e:	f5 e2       	ldi	r31, 0x25	; 37
    2e90:	ff 93       	push	r31
    2e92:	ef 93       	push	r30
    2e94:	8f 92       	push	r8
    2e96:	2f 92       	push	r2
    2e98:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	0f 90       	pop	r0
    2ea8:	cc cb       	rjmp	.-2152   	; 0x2642 <CalibrateChannel+0x1a6>
    2eaa:	1f 92       	push	r1
    2eac:	89 e5       	ldi	r24, 0x59	; 89
    2eae:	8f 93       	push	r24
    2eb0:	89 e5       	ldi	r24, 0x59	; 89
    2eb2:	95 e2       	ldi	r25, 0x25	; 37
    2eb4:	9f 93       	push	r25
    2eb6:	8f 93       	push	r24
    2eb8:	8f 92       	push	r8
    2eba:	2f 92       	push	r2
    2ebc:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	ba cb       	rjmp	.-2188   	; 0x2642 <CalibrateChannel+0x1a6>
    2ece:	29 2f       	mov	r18, r25
    2ed0:	09 2e       	mov	r0, r25
    2ed2:	00 0c       	add	r0, r0
    2ed4:	33 0b       	sbc	r19, r19
    2ed6:	3f 93       	push	r19
    2ed8:	9f 93       	push	r25
    2eda:	89 e5       	ldi	r24, 0x59	; 89
    2edc:	95 e2       	ldi	r25, 0x25	; 37
    2ede:	9f 93       	push	r25
    2ee0:	8f 93       	push	r24
    2ee2:	8f 92       	push	r8
    2ee4:	2f 92       	push	r2
    2ee6:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	0f 90       	pop	r0
    2ef6:	89 cc       	rjmp	.-1774   	; 0x280a <CalibrateChannel+0x36e>
    2ef8:	63 2d       	mov	r22, r3
    2efa:	03 2c       	mov	r0, r3
    2efc:	00 0c       	add	r0, r0
    2efe:	77 0b       	sbc	r23, r23
    2f00:	88 0b       	sbc	r24, r24
    2f02:	99 0b       	sbc	r25, r25
    2f04:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    2f08:	c9 56       	subi	r28, 0x69	; 105
    2f0a:	df 4f       	sbci	r29, 0xFF	; 255
    2f0c:	68 83       	st	Y, r22
    2f0e:	79 83       	std	Y+1, r23	; 0x01
    2f10:	8a 83       	std	Y+2, r24	; 0x02
    2f12:	9b 83       	std	Y+3, r25	; 0x03
    2f14:	c7 59       	subi	r28, 0x97	; 151
    2f16:	d0 40       	sbci	r29, 0x00	; 0
    2f18:	9b 01       	movw	r18, r22
    2f1a:	ac 01       	movw	r20, r24
    2f1c:	c1 57       	subi	r28, 0x71	; 113
    2f1e:	df 4f       	sbci	r29, 0xFF	; 255
    2f20:	68 81       	ld	r22, Y
    2f22:	79 81       	ldd	r23, Y+1	; 0x01
    2f24:	8a 81       	ldd	r24, Y+2	; 0x02
    2f26:	9b 81       	ldd	r25, Y+3	; 0x03
    2f28:	cf 58       	subi	r28, 0x8F	; 143
    2f2a:	d0 40       	sbci	r29, 0x00	; 0
    2f2c:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    2f30:	06 2f       	mov	r16, r22
    2f32:	f7 2e       	mov	r15, r23
    2f34:	c0 56       	subi	r28, 0x60	; 96
    2f36:	df 4f       	sbci	r29, 0xFF	; 255
    2f38:	88 83       	st	Y, r24
    2f3a:	c0 5a       	subi	r28, 0xA0	; 160
    2f3c:	d0 40       	sbci	r29, 0x00	; 0
    2f3e:	e9 2e       	mov	r14, r25
    2f40:	c9 56       	subi	r28, 0x69	; 105
    2f42:	df 4f       	sbci	r29, 0xFF	; 255
    2f44:	28 81       	ld	r18, Y
    2f46:	39 81       	ldd	r19, Y+1	; 0x01
    2f48:	4a 81       	ldd	r20, Y+2	; 0x02
    2f4a:	5b 81       	ldd	r21, Y+3	; 0x03
    2f4c:	c7 59       	subi	r28, 0x97	; 151
    2f4e:	d0 40       	sbci	r29, 0x00	; 0
    2f50:	cd 56       	subi	r28, 0x6D	; 109
    2f52:	df 4f       	sbci	r29, 0xFF	; 255
    2f54:	68 81       	ld	r22, Y
    2f56:	79 81       	ldd	r23, Y+1	; 0x01
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5c:	c3 59       	subi	r28, 0x93	; 147
    2f5e:	d0 40       	sbci	r29, 0x00	; 0
    2f60:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    2f64:	c1 56       	subi	r28, 0x61	; 97
    2f66:	df 4f       	sbci	r29, 0xFF	; 255
    2f68:	68 83       	st	Y, r22
    2f6a:	cf 59       	subi	r28, 0x9F	; 159
    2f6c:	d0 40       	sbci	r29, 0x00	; 0
    2f6e:	97 2e       	mov	r9, r23
    2f70:	48 2e       	mov	r4, r24
    2f72:	59 2e       	mov	r5, r25
    2f74:	c9 56       	subi	r28, 0x69	; 105
    2f76:	df 4f       	sbci	r29, 0xFF	; 255
    2f78:	18 82       	st	Y, r1
    2f7a:	19 82       	std	Y+1, r1	; 0x01
    2f7c:	1a 82       	std	Y+2, r1	; 0x02
    2f7e:	1b 82       	std	Y+3, r1	; 0x03
    2f80:	c7 59       	subi	r28, 0x97	; 151
    2f82:	d0 40       	sbci	r29, 0x00	; 0
    2f84:	cd 56       	subi	r28, 0x6D	; 109
    2f86:	df 4f       	sbci	r29, 0xFF	; 255
    2f88:	18 82       	st	Y, r1
    2f8a:	19 82       	std	Y+1, r1	; 0x01
    2f8c:	1a 82       	std	Y+2, r1	; 0x02
    2f8e:	1b 82       	std	Y+3, r1	; 0x03
    2f90:	c3 59       	subi	r28, 0x93	; 147
    2f92:	d0 40       	sbci	r29, 0x00	; 0
    2f94:	10 e0       	ldi	r17, 0x00	; 0
    2f96:	cf 55       	subi	r28, 0x5F	; 95
    2f98:	df 4f       	sbci	r29, 0xFF	; 255
    2f9a:	c8 82       	st	Y, r12
    2f9c:	d9 82       	std	Y+1, r13	; 0x01
    2f9e:	c1 5a       	subi	r28, 0xA1	; 161
    2fa0:	d0 40       	sbci	r29, 0x00	; 0
    2fa2:	c0 56       	subi	r28, 0x60	; 96
    2fa4:	df 4f       	sbci	r29, 0xFF	; 255
    2fa6:	d8 80       	ld	r13, Y
    2fa8:	c0 5a       	subi	r28, 0xA0	; 160
    2faa:	d0 40       	sbci	r29, 0x00	; 0
    2fac:	8e cc       	rjmp	.-1764   	; 0x28ca <CalibrateChannel+0x42e>
    2fae:	63 2d       	mov	r22, r3
    2fb0:	33 0c       	add	r3, r3
    2fb2:	77 0b       	sbc	r23, r23
    2fb4:	88 0b       	sbc	r24, r24
    2fb6:	99 0b       	sbc	r25, r25
    2fb8:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    2fbc:	9b 01       	movw	r18, r22
    2fbe:	ac 01       	movw	r20, r24
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    2fca:	06 2f       	mov	r16, r22
    2fcc:	f7 2e       	mov	r15, r23
    2fce:	c0 56       	subi	r28, 0x60	; 96
    2fd0:	df 4f       	sbci	r29, 0xFF	; 255
    2fd2:	88 83       	st	Y, r24
    2fd4:	c0 5a       	subi	r28, 0xA0	; 160
    2fd6:	d0 40       	sbci	r29, 0x00	; 0
    2fd8:	e9 2e       	mov	r14, r25
    2fda:	c1 56       	subi	r28, 0x61	; 97
    2fdc:	df 4f       	sbci	r29, 0xFF	; 255
    2fde:	68 83       	st	Y, r22
    2fe0:	cf 59       	subi	r28, 0x9F	; 159
    2fe2:	d0 40       	sbci	r29, 0x00	; 0
    2fe4:	97 2e       	mov	r9, r23
    2fe6:	48 2e       	mov	r4, r24
    2fe8:	59 2e       	mov	r5, r25
    2fea:	c9 56       	subi	r28, 0x69	; 105
    2fec:	df 4f       	sbci	r29, 0xFF	; 255
    2fee:	18 82       	st	Y, r1
    2ff0:	19 82       	std	Y+1, r1	; 0x01
    2ff2:	1a 82       	std	Y+2, r1	; 0x02
    2ff4:	1b 82       	std	Y+3, r1	; 0x03
    2ff6:	c7 59       	subi	r28, 0x97	; 151
    2ff8:	d0 40       	sbci	r29, 0x00	; 0
    2ffa:	cd 56       	subi	r28, 0x6D	; 109
    2ffc:	df 4f       	sbci	r29, 0xFF	; 255
    2ffe:	18 82       	st	Y, r1
    3000:	19 82       	std	Y+1, r1	; 0x01
    3002:	1a 82       	std	Y+2, r1	; 0x02
    3004:	1b 82       	std	Y+3, r1	; 0x03
    3006:	c3 59       	subi	r28, 0x93	; 147
    3008:	d0 40       	sbci	r29, 0x00	; 0
    300a:	c2 cc       	rjmp	.-1660   	; 0x2990 <CalibrateChannel+0x4f4>
    300c:	1f 92       	push	r1
    300e:	89 e7       	ldi	r24, 0x79	; 121
    3010:	8f 93       	push	r24
    3012:	89 e5       	ldi	r24, 0x59	; 89
    3014:	95 e2       	ldi	r25, 0x25	; 37
    3016:	9f 93       	push	r25
    3018:	8f 93       	push	r24
    301a:	8f 92       	push	r8
    301c:	2f 92       	push	r2
    301e:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	84 cd       	rjmp	.-1272   	; 0x2b38 <CalibrateChannel+0x69c>
    3030:	1f 92       	push	r1
    3032:	89 e5       	ldi	r24, 0x59	; 89
    3034:	8f 93       	push	r24
    3036:	89 e5       	ldi	r24, 0x59	; 89
    3038:	95 e2       	ldi	r25, 0x25	; 37
    303a:	9f 93       	push	r25
    303c:	8f 93       	push	r24
    303e:	8f 92       	push	r8
    3040:	2f 92       	push	r2
    3042:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    3046:	0f 90       	pop	r0
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	72 cd       	rjmp	.-1308   	; 0x2b38 <CalibrateChannel+0x69c>
    3054:	29 2f       	mov	r18, r25
    3056:	09 2e       	mov	r0, r25
    3058:	00 0c       	add	r0, r0
    305a:	33 0b       	sbc	r19, r19
    305c:	3f 93       	push	r19
    305e:	9f 93       	push	r25
    3060:	89 e5       	ldi	r24, 0x59	; 89
    3062:	95 e2       	ldi	r25, 0x25	; 37
    3064:	9f 93       	push	r25
    3066:	8f 93       	push	r24
    3068:	8f 92       	push	r8
    306a:	2f 92       	push	r2
    306c:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	ce 55       	subi	r28, 0x5E	; 94
    307e:	df 4f       	sbci	r29, 0xFF	; 255
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	1f 91       	pop	r17
    308a:	0f 91       	pop	r16
    308c:	ff 90       	pop	r15
    308e:	ef 90       	pop	r14
    3090:	df 90       	pop	r13
    3092:	cf 90       	pop	r12
    3094:	bf 90       	pop	r11
    3096:	af 90       	pop	r10
    3098:	9f 90       	pop	r9
    309a:	8f 90       	pop	r8
    309c:	7f 90       	pop	r7
    309e:	6f 90       	pop	r6
    30a0:	5f 90       	pop	r5
    30a2:	4f 90       	pop	r4
    30a4:	3f 90       	pop	r3
    30a6:	2f 90       	pop	r2
    30a8:	08 95       	ret

000030aa <TakeSnapshot>:
    30aa:	81 e0       	ldi	r24, 0x01	; 1
    30ac:	80 93 64 29 	sts	0x2964, r24	; 0x802964 <sTakeSnapshot>
    30b0:	08 95       	ret

000030b2 <GetSessionCycleCount>:


uint32_t GetSessionCycleCount(void) {
    30b2:	0f 93       	push	r16
    30b4:	1f 93       	push	r17
	
	uint32_t res, prev;
	
	res = sSessionCycleCount;
    30b6:	00 91 e2 28 	lds	r16, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    30ba:	10 91 e3 28 	lds	r17, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    30be:	20 91 e4 28 	lds	r18, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    30c2:	30 91 e5 28 	lds	r19, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <GetSessionCycleCount+0x1a>
	
	do {
		prev = res;
		res = sSessionCycleCount;
    30c8:	8b 01       	movw	r16, r22
    30ca:	9c 01       	movw	r18, r24
    30cc:	60 91 e2 28 	lds	r22, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    30d0:	70 91 e3 28 	lds	r23, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    30d4:	80 91 e4 28 	lds	r24, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    30d8:	90 91 e5 28 	lds	r25, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
	} while (res != prev);
    30dc:	06 17       	cp	r16, r22
    30de:	17 07       	cpc	r17, r23
    30e0:	28 07       	cpc	r18, r24
    30e2:	39 07       	cpc	r19, r25
    30e4:	89 f7       	brne	.-30     	; 0x30c8 <GetSessionCycleCount+0x16>
	
	return res;
	
} /* GetSessionCycleCount */
    30e6:	1f 91       	pop	r17
    30e8:	0f 91       	pop	r16
    30ea:	08 95       	ret

000030ec <PrintCSV_H2A>:

	return res;
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
    30ec:	2f 92       	push	r2
    30ee:	3f 92       	push	r3
    30f0:	4f 92       	push	r4
    30f2:	5f 92       	push	r5
    30f4:	6f 92       	push	r6
    30f6:	7f 92       	push	r7
    30f8:	8f 92       	push	r8
    30fa:	9f 92       	push	r9
    30fc:	af 92       	push	r10
    30fe:	bf 92       	push	r11
    3100:	cf 92       	push	r12
    3102:	df 92       	push	r13
    3104:	ef 92       	push	r14
    3106:	ff 92       	push	r15
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	c1 5d       	subi	r28, 0xD1	; 209
    3116:	d1 09       	sbc	r29, r1
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	de bf       	out	0x3e, r29	; 62
    311c:	ca 54       	subi	r28, 0x4A	; 74
    311e:	df 4f       	sbci	r29, 0xFF	; 255
    3120:	88 83       	st	Y, r24
    3122:	c6 5b       	subi	r28, 0xB6	; 182
    3124:	d0 40       	sbci	r29, 0x00	; 0
    3126:	c9 54       	subi	r28, 0x49	; 73
    3128:	df 4f       	sbci	r29, 0xFF	; 255
    312a:	98 83       	st	Y, r25
    312c:	c7 5b       	subi	r28, 0xB7	; 183
    312e:	d0 40       	sbci	r29, 0x00	; 0
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    3130:	80 91 64 29 	lds	r24, 0x2964	; 0x802964 <sTakeSnapshot>
} /* GetProcessedSpeed */


void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    3134:	81 11       	cpse	r24, r1
    3136:	fc cf       	rjmp	.-8      	; 0x3130 <PrintCSV_H2A+0x44>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
    3138:	60 91 d5 29 	lds	r22, 0x29D5	; 0x8029d5 <sSensorDataSnapshot+0x6c>
    313c:	70 91 d6 29 	lds	r23, 0x29D6	; 0x8029d6 <sSensorDataSnapshot+0x6d>
    3140:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <sSensorDataSnapshot+0x6e>
    3144:	90 91 d8 29 	lds	r25, 0x29D8	; 0x8029d8 <sSensorDataSnapshot+0x6f>
    3148:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    314c:	20 e0       	ldi	r18, 0x00	; 0
    314e:	30 e4       	ldi	r19, 0x40	; 64
    3150:	4c e9       	ldi	r20, 0x9C	; 156
    3152:	55 e4       	ldi	r21, 0x45	; 69
    3154:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3158:	c8 54       	subi	r28, 0x48	; 72
    315a:	df 4f       	sbci	r29, 0xFF	; 255
    315c:	68 83       	st	Y, r22
    315e:	c8 5b       	subi	r28, 0xB8	; 184
    3160:	d0 40       	sbci	r29, 0x00	; 0
    3162:	c7 54       	subi	r28, 0x47	; 71
    3164:	df 4f       	sbci	r29, 0xFF	; 255
    3166:	78 83       	st	Y, r23
    3168:	c9 5b       	subi	r28, 0xB9	; 185
    316a:	d0 40       	sbci	r29, 0x00	; 0
    316c:	c6 54       	subi	r28, 0x46	; 70
    316e:	df 4f       	sbci	r29, 0xFF	; 255
    3170:	88 83       	st	Y, r24
    3172:	ca 5b       	subi	r28, 0xBA	; 186
    3174:	d0 40       	sbci	r29, 0x00	; 0
    3176:	c5 54       	subi	r28, 0x45	; 69
    3178:	df 4f       	sbci	r29, 0xFF	; 255
    317a:	98 83       	st	Y, r25
    317c:	cb 5b       	subi	r28, 0xBB	; 187
    317e:	d0 40       	sbci	r29, 0x00	; 0
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
    3180:	20 91 cc 29 	lds	r18, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x63>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    3184:	91 e0       	ldi	r25, 0x01	; 1
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	21 11       	cpse	r18, r1
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	c0 57       	subi	r28, 0x70	; 112
    318e:	df 4f       	sbci	r29, 0xFF	; 255
    3190:	98 83       	st	Y, r25
    3192:	c0 59       	subi	r28, 0x90	; 144
    3194:	d0 40       	sbci	r29, 0x00	; 0
    3196:	cf 56       	subi	r28, 0x6F	; 111
    3198:	df 4f       	sbci	r29, 0xFF	; 255
    319a:	88 83       	st	Y, r24
    319c:	c1 59       	subi	r28, 0x91	; 145
    319e:	d0 40       	sbci	r29, 0x00	; 0
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    31a0:	80 91 dd 29 	lds	r24, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x74>
    31a4:	90 91 de 29 	lds	r25, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x75>
    31a8:	a0 91 df 29 	lds	r26, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x76>
    31ac:	b0 91 e0 29 	lds	r27, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x77>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    31b0:	89 2b       	or	r24, r25
    31b2:	8a 2b       	or	r24, r26
    31b4:	8b 2b       	or	r24, r27
    31b6:	69 f1       	breq	.+90     	; 0x3212 <PrintCSV_H2A+0x126>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    31b8:	60 91 dd 29 	lds	r22, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x74>
    31bc:	70 91 de 29 	lds	r23, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x75>
    31c0:	80 91 df 29 	lds	r24, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x76>
    31c4:	90 91 e0 29 	lds	r25, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x77>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    31c8:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e8       	ldi	r20, 0x80	; 128
    31d2:	57 e3       	ldi	r21, 0x37	; 55
    31d4:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    31d8:	9b 01       	movw	r18, r22
    31da:	ac 01       	movw	r20, r24
    31dc:	60 e0       	ldi	r22, 0x00	; 0
    31de:	70 e8       	ldi	r23, 0x80	; 128
    31e0:	8b e8       	ldi	r24, 0x8B	; 139
    31e2:	94 e4       	ldi	r25, 0x44	; 68
    31e4:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    31e8:	c4 53       	subi	r28, 0x34	; 52
    31ea:	df 4f       	sbci	r29, 0xFF	; 255
    31ec:	68 83       	st	Y, r22
    31ee:	cc 5c       	subi	r28, 0xCC	; 204
    31f0:	d0 40       	sbci	r29, 0x00	; 0
    31f2:	c3 53       	subi	r28, 0x33	; 51
    31f4:	df 4f       	sbci	r29, 0xFF	; 255
    31f6:	78 83       	st	Y, r23
    31f8:	cd 5c       	subi	r28, 0xCD	; 205
    31fa:	d0 40       	sbci	r29, 0x00	; 0
    31fc:	c2 53       	subi	r28, 0x32	; 50
    31fe:	df 4f       	sbci	r29, 0xFF	; 255
    3200:	88 83       	st	Y, r24
    3202:	ce 5c       	subi	r28, 0xCE	; 206
    3204:	d0 40       	sbci	r29, 0x00	; 0
    3206:	c1 53       	subi	r28, 0x31	; 49
    3208:	df 4f       	sbci	r29, 0xFF	; 255
    320a:	98 83       	st	Y, r25
    320c:	cf 5c       	subi	r28, 0xCF	; 207
    320e:	d0 40       	sbci	r29, 0x00	; 0
    3210:	14 c0       	rjmp	.+40     	; 0x323a <PrintCSV_H2A+0x14e>
    3212:	c4 53       	subi	r28, 0x34	; 52
    3214:	df 4f       	sbci	r29, 0xFF	; 255
    3216:	18 82       	st	Y, r1
    3218:	cc 5c       	subi	r28, 0xCC	; 204
    321a:	d0 40       	sbci	r29, 0x00	; 0
    321c:	c3 53       	subi	r28, 0x33	; 51
    321e:	df 4f       	sbci	r29, 0xFF	; 255
    3220:	18 82       	st	Y, r1
    3222:	cd 5c       	subi	r28, 0xCD	; 205
    3224:	d0 40       	sbci	r29, 0x00	; 0
    3226:	c2 53       	subi	r28, 0x32	; 50
    3228:	df 4f       	sbci	r29, 0xFF	; 255
    322a:	18 82       	st	Y, r1
    322c:	ce 5c       	subi	r28, 0xCE	; 206
    322e:	d0 40       	sbci	r29, 0x00	; 0
    3230:	c1 53       	subi	r28, 0x31	; 49
    3232:	df 4f       	sbci	r29, 0xFF	; 255
    3234:	18 82       	st	Y, r1
    3236:	cf 5c       	subi	r28, 0xCF	; 207
    3238:	d0 40       	sbci	r29, 0x00	; 0
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    323a:	10 91 e1 29 	lds	r17, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x78>
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    323e:	60 91 d1 29 	lds	r22, 0x29D1	; 0x8029d1 <sSensorDataSnapshot+0x68>
    3242:	70 91 d2 29 	lds	r23, 0x29D2	; 0x8029d2 <sSensorDataSnapshot+0x69>
    3246:	80 91 d3 29 	lds	r24, 0x29D3	; 0x8029d3 <sSensorDataSnapshot+0x6a>
    324a:	90 91 d4 29 	lds	r25, 0x29D4	; 0x8029d4 <sSensorDataSnapshot+0x6b>
    324e:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e4       	ldi	r19, 0x40	; 64
    3256:	4c e9       	ldi	r20, 0x9C	; 156
    3258:	55 e4       	ldi	r21, 0x45	; 69
    325a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    325e:	c4 54       	subi	r28, 0x44	; 68
    3260:	df 4f       	sbci	r29, 0xFF	; 255
    3262:	68 83       	st	Y, r22
    3264:	cc 5b       	subi	r28, 0xBC	; 188
    3266:	d0 40       	sbci	r29, 0x00	; 0
    3268:	c3 54       	subi	r28, 0x43	; 67
    326a:	df 4f       	sbci	r29, 0xFF	; 255
    326c:	78 83       	st	Y, r23
    326e:	cd 5b       	subi	r28, 0xBD	; 189
    3270:	d0 40       	sbci	r29, 0x00	; 0
    3272:	c2 54       	subi	r28, 0x42	; 66
    3274:	df 4f       	sbci	r29, 0xFF	; 255
    3276:	88 83       	st	Y, r24
    3278:	ce 5b       	subi	r28, 0xBE	; 190
    327a:	d0 40       	sbci	r29, 0x00	; 0
    327c:	c1 54       	subi	r28, 0x41	; 65
    327e:	df 4f       	sbci	r29, 0xFF	; 255
    3280:	98 83       	st	Y, r25
    3282:	cf 5b       	subi	r28, 0xBF	; 191
    3284:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    3286:	20 91 cb 29 	lds	r18, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x62>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    328a:	91 e0       	ldi	r25, 0x01	; 1
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	21 11       	cpse	r18, r1
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	ce 56       	subi	r28, 0x6E	; 110
    3294:	df 4f       	sbci	r29, 0xFF	; 255
    3296:	98 83       	st	Y, r25
    3298:	c2 59       	subi	r28, 0x92	; 146
    329a:	d0 40       	sbci	r29, 0x00	; 0
    329c:	cd 56       	subi	r28, 0x6D	; 109
    329e:	df 4f       	sbci	r29, 0xFF	; 255
    32a0:	88 83       	st	Y, r24
    32a2:	c3 59       	subi	r28, 0x93	; 147
    32a4:	d0 40       	sbci	r29, 0x00	; 0
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    32a6:	60 91 cd 29 	lds	r22, 0x29CD	; 0x8029cd <sSensorDataSnapshot+0x64>
    32aa:	70 91 ce 29 	lds	r23, 0x29CE	; 0x8029ce <sSensorDataSnapshot+0x65>
    32ae:	80 91 cf 29 	lds	r24, 0x29CF	; 0x8029cf <sSensorDataSnapshot+0x66>
    32b2:	90 91 d0 29 	lds	r25, 0x29D0	; 0x8029d0 <sSensorDataSnapshot+0x67>
    32b6:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    32ba:	20 e0       	ldi	r18, 0x00	; 0
    32bc:	30 e4       	ldi	r19, 0x40	; 64
    32be:	4c e9       	ldi	r20, 0x9C	; 156
    32c0:	55 e4       	ldi	r21, 0x45	; 69
    32c2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    32c6:	c0 54       	subi	r28, 0x40	; 64
    32c8:	df 4f       	sbci	r29, 0xFF	; 255
    32ca:	68 83       	st	Y, r22
    32cc:	c0 5c       	subi	r28, 0xC0	; 192
    32ce:	d0 40       	sbci	r29, 0x00	; 0
    32d0:	cf 53       	subi	r28, 0x3F	; 63
    32d2:	df 4f       	sbci	r29, 0xFF	; 255
    32d4:	78 83       	st	Y, r23
    32d6:	c1 5c       	subi	r28, 0xC1	; 193
    32d8:	d0 40       	sbci	r29, 0x00	; 0
    32da:	ce 53       	subi	r28, 0x3E	; 62
    32dc:	df 4f       	sbci	r29, 0xFF	; 255
    32de:	88 83       	st	Y, r24
    32e0:	c2 5c       	subi	r28, 0xC2	; 194
    32e2:	d0 40       	sbci	r29, 0x00	; 0
    32e4:	cd 53       	subi	r28, 0x3D	; 61
    32e6:	df 4f       	sbci	r29, 0xFF	; 255
    32e8:	98 83       	st	Y, r25
    32ea:	c3 5c       	subi	r28, 0xC3	; 195
    32ec:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selFPState,
    32ee:	20 91 ca 29 	lds	r18, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x61>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	21 11       	cpse	r18, r1
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	cc 56       	subi	r28, 0x6C	; 108
    32fc:	df 4f       	sbci	r29, 0xFF	; 255
    32fe:	98 83       	st	Y, r25
    3300:	c4 59       	subi	r28, 0x94	; 148
    3302:	d0 40       	sbci	r29, 0x00	; 0
    3304:	cb 56       	subi	r28, 0x6B	; 107
    3306:	df 4f       	sbci	r29, 0xFF	; 255
    3308:	88 83       	st	Y, r24
    330a:	c5 59       	subi	r28, 0x95	; 149
    330c:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
		((float) sSensorDataSnapshot.adc.h2a.idealDiodeTimestamp / CYCLES_PER_SECOND),
    330e:	60 91 92 29 	lds	r22, 0x2992	; 0x802992 <sSensorDataSnapshot+0x29>
    3312:	70 91 93 29 	lds	r23, 0x2993	; 0x802993 <sSensorDataSnapshot+0x2a>
    3316:	80 91 94 29 	lds	r24, 0x2994	; 0x802994 <sSensorDataSnapshot+0x2b>
    331a:	90 91 95 29 	lds	r25, 0x2995	; 0x802995 <sSensorDataSnapshot+0x2c>
    331e:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    3322:	20 e0       	ldi	r18, 0x00	; 0
    3324:	30 e4       	ldi	r19, 0x40	; 64
    3326:	4c e9       	ldi	r20, 0x9C	; 156
    3328:	55 e4       	ldi	r21, 0x45	; 69
    332a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    332e:	cc 53       	subi	r28, 0x3C	; 60
    3330:	df 4f       	sbci	r29, 0xFF	; 255
    3332:	68 83       	st	Y, r22
    3334:	c4 5c       	subi	r28, 0xC4	; 196
    3336:	d0 40       	sbci	r29, 0x00	; 0
    3338:	cb 53       	subi	r28, 0x3B	; 59
    333a:	df 4f       	sbci	r29, 0xFF	; 255
    333c:	78 83       	st	Y, r23
    333e:	c5 5c       	subi	r28, 0xC5	; 197
    3340:	d0 40       	sbci	r29, 0x00	; 0
    3342:	ca 53       	subi	r28, 0x3A	; 58
    3344:	df 4f       	sbci	r29, 0xFF	; 255
    3346:	88 83       	st	Y, r24
    3348:	c6 5c       	subi	r28, 0xC6	; 198
    334a:	d0 40       	sbci	r29, 0x00	; 0
    334c:	c9 53       	subi	r28, 0x39	; 57
    334e:	df 4f       	sbci	r29, 0xFF	; 255
    3350:	98 83       	st	Y, r25
    3352:	c7 5c       	subi	r28, 0xC7	; 199
    3354:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
		(int16_t)!!sSensorDataSnapshot.adc.h2a.idealDiodeState,
    3356:	20 91 91 29 	lds	r18, 0x2991	; 0x802991 <sSensorDataSnapshot+0x28>

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	21 11       	cpse	r18, r1
    3360:	01 c0       	rjmp	.+2      	; 0x3364 <PrintCSV_H2A+0x278>
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	ca 56       	subi	r28, 0x6A	; 106
    3366:	df 4f       	sbci	r29, 0xFF	; 255
    3368:	98 83       	st	Y, r25
    336a:	c6 59       	subi	r28, 0x96	; 150
    336c:	d0 40       	sbci	r29, 0x00	; 0
    336e:	c9 56       	subi	r28, 0x69	; 105
    3370:	df 4f       	sbci	r29, 0xFF	; 255
    3372:	88 83       	st	Y, r24
    3374:	c7 59       	subi	r28, 0x97	; 151
    3376:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * H2A_WHEEL_METER_PER_PULSE,
    3378:	60 91 c6 29 	lds	r22, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5d>
    337c:	70 91 c7 29 	lds	r23, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5e>
    3380:	80 91 c8 29 	lds	r24, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5f>
    3384:	90 91 c9 29 	lds	r25, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x60>
    3388:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    338c:	27 eb       	ldi	r18, 0xB7	; 183
    338e:	33 ef       	ldi	r19, 0xF3	; 243
    3390:	4d e7       	ldi	r20, 0x7D	; 125
    3392:	5d e3       	ldi	r21, 0x3D	; 61
    3394:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3398:	c8 53       	subi	r28, 0x38	; 56
    339a:	df 4f       	sbci	r29, 0xFF	; 255
    339c:	68 83       	st	Y, r22
    339e:	c8 5c       	subi	r28, 0xC8	; 200
    33a0:	d0 40       	sbci	r29, 0x00	; 0
    33a2:	c7 53       	subi	r28, 0x37	; 55
    33a4:	df 4f       	sbci	r29, 0xFF	; 255
    33a6:	78 83       	st	Y, r23
    33a8:	c9 5c       	subi	r28, 0xC9	; 201
    33aa:	d0 40       	sbci	r29, 0x00	; 0
    33ac:	c6 53       	subi	r28, 0x36	; 54
    33ae:	df 4f       	sbci	r29, 0xFF	; 255
    33b0:	88 83       	st	Y, r24
    33b2:	ca 5c       	subi	r28, 0xCA	; 202
    33b4:	d0 40       	sbci	r29, 0x00	; 0
    33b6:	c5 53       	subi	r28, 0x35	; 53
    33b8:	df 4f       	sbci	r29, 0xFF	; 255
    33ba:	98 83       	st	Y, r25
    33bc:	cb 5c       	subi	r28, 0xCB	; 203
    33be:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, H2A_WHEEL_METER_PER_PULSE),
    33c0:	60 91 c2 29 	lds	r22, 0x29C2	; 0x8029c2 <sSensorDataSnapshot+0x59>
    33c4:	70 91 c3 29 	lds	r23, 0x29C3	; 0x8029c3 <sSensorDataSnapshot+0x5a>
    33c8:	80 91 c4 29 	lds	r24, 0x29C4	; 0x8029c4 <sSensorDataSnapshot+0x5b>
    33cc:	90 91 c5 29 	lds	r25, 0x29C5	; 0x8029c5 <sSensorDataSnapshot+0x5c>

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    33d0:	61 15       	cp	r22, r1
    33d2:	71 05       	cpc	r23, r1
    33d4:	81 05       	cpc	r24, r1
    33d6:	91 05       	cpc	r25, r1
    33d8:	09 f1       	breq	.+66     	; 0x341c <PrintCSV_H2A+0x330>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    33da:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    33de:	20 e0       	ldi	r18, 0x00	; 0
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	40 e8       	ldi	r20, 0x80	; 128
    33e4:	57 e3       	ldi	r21, 0x37	; 55
    33e6:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    33ea:	9b 01       	movw	r18, r22
    33ec:	ac 01       	movw	r20, r24
    33ee:	60 e0       	ldi	r22, 0x00	; 0
    33f0:	70 e8       	ldi	r23, 0x80	; 128
    33f2:	8b e8       	ldi	r24, 0x8B	; 139
    33f4:	94 e4       	ldi	r25, 0x44	; 68
    33f6:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    33fa:	69 83       	std	Y+1, r22	; 0x01
    33fc:	07 2f       	mov	r16, r23
    33fe:	38 2e       	mov	r3, r24
    3400:	29 2e       	mov	r2, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e8       	ldi	r20, 0x80	; 128
    3408:	5f e3       	ldi	r21, 0x3F	; 63
    340a:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <__cmpsf2>
    340e:	88 23       	and	r24, r24
    3410:	4c f4       	brge	.+18     	; 0x3424 <PrintCSV_H2A+0x338>
		res = 0.0f;
    3412:	19 82       	std	Y+1, r1	; 0x01
    3414:	00 e0       	ldi	r16, 0x00	; 0
    3416:	31 2c       	mov	r3, r1
    3418:	21 2c       	mov	r2, r1
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <PrintCSV_H2A+0x338>
	}
	else
	res = 0.0f;
    341c:	19 82       	std	Y+1, r1	; 0x01
    341e:	00 e0       	ldi	r16, 0x00	; 0
    3420:	31 2c       	mov	r3, r1
    3422:	21 2c       	mov	r2, r1
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    3424:	e9 e6       	ldi	r30, 0x69	; 105
    3426:	f9 e2       	ldi	r31, 0x29	; 41
    3428:	60 91 db 29 	lds	r22, 0x29DB	; 0x8029db <sSensorDataSnapshot+0x72>
    342c:	70 91 dc 29 	lds	r23, 0x29DC	; 0x8029dc <sSensorDataSnapshot+0x73>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    3430:	20 91 d9 29 	lds	r18, 0x29D9	; 0x8029d9 <sSensorDataSnapshot+0x70>
    3434:	30 91 da 29 	lds	r19, 0x29DA	; 0x8029da <sSensorDataSnapshot+0x71>
    3438:	2a 83       	std	Y+2, r18	; 0x02
    343a:	3b 83       	std	Y+3, r19	; 0x03
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    343c:	c5 a4       	ldd	r12, Z+45	; 0x2d
    343e:	d6 a4       	ldd	r13, Z+46	; 0x2e
    3440:	e7 a4       	ldd	r14, Z+47	; 0x2f
    3442:	f0 a8       	ldd	r15, Z+48	; 0x30
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    3444:	aa eb       	ldi	r26, 0xBA	; 186
    3446:	b9 e2       	ldi	r27, 0x29	; 41
    3448:	3c 91       	ld	r19, X
    344a:	c8 56       	subi	r28, 0x68	; 104
    344c:	df 4f       	sbci	r29, 0xFF	; 255
    344e:	38 83       	st	Y, r19
    3450:	c8 59       	subi	r28, 0x98	; 152
    3452:	d0 40       	sbci	r29, 0x00	; 0
    3454:	11 96       	adiw	r26, 0x01	; 1
    3456:	4c 91       	ld	r20, X
    3458:	11 97       	sbiw	r26, 0x01	; 1
    345a:	c7 56       	subi	r28, 0x67	; 103
    345c:	df 4f       	sbci	r29, 0xFF	; 255
    345e:	48 83       	st	Y, r20
    3460:	c9 59       	subi	r28, 0x99	; 153
    3462:	d0 40       	sbci	r29, 0x00	; 0
    3464:	12 96       	adiw	r26, 0x02	; 2
    3466:	5c 91       	ld	r21, X
    3468:	12 97       	sbiw	r26, 0x02	; 2
    346a:	c6 56       	subi	r28, 0x66	; 102
    346c:	df 4f       	sbci	r29, 0xFF	; 255
    346e:	58 83       	st	Y, r21
    3470:	ca 59       	subi	r28, 0x9A	; 154
    3472:	d0 40       	sbci	r29, 0x00	; 0
    3474:	13 96       	adiw	r26, 0x03	; 3
    3476:	8c 91       	ld	r24, X
    3478:	13 97       	sbiw	r26, 0x03	; 3
    347a:	c5 56       	subi	r28, 0x65	; 101
    347c:	df 4f       	sbci	r29, 0xFF	; 255
    347e:	88 83       	st	Y, r24
    3480:	cb 59       	subi	r28, 0x9B	; 155
    3482:	d0 40       	sbci	r29, 0x00	; 0
    3484:	14 96       	adiw	r26, 0x04	; 4
    3486:	9c 91       	ld	r25, X
    3488:	14 97       	sbiw	r26, 0x04	; 4
    348a:	c4 56       	subi	r28, 0x64	; 100
    348c:	df 4f       	sbci	r29, 0xFF	; 255
    348e:	98 83       	st	Y, r25
    3490:	cc 59       	subi	r28, 0x9C	; 156
    3492:	d0 40       	sbci	r29, 0x00	; 0
    3494:	15 96       	adiw	r26, 0x05	; 5
    3496:	2c 91       	ld	r18, X
    3498:	15 97       	sbiw	r26, 0x05	; 5
    349a:	c3 56       	subi	r28, 0x63	; 99
    349c:	df 4f       	sbci	r29, 0xFF	; 255
    349e:	28 83       	st	Y, r18
    34a0:	cd 59       	subi	r28, 0x9D	; 157
    34a2:	d0 40       	sbci	r29, 0x00	; 0
    34a4:	16 96       	adiw	r26, 0x06	; 6
    34a6:	3c 91       	ld	r19, X
    34a8:	16 97       	sbiw	r26, 0x06	; 6
    34aa:	c2 56       	subi	r28, 0x62	; 98
    34ac:	df 4f       	sbci	r29, 0xFF	; 255
    34ae:	38 83       	st	Y, r19
    34b0:	ce 59       	subi	r28, 0x9E	; 158
    34b2:	d0 40       	sbci	r29, 0x00	; 0
    34b4:	17 96       	adiw	r26, 0x07	; 7
    34b6:	4c 91       	ld	r20, X
    34b8:	c1 56       	subi	r28, 0x61	; 97
    34ba:	df 4f       	sbci	r29, 0xFF	; 255
    34bc:	48 83       	st	Y, r20
    34be:	cf 59       	subi	r28, 0x9F	; 159
    34c0:	d0 40       	sbci	r29, 0x00	; 0
    34c2:	40 90 0a 2a 	lds	r4, 0x2A0A	; 0x802a0a <sCal+0x28>
    34c6:	50 90 0b 2a 	lds	r5, 0x2A0B	; 0x802a0b <sCal+0x29>
    34ca:	60 90 0c 2a 	lds	r6, 0x2A0C	; 0x802a0c <sCal+0x2a>
    34ce:	70 90 0d 2a 	lds	r7, 0x2A0D	; 0x802a0d <sCal+0x2b>
    34d2:	80 90 0e 2a 	lds	r8, 0x2A0E	; 0x802a0e <sCal+0x2c>
    34d6:	90 90 0f 2a 	lds	r9, 0x2A0F	; 0x802a0f <sCal+0x2d>
    34da:	a0 90 10 2a 	lds	r10, 0x2A10	; 0x802a10 <sCal+0x2e>
    34de:	b0 90 11 2a 	lds	r11, 0x2A11	; 0x802a11 <sCal+0x2f>
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    34e2:	80 91 ae 29 	lds	r24, 0x29AE	; 0x8029ae <sSensorDataSnapshot+0x45>
    34e6:	90 91 af 29 	lds	r25, 0x29AF	; 0x8029af <sSensorDataSnapshot+0x46>
    34ea:	a0 91 b0 29 	lds	r26, 0x29B0	; 0x8029b0 <sSensorDataSnapshot+0x47>
    34ee:	b0 91 b1 29 	lds	r27, 0x29B1	; 0x8029b1 <sSensorDataSnapshot+0x48>
    34f2:	8c 83       	std	Y+4, r24	; 0x04
    34f4:	9d 83       	std	Y+5, r25	; 0x05
    34f6:	ae 83       	std	Y+6, r26	; 0x06
    34f8:	bf 83       	std	Y+7, r27	; 0x07
    34fa:	20 91 0a 2a 	lds	r18, 0x2A0A	; 0x802a0a <sCal+0x28>
    34fe:	30 91 0b 2a 	lds	r19, 0x2A0B	; 0x802a0b <sCal+0x29>
    3502:	40 91 0c 2a 	lds	r20, 0x2A0C	; 0x802a0c <sCal+0x2a>
    3506:	50 91 0d 2a 	lds	r21, 0x2A0D	; 0x802a0d <sCal+0x2b>
    350a:	28 87       	std	Y+8, r18	; 0x08
    350c:	39 87       	std	Y+9, r19	; 0x09
    350e:	4a 87       	std	Y+10, r20	; 0x0a
    3510:	5b 87       	std	Y+11, r21	; 0x0b
    3512:	80 91 0e 2a 	lds	r24, 0x2A0E	; 0x802a0e <sCal+0x2c>
    3516:	90 91 0f 2a 	lds	r25, 0x2A0F	; 0x802a0f <sCal+0x2d>
    351a:	a0 91 10 2a 	lds	r26, 0x2A10	; 0x802a10 <sCal+0x2e>
    351e:	b0 91 11 2a 	lds	r27, 0x2A11	; 0x802a11 <sCal+0x2f>
    3522:	8c 87       	std	Y+12, r24	; 0x0c
    3524:	9d 87       	std	Y+13, r25	; 0x0d
    3526:	ae 87       	std	Y+14, r26	; 0x0e
    3528:	bf 87       	std	Y+15, r27	; 0x0f
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    352a:	20 91 a6 29 	lds	r18, 0x29A6	; 0x8029a6 <sSensorDataSnapshot+0x3d>
    352e:	30 91 a7 29 	lds	r19, 0x29A7	; 0x8029a7 <sSensorDataSnapshot+0x3e>
    3532:	40 91 a8 29 	lds	r20, 0x29A8	; 0x8029a8 <sSensorDataSnapshot+0x3f>
    3536:	50 91 a9 29 	lds	r21, 0x29A9	; 0x8029a9 <sSensorDataSnapshot+0x40>
    353a:	28 8b       	std	Y+16, r18	; 0x10
    353c:	39 8b       	std	Y+17, r19	; 0x11
    353e:	4a 8b       	std	Y+18, r20	; 0x12
    3540:	5b 8b       	std	Y+19, r21	; 0x13
    3542:	80 91 0e 2a 	lds	r24, 0x2A0E	; 0x802a0e <sCal+0x2c>
    3546:	90 91 0f 2a 	lds	r25, 0x2A0F	; 0x802a0f <sCal+0x2d>
    354a:	a0 91 10 2a 	lds	r26, 0x2A10	; 0x802a10 <sCal+0x2e>
    354e:	b0 91 11 2a 	lds	r27, 0x2A11	; 0x802a11 <sCal+0x2f>
    3552:	8c 8b       	std	Y+20, r24	; 0x14
    3554:	9d 8b       	std	Y+21, r25	; 0x15
    3556:	ae 8b       	std	Y+22, r26	; 0x16
    3558:	bf 8b       	std	Y+23, r27	; 0x17
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    355a:	21 ad       	ldd	r18, Z+57	; 0x39
    355c:	32 ad       	ldd	r19, Z+58	; 0x3a
    355e:	43 ad       	ldd	r20, Z+59	; 0x3b
    3560:	54 ad       	ldd	r21, Z+60	; 0x3c
    3562:	28 8f       	std	Y+24, r18	; 0x18
    3564:	39 8f       	std	Y+25, r19	; 0x19
    3566:	4a 8f       	std	Y+26, r20	; 0x1a
    3568:	5b 8f       	std	Y+27, r21	; 0x1b
    356a:	80 91 0a 2a 	lds	r24, 0x2A0A	; 0x802a0a <sCal+0x28>
    356e:	90 91 0b 2a 	lds	r25, 0x2A0B	; 0x802a0b <sCal+0x29>
    3572:	a0 91 0c 2a 	lds	r26, 0x2A0C	; 0x802a0c <sCal+0x2a>
    3576:	b0 91 0d 2a 	lds	r27, 0x2A0D	; 0x802a0d <sCal+0x2b>
    357a:	8c 8f       	std	Y+28, r24	; 0x1c
    357c:	9d 8f       	std	Y+29, r25	; 0x1d
    357e:	ae 8f       	std	Y+30, r26	; 0x1e
    3580:	bf 8f       	std	Y+31, r27	; 0x1f
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3582:	22 eb       	ldi	r18, 0xB2	; 178
    3584:	39 e2       	ldi	r19, 0x29	; 41
    3586:	d9 01       	movw	r26, r18
    3588:	bc 91       	ld	r27, X
    358a:	c0 56       	subi	r28, 0x60	; 96
    358c:	df 4f       	sbci	r29, 0xFF	; 255
    358e:	b8 83       	st	Y, r27
    3590:	c0 5a       	subi	r28, 0xA0	; 160
    3592:	d0 40       	sbci	r29, 0x00	; 0
    3594:	40 91 b3 29 	lds	r20, 0x29B3	; 0x8029b3 <sSensorDataSnapshot+0x4a>
    3598:	cf 55       	subi	r28, 0x5F	; 95
    359a:	df 4f       	sbci	r29, 0xFF	; 255
    359c:	48 83       	st	Y, r20
    359e:	c1 5a       	subi	r28, 0xA1	; 161
    35a0:	d0 40       	sbci	r29, 0x00	; 0
    35a2:	50 91 b4 29 	lds	r21, 0x29B4	; 0x8029b4 <sSensorDataSnapshot+0x4b>
    35a6:	ce 55       	subi	r28, 0x5E	; 94
    35a8:	df 4f       	sbci	r29, 0xFF	; 255
    35aa:	58 83       	st	Y, r21
    35ac:	c2 5a       	subi	r28, 0xA2	; 162
    35ae:	d0 40       	sbci	r29, 0x00	; 0
    35b0:	80 91 b5 29 	lds	r24, 0x29B5	; 0x8029b5 <sSensorDataSnapshot+0x4c>
    35b4:	cd 55       	subi	r28, 0x5D	; 93
    35b6:	df 4f       	sbci	r29, 0xFF	; 255
    35b8:	88 83       	st	Y, r24
    35ba:	c3 5a       	subi	r28, 0xA3	; 163
    35bc:	d0 40       	sbci	r29, 0x00	; 0
    35be:	90 91 b6 29 	lds	r25, 0x29B6	; 0x8029b6 <sSensorDataSnapshot+0x4d>
    35c2:	cc 55       	subi	r28, 0x5C	; 92
    35c4:	df 4f       	sbci	r29, 0xFF	; 255
    35c6:	98 83       	st	Y, r25
    35c8:	c4 5a       	subi	r28, 0xA4	; 164
    35ca:	d0 40       	sbci	r29, 0x00	; 0
    35cc:	a0 91 b7 29 	lds	r26, 0x29B7	; 0x8029b7 <sSensorDataSnapshot+0x4e>
    35d0:	cb 55       	subi	r28, 0x5B	; 91
    35d2:	df 4f       	sbci	r29, 0xFF	; 255
    35d4:	a8 83       	st	Y, r26
    35d6:	c5 5a       	subi	r28, 0xA5	; 165
    35d8:	d0 40       	sbci	r29, 0x00	; 0
    35da:	b0 91 b8 29 	lds	r27, 0x29B8	; 0x8029b8 <sSensorDataSnapshot+0x4f>
    35de:	ca 55       	subi	r28, 0x5A	; 90
    35e0:	df 4f       	sbci	r29, 0xFF	; 255
    35e2:	b8 83       	st	Y, r27
    35e4:	c6 5a       	subi	r28, 0xA6	; 166
    35e6:	d0 40       	sbci	r29, 0x00	; 0
    35e8:	40 91 b9 29 	lds	r20, 0x29B9	; 0x8029b9 <sSensorDataSnapshot+0x50>
    35ec:	c0 53       	subi	r28, 0x30	; 48
    35ee:	df 4f       	sbci	r29, 0xFF	; 255
    35f0:	48 83       	st	Y, r20
    35f2:	c0 5d       	subi	r28, 0xD0	; 208
    35f4:	d0 40       	sbci	r29, 0x00	; 0
    35f6:	80 91 02 2a 	lds	r24, 0x2A02	; 0x802a02 <sCal+0x20>
    35fa:	90 91 03 2a 	lds	r25, 0x2A03	; 0x802a03 <sCal+0x21>
    35fe:	a0 91 04 2a 	lds	r26, 0x2A04	; 0x802a04 <sCal+0x22>
    3602:	b0 91 05 2a 	lds	r27, 0x2A05	; 0x802a05 <sCal+0x23>
    3606:	88 a3       	std	Y+32, r24	; 0x20
    3608:	99 a3       	std	Y+33, r25	; 0x21
    360a:	aa a3       	std	Y+34, r26	; 0x22
    360c:	bb a3       	std	Y+35, r27	; 0x23
    360e:	20 91 06 2a 	lds	r18, 0x2A06	; 0x802a06 <sCal+0x24>
    3612:	30 91 07 2a 	lds	r19, 0x2A07	; 0x802a07 <sCal+0x25>
    3616:	40 91 08 2a 	lds	r20, 0x2A08	; 0x802a08 <sCal+0x26>
    361a:	50 91 09 2a 	lds	r21, 0x2A09	; 0x802a09 <sCal+0x27>
    361e:	2c a3       	std	Y+36, r18	; 0x24
    3620:	3d a3       	std	Y+37, r19	; 0x25
    3622:	4e a3       	std	Y+38, r20	; 0x26
    3624:	5f a3       	std	Y+39, r21	; 0x27
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    3626:	80 91 aa 29 	lds	r24, 0x29AA	; 0x8029aa <sSensorDataSnapshot+0x41>
    362a:	90 91 ab 29 	lds	r25, 0x29AB	; 0x8029ab <sSensorDataSnapshot+0x42>
    362e:	a0 91 ac 29 	lds	r26, 0x29AC	; 0x8029ac <sSensorDataSnapshot+0x43>
    3632:	b0 91 ad 29 	lds	r27, 0x29AD	; 0x8029ad <sSensorDataSnapshot+0x44>
    3636:	88 a7       	std	Y+40, r24	; 0x28
    3638:	99 a7       	std	Y+41, r25	; 0x29
    363a:	aa a7       	std	Y+42, r26	; 0x2a
    363c:	bb a7       	std	Y+43, r27	; 0x2b
    363e:	20 91 02 2a 	lds	r18, 0x2A02	; 0x802a02 <sCal+0x20>
    3642:	30 91 03 2a 	lds	r19, 0x2A03	; 0x802a03 <sCal+0x21>
    3646:	40 91 04 2a 	lds	r20, 0x2A04	; 0x802a04 <sCal+0x22>
    364a:	50 91 05 2a 	lds	r21, 0x2A05	; 0x802a05 <sCal+0x23>
    364e:	2c a7       	std	Y+44, r18	; 0x2c
    3650:	3d a7       	std	Y+45, r19	; 0x2d
    3652:	4e a7       	std	Y+46, r20	; 0x2e
    3654:	5f a7       	std	Y+47, r21	; 0x2f
    3656:	80 91 06 2a 	lds	r24, 0x2A06	; 0x802a06 <sCal+0x24>
    365a:	90 91 07 2a 	lds	r25, 0x2A07	; 0x802a07 <sCal+0x25>
    365e:	a0 91 08 2a 	lds	r26, 0x2A08	; 0x802a08 <sCal+0x26>
    3662:	b0 91 09 2a 	lds	r27, 0x2A09	; 0x802a09 <sCal+0x27>
    3666:	88 ab       	std	Y+48, r24	; 0x30
    3668:	99 ab       	std	Y+49, r25	; 0x31
    366a:	aa ab       	std	Y+50, r26	; 0x32
    366c:	bb ab       	std	Y+51, r27	; 0x33
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    366e:	25 a9       	ldd	r18, Z+53	; 0x35
    3670:	36 a9       	ldd	r19, Z+54	; 0x36
    3672:	47 a9       	ldd	r20, Z+55	; 0x37
    3674:	50 ad       	ldd	r21, Z+56	; 0x38
    3676:	2c ab       	std	Y+52, r18	; 0x34
    3678:	3d ab       	std	Y+53, r19	; 0x35
    367a:	4e ab       	std	Y+54, r20	; 0x36
    367c:	5f ab       	std	Y+55, r21	; 0x37
    367e:	80 91 06 2a 	lds	r24, 0x2A06	; 0x802a06 <sCal+0x24>
    3682:	90 91 07 2a 	lds	r25, 0x2A07	; 0x802a07 <sCal+0x25>
    3686:	a0 91 08 2a 	lds	r26, 0x2A08	; 0x802a08 <sCal+0x26>
    368a:	b0 91 09 2a 	lds	r27, 0x2A09	; 0x802a09 <sCal+0x27>
    368e:	88 af       	std	Y+56, r24	; 0x38
    3690:	99 af       	std	Y+57, r25	; 0x39
    3692:	aa af       	std	Y+58, r26	; 0x3a
    3694:	bb af       	std	Y+59, r27	; 0x3b
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    3696:	21 a9       	ldd	r18, Z+49	; 0x31
    3698:	32 a9       	ldd	r19, Z+50	; 0x32
    369a:	43 a9       	ldd	r20, Z+51	; 0x33
    369c:	54 a9       	ldd	r21, Z+52	; 0x34
    369e:	2c af       	std	Y+60, r18	; 0x3c
    36a0:	3d af       	std	Y+61, r19	; 0x3d
    36a2:	4e af       	std	Y+62, r20	; 0x3e
    36a4:	5f af       	std	Y+63, r21	; 0x3f
    36a6:	80 91 02 2a 	lds	r24, 0x2A02	; 0x802a02 <sCal+0x20>
    36aa:	90 91 03 2a 	lds	r25, 0x2A03	; 0x802a03 <sCal+0x21>
    36ae:	a0 91 04 2a 	lds	r26, 0x2A04	; 0x802a04 <sCal+0x22>
    36b2:	b0 91 05 2a 	lds	r27, 0x2A05	; 0x802a05 <sCal+0x23>
    36b6:	24 96       	adiw	r28, 0x04	; 4
    36b8:	8c af       	std	Y+60, r24	; 0x3c
    36ba:	9d af       	std	Y+61, r25	; 0x3d
    36bc:	ae af       	std	Y+62, r26	; 0x3e
    36be:	bf af       	std	Y+63, r27	; 0x3f
    36c0:	24 97       	sbiw	r28, 0x04	; 4
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.scEnergy / (CYCLES_PER_SECOND * sCal.scVoltageScale * sCal.scCurrentScale), /* Energy */
    36c2:	90 a1       	ldd	r25, Z+32	; 0x20
    36c4:	c9 55       	subi	r28, 0x59	; 89
    36c6:	df 4f       	sbci	r29, 0xFF	; 255
    36c8:	98 83       	st	Y, r25
    36ca:	c7 5a       	subi	r28, 0xA7	; 167
    36cc:	d0 40       	sbci	r29, 0x00	; 0
    36ce:	a1 a1       	ldd	r26, Z+33	; 0x21
    36d0:	c8 55       	subi	r28, 0x58	; 88
    36d2:	df 4f       	sbci	r29, 0xFF	; 255
    36d4:	a8 83       	st	Y, r26
    36d6:	c8 5a       	subi	r28, 0xA8	; 168
    36d8:	d0 40       	sbci	r29, 0x00	; 0
    36da:	b2 a1       	ldd	r27, Z+34	; 0x22
    36dc:	c7 55       	subi	r28, 0x57	; 87
    36de:	df 4f       	sbci	r29, 0xFF	; 255
    36e0:	b8 83       	st	Y, r27
    36e2:	c9 5a       	subi	r28, 0xA9	; 169
    36e4:	d0 40       	sbci	r29, 0x00	; 0
    36e6:	23 a1       	ldd	r18, Z+35	; 0x23
    36e8:	c6 55       	subi	r28, 0x56	; 86
    36ea:	df 4f       	sbci	r29, 0xFF	; 255
    36ec:	28 83       	st	Y, r18
    36ee:	ca 5a       	subi	r28, 0xAA	; 170
    36f0:	d0 40       	sbci	r29, 0x00	; 0
    36f2:	34 a1       	ldd	r19, Z+36	; 0x24
    36f4:	c5 55       	subi	r28, 0x55	; 85
    36f6:	df 4f       	sbci	r29, 0xFF	; 255
    36f8:	38 83       	st	Y, r19
    36fa:	cb 5a       	subi	r28, 0xAB	; 171
    36fc:	d0 40       	sbci	r29, 0x00	; 0
    36fe:	45 a1       	ldd	r20, Z+37	; 0x25
    3700:	c4 55       	subi	r28, 0x54	; 84
    3702:	df 4f       	sbci	r29, 0xFF	; 255
    3704:	48 83       	st	Y, r20
    3706:	cc 5a       	subi	r28, 0xAC	; 172
    3708:	d0 40       	sbci	r29, 0x00	; 0
    370a:	56 a1       	ldd	r21, Z+38	; 0x26
    370c:	c3 55       	subi	r28, 0x53	; 83
    370e:	df 4f       	sbci	r29, 0xFF	; 255
    3710:	58 83       	st	Y, r21
    3712:	cd 5a       	subi	r28, 0xAD	; 173
    3714:	d0 40       	sbci	r29, 0x00	; 0
    3716:	87 a1       	ldd	r24, Z+39	; 0x27
    3718:	cf 52       	subi	r28, 0x2F	; 47
    371a:	df 4f       	sbci	r29, 0xFF	; 255
    371c:	88 83       	st	Y, r24
    371e:	c1 5d       	subi	r28, 0xD1	; 209
    3720:	d0 40       	sbci	r29, 0x00	; 0
    3722:	20 91 f2 29 	lds	r18, 0x29F2	; 0x8029f2 <sCal+0x10>
    3726:	30 91 f3 29 	lds	r19, 0x29F3	; 0x8029f3 <sCal+0x11>
    372a:	40 91 f4 29 	lds	r20, 0x29F4	; 0x8029f4 <sCal+0x12>
    372e:	50 91 f5 29 	lds	r21, 0x29F5	; 0x8029f5 <sCal+0x13>
    3732:	28 96       	adiw	r28, 0x08	; 8
    3734:	2c af       	std	Y+60, r18	; 0x3c
    3736:	3d af       	std	Y+61, r19	; 0x3d
    3738:	4e af       	std	Y+62, r20	; 0x3e
    373a:	5f af       	std	Y+63, r21	; 0x3f
    373c:	28 97       	sbiw	r28, 0x08	; 8
    373e:	80 91 f6 29 	lds	r24, 0x29F6	; 0x8029f6 <sCal+0x14>
    3742:	90 91 f7 29 	lds	r25, 0x29F7	; 0x8029f7 <sCal+0x15>
    3746:	a0 91 f8 29 	lds	r26, 0x29F8	; 0x8029f8 <sCal+0x16>
    374a:	b0 91 f9 29 	lds	r27, 0x29F9	; 0x8029f9 <sCal+0x17>
    374e:	2c 96       	adiw	r28, 0x0c	; 12
    3750:	8c af       	std	Y+60, r24	; 0x3c
    3752:	9d af       	std	Y+61, r25	; 0x3d
    3754:	ae af       	std	Y+62, r26	; 0x3e
    3756:	bf af       	std	Y+63, r27	; 0x3f
    3758:	2c 97       	sbiw	r28, 0x0c	; 12
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
		sSensorDataSnapshot.adc.h2a.scPowerFiltered / (256.0f * sCal.scVoltageScale * sCal.scCurrentScale), /* Power */
    375a:	24 89       	ldd	r18, Z+20	; 0x14
    375c:	35 89       	ldd	r19, Z+21	; 0x15
    375e:	46 89       	ldd	r20, Z+22	; 0x16
    3760:	57 89       	ldd	r21, Z+23	; 0x17
    3762:	60 96       	adiw	r28, 0x10	; 16
    3764:	2c af       	std	Y+60, r18	; 0x3c
    3766:	3d af       	std	Y+61, r19	; 0x3d
    3768:	4e af       	std	Y+62, r20	; 0x3e
    376a:	5f af       	std	Y+63, r21	; 0x3f
    376c:	60 97       	sbiw	r28, 0x10	; 16
    376e:	80 91 f2 29 	lds	r24, 0x29F2	; 0x8029f2 <sCal+0x10>
    3772:	90 91 f3 29 	lds	r25, 0x29F3	; 0x8029f3 <sCal+0x11>
    3776:	a0 91 f4 29 	lds	r26, 0x29F4	; 0x8029f4 <sCal+0x12>
    377a:	b0 91 f5 29 	lds	r27, 0x29F5	; 0x8029f5 <sCal+0x13>
    377e:	64 96       	adiw	r28, 0x14	; 20
    3780:	8c af       	std	Y+60, r24	; 0x3c
    3782:	9d af       	std	Y+61, r25	; 0x3d
    3784:	ae af       	std	Y+62, r26	; 0x3e
    3786:	bf af       	std	Y+63, r27	; 0x3f
    3788:	64 97       	sbiw	r28, 0x14	; 20
    378a:	20 91 f6 29 	lds	r18, 0x29F6	; 0x8029f6 <sCal+0x14>
    378e:	30 91 f7 29 	lds	r19, 0x29F7	; 0x8029f7 <sCal+0x15>
    3792:	40 91 f8 29 	lds	r20, 0x29F8	; 0x8029f8 <sCal+0x16>
    3796:	50 91 f9 29 	lds	r21, 0x29F9	; 0x8029f9 <sCal+0x17>
    379a:	68 96       	adiw	r28, 0x18	; 24
    379c:	2c af       	std	Y+60, r18	; 0x3c
    379e:	3d af       	std	Y+61, r19	; 0x3d
    37a0:	4e af       	std	Y+62, r20	; 0x3e
    37a2:	5f af       	std	Y+63, r21	; 0x3f
    37a4:	68 97       	sbiw	r28, 0x18	; 24
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
		sSensorDataSnapshot.adc.h2a.scCurrentFiltered / (65536.0f * sCal.scCurrentScale),
    37a6:	84 85       	ldd	r24, Z+12	; 0x0c
    37a8:	95 85       	ldd	r25, Z+13	; 0x0d
    37aa:	a6 85       	ldd	r26, Z+14	; 0x0e
    37ac:	b7 85       	ldd	r27, Z+15	; 0x0f
    37ae:	6c 96       	adiw	r28, 0x1c	; 28
    37b0:	8c af       	std	Y+60, r24	; 0x3c
    37b2:	9d af       	std	Y+61, r25	; 0x3d
    37b4:	ae af       	std	Y+62, r26	; 0x3e
    37b6:	bf af       	std	Y+63, r27	; 0x3f
    37b8:	6c 97       	sbiw	r28, 0x1c	; 28
    37ba:	20 91 f6 29 	lds	r18, 0x29F6	; 0x8029f6 <sCal+0x14>
    37be:	30 91 f7 29 	lds	r19, 0x29F7	; 0x8029f7 <sCal+0x15>
    37c2:	40 91 f8 29 	lds	r20, 0x29F8	; 0x8029f8 <sCal+0x16>
    37c6:	50 91 f9 29 	lds	r21, 0x29F9	; 0x8029f9 <sCal+0x17>
    37ca:	a0 96       	adiw	r28, 0x20	; 32
    37cc:	2c af       	std	Y+60, r18	; 0x3c
    37ce:	3d af       	std	Y+61, r19	; 0x3d
    37d0:	4e af       	std	Y+62, r20	; 0x3e
    37d2:	5f af       	std	Y+63, r21	; 0x3f
    37d4:	a0 97       	sbiw	r28, 0x20	; 32
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
		sSensorDataSnapshot.adc.h2a.scVoltageFiltered / (65536.0f * sCal.scVoltageScale),
    37d6:	80 85       	ldd	r24, Z+8	; 0x08
    37d8:	91 85       	ldd	r25, Z+9	; 0x09
    37da:	a2 85       	ldd	r26, Z+10	; 0x0a
    37dc:	b3 85       	ldd	r27, Z+11	; 0x0b
    37de:	a4 96       	adiw	r28, 0x24	; 36
    37e0:	8c af       	std	Y+60, r24	; 0x3c
    37e2:	9d af       	std	Y+61, r25	; 0x3d
    37e4:	ae af       	std	Y+62, r26	; 0x3e
    37e6:	bf af       	std	Y+63, r27	; 0x3f
    37e8:	a4 97       	sbiw	r28, 0x24	; 36
    37ea:	20 91 f2 29 	lds	r18, 0x29F2	; 0x8029f2 <sCal+0x10>
    37ee:	30 91 f3 29 	lds	r19, 0x29F3	; 0x8029f3 <sCal+0x11>
    37f2:	40 91 f4 29 	lds	r20, 0x29F4	; 0x8029f4 <sCal+0x12>
    37f6:	50 91 f5 29 	lds	r21, 0x29F5	; 0x8029f5 <sCal+0x13>
    37fa:	a8 96       	adiw	r28, 0x28	; 40
    37fc:	2c af       	std	Y+60, r18	; 0x3c
    37fe:	3d af       	std	Y+61, r19	; 0x3d
    3800:	4e af       	std	Y+62, r20	; 0x3e
    3802:	5f af       	std	Y+63, r21	; 0x3f
    3804:	a8 97       	sbiw	r28, 0x28	; 40
	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
		sSensorDataSnapshot.adc.h2a.fcEnergy / (CYCLES_PER_SECOND * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Energy */
    3806:	30 8d       	ldd	r19, Z+24	; 0x18
    3808:	c2 55       	subi	r28, 0x52	; 82
    380a:	df 4f       	sbci	r29, 0xFF	; 255
    380c:	38 83       	st	Y, r19
    380e:	ce 5a       	subi	r28, 0xAE	; 174
    3810:	d0 40       	sbci	r29, 0x00	; 0
    3812:	41 8d       	ldd	r20, Z+25	; 0x19
    3814:	c1 55       	subi	r28, 0x51	; 81
    3816:	df 4f       	sbci	r29, 0xFF	; 255
    3818:	48 83       	st	Y, r20
    381a:	cf 5a       	subi	r28, 0xAF	; 175
    381c:	d0 40       	sbci	r29, 0x00	; 0
    381e:	52 8d       	ldd	r21, Z+26	; 0x1a
    3820:	c0 55       	subi	r28, 0x50	; 80
    3822:	df 4f       	sbci	r29, 0xFF	; 255
    3824:	58 83       	st	Y, r21
    3826:	c0 5b       	subi	r28, 0xB0	; 176
    3828:	d0 40       	sbci	r29, 0x00	; 0
    382a:	83 8d       	ldd	r24, Z+27	; 0x1b
    382c:	cf 54       	subi	r28, 0x4F	; 79
    382e:	df 4f       	sbci	r29, 0xFF	; 255
    3830:	88 83       	st	Y, r24
    3832:	c1 5b       	subi	r28, 0xB1	; 177
    3834:	d0 40       	sbci	r29, 0x00	; 0
    3836:	94 8d       	ldd	r25, Z+28	; 0x1c
    3838:	ce 54       	subi	r28, 0x4E	; 78
    383a:	df 4f       	sbci	r29, 0xFF	; 255
    383c:	98 83       	st	Y, r25
    383e:	c2 5b       	subi	r28, 0xB2	; 178
    3840:	d0 40       	sbci	r29, 0x00	; 0
    3842:	a5 8d       	ldd	r26, Z+29	; 0x1d
    3844:	cd 54       	subi	r28, 0x4D	; 77
    3846:	df 4f       	sbci	r29, 0xFF	; 255
    3848:	a8 83       	st	Y, r26
    384a:	c3 5b       	subi	r28, 0xB3	; 179
    384c:	d0 40       	sbci	r29, 0x00	; 0
    384e:	b6 8d       	ldd	r27, Z+30	; 0x1e
    3850:	cc 54       	subi	r28, 0x4C	; 76
    3852:	df 4f       	sbci	r29, 0xFF	; 255
    3854:	b8 83       	st	Y, r27
    3856:	c4 5b       	subi	r28, 0xB4	; 180
    3858:	d0 40       	sbci	r29, 0x00	; 0
    385a:	27 8d       	ldd	r18, Z+31	; 0x1f
    385c:	cb 54       	subi	r28, 0x4B	; 75
    385e:	df 4f       	sbci	r29, 0xFF	; 255
    3860:	28 83       	st	Y, r18
    3862:	c5 5b       	subi	r28, 0xB5	; 181
    3864:	d0 40       	sbci	r29, 0x00	; 0
    3866:	80 91 ea 29 	lds	r24, 0x29EA	; 0x8029ea <sCal+0x8>
    386a:	90 91 eb 29 	lds	r25, 0x29EB	; 0x8029eb <sCal+0x9>
    386e:	a0 91 ec 29 	lds	r26, 0x29EC	; 0x8029ec <sCal+0xa>
    3872:	b0 91 ed 29 	lds	r27, 0x29ED	; 0x8029ed <sCal+0xb>
    3876:	ac 96       	adiw	r28, 0x2c	; 44
    3878:	8c af       	std	Y+60, r24	; 0x3c
    387a:	9d af       	std	Y+61, r25	; 0x3d
    387c:	ae af       	std	Y+62, r26	; 0x3e
    387e:	bf af       	std	Y+63, r27	; 0x3f
    3880:	ac 97       	sbiw	r28, 0x2c	; 44
    3882:	20 91 ee 29 	lds	r18, 0x29EE	; 0x8029ee <sCal+0xc>
    3886:	30 91 ef 29 	lds	r19, 0x29EF	; 0x8029ef <sCal+0xd>
    388a:	40 91 f0 29 	lds	r20, 0x29F0	; 0x8029f0 <sCal+0xe>
    388e:	50 91 f1 29 	lds	r21, 0x29F1	; 0x8029f1 <sCal+0xf>
    3892:	e0 96       	adiw	r28, 0x30	; 48
    3894:	2c af       	std	Y+60, r18	; 0x3c
    3896:	3d af       	std	Y+61, r19	; 0x3d
    3898:	4e af       	std	Y+62, r20	; 0x3e
    389a:	5f af       	std	Y+63, r21	; 0x3f
    389c:	e0 97       	sbiw	r28, 0x30	; 48

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
		sSensorDataSnapshot.adc.h2a.fcPowerFiltered / (256.0f * sCal.fcVoltageScale * sCal.fcCurrentScale), /* Power */
    389e:	80 89       	ldd	r24, Z+16	; 0x10
    38a0:	91 89       	ldd	r25, Z+17	; 0x11
    38a2:	a2 89       	ldd	r26, Z+18	; 0x12
    38a4:	b3 89       	ldd	r27, Z+19	; 0x13
    38a6:	e4 96       	adiw	r28, 0x34	; 52
    38a8:	8c af       	std	Y+60, r24	; 0x3c
    38aa:	9d af       	std	Y+61, r25	; 0x3d
    38ac:	ae af       	std	Y+62, r26	; 0x3e
    38ae:	bf af       	std	Y+63, r27	; 0x3f
    38b0:	e4 97       	sbiw	r28, 0x34	; 52
    38b2:	20 91 ea 29 	lds	r18, 0x29EA	; 0x8029ea <sCal+0x8>
    38b6:	30 91 eb 29 	lds	r19, 0x29EB	; 0x8029eb <sCal+0x9>
    38ba:	40 91 ec 29 	lds	r20, 0x29EC	; 0x8029ec <sCal+0xa>
    38be:	50 91 ed 29 	lds	r21, 0x29ED	; 0x8029ed <sCal+0xb>
    38c2:	e8 96       	adiw	r28, 0x38	; 56
    38c4:	2c af       	std	Y+60, r18	; 0x3c
    38c6:	3d af       	std	Y+61, r19	; 0x3d
    38c8:	4e af       	std	Y+62, r20	; 0x3e
    38ca:	5f af       	std	Y+63, r21	; 0x3f
    38cc:	e8 97       	sbiw	r28, 0x38	; 56
    38ce:	80 91 ee 29 	lds	r24, 0x29EE	; 0x8029ee <sCal+0xc>
    38d2:	90 91 ef 29 	lds	r25, 0x29EF	; 0x8029ef <sCal+0xd>
    38d6:	a0 91 f0 29 	lds	r26, 0x29F0	; 0x8029f0 <sCal+0xe>
    38da:	b0 91 f1 29 	lds	r27, 0x29F1	; 0x8029f1 <sCal+0xf>
    38de:	ec 96       	adiw	r28, 0x3c	; 60
    38e0:	8c af       	std	Y+60, r24	; 0x3c
    38e2:	9d af       	std	Y+61, r25	; 0x3d
    38e4:	ae af       	std	Y+62, r26	; 0x3e
    38e6:	bf af       	std	Y+63, r27	; 0x3f
    38e8:	ec 97       	sbiw	r28, 0x3c	; 60
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
		sSensorDataSnapshot.adc.h2a.fcCurrentFiltered / (65536.0f * sCal.fcCurrentScale),
    38ea:	24 81       	ldd	r18, Z+4	; 0x04
    38ec:	35 81       	ldd	r19, Z+5	; 0x05
    38ee:	46 81       	ldd	r20, Z+6	; 0x06
    38f0:	57 81       	ldd	r21, Z+7	; 0x07
    38f2:	c4 58       	subi	r28, 0x84	; 132
    38f4:	df 4f       	sbci	r29, 0xFF	; 255
    38f6:	28 83       	st	Y, r18
    38f8:	39 83       	std	Y+1, r19	; 0x01
    38fa:	4a 83       	std	Y+2, r20	; 0x02
    38fc:	5b 83       	std	Y+3, r21	; 0x03
    38fe:	cc 57       	subi	r28, 0x7C	; 124
    3900:	d0 40       	sbci	r29, 0x00	; 0
    3902:	80 91 ee 29 	lds	r24, 0x29EE	; 0x8029ee <sCal+0xc>
    3906:	90 91 ef 29 	lds	r25, 0x29EF	; 0x8029ef <sCal+0xd>
    390a:	a0 91 f0 29 	lds	r26, 0x29F0	; 0x8029f0 <sCal+0xe>
    390e:	b0 91 f1 29 	lds	r27, 0x29F1	; 0x8029f1 <sCal+0xf>
    3912:	c0 58       	subi	r28, 0x80	; 128
    3914:	df 4f       	sbci	r29, 0xFF	; 255
    3916:	88 83       	st	Y, r24
    3918:	99 83       	std	Y+1, r25	; 0x01
    391a:	aa 83       	std	Y+2, r26	; 0x02
    391c:	bb 83       	std	Y+3, r27	; 0x03
    391e:	c0 58       	subi	r28, 0x80	; 128
    3920:	d0 40       	sbci	r29, 0x00	; 0
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.h2a.fcVoltageFiltered / (65536.0f * sCal.fcVoltageScale),
    3922:	20 81       	ld	r18, Z
    3924:	31 81       	ldd	r19, Z+1	; 0x01
    3926:	42 81       	ldd	r20, Z+2	; 0x02
    3928:	53 81       	ldd	r21, Z+3	; 0x03
    392a:	cc 57       	subi	r28, 0x7C	; 124
    392c:	df 4f       	sbci	r29, 0xFF	; 255
    392e:	28 83       	st	Y, r18
    3930:	39 83       	std	Y+1, r19	; 0x01
    3932:	4a 83       	std	Y+2, r20	; 0x02
    3934:	5b 83       	std	Y+3, r21	; 0x03
    3936:	c4 58       	subi	r28, 0x84	; 132
    3938:	d0 40       	sbci	r29, 0x00	; 0
    393a:	80 91 ea 29 	lds	r24, 0x29EA	; 0x8029ea <sCal+0x8>
    393e:	90 91 eb 29 	lds	r25, 0x29EB	; 0x8029eb <sCal+0x9>
    3942:	a0 91 ec 29 	lds	r26, 0x29EC	; 0x8029ec <sCal+0xa>
    3946:	b0 91 ed 29 	lds	r27, 0x29ED	; 0x8029ed <sCal+0xb>
    394a:	c8 57       	subi	r28, 0x78	; 120
    394c:	df 4f       	sbci	r29, 0xFF	; 255
    394e:	88 83       	st	Y, r24
    3950:	99 83       	std	Y+1, r25	; 0x01
    3952:	aa 83       	std	Y+2, r26	; 0x02
    3954:	bb 83       	std	Y+3, r27	; 0x03
    3956:	c8 58       	subi	r28, 0x88	; 136
    3958:	d0 40       	sbci	r29, 0x00	; 0
void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    395a:	20 91 65 29 	lds	r18, 0x2965	; 0x802965 <sSessionCycleCountSnapshot>
    395e:	30 91 66 29 	lds	r19, 0x2966	; 0x802966 <sSessionCycleCountSnapshot+0x1>
    3962:	40 91 67 29 	lds	r20, 0x2967	; 0x802967 <sSessionCycleCountSnapshot+0x2>
    3966:	50 91 68 29 	lds	r21, 0x2968	; 0x802968 <sSessionCycleCountSnapshot+0x3>
    396a:	c4 57       	subi	r28, 0x74	; 116
    396c:	df 4f       	sbci	r29, 0xFF	; 255
    396e:	28 83       	st	Y, r18
    3970:	39 83       	std	Y+1, r19	; 0x01
    3972:	4a 83       	std	Y+2, r20	; 0x02
    3974:	5b 83       	std	Y+3, r21	; 0x03
    3976:	cc 58       	subi	r28, 0x8C	; 140
    3978:	d0 40       	sbci	r29, 0x00	; 0

void PrintCSV_H2A(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">03|02:%.4f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.2f,%.0f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    397a:	c5 54       	subi	r28, 0x45	; 69
    397c:	df 4f       	sbci	r29, 0xFF	; 255
    397e:	38 81       	ld	r19, Y
    3980:	cb 5b       	subi	r28, 0xBB	; 187
    3982:	d0 40       	sbci	r29, 0x00	; 0
    3984:	3f 93       	push	r19
    3986:	c6 54       	subi	r28, 0x46	; 70
    3988:	df 4f       	sbci	r29, 0xFF	; 255
    398a:	48 81       	ld	r20, Y
    398c:	ca 5b       	subi	r28, 0xBA	; 186
    398e:	d0 40       	sbci	r29, 0x00	; 0
    3990:	4f 93       	push	r20
    3992:	c7 54       	subi	r28, 0x47	; 71
    3994:	df 4f       	sbci	r29, 0xFF	; 255
    3996:	58 81       	ld	r21, Y
    3998:	c9 5b       	subi	r28, 0xB9	; 185
    399a:	d0 40       	sbci	r29, 0x00	; 0
    399c:	5f 93       	push	r21
    399e:	c8 54       	subi	r28, 0x48	; 72
    39a0:	df 4f       	sbci	r29, 0xFF	; 255
    39a2:	88 81       	ld	r24, Y
    39a4:	c8 5b       	subi	r28, 0xB8	; 184
    39a6:	d0 40       	sbci	r29, 0x00	; 0
    39a8:	8f 93       	push	r24
    39aa:	cf 56       	subi	r28, 0x6F	; 111
    39ac:	df 4f       	sbci	r29, 0xFF	; 255
    39ae:	98 81       	ld	r25, Y
    39b0:	c1 59       	subi	r28, 0x91	; 145
    39b2:	d0 40       	sbci	r29, 0x00	; 0
    39b4:	9f 93       	push	r25
    39b6:	c0 57       	subi	r28, 0x70	; 112
    39b8:	df 4f       	sbci	r29, 0xFF	; 255
    39ba:	a8 81       	ld	r26, Y
    39bc:	c0 59       	subi	r28, 0x90	; 144
    39be:	d0 40       	sbci	r29, 0x00	; 0
    39c0:	af 93       	push	r26
    39c2:	c1 53       	subi	r28, 0x31	; 49
    39c4:	df 4f       	sbci	r29, 0xFF	; 255
    39c6:	b8 81       	ld	r27, Y
    39c8:	cf 5c       	subi	r28, 0xCF	; 207
    39ca:	d0 40       	sbci	r29, 0x00	; 0
    39cc:	bf 93       	push	r27
    39ce:	c2 53       	subi	r28, 0x32	; 50
    39d0:	df 4f       	sbci	r29, 0xFF	; 255
    39d2:	28 81       	ld	r18, Y
    39d4:	ce 5c       	subi	r28, 0xCE	; 206
    39d6:	d0 40       	sbci	r29, 0x00	; 0
    39d8:	2f 93       	push	r18
    39da:	c3 53       	subi	r28, 0x33	; 51
    39dc:	df 4f       	sbci	r29, 0xFF	; 255
    39de:	38 81       	ld	r19, Y
    39e0:	cd 5c       	subi	r28, 0xCD	; 205
    39e2:	d0 40       	sbci	r29, 0x00	; 0
    39e4:	3f 93       	push	r19
    39e6:	c4 53       	subi	r28, 0x34	; 52
    39e8:	df 4f       	sbci	r29, 0xFF	; 255
    39ea:	48 81       	ld	r20, Y
    39ec:	cc 5c       	subi	r28, 0xCC	; 204
    39ee:	d0 40       	sbci	r29, 0x00	; 0
    39f0:	4f 93       	push	r20
    39f2:	1f 92       	push	r1
    39f4:	1f 93       	push	r17
    39f6:	c1 54       	subi	r28, 0x41	; 65
    39f8:	df 4f       	sbci	r29, 0xFF	; 255
    39fa:	58 81       	ld	r21, Y
    39fc:	cf 5b       	subi	r28, 0xBF	; 191
    39fe:	d0 40       	sbci	r29, 0x00	; 0
    3a00:	5f 93       	push	r21
    3a02:	c2 54       	subi	r28, 0x42	; 66
    3a04:	df 4f       	sbci	r29, 0xFF	; 255
    3a06:	88 81       	ld	r24, Y
    3a08:	ce 5b       	subi	r28, 0xBE	; 190
    3a0a:	d0 40       	sbci	r29, 0x00	; 0
    3a0c:	8f 93       	push	r24
    3a0e:	c3 54       	subi	r28, 0x43	; 67
    3a10:	df 4f       	sbci	r29, 0xFF	; 255
    3a12:	98 81       	ld	r25, Y
    3a14:	cd 5b       	subi	r28, 0xBD	; 189
    3a16:	d0 40       	sbci	r29, 0x00	; 0
    3a18:	9f 93       	push	r25
    3a1a:	c4 54       	subi	r28, 0x44	; 68
    3a1c:	df 4f       	sbci	r29, 0xFF	; 255
    3a1e:	a8 81       	ld	r26, Y
    3a20:	cc 5b       	subi	r28, 0xBC	; 188
    3a22:	d0 40       	sbci	r29, 0x00	; 0
    3a24:	af 93       	push	r26
    3a26:	cd 56       	subi	r28, 0x6D	; 109
    3a28:	df 4f       	sbci	r29, 0xFF	; 255
    3a2a:	b8 81       	ld	r27, Y
    3a2c:	c3 59       	subi	r28, 0x93	; 147
    3a2e:	d0 40       	sbci	r29, 0x00	; 0
    3a30:	bf 93       	push	r27
    3a32:	ce 56       	subi	r28, 0x6E	; 110
    3a34:	df 4f       	sbci	r29, 0xFF	; 255
    3a36:	28 81       	ld	r18, Y
    3a38:	c2 59       	subi	r28, 0x92	; 146
    3a3a:	d0 40       	sbci	r29, 0x00	; 0
    3a3c:	2f 93       	push	r18
    3a3e:	cd 53       	subi	r28, 0x3D	; 61
    3a40:	df 4f       	sbci	r29, 0xFF	; 255
    3a42:	38 81       	ld	r19, Y
    3a44:	c3 5c       	subi	r28, 0xC3	; 195
    3a46:	d0 40       	sbci	r29, 0x00	; 0
    3a48:	3f 93       	push	r19
    3a4a:	ce 53       	subi	r28, 0x3E	; 62
    3a4c:	df 4f       	sbci	r29, 0xFF	; 255
    3a4e:	48 81       	ld	r20, Y
    3a50:	c2 5c       	subi	r28, 0xC2	; 194
    3a52:	d0 40       	sbci	r29, 0x00	; 0
    3a54:	4f 93       	push	r20
    3a56:	cf 53       	subi	r28, 0x3F	; 63
    3a58:	df 4f       	sbci	r29, 0xFF	; 255
    3a5a:	58 81       	ld	r21, Y
    3a5c:	c1 5c       	subi	r28, 0xC1	; 193
    3a5e:	d0 40       	sbci	r29, 0x00	; 0
    3a60:	5f 93       	push	r21
    3a62:	c0 54       	subi	r28, 0x40	; 64
    3a64:	df 4f       	sbci	r29, 0xFF	; 255
    3a66:	88 81       	ld	r24, Y
    3a68:	c0 5c       	subi	r28, 0xC0	; 192
    3a6a:	d0 40       	sbci	r29, 0x00	; 0
    3a6c:	8f 93       	push	r24
    3a6e:	cb 56       	subi	r28, 0x6B	; 107
    3a70:	df 4f       	sbci	r29, 0xFF	; 255
    3a72:	98 81       	ld	r25, Y
    3a74:	c5 59       	subi	r28, 0x95	; 149
    3a76:	d0 40       	sbci	r29, 0x00	; 0
    3a78:	9f 93       	push	r25
    3a7a:	cc 56       	subi	r28, 0x6C	; 108
    3a7c:	df 4f       	sbci	r29, 0xFF	; 255
    3a7e:	a8 81       	ld	r26, Y
    3a80:	c4 59       	subi	r28, 0x94	; 148
    3a82:	d0 40       	sbci	r29, 0x00	; 0
    3a84:	af 93       	push	r26
    3a86:	c9 53       	subi	r28, 0x39	; 57
    3a88:	df 4f       	sbci	r29, 0xFF	; 255
    3a8a:	b8 81       	ld	r27, Y
    3a8c:	c7 5c       	subi	r28, 0xC7	; 199
    3a8e:	d0 40       	sbci	r29, 0x00	; 0
    3a90:	bf 93       	push	r27
    3a92:	ca 53       	subi	r28, 0x3A	; 58
    3a94:	df 4f       	sbci	r29, 0xFF	; 255
    3a96:	28 81       	ld	r18, Y
    3a98:	c6 5c       	subi	r28, 0xC6	; 198
    3a9a:	d0 40       	sbci	r29, 0x00	; 0
    3a9c:	2f 93       	push	r18
    3a9e:	cb 53       	subi	r28, 0x3B	; 59
    3aa0:	df 4f       	sbci	r29, 0xFF	; 255
    3aa2:	38 81       	ld	r19, Y
    3aa4:	c5 5c       	subi	r28, 0xC5	; 197
    3aa6:	d0 40       	sbci	r29, 0x00	; 0
    3aa8:	3f 93       	push	r19
    3aaa:	cc 53       	subi	r28, 0x3C	; 60
    3aac:	df 4f       	sbci	r29, 0xFF	; 255
    3aae:	48 81       	ld	r20, Y
    3ab0:	c4 5c       	subi	r28, 0xC4	; 196
    3ab2:	d0 40       	sbci	r29, 0x00	; 0
    3ab4:	4f 93       	push	r20
    3ab6:	c9 56       	subi	r28, 0x69	; 105
    3ab8:	df 4f       	sbci	r29, 0xFF	; 255
    3aba:	58 81       	ld	r21, Y
    3abc:	c7 59       	subi	r28, 0x97	; 151
    3abe:	d0 40       	sbci	r29, 0x00	; 0
    3ac0:	5f 93       	push	r21
    3ac2:	ca 56       	subi	r28, 0x6A	; 106
    3ac4:	df 4f       	sbci	r29, 0xFF	; 255
    3ac6:	88 81       	ld	r24, Y
    3ac8:	c6 59       	subi	r28, 0x96	; 150
    3aca:	d0 40       	sbci	r29, 0x00	; 0
    3acc:	8f 93       	push	r24
    3ace:	c5 53       	subi	r28, 0x35	; 53
    3ad0:	df 4f       	sbci	r29, 0xFF	; 255
    3ad2:	98 81       	ld	r25, Y
    3ad4:	cb 5c       	subi	r28, 0xCB	; 203
    3ad6:	d0 40       	sbci	r29, 0x00	; 0
    3ad8:	9f 93       	push	r25
    3ada:	c6 53       	subi	r28, 0x36	; 54
    3adc:	df 4f       	sbci	r29, 0xFF	; 255
    3ade:	a8 81       	ld	r26, Y
    3ae0:	ca 5c       	subi	r28, 0xCA	; 202
    3ae2:	d0 40       	sbci	r29, 0x00	; 0
    3ae4:	af 93       	push	r26
    3ae6:	c7 53       	subi	r28, 0x37	; 55
    3ae8:	df 4f       	sbci	r29, 0xFF	; 255
    3aea:	b8 81       	ld	r27, Y
    3aec:	c9 5c       	subi	r28, 0xC9	; 201
    3aee:	d0 40       	sbci	r29, 0x00	; 0
    3af0:	bf 93       	push	r27
    3af2:	c8 53       	subi	r28, 0x38	; 56
    3af4:	df 4f       	sbci	r29, 0xFF	; 255
    3af6:	28 81       	ld	r18, Y
    3af8:	c8 5c       	subi	r28, 0xC8	; 200
    3afa:	d0 40       	sbci	r29, 0x00	; 0
    3afc:	2f 93       	push	r18
    3afe:	2f 92       	push	r2
    3b00:	3f 92       	push	r3
    3b02:	0f 93       	push	r16
    3b04:	39 81       	ldd	r19, Y+1	; 0x01
    3b06:	3f 93       	push	r19
    3b08:	80 e0       	ldi	r24, 0x00	; 0
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    3b10:	23 e3       	ldi	r18, 0x33	; 51
    3b12:	33 e3       	ldi	r19, 0x33	; 51
    3b14:	43 e2       	ldi	r20, 0x23	; 35
    3b16:	54 e4       	ldi	r21, 0x44	; 68
    3b18:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3b1c:	9f 93       	push	r25
    3b1e:	8f 93       	push	r24
    3b20:	7f 93       	push	r23
    3b22:	6f 93       	push	r22
    3b24:	4a 81       	ldd	r20, Y+2	; 0x02
    3b26:	5b 81       	ldd	r21, Y+3	; 0x03
    3b28:	ba 01       	movw	r22, r20
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    3b32:	27 e1       	ldi	r18, 0x17	; 23
    3b34:	37 eb       	ldi	r19, 0xB7	; 183
    3b36:	41 ed       	ldi	r20, 0xD1	; 209
    3b38:	5e e3       	ldi	r21, 0x3E	; 62
    3b3a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3b3e:	9f 93       	push	r25
    3b40:	8f 93       	push	r24
    3b42:	7f 93       	push	r23
    3b44:	6f 93       	push	r22
    3b46:	c7 01       	movw	r24, r14
    3b48:	b6 01       	movw	r22, r12
    3b4a:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	40 e2       	ldi	r20, 0x20	; 32
    3b54:	59 e4       	ldi	r21, 0x49	; 73
    3b56:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3b5a:	9f 93       	push	r25
    3b5c:	8f 93       	push	r24
    3b5e:	7f 93       	push	r23
    3b60:	6f 93       	push	r22
    3b62:	c8 56       	subi	r28, 0x68	; 104
    3b64:	df 4f       	sbci	r29, 0xFF	; 255
    3b66:	28 81       	ld	r18, Y
    3b68:	c8 59       	subi	r28, 0x98	; 152
    3b6a:	d0 40       	sbci	r29, 0x00	; 0
    3b6c:	c7 56       	subi	r28, 0x67	; 103
    3b6e:	df 4f       	sbci	r29, 0xFF	; 255
    3b70:	38 81       	ld	r19, Y
    3b72:	c9 59       	subi	r28, 0x99	; 153
    3b74:	d0 40       	sbci	r29, 0x00	; 0
    3b76:	c6 56       	subi	r28, 0x66	; 102
    3b78:	df 4f       	sbci	r29, 0xFF	; 255
    3b7a:	48 81       	ld	r20, Y
    3b7c:	ca 59       	subi	r28, 0x9A	; 154
    3b7e:	d0 40       	sbci	r29, 0x00	; 0
    3b80:	c5 56       	subi	r28, 0x65	; 101
    3b82:	df 4f       	sbci	r29, 0xFF	; 255
    3b84:	58 81       	ld	r21, Y
    3b86:	cb 59       	subi	r28, 0x9B	; 155
    3b88:	d0 40       	sbci	r29, 0x00	; 0
    3b8a:	c4 56       	subi	r28, 0x64	; 100
    3b8c:	df 4f       	sbci	r29, 0xFF	; 255
    3b8e:	68 81       	ld	r22, Y
    3b90:	cc 59       	subi	r28, 0x9C	; 156
    3b92:	d0 40       	sbci	r29, 0x00	; 0
    3b94:	c3 56       	subi	r28, 0x63	; 99
    3b96:	df 4f       	sbci	r29, 0xFF	; 255
    3b98:	78 81       	ld	r23, Y
    3b9a:	cd 59       	subi	r28, 0x9D	; 157
    3b9c:	d0 40       	sbci	r29, 0x00	; 0
    3b9e:	c2 56       	subi	r28, 0x62	; 98
    3ba0:	df 4f       	sbci	r29, 0xFF	; 255
    3ba2:	88 81       	ld	r24, Y
    3ba4:	ce 59       	subi	r28, 0x9E	; 158
    3ba6:	d0 40       	sbci	r29, 0x00	; 0
    3ba8:	c1 56       	subi	r28, 0x61	; 97
    3baa:	df 4f       	sbci	r29, 0xFF	; 255
    3bac:	98 81       	ld	r25, Y
    3bae:	cf 59       	subi	r28, 0x9F	; 159
    3bb0:	d0 40       	sbci	r29, 0x00	; 0
    3bb2:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__floatdisf>
    3bb6:	6b 01       	movw	r12, r22
    3bb8:	7c 01       	movw	r14, r24
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e4       	ldi	r19, 0x40	; 64
    3bbe:	4c e9       	ldi	r20, 0x9C	; 156
    3bc0:	55 e4       	ldi	r21, 0x45	; 69
    3bc2:	c3 01       	movw	r24, r6
    3bc4:	b2 01       	movw	r22, r4
    3bc6:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3bca:	a5 01       	movw	r20, r10
    3bcc:	94 01       	movw	r18, r8
    3bce:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3bd2:	9b 01       	movw	r18, r22
    3bd4:	ac 01       	movw	r20, r24
    3bd6:	c7 01       	movw	r24, r14
    3bd8:	b6 01       	movw	r22, r12
    3bda:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3bde:	9f 93       	push	r25
    3be0:	8f 93       	push	r24
    3be2:	7f 93       	push	r23
    3be4:	6f 93       	push	r22
    3be6:	6c 81       	ldd	r22, Y+4	; 0x04
    3be8:	7d 81       	ldd	r23, Y+5	; 0x05
    3bea:	8e 81       	ldd	r24, Y+6	; 0x06
    3bec:	9f 81       	ldd	r25, Y+7	; 0x07
    3bee:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3bf2:	6b 01       	movw	r12, r22
    3bf4:	7c 01       	movw	r14, r24
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	40 e8       	ldi	r20, 0x80	; 128
    3bfc:	53 e4       	ldi	r21, 0x43	; 67
    3bfe:	68 85       	ldd	r22, Y+8	; 0x08
    3c00:	79 85       	ldd	r23, Y+9	; 0x09
    3c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c06:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3c0a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c0c:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c0e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3c10:	5f 85       	ldd	r21, Y+15	; 0x0f
    3c12:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3c16:	9b 01       	movw	r18, r22
    3c18:	ac 01       	movw	r20, r24
    3c1a:	c7 01       	movw	r24, r14
    3c1c:	b6 01       	movw	r22, r12
    3c1e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3c22:	9f 93       	push	r25
    3c24:	8f 93       	push	r24
    3c26:	7f 93       	push	r23
    3c28:	6f 93       	push	r22
    3c2a:	68 89       	ldd	r22, Y+16	; 0x10
    3c2c:	79 89       	ldd	r23, Y+17	; 0x11
    3c2e:	8a 89       	ldd	r24, Y+18	; 0x12
    3c30:	9b 89       	ldd	r25, Y+19	; 0x13
    3c32:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3c36:	6b 01       	movw	r12, r22
    3c38:	7c 01       	movw	r14, r24
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e8       	ldi	r20, 0x80	; 128
    3c40:	57 e4       	ldi	r21, 0x47	; 71
    3c42:	6c 89       	ldd	r22, Y+20	; 0x14
    3c44:	7d 89       	ldd	r23, Y+21	; 0x15
    3c46:	8e 89       	ldd	r24, Y+22	; 0x16
    3c48:	9f 89       	ldd	r25, Y+23	; 0x17
    3c4a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3c4e:	9b 01       	movw	r18, r22
    3c50:	ac 01       	movw	r20, r24
    3c52:	c7 01       	movw	r24, r14
    3c54:	b6 01       	movw	r22, r12
    3c56:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3c5a:	9f 93       	push	r25
    3c5c:	8f 93       	push	r24
    3c5e:	7f 93       	push	r23
    3c60:	6f 93       	push	r22
    3c62:	68 8d       	ldd	r22, Y+24	; 0x18
    3c64:	79 8d       	ldd	r23, Y+25	; 0x19
    3c66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3c68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3c6a:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3c6e:	6b 01       	movw	r12, r22
    3c70:	7c 01       	movw	r14, r24
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	40 e8       	ldi	r20, 0x80	; 128
    3c78:	57 e4       	ldi	r21, 0x47	; 71
    3c7a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3c7c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3c7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3c82:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3c86:	9b 01       	movw	r18, r22
    3c88:	ac 01       	movw	r20, r24
    3c8a:	c7 01       	movw	r24, r14
    3c8c:	b6 01       	movw	r22, r12
    3c8e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3c92:	9f 93       	push	r25
    3c94:	8f 93       	push	r24
    3c96:	7f 93       	push	r23
    3c98:	6f 93       	push	r22
    3c9a:	c0 56       	subi	r28, 0x60	; 96
    3c9c:	df 4f       	sbci	r29, 0xFF	; 255
    3c9e:	28 81       	ld	r18, Y
    3ca0:	c0 5a       	subi	r28, 0xA0	; 160
    3ca2:	d0 40       	sbci	r29, 0x00	; 0
    3ca4:	cf 55       	subi	r28, 0x5F	; 95
    3ca6:	df 4f       	sbci	r29, 0xFF	; 255
    3ca8:	38 81       	ld	r19, Y
    3caa:	c1 5a       	subi	r28, 0xA1	; 161
    3cac:	d0 40       	sbci	r29, 0x00	; 0
    3cae:	ce 55       	subi	r28, 0x5E	; 94
    3cb0:	df 4f       	sbci	r29, 0xFF	; 255
    3cb2:	48 81       	ld	r20, Y
    3cb4:	c2 5a       	subi	r28, 0xA2	; 162
    3cb6:	d0 40       	sbci	r29, 0x00	; 0
    3cb8:	cd 55       	subi	r28, 0x5D	; 93
    3cba:	df 4f       	sbci	r29, 0xFF	; 255
    3cbc:	58 81       	ld	r21, Y
    3cbe:	c3 5a       	subi	r28, 0xA3	; 163
    3cc0:	d0 40       	sbci	r29, 0x00	; 0
    3cc2:	cc 55       	subi	r28, 0x5C	; 92
    3cc4:	df 4f       	sbci	r29, 0xFF	; 255
    3cc6:	68 81       	ld	r22, Y
    3cc8:	c4 5a       	subi	r28, 0xA4	; 164
    3cca:	d0 40       	sbci	r29, 0x00	; 0
    3ccc:	cb 55       	subi	r28, 0x5B	; 91
    3cce:	df 4f       	sbci	r29, 0xFF	; 255
    3cd0:	78 81       	ld	r23, Y
    3cd2:	c5 5a       	subi	r28, 0xA5	; 165
    3cd4:	d0 40       	sbci	r29, 0x00	; 0
    3cd6:	ca 55       	subi	r28, 0x5A	; 90
    3cd8:	df 4f       	sbci	r29, 0xFF	; 255
    3cda:	88 81       	ld	r24, Y
    3cdc:	c6 5a       	subi	r28, 0xA6	; 166
    3cde:	d0 40       	sbci	r29, 0x00	; 0
    3ce0:	c0 53       	subi	r28, 0x30	; 48
    3ce2:	df 4f       	sbci	r29, 0xFF	; 255
    3ce4:	98 81       	ld	r25, Y
    3ce6:	c0 5d       	subi	r28, 0xD0	; 208
    3ce8:	d0 40       	sbci	r29, 0x00	; 0
    3cea:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__floatdisf>
    3cee:	6b 01       	movw	r12, r22
    3cf0:	7c 01       	movw	r14, r24
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e4       	ldi	r19, 0x40	; 64
    3cf6:	4c e9       	ldi	r20, 0x9C	; 156
    3cf8:	55 e4       	ldi	r21, 0x45	; 69
    3cfa:	68 a1       	ldd	r22, Y+32	; 0x20
    3cfc:	79 a1       	ldd	r23, Y+33	; 0x21
    3cfe:	8a a1       	ldd	r24, Y+34	; 0x22
    3d00:	9b a1       	ldd	r25, Y+35	; 0x23
    3d02:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3d06:	2c a1       	ldd	r18, Y+36	; 0x24
    3d08:	3d a1       	ldd	r19, Y+37	; 0x25
    3d0a:	4e a1       	ldd	r20, Y+38	; 0x26
    3d0c:	5f a1       	ldd	r21, Y+39	; 0x27
    3d0e:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3d12:	9b 01       	movw	r18, r22
    3d14:	ac 01       	movw	r20, r24
    3d16:	c7 01       	movw	r24, r14
    3d18:	b6 01       	movw	r22, r12
    3d1a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3d1e:	9f 93       	push	r25
    3d20:	8f 93       	push	r24
    3d22:	7f 93       	push	r23
    3d24:	6f 93       	push	r22
    3d26:	68 a5       	ldd	r22, Y+40	; 0x28
    3d28:	79 a5       	ldd	r23, Y+41	; 0x29
    3d2a:	8a a5       	ldd	r24, Y+42	; 0x2a
    3d2c:	9b a5       	ldd	r25, Y+43	; 0x2b
    3d2e:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3d32:	6b 01       	movw	r12, r22
    3d34:	7c 01       	movw	r14, r24
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	40 e8       	ldi	r20, 0x80	; 128
    3d3c:	53 e4       	ldi	r21, 0x43	; 67
    3d3e:	6c a5       	ldd	r22, Y+44	; 0x2c
    3d40:	7d a5       	ldd	r23, Y+45	; 0x2d
    3d42:	8e a5       	ldd	r24, Y+46	; 0x2e
    3d44:	9f a5       	ldd	r25, Y+47	; 0x2f
    3d46:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3d4a:	28 a9       	ldd	r18, Y+48	; 0x30
    3d4c:	39 a9       	ldd	r19, Y+49	; 0x31
    3d4e:	4a a9       	ldd	r20, Y+50	; 0x32
    3d50:	5b a9       	ldd	r21, Y+51	; 0x33
    3d52:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3d56:	9b 01       	movw	r18, r22
    3d58:	ac 01       	movw	r20, r24
    3d5a:	c7 01       	movw	r24, r14
    3d5c:	b6 01       	movw	r22, r12
    3d5e:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3d62:	9f 93       	push	r25
    3d64:	8f 93       	push	r24
    3d66:	7f 93       	push	r23
    3d68:	6f 93       	push	r22
    3d6a:	6c a9       	ldd	r22, Y+52	; 0x34
    3d6c:	7d a9       	ldd	r23, Y+53	; 0x35
    3d6e:	8e a9       	ldd	r24, Y+54	; 0x36
    3d70:	9f a9       	ldd	r25, Y+55	; 0x37
    3d72:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3d76:	6b 01       	movw	r12, r22
    3d78:	7c 01       	movw	r14, r24
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e8       	ldi	r20, 0x80	; 128
    3d80:	57 e4       	ldi	r21, 0x47	; 71
    3d82:	68 ad       	ldd	r22, Y+56	; 0x38
    3d84:	79 ad       	ldd	r23, Y+57	; 0x39
    3d86:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d88:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d8a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3d8e:	9b 01       	movw	r18, r22
    3d90:	ac 01       	movw	r20, r24
    3d92:	c7 01       	movw	r24, r14
    3d94:	b6 01       	movw	r22, r12
    3d96:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3d9a:	9f 93       	push	r25
    3d9c:	8f 93       	push	r24
    3d9e:	7f 93       	push	r23
    3da0:	6f 93       	push	r22
    3da2:	6c ad       	ldd	r22, Y+60	; 0x3c
    3da4:	7d ad       	ldd	r23, Y+61	; 0x3d
    3da6:	8e ad       	ldd	r24, Y+62	; 0x3e
    3da8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3daa:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3dae:	6b 01       	movw	r12, r22
    3db0:	7c 01       	movw	r14, r24
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e8       	ldi	r20, 0x80	; 128
    3db8:	57 e4       	ldi	r21, 0x47	; 71
    3dba:	24 96       	adiw	r28, 0x04	; 4
    3dbc:	6c ad       	ldd	r22, Y+60	; 0x3c
    3dbe:	7d ad       	ldd	r23, Y+61	; 0x3d
    3dc0:	8e ad       	ldd	r24, Y+62	; 0x3e
    3dc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    3dc4:	24 97       	sbiw	r28, 0x04	; 4
    3dc6:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3dca:	9b 01       	movw	r18, r22
    3dcc:	ac 01       	movw	r20, r24
    3dce:	c7 01       	movw	r24, r14
    3dd0:	b6 01       	movw	r22, r12
    3dd2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3dd6:	9f 93       	push	r25
    3dd8:	8f 93       	push	r24
    3dda:	7f 93       	push	r23
    3ddc:	6f 93       	push	r22
    3dde:	c9 55       	subi	r28, 0x59	; 89
    3de0:	df 4f       	sbci	r29, 0xFF	; 255
    3de2:	28 81       	ld	r18, Y
    3de4:	c7 5a       	subi	r28, 0xA7	; 167
    3de6:	d0 40       	sbci	r29, 0x00	; 0
    3de8:	c8 55       	subi	r28, 0x58	; 88
    3dea:	df 4f       	sbci	r29, 0xFF	; 255
    3dec:	38 81       	ld	r19, Y
    3dee:	c8 5a       	subi	r28, 0xA8	; 168
    3df0:	d0 40       	sbci	r29, 0x00	; 0
    3df2:	c7 55       	subi	r28, 0x57	; 87
    3df4:	df 4f       	sbci	r29, 0xFF	; 255
    3df6:	48 81       	ld	r20, Y
    3df8:	c9 5a       	subi	r28, 0xA9	; 169
    3dfa:	d0 40       	sbci	r29, 0x00	; 0
    3dfc:	c6 55       	subi	r28, 0x56	; 86
    3dfe:	df 4f       	sbci	r29, 0xFF	; 255
    3e00:	58 81       	ld	r21, Y
    3e02:	ca 5a       	subi	r28, 0xAA	; 170
    3e04:	d0 40       	sbci	r29, 0x00	; 0
    3e06:	c5 55       	subi	r28, 0x55	; 85
    3e08:	df 4f       	sbci	r29, 0xFF	; 255
    3e0a:	68 81       	ld	r22, Y
    3e0c:	cb 5a       	subi	r28, 0xAB	; 171
    3e0e:	d0 40       	sbci	r29, 0x00	; 0
    3e10:	c4 55       	subi	r28, 0x54	; 84
    3e12:	df 4f       	sbci	r29, 0xFF	; 255
    3e14:	78 81       	ld	r23, Y
    3e16:	cc 5a       	subi	r28, 0xAC	; 172
    3e18:	d0 40       	sbci	r29, 0x00	; 0
    3e1a:	c3 55       	subi	r28, 0x53	; 83
    3e1c:	df 4f       	sbci	r29, 0xFF	; 255
    3e1e:	88 81       	ld	r24, Y
    3e20:	cd 5a       	subi	r28, 0xAD	; 173
    3e22:	d0 40       	sbci	r29, 0x00	; 0
    3e24:	cf 52       	subi	r28, 0x2F	; 47
    3e26:	df 4f       	sbci	r29, 0xFF	; 255
    3e28:	98 81       	ld	r25, Y
    3e2a:	c1 5d       	subi	r28, 0xD1	; 209
    3e2c:	d0 40       	sbci	r29, 0x00	; 0
    3e2e:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__floatdisf>
    3e32:	6b 01       	movw	r12, r22
    3e34:	7c 01       	movw	r14, r24
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e4       	ldi	r19, 0x40	; 64
    3e3a:	4c e9       	ldi	r20, 0x9C	; 156
    3e3c:	55 e4       	ldi	r21, 0x45	; 69
    3e3e:	28 96       	adiw	r28, 0x08	; 8
    3e40:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e42:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e44:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e46:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e48:	28 97       	sbiw	r28, 0x08	; 8
    3e4a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3e4e:	2c 96       	adiw	r28, 0x0c	; 12
    3e50:	2c ad       	ldd	r18, Y+60	; 0x3c
    3e52:	3d ad       	ldd	r19, Y+61	; 0x3d
    3e54:	4e ad       	ldd	r20, Y+62	; 0x3e
    3e56:	5f ad       	ldd	r21, Y+63	; 0x3f
    3e58:	2c 97       	sbiw	r28, 0x0c	; 12
    3e5a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3e5e:	9b 01       	movw	r18, r22
    3e60:	ac 01       	movw	r20, r24
    3e62:	c7 01       	movw	r24, r14
    3e64:	b6 01       	movw	r22, r12
    3e66:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3e6a:	9f 93       	push	r25
    3e6c:	8f 93       	push	r24
    3e6e:	7f 93       	push	r23
    3e70:	6f 93       	push	r22
    3e72:	60 96       	adiw	r28, 0x10	; 16
    3e74:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e76:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e78:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e7c:	60 97       	sbiw	r28, 0x10	; 16
    3e7e:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3e82:	6b 01       	movw	r12, r22
    3e84:	7c 01       	movw	r14, r24
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e8       	ldi	r20, 0x80	; 128
    3e8c:	53 e4       	ldi	r21, 0x43	; 67
    3e8e:	64 96       	adiw	r28, 0x14	; 20
    3e90:	6c ad       	ldd	r22, Y+60	; 0x3c
    3e92:	7d ad       	ldd	r23, Y+61	; 0x3d
    3e94:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e96:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e98:	64 97       	sbiw	r28, 0x14	; 20
    3e9a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3e9e:	68 96       	adiw	r28, 0x18	; 24
    3ea0:	2c ad       	ldd	r18, Y+60	; 0x3c
    3ea2:	3d ad       	ldd	r19, Y+61	; 0x3d
    3ea4:	4e ad       	ldd	r20, Y+62	; 0x3e
    3ea6:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ea8:	68 97       	sbiw	r28, 0x18	; 24
    3eaa:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3eae:	9b 01       	movw	r18, r22
    3eb0:	ac 01       	movw	r20, r24
    3eb2:	c7 01       	movw	r24, r14
    3eb4:	b6 01       	movw	r22, r12
    3eb6:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3eba:	9f 93       	push	r25
    3ebc:	8f 93       	push	r24
    3ebe:	7f 93       	push	r23
    3ec0:	6f 93       	push	r22
    3ec2:	6c 96       	adiw	r28, 0x1c	; 28
    3ec4:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ec6:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ec8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3eca:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ecc:	6c 97       	sbiw	r28, 0x1c	; 28
    3ece:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3ed2:	6b 01       	movw	r12, r22
    3ed4:	7c 01       	movw	r14, r24
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	40 e8       	ldi	r20, 0x80	; 128
    3edc:	57 e4       	ldi	r21, 0x47	; 71
    3ede:	a0 96       	adiw	r28, 0x20	; 32
    3ee0:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ee2:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ee4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ee6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ee8:	a0 97       	sbiw	r28, 0x20	; 32
    3eea:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3eee:	9b 01       	movw	r18, r22
    3ef0:	ac 01       	movw	r20, r24
    3ef2:	c7 01       	movw	r24, r14
    3ef4:	b6 01       	movw	r22, r12
    3ef6:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3efa:	9f 93       	push	r25
    3efc:	8f 93       	push	r24
    3efe:	7f 93       	push	r23
    3f00:	6f 93       	push	r22
    3f02:	a4 96       	adiw	r28, 0x24	; 36
    3f04:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f06:	7d ad       	ldd	r23, Y+61	; 0x3d
    3f08:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f0c:	a4 97       	sbiw	r28, 0x24	; 36
    3f0e:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3f12:	6b 01       	movw	r12, r22
    3f14:	7c 01       	movw	r14, r24
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e8       	ldi	r20, 0x80	; 128
    3f1c:	57 e4       	ldi	r21, 0x47	; 71
    3f1e:	a8 96       	adiw	r28, 0x28	; 40
    3f20:	6c ad       	ldd	r22, Y+60	; 0x3c
    3f22:	7d ad       	ldd	r23, Y+61	; 0x3d
    3f24:	8e ad       	ldd	r24, Y+62	; 0x3e
    3f26:	9f ad       	ldd	r25, Y+63	; 0x3f
    3f28:	a8 97       	sbiw	r28, 0x28	; 40
    3f2a:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3f2e:	9b 01       	movw	r18, r22
    3f30:	ac 01       	movw	r20, r24
    3f32:	c7 01       	movw	r24, r14
    3f34:	b6 01       	movw	r22, r12
    3f36:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3f3a:	9f 93       	push	r25
    3f3c:	8f 93       	push	r24
    3f3e:	7f 93       	push	r23
    3f40:	6f 93       	push	r22
    3f42:	c2 55       	subi	r28, 0x52	; 82
    3f44:	df 4f       	sbci	r29, 0xFF	; 255
    3f46:	28 81       	ld	r18, Y
    3f48:	ce 5a       	subi	r28, 0xAE	; 174
    3f4a:	d0 40       	sbci	r29, 0x00	; 0
    3f4c:	c1 55       	subi	r28, 0x51	; 81
    3f4e:	df 4f       	sbci	r29, 0xFF	; 255
    3f50:	38 81       	ld	r19, Y
    3f52:	cf 5a       	subi	r28, 0xAF	; 175
    3f54:	d0 40       	sbci	r29, 0x00	; 0
    3f56:	c0 55       	subi	r28, 0x50	; 80
    3f58:	df 4f       	sbci	r29, 0xFF	; 255
    3f5a:	48 81       	ld	r20, Y
    3f5c:	c0 5b       	subi	r28, 0xB0	; 176
    3f5e:	d0 40       	sbci	r29, 0x00	; 0
    3f60:	cf 54       	subi	r28, 0x4F	; 79
    3f62:	df 4f       	sbci	r29, 0xFF	; 255
    3f64:	58 81       	ld	r21, Y
    3f66:	c1 5b       	subi	r28, 0xB1	; 177
    3f68:	d0 40       	sbci	r29, 0x00	; 0
    3f6a:	ce 54       	subi	r28, 0x4E	; 78
    3f6c:	df 4f       	sbci	r29, 0xFF	; 255
    3f6e:	68 81       	ld	r22, Y
    3f70:	c2 5b       	subi	r28, 0xB2	; 178
    3f72:	d0 40       	sbci	r29, 0x00	; 0
    3f74:	cd 54       	subi	r28, 0x4D	; 77
    3f76:	df 4f       	sbci	r29, 0xFF	; 255
    3f78:	78 81       	ld	r23, Y
    3f7a:	c3 5b       	subi	r28, 0xB3	; 179
    3f7c:	d0 40       	sbci	r29, 0x00	; 0
    3f7e:	cc 54       	subi	r28, 0x4C	; 76
    3f80:	df 4f       	sbci	r29, 0xFF	; 255
    3f82:	88 81       	ld	r24, Y
    3f84:	c4 5b       	subi	r28, 0xB4	; 180
    3f86:	d0 40       	sbci	r29, 0x00	; 0
    3f88:	cb 54       	subi	r28, 0x4B	; 75
    3f8a:	df 4f       	sbci	r29, 0xFF	; 255
    3f8c:	98 81       	ld	r25, Y
    3f8e:	c5 5b       	subi	r28, 0xB5	; 181
    3f90:	d0 40       	sbci	r29, 0x00	; 0
    3f92:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__floatdisf>
    3f96:	6b 01       	movw	r12, r22
    3f98:	7c 01       	movw	r14, r24
    3f9a:	20 e0       	ldi	r18, 0x00	; 0
    3f9c:	30 e4       	ldi	r19, 0x40	; 64
    3f9e:	4c e9       	ldi	r20, 0x9C	; 156
    3fa0:	55 e4       	ldi	r21, 0x45	; 69
    3fa2:	ac 96       	adiw	r28, 0x2c	; 44
    3fa4:	6c ad       	ldd	r22, Y+60	; 0x3c
    3fa6:	7d ad       	ldd	r23, Y+61	; 0x3d
    3fa8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3faa:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fac:	ac 97       	sbiw	r28, 0x2c	; 44
    3fae:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3fb2:	e0 96       	adiw	r28, 0x30	; 48
    3fb4:	2c ad       	ldd	r18, Y+60	; 0x3c
    3fb6:	3d ad       	ldd	r19, Y+61	; 0x3d
    3fb8:	4e ad       	ldd	r20, Y+62	; 0x3e
    3fba:	5f ad       	ldd	r21, Y+63	; 0x3f
    3fbc:	e0 97       	sbiw	r28, 0x30	; 48
    3fbe:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    3fc2:	9b 01       	movw	r18, r22
    3fc4:	ac 01       	movw	r20, r24
    3fc6:	c7 01       	movw	r24, r14
    3fc8:	b6 01       	movw	r22, r12
    3fca:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    3fce:	9f 93       	push	r25
    3fd0:	8f 93       	push	r24
    3fd2:	7f 93       	push	r23
    3fd4:	6f 93       	push	r22
    3fd6:	e4 96       	adiw	r28, 0x34	; 52
    3fd8:	6c ad       	ldd	r22, Y+60	; 0x3c
    3fda:	7d ad       	ldd	r23, Y+61	; 0x3d
    3fdc:	8e ad       	ldd	r24, Y+62	; 0x3e
    3fde:	9f ad       	ldd	r25, Y+63	; 0x3f
    3fe0:	e4 97       	sbiw	r28, 0x34	; 52
    3fe2:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    3fe6:	6b 01       	movw	r12, r22
    3fe8:	7c 01       	movw	r14, r24
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	40 e8       	ldi	r20, 0x80	; 128
    3ff0:	53 e4       	ldi	r21, 0x43	; 67
    3ff2:	e8 96       	adiw	r28, 0x38	; 56
    3ff4:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ff6:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ff8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ffa:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ffc:	e8 97       	sbiw	r28, 0x38	; 56
    3ffe:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4002:	ec 96       	adiw	r28, 0x3c	; 60
    4004:	2c ad       	ldd	r18, Y+60	; 0x3c
    4006:	3d ad       	ldd	r19, Y+61	; 0x3d
    4008:	4e ad       	ldd	r20, Y+62	; 0x3e
    400a:	5f ad       	ldd	r21, Y+63	; 0x3f
    400c:	ec 97       	sbiw	r28, 0x3c	; 60
    400e:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4012:	9b 01       	movw	r18, r22
    4014:	ac 01       	movw	r20, r24
    4016:	c7 01       	movw	r24, r14
    4018:	b6 01       	movw	r22, r12
    401a:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    401e:	9f 93       	push	r25
    4020:	8f 93       	push	r24
    4022:	7f 93       	push	r23
    4024:	6f 93       	push	r22
    4026:	c4 58       	subi	r28, 0x84	; 132
    4028:	df 4f       	sbci	r29, 0xFF	; 255
    402a:	68 81       	ld	r22, Y
    402c:	79 81       	ldd	r23, Y+1	; 0x01
    402e:	8a 81       	ldd	r24, Y+2	; 0x02
    4030:	9b 81       	ldd	r25, Y+3	; 0x03
    4032:	cc 57       	subi	r28, 0x7C	; 124
    4034:	d0 40       	sbci	r29, 0x00	; 0
    4036:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    403a:	6b 01       	movw	r12, r22
    403c:	7c 01       	movw	r14, r24
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e8       	ldi	r20, 0x80	; 128
    4044:	57 e4       	ldi	r21, 0x47	; 71
    4046:	c0 58       	subi	r28, 0x80	; 128
    4048:	df 4f       	sbci	r29, 0xFF	; 255
    404a:	68 81       	ld	r22, Y
    404c:	79 81       	ldd	r23, Y+1	; 0x01
    404e:	8a 81       	ldd	r24, Y+2	; 0x02
    4050:	9b 81       	ldd	r25, Y+3	; 0x03
    4052:	c0 58       	subi	r28, 0x80	; 128
    4054:	d0 40       	sbci	r29, 0x00	; 0
    4056:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    405a:	9b 01       	movw	r18, r22
    405c:	ac 01       	movw	r20, r24
    405e:	c7 01       	movw	r24, r14
    4060:	b6 01       	movw	r22, r12
    4062:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4066:	9f 93       	push	r25
    4068:	8f 93       	push	r24
    406a:	7f 93       	push	r23
    406c:	6f 93       	push	r22
    406e:	cc 57       	subi	r28, 0x7C	; 124
    4070:	df 4f       	sbci	r29, 0xFF	; 255
    4072:	68 81       	ld	r22, Y
    4074:	79 81       	ldd	r23, Y+1	; 0x01
    4076:	8a 81       	ldd	r24, Y+2	; 0x02
    4078:	9b 81       	ldd	r25, Y+3	; 0x03
    407a:	c4 58       	subi	r28, 0x84	; 132
    407c:	d0 40       	sbci	r29, 0x00	; 0
    407e:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    4082:	6b 01       	movw	r12, r22
    4084:	7c 01       	movw	r14, r24
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e8       	ldi	r20, 0x80	; 128
    408c:	57 e4       	ldi	r21, 0x47	; 71
    408e:	c8 57       	subi	r28, 0x78	; 120
    4090:	df 4f       	sbci	r29, 0xFF	; 255
    4092:	68 81       	ld	r22, Y
    4094:	79 81       	ldd	r23, Y+1	; 0x01
    4096:	8a 81       	ldd	r24, Y+2	; 0x02
    4098:	9b 81       	ldd	r25, Y+3	; 0x03
    409a:	c8 58       	subi	r28, 0x88	; 136
    409c:	d0 40       	sbci	r29, 0x00	; 0
    409e:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    40a2:	9b 01       	movw	r18, r22
    40a4:	ac 01       	movw	r20, r24
    40a6:	c7 01       	movw	r24, r14
    40a8:	b6 01       	movw	r22, r12
    40aa:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    40ae:	9f 93       	push	r25
    40b0:	8f 93       	push	r24
    40b2:	7f 93       	push	r23
    40b4:	6f 93       	push	r22
    40b6:	c4 57       	subi	r28, 0x74	; 116
    40b8:	df 4f       	sbci	r29, 0xFF	; 255
    40ba:	68 81       	ld	r22, Y
    40bc:	79 81       	ldd	r23, Y+1	; 0x01
    40be:	8a 81       	ldd	r24, Y+2	; 0x02
    40c0:	9b 81       	ldd	r25, Y+3	; 0x03
    40c2:	cc 58       	subi	r28, 0x8C	; 140
    40c4:	d0 40       	sbci	r29, 0x00	; 0
    40c6:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    40ca:	20 e0       	ldi	r18, 0x00	; 0
    40cc:	30 e4       	ldi	r19, 0x40	; 64
    40ce:	4c e9       	ldi	r20, 0x9C	; 156
    40d0:	55 e4       	ldi	r21, 0x45	; 69
    40d2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    40d6:	9f 93       	push	r25
    40d8:	8f 93       	push	r24
    40da:	7f 93       	push	r23
    40dc:	6f 93       	push	r22
    40de:	8e ec       	ldi	r24, 0xCE	; 206
    40e0:	95 e2       	ldi	r25, 0x25	; 37
    40e2:	9f 93       	push	r25
    40e4:	8f 93       	push	r24
    40e6:	c9 54       	subi	r28, 0x49	; 73
    40e8:	df 4f       	sbci	r29, 0xFF	; 255
    40ea:	58 81       	ld	r21, Y
    40ec:	c7 5b       	subi	r28, 0xB7	; 183
    40ee:	d0 40       	sbci	r29, 0x00	; 0
    40f0:	5f 93       	push	r21
    40f2:	ca 54       	subi	r28, 0x4A	; 74
    40f4:	df 4f       	sbci	r29, 0xFF	; 255
    40f6:	88 81       	ld	r24, Y
    40f8:	c6 5b       	subi	r28, 0xB6	; 182
    40fa:	d0 40       	sbci	r29, 0x00	; 0
    40fc:	8f 93       	push	r24
    40fe:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (H2A_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_H2A */
    4102:	cd bf       	out	0x3d, r28	; 61
    4104:	de bf       	out	0x3e, r29	; 62
    4106:	cf 52       	subi	r28, 0x2F	; 47
    4108:	df 4f       	sbci	r29, 0xFF	; 255
    410a:	cd bf       	out	0x3d, r28	; 61
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	df 91       	pop	r29
    4110:	cf 91       	pop	r28
    4112:	1f 91       	pop	r17
    4114:	0f 91       	pop	r16
    4116:	ff 90       	pop	r15
    4118:	ef 90       	pop	r14
    411a:	df 90       	pop	r13
    411c:	cf 90       	pop	r12
    411e:	bf 90       	pop	r11
    4120:	af 90       	pop	r10
    4122:	9f 90       	pop	r9
    4124:	8f 90       	pop	r8
    4126:	7f 90       	pop	r7
    4128:	6f 90       	pop	r6
    412a:	5f 90       	pop	r5
    412c:	4f 90       	pop	r4
    412e:	3f 90       	pop	r3
    4130:	2f 90       	pop	r2
    4132:	08 95       	ret

00004134 <PrintCSV_EVA>:




void PrintCSV_EVA(FILE *fp) {
    4134:	2f 92       	push	r2
    4136:	3f 92       	push	r3
    4138:	4f 92       	push	r4
    413a:	5f 92       	push	r5
    413c:	6f 92       	push	r6
    413e:	7f 92       	push	r7
    4140:	8f 92       	push	r8
    4142:	9f 92       	push	r9
    4144:	af 92       	push	r10
    4146:	bf 92       	push	r11
    4148:	cf 92       	push	r12
    414a:	df 92       	push	r13
    414c:	ef 92       	push	r14
    414e:	ff 92       	push	r15
    4150:	0f 93       	push	r16
    4152:	1f 93       	push	r17
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
    4158:	cd b7       	in	r28, 0x3d	; 61
    415a:	de b7       	in	r29, 0x3e	; 62
    415c:	c3 58       	subi	r28, 0x83	; 131
    415e:	d1 09       	sbc	r29, r1
    4160:	cd bf       	out	0x3d, r28	; 61
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	ae 96       	adiw	r28, 0x2e	; 46
    4166:	8f af       	std	Y+63, r24	; 0x3f
    4168:	ae 97       	sbiw	r28, 0x2e	; 46
    416a:	af 96       	adiw	r28, 0x2f	; 47
    416c:	9f af       	std	Y+63, r25	; 0x3f
    416e:	af 97       	sbiw	r28, 0x2f	; 47
} /* TakeSnapshotCoreAnalog */


uint8_t IsSnapshotDone(void) {
	
	return !sTakeSnapshot;
    4170:	80 91 64 29 	lds	r24, 0x2964	; 0x802964 <sTakeSnapshot>



void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */
    4174:	81 11       	cpse	r24, r1
    4176:	fc cf       	rjmp	.-8      	; 0x4170 <PrintCSV_EVA+0x3c>
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
    4178:	60 91 d5 29 	lds	r22, 0x29D5	; 0x8029d5 <sSensorDataSnapshot+0x6c>
    417c:	70 91 d6 29 	lds	r23, 0x29D6	; 0x8029d6 <sSensorDataSnapshot+0x6d>
    4180:	80 91 d7 29 	lds	r24, 0x29D7	; 0x8029d7 <sSensorDataSnapshot+0x6e>
    4184:	90 91 d8 29 	lds	r25, 0x29D8	; 0x8029d8 <sSensorDataSnapshot+0x6f>
    4188:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e4       	ldi	r19, 0x40	; 64
    4190:	4c e9       	ldi	r20, 0x9C	; 156
    4192:	55 e4       	ldi	r21, 0x45	; 69
    4194:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4198:	e0 96       	adiw	r28, 0x30	; 48
    419a:	6f af       	std	Y+63, r22	; 0x3f
    419c:	e0 97       	sbiw	r28, 0x30	; 48
    419e:	e1 96       	adiw	r28, 0x31	; 49
    41a0:	7f af       	std	Y+63, r23	; 0x3f
    41a2:	e1 97       	sbiw	r28, 0x31	; 49
    41a4:	e2 96       	adiw	r28, 0x32	; 50
    41a6:	8f af       	std	Y+63, r24	; 0x3f
    41a8:	e2 97       	sbiw	r28, 0x32	; 50
    41aa:	e3 96       	adiw	r28, 0x33	; 51
    41ac:	9f af       	std	Y+63, r25	; 0x3f
    41ae:	e3 97       	sbiw	r28, 0x33	; 51
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
    41b0:	20 91 cc 29 	lds	r18, 0x29CC	; 0x8029cc <sSensorDataSnapshot+0x63>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    41b4:	91 e0       	ldi	r25, 0x01	; 1
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	21 11       	cpse	r18, r1
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	69 96       	adiw	r28, 0x19	; 25
    41be:	9f af       	std	Y+63, r25	; 0x3f
    41c0:	69 97       	sbiw	r28, 0x19	; 25
    41c2:	6a 96       	adiw	r28, 0x1a	; 26
    41c4:	8f af       	std	Y+63, r24	; 0x3f
    41c6:	6a 97       	sbiw	r28, 0x1a	; 26
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    41c8:	80 91 dd 29 	lds	r24, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x74>
    41cc:	90 91 de 29 	lds	r25, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x75>
    41d0:	a0 91 df 29 	lds	r26, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x76>
    41d4:	b0 91 e0 29 	lds	r27, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x77>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    41d8:	89 2b       	or	r24, r25
    41da:	8a 2b       	or	r24, r26
    41dc:	8b 2b       	or	r24, r27
    41de:	69 f1       	breq	.+90     	; 0x423a <PrintCSV_EVA+0x106>
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
    41e0:	60 91 dd 29 	lds	r22, 0x29DD	; 0x8029dd <sSensorDataSnapshot+0x74>
    41e4:	70 91 de 29 	lds	r23, 0x29DE	; 0x8029de <sSensorDataSnapshot+0x75>
    41e8:	80 91 df 29 	lds	r24, 0x29DF	; 0x8029df <sSensorDataSnapshot+0x76>
    41ec:	90 91 e0 29 	lds	r25, 0x29E0	; 0x8029e0 <sSensorDataSnapshot+0x77>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    41f0:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    41f4:	20 e0       	ldi	r18, 0x00	; 0
    41f6:	30 e0       	ldi	r19, 0x00	; 0
    41f8:	40 e8       	ldi	r20, 0x80	; 128
    41fa:	57 e3       	ldi	r21, 0x37	; 55
    41fc:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4200:	9b 01       	movw	r18, r22
    4202:	ac 01       	movw	r20, r24
    4204:	60 e0       	ldi	r22, 0x00	; 0
    4206:	74 e8       	ldi	r23, 0x84	; 132
    4208:	86 ef       	ldi	r24, 0xF6	; 246
    420a:	93 e4       	ldi	r25, 0x43	; 67
    420c:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4210:	c1 58       	subi	r28, 0x81	; 129
    4212:	df 4f       	sbci	r29, 0xFF	; 255
    4214:	68 83       	st	Y, r22
    4216:	cf 57       	subi	r28, 0x7F	; 127
    4218:	d0 40       	sbci	r29, 0x00	; 0
    421a:	c0 58       	subi	r28, 0x80	; 128
    421c:	df 4f       	sbci	r29, 0xFF	; 255
    421e:	78 83       	st	Y, r23
    4220:	c0 58       	subi	r28, 0x80	; 128
    4222:	d0 40       	sbci	r29, 0x00	; 0
    4224:	cf 57       	subi	r28, 0x7F	; 127
    4226:	df 4f       	sbci	r29, 0xFF	; 255
    4228:	88 83       	st	Y, r24
    422a:	c1 58       	subi	r28, 0x81	; 129
    422c:	d0 40       	sbci	r29, 0x00	; 0
    422e:	ce 57       	subi	r28, 0x7E	; 126
    4230:	df 4f       	sbci	r29, 0xFF	; 255
    4232:	98 83       	st	Y, r25
    4234:	c2 58       	subi	r28, 0x82	; 130
    4236:	d0 40       	sbci	r29, 0x00	; 0
    4238:	14 c0       	rjmp	.+40     	; 0x4262 <PrintCSV_EVA+0x12e>
    423a:	c1 58       	subi	r28, 0x81	; 129
    423c:	df 4f       	sbci	r29, 0xFF	; 255
    423e:	18 82       	st	Y, r1
    4240:	cf 57       	subi	r28, 0x7F	; 127
    4242:	d0 40       	sbci	r29, 0x00	; 0
    4244:	c0 58       	subi	r28, 0x80	; 128
    4246:	df 4f       	sbci	r29, 0xFF	; 255
    4248:	18 82       	st	Y, r1
    424a:	c0 58       	subi	r28, 0x80	; 128
    424c:	d0 40       	sbci	r29, 0x00	; 0
    424e:	cf 57       	subi	r28, 0x7F	; 127
    4250:	df 4f       	sbci	r29, 0xFF	; 255
    4252:	18 82       	st	Y, r1
    4254:	c1 58       	subi	r28, 0x81	; 129
    4256:	d0 40       	sbci	r29, 0x00	; 0
    4258:	ce 57       	subi	r28, 0x7E	; 126
    425a:	df 4f       	sbci	r29, 0xFF	; 255
    425c:	18 82       	st	Y, r1
    425e:	c2 58       	subi	r28, 0x82	; 130
    4260:	d0 40       	sbci	r29, 0x00	; 0
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
		(int16_t)sSensorDataSnapshot.ccPower,
    4262:	10 91 e1 29 	lds	r17, 0x29E1	; 0x8029e1 <sSensorDataSnapshot+0x78>
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
		((float) sSensorDataSnapshot.selCCTimestamp / CYCLES_PER_SECOND),
    4266:	60 91 d1 29 	lds	r22, 0x29D1	; 0x8029d1 <sSensorDataSnapshot+0x68>
    426a:	70 91 d2 29 	lds	r23, 0x29D2	; 0x8029d2 <sSensorDataSnapshot+0x69>
    426e:	80 91 d3 29 	lds	r24, 0x29D3	; 0x8029d3 <sSensorDataSnapshot+0x6a>
    4272:	90 91 d4 29 	lds	r25, 0x29D4	; 0x8029d4 <sSensorDataSnapshot+0x6b>
    4276:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	30 e4       	ldi	r19, 0x40	; 64
    427e:	4c e9       	ldi	r20, 0x9C	; 156
    4280:	55 e4       	ldi	r21, 0x45	; 69
    4282:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4286:	e4 96       	adiw	r28, 0x34	; 52
    4288:	6f af       	std	Y+63, r22	; 0x3f
    428a:	e4 97       	sbiw	r28, 0x34	; 52
    428c:	e5 96       	adiw	r28, 0x35	; 53
    428e:	7f af       	std	Y+63, r23	; 0x3f
    4290:	e5 97       	sbiw	r28, 0x35	; 53
    4292:	e6 96       	adiw	r28, 0x36	; 54
    4294:	8f af       	std	Y+63, r24	; 0x3f
    4296:	e6 97       	sbiw	r28, 0x36	; 54
    4298:	e7 96       	adiw	r28, 0x37	; 55
    429a:	9f af       	std	Y+63, r25	; 0x3f
    429c:	e7 97       	sbiw	r28, 0x37	; 55
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
		(int16_t)!sSensorDataSnapshot.selCCState,
    429e:	20 91 cb 29 	lds	r18, 0x29CB	; 0x8029cb <sSensorDataSnapshot+0x62>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    42a2:	91 e0       	ldi	r25, 0x01	; 1
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	21 11       	cpse	r18, r1
    42a8:	90 e0       	ldi	r25, 0x00	; 0
    42aa:	6b 96       	adiw	r28, 0x1b	; 27
    42ac:	9f af       	std	Y+63, r25	; 0x3f
    42ae:	6b 97       	sbiw	r28, 0x1b	; 27
    42b0:	6c 96       	adiw	r28, 0x1c	; 28
    42b2:	8f af       	std	Y+63, r24	; 0x3f
    42b4:	6c 97       	sbiw	r28, 0x1c	; 28
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
		((float) sSensorDataSnapshot.selFPTimestamp / CYCLES_PER_SECOND),
    42b6:	60 91 cd 29 	lds	r22, 0x29CD	; 0x8029cd <sSensorDataSnapshot+0x64>
    42ba:	70 91 ce 29 	lds	r23, 0x29CE	; 0x8029ce <sSensorDataSnapshot+0x65>
    42be:	80 91 cf 29 	lds	r24, 0x29CF	; 0x8029cf <sSensorDataSnapshot+0x66>
    42c2:	90 91 d0 29 	lds	r25, 0x29D0	; 0x8029d0 <sSensorDataSnapshot+0x67>
    42c6:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    42ca:	20 e0       	ldi	r18, 0x00	; 0
    42cc:	30 e4       	ldi	r19, 0x40	; 64
    42ce:	4c e9       	ldi	r20, 0x9C	; 156
    42d0:	55 e4       	ldi	r21, 0x45	; 69
    42d2:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    42d6:	e8 96       	adiw	r28, 0x38	; 56
    42d8:	6f af       	std	Y+63, r22	; 0x3f
    42da:	e8 97       	sbiw	r28, 0x38	; 56
    42dc:	e9 96       	adiw	r28, 0x39	; 57
    42de:	7f af       	std	Y+63, r23	; 0x3f
    42e0:	e9 97       	sbiw	r28, 0x39	; 57
    42e2:	ea 96       	adiw	r28, 0x3a	; 58
    42e4:	8f af       	std	Y+63, r24	; 0x3f
    42e6:	ea 97       	sbiw	r28, 0x3a	; 58
    42e8:	eb 96       	adiw	r28, 0x3b	; 59
    42ea:	9f af       	std	Y+63, r25	; 0x3f
    42ec:	eb 97       	sbiw	r28, 0x3b	; 59
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
		(int16_t)!sSensorDataSnapshot.selFPState,
    42ee:	20 91 ca 29 	lds	r18, 0x29CA	; 0x8029ca <sSensorDataSnapshot+0x61>

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    42f2:	91 e0       	ldi	r25, 0x01	; 1
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	21 11       	cpse	r18, r1
    42f8:	90 e0       	ldi	r25, 0x00	; 0
    42fa:	6d 96       	adiw	r28, 0x1d	; 29
    42fc:	9f af       	std	Y+63, r25	; 0x3f
    42fe:	6d 97       	sbiw	r28, 0x1d	; 29
    4300:	6e 96       	adiw	r28, 0x1e	; 30
    4302:	8f af       	std	Y+63, r24	; 0x3f
    4304:	6e 97       	sbiw	r28, 0x1e	; 30
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
		sSensorDataSnapshot.speedSensorPositivePulsesSeen * EVA_WHEEL_METER_PER_PULSE,
    4306:	60 91 c6 29 	lds	r22, 0x29C6	; 0x8029c6 <sSensorDataSnapshot+0x5d>
    430a:	70 91 c7 29 	lds	r23, 0x29C7	; 0x8029c7 <sSensorDataSnapshot+0x5e>
    430e:	80 91 c8 29 	lds	r24, 0x29C8	; 0x8029c8 <sSensorDataSnapshot+0x5f>
    4312:	90 91 c9 29 	lds	r25, 0x29C9	; 0x8029c9 <sSensorDataSnapshot+0x60>
    4316:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    431a:	2e e4       	ldi	r18, 0x4E	; 78
    431c:	32 e6       	ldi	r19, 0x62	; 98
    431e:	40 ee       	ldi	r20, 0xE0	; 224
    4320:	5c e3       	ldi	r21, 0x3C	; 60
    4322:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4326:	ec 96       	adiw	r28, 0x3c	; 60
    4328:	6f af       	std	Y+63, r22	; 0x3f
    432a:	ec 97       	sbiw	r28, 0x3c	; 60
    432c:	ed 96       	adiw	r28, 0x3d	; 61
    432e:	7f af       	std	Y+63, r23	; 0x3f
    4330:	ed 97       	sbiw	r28, 0x3d	; 61
    4332:	ee 96       	adiw	r28, 0x3e	; 62
    4334:	8f af       	std	Y+63, r24	; 0x3f
    4336:	ee 97       	sbiw	r28, 0x3e	; 62
    4338:	ef 96       	adiw	r28, 0x3f	; 63
    433a:	9f af       	std	Y+63, r25	; 0x3f
    433c:	ef 97       	sbiw	r28, 0x3f	; 63
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
		GetProcessedSpeed(sSensorDataSnapshot.speedSensorPulseInterval, EVA_WHEEL_METER_PER_PULSE),
    433e:	60 91 c2 29 	lds	r22, 0x29C2	; 0x8029c2 <sSensorDataSnapshot+0x59>
    4342:	70 91 c3 29 	lds	r23, 0x29C3	; 0x8029c3 <sSensorDataSnapshot+0x5a>
    4346:	80 91 c4 29 	lds	r24, 0x29C4	; 0x8029c4 <sSensorDataSnapshot+0x5b>
    434a:	90 91 c5 29 	lds	r25, 0x29C5	; 0x8029c5 <sSensorDataSnapshot+0x5c>

static float GetProcessedSpeed(int32_t speedSensorPulseInterval, float wheelMeterPerPulse) {
	
	float res;
	
	if(speedSensorPulseInterval) {
    434e:	61 15       	cp	r22, r1
    4350:	71 05       	cpc	r23, r1
    4352:	81 05       	cpc	r24, r1
    4354:	91 05       	cpc	r25, r1
    4356:	09 f1       	breq	.+66     	; 0x439a <PrintCSV_EVA+0x266>
		res = wheelMeterPerPulse * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (speedSensorPulseInterval / 65536.0f);
    4358:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e8       	ldi	r20, 0x80	; 128
    4362:	57 e3       	ldi	r21, 0x37	; 55
    4364:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4368:	9b 01       	movw	r18, r22
    436a:	ac 01       	movw	r20, r24
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	74 e8       	ldi	r23, 0x84	; 132
    4370:	86 ef       	ldi	r24, 0xF6	; 246
    4372:	93 e4       	ldi	r25, 0x43	; 67
    4374:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4378:	69 83       	std	Y+1, r22	; 0x01
    437a:	07 2f       	mov	r16, r23
    437c:	38 2e       	mov	r3, r24
    437e:	29 2e       	mov	r2, r25
		if(res < SPEEDSENSOR_MIN_SPEED)
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	40 e8       	ldi	r20, 0x80	; 128
    4386:	5f e3       	ldi	r21, 0x3F	; 63
    4388:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <__cmpsf2>
    438c:	88 23       	and	r24, r24
    438e:	4c f4       	brge	.+18     	; 0x43a2 <PrintCSV_EVA+0x26e>
		res = 0.0f;
    4390:	19 82       	std	Y+1, r1	; 0x01
    4392:	00 e0       	ldi	r16, 0x00	; 0
    4394:	31 2c       	mov	r3, r1
    4396:	21 2c       	mov	r2, r1
    4398:	04 c0       	rjmp	.+8      	; 0x43a2 <PrintCSV_EVA+0x26e>
	}
	else
	res = 0.0f;
    439a:	19 82       	std	Y+1, r1	; 0x01
    439c:	00 e0       	ldi	r16, 0x00	; 0
    439e:	31 2c       	mov	r3, r1
    43a0:	21 2c       	mov	r2, r1
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
		sSensorDataSnapshot.pwmDutyCycle / (256.0f * PWM_DC_SCALE),
    43a2:	60 91 db 29 	lds	r22, 0x29DB	; 0x8029db <sSensorDataSnapshot+0x72>
    43a6:	70 91 dc 29 	lds	r23, 0x29DC	; 0x8029dc <sSensorDataSnapshot+0x73>
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
		sSensorDataSnapshot.pwmFrequency / (256.0f * PWM_FREQ_SCALE),
    43aa:	20 91 d9 29 	lds	r18, 0x29D9	; 0x8029d9 <sSensorDataSnapshot+0x70>
    43ae:	30 91 da 29 	lds	r19, 0x29DA	; 0x8029da <sSensorDataSnapshot+0x71>
    43b2:	2a 83       	std	Y+2, r18	; 0x02
    43b4:	3b 83       	std	Y+3, r19	; 0x03
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.driverTempFiltered / (65536.0f * 10.0f),
    43b6:	c0 90 96 29 	lds	r12, 0x2996	; 0x802996 <sSensorDataSnapshot+0x2d>
    43ba:	d0 90 97 29 	lds	r13, 0x2997	; 0x802997 <sSensorDataSnapshot+0x2e>
    43be:	e0 90 98 29 	lds	r14, 0x2998	; 0x802998 <sSensorDataSnapshot+0x2f>
    43c2:	f0 90 99 29 	lds	r15, 0x2999	; 0x802999 <sSensorDataSnapshot+0x30>
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
		sSensorDataSnapshot.inEnergy / (CYCLES_PER_SECOND * sCal.inVoltageScale * sCal.inCurrentScale),
    43c6:	ea eb       	ldi	r30, 0xBA	; 186
    43c8:	f9 e2       	ldi	r31, 0x29	; 41
    43ca:	30 81       	ld	r19, Z
    43cc:	6f 96       	adiw	r28, 0x1f	; 31
    43ce:	3f af       	std	Y+63, r19	; 0x3f
    43d0:	6f 97       	sbiw	r28, 0x1f	; 31
    43d2:	41 81       	ldd	r20, Z+1	; 0x01
    43d4:	a0 96       	adiw	r28, 0x20	; 32
    43d6:	4f af       	std	Y+63, r20	; 0x3f
    43d8:	a0 97       	sbiw	r28, 0x20	; 32
    43da:	52 81       	ldd	r21, Z+2	; 0x02
    43dc:	a1 96       	adiw	r28, 0x21	; 33
    43de:	5f af       	std	Y+63, r21	; 0x3f
    43e0:	a1 97       	sbiw	r28, 0x21	; 33
    43e2:	83 81       	ldd	r24, Z+3	; 0x03
    43e4:	a2 96       	adiw	r28, 0x22	; 34
    43e6:	8f af       	std	Y+63, r24	; 0x3f
    43e8:	a2 97       	sbiw	r28, 0x22	; 34
    43ea:	94 81       	ldd	r25, Z+4	; 0x04
    43ec:	a3 96       	adiw	r28, 0x23	; 35
    43ee:	9f af       	std	Y+63, r25	; 0x3f
    43f0:	a3 97       	sbiw	r28, 0x23	; 35
    43f2:	a5 81       	ldd	r26, Z+5	; 0x05
    43f4:	a4 96       	adiw	r28, 0x24	; 36
    43f6:	af af       	std	Y+63, r26	; 0x3f
    43f8:	a4 97       	sbiw	r28, 0x24	; 36
    43fa:	b6 81       	ldd	r27, Z+6	; 0x06
    43fc:	a5 96       	adiw	r28, 0x25	; 37
    43fe:	bf af       	std	Y+63, r27	; 0x3f
    4400:	a5 97       	sbiw	r28, 0x25	; 37
    4402:	27 81       	ldd	r18, Z+7	; 0x07
    4404:	a6 96       	adiw	r28, 0x26	; 38
    4406:	2f af       	std	Y+63, r18	; 0x3f
    4408:	a6 97       	sbiw	r28, 0x26	; 38
    440a:	e2 ee       	ldi	r30, 0xE2	; 226
    440c:	f9 e2       	ldi	r31, 0x29	; 41
    440e:	40 a4       	ldd	r4, Z+40	; 0x28
    4410:	51 a4       	ldd	r5, Z+41	; 0x29
    4412:	62 a4       	ldd	r6, Z+42	; 0x2a
    4414:	73 a4       	ldd	r7, Z+43	; 0x2b
    4416:	84 a4       	ldd	r8, Z+44	; 0x2c
    4418:	95 a4       	ldd	r9, Z+45	; 0x2d
    441a:	a6 a4       	ldd	r10, Z+46	; 0x2e
    441c:	b7 a4       	ldd	r11, Z+47	; 0x2f
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
		sSensorDataSnapshot.inPowerFiltered / (256.0f * sCal.inVoltageScale * sCal.inCurrentScale),
    441e:	80 91 ae 29 	lds	r24, 0x29AE	; 0x8029ae <sSensorDataSnapshot+0x45>
    4422:	90 91 af 29 	lds	r25, 0x29AF	; 0x8029af <sSensorDataSnapshot+0x46>
    4426:	a0 91 b0 29 	lds	r26, 0x29B0	; 0x8029b0 <sSensorDataSnapshot+0x47>
    442a:	b0 91 b1 29 	lds	r27, 0x29B1	; 0x8029b1 <sSensorDataSnapshot+0x48>
    442e:	8c 83       	std	Y+4, r24	; 0x04
    4430:	9d 83       	std	Y+5, r25	; 0x05
    4432:	ae 83       	std	Y+6, r26	; 0x06
    4434:	bf 83       	std	Y+7, r27	; 0x07
    4436:	20 a5       	ldd	r18, Z+40	; 0x28
    4438:	31 a5       	ldd	r19, Z+41	; 0x29
    443a:	42 a5       	ldd	r20, Z+42	; 0x2a
    443c:	53 a5       	ldd	r21, Z+43	; 0x2b
    443e:	28 87       	std	Y+8, r18	; 0x08
    4440:	39 87       	std	Y+9, r19	; 0x09
    4442:	4a 87       	std	Y+10, r20	; 0x0a
    4444:	5b 87       	std	Y+11, r21	; 0x0b
    4446:	84 a5       	ldd	r24, Z+44	; 0x2c
    4448:	95 a5       	ldd	r25, Z+45	; 0x2d
    444a:	a6 a5       	ldd	r26, Z+46	; 0x2e
    444c:	b7 a5       	ldd	r27, Z+47	; 0x2f
    444e:	8c 87       	std	Y+12, r24	; 0x0c
    4450:	9d 87       	std	Y+13, r25	; 0x0d
    4452:	ae 87       	std	Y+14, r26	; 0x0e
    4454:	bf 87       	std	Y+15, r27	; 0x0f
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
		sSensorDataSnapshot.inCurrentFiltered / (65536.0f * sCal.inCurrentScale),
    4456:	20 91 a6 29 	lds	r18, 0x29A6	; 0x8029a6 <sSensorDataSnapshot+0x3d>
    445a:	30 91 a7 29 	lds	r19, 0x29A7	; 0x8029a7 <sSensorDataSnapshot+0x3e>
    445e:	40 91 a8 29 	lds	r20, 0x29A8	; 0x8029a8 <sSensorDataSnapshot+0x3f>
    4462:	50 91 a9 29 	lds	r21, 0x29A9	; 0x8029a9 <sSensorDataSnapshot+0x40>
    4466:	28 8b       	std	Y+16, r18	; 0x10
    4468:	39 8b       	std	Y+17, r19	; 0x11
    446a:	4a 8b       	std	Y+18, r20	; 0x12
    446c:	5b 8b       	std	Y+19, r21	; 0x13
    446e:	84 a5       	ldd	r24, Z+44	; 0x2c
    4470:	95 a5       	ldd	r25, Z+45	; 0x2d
    4472:	a6 a5       	ldd	r26, Z+46	; 0x2e
    4474:	b7 a5       	ldd	r27, Z+47	; 0x2f
    4476:	8c 8b       	std	Y+20, r24	; 0x14
    4478:	9d 8b       	std	Y+21, r25	; 0x15
    447a:	ae 8b       	std	Y+22, r26	; 0x16
    447c:	bf 8b       	std	Y+23, r27	; 0x17
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.inVoltageFiltered / (65536.0f * sCal.inVoltageScale),
    447e:	20 91 a2 29 	lds	r18, 0x29A2	; 0x8029a2 <sSensorDataSnapshot+0x39>
    4482:	30 91 a3 29 	lds	r19, 0x29A3	; 0x8029a3 <sSensorDataSnapshot+0x3a>
    4486:	40 91 a4 29 	lds	r20, 0x29A4	; 0x8029a4 <sSensorDataSnapshot+0x3b>
    448a:	50 91 a5 29 	lds	r21, 0x29A5	; 0x8029a5 <sSensorDataSnapshot+0x3c>
    448e:	28 8f       	std	Y+24, r18	; 0x18
    4490:	39 8f       	std	Y+25, r19	; 0x19
    4492:	4a 8f       	std	Y+26, r20	; 0x1a
    4494:	5b 8f       	std	Y+27, r21	; 0x1b
    4496:	80 a5       	ldd	r24, Z+40	; 0x28
    4498:	91 a5       	ldd	r25, Z+41	; 0x29
    449a:	a2 a5       	ldd	r26, Z+42	; 0x2a
    449c:	b3 a5       	ldd	r27, Z+43	; 0x2b
    449e:	8c 8f       	std	Y+28, r24	; 0x1c
    44a0:	9d 8f       	std	Y+29, r25	; 0x1d
    44a2:	ae 8f       	std	Y+30, r26	; 0x1e
    44a4:	bf 8f       	std	Y+31, r27	; 0x1f
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorEnergy / (CYCLES_PER_SECOND * sCal.motorVoltageScale * sCal.motorCurrentScale),
    44a6:	22 eb       	ldi	r18, 0xB2	; 178
    44a8:	39 e2       	ldi	r19, 0x29	; 41
    44aa:	d9 01       	movw	r26, r18
    44ac:	bc 91       	ld	r27, X
    44ae:	a7 96       	adiw	r28, 0x27	; 39
    44b0:	bf af       	std	Y+63, r27	; 0x3f
    44b2:	a7 97       	sbiw	r28, 0x27	; 39
    44b4:	40 91 b3 29 	lds	r20, 0x29B3	; 0x8029b3 <sSensorDataSnapshot+0x4a>
    44b8:	a8 96       	adiw	r28, 0x28	; 40
    44ba:	4f af       	std	Y+63, r20	; 0x3f
    44bc:	a8 97       	sbiw	r28, 0x28	; 40
    44be:	50 91 b4 29 	lds	r21, 0x29B4	; 0x8029b4 <sSensorDataSnapshot+0x4b>
    44c2:	a9 96       	adiw	r28, 0x29	; 41
    44c4:	5f af       	std	Y+63, r21	; 0x3f
    44c6:	a9 97       	sbiw	r28, 0x29	; 41
    44c8:	80 91 b5 29 	lds	r24, 0x29B5	; 0x8029b5 <sSensorDataSnapshot+0x4c>
    44cc:	aa 96       	adiw	r28, 0x2a	; 42
    44ce:	8f af       	std	Y+63, r24	; 0x3f
    44d0:	aa 97       	sbiw	r28, 0x2a	; 42
    44d2:	90 91 b6 29 	lds	r25, 0x29B6	; 0x8029b6 <sSensorDataSnapshot+0x4d>
    44d6:	ab 96       	adiw	r28, 0x2b	; 43
    44d8:	9f af       	std	Y+63, r25	; 0x3f
    44da:	ab 97       	sbiw	r28, 0x2b	; 43
    44dc:	a0 91 b7 29 	lds	r26, 0x29B7	; 0x8029b7 <sSensorDataSnapshot+0x4e>
    44e0:	ac 96       	adiw	r28, 0x2c	; 44
    44e2:	af af       	std	Y+63, r26	; 0x3f
    44e4:	ac 97       	sbiw	r28, 0x2c	; 44
    44e6:	b0 91 b8 29 	lds	r27, 0x29B8	; 0x8029b8 <sSensorDataSnapshot+0x4f>
    44ea:	ad 96       	adiw	r28, 0x2d	; 45
    44ec:	bf af       	std	Y+63, r27	; 0x3f
    44ee:	ad 97       	sbiw	r28, 0x2d	; 45
    44f0:	40 91 b9 29 	lds	r20, 0x29B9	; 0x8029b9 <sSensorDataSnapshot+0x50>
    44f4:	cd 57       	subi	r28, 0x7D	; 125
    44f6:	df 4f       	sbci	r29, 0xFF	; 255
    44f8:	48 83       	st	Y, r20
    44fa:	c3 58       	subi	r28, 0x83	; 131
    44fc:	d0 40       	sbci	r29, 0x00	; 0
    44fe:	80 a1       	ldd	r24, Z+32	; 0x20
    4500:	91 a1       	ldd	r25, Z+33	; 0x21
    4502:	a2 a1       	ldd	r26, Z+34	; 0x22
    4504:	b3 a1       	ldd	r27, Z+35	; 0x23
    4506:	88 a3       	std	Y+32, r24	; 0x20
    4508:	99 a3       	std	Y+33, r25	; 0x21
    450a:	aa a3       	std	Y+34, r26	; 0x22
    450c:	bb a3       	std	Y+35, r27	; 0x23
    450e:	24 a1       	ldd	r18, Z+36	; 0x24
    4510:	35 a1       	ldd	r19, Z+37	; 0x25
    4512:	46 a1       	ldd	r20, Z+38	; 0x26
    4514:	57 a1       	ldd	r21, Z+39	; 0x27
    4516:	2c a3       	std	Y+36, r18	; 0x24
    4518:	3d a3       	std	Y+37, r19	; 0x25
    451a:	4e a3       	std	Y+38, r20	; 0x26
    451c:	5f a3       	std	Y+39, r21	; 0x27
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
		sSensorDataSnapshot.motorPowerFiltered / (256.0f * sCal.motorVoltageScale * sCal.motorCurrentScale),
    451e:	80 91 aa 29 	lds	r24, 0x29AA	; 0x8029aa <sSensorDataSnapshot+0x41>
    4522:	90 91 ab 29 	lds	r25, 0x29AB	; 0x8029ab <sSensorDataSnapshot+0x42>
    4526:	a0 91 ac 29 	lds	r26, 0x29AC	; 0x8029ac <sSensorDataSnapshot+0x43>
    452a:	b0 91 ad 29 	lds	r27, 0x29AD	; 0x8029ad <sSensorDataSnapshot+0x44>
    452e:	88 a7       	std	Y+40, r24	; 0x28
    4530:	99 a7       	std	Y+41, r25	; 0x29
    4532:	aa a7       	std	Y+42, r26	; 0x2a
    4534:	bb a7       	std	Y+43, r27	; 0x2b
    4536:	20 a1       	ldd	r18, Z+32	; 0x20
    4538:	31 a1       	ldd	r19, Z+33	; 0x21
    453a:	42 a1       	ldd	r20, Z+34	; 0x22
    453c:	53 a1       	ldd	r21, Z+35	; 0x23
    453e:	2c a7       	std	Y+44, r18	; 0x2c
    4540:	3d a7       	std	Y+45, r19	; 0x2d
    4542:	4e a7       	std	Y+46, r20	; 0x2e
    4544:	5f a7       	std	Y+47, r21	; 0x2f
    4546:	84 a1       	ldd	r24, Z+36	; 0x24
    4548:	95 a1       	ldd	r25, Z+37	; 0x25
    454a:	a6 a1       	ldd	r26, Z+38	; 0x26
    454c:	b7 a1       	ldd	r27, Z+39	; 0x27
    454e:	88 ab       	std	Y+48, r24	; 0x30
    4550:	99 ab       	std	Y+49, r25	; 0x31
    4552:	aa ab       	std	Y+50, r26	; 0x32
    4554:	bb ab       	std	Y+51, r27	; 0x33
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
		sSensorDataSnapshot.motorCurrentFiltered / (65536.0f * sCal.motorCurrentScale),
    4556:	20 91 9e 29 	lds	r18, 0x299E	; 0x80299e <sSensorDataSnapshot+0x35>
    455a:	30 91 9f 29 	lds	r19, 0x299F	; 0x80299f <sSensorDataSnapshot+0x36>
    455e:	40 91 a0 29 	lds	r20, 0x29A0	; 0x8029a0 <sSensorDataSnapshot+0x37>
    4562:	50 91 a1 29 	lds	r21, 0x29A1	; 0x8029a1 <sSensorDataSnapshot+0x38>
    4566:	2c ab       	std	Y+52, r18	; 0x34
    4568:	3d ab       	std	Y+53, r19	; 0x35
    456a:	4e ab       	std	Y+54, r20	; 0x36
    456c:	5f ab       	std	Y+55, r21	; 0x37
    456e:	84 a1       	ldd	r24, Z+36	; 0x24
    4570:	95 a1       	ldd	r25, Z+37	; 0x25
    4572:	a6 a1       	ldd	r26, Z+38	; 0x26
    4574:	b7 a1       	ldd	r27, Z+39	; 0x27
    4576:	88 af       	std	Y+56, r24	; 0x38
    4578:	99 af       	std	Y+57, r25	; 0x39
    457a:	aa af       	std	Y+58, r26	; 0x3a
    457c:	bb af       	std	Y+59, r27	; 0x3b
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
		sSensorDataSnapshot.motorVoltageFiltered / (65536.0f * sCal.motorVoltageScale),
    457e:	20 91 9a 29 	lds	r18, 0x299A	; 0x80299a <sSensorDataSnapshot+0x31>
    4582:	30 91 9b 29 	lds	r19, 0x299B	; 0x80299b <sSensorDataSnapshot+0x32>
    4586:	40 91 9c 29 	lds	r20, 0x299C	; 0x80299c <sSensorDataSnapshot+0x33>
    458a:	50 91 9d 29 	lds	r21, 0x299D	; 0x80299d <sSensorDataSnapshot+0x34>
    458e:	2c af       	std	Y+60, r18	; 0x3c
    4590:	3d af       	std	Y+61, r19	; 0x3d
    4592:	4e af       	std	Y+62, r20	; 0x3e
    4594:	5f af       	std	Y+63, r21	; 0x3f
    4596:	80 a1       	ldd	r24, Z+32	; 0x20
    4598:	91 a1       	ldd	r25, Z+33	; 0x21
    459a:	a2 a1       	ldd	r26, Z+34	; 0x22
    459c:	b3 a1       	ldd	r27, Z+35	; 0x23
    459e:	24 96       	adiw	r28, 0x04	; 4
    45a0:	8c af       	std	Y+60, r24	; 0x3c
    45a2:	9d af       	std	Y+61, r25	; 0x3d
    45a4:	ae af       	std	Y+62, r26	; 0x3e
    45a6:	bf af       	std	Y+63, r27	; 0x3f
    45a8:	24 97       	sbiw	r28, 0x04	; 4
	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
		sSensorDataSnapshot.adc.eva.motorTempRearFiltered / (65536.0f * MOTORTEMP_SCALE),		
    45aa:	20 91 6d 29 	lds	r18, 0x296D	; 0x80296d <sSensorDataSnapshot+0x4>
    45ae:	30 91 6e 29 	lds	r19, 0x296E	; 0x80296e <sSensorDataSnapshot+0x5>
    45b2:	40 91 6f 29 	lds	r20, 0x296F	; 0x80296f <sSensorDataSnapshot+0x6>
    45b6:	50 91 70 29 	lds	r21, 0x2970	; 0x802970 <sSensorDataSnapshot+0x7>
    45ba:	28 96       	adiw	r28, 0x08	; 8
    45bc:	2c af       	std	Y+60, r18	; 0x3c
    45be:	3d af       	std	Y+61, r19	; 0x3d
    45c0:	4e af       	std	Y+62, r20	; 0x3e
    45c2:	5f af       	std	Y+63, r21	; 0x3f
    45c4:	28 97       	sbiw	r28, 0x08	; 8

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.motorTempFrontFiltered / (65536.0f * MOTORTEMP_SCALE),
    45c6:	a9 e6       	ldi	r26, 0x69	; 105
    45c8:	b9 e2       	ldi	r27, 0x29	; 41
    45ca:	8d 91       	ld	r24, X+
    45cc:	9d 91       	ld	r25, X+
    45ce:	0d 90       	ld	r0, X+
    45d0:	bc 91       	ld	r27, X
    45d2:	a0 2d       	mov	r26, r0
    45d4:	2c 96       	adiw	r28, 0x0c	; 12
    45d6:	8c af       	std	Y+60, r24	; 0x3c
    45d8:	9d af       	std	Y+61, r25	; 0x3d
    45da:	ae af       	std	Y+62, r26	; 0x3e
    45dc:	bf af       	std	Y+63, r27	; 0x3f
    45de:	2c 97       	sbiw	r28, 0x0c	; 12
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
		sSensorDataSnapshot.adc.eva.angFSFiltered / (65536.0f),
    45e0:	20 91 75 29 	lds	r18, 0x2975	; 0x802975 <sSensorDataSnapshot+0xc>
    45e4:	30 91 76 29 	lds	r19, 0x2976	; 0x802976 <sSensorDataSnapshot+0xd>
    45e8:	40 91 77 29 	lds	r20, 0x2977	; 0x802977 <sSensorDataSnapshot+0xe>
    45ec:	50 91 78 29 	lds	r21, 0x2978	; 0x802978 <sSensorDataSnapshot+0xf>
    45f0:	60 96       	adiw	r28, 0x10	; 16
    45f2:	2c af       	std	Y+60, r18	; 0x3c
    45f4:	3d af       	std	Y+61, r19	; 0x3d
    45f6:	4e af       	std	Y+62, r20	; 0x3e
    45f8:	5f af       	std	Y+63, r21	; 0x3f
    45fa:	60 97       	sbiw	r28, 0x10	; 16
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
		sSensorDataSnapshot.adc.eva.angSenseFiltered / (65536.0f),
    45fc:	80 91 71 29 	lds	r24, 0x2971	; 0x802971 <sSensorDataSnapshot+0x8>
    4600:	90 91 72 29 	lds	r25, 0x2972	; 0x802972 <sSensorDataSnapshot+0x9>
    4604:	a0 91 73 29 	lds	r26, 0x2973	; 0x802973 <sSensorDataSnapshot+0xa>
    4608:	b0 91 74 29 	lds	r27, 0x2974	; 0x802974 <sSensorDataSnapshot+0xb>
    460c:	64 96       	adiw	r28, 0x14	; 20
    460e:	8c af       	std	Y+60, r24	; 0x3c
    4610:	9d af       	std	Y+61, r25	; 0x3d
    4612:	ae af       	std	Y+62, r26	; 0x3e
    4614:	bf af       	std	Y+63, r27	; 0x3f
    4616:	64 97       	sbiw	r28, 0x14	; 20
void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
		(float) sSessionCycleCountSnapshot / CYCLES_PER_SECOND,
    4618:	20 91 65 29 	lds	r18, 0x2965	; 0x802965 <sSessionCycleCountSnapshot>
    461c:	30 91 66 29 	lds	r19, 0x2966	; 0x802966 <sSessionCycleCountSnapshot+0x1>
    4620:	40 91 67 29 	lds	r20, 0x2967	; 0x802967 <sSessionCycleCountSnapshot+0x2>
    4624:	50 91 68 29 	lds	r21, 0x2968	; 0x802968 <sSessionCycleCountSnapshot+0x3>
    4628:	68 96       	adiw	r28, 0x18	; 24
    462a:	2c af       	std	Y+60, r18	; 0x3c
    462c:	3d af       	std	Y+61, r19	; 0x3d
    462e:	4e af       	std	Y+62, r20	; 0x3e
    4630:	5f af       	std	Y+63, r21	; 0x3f
    4632:	68 97       	sbiw	r28, 0x18	; 24

void PrintCSV_EVA(FILE *fp) {
	/* Assume the calling code has already initiated a snapshot */	
	while(!(IsSnapshotDone())) ; /* Wait for the snapshot to be taken */

	fprintf(fp, ">04|04:%.4f,%.3f,%.3f,%.2f,%.2f,%.3f,%.3f,%.1f,%.0f,%.3f,%.3f,%.1f,%.0f,%.2f,%.0f,%.0f,%.3f,%.2f,%d,%.3f,%d,%.3f,%d,%.3f,%d,%.3f,",
    4634:	e3 96       	adiw	r28, 0x33	; 51
    4636:	3f ad       	ldd	r19, Y+63	; 0x3f
    4638:	e3 97       	sbiw	r28, 0x33	; 51
    463a:	3f 93       	push	r19
    463c:	e2 96       	adiw	r28, 0x32	; 50
    463e:	4f ad       	ldd	r20, Y+63	; 0x3f
    4640:	e2 97       	sbiw	r28, 0x32	; 50
    4642:	4f 93       	push	r20
    4644:	e1 96       	adiw	r28, 0x31	; 49
    4646:	5f ad       	ldd	r21, Y+63	; 0x3f
    4648:	e1 97       	sbiw	r28, 0x31	; 49
    464a:	5f 93       	push	r21
    464c:	e0 96       	adiw	r28, 0x30	; 48
    464e:	8f ad       	ldd	r24, Y+63	; 0x3f
    4650:	e0 97       	sbiw	r28, 0x30	; 48
    4652:	8f 93       	push	r24
    4654:	6a 96       	adiw	r28, 0x1a	; 26
    4656:	9f ad       	ldd	r25, Y+63	; 0x3f
    4658:	6a 97       	sbiw	r28, 0x1a	; 26
    465a:	9f 93       	push	r25
    465c:	69 96       	adiw	r28, 0x19	; 25
    465e:	af ad       	ldd	r26, Y+63	; 0x3f
    4660:	69 97       	sbiw	r28, 0x19	; 25
    4662:	af 93       	push	r26
    4664:	ce 57       	subi	r28, 0x7E	; 126
    4666:	df 4f       	sbci	r29, 0xFF	; 255
    4668:	b8 81       	ld	r27, Y
    466a:	c2 58       	subi	r28, 0x82	; 130
    466c:	d0 40       	sbci	r29, 0x00	; 0
    466e:	bf 93       	push	r27
    4670:	cf 57       	subi	r28, 0x7F	; 127
    4672:	df 4f       	sbci	r29, 0xFF	; 255
    4674:	e8 81       	ld	r30, Y
    4676:	c1 58       	subi	r28, 0x81	; 129
    4678:	d0 40       	sbci	r29, 0x00	; 0
    467a:	ef 93       	push	r30
    467c:	c0 58       	subi	r28, 0x80	; 128
    467e:	df 4f       	sbci	r29, 0xFF	; 255
    4680:	f8 81       	ld	r31, Y
    4682:	c0 58       	subi	r28, 0x80	; 128
    4684:	d0 40       	sbci	r29, 0x00	; 0
    4686:	ff 93       	push	r31
    4688:	c1 58       	subi	r28, 0x81	; 129
    468a:	df 4f       	sbci	r29, 0xFF	; 255
    468c:	28 81       	ld	r18, Y
    468e:	cf 57       	subi	r28, 0x7F	; 127
    4690:	d0 40       	sbci	r29, 0x00	; 0
    4692:	2f 93       	push	r18
    4694:	1f 92       	push	r1
    4696:	1f 93       	push	r17
    4698:	e7 96       	adiw	r28, 0x37	; 55
    469a:	3f ad       	ldd	r19, Y+63	; 0x3f
    469c:	e7 97       	sbiw	r28, 0x37	; 55
    469e:	3f 93       	push	r19
    46a0:	e6 96       	adiw	r28, 0x36	; 54
    46a2:	4f ad       	ldd	r20, Y+63	; 0x3f
    46a4:	e6 97       	sbiw	r28, 0x36	; 54
    46a6:	4f 93       	push	r20
    46a8:	e5 96       	adiw	r28, 0x35	; 53
    46aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    46ac:	e5 97       	sbiw	r28, 0x35	; 53
    46ae:	5f 93       	push	r21
    46b0:	e4 96       	adiw	r28, 0x34	; 52
    46b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    46b4:	e4 97       	sbiw	r28, 0x34	; 52
    46b6:	8f 93       	push	r24
    46b8:	6c 96       	adiw	r28, 0x1c	; 28
    46ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    46bc:	6c 97       	sbiw	r28, 0x1c	; 28
    46be:	9f 93       	push	r25
    46c0:	6b 96       	adiw	r28, 0x1b	; 27
    46c2:	af ad       	ldd	r26, Y+63	; 0x3f
    46c4:	6b 97       	sbiw	r28, 0x1b	; 27
    46c6:	af 93       	push	r26
    46c8:	eb 96       	adiw	r28, 0x3b	; 59
    46ca:	bf ad       	ldd	r27, Y+63	; 0x3f
    46cc:	eb 97       	sbiw	r28, 0x3b	; 59
    46ce:	bf 93       	push	r27
    46d0:	ea 96       	adiw	r28, 0x3a	; 58
    46d2:	ef ad       	ldd	r30, Y+63	; 0x3f
    46d4:	ea 97       	sbiw	r28, 0x3a	; 58
    46d6:	ef 93       	push	r30
    46d8:	e9 96       	adiw	r28, 0x39	; 57
    46da:	ff ad       	ldd	r31, Y+63	; 0x3f
    46dc:	e9 97       	sbiw	r28, 0x39	; 57
    46de:	ff 93       	push	r31
    46e0:	e8 96       	adiw	r28, 0x38	; 56
    46e2:	2f ad       	ldd	r18, Y+63	; 0x3f
    46e4:	e8 97       	sbiw	r28, 0x38	; 56
    46e6:	2f 93       	push	r18
    46e8:	6e 96       	adiw	r28, 0x1e	; 30
    46ea:	3f ad       	ldd	r19, Y+63	; 0x3f
    46ec:	6e 97       	sbiw	r28, 0x1e	; 30
    46ee:	3f 93       	push	r19
    46f0:	6d 96       	adiw	r28, 0x1d	; 29
    46f2:	4f ad       	ldd	r20, Y+63	; 0x3f
    46f4:	6d 97       	sbiw	r28, 0x1d	; 29
    46f6:	4f 93       	push	r20
    46f8:	ef 96       	adiw	r28, 0x3f	; 63
    46fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    46fc:	ef 97       	sbiw	r28, 0x3f	; 63
    46fe:	5f 93       	push	r21
    4700:	ee 96       	adiw	r28, 0x3e	; 62
    4702:	8f ad       	ldd	r24, Y+63	; 0x3f
    4704:	ee 97       	sbiw	r28, 0x3e	; 62
    4706:	8f 93       	push	r24
    4708:	ed 96       	adiw	r28, 0x3d	; 61
    470a:	9f ad       	ldd	r25, Y+63	; 0x3f
    470c:	ed 97       	sbiw	r28, 0x3d	; 61
    470e:	9f 93       	push	r25
    4710:	ec 96       	adiw	r28, 0x3c	; 60
    4712:	af ad       	ldd	r26, Y+63	; 0x3f
    4714:	ec 97       	sbiw	r28, 0x3c	; 60
    4716:	af 93       	push	r26
    4718:	2f 92       	push	r2
    471a:	3f 92       	push	r3
    471c:	0f 93       	push	r16
    471e:	b9 81       	ldd	r27, Y+1	; 0x01
    4720:	bf 93       	push	r27
    4722:	80 e0       	ldi	r24, 0x00	; 0
    4724:	90 e0       	ldi	r25, 0x00	; 0
    4726:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    472a:	23 e3       	ldi	r18, 0x33	; 51
    472c:	33 e3       	ldi	r19, 0x33	; 51
    472e:	43 e2       	ldi	r20, 0x23	; 35
    4730:	54 e4       	ldi	r21, 0x44	; 68
    4732:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4736:	9f 93       	push	r25
    4738:	8f 93       	push	r24
    473a:	7f 93       	push	r23
    473c:	6f 93       	push	r22
    473e:	ea 81       	ldd	r30, Y+2	; 0x02
    4740:	fb 81       	ldd	r31, Y+3	; 0x03
    4742:	bf 01       	movw	r22, r30
    4744:	80 e0       	ldi	r24, 0x00	; 0
    4746:	90 e0       	ldi	r25, 0x00	; 0
    4748:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    474c:	27 e1       	ldi	r18, 0x17	; 23
    474e:	37 eb       	ldi	r19, 0xB7	; 183
    4750:	41 ed       	ldi	r20, 0xD1	; 209
    4752:	5e e3       	ldi	r21, 0x3E	; 62
    4754:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4758:	9f 93       	push	r25
    475a:	8f 93       	push	r24
    475c:	7f 93       	push	r23
    475e:	6f 93       	push	r22
    4760:	c7 01       	movw	r24, r14
    4762:	b6 01       	movw	r22, r12
    4764:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    4768:	20 e0       	ldi	r18, 0x00	; 0
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	40 e2       	ldi	r20, 0x20	; 32
    476e:	59 e4       	ldi	r21, 0x49	; 73
    4770:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4774:	9f 93       	push	r25
    4776:	8f 93       	push	r24
    4778:	7f 93       	push	r23
    477a:	6f 93       	push	r22
    477c:	6f 96       	adiw	r28, 0x1f	; 31
    477e:	2f ad       	ldd	r18, Y+63	; 0x3f
    4780:	6f 97       	sbiw	r28, 0x1f	; 31
    4782:	a0 96       	adiw	r28, 0x20	; 32
    4784:	3f ad       	ldd	r19, Y+63	; 0x3f
    4786:	a0 97       	sbiw	r28, 0x20	; 32
    4788:	a1 96       	adiw	r28, 0x21	; 33
    478a:	4f ad       	ldd	r20, Y+63	; 0x3f
    478c:	a1 97       	sbiw	r28, 0x21	; 33
    478e:	a2 96       	adiw	r28, 0x22	; 34
    4790:	5f ad       	ldd	r21, Y+63	; 0x3f
    4792:	a2 97       	sbiw	r28, 0x22	; 34
    4794:	a3 96       	adiw	r28, 0x23	; 35
    4796:	6f ad       	ldd	r22, Y+63	; 0x3f
    4798:	a3 97       	sbiw	r28, 0x23	; 35
    479a:	a4 96       	adiw	r28, 0x24	; 36
    479c:	7f ad       	ldd	r23, Y+63	; 0x3f
    479e:	a4 97       	sbiw	r28, 0x24	; 36
    47a0:	a5 96       	adiw	r28, 0x25	; 37
    47a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    47a4:	a5 97       	sbiw	r28, 0x25	; 37
    47a6:	a6 96       	adiw	r28, 0x26	; 38
    47a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    47aa:	a6 97       	sbiw	r28, 0x26	; 38
    47ac:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__floatdisf>
    47b0:	6b 01       	movw	r12, r22
    47b2:	7c 01       	movw	r14, r24
    47b4:	20 e0       	ldi	r18, 0x00	; 0
    47b6:	30 e4       	ldi	r19, 0x40	; 64
    47b8:	4c e9       	ldi	r20, 0x9C	; 156
    47ba:	55 e4       	ldi	r21, 0x45	; 69
    47bc:	c3 01       	movw	r24, r6
    47be:	b2 01       	movw	r22, r4
    47c0:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    47c4:	a5 01       	movw	r20, r10
    47c6:	94 01       	movw	r18, r8
    47c8:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    47cc:	9b 01       	movw	r18, r22
    47ce:	ac 01       	movw	r20, r24
    47d0:	c7 01       	movw	r24, r14
    47d2:	b6 01       	movw	r22, r12
    47d4:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    47d8:	9f 93       	push	r25
    47da:	8f 93       	push	r24
    47dc:	7f 93       	push	r23
    47de:	6f 93       	push	r22
    47e0:	6c 81       	ldd	r22, Y+4	; 0x04
    47e2:	7d 81       	ldd	r23, Y+5	; 0x05
    47e4:	8e 81       	ldd	r24, Y+6	; 0x06
    47e6:	9f 81       	ldd	r25, Y+7	; 0x07
    47e8:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    47ec:	6b 01       	movw	r12, r22
    47ee:	7c 01       	movw	r14, r24
    47f0:	20 e0       	ldi	r18, 0x00	; 0
    47f2:	30 e0       	ldi	r19, 0x00	; 0
    47f4:	40 e8       	ldi	r20, 0x80	; 128
    47f6:	53 e4       	ldi	r21, 0x43	; 67
    47f8:	68 85       	ldd	r22, Y+8	; 0x08
    47fa:	79 85       	ldd	r23, Y+9	; 0x09
    47fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    47fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4800:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4804:	2c 85       	ldd	r18, Y+12	; 0x0c
    4806:	3d 85       	ldd	r19, Y+13	; 0x0d
    4808:	4e 85       	ldd	r20, Y+14	; 0x0e
    480a:	5f 85       	ldd	r21, Y+15	; 0x0f
    480c:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4810:	9b 01       	movw	r18, r22
    4812:	ac 01       	movw	r20, r24
    4814:	c7 01       	movw	r24, r14
    4816:	b6 01       	movw	r22, r12
    4818:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    481c:	9f 93       	push	r25
    481e:	8f 93       	push	r24
    4820:	7f 93       	push	r23
    4822:	6f 93       	push	r22
    4824:	68 89       	ldd	r22, Y+16	; 0x10
    4826:	79 89       	ldd	r23, Y+17	; 0x11
    4828:	8a 89       	ldd	r24, Y+18	; 0x12
    482a:	9b 89       	ldd	r25, Y+19	; 0x13
    482c:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    4830:	6b 01       	movw	r12, r22
    4832:	7c 01       	movw	r14, r24
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	40 e8       	ldi	r20, 0x80	; 128
    483a:	57 e4       	ldi	r21, 0x47	; 71
    483c:	6c 89       	ldd	r22, Y+20	; 0x14
    483e:	7d 89       	ldd	r23, Y+21	; 0x15
    4840:	8e 89       	ldd	r24, Y+22	; 0x16
    4842:	9f 89       	ldd	r25, Y+23	; 0x17
    4844:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4848:	9b 01       	movw	r18, r22
    484a:	ac 01       	movw	r20, r24
    484c:	c7 01       	movw	r24, r14
    484e:	b6 01       	movw	r22, r12
    4850:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4854:	9f 93       	push	r25
    4856:	8f 93       	push	r24
    4858:	7f 93       	push	r23
    485a:	6f 93       	push	r22
    485c:	68 8d       	ldd	r22, Y+24	; 0x18
    485e:	79 8d       	ldd	r23, Y+25	; 0x19
    4860:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4862:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4864:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    4868:	6b 01       	movw	r12, r22
    486a:	7c 01       	movw	r14, r24
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	30 e0       	ldi	r19, 0x00	; 0
    4870:	40 e8       	ldi	r20, 0x80	; 128
    4872:	57 e4       	ldi	r21, 0x47	; 71
    4874:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4876:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4878:	8e 8d       	ldd	r24, Y+30	; 0x1e
    487a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    487c:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4880:	9b 01       	movw	r18, r22
    4882:	ac 01       	movw	r20, r24
    4884:	c7 01       	movw	r24, r14
    4886:	b6 01       	movw	r22, r12
    4888:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    488c:	9f 93       	push	r25
    488e:	8f 93       	push	r24
    4890:	7f 93       	push	r23
    4892:	6f 93       	push	r22
    4894:	a7 96       	adiw	r28, 0x27	; 39
    4896:	2f ad       	ldd	r18, Y+63	; 0x3f
    4898:	a7 97       	sbiw	r28, 0x27	; 39
    489a:	a8 96       	adiw	r28, 0x28	; 40
    489c:	3f ad       	ldd	r19, Y+63	; 0x3f
    489e:	a8 97       	sbiw	r28, 0x28	; 40
    48a0:	a9 96       	adiw	r28, 0x29	; 41
    48a2:	4f ad       	ldd	r20, Y+63	; 0x3f
    48a4:	a9 97       	sbiw	r28, 0x29	; 41
    48a6:	aa 96       	adiw	r28, 0x2a	; 42
    48a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    48aa:	aa 97       	sbiw	r28, 0x2a	; 42
    48ac:	ab 96       	adiw	r28, 0x2b	; 43
    48ae:	6f ad       	ldd	r22, Y+63	; 0x3f
    48b0:	ab 97       	sbiw	r28, 0x2b	; 43
    48b2:	ac 96       	adiw	r28, 0x2c	; 44
    48b4:	7f ad       	ldd	r23, Y+63	; 0x3f
    48b6:	ac 97       	sbiw	r28, 0x2c	; 44
    48b8:	ad 96       	adiw	r28, 0x2d	; 45
    48ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    48bc:	ad 97       	sbiw	r28, 0x2d	; 45
    48be:	cd 57       	subi	r28, 0x7D	; 125
    48c0:	df 4f       	sbci	r29, 0xFF	; 255
    48c2:	98 81       	ld	r25, Y
    48c4:	c3 58       	subi	r28, 0x83	; 131
    48c6:	d0 40       	sbci	r29, 0x00	; 0
    48c8:	0e 94 7e 32 	call	0x64fc	; 0x64fc <__floatdisf>
    48cc:	6b 01       	movw	r12, r22
    48ce:	7c 01       	movw	r14, r24
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	30 e4       	ldi	r19, 0x40	; 64
    48d4:	4c e9       	ldi	r20, 0x9C	; 156
    48d6:	55 e4       	ldi	r21, 0x45	; 69
    48d8:	68 a1       	ldd	r22, Y+32	; 0x20
    48da:	79 a1       	ldd	r23, Y+33	; 0x21
    48dc:	8a a1       	ldd	r24, Y+34	; 0x22
    48de:	9b a1       	ldd	r25, Y+35	; 0x23
    48e0:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    48e4:	2c a1       	ldd	r18, Y+36	; 0x24
    48e6:	3d a1       	ldd	r19, Y+37	; 0x25
    48e8:	4e a1       	ldd	r20, Y+38	; 0x26
    48ea:	5f a1       	ldd	r21, Y+39	; 0x27
    48ec:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    48f0:	9b 01       	movw	r18, r22
    48f2:	ac 01       	movw	r20, r24
    48f4:	c7 01       	movw	r24, r14
    48f6:	b6 01       	movw	r22, r12
    48f8:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    48fc:	9f 93       	push	r25
    48fe:	8f 93       	push	r24
    4900:	7f 93       	push	r23
    4902:	6f 93       	push	r22
    4904:	68 a5       	ldd	r22, Y+40	; 0x28
    4906:	79 a5       	ldd	r23, Y+41	; 0x29
    4908:	8a a5       	ldd	r24, Y+42	; 0x2a
    490a:	9b a5       	ldd	r25, Y+43	; 0x2b
    490c:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    4910:	6b 01       	movw	r12, r22
    4912:	7c 01       	movw	r14, r24
    4914:	20 e0       	ldi	r18, 0x00	; 0
    4916:	30 e0       	ldi	r19, 0x00	; 0
    4918:	40 e8       	ldi	r20, 0x80	; 128
    491a:	53 e4       	ldi	r21, 0x43	; 67
    491c:	6c a5       	ldd	r22, Y+44	; 0x2c
    491e:	7d a5       	ldd	r23, Y+45	; 0x2d
    4920:	8e a5       	ldd	r24, Y+46	; 0x2e
    4922:	9f a5       	ldd	r25, Y+47	; 0x2f
    4924:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4928:	28 a9       	ldd	r18, Y+48	; 0x30
    492a:	39 a9       	ldd	r19, Y+49	; 0x31
    492c:	4a a9       	ldd	r20, Y+50	; 0x32
    492e:	5b a9       	ldd	r21, Y+51	; 0x33
    4930:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4934:	9b 01       	movw	r18, r22
    4936:	ac 01       	movw	r20, r24
    4938:	c7 01       	movw	r24, r14
    493a:	b6 01       	movw	r22, r12
    493c:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4940:	9f 93       	push	r25
    4942:	8f 93       	push	r24
    4944:	7f 93       	push	r23
    4946:	6f 93       	push	r22
    4948:	6c a9       	ldd	r22, Y+52	; 0x34
    494a:	7d a9       	ldd	r23, Y+53	; 0x35
    494c:	8e a9       	ldd	r24, Y+54	; 0x36
    494e:	9f a9       	ldd	r25, Y+55	; 0x37
    4950:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    4954:	6b 01       	movw	r12, r22
    4956:	7c 01       	movw	r14, r24
    4958:	20 e0       	ldi	r18, 0x00	; 0
    495a:	30 e0       	ldi	r19, 0x00	; 0
    495c:	40 e8       	ldi	r20, 0x80	; 128
    495e:	57 e4       	ldi	r21, 0x47	; 71
    4960:	68 ad       	ldd	r22, Y+56	; 0x38
    4962:	79 ad       	ldd	r23, Y+57	; 0x39
    4964:	8a ad       	ldd	r24, Y+58	; 0x3a
    4966:	9b ad       	ldd	r25, Y+59	; 0x3b
    4968:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    496c:	9b 01       	movw	r18, r22
    496e:	ac 01       	movw	r20, r24
    4970:	c7 01       	movw	r24, r14
    4972:	b6 01       	movw	r22, r12
    4974:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4978:	9f 93       	push	r25
    497a:	8f 93       	push	r24
    497c:	7f 93       	push	r23
    497e:	6f 93       	push	r22
    4980:	6c ad       	ldd	r22, Y+60	; 0x3c
    4982:	7d ad       	ldd	r23, Y+61	; 0x3d
    4984:	8e ad       	ldd	r24, Y+62	; 0x3e
    4986:	9f ad       	ldd	r25, Y+63	; 0x3f
    4988:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    498c:	6b 01       	movw	r12, r22
    498e:	7c 01       	movw	r14, r24
    4990:	20 e0       	ldi	r18, 0x00	; 0
    4992:	30 e0       	ldi	r19, 0x00	; 0
    4994:	40 e8       	ldi	r20, 0x80	; 128
    4996:	57 e4       	ldi	r21, 0x47	; 71
    4998:	24 96       	adiw	r28, 0x04	; 4
    499a:	6c ad       	ldd	r22, Y+60	; 0x3c
    499c:	7d ad       	ldd	r23, Y+61	; 0x3d
    499e:	8e ad       	ldd	r24, Y+62	; 0x3e
    49a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    49a2:	24 97       	sbiw	r28, 0x04	; 4
    49a4:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    49a8:	9b 01       	movw	r18, r22
    49aa:	ac 01       	movw	r20, r24
    49ac:	c7 01       	movw	r24, r14
    49ae:	b6 01       	movw	r22, r12
    49b0:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    49b4:	9f 93       	push	r25
    49b6:	8f 93       	push	r24
    49b8:	7f 93       	push	r23
    49ba:	6f 93       	push	r22
    49bc:	28 96       	adiw	r28, 0x08	; 8
    49be:	6c ad       	ldd	r22, Y+60	; 0x3c
    49c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    49c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    49c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    49c6:	28 97       	sbiw	r28, 0x08	; 8
    49c8:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    49cc:	25 e5       	ldi	r18, 0x55	; 85
    49ce:	35 e5       	ldi	r19, 0x55	; 85
    49d0:	45 e8       	ldi	r20, 0x85	; 133
    49d2:	59 e4       	ldi	r21, 0x49	; 73
    49d4:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    49d8:	9f 93       	push	r25
    49da:	8f 93       	push	r24
    49dc:	7f 93       	push	r23
    49de:	6f 93       	push	r22
    49e0:	2c 96       	adiw	r28, 0x0c	; 12
    49e2:	6c ad       	ldd	r22, Y+60	; 0x3c
    49e4:	7d ad       	ldd	r23, Y+61	; 0x3d
    49e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    49e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    49ea:	2c 97       	sbiw	r28, 0x0c	; 12
    49ec:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    49f0:	25 e5       	ldi	r18, 0x55	; 85
    49f2:	35 e5       	ldi	r19, 0x55	; 85
    49f4:	45 e8       	ldi	r20, 0x85	; 133
    49f6:	59 e4       	ldi	r21, 0x49	; 73
    49f8:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    49fc:	9f 93       	push	r25
    49fe:	8f 93       	push	r24
    4a00:	7f 93       	push	r23
    4a02:	6f 93       	push	r22
    4a04:	60 96       	adiw	r28, 0x10	; 16
    4a06:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a08:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a0e:	60 97       	sbiw	r28, 0x10	; 16
    4a10:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    4a14:	20 e0       	ldi	r18, 0x00	; 0
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	40 e8       	ldi	r20, 0x80	; 128
    4a1a:	57 e3       	ldi	r21, 0x37	; 55
    4a1c:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4a20:	9f 93       	push	r25
    4a22:	8f 93       	push	r24
    4a24:	7f 93       	push	r23
    4a26:	6f 93       	push	r22
    4a28:	64 96       	adiw	r28, 0x14	; 20
    4a2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a30:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a32:	64 97       	sbiw	r28, 0x14	; 20
    4a34:	0e 94 86 32 	call	0x650c	; 0x650c <__floatsisf>
    4a38:	20 e0       	ldi	r18, 0x00	; 0
    4a3a:	30 e0       	ldi	r19, 0x00	; 0
    4a3c:	40 e8       	ldi	r20, 0x80	; 128
    4a3e:	57 e3       	ldi	r21, 0x37	; 55
    4a40:	0e 94 84 33 	call	0x6708	; 0x6708 <__mulsf3>
    4a44:	9f 93       	push	r25
    4a46:	8f 93       	push	r24
    4a48:	7f 93       	push	r23
    4a4a:	6f 93       	push	r22
    4a4c:	68 96       	adiw	r28, 0x18	; 24
    4a4e:	6c ad       	ldd	r22, Y+60	; 0x3c
    4a50:	7d ad       	ldd	r23, Y+61	; 0x3d
    4a52:	8e ad       	ldd	r24, Y+62	; 0x3e
    4a54:	9f ad       	ldd	r25, Y+63	; 0x3f
    4a56:	68 97       	sbiw	r28, 0x18	; 24
    4a58:	0e 94 84 32 	call	0x6508	; 0x6508 <__floatunsisf>
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	30 e4       	ldi	r19, 0x40	; 64
    4a60:	4c e9       	ldi	r20, 0x9C	; 156
    4a62:	55 e4       	ldi	r21, 0x45	; 69
    4a64:	0e 94 d6 31 	call	0x63ac	; 0x63ac <__divsf3>
    4a68:	9f 93       	push	r25
    4a6a:	8f 93       	push	r24
    4a6c:	7f 93       	push	r23
    4a6e:	6f 93       	push	r22
    4a70:	8c e6       	ldi	r24, 0x6C	; 108
    4a72:	96 e2       	ldi	r25, 0x26	; 38
    4a74:	9f 93       	push	r25
    4a76:	8f 93       	push	r24
    4a78:	af 96       	adiw	r28, 0x2f	; 47
    4a7a:	ff ad       	ldd	r31, Y+63	; 0x3f
    4a7c:	af 97       	sbiw	r28, 0x2f	; 47
    4a7e:	ff 93       	push	r31
    4a80:	ae 96       	adiw	r28, 0x2e	; 46
    4a82:	2f ad       	ldd	r18, Y+63	; 0x3f
    4a84:	ae 97       	sbiw	r28, 0x2e	; 46
    4a86:	2f 93       	push	r18
    4a88:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
		(int16_t)sSensorDataSnapshot.ccPower,
		sSensorDataSnapshot.ccTargetSpeed ? (EVA_WHEEL_METER_PER_PULSE * WHEEL_MS_TO_KMH * CYCLES_PER_SECOND / (sSensorDataSnapshot.ccTargetSpeed  / 65536.0f)) : 0.0f,
		(int16_t)!sSensorDataSnapshot.selCC2State,
		((float) sSensorDataSnapshot.selCC2Timestamp / CYCLES_PER_SECOND));
	
} /* PrintCSV_EVA */
    4a8c:	cd bf       	out	0x3d, r28	; 61
    4a8e:	de bf       	out	0x3e, r29	; 62
    4a90:	cd 57       	subi	r28, 0x7D	; 125
    4a92:	df 4f       	sbci	r29, 0xFF	; 255
    4a94:	cd bf       	out	0x3d, r28	; 61
    4a96:	de bf       	out	0x3e, r29	; 62
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	1f 91       	pop	r17
    4a9e:	0f 91       	pop	r16
    4aa0:	ff 90       	pop	r15
    4aa2:	ef 90       	pop	r14
    4aa4:	df 90       	pop	r13
    4aa6:	cf 90       	pop	r12
    4aa8:	bf 90       	pop	r11
    4aaa:	af 90       	pop	r10
    4aac:	9f 90       	pop	r9
    4aae:	8f 90       	pop	r8
    4ab0:	7f 90       	pop	r7
    4ab2:	6f 90       	pop	r6
    4ab4:	5f 90       	pop	r5
    4ab6:	4f 90       	pop	r4
    4ab8:	3f 90       	pop	r3
    4aba:	2f 90       	pop	r2
    4abc:	08 95       	ret

00004abe <PrintResetHeader>:


void PrintResetHeader(FILE *fp) {
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	d8 2f       	mov	r29, r24
    4ac4:	c9 2f       	mov	r28, r25
	
	fprintf(fp, "# HvA SECOM Motor driver board ");
    4ac6:	28 2f       	mov	r18, r24
    4ac8:	39 2f       	mov	r19, r25
    4aca:	4f e1       	ldi	r20, 0x1F	; 31
    4acc:	50 e0       	ldi	r21, 0x00	; 0
    4ace:	61 e0       	ldi	r22, 0x01	; 1
    4ad0:	70 e0       	ldi	r23, 0x00	; 0
    4ad2:	8e ee       	ldi	r24, 0xEE	; 238
    4ad4:	96 e2       	ldi	r25, 0x26	; 38
    4ad6:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
	PrintBoardType(fp);
    4ada:	8d 2f       	mov	r24, r29
    4adc:	9c 2f       	mov	r25, r28
    4ade:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <PrintBoardType>
	fprintf(fp, "busID %d cpu ", GetBusID());
    4ae2:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <GetBusID>
    4ae6:	1f 92       	push	r1
    4ae8:	8f 93       	push	r24
    4aea:	8e e0       	ldi	r24, 0x0E	; 14
    4aec:	97 e2       	ldi	r25, 0x27	; 39
    4aee:	9f 93       	push	r25
    4af0:	8f 93       	push	r24
    4af2:	cf 93       	push	r28
    4af4:	df 93       	push	r29
    4af6:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
	PrintProcessorID(fp);
    4afa:	8d 2f       	mov	r24, r29
    4afc:	9c 2f       	mov	r25, r28
    4afe:	0e 94 2f 30 	call	0x605e	; 0x605e <PrintProcessorID>
	fprintf(fp, "# code " __DATE__ " " __TIME__ "\r\n");
    4b02:	2d 2f       	mov	r18, r29
    4b04:	3c 2f       	mov	r19, r28
    4b06:	4d e1       	ldi	r20, 0x1D	; 29
    4b08:	50 e0       	ldi	r21, 0x00	; 0
    4b0a:	61 e0       	ldi	r22, 0x01	; 1
    4b0c:	70 e0       	ldi	r23, 0x00	; 0
    4b0e:	8c e1       	ldi	r24, 0x1C	; 28
    4b10:	97 e2       	ldi	r25, 0x27	; 39
    4b12:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
	
} /* PrintResetHeader */
    4b16:	0f 90       	pop	r0
    4b18:	0f 90       	pop	r0
    4b1a:	0f 90       	pop	r0
    4b1c:	0f 90       	pop	r0
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	df 91       	pop	r29
    4b24:	cf 91       	pop	r28
    4b26:	08 95       	ret

00004b28 <__vector_71>:
}
	
} /* ISRReadADC_EVA */


ISR(ADCA_CH0_vect) {
    4b28:	1f 92       	push	r1
    4b2a:	0f 92       	push	r0
    4b2c:	0f b6       	in	r0, 0x3f	; 63
    4b2e:	0f 92       	push	r0
    4b30:	11 24       	eor	r1, r1
    4b32:	0b b6       	in	r0, 0x3b	; 59
    4b34:	0f 92       	push	r0
    4b36:	2f 92       	push	r2
    4b38:	3f 92       	push	r3
    4b3a:	4f 92       	push	r4
    4b3c:	5f 92       	push	r5
    4b3e:	6f 92       	push	r6
    4b40:	7f 92       	push	r7
    4b42:	8f 92       	push	r8
    4b44:	9f 92       	push	r9
    4b46:	af 92       	push	r10
    4b48:	bf 92       	push	r11
    4b4a:	cf 92       	push	r12
    4b4c:	df 92       	push	r13
    4b4e:	ef 92       	push	r14
    4b50:	ff 92       	push	r15
    4b52:	0f 93       	push	r16
    4b54:	1f 93       	push	r17
    4b56:	2f 93       	push	r18
    4b58:	3f 93       	push	r19
    4b5a:	4f 93       	push	r20
    4b5c:	5f 93       	push	r21
    4b5e:	6f 93       	push	r22
    4b60:	7f 93       	push	r23
    4b62:	8f 93       	push	r24
    4b64:	9f 93       	push	r25
    4b66:	af 93       	push	r26
    4b68:	bf 93       	push	r27
    4b6a:	cf 93       	push	r28
    4b6c:	df 93       	push	r29
    4b6e:	ef 93       	push	r30
    4b70:	ff 93       	push	r31

	static int32_t sCCPrevPulseInterval;

	int16_t spRawSample, driverTempSample, motorVoltageSample, motorCurrentSample, inVoltageSample, inCurrentSample;
	int32_t inPower, motorPower;
	uint8_t selCCPin = PORTC.IN & PIN2_bm, selCC2Pin = PORTC.IN & PIN5_bm, selFPPin = PORTC.IN & PIN4_bm, pwmEn = !(PORTC.IN & PIN1_bm), pwm = PORTC.IN & PIN6_bm;
    4b72:	e0 e4       	ldi	r30, 0x40	; 64
    4b74:	f6 e0       	ldi	r31, 0x06	; 6
    4b76:	d0 85       	ldd	r29, Z+8	; 0x08
    4b78:	d4 70       	andi	r29, 0x04	; 4
    4b7a:	c0 85       	ldd	r28, Z+8	; 0x08
    4b7c:	c0 72       	andi	r28, 0x20	; 32
    4b7e:	80 85       	ldd	r24, Z+8	; 0x08
    4b80:	80 71       	andi	r24, 0x10	; 16
    4b82:	58 2e       	mov	r5, r24
    4b84:	80 85       	ldd	r24, Z+8	; 0x08
    4b86:	82 70       	andi	r24, 0x02	; 2
    4b88:	38 2e       	mov	r3, r24
    4b8a:	20 84       	ldd	r2, Z+8	; 0x08
	uint8_t curPWMCycles = TCC1.CNTL;
    4b8c:	40 90 60 08 	lds	r4, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x700860>
	
	if(I_AM_EVA_L || I_AM_EVA_R)
    4b90:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4b94:	80 73       	andi	r24, 0x30	; 48
    4b96:	80 31       	cpi	r24, 0x10	; 16
    4b98:	31 f0       	breq	.+12     	; 0x4ba6 <__vector_71+0x7e>
    4b9a:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    4b9e:	80 73       	andi	r24, 0x30	; 48
    4ba0:	80 32       	cpi	r24, 0x20	; 32
    4ba2:	09 f0       	breq	.+2      	; 0x4ba6 <__vector_71+0x7e>
    4ba4:	d3 c0       	rjmp	.+422    	; 0x4d4c <__vector_71+0x224>
} /* ISRReadADC_H2A */


static inline void ISRReadADC_EVA(void) {
	
	int16_t motorTempFront = ADCA.CH0RES, motorTempRear, angSample, angFSSample;
    4ba6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    4baa:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>

	uint8_t selRegenPin = !(PORTC.IN & PIN5_bm);
    4bae:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
    4bb2:	25 fb       	bst	r18, 5
    4bb4:	22 27       	eor	r18, r18
    4bb6:	20 f9       	bld	r18, 0
    4bb8:	31 e0       	ldi	r19, 0x01	; 1
    4bba:	23 27       	eor	r18, r19
	
	FILTER32(motorTempFront, sSensorData.adc.eva.motorTempFrontFiltered);
    4bbc:	e0 e6       	ldi	r30, 0x60	; 96
    4bbe:	f8 e2       	ldi	r31, 0x28	; 40
    4bc0:	40 81       	ld	r20, Z
    4bc2:	51 81       	ldd	r21, Z+1	; 0x01
    4bc4:	62 81       	ldd	r22, Z+2	; 0x02
    4bc6:	73 81       	ldd	r23, Z+3	; 0x03
    4bc8:	c5 2e       	mov	r12, r21
    4bca:	d6 2e       	mov	r13, r22
    4bcc:	e7 2e       	mov	r14, r23
    4bce:	ff 24       	eor	r15, r15
    4bd0:	e7 fc       	sbrc	r14, 7
    4bd2:	fa 94       	dec	r15
    4bd4:	4c 19       	sub	r20, r12
    4bd6:	5d 09       	sbc	r21, r13
    4bd8:	6e 09       	sbc	r22, r14
    4bda:	7f 09       	sbc	r23, r15
    4bdc:	09 2e       	mov	r0, r25
    4bde:	00 0c       	add	r0, r0
    4be0:	aa 0b       	sbc	r26, r26
    4be2:	bb 0b       	sbc	r27, r27
    4be4:	ba 2f       	mov	r27, r26
    4be6:	a9 2f       	mov	r26, r25
    4be8:	98 2f       	mov	r25, r24
    4bea:	88 27       	eor	r24, r24
    4bec:	84 0f       	add	r24, r20
    4bee:	95 1f       	adc	r25, r21
    4bf0:	a6 1f       	adc	r26, r22
    4bf2:	b7 1f       	adc	r27, r23
    4bf4:	80 83       	st	Z, r24
    4bf6:	91 83       	std	Z+1, r25	; 0x01
    4bf8:	a2 83       	std	Z+2, r26	; 0x02
    4bfa:	b3 83       	std	Z+3, r27	; 0x03
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    4bfc:	e0 e4       	ldi	r30, 0x40	; 64
    4bfe:	f2 e0       	ldi	r31, 0x02	; 2
    4c00:	83 a1       	ldd	r24, Z+35	; 0x23
    4c02:	80 ff       	sbrs	r24, 0
    4c04:	fd cf       	rjmp	.-6      	; 0x4c00 <__vector_71+0xd8>
	ADCB.CH0.INTFLAGS = 0x01;
    4c06:	e0 e4       	ldi	r30, 0x40	; 64
    4c08:	f2 e0       	ldi	r31, 0x02	; 2
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	83 a3       	std	Z+35, r24	; 0x23
	motorTempRear = ADCB.CH0RES;
    4c0e:	80 89       	ldd	r24, Z+16	; 0x10
    4c10:	91 89       	ldd	r25, Z+17	; 0x11
	FILTER32(motorTempRear, sSensorData.adc.eva.motorTempRearFiltered);
    4c12:	e0 e6       	ldi	r30, 0x60	; 96
    4c14:	f8 e2       	ldi	r31, 0x28	; 40
    4c16:	44 81       	ldd	r20, Z+4	; 0x04
    4c18:	55 81       	ldd	r21, Z+5	; 0x05
    4c1a:	66 81       	ldd	r22, Z+6	; 0x06
    4c1c:	77 81       	ldd	r23, Z+7	; 0x07
    4c1e:	c5 2e       	mov	r12, r21
    4c20:	d6 2e       	mov	r13, r22
    4c22:	e7 2e       	mov	r14, r23
    4c24:	ff 24       	eor	r15, r15
    4c26:	e7 fc       	sbrc	r14, 7
    4c28:	fa 94       	dec	r15
    4c2a:	4c 19       	sub	r20, r12
    4c2c:	5d 09       	sbc	r21, r13
    4c2e:	6e 09       	sbc	r22, r14
    4c30:	7f 09       	sbc	r23, r15
    4c32:	09 2e       	mov	r0, r25
    4c34:	00 0c       	add	r0, r0
    4c36:	aa 0b       	sbc	r26, r26
    4c38:	bb 0b       	sbc	r27, r27
    4c3a:	ba 2f       	mov	r27, r26
    4c3c:	a9 2f       	mov	r26, r25
    4c3e:	98 2f       	mov	r25, r24
    4c40:	88 27       	eor	r24, r24
    4c42:	84 0f       	add	r24, r20
    4c44:	95 1f       	adc	r25, r21
    4c46:	a6 1f       	adc	r26, r22
    4c48:	b7 1f       	adc	r27, r23
    4c4a:	84 83       	std	Z+4, r24	; 0x04
    4c4c:	95 83       	std	Z+5, r25	; 0x05
    4c4e:	a6 83       	std	Z+6, r26	; 0x06
    4c50:	b7 83       	std	Z+7, r27	; 0x07
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ;
    4c52:	e0 e0       	ldi	r30, 0x00	; 0
    4c54:	f2 e0       	ldi	r31, 0x02	; 2
    4c56:	83 a5       	ldd	r24, Z+43	; 0x2b
    4c58:	80 ff       	sbrs	r24, 0
    4c5a:	fd cf       	rjmp	.-6      	; 0x4c56 <__vector_71+0x12e>
	ADCA.CH1.INTFLAGS = 0x01;
    4c5c:	e0 e0       	ldi	r30, 0x00	; 0
    4c5e:	f2 e0       	ldi	r31, 0x02	; 2
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	83 a7       	std	Z+43, r24	; 0x2b
	angSample = ADCA.CH1RES;
    4c64:	82 89       	ldd	r24, Z+18	; 0x12
    4c66:	93 89       	ldd	r25, Z+19	; 0x13
	FILTER32(angSample, sSensorData.adc.eva.angSenseFiltered);
    4c68:	e0 e6       	ldi	r30, 0x60	; 96
    4c6a:	f8 e2       	ldi	r31, 0x28	; 40
    4c6c:	40 85       	ldd	r20, Z+8	; 0x08
    4c6e:	51 85       	ldd	r21, Z+9	; 0x09
    4c70:	62 85       	ldd	r22, Z+10	; 0x0a
    4c72:	73 85       	ldd	r23, Z+11	; 0x0b
    4c74:	c5 2e       	mov	r12, r21
    4c76:	d6 2e       	mov	r13, r22
    4c78:	e7 2e       	mov	r14, r23
    4c7a:	ff 24       	eor	r15, r15
    4c7c:	e7 fc       	sbrc	r14, 7
    4c7e:	fa 94       	dec	r15
    4c80:	4c 19       	sub	r20, r12
    4c82:	5d 09       	sbc	r21, r13
    4c84:	6e 09       	sbc	r22, r14
    4c86:	7f 09       	sbc	r23, r15
    4c88:	09 2e       	mov	r0, r25
    4c8a:	00 0c       	add	r0, r0
    4c8c:	aa 0b       	sbc	r26, r26
    4c8e:	bb 0b       	sbc	r27, r27
    4c90:	ba 2f       	mov	r27, r26
    4c92:	a9 2f       	mov	r26, r25
    4c94:	98 2f       	mov	r25, r24
    4c96:	88 27       	eor	r24, r24
    4c98:	84 0f       	add	r24, r20
    4c9a:	95 1f       	adc	r25, r21
    4c9c:	a6 1f       	adc	r26, r22
    4c9e:	b7 1f       	adc	r27, r23
    4ca0:	80 87       	std	Z+8, r24	; 0x08
    4ca2:	91 87       	std	Z+9, r25	; 0x09
    4ca4:	a2 87       	std	Z+10, r26	; 0x0a
    4ca6:	b3 87       	std	Z+11, r27	; 0x0b
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4ca8:	e0 e4       	ldi	r30, 0x40	; 64
    4caa:	f2 e0       	ldi	r31, 0x02	; 2
    4cac:	83 a5       	ldd	r24, Z+43	; 0x2b
    4cae:	80 ff       	sbrs	r24, 0
    4cb0:	fd cf       	rjmp	.-6      	; 0x4cac <__vector_71+0x184>
	ADCB.CH1.INTFLAGS = 0x01;
    4cb2:	e0 e4       	ldi	r30, 0x40	; 64
    4cb4:	f2 e0       	ldi	r31, 0x02	; 2
    4cb6:	81 e0       	ldi	r24, 0x01	; 1
    4cb8:	83 a7       	std	Z+43, r24	; 0x2b
	angFSSample = ADCB.CH1RES;
    4cba:	82 89       	ldd	r24, Z+18	; 0x12
    4cbc:	93 89       	ldd	r25, Z+19	; 0x13
	FILTER32(angFSSample, sSensorData.adc.eva.angFSFiltered);
    4cbe:	e0 e6       	ldi	r30, 0x60	; 96
    4cc0:	f8 e2       	ldi	r31, 0x28	; 40
    4cc2:	44 85       	ldd	r20, Z+12	; 0x0c
    4cc4:	55 85       	ldd	r21, Z+13	; 0x0d
    4cc6:	66 85       	ldd	r22, Z+14	; 0x0e
    4cc8:	77 85       	ldd	r23, Z+15	; 0x0f
    4cca:	c5 2e       	mov	r12, r21
    4ccc:	d6 2e       	mov	r13, r22
    4cce:	e7 2e       	mov	r14, r23
    4cd0:	ff 24       	eor	r15, r15
    4cd2:	e7 fc       	sbrc	r14, 7
    4cd4:	fa 94       	dec	r15
    4cd6:	4c 19       	sub	r20, r12
    4cd8:	5d 09       	sbc	r21, r13
    4cda:	6e 09       	sbc	r22, r14
    4cdc:	7f 09       	sbc	r23, r15
    4cde:	09 2e       	mov	r0, r25
    4ce0:	00 0c       	add	r0, r0
    4ce2:	aa 0b       	sbc	r26, r26
    4ce4:	bb 0b       	sbc	r27, r27
    4ce6:	ba 2f       	mov	r27, r26
    4ce8:	a9 2f       	mov	r26, r25
    4cea:	98 2f       	mov	r25, r24
    4cec:	88 27       	eor	r24, r24
    4cee:	84 0f       	add	r24, r20
    4cf0:	95 1f       	adc	r25, r21
    4cf2:	a6 1f       	adc	r26, r22
    4cf4:	b7 1f       	adc	r27, r23
    4cf6:	84 87       	std	Z+12, r24	; 0x0c
    4cf8:	95 87       	std	Z+13, r25	; 0x0d
    4cfa:	a6 87       	std	Z+14, r26	; 0x0e
    4cfc:	b7 87       	std	Z+15, r27	; 0x0f

	if(sSensorData.adc.eva.regBrakeState != selRegenPin) {
    4cfe:	82 2f       	mov	r24, r18
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	a0 e0       	ldi	r26, 0x00	; 0
    4d04:	b0 e0       	ldi	r27, 0x00	; 0
    4d06:	40 89       	ldd	r20, Z+16	; 0x10
    4d08:	51 89       	ldd	r21, Z+17	; 0x11
    4d0a:	62 89       	ldd	r22, Z+18	; 0x12
    4d0c:	73 89       	ldd	r23, Z+19	; 0x13
    4d0e:	48 17       	cp	r20, r24
    4d10:	59 07       	cpc	r21, r25
    4d12:	6a 07       	cpc	r22, r26
    4d14:	7b 07       	cpc	r23, r27
    4d16:	09 f4       	brne	.+2      	; 0x4d1a <__vector_71+0x1f2>
    4d18:	5a c1       	rjmp	.+692    	; 0x4fce <__vector_71+0x4a6>
		SET_CC_DRIVE(REGBRAKE_LEVEL);
    4d1a:	e0 e8       	ldi	r30, 0x80	; 128
    4d1c:	f6 e0       	ldi	r31, 0x06	; 6
    4d1e:	27 e0       	ldi	r18, 0x07	; 7
    4d20:	25 83       	std	Z+5, r18	; 0x05
		PORTE.OUTSET = PIN3_bm;
    4d22:	28 e0       	ldi	r18, 0x08	; 8
    4d24:	25 83       	std	Z+5, r18	; 0x05
		sSensorData.adc.eva.regBrakeState = selRegenPin;
    4d26:	e0 e6       	ldi	r30, 0x60	; 96
    4d28:	f8 e2       	ldi	r31, 0x28	; 40
    4d2a:	80 8b       	std	Z+16, r24	; 0x10
    4d2c:	91 8b       	std	Z+17, r25	; 0x11
    4d2e:	a2 8b       	std	Z+18, r26	; 0x12
    4d30:	b3 8b       	std	Z+19, r27	; 0x13
		sSensorData.adc.eva.regBrakeTimestamp = sSessionCycleCount;
    4d32:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    4d36:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    4d3a:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    4d3e:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    4d42:	84 8b       	std	Z+20, r24	; 0x14
    4d44:	95 8b       	std	Z+21, r25	; 0x15
    4d46:	a6 8b       	std	Z+22, r26	; 0x16
    4d48:	b7 8b       	std	Z+23, r27	; 0x17
    4d4a:	41 c1       	rjmp	.+642    	; 0x4fce <__vector_71+0x4a6>
	else { PORTE.OUTSET = ~(x) & CC_PINS;  PORTE.OUTCLR = ((x) & CC_PINS); } \
} while(0)

static inline void ISRReadADC_H2A(void) {

	int16_t fcVoltageSample = ADCA.CH0RES - sCal.fcVoltageOffset, fcCurrentSample, scVoltageSample, scCurrentSample;
    4d4c:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
    4d50:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
    4d54:	40 91 e2 29 	lds	r20, 0x29E2	; 0x8029e2 <sCal>
    4d58:	50 91 e3 29 	lds	r21, 0x29E3	; 0x8029e3 <sCal+0x1>
	int32_t fcPower, scPower;

	uint8_t idealDiodePin = PORTE.IN & PIN4_bm;
    4d5c:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <__TEXT_REGION_LENGTH__+0x700688>
    4d60:	80 71       	andi	r24, 0x10	; 16
    4d62:	78 2e       	mov	r7, r24
	
	FILTER32(fcVoltageSample, sSensorData.adc.h2a.fcVoltageFiltered);
    4d64:	e0 e6       	ldi	r30, 0x60	; 96
    4d66:	f8 e2       	ldi	r31, 0x28	; 40
    4d68:	80 81       	ld	r24, Z
    4d6a:	91 81       	ldd	r25, Z+1	; 0x01
    4d6c:	a2 81       	ldd	r26, Z+2	; 0x02
    4d6e:	b3 81       	ldd	r27, Z+3	; 0x03
    4d70:	24 1b       	sub	r18, r20
    4d72:	35 0b       	sbc	r19, r21
    4d74:	03 2e       	mov	r0, r19
    4d76:	00 0c       	add	r0, r0
    4d78:	44 0b       	sbc	r20, r20
    4d7a:	55 0b       	sbc	r21, r21
    4d7c:	c9 2e       	mov	r12, r25
    4d7e:	da 2e       	mov	r13, r26
    4d80:	eb 2e       	mov	r14, r27
    4d82:	ff 24       	eor	r15, r15
    4d84:	e7 fc       	sbrc	r14, 7
    4d86:	fa 94       	dec	r15
    4d88:	8c 19       	sub	r24, r12
    4d8a:	9d 09       	sbc	r25, r13
    4d8c:	ae 09       	sbc	r26, r14
    4d8e:	bf 09       	sbc	r27, r15
    4d90:	cc 24       	eor	r12, r12
    4d92:	d2 2e       	mov	r13, r18
    4d94:	e3 2e       	mov	r14, r19
    4d96:	f4 2e       	mov	r15, r20
    4d98:	8c 0d       	add	r24, r12
    4d9a:	9d 1d       	adc	r25, r13
    4d9c:	ae 1d       	adc	r26, r14
    4d9e:	bf 1d       	adc	r27, r15
    4da0:	80 83       	st	Z, r24
    4da2:	91 83       	std	Z+1, r25	; 0x01
    4da4:	a2 83       	std	Z+2, r26	; 0x02
    4da6:	b3 83       	std	Z+3, r27	; 0x03
	
	while(!(ADCB.CH0.INTFLAGS & 0x01)) ; /* Should not be necessary, as ADCB.CH0 is expected to be done simultaneously with ADCA.CH0 */
    4da8:	e0 e4       	ldi	r30, 0x40	; 64
    4daa:	f2 e0       	ldi	r31, 0x02	; 2
    4dac:	83 a1       	ldd	r24, Z+35	; 0x23
    4dae:	80 ff       	sbrs	r24, 0
    4db0:	fd cf       	rjmp	.-6      	; 0x4dac <__vector_71+0x284>
	ADCB.CH0.INTFLAGS = 0x01;
    4db2:	e0 e4       	ldi	r30, 0x40	; 64
    4db4:	f2 e0       	ldi	r31, 0x02	; 2
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	83 a3       	std	Z+35, r24	; 0x23
	fcCurrentSample = ADCB.CH0RES - sCal.fcCurrentOffset;
    4dba:	60 89       	ldd	r22, Z+16	; 0x10
    4dbc:	71 89       	ldd	r23, Z+17	; 0x11
    4dbe:	80 91 e4 29 	lds	r24, 0x29E4	; 0x8029e4 <sCal+0x2>
    4dc2:	90 91 e5 29 	lds	r25, 0x29E5	; 0x8029e5 <sCal+0x3>
	FILTER32(fcCurrentSample, sSensorData.adc.h2a.fcCurrentFiltered);
    4dc6:	e0 e6       	ldi	r30, 0x60	; 96
    4dc8:	f8 e2       	ldi	r31, 0x28	; 40
    4dca:	c4 80       	ldd	r12, Z+4	; 0x04
    4dcc:	d5 80       	ldd	r13, Z+5	; 0x05
    4dce:	e6 80       	ldd	r14, Z+6	; 0x06
    4dd0:	f7 80       	ldd	r15, Z+7	; 0x07
    4dd2:	68 1b       	sub	r22, r24
    4dd4:	79 0b       	sbc	r23, r25
    4dd6:	07 2e       	mov	r0, r23
    4dd8:	00 0c       	add	r0, r0
    4dda:	88 0b       	sbc	r24, r24
    4ddc:	99 0b       	sbc	r25, r25
    4dde:	8d 2c       	mov	r8, r13
    4de0:	9e 2c       	mov	r9, r14
    4de2:	af 2c       	mov	r10, r15
    4de4:	bb 24       	eor	r11, r11
    4de6:	a7 fc       	sbrc	r10, 7
    4de8:	ba 94       	dec	r11
    4dea:	c8 18       	sub	r12, r8
    4dec:	d9 08       	sbc	r13, r9
    4dee:	ea 08       	sbc	r14, r10
    4df0:	fb 08       	sbc	r15, r11
    4df2:	88 24       	eor	r8, r8
    4df4:	96 2e       	mov	r9, r22
    4df6:	a7 2e       	mov	r10, r23
    4df8:	b8 2e       	mov	r11, r24
    4dfa:	c8 0c       	add	r12, r8
    4dfc:	d9 1c       	adc	r13, r9
    4dfe:	ea 1c       	adc	r14, r10
    4e00:	fb 1c       	adc	r15, r11
    4e02:	c4 82       	std	Z+4, r12	; 0x04
    4e04:	d5 82       	std	Z+5, r13	; 0x05
    4e06:	e6 82       	std	Z+6, r14	; 0x06
    4e08:	f7 82       	std	Z+7, r15	; 0x07
	
	fcPower = ((int32_t) fcVoltageSample) * ((int32_t) fcCurrentSample);
    4e0a:	0e 94 de 37 	call	0x6fbc	; 0x6fbc <__mulsi3>
	FILTER32PWR(fcPower, sSensorData.adc.h2a.fcPowerFiltered);
    4e0e:	c0 88       	ldd	r12, Z+16	; 0x10
    4e10:	d1 88       	ldd	r13, Z+17	; 0x11
    4e12:	e2 88       	ldd	r14, Z+18	; 0x12
    4e14:	f3 88       	ldd	r15, Z+19	; 0x13
    4e16:	33 27       	eor	r19, r19
    4e18:	f7 fc       	sbrc	r15, 7
    4e1a:	3a 95       	dec	r19
    4e1c:	2f 2d       	mov	r18, r15
    4e1e:	1e 2d       	mov	r17, r14
    4e20:	0d 2d       	mov	r16, r13
    4e22:	c0 1a       	sub	r12, r16
    4e24:	d1 0a       	sbc	r13, r17
    4e26:	e2 0a       	sbc	r14, r18
    4e28:	f3 0a       	sbc	r15, r19
    4e2a:	c6 0e       	add	r12, r22
    4e2c:	d7 1e       	adc	r13, r23
    4e2e:	e8 1e       	adc	r14, r24
    4e30:	f9 1e       	adc	r15, r25
    4e32:	c0 8a       	std	Z+16, r12	; 0x10
    4e34:	d1 8a       	std	Z+17, r13	; 0x11
    4e36:	e2 8a       	std	Z+18, r14	; 0x12
    4e38:	f3 8a       	std	Z+19, r15	; 0x13
	sSensorData.adc.h2a.fcEnergy += fcPower;
    4e3a:	6b 01       	movw	r12, r22
    4e3c:	7c 01       	movw	r14, r24
    4e3e:	ff 0c       	add	r15, r15
    4e40:	cc 08       	sbc	r12, r12
    4e42:	dc 2c       	mov	r13, r12
    4e44:	76 01       	movw	r14, r12
    4e46:	26 2f       	mov	r18, r22
    4e48:	37 2f       	mov	r19, r23
    4e4a:	48 2f       	mov	r20, r24
    4e4c:	59 2f       	mov	r21, r25
    4e4e:	6c 2d       	mov	r22, r12
    4e50:	7c 2d       	mov	r23, r12
    4e52:	8c 2d       	mov	r24, r12
    4e54:	9c 2d       	mov	r25, r12
    4e56:	a0 8c       	ldd	r10, Z+24	; 0x18
    4e58:	b1 8c       	ldd	r11, Z+25	; 0x19
    4e5a:	c2 8c       	ldd	r12, Z+26	; 0x1a
    4e5c:	d3 8c       	ldd	r13, Z+27	; 0x1b
    4e5e:	e4 8c       	ldd	r14, Z+28	; 0x1c
    4e60:	f5 8c       	ldd	r15, Z+29	; 0x1d
    4e62:	06 8d       	ldd	r16, Z+30	; 0x1e
    4e64:	17 8d       	ldd	r17, Z+31	; 0x1f
    4e66:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__adddi3>
    4e6a:	20 8f       	std	Z+24, r18	; 0x18
    4e6c:	31 8f       	std	Z+25, r19	; 0x19
    4e6e:	42 8f       	std	Z+26, r20	; 0x1a
    4e70:	53 8f       	std	Z+27, r21	; 0x1b
    4e72:	64 8f       	std	Z+28, r22	; 0x1c
    4e74:	75 8f       	std	Z+29, r23	; 0x1d
    4e76:	86 8f       	std	Z+30, r24	; 0x1e
    4e78:	97 8f       	std	Z+31, r25	; 0x1f
	
	while(!(ADCA.CH1.INTFLAGS & 0x01)) ; /* Should also not be necessary, by this time the conversion should be long over */
    4e7a:	e0 e0       	ldi	r30, 0x00	; 0
    4e7c:	f2 e0       	ldi	r31, 0x02	; 2
    4e7e:	83 a5       	ldd	r24, Z+43	; 0x2b
    4e80:	80 ff       	sbrs	r24, 0
    4e82:	fd cf       	rjmp	.-6      	; 0x4e7e <__vector_71+0x356>
	ADCA.CH1.INTFLAGS = 0x01;
    4e84:	e0 e0       	ldi	r30, 0x00	; 0
    4e86:	f2 e0       	ldi	r31, 0x02	; 2
    4e88:	81 e0       	ldi	r24, 0x01	; 1
    4e8a:	83 a7       	std	Z+43, r24	; 0x2b
	scVoltageSample = ADCA.CH1RES - sCal.scVoltageOffset;
    4e8c:	22 89       	ldd	r18, Z+18	; 0x12
    4e8e:	33 89       	ldd	r19, Z+19	; 0x13
    4e90:	40 91 e6 29 	lds	r20, 0x29E6	; 0x8029e6 <sCal+0x4>
    4e94:	50 91 e7 29 	lds	r21, 0x29E7	; 0x8029e7 <sCal+0x5>
	FILTER32(scVoltageSample, sSensorData.adc.h2a.scVoltageFiltered);
    4e98:	e0 e6       	ldi	r30, 0x60	; 96
    4e9a:	f8 e2       	ldi	r31, 0x28	; 40
    4e9c:	80 85       	ldd	r24, Z+8	; 0x08
    4e9e:	91 85       	ldd	r25, Z+9	; 0x09
    4ea0:	a2 85       	ldd	r26, Z+10	; 0x0a
    4ea2:	b3 85       	ldd	r27, Z+11	; 0x0b
    4ea4:	24 1b       	sub	r18, r20
    4ea6:	35 0b       	sbc	r19, r21
    4ea8:	03 2e       	mov	r0, r19
    4eaa:	00 0c       	add	r0, r0
    4eac:	44 0b       	sbc	r20, r20
    4eae:	55 0b       	sbc	r21, r21
    4eb0:	c9 2e       	mov	r12, r25
    4eb2:	da 2e       	mov	r13, r26
    4eb4:	eb 2e       	mov	r14, r27
    4eb6:	ff 24       	eor	r15, r15
    4eb8:	e7 fc       	sbrc	r14, 7
    4eba:	fa 94       	dec	r15
    4ebc:	8c 19       	sub	r24, r12
    4ebe:	9d 09       	sbc	r25, r13
    4ec0:	ae 09       	sbc	r26, r14
    4ec2:	bf 09       	sbc	r27, r15
    4ec4:	cc 24       	eor	r12, r12
    4ec6:	d2 2e       	mov	r13, r18
    4ec8:	e3 2e       	mov	r14, r19
    4eca:	f4 2e       	mov	r15, r20
    4ecc:	8c 0d       	add	r24, r12
    4ece:	9d 1d       	adc	r25, r13
    4ed0:	ae 1d       	adc	r26, r14
    4ed2:	bf 1d       	adc	r27, r15
    4ed4:	80 87       	std	Z+8, r24	; 0x08
    4ed6:	91 87       	std	Z+9, r25	; 0x09
    4ed8:	a2 87       	std	Z+10, r26	; 0x0a
    4eda:	b3 87       	std	Z+11, r27	; 0x0b
	
	while(!(ADCB.CH1.INTFLAGS & 0x01)) ;
    4edc:	e0 e4       	ldi	r30, 0x40	; 64
    4ede:	f2 e0       	ldi	r31, 0x02	; 2
    4ee0:	83 a5       	ldd	r24, Z+43	; 0x2b
    4ee2:	80 ff       	sbrs	r24, 0
    4ee4:	fd cf       	rjmp	.-6      	; 0x4ee0 <__vector_71+0x3b8>
	ADCB.CH1.INTFLAGS = 0x01;
    4ee6:	e0 e4       	ldi	r30, 0x40	; 64
    4ee8:	f2 e0       	ldi	r31, 0x02	; 2
    4eea:	81 e0       	ldi	r24, 0x01	; 1
    4eec:	83 a7       	std	Z+43, r24	; 0x2b
	scCurrentSample = ADCB.CH1RES - sCal.scCurrentOffset;
    4eee:	62 89       	ldd	r22, Z+18	; 0x12
    4ef0:	73 89       	ldd	r23, Z+19	; 0x13
    4ef2:	80 91 e8 29 	lds	r24, 0x29E8	; 0x8029e8 <sCal+0x6>
    4ef6:	90 91 e9 29 	lds	r25, 0x29E9	; 0x8029e9 <sCal+0x7>
	FILTER32(scCurrentSample, sSensorData.adc.h2a.scCurrentFiltered);
    4efa:	e0 e6       	ldi	r30, 0x60	; 96
    4efc:	f8 e2       	ldi	r31, 0x28	; 40
    4efe:	c4 84       	ldd	r12, Z+12	; 0x0c
    4f00:	d5 84       	ldd	r13, Z+13	; 0x0d
    4f02:	e6 84       	ldd	r14, Z+14	; 0x0e
    4f04:	f7 84       	ldd	r15, Z+15	; 0x0f
    4f06:	68 1b       	sub	r22, r24
    4f08:	79 0b       	sbc	r23, r25
    4f0a:	07 2e       	mov	r0, r23
    4f0c:	00 0c       	add	r0, r0
    4f0e:	88 0b       	sbc	r24, r24
    4f10:	99 0b       	sbc	r25, r25
    4f12:	8d 2c       	mov	r8, r13
    4f14:	9e 2c       	mov	r9, r14
    4f16:	af 2c       	mov	r10, r15
    4f18:	bb 24       	eor	r11, r11
    4f1a:	a7 fc       	sbrc	r10, 7
    4f1c:	ba 94       	dec	r11
    4f1e:	c8 18       	sub	r12, r8
    4f20:	d9 08       	sbc	r13, r9
    4f22:	ea 08       	sbc	r14, r10
    4f24:	fb 08       	sbc	r15, r11
    4f26:	88 24       	eor	r8, r8
    4f28:	96 2e       	mov	r9, r22
    4f2a:	a7 2e       	mov	r10, r23
    4f2c:	b8 2e       	mov	r11, r24
    4f2e:	c8 0c       	add	r12, r8
    4f30:	d9 1c       	adc	r13, r9
    4f32:	ea 1c       	adc	r14, r10
    4f34:	fb 1c       	adc	r15, r11
    4f36:	c4 86       	std	Z+12, r12	; 0x0c
    4f38:	d5 86       	std	Z+13, r13	; 0x0d
    4f3a:	e6 86       	std	Z+14, r14	; 0x0e
    4f3c:	f7 86       	std	Z+15, r15	; 0x0f

	scPower = ((int32_t) scVoltageSample) * ((int32_t) scCurrentSample);
    4f3e:	0e 94 de 37 	call	0x6fbc	; 0x6fbc <__mulsi3>
	FILTER32PWR(scPower, sSensorData.adc.h2a.scPowerFiltered);
    4f42:	c4 88       	ldd	r12, Z+20	; 0x14
    4f44:	d5 88       	ldd	r13, Z+21	; 0x15
    4f46:	e6 88       	ldd	r14, Z+22	; 0x16
    4f48:	f7 88       	ldd	r15, Z+23	; 0x17
    4f4a:	33 27       	eor	r19, r19
    4f4c:	f7 fc       	sbrc	r15, 7
    4f4e:	3a 95       	dec	r19
    4f50:	2f 2d       	mov	r18, r15
    4f52:	1e 2d       	mov	r17, r14
    4f54:	0d 2d       	mov	r16, r13
    4f56:	c0 1a       	sub	r12, r16
    4f58:	d1 0a       	sbc	r13, r17
    4f5a:	e2 0a       	sbc	r14, r18
    4f5c:	f3 0a       	sbc	r15, r19
    4f5e:	c6 0e       	add	r12, r22
    4f60:	d7 1e       	adc	r13, r23
    4f62:	e8 1e       	adc	r14, r24
    4f64:	f9 1e       	adc	r15, r25
    4f66:	c4 8a       	std	Z+20, r12	; 0x14
    4f68:	d5 8a       	std	Z+21, r13	; 0x15
    4f6a:	e6 8a       	std	Z+22, r14	; 0x16
    4f6c:	f7 8a       	std	Z+23, r15	; 0x17
	sSensorData.adc.h2a.scEnergy += scPower;
    4f6e:	6b 01       	movw	r12, r22
    4f70:	7c 01       	movw	r14, r24
    4f72:	ff 0c       	add	r15, r15
    4f74:	cc 08       	sbc	r12, r12
    4f76:	dc 2c       	mov	r13, r12
    4f78:	76 01       	movw	r14, r12
    4f7a:	26 2f       	mov	r18, r22
    4f7c:	37 2f       	mov	r19, r23
    4f7e:	48 2f       	mov	r20, r24
    4f80:	59 2f       	mov	r21, r25
    4f82:	6c 2d       	mov	r22, r12
    4f84:	7c 2d       	mov	r23, r12
    4f86:	8c 2d       	mov	r24, r12
    4f88:	9c 2d       	mov	r25, r12
    4f8a:	a0 a0       	ldd	r10, Z+32	; 0x20
    4f8c:	b1 a0       	ldd	r11, Z+33	; 0x21
    4f8e:	c2 a0       	ldd	r12, Z+34	; 0x22
    4f90:	d3 a0       	ldd	r13, Z+35	; 0x23
    4f92:	e4 a0       	ldd	r14, Z+36	; 0x24
    4f94:	f5 a0       	ldd	r15, Z+37	; 0x25
    4f96:	06 a1       	ldd	r16, Z+38	; 0x26
    4f98:	17 a1       	ldd	r17, Z+39	; 0x27
    4f9a:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__adddi3>
    4f9e:	20 a3       	std	Z+32, r18	; 0x20
    4fa0:	31 a3       	std	Z+33, r19	; 0x21
    4fa2:	42 a3       	std	Z+34, r20	; 0x22
    4fa4:	53 a3       	std	Z+35, r21	; 0x23
    4fa6:	64 a3       	std	Z+36, r22	; 0x24
    4fa8:	75 a3       	std	Z+37, r23	; 0x25
    4faa:	86 a3       	std	Z+38, r24	; 0x26
    4fac:	97 a3       	std	Z+39, r25	; 0x27
	
	if(sSensorData.adc.h2a.idealDiodeState != idealDiodePin) {
    4fae:	80 a5       	ldd	r24, Z+40	; 0x28
    4fb0:	78 16       	cp	r7, r24
    4fb2:	69 f0       	breq	.+26     	; 0x4fce <__vector_71+0x4a6>
		sSensorData.adc.h2a.idealDiodeState = idealDiodePin;
    4fb4:	70 a6       	std	Z+40, r7	; 0x28
		sSensorData.adc.h2a.idealDiodeTimestamp = sSessionCycleCount;
    4fb6:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    4fba:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    4fbe:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    4fc2:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    4fc6:	81 a7       	std	Z+41, r24	; 0x29
    4fc8:	92 a7       	std	Z+42, r25	; 0x2a
    4fca:	a3 a7       	std	Z+43, r26	; 0x2b
    4fcc:	b4 a7       	std	Z+44, r27	; 0x2c
	if(I_AM_EVA_L || I_AM_EVA_R)
		ISRReadADC_EVA();
	else
		ISRReadADC_H2A();
	
	while(!(ADCA.CH2.INTFLAGS & 0x01)) ;
    4fce:	e0 e0       	ldi	r30, 0x00	; 0
    4fd0:	f2 e0       	ldi	r31, 0x02	; 2
    4fd2:	83 a9       	ldd	r24, Z+51	; 0x33
    4fd4:	80 ff       	sbrs	r24, 0
    4fd6:	fd cf       	rjmp	.-6      	; 0x4fd2 <__vector_71+0x4aa>
	ADCA.CH2.INTFLAGS = 0x01;
    4fd8:	e0 e0       	ldi	r30, 0x00	; 0
    4fda:	f2 e0       	ldi	r31, 0x02	; 2
    4fdc:	81 e0       	ldi	r24, 0x01	; 1
    4fde:	83 ab       	std	Z+51, r24	; 0x33
	spRawSample = ADCA.CH2RES;
    4fe0:	84 89       	ldd	r24, Z+20	; 0x14
    4fe2:	95 89       	ldd	r25, Z+21	; 0x15
	if(spRawSample < SPEEDSENSOR_MIDWAY_VAL) {
    4fe4:	87 3d       	cpi	r24, 0xD7	; 215
    4fe6:	92 40       	sbci	r25, 0x02	; 2
    4fe8:	94 f4       	brge	.+36     	; 0x500e <__vector_71+0x4e6>
		sSpeedSensorPosDeglitchCounter = 0;
    4fea:	10 92 5f 28 	sts	0x285F, r1	; 0x80285f <sSpeedSensorPosDeglitchCounter.4881>
		if(sSpeedSensorPreviousState && ++sSpeedSensorNegDeglitchCounter >= SPEEDSENSOR_DEGLITCH)
    4fee:	80 91 5e 28 	lds	r24, 0x285E	; 0x80285e <sSpeedSensorPreviousState.4880>
    4ff2:	88 23       	and	r24, r24
    4ff4:	09 f4       	brne	.+2      	; 0x4ff8 <__vector_71+0x4d0>
    4ff6:	67 c0       	rjmp	.+206    	; 0x50c6 <__vector_71+0x59e>
    4ff8:	80 91 5d 28 	lds	r24, 0x285D	; 0x80285d <sSpeedSensorNegDeglitchCounter.4882>
    4ffc:	8f 5f       	subi	r24, 0xFF	; 255
    4ffe:	80 93 5d 28 	sts	0x285D, r24	; 0x80285d <sSpeedSensorNegDeglitchCounter.4882>
    5002:	85 30       	cpi	r24, 0x05	; 5
    5004:	08 f4       	brcc	.+2      	; 0x5008 <__vector_71+0x4e0>
    5006:	5f c0       	rjmp	.+190    	; 0x50c6 <__vector_71+0x59e>
			sSpeedSensorPreviousState = 0;
    5008:	10 92 5e 28 	sts	0x285E, r1	; 0x80285e <sSpeedSensorPreviousState.4880>
    500c:	5c c0       	rjmp	.+184    	; 0x50c6 <__vector_71+0x59e>
	}
	else {
		sSpeedSensorNegDeglitchCounter = 0;
    500e:	10 92 5d 28 	sts	0x285D, r1	; 0x80285d <sSpeedSensorNegDeglitchCounter.4882>
		if(!sSpeedSensorPreviousState && ++sSpeedSensorPosDeglitchCounter >= SPEEDSENSOR_DEGLITCH) {
    5012:	80 91 5e 28 	lds	r24, 0x285E	; 0x80285e <sSpeedSensorPreviousState.4880>
    5016:	81 11       	cpse	r24, r1
    5018:	56 c0       	rjmp	.+172    	; 0x50c6 <__vector_71+0x59e>
    501a:	80 91 5f 28 	lds	r24, 0x285F	; 0x80285f <sSpeedSensorPosDeglitchCounter.4881>
    501e:	8f 5f       	subi	r24, 0xFF	; 255
    5020:	80 93 5f 28 	sts	0x285F, r24	; 0x80285f <sSpeedSensorPosDeglitchCounter.4881>
    5024:	85 30       	cpi	r24, 0x05	; 5
    5026:	08 f4       	brcc	.+2      	; 0x502a <__vector_71+0x502>
    5028:	4e c0       	rjmp	.+156    	; 0x50c6 <__vector_71+0x59e>
			sSpeedSensorPreviousState = 1;
    502a:	81 e0       	ldi	r24, 0x01	; 1
    502c:	80 93 5e 28 	sts	0x285E, r24	; 0x80285e <sSpeedSensorPreviousState.4880>
			sSensorData.speedSensorPositivePulsesSeen++;
    5030:	ed eb       	ldi	r30, 0xBD	; 189
    5032:	f8 e2       	ldi	r31, 0x28	; 40
    5034:	80 81       	ld	r24, Z
    5036:	91 81       	ldd	r25, Z+1	; 0x01
    5038:	a2 81       	ldd	r26, Z+2	; 0x02
    503a:	b3 81       	ldd	r27, Z+3	; 0x03
    503c:	01 96       	adiw	r24, 0x01	; 1
    503e:	a1 1d       	adc	r26, r1
    5040:	b1 1d       	adc	r27, r1
    5042:	80 83       	st	Z, r24
    5044:	91 83       	std	Z+1, r25	; 0x01
    5046:	a2 83       	std	Z+2, r26	; 0x02
    5048:	b3 83       	std	Z+3, r27	; 0x03
			if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp < SPEEDSENSOR_MAX_INTERVAL)
    504a:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    504e:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    5052:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    5056:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    505a:	40 91 59 28 	lds	r20, 0x2859	; 0x802859 <sSpeedSensorPreviousValidEdgeTimestamp.4879>
    505e:	50 91 5a 28 	lds	r21, 0x285A	; 0x80285a <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x1>
    5062:	60 91 5b 28 	lds	r22, 0x285B	; 0x80285b <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x2>
    5066:	70 91 5c 28 	lds	r23, 0x285C	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x3>
    506a:	84 1b       	sub	r24, r20
    506c:	95 0b       	sbc	r25, r21
    506e:	a6 0b       	sbc	r26, r22
    5070:	b7 0b       	sbc	r27, r23
    5072:	82 38       	cpi	r24, 0x82	; 130
    5074:	96 40       	sbci	r25, 0x06	; 6
    5076:	a1 05       	cpc	r26, r1
    5078:	b1 05       	cpc	r27, r1
    507a:	78 f4       	brcc	.+30     	; 0x509a <__vector_71+0x572>
				sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    507c:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    5080:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    5084:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    5088:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    508c:	84 1b       	sub	r24, r20
    508e:	95 0b       	sbc	r25, r21
    5090:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4878>
    5094:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4878+0x1>
    5098:	06 c0       	rjmp	.+12     	; 0x50a6 <__vector_71+0x57e>
			else
				sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    509a:	82 e8       	ldi	r24, 0x82	; 130
    509c:	96 e0       	ldi	r25, 0x06	; 6
    509e:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4878>
    50a2:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4878+0x1>
			sSpeedSensorPreviousValidEdgeTimestamp = sSessionCycleCount;
    50a6:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    50aa:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    50ae:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    50b2:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    50b6:	80 93 59 28 	sts	0x2859, r24	; 0x802859 <sSpeedSensorPreviousValidEdgeTimestamp.4879>
    50ba:	90 93 5a 28 	sts	0x285A, r25	; 0x80285a <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x1>
    50be:	a0 93 5b 28 	sts	0x285B, r26	; 0x80285b <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x2>
    50c2:	b0 93 5c 28 	sts	0x285C, r27	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x3>
		}
	}
	
	if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) SPEEDSENSOR_MAX_INTERVAL)
    50c6:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    50ca:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    50ce:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    50d2:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    50d6:	40 91 59 28 	lds	r20, 0x2859	; 0x802859 <sSpeedSensorPreviousValidEdgeTimestamp.4879>
    50da:	50 91 5a 28 	lds	r21, 0x285A	; 0x80285a <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x1>
    50de:	60 91 5b 28 	lds	r22, 0x285B	; 0x80285b <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x2>
    50e2:	70 91 5c 28 	lds	r23, 0x285C	; 0x80285c <sSpeedSensorPreviousValidEdgeTimestamp.4879+0x3>
    50e6:	84 1b       	sub	r24, r20
    50e8:	95 0b       	sbc	r25, r21
    50ea:	a6 0b       	sbc	r26, r22
    50ec:	b7 0b       	sbc	r27, r23
    50ee:	83 38       	cpi	r24, 0x83	; 131
    50f0:	96 40       	sbci	r25, 0x06	; 6
    50f2:	a1 05       	cpc	r26, r1
    50f4:	b1 05       	cpc	r27, r1
    50f6:	38 f0       	brcs	.+14     	; 0x5106 <__vector_71+0x5de>
		sSpeedSensorLastValidInterval = SPEEDSENSOR_MAX_INTERVAL;
    50f8:	82 e8       	ldi	r24, 0x82	; 130
    50fa:	96 e0       	ldi	r25, 0x06	; 6
    50fc:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4878>
    5100:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4878+0x1>
    5104:	27 c0       	rjmp	.+78     	; 0x5154 <__vector_71+0x62c>
	else if(sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp > (uint32_t) sSpeedSensorLastValidInterval)
    5106:	c0 90 e2 28 	lds	r12, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    510a:	d0 90 e3 28 	lds	r13, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    510e:	e0 90 e4 28 	lds	r14, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    5112:	f0 90 e5 28 	lds	r15, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    5116:	c4 1a       	sub	r12, r20
    5118:	d5 0a       	sbc	r13, r21
    511a:	e6 0a       	sbc	r14, r22
    511c:	f7 0a       	sbc	r15, r23
    511e:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sSpeedSensorLastValidInterval.4878>
    5122:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <sSpeedSensorLastValidInterval.4878+0x1>
    5126:	09 2e       	mov	r0, r25
    5128:	00 0c       	add	r0, r0
    512a:	aa 0b       	sbc	r26, r26
    512c:	bb 0b       	sbc	r27, r27
    512e:	8c 15       	cp	r24, r12
    5130:	9d 05       	cpc	r25, r13
    5132:	ae 05       	cpc	r26, r14
    5134:	bf 05       	cpc	r27, r15
    5136:	70 f4       	brcc	.+28     	; 0x5154 <__vector_71+0x62c>
		sSpeedSensorLastValidInterval = sSessionCycleCount - sSpeedSensorPreviousValidEdgeTimestamp;
    5138:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    513c:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    5140:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    5144:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    5148:	84 1b       	sub	r24, r20
    514a:	95 0b       	sbc	r25, r21
    514c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sSpeedSensorLastValidInterval.4878>
    5150:	90 93 07 20 	sts	0x2007, r25	; 0x802007 <sSpeedSensorLastValidInterval.4878+0x1>
		
	FILTER32(sSpeedSensorLastValidInterval, sSensorData.speedSensorPulseInterval);
    5154:	e9 eb       	ldi	r30, 0xB9	; 185
    5156:	f8 e2       	ldi	r31, 0x28	; 40
    5158:	80 81       	ld	r24, Z
    515a:	91 81       	ldd	r25, Z+1	; 0x01
    515c:	a2 81       	ldd	r26, Z+2	; 0x02
    515e:	b3 81       	ldd	r27, Z+3	; 0x03
    5160:	49 2f       	mov	r20, r25
    5162:	5a 2f       	mov	r21, r26
    5164:	6b 2f       	mov	r22, r27
    5166:	77 27       	eor	r23, r23
    5168:	67 fd       	sbrc	r22, 7
    516a:	7a 95       	dec	r23
    516c:	8c 01       	movw	r16, r24
    516e:	9d 01       	movw	r18, r26
    5170:	04 1b       	sub	r16, r20
    5172:	15 0b       	sbc	r17, r21
    5174:	26 0b       	sbc	r18, r22
    5176:	37 0b       	sbc	r19, r23
    5178:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sSpeedSensorLastValidInterval.4878>
    517c:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <sSpeedSensorLastValidInterval.4878+0x1>
    5180:	09 2e       	mov	r0, r25
    5182:	00 0c       	add	r0, r0
    5184:	aa 0b       	sbc	r26, r26
    5186:	bb 0b       	sbc	r27, r27
    5188:	ba 2f       	mov	r27, r26
    518a:	a9 2f       	mov	r26, r25
    518c:	98 2f       	mov	r25, r24
    518e:	88 27       	eor	r24, r24
    5190:	80 0f       	add	r24, r16
    5192:	91 1f       	adc	r25, r17
    5194:	a2 1f       	adc	r26, r18
    5196:	b3 1f       	adc	r27, r19
    5198:	80 83       	st	Z, r24
    519a:	91 83       	std	Z+1, r25	; 0x01
    519c:	a2 83       	std	Z+2, r26	; 0x02
    519e:	b3 83       	std	Z+3, r27	; 0x03

	while(!(ADCB.CH2.INTFLAGS & 0x01)) ;
    51a0:	e0 e4       	ldi	r30, 0x40	; 64
    51a2:	f2 e0       	ldi	r31, 0x02	; 2
    51a4:	83 a9       	ldd	r24, Z+51	; 0x33
    51a6:	80 ff       	sbrs	r24, 0
    51a8:	fd cf       	rjmp	.-6      	; 0x51a4 <__vector_71+0x67c>
	ADCB.CH2.INTFLAGS = 0x01;
    51aa:	e0 e4       	ldi	r30, 0x40	; 64
    51ac:	f2 e0       	ldi	r31, 0x02	; 2
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	83 ab       	std	Z+51, r24	; 0x33
	driverTempSample = ADCB.CH2RES;
    51b2:	84 89       	ldd	r24, Z+20	; 0x14
    51b4:	95 89       	ldd	r25, Z+21	; 0x15
	FILTER32(driverTempSample, sSensorData.driverTempFiltered);
    51b6:	e0 e6       	ldi	r30, 0x60	; 96
    51b8:	f8 e2       	ldi	r31, 0x28	; 40
    51ba:	45 a5       	ldd	r20, Z+45	; 0x2d
    51bc:	56 a5       	ldd	r21, Z+46	; 0x2e
    51be:	67 a5       	ldd	r22, Z+47	; 0x2f
    51c0:	70 a9       	ldd	r23, Z+48	; 0x30
    51c2:	c5 2e       	mov	r12, r21
    51c4:	d6 2e       	mov	r13, r22
    51c6:	e7 2e       	mov	r14, r23
    51c8:	ff 24       	eor	r15, r15
    51ca:	e7 fc       	sbrc	r14, 7
    51cc:	fa 94       	dec	r15
    51ce:	4c 19       	sub	r20, r12
    51d0:	5d 09       	sbc	r21, r13
    51d2:	6e 09       	sbc	r22, r14
    51d4:	7f 09       	sbc	r23, r15
    51d6:	09 2e       	mov	r0, r25
    51d8:	00 0c       	add	r0, r0
    51da:	aa 0b       	sbc	r26, r26
    51dc:	bb 0b       	sbc	r27, r27
    51de:	ba 2f       	mov	r27, r26
    51e0:	a9 2f       	mov	r26, r25
    51e2:	98 2f       	mov	r25, r24
    51e4:	88 27       	eor	r24, r24
    51e6:	84 0f       	add	r24, r20
    51e8:	95 1f       	adc	r25, r21
    51ea:	a6 1f       	adc	r26, r22
    51ec:	b7 1f       	adc	r27, r23
    51ee:	85 a7       	std	Z+45, r24	; 0x2d
    51f0:	96 a7       	std	Z+46, r25	; 0x2e
    51f2:	a7 a7       	std	Z+47, r26	; 0x2f
    51f4:	b0 ab       	std	Z+48, r27	; 0x30
	
	while(!(ADCA.CH3.INTFLAGS & 0x01)) ;
    51f6:	e0 e0       	ldi	r30, 0x00	; 0
    51f8:	f2 e0       	ldi	r31, 0x02	; 2
    51fa:	83 ad       	ldd	r24, Z+59	; 0x3b
    51fc:	80 ff       	sbrs	r24, 0
    51fe:	fd cf       	rjmp	.-6      	; 0x51fa <__vector_71+0x6d2>
	ADCA.CH3.INTFLAGS = 0x01;
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <__TEXT_REGION_LENGTH__+0x70023b>
	while(!(ADCB.CH3.INTFLAGS & 0x01)) ;
    5206:	e0 e4       	ldi	r30, 0x40	; 64
    5208:	f2 e0       	ldi	r31, 0x02	; 2
    520a:	83 ad       	ldd	r24, Z+59	; 0x3b
    520c:	80 ff       	sbrs	r24, 0
    520e:	fd cf       	rjmp	.-6      	; 0x520a <__vector_71+0x6e2>
	ADCB.CH3.INTFLAGS = 0x01;
    5210:	81 e0       	ldi	r24, 0x01	; 1
    5212:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <__TEXT_REGION_LENGTH__+0x70027b>
	if(sSamplingVin) {
    5216:	80 91 58 28 	lds	r24, 0x2858	; 0x802858 <sSamplingVin.4874>
    521a:	88 23       	and	r24, r24
    521c:	09 f4       	brne	.+2      	; 0x5220 <__vector_71+0x6f8>
    521e:	c1 c0       	rjmp	.+386    	; 0x53a2 <__vector_71+0x87a>
		inVoltageSample = ADCA.CH3RES - sCal.inVoltageOffset;
    5220:	61 2c       	mov	r6, r1
    5222:	68 94       	set
    5224:	77 24       	eor	r7, r7
    5226:	71 f8       	bld	r7, 1
    5228:	d3 01       	movw	r26, r6
    522a:	56 96       	adiw	r26, 0x16	; 22
    522c:	2d 91       	ld	r18, X+
    522e:	3c 91       	ld	r19, X
    5230:	57 97       	sbiw	r26, 0x17	; 23
    5232:	a2 ee       	ldi	r26, 0xE2	; 226
    5234:	b9 e2       	ldi	r27, 0x29	; 41
    5236:	5c 96       	adiw	r26, 0x1c	; 28
    5238:	8d 91       	ld	r24, X+
    523a:	9c 91       	ld	r25, X
    523c:	5d 97       	sbiw	r26, 0x1d	; 29
		FILTER32(inVoltageSample, sSensorData.inVoltageFiltered);
    523e:	e0 e6       	ldi	r30, 0x60	; 96
    5240:	f8 e2       	ldi	r31, 0x28	; 40
    5242:	c1 ac       	ldd	r12, Z+57	; 0x39
    5244:	d2 ac       	ldd	r13, Z+58	; 0x3a
    5246:	e3 ac       	ldd	r14, Z+59	; 0x3b
    5248:	f4 ac       	ldd	r15, Z+60	; 0x3c
    524a:	28 1b       	sub	r18, r24
    524c:	39 0b       	sbc	r19, r25
    524e:	03 2e       	mov	r0, r19
    5250:	00 0c       	add	r0, r0
    5252:	44 0b       	sbc	r20, r20
    5254:	55 0b       	sbc	r21, r21
    5256:	8d 2c       	mov	r8, r13
    5258:	9e 2c       	mov	r9, r14
    525a:	af 2c       	mov	r10, r15
    525c:	bb 24       	eor	r11, r11
    525e:	a7 fc       	sbrc	r10, 7
    5260:	ba 94       	dec	r11
    5262:	c8 18       	sub	r12, r8
    5264:	d9 08       	sbc	r13, r9
    5266:	ea 08       	sbc	r14, r10
    5268:	fb 08       	sbc	r15, r11
    526a:	88 24       	eor	r8, r8
    526c:	92 2e       	mov	r9, r18
    526e:	a3 2e       	mov	r10, r19
    5270:	b4 2e       	mov	r11, r20
    5272:	c8 0c       	add	r12, r8
    5274:	d9 1c       	adc	r13, r9
    5276:	ea 1c       	adc	r14, r10
    5278:	fb 1c       	adc	r15, r11
    527a:	c1 ae       	std	Z+57, r12	; 0x39
    527c:	d2 ae       	std	Z+58, r13	; 0x3a
    527e:	e3 ae       	std	Z+59, r14	; 0x3b
    5280:	f4 ae       	std	Z+60, r15	; 0x3c
		inCurrentSample = ADCB.CH3RES - sCal.inCurrentOffset;
    5282:	e0 e4       	ldi	r30, 0x40	; 64
    5284:	f2 e0       	ldi	r31, 0x02	; 2
    5286:	66 89       	ldd	r22, Z+22	; 0x16
    5288:	77 89       	ldd	r23, Z+23	; 0x17
    528a:	5e 96       	adiw	r26, 0x1e	; 30
    528c:	8d 91       	ld	r24, X+
    528e:	9c 91       	ld	r25, X
    5290:	5f 97       	sbiw	r26, 0x1f	; 31
		FILTER32(inCurrentSample, sSensorData.inCurrentFiltered);
    5292:	ad e9       	ldi	r26, 0x9D	; 157
    5294:	b8 e2       	ldi	r27, 0x28	; 40
    5296:	cd 90       	ld	r12, X+
    5298:	dd 90       	ld	r13, X+
    529a:	ed 90       	ld	r14, X+
    529c:	fc 90       	ld	r15, X
    529e:	13 97       	sbiw	r26, 0x03	; 3
    52a0:	68 1b       	sub	r22, r24
    52a2:	79 0b       	sbc	r23, r25
    52a4:	07 2e       	mov	r0, r23
    52a6:	00 0c       	add	r0, r0
    52a8:	88 0b       	sbc	r24, r24
    52aa:	99 0b       	sbc	r25, r25
    52ac:	8d 2c       	mov	r8, r13
    52ae:	9e 2c       	mov	r9, r14
    52b0:	af 2c       	mov	r10, r15
    52b2:	bb 24       	eor	r11, r11
    52b4:	a7 fc       	sbrc	r10, 7
    52b6:	ba 94       	dec	r11
    52b8:	c8 18       	sub	r12, r8
    52ba:	d9 08       	sbc	r13, r9
    52bc:	ea 08       	sbc	r14, r10
    52be:	fb 08       	sbc	r15, r11
    52c0:	88 24       	eor	r8, r8
    52c2:	96 2e       	mov	r9, r22
    52c4:	a7 2e       	mov	r10, r23
    52c6:	b8 2e       	mov	r11, r24
    52c8:	c8 0c       	add	r12, r8
    52ca:	d9 1c       	adc	r13, r9
    52cc:	ea 1c       	adc	r14, r10
    52ce:	fb 1c       	adc	r15, r11
    52d0:	cd 92       	st	X+, r12
    52d2:	dd 92       	st	X+, r13
    52d4:	ed 92       	st	X+, r14
    52d6:	fc 92       	st	X, r15
    52d8:	13 97       	sbiw	r26, 0x03	; 3
		inPower = ((int32_t) inVoltageSample) * ((int32_t) inCurrentSample);
    52da:	0e 94 de 37 	call	0x6fbc	; 0x6fbc <__mulsi3>
		FILTER32PWR(inPower, sSensorData.inPowerFiltered);
    52de:	a5 ea       	ldi	r26, 0xA5	; 165
    52e0:	b8 e2       	ldi	r27, 0x28	; 40
    52e2:	cd 90       	ld	r12, X+
    52e4:	dd 90       	ld	r13, X+
    52e6:	ed 90       	ld	r14, X+
    52e8:	fc 90       	ld	r15, X
    52ea:	13 97       	sbiw	r26, 0x03	; 3
    52ec:	33 27       	eor	r19, r19
    52ee:	f7 fc       	sbrc	r15, 7
    52f0:	3a 95       	dec	r19
    52f2:	2f 2d       	mov	r18, r15
    52f4:	1e 2d       	mov	r17, r14
    52f6:	0d 2d       	mov	r16, r13
    52f8:	c0 1a       	sub	r12, r16
    52fa:	d1 0a       	sbc	r13, r17
    52fc:	e2 0a       	sbc	r14, r18
    52fe:	f3 0a       	sbc	r15, r19
    5300:	c6 0e       	add	r12, r22
    5302:	d7 1e       	adc	r13, r23
    5304:	e8 1e       	adc	r14, r24
    5306:	f9 1e       	adc	r15, r25
    5308:	cd 92       	st	X+, r12
    530a:	dd 92       	st	X+, r13
    530c:	ed 92       	st	X+, r14
    530e:	fc 92       	st	X, r15
    5310:	13 97       	sbiw	r26, 0x03	; 3
		sSensorData.inEnergy +=  2 * inPower;
    5312:	a1 eb       	ldi	r26, 0xB1	; 177
    5314:	b8 e2       	ldi	r27, 0x28	; 40
    5316:	66 0f       	add	r22, r22
    5318:	77 1f       	adc	r23, r23
    531a:	88 1f       	adc	r24, r24
    531c:	99 1f       	adc	r25, r25
    531e:	6b 01       	movw	r12, r22
    5320:	7c 01       	movw	r14, r24
    5322:	ff 0c       	add	r15, r15
    5324:	cc 08       	sbc	r12, r12
    5326:	dc 2c       	mov	r13, r12
    5328:	76 01       	movw	r14, r12
    532a:	26 2f       	mov	r18, r22
    532c:	37 2f       	mov	r19, r23
    532e:	48 2f       	mov	r20, r24
    5330:	59 2f       	mov	r21, r25
    5332:	6c 2d       	mov	r22, r12
    5334:	7c 2d       	mov	r23, r12
    5336:	8c 2d       	mov	r24, r12
    5338:	9c 2d       	mov	r25, r12
    533a:	ac 90       	ld	r10, X
    533c:	11 96       	adiw	r26, 0x01	; 1
    533e:	bc 90       	ld	r11, X
    5340:	11 97       	sbiw	r26, 0x01	; 1
    5342:	12 96       	adiw	r26, 0x02	; 2
    5344:	cc 90       	ld	r12, X
    5346:	12 97       	sbiw	r26, 0x02	; 2
    5348:	13 96       	adiw	r26, 0x03	; 3
    534a:	dc 90       	ld	r13, X
    534c:	13 97       	sbiw	r26, 0x03	; 3
    534e:	14 96       	adiw	r26, 0x04	; 4
    5350:	ec 90       	ld	r14, X
    5352:	14 97       	sbiw	r26, 0x04	; 4
    5354:	15 96       	adiw	r26, 0x05	; 5
    5356:	fc 90       	ld	r15, X
    5358:	15 97       	sbiw	r26, 0x05	; 5
    535a:	16 96       	adiw	r26, 0x06	; 6
    535c:	0c 91       	ld	r16, X
    535e:	16 97       	sbiw	r26, 0x06	; 6
    5360:	17 96       	adiw	r26, 0x07	; 7
    5362:	1c 91       	ld	r17, X
    5364:	17 97       	sbiw	r26, 0x07	; 7
    5366:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__adddi3>
    536a:	2c 93       	st	X, r18
    536c:	11 96       	adiw	r26, 0x01	; 1
    536e:	3c 93       	st	X, r19
    5370:	11 97       	sbiw	r26, 0x01	; 1
    5372:	12 96       	adiw	r26, 0x02	; 2
    5374:	4c 93       	st	X, r20
    5376:	12 97       	sbiw	r26, 0x02	; 2
    5378:	13 96       	adiw	r26, 0x03	; 3
    537a:	5c 93       	st	X, r21
    537c:	13 97       	sbiw	r26, 0x03	; 3
    537e:	14 96       	adiw	r26, 0x04	; 4
    5380:	6c 93       	st	X, r22
    5382:	14 97       	sbiw	r26, 0x04	; 4
    5384:	15 96       	adiw	r26, 0x05	; 5
    5386:	7c 93       	st	X, r23
    5388:	15 97       	sbiw	r26, 0x05	; 5
    538a:	16 96       	adiw	r26, 0x06	; 6
    538c:	8c 93       	st	X, r24
    538e:	16 97       	sbiw	r26, 0x06	; 6
    5390:	17 96       	adiw	r26, 0x07	; 7
    5392:	9c 93       	st	X, r25
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN12_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_VMOTOR on PB4 vs V33/2 on PA1 */
    5394:	81 e6       	ldi	r24, 0x61	; 97
    5396:	d3 01       	movw	r26, r6
    5398:	d9 96       	adiw	r26, 0x39	; 57
    539a:	8c 93       	st	X, r24
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_IMOTOR on PB5 vs V33/2 on PB1 */
    539c:	89 e2       	ldi	r24, 0x29	; 41
    539e:	81 af       	std	Z+57, r24	; 0x39
    53a0:	a0 c0       	rjmp	.+320    	; 0x54e2 <__vector_71+0x9ba>
	}
	else {
		motorVoltageSample = ADCA.CH3RES - sCal.motorVoltageOffset;
    53a2:	61 2c       	mov	r6, r1
    53a4:	68 94       	set
    53a6:	77 24       	eor	r7, r7
    53a8:	71 f8       	bld	r7, 1
    53aa:	f3 01       	movw	r30, r6
    53ac:	26 89       	ldd	r18, Z+22	; 0x16
    53ae:	37 89       	ldd	r19, Z+23	; 0x17
    53b0:	a2 ee       	ldi	r26, 0xE2	; 226
    53b2:	b9 e2       	ldi	r27, 0x29	; 41
    53b4:	58 96       	adiw	r26, 0x18	; 24
    53b6:	8d 91       	ld	r24, X+
    53b8:	9c 91       	ld	r25, X
    53ba:	59 97       	sbiw	r26, 0x19	; 25
		FILTER32(motorVoltageSample, sSensorData.motorVoltageFiltered);	
    53bc:	e0 e6       	ldi	r30, 0x60	; 96
    53be:	f8 e2       	ldi	r31, 0x28	; 40
    53c0:	c1 a8       	ldd	r12, Z+49	; 0x31
    53c2:	d2 a8       	ldd	r13, Z+50	; 0x32
    53c4:	e3 a8       	ldd	r14, Z+51	; 0x33
    53c6:	f4 a8       	ldd	r15, Z+52	; 0x34
    53c8:	28 1b       	sub	r18, r24
    53ca:	39 0b       	sbc	r19, r25
    53cc:	03 2e       	mov	r0, r19
    53ce:	00 0c       	add	r0, r0
    53d0:	44 0b       	sbc	r20, r20
    53d2:	55 0b       	sbc	r21, r21
    53d4:	8d 2c       	mov	r8, r13
    53d6:	9e 2c       	mov	r9, r14
    53d8:	af 2c       	mov	r10, r15
    53da:	bb 24       	eor	r11, r11
    53dc:	a7 fc       	sbrc	r10, 7
    53de:	ba 94       	dec	r11
    53e0:	c8 18       	sub	r12, r8
    53e2:	d9 08       	sbc	r13, r9
    53e4:	ea 08       	sbc	r14, r10
    53e6:	fb 08       	sbc	r15, r11
    53e8:	88 24       	eor	r8, r8
    53ea:	92 2e       	mov	r9, r18
    53ec:	a3 2e       	mov	r10, r19
    53ee:	b4 2e       	mov	r11, r20
    53f0:	c8 0c       	add	r12, r8
    53f2:	d9 1c       	adc	r13, r9
    53f4:	ea 1c       	adc	r14, r10
    53f6:	fb 1c       	adc	r15, r11
    53f8:	c1 aa       	std	Z+49, r12	; 0x31
    53fa:	d2 aa       	std	Z+50, r13	; 0x32
    53fc:	e3 aa       	std	Z+51, r14	; 0x33
    53fe:	f4 aa       	std	Z+52, r15	; 0x34
		motorCurrentSample = ADCB.CH3RES - sCal.motorCurrentOffset;
    5400:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <__TEXT_REGION_LENGTH__+0x700256>
    5404:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <__TEXT_REGION_LENGTH__+0x700257>
    5408:	5a 96       	adiw	r26, 0x1a	; 26
    540a:	8d 91       	ld	r24, X+
    540c:	9c 91       	ld	r25, X
    540e:	5b 97       	sbiw	r26, 0x1b	; 27
		FILTER32(motorCurrentSample, sSensorData.motorCurrentFiltered);
    5410:	c5 a8       	ldd	r12, Z+53	; 0x35
    5412:	d6 a8       	ldd	r13, Z+54	; 0x36
    5414:	e7 a8       	ldd	r14, Z+55	; 0x37
    5416:	f0 ac       	ldd	r15, Z+56	; 0x38
    5418:	68 1b       	sub	r22, r24
    541a:	79 0b       	sbc	r23, r25
    541c:	07 2e       	mov	r0, r23
    541e:	00 0c       	add	r0, r0
    5420:	88 0b       	sbc	r24, r24
    5422:	99 0b       	sbc	r25, r25
    5424:	8d 2c       	mov	r8, r13
    5426:	9e 2c       	mov	r9, r14
    5428:	af 2c       	mov	r10, r15
    542a:	bb 24       	eor	r11, r11
    542c:	a7 fc       	sbrc	r10, 7
    542e:	ba 94       	dec	r11
    5430:	c8 18       	sub	r12, r8
    5432:	d9 08       	sbc	r13, r9
    5434:	ea 08       	sbc	r14, r10
    5436:	fb 08       	sbc	r15, r11
    5438:	88 24       	eor	r8, r8
    543a:	96 2e       	mov	r9, r22
    543c:	a7 2e       	mov	r10, r23
    543e:	b8 2e       	mov	r11, r24
    5440:	c8 0c       	add	r12, r8
    5442:	d9 1c       	adc	r13, r9
    5444:	ea 1c       	adc	r14, r10
    5446:	fb 1c       	adc	r15, r11
    5448:	c5 aa       	std	Z+53, r12	; 0x35
    544a:	d6 aa       	std	Z+54, r13	; 0x36
    544c:	e7 aa       	std	Z+55, r14	; 0x37
    544e:	f0 ae       	std	Z+56, r15	; 0x38
		motorPower = ((int32_t) motorVoltageSample) * ((int32_t) motorCurrentSample);
    5450:	0e 94 de 37 	call	0x6fbc	; 0x6fbc <__mulsi3>
		FILTER32PWR(motorPower, sSensorData.motorPowerFiltered);
    5454:	e1 ea       	ldi	r30, 0xA1	; 161
    5456:	f8 e2       	ldi	r31, 0x28	; 40
    5458:	c0 80       	ld	r12, Z
    545a:	d1 80       	ldd	r13, Z+1	; 0x01
    545c:	e2 80       	ldd	r14, Z+2	; 0x02
    545e:	f3 80       	ldd	r15, Z+3	; 0x03
    5460:	33 27       	eor	r19, r19
    5462:	f7 fc       	sbrc	r15, 7
    5464:	3a 95       	dec	r19
    5466:	2f 2d       	mov	r18, r15
    5468:	1e 2d       	mov	r17, r14
    546a:	0d 2d       	mov	r16, r13
    546c:	c0 1a       	sub	r12, r16
    546e:	d1 0a       	sbc	r13, r17
    5470:	e2 0a       	sbc	r14, r18
    5472:	f3 0a       	sbc	r15, r19
    5474:	c6 0e       	add	r12, r22
    5476:	d7 1e       	adc	r13, r23
    5478:	e8 1e       	adc	r14, r24
    547a:	f9 1e       	adc	r15, r25
    547c:	c0 82       	st	Z, r12
    547e:	d1 82       	std	Z+1, r13	; 0x01
    5480:	e2 82       	std	Z+2, r14	; 0x02
    5482:	f3 82       	std	Z+3, r15	; 0x03
		sSensorData.motorEnergy += 2 * motorPower;
    5484:	e9 ea       	ldi	r30, 0xA9	; 169
    5486:	f8 e2       	ldi	r31, 0x28	; 40
    5488:	dc 01       	movw	r26, r24
    548a:	cb 01       	movw	r24, r22
    548c:	88 0f       	add	r24, r24
    548e:	99 1f       	adc	r25, r25
    5490:	aa 1f       	adc	r26, r26
    5492:	bb 1f       	adc	r27, r27
    5494:	6c 01       	movw	r12, r24
    5496:	7d 01       	movw	r14, r26
    5498:	ff 0c       	add	r15, r15
    549a:	cc 08       	sbc	r12, r12
    549c:	dc 2c       	mov	r13, r12
    549e:	76 01       	movw	r14, r12
    54a0:	28 2f       	mov	r18, r24
    54a2:	39 2f       	mov	r19, r25
    54a4:	4a 2f       	mov	r20, r26
    54a6:	5b 2f       	mov	r21, r27
    54a8:	6c 2d       	mov	r22, r12
    54aa:	7c 2d       	mov	r23, r12
    54ac:	8c 2d       	mov	r24, r12
    54ae:	9c 2d       	mov	r25, r12
    54b0:	a0 80       	ld	r10, Z
    54b2:	b1 80       	ldd	r11, Z+1	; 0x01
    54b4:	c2 80       	ldd	r12, Z+2	; 0x02
    54b6:	d3 80       	ldd	r13, Z+3	; 0x03
    54b8:	e4 80       	ldd	r14, Z+4	; 0x04
    54ba:	f5 80       	ldd	r15, Z+5	; 0x05
    54bc:	06 81       	ldd	r16, Z+6	; 0x06
    54be:	17 81       	ldd	r17, Z+7	; 0x07
    54c0:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__adddi3>
    54c4:	20 83       	st	Z, r18
    54c6:	31 83       	std	Z+1, r19	; 0x01
    54c8:	42 83       	std	Z+2, r20	; 0x02
    54ca:	53 83       	std	Z+3, r21	; 0x03
    54cc:	64 83       	std	Z+4, r22	; 0x04
    54ce:	75 83       	std	Z+5, r23	; 0x05
    54d0:	86 83       	std	Z+6, r24	; 0x06
    54d2:	97 83       	std	Z+7, r25	; 0x07
		ADCA.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN11_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure ADC_Vin on PB3 vs V33/2 on PA1 */
    54d4:	89 e5       	ldi	r24, 0x59	; 89
    54d6:	d3 01       	movw	r26, r6
    54d8:	d9 96       	adiw	r26, 0x39	; 57
    54da:	8c 93       	st	X, r24
		ADCB.CH3.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_PIN1_gc; /* Next cycle, measure Iin on PB7 vs V33/2 on PB1 */
    54dc:	89 e3       	ldi	r24, 0x39	; 57
    54de:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <__TEXT_REGION_LENGTH__+0x700279>
	}
	sSamplingVin = !sSamplingVin;
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	90 91 58 28 	lds	r25, 0x2858	; 0x802858 <sSamplingVin.4874>
    54e8:	91 11       	cpse	r25, r1
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	80 93 58 28 	sts	0x2858, r24	; 0x802858 <sSamplingVin.4874>

	/* PWM frequency and duty cycle */
	if(pwmEn) {
    54f0:	31 10       	cpse	r3, r1
    54f2:	2e c0       	rjmp	.+92     	; 0x5550 <__vector_71+0xa28>
		sSensorData.pwmDutyCycle -= sSensorData.pwmDutyCycle >> 8;
    54f4:	80 91 d2 28 	lds	r24, 0x28D2	; 0x8028d2 <sSensorData+0x72>
    54f8:	90 91 d3 28 	lds	r25, 0x28D3	; 0x8028d3 <sSensorData+0x73>
    54fc:	29 2f       	mov	r18, r25
    54fe:	33 27       	eor	r19, r19
    5500:	82 1b       	sub	r24, r18
    5502:	93 0b       	sbc	r25, r19
		if(pwm)
    5504:	26 fc       	sbrc	r2, 6
    5506:	05 c0       	rjmp	.+10     	; 0x5512 <__vector_71+0x9ea>
	}
	sSamplingVin = !sSamplingVin;

	/* PWM frequency and duty cycle */
	if(pwmEn) {
		sSensorData.pwmDutyCycle -= sSensorData.pwmDutyCycle >> 8;
    5508:	80 93 d2 28 	sts	0x28D2, r24	; 0x8028d2 <sSensorData+0x72>
    550c:	90 93 d3 28 	sts	0x28D3, r25	; 0x8028d3 <sSensorData+0x73>
    5510:	06 c0       	rjmp	.+12     	; 0x551e <__vector_71+0x9f6>
		if(pwm)
			sSensorData.pwmDutyCycle += PWM_DC_FS;
    5512:	81 50       	subi	r24, 0x01	; 1
    5514:	9f 4f       	sbci	r25, 0xFF	; 255
    5516:	80 93 d2 28 	sts	0x28D2, r24	; 0x8028d2 <sSensorData+0x72>
    551a:	90 93 d3 28 	sts	0x28D3, r25	; 0x8028d3 <sSensorData+0x73>
		sSensorData.pwmFrequency -= sSensorData.pwmFrequency >> 8;
    551e:	e0 ed       	ldi	r30, 0xD0	; 208
    5520:	f8 e2       	ldi	r31, 0x28	; 40
    5522:	20 81       	ld	r18, Z
    5524:	31 81       	ldd	r19, Z+1	; 0x01
		sSensorData.pwmFrequency += (curPWMCycles - sPrevPWMCycles) << PWM_FREQ_FILTER_SHIFT;
    5526:	84 2d       	mov	r24, r4
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	40 91 57 28 	lds	r20, 0x2857	; 0x802857 <sPrevPWMCycles.4875>
    552e:	84 1b       	sub	r24, r20
    5530:	91 09       	sbc	r25, r1
    5532:	88 0f       	add	r24, r24
    5534:	99 1f       	adc	r25, r25
    5536:	88 0f       	add	r24, r24
    5538:	99 1f       	adc	r25, r25
    553a:	88 0f       	add	r24, r24
    553c:	99 1f       	adc	r25, r25
    553e:	43 2f       	mov	r20, r19
    5540:	55 27       	eor	r21, r21
    5542:	24 1b       	sub	r18, r20
    5544:	35 0b       	sbc	r19, r21
    5546:	82 0f       	add	r24, r18
    5548:	93 1f       	adc	r25, r19
    554a:	80 83       	st	Z, r24
    554c:	91 83       	std	Z+1, r25	; 0x01
    554e:	08 c0       	rjmp	.+16     	; 0x5560 <__vector_71+0xa38>
	}
	else {
		sSensorData.pwmDutyCycle = 0;
    5550:	10 92 d2 28 	sts	0x28D2, r1	; 0x8028d2 <sSensorData+0x72>
    5554:	10 92 d3 28 	sts	0x28D3, r1	; 0x8028d3 <sSensorData+0x73>
		sSensorData.pwmFrequency = 0;
    5558:	10 92 d0 28 	sts	0x28D0, r1	; 0x8028d0 <sSensorData+0x70>
    555c:	10 92 d1 28 	sts	0x28D1, r1	; 0x8028d1 <sSensorData+0x71>
	}
	sPrevPWMCycles = curPWMCycles;
    5560:	40 92 57 28 	sts	0x2857, r4	; 0x802857 <sPrevPWMCycles.4875>
	
	/* Pin states */
	if(sSensorData.selFPState != selFPPin) {
    5564:	80 91 c1 28 	lds	r24, 0x28C1	; 0x8028c1 <sSensorData+0x61>
    5568:	58 16       	cp	r5, r24
    556a:	91 f0       	breq	.+36     	; 0x5590 <__vector_71+0xa68>
		sSensorData.selFPState = selFPPin;
    556c:	50 92 c1 28 	sts	0x28C1, r5	; 0x8028c1 <sSensorData+0x61>
		sSensorData.selFPTimestamp = sSessionCycleCount;
    5570:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    5574:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    5578:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    557c:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    5580:	80 93 c4 28 	sts	0x28C4, r24	; 0x8028c4 <sSensorData+0x64>
    5584:	90 93 c5 28 	sts	0x28C5, r25	; 0x8028c5 <sSensorData+0x65>
    5588:	a0 93 c6 28 	sts	0x28C6, r26	; 0x8028c6 <sSensorData+0x66>
    558c:	b0 93 c7 28 	sts	0x28C7, r27	; 0x8028c7 <sSensorData+0x67>
	}
	
	if(sSensorData.selCCState != selCCPin) {
    5590:	80 91 c2 28 	lds	r24, 0x28C2	; 0x8028c2 <sSensorData+0x62>
    5594:	d8 17       	cp	r29, r24
    5596:	09 f4       	brne	.+2      	; 0x559a <__vector_71+0xa72>
    5598:	5b c0       	rjmp	.+182    	; 0x5650 <__vector_71+0xb28>
		sSensorData.selCCState = selCCPin;
    559a:	d0 93 c2 28 	sts	0x28C2, r29	; 0x8028c2 <sSensorData+0x62>
		sSensorData.selCCTimestamp = sSessionCycleCount;
    559e:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    55a2:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    55a6:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    55aa:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    55ae:	80 93 c8 28 	sts	0x28C8, r24	; 0x8028c8 <sSensorData+0x68>
    55b2:	90 93 c9 28 	sts	0x28C9, r25	; 0x8028c9 <sSensorData+0x69>
    55b6:	a0 93 ca 28 	sts	0x28CA, r26	; 0x8028ca <sSensorData+0x6a>
    55ba:	b0 93 cb 28 	sts	0x28CB, r27	; 0x8028cb <sSensorData+0x6b>
		/* Did CC just get enabled? */
		if(!selCCPin && sSensorData.speedSensorPulseInterval < (((int32_t) (I_AM_H2A ? H2A_CC_MAX_INTERVAL : EVA_CC_MAX_INTERVAL)) << 16)) {
    55be:	d1 11       	cpse	r29, r1
    55c0:	40 c0       	rjmp	.+128    	; 0x5642 <__vector_71+0xb1a>
    55c2:	40 91 b9 28 	lds	r20, 0x28B9	; 0x8028b9 <sSensorData+0x59>
    55c6:	50 91 ba 28 	lds	r21, 0x28BA	; 0x8028ba <sSensorData+0x5a>
    55ca:	60 91 bb 28 	lds	r22, 0x28BB	; 0x8028bb <sSensorData+0x5b>
    55ce:	70 91 bc 28 	lds	r23, 0x28BC	; 0x8028bc <sSensorData+0x5c>
    55d2:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    55d6:	80 73       	andi	r24, 0x30	; 48
    55d8:	29 f0       	breq	.+10     	; 0x55e4 <__vector_71+0xabc>
    55da:	80 e0       	ldi	r24, 0x00	; 0
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	ae e4       	ldi	r26, 0x4E	; 78
    55e0:	b0 e0       	ldi	r27, 0x00	; 0
    55e2:	04 c0       	rjmp	.+8      	; 0x55ec <__vector_71+0xac4>
    55e4:	80 e0       	ldi	r24, 0x00	; 0
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	a0 ed       	ldi	r26, 0xD0	; 208
    55ea:	b0 e0       	ldi	r27, 0x00	; 0
    55ec:	48 17       	cp	r20, r24
    55ee:	59 07       	cpc	r21, r25
    55f0:	6a 07       	cpc	r22, r26
    55f2:	7b 07       	cpc	r23, r27
    55f4:	34 f5       	brge	.+76     	; 0x5642 <__vector_71+0xb1a>
			sCCIsOn = 1;
    55f6:	81 e0       	ldi	r24, 0x01	; 1
    55f8:	80 93 56 28 	sts	0x2856, r24	; 0x802856 <sCCIsOn.4876>
			sSensorData.ccPower = CC_DEFAULT_POWER;
    55fc:	82 e0       	ldi	r24, 0x02	; 2
    55fe:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <sSensorData+0x78>
			sCCPrevPulseInterval = sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    5602:	40 93 d4 28 	sts	0x28D4, r20	; 0x8028d4 <sSensorData+0x74>
    5606:	50 93 d5 28 	sts	0x28D5, r21	; 0x8028d5 <sSensorData+0x75>
    560a:	60 93 d6 28 	sts	0x28D6, r22	; 0x8028d6 <sSensorData+0x76>
    560e:	70 93 d7 28 	sts	0x28D7, r23	; 0x8028d7 <sSensorData+0x77>
    5612:	40 93 52 28 	sts	0x2852, r20	; 0x802852 <sCCPrevPulseInterval.4883>
    5616:	50 93 53 28 	sts	0x2853, r21	; 0x802853 <sCCPrevPulseInterval.4883+0x1>
    561a:	60 93 54 28 	sts	0x2854, r22	; 0x802854 <sCCPrevPulseInterval.4883+0x2>
    561e:	70 93 55 28 	sts	0x2855, r23	; 0x802855 <sCCPrevPulseInterval.4883+0x3>
			sCCRunTimer = CC_REG_CYCLES;
    5622:	28 e8       	ldi	r18, 0x88	; 136
    5624:	33 e1       	ldi	r19, 0x13	; 19
    5626:	20 93 50 28 	sts	0x2850, r18	; 0x802850 <sCCRunTimer.4877>
    562a:	30 93 51 28 	sts	0x2851, r19	; 0x802851 <sCCRunTimer.4877+0x1>
			SET_CC_DRIVE(sSensorData.ccPower);
    562e:	e0 e8       	ldi	r30, 0x80	; 128
    5630:	f6 e0       	ldi	r31, 0x06	; 6
    5632:	95 e0       	ldi	r25, 0x05	; 5
    5634:	95 83       	std	Z+5, r25	; 0x05
    5636:	86 83       	std	Z+6, r24	; 0x06
		}
		else{sCCIsOn = 0;
		}
	}

	if(sSensorData.selCC2State != selCC2Pin) {
    5638:	80 91 c3 28 	lds	r24, 0x28C3	; 0x8028c3 <sSensorData+0x63>
    563c:	c8 13       	cpse	r28, r24
    563e:	0d c0       	rjmp	.+26     	; 0x565a <__vector_71+0xb32>
    5640:	6a c1       	rjmp	.+724    	; 0x5916 <__vector_71+0xdee>
			sSensorData.ccPower = CC_DEFAULT_POWER;
			sCCPrevPulseInterval = sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
			sCCRunTimer = CC_REG_CYCLES;
			SET_CC_DRIVE(sSensorData.ccPower);
		}
		else{sCCIsOn = 0;
    5642:	10 92 56 28 	sts	0x2856, r1	; 0x802856 <sCCIsOn.4876>
		}
	}

	if(sSensorData.selCC2State != selCC2Pin) {
    5646:	80 91 c3 28 	lds	r24, 0x28C3	; 0x8028c3 <sSensorData+0x63>
    564a:	c8 13       	cpse	r28, r24
    564c:	06 c0       	rjmp	.+12     	; 0x565a <__vector_71+0xb32>
    564e:	10 c1       	rjmp	.+544    	; 0x5870 <__vector_71+0xd48>
    5650:	80 91 c3 28 	lds	r24, 0x28C3	; 0x8028c3 <sSensorData+0x63>
    5654:	c8 17       	cp	r28, r24
    5656:	09 f4       	brne	.+2      	; 0x565a <__vector_71+0xb32>
    5658:	73 c0       	rjmp	.+230    	; 0x5740 <__vector_71+0xc18>
		sSensorData.selCC2State = selCC2Pin;
    565a:	c0 93 c3 28 	sts	0x28C3, r28	; 0x8028c3 <sSensorData+0x63>
		sSensorData.selCC2Timestamp = sSessionCycleCount;
    565e:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    5662:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    5666:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    566a:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    566e:	80 93 cc 28 	sts	0x28CC, r24	; 0x8028cc <sSensorData+0x6c>
    5672:	90 93 cd 28 	sts	0x28CD, r25	; 0x8028cd <sSensorData+0x6d>
    5676:	a0 93 ce 28 	sts	0x28CE, r26	; 0x8028ce <sSensorData+0x6e>
    567a:	b0 93 cf 28 	sts	0x28CF, r27	; 0x8028cf <sSensorData+0x6f>
		/* Did CC2 just get enabled? */
		if(!selCC2Pin) {
    567e:	c1 11       	cpse	r28, r1
    5680:	5c c0       	rjmp	.+184    	; 0x573a <__vector_71+0xc12>
			sCCIsOn = 1;
    5682:	81 e0       	ldi	r24, 0x01	; 1
    5684:	80 93 56 28 	sts	0x2856, r24	; 0x802856 <sCCIsOn.4876>
			sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    5688:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <sSensorData+0x59>
    568c:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <sSensorData+0x5a>
    5690:	a0 91 bb 28 	lds	r26, 0x28BB	; 0x8028bb <sSensorData+0x5b>
    5694:	b0 91 bc 28 	lds	r27, 0x28BC	; 0x8028bc <sSensorData+0x5c>
    5698:	80 93 52 28 	sts	0x2852, r24	; 0x802852 <sCCPrevPulseInterval.4883>
    569c:	90 93 53 28 	sts	0x2853, r25	; 0x802853 <sCCPrevPulseInterval.4883+0x1>
    56a0:	a0 93 54 28 	sts	0x2854, r26	; 0x802854 <sCCPrevPulseInterval.4883+0x2>
    56a4:	b0 93 55 28 	sts	0x2855, r27	; 0x802855 <sCCPrevPulseInterval.4883+0x3>
			if(sSensorData.speedSensorPulseInterval > sCC2MinSpeed) { // Driving below minimum initial CC2 speed limit
    56a8:	40 91 dd 28 	lds	r20, 0x28DD	; 0x8028dd <sCC2MinSpeed>
    56ac:	50 91 de 28 	lds	r21, 0x28DE	; 0x8028de <sCC2MinSpeed+0x1>
    56b0:	60 91 df 28 	lds	r22, 0x28DF	; 0x8028df <sCC2MinSpeed+0x2>
    56b4:	70 91 e0 28 	lds	r23, 0x28E0	; 0x8028e0 <sCC2MinSpeed+0x3>
    56b8:	48 17       	cp	r20, r24
    56ba:	59 07       	cpc	r21, r25
    56bc:	6a 07       	cpc	r22, r26
    56be:	7b 07       	cpc	r23, r27
    56c0:	a4 f4       	brge	.+40     	; 0x56ea <__vector_71+0xbc2>
				sSensorData.ccTargetSpeed = sCC2MinSpeed;
    56c2:	80 91 dd 28 	lds	r24, 0x28DD	; 0x8028dd <sCC2MinSpeed>
    56c6:	90 91 de 28 	lds	r25, 0x28DE	; 0x8028de <sCC2MinSpeed+0x1>
    56ca:	a0 91 df 28 	lds	r26, 0x28DF	; 0x8028df <sCC2MinSpeed+0x2>
    56ce:	b0 91 e0 28 	lds	r27, 0x28E0	; 0x8028e0 <sCC2MinSpeed+0x3>
    56d2:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <sSensorData+0x74>
    56d6:	90 93 d5 28 	sts	0x28D5, r25	; 0x8028d5 <sSensorData+0x75>
    56da:	a0 93 d6 28 	sts	0x28D6, r26	; 0x8028d6 <sSensorData+0x76>
    56de:	b0 93 d7 28 	sts	0x28D7, r27	; 0x8028d7 <sSensorData+0x77>
				sSensorData.ccPower = CC_MAX_POWER;
    56e2:	87 e0       	ldi	r24, 0x07	; 7
    56e4:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <sSensorData+0x78>
    56e8:	0b c0       	rjmp	.+22     	; 0x5700 <__vector_71+0xbd8>
			}
			else {
				sSensorData.ccTargetSpeed = sSensorData.speedSensorPulseInterval;
    56ea:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <sSensorData+0x74>
    56ee:	90 93 d5 28 	sts	0x28D5, r25	; 0x8028d5 <sSensorData+0x75>
    56f2:	a0 93 d6 28 	sts	0x28D6, r26	; 0x8028d6 <sSensorData+0x76>
    56f6:	b0 93 d7 28 	sts	0x28D7, r27	; 0x8028d7 <sSensorData+0x77>
				sSensorData.ccPower = CC_DEFAULT_POWER;
    56fa:	82 e0       	ldi	r24, 0x02	; 2
    56fc:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <sSensorData+0x78>
			}
			sCCRunTimer = CC_REG_CYCLES;
    5700:	88 e8       	ldi	r24, 0x88	; 136
    5702:	93 e1       	ldi	r25, 0x13	; 19
    5704:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4877>
    5708:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4877+0x1>
			SET_CC_DRIVE(sSensorData.ccPower);
    570c:	80 91 d8 28 	lds	r24, 0x28D8	; 0x8028d8 <sSensorData+0x78>
    5710:	81 11       	cpse	r24, r1
    5712:	04 c0       	rjmp	.+8      	; 0x571c <__vector_71+0xbf4>
    5714:	87 e0       	ldi	r24, 0x07	; 7
    5716:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    571a:	12 c0       	rjmp	.+36     	; 0x5740 <__vector_71+0xc18>
    571c:	87 30       	cpi	r24, 0x07	; 7
    571e:	19 f4       	brne	.+6      	; 0x5726 <__vector_71+0xbfe>
    5720:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    5724:	0d c0       	rjmp	.+26     	; 0x5740 <__vector_71+0xc18>
    5726:	80 95       	com	r24
    5728:	87 70       	andi	r24, 0x07	; 7
    572a:	e0 e8       	ldi	r30, 0x80	; 128
    572c:	f6 e0       	ldi	r31, 0x06	; 6
    572e:	85 83       	std	Z+5, r24	; 0x05
    5730:	80 91 d8 28 	lds	r24, 0x28D8	; 0x8028d8 <sSensorData+0x78>
    5734:	87 70       	andi	r24, 0x07	; 7
    5736:	86 83       	std	Z+6, r24	; 0x06
    5738:	03 c0       	rjmp	.+6      	; 0x5740 <__vector_71+0xc18>
		}
		else
			sCCIsOn = 0;
    573a:	10 92 56 28 	sts	0x2856, r1	; 0x802856 <sCCIsOn.4876>
    573e:	98 c0       	rjmp	.+304    	; 0x5870 <__vector_71+0xd48>
	}
	
	if(sCCIsOn && !--sCCRunTimer) {
    5740:	80 91 56 28 	lds	r24, 0x2856	; 0x802856 <sCCIsOn.4876>
    5744:	88 23       	and	r24, r24
    5746:	09 f4       	brne	.+2      	; 0x574a <__vector_71+0xc22>
    5748:	93 c0       	rjmp	.+294    	; 0x5870 <__vector_71+0xd48>
    574a:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <sCCRunTimer.4877>
    574e:	90 91 51 28 	lds	r25, 0x2851	; 0x802851 <sCCRunTimer.4877+0x1>
    5752:	01 97       	sbiw	r24, 0x01	; 1
    5754:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4877>
    5758:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4877+0x1>
    575c:	89 2b       	or	r24, r25
    575e:	09 f0       	breq	.+2      	; 0x5762 <__vector_71+0xc3a>
    5760:	87 c0       	rjmp	.+270    	; 0x5870 <__vector_71+0xd48>
		if(!selCC2Pin && sCC2TargetSpeedUpdate) {
    5762:	c1 11       	cpse	r28, r1
    5764:	16 c0       	rjmp	.+44     	; 0x5792 <__vector_71+0xc6a>
    5766:	80 91 e1 28 	lds	r24, 0x28E1	; 0x8028e1 <sCC2TargetSpeedUpdate>
    576a:	88 23       	and	r24, r24
    576c:	91 f0       	breq	.+36     	; 0x5792 <__vector_71+0xc6a>
			sSensorData.ccTargetSpeed = sCC2TargetSpeed;
    576e:	80 91 d9 28 	lds	r24, 0x28D9	; 0x8028d9 <sCC2TargetSpeed>
    5772:	90 91 da 28 	lds	r25, 0x28DA	; 0x8028da <sCC2TargetSpeed+0x1>
    5776:	a0 91 db 28 	lds	r26, 0x28DB	; 0x8028db <sCC2TargetSpeed+0x2>
    577a:	b0 91 dc 28 	lds	r27, 0x28DC	; 0x8028dc <sCC2TargetSpeed+0x3>
    577e:	80 93 d4 28 	sts	0x28D4, r24	; 0x8028d4 <sSensorData+0x74>
    5782:	90 93 d5 28 	sts	0x28D5, r25	; 0x8028d5 <sSensorData+0x75>
    5786:	a0 93 d6 28 	sts	0x28D6, r26	; 0x8028d6 <sSensorData+0x76>
    578a:	b0 93 d7 28 	sts	0x28D7, r27	; 0x8028d7 <sSensorData+0x77>
			// Possibly adjust power levels here too, for faster convergence?
			sCC2TargetSpeedUpdate = 0;
    578e:	10 92 e1 28 	sts	0x28E1, r1	; 0x8028e1 <sCC2TargetSpeedUpdate>
		}
		if((sSensorData.speedSensorPulseInterval > sSensorData.ccTargetSpeed)
    5792:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <sSensorData+0x59>
    5796:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <sSensorData+0x5a>
    579a:	a0 91 bb 28 	lds	r26, 0x28BB	; 0x8028bb <sSensorData+0x5b>
    579e:	b0 91 bc 28 	lds	r27, 0x28BC	; 0x8028bc <sSensorData+0x5c>
    57a2:	40 91 d4 28 	lds	r20, 0x28D4	; 0x8028d4 <sSensorData+0x74>
    57a6:	50 91 d5 28 	lds	r21, 0x28D5	; 0x8028d5 <sSensorData+0x75>
    57aa:	60 91 d6 28 	lds	r22, 0x28D6	; 0x8028d6 <sSensorData+0x76>
    57ae:	70 91 d7 28 	lds	r23, 0x28D7	; 0x8028d7 <sSensorData+0x77>
    57b2:	48 17       	cp	r20, r24
    57b4:	59 07       	cpc	r21, r25
    57b6:	6a 07       	cpc	r22, r26
    57b8:	7b 07       	cpc	r23, r27
    57ba:	ac f4       	brge	.+42     	; 0x57e6 <__vector_71+0xcbe>
			&& (sSensorData.speedSensorPulseInterval > sCCPrevPulseInterval) 
    57bc:	00 91 52 28 	lds	r16, 0x2852	; 0x802852 <sCCPrevPulseInterval.4883>
    57c0:	10 91 53 28 	lds	r17, 0x2853	; 0x802853 <sCCPrevPulseInterval.4883+0x1>
    57c4:	20 91 54 28 	lds	r18, 0x2854	; 0x802854 <sCCPrevPulseInterval.4883+0x2>
    57c8:	30 91 55 28 	lds	r19, 0x2855	; 0x802855 <sCCPrevPulseInterval.4883+0x3>
    57cc:	08 17       	cp	r16, r24
    57ce:	19 07       	cpc	r17, r25
    57d0:	2a 07       	cpc	r18, r26
    57d2:	3b 07       	cpc	r19, r27
    57d4:	44 f4       	brge	.+16     	; 0x57e6 <__vector_71+0xcbe>
			&& (sSensorData.ccPower < CC_MAX_POWER))
    57d6:	20 91 d8 28 	lds	r18, 0x28D8	; 0x8028d8 <sSensorData+0x78>
    57da:	27 30       	cpi	r18, 0x07	; 7
    57dc:	20 f4       	brcc	.+8      	; 0x57e6 <__vector_71+0xcbe>
				sSensorData.ccPower++;
    57de:	2f 5f       	subi	r18, 0xFF	; 255
    57e0:	20 93 d8 28 	sts	0x28D8, r18	; 0x8028d8 <sSensorData+0x78>
    57e4:	19 c0       	rjmp	.+50     	; 0x5818 <__vector_71+0xcf0>
		else if((sSensorData.speedSensorPulseInterval < sSensorData.ccTargetSpeed)
    57e6:	84 17       	cp	r24, r20
    57e8:	95 07       	cpc	r25, r21
    57ea:	a6 07       	cpc	r26, r22
    57ec:	b7 07       	cpc	r27, r23
    57ee:	a4 f4       	brge	.+40     	; 0x5818 <__vector_71+0xcf0>
			&& (sSensorData.speedSensorPulseInterval < sCCPrevPulseInterval)
    57f0:	40 91 52 28 	lds	r20, 0x2852	; 0x802852 <sCCPrevPulseInterval.4883>
    57f4:	50 91 53 28 	lds	r21, 0x2853	; 0x802853 <sCCPrevPulseInterval.4883+0x1>
    57f8:	60 91 54 28 	lds	r22, 0x2854	; 0x802854 <sCCPrevPulseInterval.4883+0x2>
    57fc:	70 91 55 28 	lds	r23, 0x2855	; 0x802855 <sCCPrevPulseInterval.4883+0x3>
    5800:	84 17       	cp	r24, r20
    5802:	95 07       	cpc	r25, r21
    5804:	a6 07       	cpc	r26, r22
    5806:	b7 07       	cpc	r27, r23
    5808:	3c f4       	brge	.+14     	; 0x5818 <__vector_71+0xcf0>
			&& (sSensorData.ccPower > 0))
    580a:	80 91 d8 28 	lds	r24, 0x28D8	; 0x8028d8 <sSensorData+0x78>
    580e:	88 23       	and	r24, r24
    5810:	39 f0       	breq	.+14     	; 0x5820 <__vector_71+0xcf8>
				sSensorData.ccPower--;
    5812:	81 50       	subi	r24, 0x01	; 1
    5814:	80 93 d8 28 	sts	0x28D8, r24	; 0x8028d8 <sSensorData+0x78>
		SET_CC_DRIVE(sSensorData.ccPower);
    5818:	80 91 d8 28 	lds	r24, 0x28D8	; 0x8028d8 <sSensorData+0x78>
    581c:	81 11       	cpse	r24, r1
    581e:	04 c0       	rjmp	.+8      	; 0x5828 <__vector_71+0xd00>
    5820:	87 e0       	ldi	r24, 0x07	; 7
    5822:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <__TEXT_REGION_LENGTH__+0x700686>
    5826:	0e c0       	rjmp	.+28     	; 0x5844 <__vector_71+0xd1c>
    5828:	87 30       	cpi	r24, 0x07	; 7
    582a:	19 f4       	brne	.+6      	; 0x5832 <__vector_71+0xd0a>
    582c:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    5830:	09 c0       	rjmp	.+18     	; 0x5844 <__vector_71+0xd1c>
    5832:	80 95       	com	r24
    5834:	87 70       	andi	r24, 0x07	; 7
    5836:	e0 e8       	ldi	r30, 0x80	; 128
    5838:	f6 e0       	ldi	r31, 0x06	; 6
    583a:	85 83       	std	Z+5, r24	; 0x05
    583c:	80 91 d8 28 	lds	r24, 0x28D8	; 0x8028d8 <sSensorData+0x78>
    5840:	87 70       	andi	r24, 0x07	; 7
    5842:	86 83       	std	Z+6, r24	; 0x06
		sCCRunTimer = CC_REG_CYCLES;
    5844:	88 e8       	ldi	r24, 0x88	; 136
    5846:	93 e1       	ldi	r25, 0x13	; 19
    5848:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4877>
    584c:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4877+0x1>
		sCCPrevPulseInterval = sSensorData.speedSensorPulseInterval;
    5850:	80 91 b9 28 	lds	r24, 0x28B9	; 0x8028b9 <sSensorData+0x59>
    5854:	90 91 ba 28 	lds	r25, 0x28BA	; 0x8028ba <sSensorData+0x5a>
    5858:	a0 91 bb 28 	lds	r26, 0x28BB	; 0x8028bb <sSensorData+0x5b>
    585c:	b0 91 bc 28 	lds	r27, 0x28BC	; 0x8028bc <sSensorData+0x5c>
    5860:	80 93 52 28 	sts	0x2852, r24	; 0x802852 <sCCPrevPulseInterval.4883>
    5864:	90 93 53 28 	sts	0x2853, r25	; 0x802853 <sCCPrevPulseInterval.4883+0x1>
    5868:	a0 93 54 28 	sts	0x2854, r26	; 0x802854 <sCCPrevPulseInterval.4883+0x2>
    586c:	b0 93 55 28 	sts	0x2855, r27	; 0x802855 <sCCPrevPulseInterval.4883+0x3>
	}
	
	if(sTakeSnapshot485) {
    5870:	80 91 e6 28 	lds	r24, 0x28E6	; 0x8028e6 <sTakeSnapshot485>
    5874:	88 23       	and	r24, r24
    5876:	e1 f0       	breq	.+56     	; 0x58b0 <__vector_71+0xd88>
		sSensorDataSnapshot485 = sSensorData;
    5878:	89 e7       	ldi	r24, 0x79	; 121
    587a:	e0 e6       	ldi	r30, 0x60	; 96
    587c:	f8 e2       	ldi	r31, 0x28	; 40
    587e:	ab ee       	ldi	r26, 0xEB	; 235
    5880:	b8 e2       	ldi	r27, 0x28	; 40
    5882:	01 90       	ld	r0, Z+
    5884:	0d 92       	st	X+, r0
    5886:	8a 95       	dec	r24
    5888:	e1 f7       	brne	.-8      	; 0x5882 <__vector_71+0xd5a>
		sSessionCycleCountSnapshot485 = sSessionCycleCount;
    588a:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    588e:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    5892:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    5896:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    589a:	80 93 e7 28 	sts	0x28E7, r24	; 0x8028e7 <sSessionCycleCountSnapshot485>
    589e:	90 93 e8 28 	sts	0x28E8, r25	; 0x8028e8 <sSessionCycleCountSnapshot485+0x1>
    58a2:	a0 93 e9 28 	sts	0x28E9, r26	; 0x8028e9 <sSessionCycleCountSnapshot485+0x2>
    58a6:	b0 93 ea 28 	sts	0x28EA, r27	; 0x8028ea <sSessionCycleCountSnapshot485+0x3>
		
		sTakeSnapshot485 = 0;
    58aa:	10 92 e6 28 	sts	0x28E6, r1	; 0x8028e6 <sTakeSnapshot485>
    58ae:	1f c0       	rjmp	.+62     	; 0x58ee <__vector_71+0xdc6>
	}
	else if(sTakeSnapshot) { 
    58b0:	80 91 64 29 	lds	r24, 0x2964	; 0x802964 <sTakeSnapshot>
    58b4:	88 23       	and	r24, r24
    58b6:	d9 f0       	breq	.+54     	; 0x58ee <__vector_71+0xdc6>
		sSensorDataSnapshot = sSensorData;
    58b8:	89 e7       	ldi	r24, 0x79	; 121
    58ba:	e0 e6       	ldi	r30, 0x60	; 96
    58bc:	f8 e2       	ldi	r31, 0x28	; 40
    58be:	a9 e6       	ldi	r26, 0x69	; 105
    58c0:	b9 e2       	ldi	r27, 0x29	; 41
    58c2:	01 90       	ld	r0, Z+
    58c4:	0d 92       	st	X+, r0
    58c6:	8a 95       	dec	r24
    58c8:	e1 f7       	brne	.-8      	; 0x58c2 <__vector_71+0xd9a>
		sSessionCycleCountSnapshot = sSessionCycleCount;
    58ca:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    58ce:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    58d2:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    58d6:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    58da:	80 93 65 29 	sts	0x2965, r24	; 0x802965 <sSessionCycleCountSnapshot>
    58de:	90 93 66 29 	sts	0x2966, r25	; 0x802966 <sSessionCycleCountSnapshot+0x1>
    58e2:	a0 93 67 29 	sts	0x2967, r26	; 0x802967 <sSessionCycleCountSnapshot+0x2>
    58e6:	b0 93 68 29 	sts	0x2968, r27	; 0x802968 <sSessionCycleCountSnapshot+0x3>
		
		sTakeSnapshot = 0;
    58ea:	10 92 64 29 	sts	0x2964, r1	; 0x802964 <sTakeSnapshot>
	}

	sSessionCycleCount++;
    58ee:	80 91 e2 28 	lds	r24, 0x28E2	; 0x8028e2 <sSessionCycleCount>
    58f2:	90 91 e3 28 	lds	r25, 0x28E3	; 0x8028e3 <sSessionCycleCount+0x1>
    58f6:	a0 91 e4 28 	lds	r26, 0x28E4	; 0x8028e4 <sSessionCycleCount+0x2>
    58fa:	b0 91 e5 28 	lds	r27, 0x28E5	; 0x8028e5 <sSessionCycleCount+0x3>
    58fe:	01 96       	adiw	r24, 0x01	; 1
    5900:	a1 1d       	adc	r26, r1
    5902:	b1 1d       	adc	r27, r1
    5904:	80 93 e2 28 	sts	0x28E2, r24	; 0x8028e2 <sSessionCycleCount>
    5908:	90 93 e3 28 	sts	0x28E3, r25	; 0x8028e3 <sSessionCycleCount+0x1>
    590c:	a0 93 e4 28 	sts	0x28E4, r26	; 0x8028e4 <sSessionCycleCount+0x2>
    5910:	b0 93 e5 28 	sts	0x28E5, r27	; 0x8028e5 <sSessionCycleCount+0x3>
		
} /* ISR(ADCA_CH0_vect) */
    5914:	0a c0       	rjmp	.+20     	; 0x592a <__vector_71+0xe02>
		}
		else
			sCCIsOn = 0;
	}
	
	if(sCCIsOn && !--sCCRunTimer) {
    5916:	80 91 50 28 	lds	r24, 0x2850	; 0x802850 <sCCRunTimer.4877>
    591a:	90 91 51 28 	lds	r25, 0x2851	; 0x802851 <sCCRunTimer.4877+0x1>
    591e:	01 97       	sbiw	r24, 0x01	; 1
    5920:	80 93 50 28 	sts	0x2850, r24	; 0x802850 <sCCRunTimer.4877>
    5924:	90 93 51 28 	sts	0x2851, r25	; 0x802851 <sCCRunTimer.4877+0x1>
    5928:	a3 cf       	rjmp	.-186    	; 0x5870 <__vector_71+0xd48>
		sTakeSnapshot = 0;
	}

	sSessionCycleCount++;
		
} /* ISR(ADCA_CH0_vect) */
    592a:	ff 91       	pop	r31
    592c:	ef 91       	pop	r30
    592e:	df 91       	pop	r29
    5930:	cf 91       	pop	r28
    5932:	bf 91       	pop	r27
    5934:	af 91       	pop	r26
    5936:	9f 91       	pop	r25
    5938:	8f 91       	pop	r24
    593a:	7f 91       	pop	r23
    593c:	6f 91       	pop	r22
    593e:	5f 91       	pop	r21
    5940:	4f 91       	pop	r20
    5942:	3f 91       	pop	r19
    5944:	2f 91       	pop	r18
    5946:	1f 91       	pop	r17
    5948:	0f 91       	pop	r16
    594a:	ff 90       	pop	r15
    594c:	ef 90       	pop	r14
    594e:	df 90       	pop	r13
    5950:	cf 90       	pop	r12
    5952:	bf 90       	pop	r11
    5954:	af 90       	pop	r10
    5956:	9f 90       	pop	r9
    5958:	8f 90       	pop	r8
    595a:	7f 90       	pop	r7
    595c:	6f 90       	pop	r6
    595e:	5f 90       	pop	r5
    5960:	4f 90       	pop	r4
    5962:	3f 90       	pop	r3
    5964:	2f 90       	pop	r2
    5966:	0f 90       	pop	r0
    5968:	0b be       	out	0x3b, r0	; 59
    596a:	0f 90       	pop	r0
    596c:	0f be       	out	0x3f, r0	; 63
    596e:	0f 90       	pop	r0
    5970:	1f 90       	pop	r1
    5972:	18 95       	reti

00005974 <CopySensorData>:
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
    5974:	ac 01       	movw	r20, r24
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    5976:	fb 01       	movw	r30, r22
    5978:	80 81       	ld	r24, Z
    597a:	98 2f       	mov	r25, r24
    597c:	9d 7f       	andi	r25, 0xFD	; 253
    597e:	95 32       	cpi	r25, 0x25	; 37
    5980:	81 f0       	breq	.+32     	; 0x59a2 <CopySensorData+0x2e>
    5982:	81 11       	cpse	r24, r1
    5984:	19 c0       	rjmp	.+50     	; 0x59b8 <CopySensorData+0x44>
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
    5986:	20 e0       	ldi	r18, 0x00	; 0
    5988:	0d c0       	rjmp	.+26     	; 0x59a4 <CopySensorData+0x30>
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
		dest[i] = src[i];
    598a:	9d 93       	st	X+, r25
		i++;
    598c:	2f 5f       	subi	r18, 0xFF	; 255


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
    598e:	2e 34       	cpi	r18, 0x4E	; 78
    5990:	71 f0       	breq	.+28     	; 0x59ae <CopySensorData+0x3a>
    5992:	91 91       	ld	r25, Z+
    5994:	39 2f       	mov	r19, r25
    5996:	3d 7f       	andi	r19, 0xFD	; 253
    5998:	35 32       	cpi	r19, 0x25	; 37
    599a:	21 f0       	breq	.+8      	; 0x59a4 <CopySensorData+0x30>
    599c:	91 11       	cpse	r25, r1
    599e:	f5 cf       	rjmp	.-22     	; 0x598a <CopySensorData+0x16>
    59a0:	01 c0       	rjmp	.+2      	; 0x59a4 <CopySensorData+0x30>
	
} /* PrintBussensors */


static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
    59a2:	20 e0       	ldi	r18, 0x00	; 0
		dest[i] = src[i];
		i++;
	}		
	
	if(i < MAXDATA)
		dest[i] = '\0';
    59a4:	fa 01       	movw	r30, r20
    59a6:	e2 0f       	add	r30, r18
    59a8:	f1 1d       	adc	r31, r1
    59aa:	10 82       	st	Z, r1
    59ac:	08 95       	ret
	else
		dest[MAXDATA - 1] = '\0';
    59ae:	fa 01       	movw	r30, r20
    59b0:	e3 5b       	subi	r30, 0xB3	; 179
    59b2:	ff 4f       	sbci	r31, 0xFF	; 255
    59b4:	10 82       	st	Z, r1
    59b6:	08 95       	ret

static void CopySensorData(char *dest, const char *src) {
	uint8_t i = 0;
	
	while(i < MAXDATA && src[i] != '\'' && src[i] != '%' && src[i] != '\0') {
		dest[i] = src[i];
    59b8:	da 01       	movw	r26, r20
    59ba:	8d 93       	st	X+, r24
    59bc:	fb 01       	movw	r30, r22
    59be:	31 96       	adiw	r30, 0x01	; 1
		i++;
    59c0:	21 e0       	ldi	r18, 0x01	; 1
    59c2:	e7 cf       	rjmp	.-50     	; 0x5992 <CopySensorData+0x1e>

000059c4 <AcceptDataGPSPosition>:
} /* CopySensorData */


static int AcceptDataGPSPosition(const char *adr, char *inData) {
	
	CopySensorData(sGPSPos, inData);
    59c4:	88 e0       	ldi	r24, 0x08	; 8
    59c6:	90 e2       	ldi	r25, 0x20	; 32
    59c8:	0e 94 ba 2c 	call	0x5974	; 0x5974 <CopySensorData>
	return 0;
	
} /* AcceptDataGPSPosition */
    59cc:	80 e0       	ldi	r24, 0x00	; 0
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	08 95       	ret

000059d2 <AcceptDataGPSDirection>:


static int AcceptDataGPSDirection(const char *adr, char *inData) {
	
	CopySensorData(sGPSDirection, inData);
    59d2:	8e ea       	ldi	r24, 0xAE	; 174
    59d4:	9a e2       	ldi	r25, 0x2A	; 42
    59d6:	0e 94 ba 2c 	call	0x5974	; 0x5974 <CopySensorData>
	return 0;
	
} /* AcceptDataGPSDirection */
    59da:	80 e0       	ldi	r24, 0x00	; 0
    59dc:	90 e0       	ldi	r25, 0x00	; 0
    59de:	08 95       	ret

000059e0 <AcceptDataGPSSpeed>:


static int AcceptDataGPSSpeed(const char *adr, char *inData) {
	
	CopySensorData(sGPSSpeed, inData);
    59e0:	80 e6       	ldi	r24, 0x60	; 96
    59e2:	9a e2       	ldi	r25, 0x2A	; 42
    59e4:	0e 94 ba 2c 	call	0x5974	; 0x5974 <CopySensorData>
	return 0;
	
} /* AcceptDataGPSSpeed */
    59e8:	80 e0       	ldi	r24, 0x00	; 0
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	08 95       	ret

000059ee <AcceptDataGPSTime>:


static int AcceptDataGPSTime(const char *adr, char *inData) {
	
	CopySensorData(sGPSTime, inData);
    59ee:	82 e1       	ldi	r24, 0x12	; 18
    59f0:	9a e2       	ldi	r25, 0x2A	; 42
    59f2:	0e 94 ba 2c 	call	0x5974	; 0x5974 <CopySensorData>
	return 0;
		
} /* AcceptDataGPSTime */
    59f6:	80 e0       	ldi	r24, 0x00	; 0
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	08 95       	ret

000059fc <InitReadBussensors>:
static int AcceptDataGPSTime(const char *adr, char *inData);


void InitReadBussensors(void) {
	
	AddWantedSensor("LL01", AcceptDataGPSPosition);
    59fc:	62 ee       	ldi	r22, 0xE2	; 226
    59fe:	7c e2       	ldi	r23, 0x2C	; 44
    5a00:	8a e3       	ldi	r24, 0x3A	; 58
    5a02:	97 e2       	ldi	r25, 0x27	; 39
    5a04:	0e 94 79 02 	call	0x4f2	; 0x4f2 <AddWantedSensor>
	AddWantedSensor("GR01", AcceptDataGPSDirection);
    5a08:	69 ee       	ldi	r22, 0xE9	; 233
    5a0a:	7c e2       	ldi	r23, 0x2C	; 44
    5a0c:	8f e3       	ldi	r24, 0x3F	; 63
    5a0e:	97 e2       	ldi	r25, 0x27	; 39
    5a10:	0e 94 79 02 	call	0x4f2	; 0x4f2 <AddWantedSensor>
	AddWantedSensor("SG01", AcceptDataGPSSpeed);
    5a14:	60 ef       	ldi	r22, 0xF0	; 240
    5a16:	7c e2       	ldi	r23, 0x2C	; 44
    5a18:	84 e4       	ldi	r24, 0x44	; 68
    5a1a:	97 e2       	ldi	r25, 0x27	; 39
    5a1c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <AddWantedSensor>
	AddWantedSensor("GT01", AcceptDataGPSTime);
    5a20:	67 ef       	ldi	r22, 0xF7	; 247
    5a22:	7c e2       	ldi	r23, 0x2C	; 44
    5a24:	89 e4       	ldi	r24, 0x49	; 73
    5a26:	97 e2       	ldi	r25, 0x27	; 39
    5a28:	0e 94 79 02 	call	0x4f2	; 0x4f2 <AddWantedSensor>
    5a2c:	08 95       	ret

00005a2e <PrintBussensors>:
} /* InitReadBussensors */


void PrintBussensors(FILE *fp) {
	
	fprintf(fp, "%s,%s,%s,%s,", sGPSPos, sGPSDirection, sGPSSpeed, sGPSTime);
    5a2e:	22 e1       	ldi	r18, 0x12	; 18
    5a30:	3a e2       	ldi	r19, 0x2A	; 42
    5a32:	3f 93       	push	r19
    5a34:	2f 93       	push	r18
    5a36:	20 e6       	ldi	r18, 0x60	; 96
    5a38:	3a e2       	ldi	r19, 0x2A	; 42
    5a3a:	3f 93       	push	r19
    5a3c:	2f 93       	push	r18
    5a3e:	2e ea       	ldi	r18, 0xAE	; 174
    5a40:	3a e2       	ldi	r19, 0x2A	; 42
    5a42:	3f 93       	push	r19
    5a44:	2f 93       	push	r18
    5a46:	28 e0       	ldi	r18, 0x08	; 8
    5a48:	30 e2       	ldi	r19, 0x20	; 32
    5a4a:	3f 93       	push	r19
    5a4c:	2f 93       	push	r18
    5a4e:	2e e4       	ldi	r18, 0x4E	; 78
    5a50:	37 e2       	ldi	r19, 0x27	; 39
    5a52:	3f 93       	push	r19
    5a54:	2f 93       	push	r18
    5a56:	9f 93       	push	r25
    5a58:	8f 93       	push	r24
    5a5a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
	
} /* PrintBussensors */
    5a5e:	8d b7       	in	r24, 0x3d	; 61
    5a60:	9e b7       	in	r25, 0x3e	; 62
    5a62:	0c 96       	adiw	r24, 0x0c	; 12
    5a64:	8d bf       	out	0x3d, r24	; 61
    5a66:	9e bf       	out	0x3e, r25	; 62
    5a68:	08 95       	ret

00005a6a <InitSerial>:
	PMIC.CTRL = savePMIC & ~PMIC_LOLVLEN_bm;
	tx_fc_wridx = nextSlot;
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
	PMIC.CTRL = savePMIC;

} /* WriteByte_FC */
    5a6a:	cf 93       	push	r28
    5a6c:	df 93       	push	r29
    5a6e:	f8 94       	cli
    5a70:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
    5a74:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <__TEXT_REGION_LENGTH__+0x7008b4>
    5a78:	20 ea       	ldi	r18, 0xA0	; 160
    5a7a:	39 e0       	ldi	r19, 0x09	; 9
    5a7c:	d9 01       	movw	r26, r18
    5a7e:	14 96       	adiw	r26, 0x04	; 4
    5a80:	1c 92       	st	X, r1
    5a82:	c0 eb       	ldi	r28, 0xB0	; 176
    5a84:	d9 e0       	ldi	r29, 0x09	; 9
    5a86:	1c 82       	std	Y+4, r1	; 0x04
    5a88:	10 92 a4 0a 	sts	0x0AA4, r1	; 0x800aa4 <__TEXT_REGION_LENGTH__+0x700aa4>
    5a8c:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <__TEXT_REGION_LENGTH__+0x700ab4>
    5a90:	60 ea       	ldi	r22, 0xA0	; 160
    5a92:	7b e0       	ldi	r23, 0x0B	; 11
    5a94:	fb 01       	movw	r30, r22
    5a96:	14 82       	std	Z+4, r1	; 0x04
    5a98:	e0 e6       	ldi	r30, 0x60	; 96
    5a9a:	f6 e0       	ldi	r31, 0x06	; 6
    5a9c:	88 e1       	ldi	r24, 0x18	; 24
    5a9e:	82 8b       	std	Z+18, r24	; 0x12
    5aa0:	86 8b       	std	Z+22, r24	; 0x16
    5aa2:	40 ea       	ldi	r20, 0xA0	; 160
    5aa4:	56 e0       	ldi	r21, 0x06	; 6
    5aa6:	da 01       	movw	r26, r20
    5aa8:	52 96       	adiw	r26, 0x12	; 18
    5aaa:	8c 93       	st	X, r24
    5aac:	52 97       	sbiw	r26, 0x12	; 18
    5aae:	98 e8       	ldi	r25, 0x88	; 136
    5ab0:	95 83       	std	Z+5, r25	; 0x05
    5ab2:	92 e0       	ldi	r25, 0x02	; 2
    5ab4:	96 83       	std	Z+6, r25	; 0x06
    5ab6:	9a e8       	ldi	r25, 0x8A	; 138
    5ab8:	91 83       	std	Z+1, r25	; 0x01
    5aba:	94 e4       	ldi	r25, 0x44	; 68
    5abc:	92 83       	std	Z+2, r25	; 0x02
    5abe:	98 e0       	ldi	r25, 0x08	; 8
    5ac0:	15 96       	adiw	r26, 0x05	; 5
    5ac2:	9c 93       	st	X, r25
    5ac4:	15 97       	sbiw	r26, 0x05	; 5
    5ac6:	11 96       	adiw	r26, 0x01	; 1
    5ac8:	9c 93       	st	X, r25
    5aca:	11 97       	sbiw	r26, 0x01	; 1
    5acc:	94 e0       	ldi	r25, 0x04	; 4
    5ace:	12 96       	adiw	r26, 0x02	; 2
    5ad0:	9c 93       	st	X, r25
    5ad2:	90 e1       	ldi	r25, 0x10	; 16
    5ad4:	90 8b       	std	Z+16, r25	; 0x10
    5ad6:	94 8b       	std	Z+20, r25	; 0x14
    5ad8:	95 8b       	std	Z+21, r25	; 0x15
    5ada:	45 ef       	ldi	r20, 0xF5	; 245
    5adc:	f9 01       	movw	r30, r18
    5ade:	46 83       	std	Z+6, r20	; 0x06
    5ae0:	90 eb       	ldi	r25, 0xB0	; 176
    5ae2:	97 83       	std	Z+7, r25	; 0x07
    5ae4:	4e 83       	std	Y+6, r20	; 0x06
    5ae6:	9f 83       	std	Y+7, r25	; 0x07
    5ae8:	9c e0       	ldi	r25, 0x0C	; 12
    5aea:	db 01       	movw	r26, r22
    5aec:	16 96       	adiw	r26, 0x06	; 6
    5aee:	9c 93       	st	X, r25
    5af0:	16 97       	sbiw	r26, 0x06	; 6
    5af2:	92 eb       	ldi	r25, 0xB2	; 178
    5af4:	17 96       	adiw	r26, 0x07	; 7
    5af6:	9c 93       	st	X, r25
    5af8:	17 97       	sbiw	r26, 0x07	; 7
    5afa:	84 83       	std	Z+4, r24	; 0x04
    5afc:	8c 83       	std	Y+4, r24	; 0x04
    5afe:	14 96       	adiw	r26, 0x04	; 4
    5b00:	8c 93       	st	X, r24
    5b02:	14 97       	sbiw	r26, 0x04	; 4
    5b04:	80 e2       	ldi	r24, 0x20	; 32
    5b06:	83 83       	std	Z+3, r24	; 0x03
    5b08:	8b 83       	std	Y+3, r24	; 0x03
    5b0a:	13 96       	adiw	r26, 0x03	; 3
    5b0c:	8c 93       	st	X, r24
    5b0e:	e0 ea       	ldi	r30, 0xA0	; 160
    5b10:	f0 e0       	ldi	r31, 0x00	; 0
    5b12:	82 81       	ldd	r24, Z+2	; 0x02
    5b14:	83 60       	ori	r24, 0x03	; 3
    5b16:	82 83       	std	Z+2, r24	; 0x02
    5b18:	df 91       	pop	r29
    5b1a:	cf 91       	pop	r28
    5b1c:	08 95       	ret

00005b1e <CanRead_Comm485>:
    5b1e:	80 91 cc 2d 	lds	r24, 0x2DCC	; 0x802dcc <rx_485_wridx>
    5b22:	90 91 cb 2d 	lds	r25, 0x2DCB	; 0x802dcb <rx_485_rdidx>
    5b26:	89 17       	cp	r24, r25
    5b28:	10 f0       	brcs	.+4      	; 0x5b2e <CanRead_Comm485+0x10>
    5b2a:	89 1b       	sub	r24, r25
    5b2c:	08 95       	ret
    5b2e:	8c 54       	subi	r24, 0x4C	; 76
    5b30:	89 1b       	sub	r24, r25
    5b32:	08 95       	ret

00005b34 <ReadByte_Comm485>:
    5b34:	cf 93       	push	r28
    5b36:	c0 91 cb 2d 	lds	r28, 0x2DCB	; 0x802dcb <rx_485_rdidx>
    5b3a:	0e 94 8f 2d 	call	0x5b1e	; 0x5b1e <CanRead_Comm485>
    5b3e:	88 23       	and	r24, r24
    5b40:	e1 f3       	breq	.-8      	; 0x5b3a <ReadByte_Comm485+0x6>
    5b42:	ec 2f       	mov	r30, r28
    5b44:	f0 e0       	ldi	r31, 0x00	; 0
    5b46:	e9 5e       	subi	r30, 0xE9	; 233
    5b48:	f2 4d       	sbci	r31, 0xD2	; 210
    5b4a:	80 81       	ld	r24, Z
    5b4c:	91 e0       	ldi	r25, 0x01	; 1
    5b4e:	9c 0f       	add	r25, r28
    5b50:	94 3b       	cpi	r25, 0xB4	; 180
    5b52:	08 f0       	brcs	.+2      	; 0x5b56 <ReadByte_Comm485+0x22>
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	90 93 cb 2d 	sts	0x2DCB, r25	; 0x802dcb <rx_485_rdidx>
    5b5a:	cf 91       	pop	r28
    5b5c:	08 95       	ret

00005b5e <CanWrite_Comm485>:
    5b5e:	20 91 83 2e 	lds	r18, 0x2E83	; 0x802e83 <tx_485_wridx>
    5b62:	91 e0       	ldi	r25, 0x01	; 1
    5b64:	92 0f       	add	r25, r18
    5b66:	80 91 82 2e 	lds	r24, 0x2E82	; 0x802e82 <tx_485_rdidx>
    5b6a:	94 3b       	cpi	r25, 0xB4	; 180
    5b6c:	10 f0       	brcs	.+4      	; 0x5b72 <CanWrite_Comm485+0x14>
    5b6e:	9d e4       	ldi	r25, 0x4D	; 77
    5b70:	92 0f       	add	r25, r18
    5b72:	89 17       	cp	r24, r25
    5b74:	10 f0       	brcs	.+4      	; 0x5b7a <CanWrite_Comm485+0x1c>
    5b76:	89 1b       	sub	r24, r25
    5b78:	08 95       	ret
    5b7a:	8c 54       	subi	r24, 0x4C	; 76
    5b7c:	89 1b       	sub	r24, r25
    5b7e:	08 95       	ret

00005b80 <WriteByte_Comm485>:
    5b80:	0f 93       	push	r16
    5b82:	1f 93       	push	r17
    5b84:	cf 93       	push	r28
    5b86:	df 93       	push	r29
    5b88:	d8 2f       	mov	r29, r24
    5b8a:	00 ea       	ldi	r16, 0xA0	; 160
    5b8c:	19 e0       	ldi	r17, 0x09	; 9
    5b8e:	c1 e2       	ldi	r28, 0x21	; 33
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <WriteByte_Comm485+0x16>
    5b92:	f8 01       	movw	r30, r16
    5b94:	c3 83       	std	Z+3, r28	; 0x03
    5b96:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <CanWrite_Comm485>
    5b9a:	88 23       	and	r24, r24
    5b9c:	d1 f3       	breq	.-12     	; 0x5b92 <WriteByte_Comm485+0x12>
    5b9e:	c0 91 83 2e 	lds	r28, 0x2E83	; 0x802e83 <tx_485_wridx>
    5ba2:	ec 2f       	mov	r30, r28
    5ba4:	f0 e0       	ldi	r31, 0x00	; 0
    5ba6:	e2 53       	subi	r30, 0x32	; 50
    5ba8:	f2 4d       	sbci	r31, 0xD2	; 210
    5baa:	d0 83       	st	Z, r29
    5bac:	cf 5f       	subi	r28, 0xFF	; 255
    5bae:	c4 3b       	cpi	r28, 0xB4	; 180
    5bb0:	08 f0       	brcs	.+2      	; 0x5bb4 <WriteByte_Comm485+0x34>
    5bb2:	c0 e0       	ldi	r28, 0x00	; 0
    5bb4:	e0 ea       	ldi	r30, 0xA0	; 160
    5bb6:	f0 e0       	ldi	r31, 0x00	; 0
    5bb8:	12 81       	ldd	r17, Z+2	; 0x02
    5bba:	81 2f       	mov	r24, r17
    5bbc:	8e 7f       	andi	r24, 0xFE	; 254
    5bbe:	82 83       	std	Z+2, r24	; 0x02
    5bc0:	80 91 cd 2d 	lds	r24, 0x2DCD	; 0x802dcd <tx_485_busy>
    5bc4:	88 23       	and	r24, r24
    5bc6:	29 f0       	breq	.+10     	; 0x5bd2 <WriteByte_Comm485+0x52>
    5bc8:	c0 93 83 2e 	sts	0x2E83, r28	; 0x802e83 <tx_485_wridx>
    5bcc:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5bd0:	16 c0       	rjmp	.+44     	; 0x5bfe <WriteByte_Comm485+0x7e>
    5bd2:	82 e0       	ldi	r24, 0x02	; 2
    5bd4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    5bd8:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <GetTicks>
    5bdc:	21 e0       	ldi	r18, 0x01	; 1
    5bde:	20 93 cd 2d 	sts	0x2DCD, r18	; 0x802dcd <tx_485_busy>
    5be2:	c0 93 83 2e 	sts	0x2E83, r28	; 0x802e83 <tx_485_wridx>
    5be6:	c0 ea       	ldi	r28, 0xA0	; 160
    5be8:	d9 e0       	ldi	r29, 0x09	; 9
    5bea:	20 e2       	ldi	r18, 0x20	; 32
    5bec:	2b 83       	std	Y+3, r18	; 0x03
    5bee:	10 93 a2 00 	sts	0x00A2, r17	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    5bf2:	63 e0       	ldi	r22, 0x03	; 3
    5bf4:	70 e0       	ldi	r23, 0x00	; 0
    5bf6:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <BusyWaitTillAfter>
    5bfa:	81 e2       	ldi	r24, 0x21	; 33
    5bfc:	8b 83       	std	Y+3, r24	; 0x03
    5bfe:	df 91       	pop	r29
    5c00:	cf 91       	pop	r28
    5c02:	1f 91       	pop	r17
    5c04:	0f 91       	pop	r16
    5c06:	08 95       	ret

00005c08 <CanRead_Ctrl>:
    5c08:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <rx_ctrl_wridx>
    5c0c:	90 91 19 2c 	lds	r25, 0x2C19	; 0x802c19 <rx_ctrl_rdidx>
    5c10:	89 17       	cp	r24, r25
    5c12:	10 f0       	brcs	.+4      	; 0x5c18 <CanRead_Ctrl+0x10>
    5c14:	89 1b       	sub	r24, r25
    5c16:	08 95       	ret
    5c18:	80 5b       	subi	r24, 0xB0	; 176
    5c1a:	89 1b       	sub	r24, r25
    5c1c:	08 95       	ret

00005c1e <ReadByte_Ctrl>:
    5c1e:	cf 93       	push	r28
    5c20:	c0 91 19 2c 	lds	r28, 0x2C19	; 0x802c19 <rx_ctrl_rdidx>
    5c24:	0e 94 04 2e 	call	0x5c08	; 0x5c08 <CanRead_Ctrl>
    5c28:	88 23       	and	r24, r24
    5c2a:	e1 f3       	breq	.-8      	; 0x5c24 <ReadByte_Ctrl+0x6>
    5c2c:	ec 2f       	mov	r30, r28
    5c2e:	f0 e0       	ldi	r31, 0x00	; 0
    5c30:	e7 53       	subi	r30, 0x37	; 55
    5c32:	f4 4d       	sbci	r31, 0xD4	; 212
    5c34:	80 81       	ld	r24, Z
    5c36:	91 e0       	ldi	r25, 0x01	; 1
    5c38:	9c 0f       	add	r25, r28
    5c3a:	90 35       	cpi	r25, 0x50	; 80
    5c3c:	08 f0       	brcs	.+2      	; 0x5c40 <ReadByte_Ctrl+0x22>
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	90 93 19 2c 	sts	0x2C19, r25	; 0x802c19 <rx_ctrl_rdidx>
    5c44:	cf 91       	pop	r28
    5c46:	08 95       	ret

00005c48 <CanWrite_Ctrl>:
    5c48:	20 91 16 2d 	lds	r18, 0x2D16	; 0x802d16 <tx_ctrl_wridx>
    5c4c:	91 e0       	ldi	r25, 0x01	; 1
    5c4e:	92 0f       	add	r25, r18
    5c50:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <tx_ctrl_rdidx>
    5c54:	9a 3f       	cpi	r25, 0xFA	; 250
    5c56:	10 f0       	brcs	.+4      	; 0x5c5c <CanWrite_Ctrl+0x14>
    5c58:	97 e0       	ldi	r25, 0x07	; 7
    5c5a:	92 0f       	add	r25, r18
    5c5c:	89 17       	cp	r24, r25
    5c5e:	10 f0       	brcs	.+4      	; 0x5c64 <CanWrite_Ctrl+0x1c>
    5c60:	89 1b       	sub	r24, r25
    5c62:	08 95       	ret
    5c64:	86 50       	subi	r24, 0x06	; 6
    5c66:	89 1b       	sub	r24, r25
    5c68:	08 95       	ret

00005c6a <WriteByte_Ctrl>:
    5c6a:	0f 93       	push	r16
    5c6c:	1f 93       	push	r17
    5c6e:	cf 93       	push	r28
    5c70:	df 93       	push	r29
    5c72:	d8 2f       	mov	r29, r24
    5c74:	00 eb       	ldi	r16, 0xB0	; 176
    5c76:	19 e0       	ldi	r17, 0x09	; 9
    5c78:	c1 e2       	ldi	r28, 0x21	; 33
    5c7a:	02 c0       	rjmp	.+4      	; 0x5c80 <WriteByte_Ctrl+0x16>
    5c7c:	f8 01       	movw	r30, r16
    5c7e:	c3 83       	std	Z+3, r28	; 0x03
    5c80:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <CanWrite_Ctrl>
    5c84:	88 23       	and	r24, r24
    5c86:	d1 f3       	breq	.-12     	; 0x5c7c <WriteByte_Ctrl+0x12>
    5c88:	80 91 16 2d 	lds	r24, 0x2D16	; 0x802d16 <tx_ctrl_wridx>
    5c8c:	e8 2f       	mov	r30, r24
    5c8e:	f0 e0       	ldi	r31, 0x00	; 0
    5c90:	e5 5e       	subi	r30, 0xE5	; 229
    5c92:	f3 4d       	sbci	r31, 0xD3	; 211
    5c94:	d0 83       	st	Z, r29
    5c96:	8f 5f       	subi	r24, 0xFF	; 255
    5c98:	8a 3f       	cpi	r24, 0xFA	; 250
    5c9a:	08 f0       	brcs	.+2      	; 0x5c9e <WriteByte_Ctrl+0x34>
    5c9c:	80 e0       	ldi	r24, 0x00	; 0
    5c9e:	e0 ea       	ldi	r30, 0xA0	; 160
    5ca0:	f0 e0       	ldi	r31, 0x00	; 0
    5ca2:	92 81       	ldd	r25, Z+2	; 0x02
    5ca4:	29 2f       	mov	r18, r25
    5ca6:	2e 7f       	andi	r18, 0xFE	; 254
    5ca8:	22 83       	std	Z+2, r18	; 0x02
    5caa:	80 93 16 2d 	sts	0x2D16, r24	; 0x802d16 <tx_ctrl_wridx>
    5cae:	81 e2       	ldi	r24, 0x21	; 33
    5cb0:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    5cb4:	92 83       	std	Z+2, r25	; 0x02
    5cb6:	df 91       	pop	r29
    5cb8:	cf 91       	pop	r28
    5cba:	1f 91       	pop	r17
    5cbc:	0f 91       	pop	r16
    5cbe:	08 95       	ret

00005cc0 <Ctrl_putchar>:
    5cc0:	cf 93       	push	r28
    5cc2:	c8 2f       	mov	r28, r24
    5cc4:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <WriteByte_Ctrl>
    5cc8:	ce 33       	cpi	r28, 0x3E	; 62
    5cca:	19 f4       	brne	.+6      	; 0x5cd2 <Ctrl_putchar+0x12>
    5ccc:	10 92 fc 2a 	sts	0x2AFC, r1	; 0x802afc <checksum.4265>
    5cd0:	23 c0       	rjmp	.+70     	; 0x5d18 <Ctrl_putchar+0x58>
    5cd2:	cc 33       	cpi	r28, 0x3C	; 60
    5cd4:	e1 f4       	brne	.+56     	; 0x5d0e <Ctrl_putchar+0x4e>
    5cd6:	c0 91 fc 2a 	lds	r28, 0x2AFC	; 0x802afc <checksum.4265>
    5cda:	8c 2f       	mov	r24, r28
    5cdc:	82 95       	swap	r24
    5cde:	8f 70       	andi	r24, 0x0F	; 15
    5ce0:	28 2f       	mov	r18, r24
    5ce2:	30 e0       	ldi	r19, 0x00	; 0
    5ce4:	2a 30       	cpi	r18, 0x0A	; 10
    5ce6:	31 05       	cpc	r19, r1
    5ce8:	14 f4       	brge	.+4      	; 0x5cee <Ctrl_putchar+0x2e>
    5cea:	80 5d       	subi	r24, 0xD0	; 208
    5cec:	01 c0       	rjmp	.+2      	; 0x5cf0 <Ctrl_putchar+0x30>
    5cee:	89 5c       	subi	r24, 0xC9	; 201
    5cf0:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <WriteByte_Ctrl>
    5cf4:	cf 70       	andi	r28, 0x0F	; 15
    5cf6:	8c 2f       	mov	r24, r28
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	0a 97       	sbiw	r24, 0x0a	; 10
    5cfc:	1c f4       	brge	.+6      	; 0x5d04 <Ctrl_putchar+0x44>
    5cfe:	80 e3       	ldi	r24, 0x30	; 48
    5d00:	8c 0f       	add	r24, r28
    5d02:	02 c0       	rjmp	.+4      	; 0x5d08 <Ctrl_putchar+0x48>
    5d04:	87 e3       	ldi	r24, 0x37	; 55
    5d06:	8c 0f       	add	r24, r28
    5d08:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <WriteByte_Ctrl>
    5d0c:	05 c0       	rjmp	.+10     	; 0x5d18 <Ctrl_putchar+0x58>
    5d0e:	80 91 fc 2a 	lds	r24, 0x2AFC	; 0x802afc <checksum.4265>
    5d12:	c8 27       	eor	r28, r24
    5d14:	c0 93 fc 2a 	sts	0x2AFC, r28	; 0x802afc <checksum.4265>
    5d18:	80 e0       	ldi	r24, 0x00	; 0
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	cf 91       	pop	r28
    5d1e:	08 95       	ret

00005d20 <__vector_88>:


ISR(USARTD0_RXC_vect) {
    5d20:	1f 92       	push	r1
    5d22:	0f 92       	push	r0
    5d24:	0f b6       	in	r0, 0x3f	; 63
    5d26:	0f 92       	push	r0
    5d28:	11 24       	eor	r1, r1
    5d2a:	0b b6       	in	r0, 0x3b	; 59
    5d2c:	0f 92       	push	r0
    5d2e:	8f 93       	push	r24
    5d30:	9f 93       	push	r25
    5d32:	ef 93       	push	r30
    5d34:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_485_wridx;
    5d36:	80 91 cc 2d 	lds	r24, 0x2DCC	; 0x802dcc <rx_485_wridx>
	rx_485_buf[curSlot] = USARTD0.DATA;
    5d3a:	e8 2f       	mov	r30, r24
    5d3c:	f0 e0       	ldi	r31, 0x00	; 0
    5d3e:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    5d42:	e9 5e       	subi	r30, 0xE9	; 233
    5d44:	f2 4d       	sbci	r31, 0xD2	; 210
    5d46:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5d48:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_COMM485)
    5d4a:	84 3b       	cpi	r24, 0xB4	; 180
    5d4c:	08 f0       	brcs	.+2      	; 0x5d50 <__vector_88+0x30>
	nextSlot = 0;
    5d4e:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_485_rdidx)
    5d50:	90 91 cb 2d 	lds	r25, 0x2DCB	; 0x802dcb <rx_485_rdidx>
    5d54:	89 13       	cpse	r24, r25
	rx_485_wridx = nextSlot;
    5d56:	80 93 cc 2d 	sts	0x2DCC, r24	; 0x802dcc <rx_485_wridx>
	
} /* ISR(USARTD0_RXC_vect) */
    5d5a:	ff 91       	pop	r31
    5d5c:	ef 91       	pop	r30
    5d5e:	9f 91       	pop	r25
    5d60:	8f 91       	pop	r24
    5d62:	0f 90       	pop	r0
    5d64:	0b be       	out	0x3b, r0	; 59
    5d66:	0f 90       	pop	r0
    5d68:	0f be       	out	0x3f, r0	; 63
    5d6a:	0f 90       	pop	r0
    5d6c:	1f 90       	pop	r1
    5d6e:	18 95       	reti

00005d70 <__vector_89>:


ISR(USARTD0_DRE_vect) {
    5d70:	1f 92       	push	r1
    5d72:	0f 92       	push	r0
    5d74:	0f b6       	in	r0, 0x3f	; 63
    5d76:	0f 92       	push	r0
    5d78:	11 24       	eor	r1, r1
    5d7a:	0b b6       	in	r0, 0x3b	; 59
    5d7c:	0f 92       	push	r0
    5d7e:	2f 93       	push	r18
    5d80:	8f 93       	push	r24
    5d82:	9f 93       	push	r25
    5d84:	ef 93       	push	r30
    5d86:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_485_rdidx;
    5d88:	80 91 82 2e 	lds	r24, 0x2E82	; 0x802e82 <tx_485_rdidx>
	lastSlot = tx_485_wridx;
    5d8c:	90 91 83 2e 	lds	r25, 0x2E83	; 0x802e83 <tx_485_wridx>
	
	if(curSlot != lastSlot) {
    5d90:	89 17       	cp	r24, r25
    5d92:	69 f0       	breq	.+26     	; 0x5dae <__vector_89+0x3e>
		USARTD0.DATA = tx_485_buf[curSlot];
    5d94:	e8 2f       	mov	r30, r24
    5d96:	f0 e0       	ldi	r31, 0x00	; 0
    5d98:	e2 53       	subi	r30, 0x32	; 50
    5d9a:	f2 4d       	sbci	r31, 0xD2	; 210
    5d9c:	20 81       	ld	r18, Z
    5d9e:	20 93 a0 09 	sts	0x09A0, r18	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
		if(++nextSlot >= TXBUF_DEPTH_COMM485)
    5da2:	8f 5f       	subi	r24, 0xFF	; 255
    5da4:	84 3b       	cpi	r24, 0xB4	; 180
    5da6:	08 f0       	brcs	.+2      	; 0x5daa <__vector_89+0x3a>
		nextSlot = 0;
    5da8:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5daa:	89 13       	cpse	r24, r25
    5dac:	04 c0       	rjmp	.+8      	; 0x5db6 <__vector_89+0x46>
	USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_LO_gc | USART_DREINTLVL_OFF_gc;
    5dae:	84 e2       	ldi	r24, 0x24	; 36
    5db0:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
    5db4:	89 2f       	mov	r24, r25
	
	tx_485_rdidx = nextSlot;
    5db6:	80 93 82 2e 	sts	0x2E82, r24	; 0x802e82 <tx_485_rdidx>
	
} /* ISR(USARTD0_DRE_vect) */
    5dba:	ff 91       	pop	r31
    5dbc:	ef 91       	pop	r30
    5dbe:	9f 91       	pop	r25
    5dc0:	8f 91       	pop	r24
    5dc2:	2f 91       	pop	r18
    5dc4:	0f 90       	pop	r0
    5dc6:	0b be       	out	0x3b, r0	; 59
    5dc8:	0f 90       	pop	r0
    5dca:	0f be       	out	0x3f, r0	; 63
    5dcc:	0f 90       	pop	r0
    5dce:	1f 90       	pop	r1
    5dd0:	18 95       	reti

00005dd2 <__vector_90>:


ISR(USARTD0_TXC_vect) {
    5dd2:	1f 92       	push	r1
    5dd4:	0f 92       	push	r0
    5dd6:	0f b6       	in	r0, 0x3f	; 63
    5dd8:	0f 92       	push	r0
    5dda:	11 24       	eor	r1, r1
    5ddc:	8f 93       	push	r24
    5dde:	9f 93       	push	r25
	
	if(tx_485_rdidx == tx_485_wridx) {/* Still no bytes to tx ? */
    5de0:	90 91 82 2e 	lds	r25, 0x2E82	; 0x802e82 <tx_485_rdidx>
    5de4:	80 91 83 2e 	lds	r24, 0x2E83	; 0x802e83 <tx_485_wridx>
    5de8:	98 13       	cpse	r25, r24
    5dea:	06 c0       	rjmp	.+12     	; 0x5df8 <__vector_90+0x26>
		PORTD.OUTCLR = PD_DRIVER_ENABLE_COMM485; /* Transmission complete; we can turn off the driver enable line */
    5dec:	82 e0       	ldi	r24, 0x02	; 2
    5dee:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
		tx_485_busy = 0;
    5df2:	10 92 cd 2d 	sts	0x2DCD, r1	; 0x802dcd <tx_485_busy>
    5df6:	03 c0       	rjmp	.+6      	; 0x5dfe <__vector_90+0x2c>
	}	
	else /* Re-enable TX ISR */
		USARTD0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_LO_gc;
    5df8:	81 e2       	ldi	r24, 0x21	; 33
    5dfa:	80 93 a3 09 	sts	0x09A3, r24	; 0x8009a3 <__TEXT_REGION_LENGTH__+0x7009a3>
	
} /* ISR(USARTD0_TXC_vect) */
    5dfe:	9f 91       	pop	r25
    5e00:	8f 91       	pop	r24
    5e02:	0f 90       	pop	r0
    5e04:	0f be       	out	0x3f, r0	; 63
    5e06:	0f 90       	pop	r0
    5e08:	1f 90       	pop	r1
    5e0a:	18 95       	reti

00005e0c <__vector_91>:


ISR(USARTD1_RXC_vect) {
    5e0c:	1f 92       	push	r1
    5e0e:	0f 92       	push	r0
    5e10:	0f b6       	in	r0, 0x3f	; 63
    5e12:	0f 92       	push	r0
    5e14:	11 24       	eor	r1, r1
    5e16:	0b b6       	in	r0, 0x3b	; 59
    5e18:	0f 92       	push	r0
    5e1a:	8f 93       	push	r24
    5e1c:	9f 93       	push	r25
    5e1e:	ef 93       	push	r30
    5e20:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_ctrl_wridx;
    5e22:	80 91 1a 2c 	lds	r24, 0x2C1A	; 0x802c1a <rx_ctrl_wridx>
	rx_ctrl_buf[curSlot] = USARTD1.DATA;
    5e26:	e8 2f       	mov	r30, r24
    5e28:	f0 e0       	ldi	r31, 0x00	; 0
    5e2a:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
    5e2e:	e7 53       	subi	r30, 0x37	; 55
    5e30:	f4 4d       	sbci	r31, 0xD4	; 212
    5e32:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5e34:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_CTRL)
    5e36:	80 35       	cpi	r24, 0x50	; 80
    5e38:	08 f0       	brcs	.+2      	; 0x5e3c <__vector_91+0x30>
		nextSlot = 0;
    5e3a:	80 e0       	ldi	r24, 0x00	; 0
		
	if(nextSlot != rx_ctrl_rdidx)
    5e3c:	90 91 19 2c 	lds	r25, 0x2C19	; 0x802c19 <rx_ctrl_rdidx>
    5e40:	89 13       	cpse	r24, r25
		rx_ctrl_wridx = nextSlot;
    5e42:	80 93 1a 2c 	sts	0x2C1A, r24	; 0x802c1a <rx_ctrl_wridx>
	
} /* ISR(USARTD1_RXC_vect) */
    5e46:	ff 91       	pop	r31
    5e48:	ef 91       	pop	r30
    5e4a:	9f 91       	pop	r25
    5e4c:	8f 91       	pop	r24
    5e4e:	0f 90       	pop	r0
    5e50:	0b be       	out	0x3b, r0	; 59
    5e52:	0f 90       	pop	r0
    5e54:	0f be       	out	0x3f, r0	; 63
    5e56:	0f 90       	pop	r0
    5e58:	1f 90       	pop	r1
    5e5a:	18 95       	reti

00005e5c <__vector_92>:


ISR(USARTD1_DRE_vect) {
    5e5c:	1f 92       	push	r1
    5e5e:	0f 92       	push	r0
    5e60:	0f b6       	in	r0, 0x3f	; 63
    5e62:	0f 92       	push	r0
    5e64:	11 24       	eor	r1, r1
    5e66:	0b b6       	in	r0, 0x3b	; 59
    5e68:	0f 92       	push	r0
    5e6a:	2f 93       	push	r18
    5e6c:	8f 93       	push	r24
    5e6e:	9f 93       	push	r25
    5e70:	ef 93       	push	r30
    5e72:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_ctrl_rdidx;
    5e74:	80 91 15 2d 	lds	r24, 0x2D15	; 0x802d15 <tx_ctrl_rdidx>
	lastSlot = tx_ctrl_wridx;
    5e78:	90 91 16 2d 	lds	r25, 0x2D16	; 0x802d16 <tx_ctrl_wridx>
	
	if(curSlot != lastSlot) {
    5e7c:	89 17       	cp	r24, r25
    5e7e:	69 f0       	breq	.+26     	; 0x5e9a <__vector_92+0x3e>
		USARTD1.DATA = tx_ctrl_buf[curSlot];
    5e80:	e8 2f       	mov	r30, r24
    5e82:	f0 e0       	ldi	r31, 0x00	; 0
    5e84:	e5 5e       	subi	r30, 0xE5	; 229
    5e86:	f3 4d       	sbci	r31, 0xD3	; 211
    5e88:	20 81       	ld	r18, Z
    5e8a:	20 93 b0 09 	sts	0x09B0, r18	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
		nextSlot = curSlot + 1;
    5e8e:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_CTRL)
    5e90:	8a 3f       	cpi	r24, 0xFA	; 250
    5e92:	08 f0       	brcs	.+2      	; 0x5e96 <__vector_92+0x3a>
			nextSlot = 0;
    5e94:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5e96:	89 13       	cpse	r24, r25
    5e98:	04 c0       	rjmp	.+8      	; 0x5ea2 <__vector_92+0x46>
		USARTD1.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5e9a:	80 e2       	ldi	r24, 0x20	; 32
    5e9c:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
    5ea0:	89 2f       	mov	r24, r25
	
	tx_ctrl_rdidx = nextSlot;
    5ea2:	80 93 15 2d 	sts	0x2D15, r24	; 0x802d15 <tx_ctrl_rdidx>
	
} /* ISR(USARTD1_DRE_vect) */
    5ea6:	ff 91       	pop	r31
    5ea8:	ef 91       	pop	r30
    5eaa:	9f 91       	pop	r25
    5eac:	8f 91       	pop	r24
    5eae:	2f 91       	pop	r18
    5eb0:	0f 90       	pop	r0
    5eb2:	0b be       	out	0x3b, r0	; 59
    5eb4:	0f 90       	pop	r0
    5eb6:	0f be       	out	0x3f, r0	; 63
    5eb8:	0f 90       	pop	r0
    5eba:	1f 90       	pop	r1
    5ebc:	18 95       	reti

00005ebe <__vector_119>:


ISR(USARTF0_RXC_vect) {
    5ebe:	1f 92       	push	r1
    5ec0:	0f 92       	push	r0
    5ec2:	0f b6       	in	r0, 0x3f	; 63
    5ec4:	0f 92       	push	r0
    5ec6:	11 24       	eor	r1, r1
    5ec8:	0b b6       	in	r0, 0x3b	; 59
    5eca:	0f 92       	push	r0
    5ecc:	8f 93       	push	r24
    5ece:	9f 93       	push	r25
    5ed0:	ef 93       	push	r30
    5ed2:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot;
	
	curSlot = rx_fc_wridx;
    5ed4:	80 91 62 2b 	lds	r24, 0x2B62	; 0x802b62 <rx_fc_wridx>
	rx_fc_buf[curSlot] = USARTF0.DATA;
    5ed8:	e8 2f       	mov	r30, r24
    5eda:	f0 e0       	ldi	r31, 0x00	; 0
    5edc:	90 91 a0 0b 	lds	r25, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
    5ee0:	e3 50       	subi	r30, 0x03	; 3
    5ee2:	f5 4d       	sbci	r31, 0xD5	; 213
    5ee4:	90 83       	st	Z, r25
	
	nextSlot = curSlot + 1;
    5ee6:	8f 5f       	subi	r24, 0xFF	; 255
	if(nextSlot >= RXBUF_DEPTH_FC)
    5ee8:	84 36       	cpi	r24, 0x64	; 100
    5eea:	08 f0       	brcs	.+2      	; 0x5eee <__vector_119+0x30>
	nextSlot = 0;
    5eec:	80 e0       	ldi	r24, 0x00	; 0
	
	if(nextSlot != rx_fc_rdidx)
    5eee:	90 91 61 2b 	lds	r25, 0x2B61	; 0x802b61 <rx_fc_rdidx>
    5ef2:	89 13       	cpse	r24, r25
	rx_fc_wridx = nextSlot;
    5ef4:	80 93 62 2b 	sts	0x2B62, r24	; 0x802b62 <rx_fc_wridx>
	
} /* ISR(USARTF0_RXC_vect) */
    5ef8:	ff 91       	pop	r31
    5efa:	ef 91       	pop	r30
    5efc:	9f 91       	pop	r25
    5efe:	8f 91       	pop	r24
    5f00:	0f 90       	pop	r0
    5f02:	0b be       	out	0x3b, r0	; 59
    5f04:	0f 90       	pop	r0
    5f06:	0f be       	out	0x3f, r0	; 63
    5f08:	0f 90       	pop	r0
    5f0a:	1f 90       	pop	r1
    5f0c:	18 95       	reti

00005f0e <__vector_120>:


ISR(USARTF0_DRE_vect) {
    5f0e:	1f 92       	push	r1
    5f10:	0f 92       	push	r0
    5f12:	0f b6       	in	r0, 0x3f	; 63
    5f14:	0f 92       	push	r0
    5f16:	11 24       	eor	r1, r1
    5f18:	0b b6       	in	r0, 0x3b	; 59
    5f1a:	0f 92       	push	r0
    5f1c:	2f 93       	push	r18
    5f1e:	8f 93       	push	r24
    5f20:	9f 93       	push	r25
    5f22:	ef 93       	push	r30
    5f24:	ff 93       	push	r31
	
	uint8_t curSlot, nextSlot, lastSlot;
	
	nextSlot = curSlot = tx_fc_rdidx;
    5f26:	80 91 c7 2b 	lds	r24, 0x2BC7	; 0x802bc7 <tx_fc_rdidx>
	lastSlot = tx_fc_wridx;
    5f2a:	90 91 c8 2b 	lds	r25, 0x2BC8	; 0x802bc8 <tx_fc_wridx>
	
	if(curSlot != lastSlot) {
    5f2e:	89 17       	cp	r24, r25
    5f30:	69 f0       	breq	.+26     	; 0x5f4c <__vector_120+0x3e>
		USARTF0.DATA = tx_fc_buf[curSlot];
    5f32:	e8 2f       	mov	r30, r24
    5f34:	f0 e0       	ldi	r31, 0x00	; 0
    5f36:	ed 59       	subi	r30, 0x9D	; 157
    5f38:	f4 4d       	sbci	r31, 0xD4	; 212
    5f3a:	20 81       	ld	r18, Z
    5f3c:	20 93 a0 0b 	sts	0x0BA0, r18	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x700ba0>
		nextSlot = curSlot + 1;
    5f40:	8f 5f       	subi	r24, 0xFF	; 255
		if(nextSlot >= TXBUF_DEPTH_FC)
    5f42:	84 36       	cpi	r24, 0x64	; 100
    5f44:	08 f0       	brcs	.+2      	; 0x5f48 <__vector_120+0x3a>
		nextSlot = 0;
    5f46:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(nextSlot == lastSlot)
    5f48:	89 13       	cpse	r24, r25
    5f4a:	04 c0       	rjmp	.+8      	; 0x5f54 <__vector_120+0x46>
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc | USART_TXCINTLVL_OFF_gc | USART_DREINTLVL_OFF_gc;
    5f4c:	80 e2       	ldi	r24, 0x20	; 32
    5f4e:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <__TEXT_REGION_LENGTH__+0x700ba3>
    5f52:	89 2f       	mov	r24, r25
	
	tx_fc_rdidx = nextSlot;
    5f54:	80 93 c7 2b 	sts	0x2BC7, r24	; 0x802bc7 <tx_fc_rdidx>
	
} /* ISR(USARTF0_DRE_vect) */
    5f58:	ff 91       	pop	r31
    5f5a:	ef 91       	pop	r30
    5f5c:	9f 91       	pop	r25
    5f5e:	8f 91       	pop	r24
    5f60:	2f 91       	pop	r18
    5f62:	0f 90       	pop	r0
    5f64:	0b be       	out	0x3b, r0	; 59
    5f66:	0f 90       	pop	r0
    5f68:	0f be       	out	0x3f, r0	; 63
    5f6a:	0f 90       	pop	r0
    5f6c:	1f 90       	pop	r1
    5f6e:	18 95       	reti

00005f70 <InitTimer>:
#include "Timers.h"


void InitTimer(void) {

	TCE0.CTRLA = TC_CLKSEL_DIV8_gc;
    5f70:	e0 e0       	ldi	r30, 0x00	; 0
    5f72:	fa e0       	ldi	r31, 0x0A	; 10
    5f74:	84 e0       	ldi	r24, 0x04	; 4
    5f76:	80 83       	st	Z, r24
	TCE0.CTRLB = 0x00; /* No input capture, normal mode */
    5f78:	11 82       	std	Z+1, r1	; 0x01
	/* CTRLC is of no interest to us */
	TCE0.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc; /* No events */
    5f7a:	13 82       	std	Z+3, r1	; 0x03
	TCE0.CTRLE = 0x00; /* No byte mode */
    5f7c:	14 82       	std	Z+4, r1	; 0x04
	TCE0.PER = TICKTIMER_PERIOD;
    5f7e:	8f ef       	ldi	r24, 0xFF	; 255
    5f80:	9f ef       	ldi	r25, 0xFF	; 255
    5f82:	86 a3       	std	Z+38, r24	; 0x26
    5f84:	97 a3       	std	Z+39, r25	; 0x27
	TCE0.INTCTRLA = TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_OFF_gc; /* No interrupts (for now) */
    5f86:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = 0x00; /* Disable Compare/Capture interrupts */
    5f88:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CNT = 0;
    5f8a:	10 a2       	std	Z+32, r1	; 0x20
    5f8c:	11 a2       	std	Z+33, r1	; 0x21
    5f8e:	08 95       	ret

00005f90 <GetTicks>:

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    5f90:	80 91 20 0a 	lds	r24, 0x0A20	; 0x800a20 <__TEXT_REGION_LENGTH__+0x700a20>
    5f94:	90 91 21 0a 	lds	r25, 0x0A21	; 0x800a21 <__TEXT_REGION_LENGTH__+0x700a21>
} /* GetTicks */
    5f98:	08 95       	ret

00005f9a <BusyWaitTillAfter>:


timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
    5f9a:	9c 01       	movw	r18, r24
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
    5f9c:	66 0f       	add	r22, r22
    5f9e:	77 1f       	adc	r23, r23
    5fa0:	66 0f       	add	r22, r22
    5fa2:	77 1f       	adc	r23, r23
	TCE0.CNT = 0;

} /* InitTimer */

timetick_t GetTicks(void) {
	return TCE0.CNT;
    5fa4:	e0 e0       	ldi	r30, 0x00	; 0
    5fa6:	fa e0       	ldi	r31, 0x0A	; 10
    5fa8:	80 a1       	ldd	r24, Z+32	; 0x20
    5faa:	91 a1       	ldd	r25, Z+33	; 0x21
timetick_t BusyWaitTillAfter(timetick_t then, int usWait) {
	timetick_t tickWait = usWait * US_PER_TICK, delta, now;
	
	do {
		now = GetTicks();
		if(now < then) // Fix wraparound
    5fac:	82 17       	cp	r24, r18
    5fae:	93 07       	cpc	r25, r19
    5fb0:	08 f4       	brcc	.+2      	; 0x5fb4 <BusyWaitTillAfter+0x1a>
		now += TICKTIMER_PERIOD;
    5fb2:	01 97       	sbiw	r24, 0x01	; 1
		delta = now - then;
	} while(delta < tickWait);
    5fb4:	ac 01       	movw	r20, r24
    5fb6:	42 1b       	sub	r20, r18
    5fb8:	53 0b       	sbc	r21, r19
    5fba:	46 17       	cp	r20, r22
    5fbc:	57 07       	cpc	r21, r23
    5fbe:	a0 f3       	brcs	.-24     	; 0x5fa8 <BusyWaitTillAfter+0xe>
	
	return now;
	
} /* BusyWaitTillAfter */
    5fc0:	08 95       	ret

00005fc2 <GetBusID>:

void FinishEEPROMOperations(void) {
	
	eeprom_busy_wait();
	
} /* FinishEEPROMOperations */
    5fc2:	80 91 68 06 	lds	r24, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    5fc6:	80 73       	andi	r24, 0x30	; 48
    5fc8:	80 31       	cpi	r24, 0x10	; 16
    5fca:	29 f0       	breq	.+10     	; 0x5fd6 <GetBusID+0x14>
    5fcc:	80 32       	cpi	r24, 0x20	; 32
    5fce:	29 f0       	breq	.+10     	; 0x5fda <GetBusID+0x18>
    5fd0:	81 11       	cpse	r24, r1
    5fd2:	05 c0       	rjmp	.+10     	; 0x5fde <GetBusID+0x1c>
    5fd4:	06 c0       	rjmp	.+12     	; 0x5fe2 <GetBusID+0x20>
    5fd6:	85 e0       	ldi	r24, 0x05	; 5
    5fd8:	08 95       	ret
    5fda:	86 e0       	ldi	r24, 0x06	; 6
    5fdc:	08 95       	ret
    5fde:	87 e0       	ldi	r24, 0x07	; 7
    5fe0:	08 95       	ret
    5fe2:	83 e0       	ldi	r24, 0x03	; 3
    5fe4:	08 95       	ret

00005fe6 <PrintBoardType>:
    5fe6:	9c 01       	movw	r18, r24
    5fe8:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x700668>
    5fec:	90 73       	andi	r25, 0x30	; 48
    5fee:	90 31       	cpi	r25, 0x10	; 16
    5ff0:	91 f0       	breq	.+36     	; 0x6016 <__stack+0x17>
    5ff2:	18 f4       	brcc	.+6      	; 0x5ffa <PrintBoardType+0x14>
    5ff4:	99 23       	and	r25, r25
    5ff6:	31 f0       	breq	.+12     	; 0x6004 <__stack+0x5>
    5ff8:	29 c0       	rjmp	.+82     	; 0x604c <__stack+0x4d>
    5ffa:	90 32       	cpi	r25, 0x20	; 32
    5ffc:	a9 f0       	breq	.+42     	; 0x6028 <__stack+0x29>
    5ffe:	90 33       	cpi	r25, 0x30	; 48
    6000:	e1 f0       	breq	.+56     	; 0x603a <__stack+0x3b>
    6002:	24 c0       	rjmp	.+72     	; 0x604c <__stack+0x4d>
    6004:	43 e0       	ldi	r20, 0x03	; 3
    6006:	50 e0       	ldi	r21, 0x00	; 0
    6008:	61 e0       	ldi	r22, 0x01	; 1
    600a:	70 e0       	ldi	r23, 0x00	; 0
    600c:	8b e5       	ldi	r24, 0x5B	; 91
    600e:	97 e2       	ldi	r25, 0x27	; 39
    6010:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    6014:	08 95       	ret
    6016:	48 e0       	ldi	r20, 0x08	; 8
    6018:	50 e0       	ldi	r21, 0x00	; 0
    601a:	61 e0       	ldi	r22, 0x01	; 1
    601c:	70 e0       	ldi	r23, 0x00	; 0
    601e:	8f e5       	ldi	r24, 0x5F	; 95
    6020:	97 e2       	ldi	r25, 0x27	; 39
    6022:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    6026:	08 95       	ret
    6028:	49 e0       	ldi	r20, 0x09	; 9
    602a:	50 e0       	ldi	r21, 0x00	; 0
    602c:	61 e0       	ldi	r22, 0x01	; 1
    602e:	70 e0       	ldi	r23, 0x00	; 0
    6030:	88 e6       	ldi	r24, 0x68	; 104
    6032:	97 e2       	ldi	r25, 0x27	; 39
    6034:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    6038:	08 95       	ret
    603a:	4f e0       	ldi	r20, 0x0F	; 15
    603c:	50 e0       	ldi	r21, 0x00	; 0
    603e:	61 e0       	ldi	r22, 0x01	; 1
    6040:	70 e0       	ldi	r23, 0x00	; 0
    6042:	82 e7       	ldi	r24, 0x72	; 114
    6044:	97 e2       	ldi	r25, 0x27	; 39
    6046:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    604a:	08 95       	ret
    604c:	47 e0       	ldi	r20, 0x07	; 7
    604e:	50 e0       	ldi	r21, 0x00	; 0
    6050:	61 e0       	ldi	r22, 0x01	; 1
    6052:	70 e0       	ldi	r23, 0x00	; 0
    6054:	82 e8       	ldi	r24, 0x82	; 130
    6056:	97 e2       	ldi	r25, 0x27	; 39
    6058:	0e 94 ae 3c 	call	0x795c	; 0x795c <fwrite>
    605c:	08 95       	ret

0000605e <PrintProcessorID>:
    605e:	cf 92       	push	r12
    6060:	df 92       	push	r13
    6062:	ef 92       	push	r14
    6064:	ff 92       	push	r15
    6066:	0f 93       	push	r16
    6068:	1f 93       	push	r17
    606a:	cf 93       	push	r28
    606c:	df 93       	push	r29
    606e:	f8 2e       	mov	r15, r24
    6070:	e9 2e       	mov	r14, r25
    6072:	e0 e9       	ldi	r30, 0x90	; 144
    6074:	f0 e0       	ldi	r31, 0x00	; 0
    6076:	33 81       	ldd	r19, Z+3	; 0x03
    6078:	22 81       	ldd	r18, Z+2	; 0x02
    607a:	91 81       	ldd	r25, Z+1	; 0x01
    607c:	80 81       	ld	r24, Z
    607e:	1f 92       	push	r1
    6080:	3f 93       	push	r19
    6082:	1f 92       	push	r1
    6084:	2f 93       	push	r18
    6086:	1f 92       	push	r1
    6088:	9f 93       	push	r25
    608a:	1f 92       	push	r1
    608c:	8f 93       	push	r24
    608e:	8a e8       	ldi	r24, 0x8A	; 138
    6090:	97 e2       	ldi	r25, 0x27	; 39
    6092:	9f 93       	push	r25
    6094:	8f 93       	push	r24
    6096:	ef 92       	push	r14
    6098:	ff 92       	push	r15
    609a:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    609e:	c4 e8       	ldi	r28, 0x84	; 132
    60a0:	de e2       	ldi	r29, 0x2E	; 46
    60a2:	0f 2e       	mov	r0, r31
    60a4:	ff e8       	ldi	r31, 0x8F	; 143
    60a6:	cf 2e       	mov	r12, r31
    60a8:	fe e2       	ldi	r31, 0x2E	; 46
    60aa:	df 2e       	mov	r13, r31
    60ac:	f0 2d       	mov	r31, r0
    60ae:	8d b7       	in	r24, 0x3d	; 61
    60b0:	9e b7       	in	r25, 0x3e	; 62
    60b2:	0c 96       	adiw	r24, 0x0c	; 12
    60b4:	8d bf       	out	0x3d, r24	; 61
    60b6:	9e bf       	out	0x3e, r25	; 62
    60b8:	0d eb       	ldi	r16, 0xBD	; 189
    60ba:	11 e2       	ldi	r17, 0x21	; 33
    60bc:	89 91       	ld	r24, Y+
    60be:	1f 92       	push	r1
    60c0:	8f 93       	push	r24
    60c2:	1f 93       	push	r17
    60c4:	0f 93       	push	r16
    60c6:	ef 92       	push	r14
    60c8:	ff 92       	push	r15
    60ca:	0e 94 62 3c 	call	0x78c4	; 0x78c4 <fprintf>
    60ce:	0f 90       	pop	r0
    60d0:	0f 90       	pop	r0
    60d2:	0f 90       	pop	r0
    60d4:	0f 90       	pop	r0
    60d6:	0f 90       	pop	r0
    60d8:	0f 90       	pop	r0
    60da:	cc 15       	cp	r28, r12
    60dc:	dd 05       	cpc	r29, r13
    60de:	71 f7       	brne	.-36     	; 0x60bc <PrintProcessorID+0x5e>
    60e0:	df 91       	pop	r29
    60e2:	cf 91       	pop	r28
    60e4:	1f 91       	pop	r17
    60e6:	0f 91       	pop	r16
    60e8:	ff 90       	pop	r15
    60ea:	ef 90       	pop	r14
    60ec:	df 90       	pop	r13
    60ee:	cf 90       	pop	r12
    60f0:	08 95       	ret

000060f2 <TryReadEEPROM>:
    60f2:	ef 92       	push	r14
    60f4:	ff 92       	push	r15
    60f6:	0f 93       	push	r16
    60f8:	1f 93       	push	r17
    60fa:	cf 93       	push	r28
    60fc:	df 93       	push	r29
    60fe:	cd b7       	in	r28, 0x3d	; 61
    6100:	de b7       	in	r29, 0x3e	; 62
    6102:	28 97       	sbiw	r28, 0x08	; 8
    6104:	cd bf       	out	0x3d, r28	; 61
    6106:	de bf       	out	0x3e, r29	; 62
    6108:	7c 01       	movw	r14, r24
    610a:	8a 01       	movw	r16, r20
    610c:	44 0f       	add	r20, r20
    610e:	55 1f       	adc	r21, r21
    6110:	ce 01       	movw	r24, r28
    6112:	01 96       	adiw	r24, 0x01	; 1
    6114:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <eeprom_read_block>
    6118:	01 15       	cp	r16, r1
    611a:	11 05       	cpc	r17, r1
    611c:	09 f4       	brne	.+2      	; 0x6120 <TryReadEEPROM+0x2e>
    611e:	41 c0       	rjmp	.+130    	; 0x61a2 <TryReadEEPROM+0xb0>
    6120:	20 e0       	ldi	r18, 0x00	; 0
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	40 e0       	ldi	r20, 0x00	; 0
    6126:	e1 e0       	ldi	r30, 0x01	; 1
    6128:	f0 e0       	ldi	r31, 0x00	; 0
    612a:	ec 0f       	add	r30, r28
    612c:	fd 1f       	adc	r31, r29
    612e:	e4 0f       	add	r30, r20
    6130:	f1 1d       	adc	r31, r1
    6132:	47 fd       	sbrc	r20, 7
    6134:	fa 95       	dec	r31
    6136:	50 81       	ld	r21, Z
    6138:	81 e0       	ldi	r24, 0x01	; 1
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	8c 0f       	add	r24, r28
    613e:	9d 1f       	adc	r25, r29
    6140:	28 0f       	add	r18, r24
    6142:	39 1f       	adc	r19, r25
    6144:	f9 01       	movw	r30, r18
    6146:	e0 0f       	add	r30, r16
    6148:	f1 1f       	adc	r31, r17
    614a:	90 81       	ld	r25, Z
    614c:	90 95       	com	r25
    614e:	81 e0       	ldi	r24, 0x01	; 1
    6150:	59 13       	cpse	r21, r25
    6152:	01 c0       	rjmp	.+2      	; 0x6156 <TryReadEEPROM+0x64>
    6154:	80 e0       	ldi	r24, 0x00	; 0
    6156:	4f 5f       	subi	r20, 0xFF	; 255
    6158:	24 2f       	mov	r18, r20
    615a:	04 2e       	mov	r0, r20
    615c:	00 0c       	add	r0, r0
    615e:	33 0b       	sbc	r19, r19
    6160:	20 17       	cp	r18, r16
    6162:	31 07       	cpc	r19, r17
    6164:	18 f4       	brcc	.+6      	; 0x616c <TryReadEEPROM+0x7a>
    6166:	59 17       	cp	r21, r25
    6168:	f1 f2       	breq	.-68     	; 0x6126 <TryReadEEPROM+0x34>
    616a:	1c c0       	rjmp	.+56     	; 0x61a4 <TryReadEEPROM+0xb2>
    616c:	59 13       	cpse	r21, r25
    616e:	1a c0       	rjmp	.+52     	; 0x61a4 <TryReadEEPROM+0xb2>
    6170:	20 e0       	ldi	r18, 0x00	; 0
    6172:	30 e0       	ldi	r19, 0x00	; 0
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	d7 01       	movw	r26, r14
    6178:	a2 0f       	add	r26, r18
    617a:	b3 1f       	adc	r27, r19
    617c:	e1 e0       	ldi	r30, 0x01	; 1
    617e:	f0 e0       	ldi	r31, 0x00	; 0
    6180:	ec 0f       	add	r30, r28
    6182:	fd 1f       	adc	r31, r29
    6184:	e9 0f       	add	r30, r25
    6186:	f1 1d       	adc	r31, r1
    6188:	97 fd       	sbrc	r25, 7
    618a:	fa 95       	dec	r31
    618c:	40 81       	ld	r20, Z
    618e:	4c 93       	st	X, r20
    6190:	9f 5f       	subi	r25, 0xFF	; 255
    6192:	29 2f       	mov	r18, r25
    6194:	09 2e       	mov	r0, r25
    6196:	00 0c       	add	r0, r0
    6198:	33 0b       	sbc	r19, r19
    619a:	20 17       	cp	r18, r16
    619c:	31 07       	cpc	r19, r17
    619e:	58 f3       	brcs	.-42     	; 0x6176 <TryReadEEPROM+0x84>
    61a0:	01 c0       	rjmp	.+2      	; 0x61a4 <TryReadEEPROM+0xb2>
    61a2:	80 e0       	ldi	r24, 0x00	; 0
    61a4:	28 96       	adiw	r28, 0x08	; 8
    61a6:	cd bf       	out	0x3d, r28	; 61
    61a8:	de bf       	out	0x3e, r29	; 62
    61aa:	df 91       	pop	r29
    61ac:	cf 91       	pop	r28
    61ae:	1f 91       	pop	r17
    61b0:	0f 91       	pop	r16
    61b2:	ff 90       	pop	r15
    61b4:	ef 90       	pop	r14
    61b6:	08 95       	ret

000061b8 <UpdateEEPROM>:
    61b8:	0f 93       	push	r16
    61ba:	1f 93       	push	r17
    61bc:	cf 93       	push	r28
    61be:	df 93       	push	r29
    61c0:	cd b7       	in	r28, 0x3d	; 61
    61c2:	de b7       	in	r29, 0x3e	; 62
    61c4:	28 97       	sbiw	r28, 0x08	; 8
    61c6:	cd bf       	out	0x3d, r28	; 61
    61c8:	de bf       	out	0x3e, r29	; 62
    61ca:	8c 01       	movw	r16, r24
    61cc:	da 01       	movw	r26, r20
    61ce:	10 97       	sbiw	r26, 0x00	; 0
    61d0:	19 f1       	breq	.+70     	; 0x6218 <UpdateEEPROM+0x60>
    61d2:	20 e0       	ldi	r18, 0x00	; 0
    61d4:	30 e0       	ldi	r19, 0x00	; 0
    61d6:	50 e0       	ldi	r21, 0x00	; 0
    61d8:	f8 01       	movw	r30, r16
    61da:	e2 0f       	add	r30, r18
    61dc:	f3 1f       	adc	r31, r19
    61de:	90 81       	ld	r25, Z
    61e0:	e1 e0       	ldi	r30, 0x01	; 1
    61e2:	f0 e0       	ldi	r31, 0x00	; 0
    61e4:	ec 0f       	add	r30, r28
    61e6:	fd 1f       	adc	r31, r29
    61e8:	e5 0f       	add	r30, r21
    61ea:	f1 1d       	adc	r31, r1
    61ec:	57 fd       	sbrc	r21, 7
    61ee:	fa 95       	dec	r31
    61f0:	90 83       	st	Z, r25
    61f2:	e1 e0       	ldi	r30, 0x01	; 1
    61f4:	f0 e0       	ldi	r31, 0x00	; 0
    61f6:	ec 0f       	add	r30, r28
    61f8:	fd 1f       	adc	r31, r29
    61fa:	2e 0f       	add	r18, r30
    61fc:	3f 1f       	adc	r19, r31
    61fe:	f9 01       	movw	r30, r18
    6200:	ea 0f       	add	r30, r26
    6202:	fb 1f       	adc	r31, r27
    6204:	90 95       	com	r25
    6206:	90 83       	st	Z, r25
    6208:	5f 5f       	subi	r21, 0xFF	; 255
    620a:	25 2f       	mov	r18, r21
    620c:	05 2e       	mov	r0, r21
    620e:	00 0c       	add	r0, r0
    6210:	33 0b       	sbc	r19, r19
    6212:	2a 17       	cp	r18, r26
    6214:	3b 07       	cpc	r19, r27
    6216:	00 f3       	brcs	.-64     	; 0x61d8 <UpdateEEPROM+0x20>
    6218:	ad 01       	movw	r20, r26
    621a:	44 0f       	add	r20, r20
    621c:	55 1f       	adc	r21, r21
    621e:	ce 01       	movw	r24, r28
    6220:	01 96       	adiw	r24, 0x01	; 1
    6222:	0e 94 bd 3d 	call	0x7b7a	; 0x7b7a <eeprom_update_block>
    6226:	28 96       	adiw	r28, 0x08	; 8
    6228:	cd bf       	out	0x3d, r28	; 61
    622a:	de bf       	out	0x3e, r29	; 62
    622c:	df 91       	pop	r29
    622e:	cf 91       	pop	r28
    6230:	1f 91       	pop	r17
    6232:	0f 91       	pop	r16
    6234:	08 95       	ret

00006236 <ReadCalibrationByte>:


uint8_t ReadCalibrationByte(uint8_t index) {
	uint8_t result;
	
	NVM.CMD = NVM_CMD_READ_CALIB_ROW_gc;
    6236:	a0 ec       	ldi	r26, 0xC0	; 192
    6238:	b1 e0       	ldi	r27, 0x01	; 1
    623a:	92 e0       	ldi	r25, 0x02	; 2
    623c:	1a 96       	adiw	r26, 0x0a	; 10
    623e:	9c 93       	st	X, r25
    6240:	1a 97       	sbiw	r26, 0x0a	; 10
	result = pgm_read_byte(index);
    6242:	e8 2f       	mov	r30, r24
    6244:	f0 e0       	ldi	r31, 0x00	; 0
    6246:	84 91       	lpm	r24, Z
	NVM.CMD = NVM_CMD_NO_OPERATION_gc;
    6248:	1a 96       	adiw	r26, 0x0a	; 10
    624a:	1c 92       	st	X, r1
	
	return result;
} /* ReadCalibrationByte */
    624c:	08 95       	ret

0000624e <InitUtil>:

#define PROCID_LEN 11

static uint8_t sProcID[PROCID_LEN];

void InitUtil(void) {
    624e:	cf 93       	push	r28
    6250:	df 93       	push	r29

	PORTD.DIRCLR = BOARDID_BIT1 | BOARDID_BIT0;
    6252:	e0 e6       	ldi	r30, 0x60	; 96
    6254:	f6 e0       	ldi	r31, 0x06	; 6
    6256:	80 e3       	ldi	r24, 0x30	; 48
    6258:	82 83       	std	Z+2, r24	; 0x02

	PORTD.PIN4CTRL = PORT_OPC_PULLDOWN_gc;
    625a:	80 e1       	ldi	r24, 0x10	; 16
    625c:	84 8b       	std	Z+20, r24	; 0x14
	PORTD.PIN5CTRL = PORT_OPC_PULLDOWN_gc;
    625e:	85 8b       	std	Z+21, r24	; 0x15

	/* Read and save processor serial #. Source: http://www.avrfreaks.net/forum/tutc-introduction-offsetof-reading-xmega-sn */
	(void) ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ); 
    6260:	88 e0       	ldi	r24, 0x08	; 8
    6262:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
	/* First read after reset or possibly Power Up returns zero, so read then toss this value */ 

	sProcID[0] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM0 ) ) ;
    6266:	88 e0       	ldi	r24, 0x08	; 8
    6268:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    626c:	c4 e8       	ldi	r28, 0x84	; 132
    626e:	de e2       	ldi	r29, 0x2E	; 46
    6270:	88 83       	st	Y, r24
	sProcID[1] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM1 ) ) ;
    6272:	89 e0       	ldi	r24, 0x09	; 9
    6274:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    6278:	89 83       	std	Y+1, r24	; 0x01
	sProcID[2] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM2 ) ) ;
    627a:	8a e0       	ldi	r24, 0x0A	; 10
    627c:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    6280:	8a 83       	std	Y+2, r24	; 0x02
	sProcID[3] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM3 ) ) ;
    6282:	8b e0       	ldi	r24, 0x0B	; 11
    6284:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    6288:	8b 83       	std	Y+3, r24	; 0x03
	sProcID[4] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM4 ) ) ;
    628a:	8c e0       	ldi	r24, 0x0C	; 12
    628c:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    6290:	8c 83       	std	Y+4, r24	; 0x04
	sProcID[5] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, LOTNUM5 ) ) ;
    6292:	8d e0       	ldi	r24, 0x0D	; 13
    6294:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    6298:	8d 83       	std	Y+5, r24	; 0x05
	sProcID[6] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, WAFNUM ) ); 
    629a:	80 e1       	ldi	r24, 0x10	; 16
    629c:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    62a0:	8e 83       	std	Y+6, r24	; 0x06
	sProcID[7] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX0 ) ); 
    62a2:	82 e1       	ldi	r24, 0x12	; 18
    62a4:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    62a8:	8f 83       	std	Y+7, r24	; 0x07
	sProcID[8] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDX1 ) ); 
    62aa:	83 e1       	ldi	r24, 0x13	; 19
    62ac:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    62b0:	88 87       	std	Y+8, r24	; 0x08
	sProcID[9] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY0 ) ); 
    62b2:	84 e1       	ldi	r24, 0x14	; 20
    62b4:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    62b8:	89 87       	std	Y+9, r24	; 0x09
	sProcID[10] = ReadCalibrationByte( offsetof( NVM_PROD_SIGNATURES_t, COORDY1 ) );	
    62ba:	85 e1       	ldi	r24, 0x15	; 21
    62bc:	0e 94 1b 31 	call	0x6236	; 0x6236 <ReadCalibrationByte>
    62c0:	8a 87       	std	Y+10, r24	; 0x0a

} /* InitUtil */
    62c2:	df 91       	pop	r29
    62c4:	cf 91       	pop	r28
    62c6:	08 95       	ret

000062c8 <__subsf3>:
    62c8:	50 58       	subi	r21, 0x80	; 128

000062ca <__addsf3>:
    62ca:	bb 27       	eor	r27, r27
    62cc:	aa 27       	eor	r26, r26
    62ce:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <__addsf3x>
    62d2:	0c 94 4a 33 	jmp	0x6694	; 0x6694 <__fp_round>
    62d6:	0e 94 3c 33 	call	0x6678	; 0x6678 <__fp_pscA>
    62da:	38 f0       	brcs	.+14     	; 0x62ea <__addsf3+0x20>
    62dc:	0e 94 43 33 	call	0x6686	; 0x6686 <__fp_pscB>
    62e0:	20 f0       	brcs	.+8      	; 0x62ea <__addsf3+0x20>
    62e2:	39 f4       	brne	.+14     	; 0x62f2 <__addsf3+0x28>
    62e4:	9f 3f       	cpi	r25, 0xFF	; 255
    62e6:	19 f4       	brne	.+6      	; 0x62ee <__addsf3+0x24>
    62e8:	26 f4       	brtc	.+8      	; 0x62f2 <__addsf3+0x28>
    62ea:	0c 94 29 33 	jmp	0x6652	; 0x6652 <__fp_nan>
    62ee:	0e f4       	brtc	.+2      	; 0x62f2 <__addsf3+0x28>
    62f0:	e0 95       	com	r30
    62f2:	e7 fb       	bst	r30, 7
    62f4:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__fp_inf>

000062f8 <__addsf3x>:
    62f8:	e9 2f       	mov	r30, r25
    62fa:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__fp_split3>
    62fe:	58 f3       	brcs	.-42     	; 0x62d6 <__addsf3+0xc>
    6300:	ba 17       	cp	r27, r26
    6302:	62 07       	cpc	r22, r18
    6304:	73 07       	cpc	r23, r19
    6306:	84 07       	cpc	r24, r20
    6308:	95 07       	cpc	r25, r21
    630a:	20 f0       	brcs	.+8      	; 0x6314 <__addsf3x+0x1c>
    630c:	79 f4       	brne	.+30     	; 0x632c <__addsf3x+0x34>
    630e:	a6 f5       	brtc	.+104    	; 0x6378 <__addsf3x+0x80>
    6310:	0c 94 7d 33 	jmp	0x66fa	; 0x66fa <__fp_zero>
    6314:	0e f4       	brtc	.+2      	; 0x6318 <__addsf3x+0x20>
    6316:	e0 95       	com	r30
    6318:	0b 2e       	mov	r0, r27
    631a:	ba 2f       	mov	r27, r26
    631c:	a0 2d       	mov	r26, r0
    631e:	0b 01       	movw	r0, r22
    6320:	b9 01       	movw	r22, r18
    6322:	90 01       	movw	r18, r0
    6324:	0c 01       	movw	r0, r24
    6326:	ca 01       	movw	r24, r20
    6328:	a0 01       	movw	r20, r0
    632a:	11 24       	eor	r1, r1
    632c:	ff 27       	eor	r31, r31
    632e:	59 1b       	sub	r21, r25
    6330:	99 f0       	breq	.+38     	; 0x6358 <__addsf3x+0x60>
    6332:	59 3f       	cpi	r21, 0xF9	; 249
    6334:	50 f4       	brcc	.+20     	; 0x634a <__addsf3x+0x52>
    6336:	50 3e       	cpi	r21, 0xE0	; 224
    6338:	68 f1       	brcs	.+90     	; 0x6394 <__addsf3x+0x9c>
    633a:	1a 16       	cp	r1, r26
    633c:	f0 40       	sbci	r31, 0x00	; 0
    633e:	a2 2f       	mov	r26, r18
    6340:	23 2f       	mov	r18, r19
    6342:	34 2f       	mov	r19, r20
    6344:	44 27       	eor	r20, r20
    6346:	58 5f       	subi	r21, 0xF8	; 248
    6348:	f3 cf       	rjmp	.-26     	; 0x6330 <__addsf3x+0x38>
    634a:	46 95       	lsr	r20
    634c:	37 95       	ror	r19
    634e:	27 95       	ror	r18
    6350:	a7 95       	ror	r26
    6352:	f0 40       	sbci	r31, 0x00	; 0
    6354:	53 95       	inc	r21
    6356:	c9 f7       	brne	.-14     	; 0x634a <__addsf3x+0x52>
    6358:	7e f4       	brtc	.+30     	; 0x6378 <__addsf3x+0x80>
    635a:	1f 16       	cp	r1, r31
    635c:	ba 0b       	sbc	r27, r26
    635e:	62 0b       	sbc	r22, r18
    6360:	73 0b       	sbc	r23, r19
    6362:	84 0b       	sbc	r24, r20
    6364:	ba f0       	brmi	.+46     	; 0x6394 <__addsf3x+0x9c>
    6366:	91 50       	subi	r25, 0x01	; 1
    6368:	a1 f0       	breq	.+40     	; 0x6392 <__addsf3x+0x9a>
    636a:	ff 0f       	add	r31, r31
    636c:	bb 1f       	adc	r27, r27
    636e:	66 1f       	adc	r22, r22
    6370:	77 1f       	adc	r23, r23
    6372:	88 1f       	adc	r24, r24
    6374:	c2 f7       	brpl	.-16     	; 0x6366 <__addsf3x+0x6e>
    6376:	0e c0       	rjmp	.+28     	; 0x6394 <__addsf3x+0x9c>
    6378:	ba 0f       	add	r27, r26
    637a:	62 1f       	adc	r22, r18
    637c:	73 1f       	adc	r23, r19
    637e:	84 1f       	adc	r24, r20
    6380:	48 f4       	brcc	.+18     	; 0x6394 <__addsf3x+0x9c>
    6382:	87 95       	ror	r24
    6384:	77 95       	ror	r23
    6386:	67 95       	ror	r22
    6388:	b7 95       	ror	r27
    638a:	f7 95       	ror	r31
    638c:	9e 3f       	cpi	r25, 0xFE	; 254
    638e:	08 f0       	brcs	.+2      	; 0x6392 <__addsf3x+0x9a>
    6390:	b0 cf       	rjmp	.-160    	; 0x62f2 <__addsf3+0x28>
    6392:	93 95       	inc	r25
    6394:	88 0f       	add	r24, r24
    6396:	08 f0       	brcs	.+2      	; 0x639a <__addsf3x+0xa2>
    6398:	99 27       	eor	r25, r25
    639a:	ee 0f       	add	r30, r30
    639c:	97 95       	ror	r25
    639e:	87 95       	ror	r24
    63a0:	08 95       	ret

000063a2 <__cmpsf2>:
    63a2:	0e 94 ff 32 	call	0x65fe	; 0x65fe <__fp_cmp>
    63a6:	08 f4       	brcc	.+2      	; 0x63aa <__cmpsf2+0x8>
    63a8:	81 e0       	ldi	r24, 0x01	; 1
    63aa:	08 95       	ret

000063ac <__divsf3>:
    63ac:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <__divsf3x>
    63b0:	0c 94 4a 33 	jmp	0x6694	; 0x6694 <__fp_round>
    63b4:	0e 94 43 33 	call	0x6686	; 0x6686 <__fp_pscB>
    63b8:	58 f0       	brcs	.+22     	; 0x63d0 <__divsf3+0x24>
    63ba:	0e 94 3c 33 	call	0x6678	; 0x6678 <__fp_pscA>
    63be:	40 f0       	brcs	.+16     	; 0x63d0 <__divsf3+0x24>
    63c0:	29 f4       	brne	.+10     	; 0x63cc <__divsf3+0x20>
    63c2:	5f 3f       	cpi	r21, 0xFF	; 255
    63c4:	29 f0       	breq	.+10     	; 0x63d0 <__divsf3+0x24>
    63c6:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__fp_inf>
    63ca:	51 11       	cpse	r21, r1
    63cc:	0c 94 7e 33 	jmp	0x66fc	; 0x66fc <__fp_szero>
    63d0:	0c 94 29 33 	jmp	0x6652	; 0x6652 <__fp_nan>

000063d4 <__divsf3x>:
    63d4:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__fp_split3>
    63d8:	68 f3       	brcs	.-38     	; 0x63b4 <__divsf3+0x8>

000063da <__divsf3_pse>:
    63da:	99 23       	and	r25, r25
    63dc:	b1 f3       	breq	.-20     	; 0x63ca <__divsf3+0x1e>
    63de:	55 23       	and	r21, r21
    63e0:	91 f3       	breq	.-28     	; 0x63c6 <__divsf3+0x1a>
    63e2:	95 1b       	sub	r25, r21
    63e4:	55 0b       	sbc	r21, r21
    63e6:	bb 27       	eor	r27, r27
    63e8:	aa 27       	eor	r26, r26
    63ea:	62 17       	cp	r22, r18
    63ec:	73 07       	cpc	r23, r19
    63ee:	84 07       	cpc	r24, r20
    63f0:	38 f0       	brcs	.+14     	; 0x6400 <__divsf3_pse+0x26>
    63f2:	9f 5f       	subi	r25, 0xFF	; 255
    63f4:	5f 4f       	sbci	r21, 0xFF	; 255
    63f6:	22 0f       	add	r18, r18
    63f8:	33 1f       	adc	r19, r19
    63fa:	44 1f       	adc	r20, r20
    63fc:	aa 1f       	adc	r26, r26
    63fe:	a9 f3       	breq	.-22     	; 0x63ea <__divsf3_pse+0x10>
    6400:	35 d0       	rcall	.+106    	; 0x646c <__divsf3_pse+0x92>
    6402:	0e 2e       	mov	r0, r30
    6404:	3a f0       	brmi	.+14     	; 0x6414 <__divsf3_pse+0x3a>
    6406:	e0 e8       	ldi	r30, 0x80	; 128
    6408:	32 d0       	rcall	.+100    	; 0x646e <__divsf3_pse+0x94>
    640a:	91 50       	subi	r25, 0x01	; 1
    640c:	50 40       	sbci	r21, 0x00	; 0
    640e:	e6 95       	lsr	r30
    6410:	00 1c       	adc	r0, r0
    6412:	ca f7       	brpl	.-14     	; 0x6406 <__divsf3_pse+0x2c>
    6414:	2b d0       	rcall	.+86     	; 0x646c <__divsf3_pse+0x92>
    6416:	fe 2f       	mov	r31, r30
    6418:	29 d0       	rcall	.+82     	; 0x646c <__divsf3_pse+0x92>
    641a:	66 0f       	add	r22, r22
    641c:	77 1f       	adc	r23, r23
    641e:	88 1f       	adc	r24, r24
    6420:	bb 1f       	adc	r27, r27
    6422:	26 17       	cp	r18, r22
    6424:	37 07       	cpc	r19, r23
    6426:	48 07       	cpc	r20, r24
    6428:	ab 07       	cpc	r26, r27
    642a:	b0 e8       	ldi	r27, 0x80	; 128
    642c:	09 f0       	breq	.+2      	; 0x6430 <__divsf3_pse+0x56>
    642e:	bb 0b       	sbc	r27, r27
    6430:	80 2d       	mov	r24, r0
    6432:	bf 01       	movw	r22, r30
    6434:	ff 27       	eor	r31, r31
    6436:	93 58       	subi	r25, 0x83	; 131
    6438:	5f 4f       	sbci	r21, 0xFF	; 255
    643a:	3a f0       	brmi	.+14     	; 0x644a <__divsf3_pse+0x70>
    643c:	9e 3f       	cpi	r25, 0xFE	; 254
    643e:	51 05       	cpc	r21, r1
    6440:	78 f0       	brcs	.+30     	; 0x6460 <__divsf3_pse+0x86>
    6442:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__fp_inf>
    6446:	0c 94 7e 33 	jmp	0x66fc	; 0x66fc <__fp_szero>
    644a:	5f 3f       	cpi	r21, 0xFF	; 255
    644c:	e4 f3       	brlt	.-8      	; 0x6446 <__divsf3_pse+0x6c>
    644e:	98 3e       	cpi	r25, 0xE8	; 232
    6450:	d4 f3       	brlt	.-12     	; 0x6446 <__divsf3_pse+0x6c>
    6452:	86 95       	lsr	r24
    6454:	77 95       	ror	r23
    6456:	67 95       	ror	r22
    6458:	b7 95       	ror	r27
    645a:	f7 95       	ror	r31
    645c:	9f 5f       	subi	r25, 0xFF	; 255
    645e:	c9 f7       	brne	.-14     	; 0x6452 <__divsf3_pse+0x78>
    6460:	88 0f       	add	r24, r24
    6462:	91 1d       	adc	r25, r1
    6464:	96 95       	lsr	r25
    6466:	87 95       	ror	r24
    6468:	97 f9       	bld	r25, 7
    646a:	08 95       	ret
    646c:	e1 e0       	ldi	r30, 0x01	; 1
    646e:	66 0f       	add	r22, r22
    6470:	77 1f       	adc	r23, r23
    6472:	88 1f       	adc	r24, r24
    6474:	bb 1f       	adc	r27, r27
    6476:	62 17       	cp	r22, r18
    6478:	73 07       	cpc	r23, r19
    647a:	84 07       	cpc	r24, r20
    647c:	ba 07       	cpc	r27, r26
    647e:	20 f0       	brcs	.+8      	; 0x6488 <__divsf3_pse+0xae>
    6480:	62 1b       	sub	r22, r18
    6482:	73 0b       	sbc	r23, r19
    6484:	84 0b       	sbc	r24, r20
    6486:	ba 0b       	sbc	r27, r26
    6488:	ee 1f       	adc	r30, r30
    648a:	88 f7       	brcc	.-30     	; 0x646e <__divsf3_pse+0x94>
    648c:	e0 95       	com	r30
    648e:	08 95       	ret

00006490 <__fixsfsi>:
    6490:	0e 94 4f 32 	call	0x649e	; 0x649e <__fixunssfsi>
    6494:	68 94       	set
    6496:	b1 11       	cpse	r27, r1
    6498:	0c 94 7e 33 	jmp	0x66fc	; 0x66fc <__fp_szero>
    649c:	08 95       	ret

0000649e <__fixunssfsi>:
    649e:	0e 94 63 33 	call	0x66c6	; 0x66c6 <__fp_splitA>
    64a2:	88 f0       	brcs	.+34     	; 0x64c6 <__fixunssfsi+0x28>
    64a4:	9f 57       	subi	r25, 0x7F	; 127
    64a6:	98 f0       	brcs	.+38     	; 0x64ce <__fixunssfsi+0x30>
    64a8:	b9 2f       	mov	r27, r25
    64aa:	99 27       	eor	r25, r25
    64ac:	b7 51       	subi	r27, 0x17	; 23
    64ae:	b0 f0       	brcs	.+44     	; 0x64dc <__fixunssfsi+0x3e>
    64b0:	e1 f0       	breq	.+56     	; 0x64ea <__fixunssfsi+0x4c>
    64b2:	66 0f       	add	r22, r22
    64b4:	77 1f       	adc	r23, r23
    64b6:	88 1f       	adc	r24, r24
    64b8:	99 1f       	adc	r25, r25
    64ba:	1a f0       	brmi	.+6      	; 0x64c2 <__fixunssfsi+0x24>
    64bc:	ba 95       	dec	r27
    64be:	c9 f7       	brne	.-14     	; 0x64b2 <__fixunssfsi+0x14>
    64c0:	14 c0       	rjmp	.+40     	; 0x64ea <__fixunssfsi+0x4c>
    64c2:	b1 30       	cpi	r27, 0x01	; 1
    64c4:	91 f0       	breq	.+36     	; 0x64ea <__fixunssfsi+0x4c>
    64c6:	0e 94 7d 33 	call	0x66fa	; 0x66fa <__fp_zero>
    64ca:	b1 e0       	ldi	r27, 0x01	; 1
    64cc:	08 95       	ret
    64ce:	0c 94 7d 33 	jmp	0x66fa	; 0x66fa <__fp_zero>
    64d2:	67 2f       	mov	r22, r23
    64d4:	78 2f       	mov	r23, r24
    64d6:	88 27       	eor	r24, r24
    64d8:	b8 5f       	subi	r27, 0xF8	; 248
    64da:	39 f0       	breq	.+14     	; 0x64ea <__fixunssfsi+0x4c>
    64dc:	b9 3f       	cpi	r27, 0xF9	; 249
    64de:	cc f3       	brlt	.-14     	; 0x64d2 <__fixunssfsi+0x34>
    64e0:	86 95       	lsr	r24
    64e2:	77 95       	ror	r23
    64e4:	67 95       	ror	r22
    64e6:	b3 95       	inc	r27
    64e8:	d9 f7       	brne	.-10     	; 0x64e0 <__fixunssfsi+0x42>
    64ea:	3e f4       	brtc	.+14     	; 0x64fa <__fixunssfsi+0x5c>
    64ec:	90 95       	com	r25
    64ee:	80 95       	com	r24
    64f0:	70 95       	com	r23
    64f2:	61 95       	neg	r22
    64f4:	7f 4f       	sbci	r23, 0xFF	; 255
    64f6:	8f 4f       	sbci	r24, 0xFF	; 255
    64f8:	9f 4f       	sbci	r25, 0xFF	; 255
    64fa:	08 95       	ret

000064fc <__floatdisf>:
    64fc:	97 fb       	bst	r25, 7
    64fe:	16 f4       	brtc	.+4      	; 0x6504 <__floatdisf+0x8>
    6500:	0e 94 2c 33 	call	0x6658	; 0x6658 <__fp_negdi>
    6504:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__fp_di2sf>

00006508 <__floatunsisf>:
    6508:	e8 94       	clt
    650a:	09 c0       	rjmp	.+18     	; 0x651e <__floatsisf+0x12>

0000650c <__floatsisf>:
    650c:	97 fb       	bst	r25, 7
    650e:	3e f4       	brtc	.+14     	; 0x651e <__floatsisf+0x12>
    6510:	90 95       	com	r25
    6512:	80 95       	com	r24
    6514:	70 95       	com	r23
    6516:	61 95       	neg	r22
    6518:	7f 4f       	sbci	r23, 0xFF	; 255
    651a:	8f 4f       	sbci	r24, 0xFF	; 255
    651c:	9f 4f       	sbci	r25, 0xFF	; 255
    651e:	99 23       	and	r25, r25
    6520:	a9 f0       	breq	.+42     	; 0x654c <__floatsisf+0x40>
    6522:	f9 2f       	mov	r31, r25
    6524:	96 e9       	ldi	r25, 0x96	; 150
    6526:	bb 27       	eor	r27, r27
    6528:	93 95       	inc	r25
    652a:	f6 95       	lsr	r31
    652c:	87 95       	ror	r24
    652e:	77 95       	ror	r23
    6530:	67 95       	ror	r22
    6532:	b7 95       	ror	r27
    6534:	f1 11       	cpse	r31, r1
    6536:	f8 cf       	rjmp	.-16     	; 0x6528 <__floatsisf+0x1c>
    6538:	fa f4       	brpl	.+62     	; 0x6578 <__floatsisf+0x6c>
    653a:	bb 0f       	add	r27, r27
    653c:	11 f4       	brne	.+4      	; 0x6542 <__floatsisf+0x36>
    653e:	60 ff       	sbrs	r22, 0
    6540:	1b c0       	rjmp	.+54     	; 0x6578 <__floatsisf+0x6c>
    6542:	6f 5f       	subi	r22, 0xFF	; 255
    6544:	7f 4f       	sbci	r23, 0xFF	; 255
    6546:	8f 4f       	sbci	r24, 0xFF	; 255
    6548:	9f 4f       	sbci	r25, 0xFF	; 255
    654a:	16 c0       	rjmp	.+44     	; 0x6578 <__floatsisf+0x6c>
    654c:	88 23       	and	r24, r24
    654e:	11 f0       	breq	.+4      	; 0x6554 <__floatsisf+0x48>
    6550:	96 e9       	ldi	r25, 0x96	; 150
    6552:	11 c0       	rjmp	.+34     	; 0x6576 <__floatsisf+0x6a>
    6554:	77 23       	and	r23, r23
    6556:	21 f0       	breq	.+8      	; 0x6560 <__floatsisf+0x54>
    6558:	9e e8       	ldi	r25, 0x8E	; 142
    655a:	87 2f       	mov	r24, r23
    655c:	76 2f       	mov	r23, r22
    655e:	05 c0       	rjmp	.+10     	; 0x656a <__floatsisf+0x5e>
    6560:	66 23       	and	r22, r22
    6562:	71 f0       	breq	.+28     	; 0x6580 <__floatsisf+0x74>
    6564:	96 e8       	ldi	r25, 0x86	; 134
    6566:	86 2f       	mov	r24, r22
    6568:	70 e0       	ldi	r23, 0x00	; 0
    656a:	60 e0       	ldi	r22, 0x00	; 0
    656c:	2a f0       	brmi	.+10     	; 0x6578 <__floatsisf+0x6c>
    656e:	9a 95       	dec	r25
    6570:	66 0f       	add	r22, r22
    6572:	77 1f       	adc	r23, r23
    6574:	88 1f       	adc	r24, r24
    6576:	da f7       	brpl	.-10     	; 0x656e <__floatsisf+0x62>
    6578:	88 0f       	add	r24, r24
    657a:	96 95       	lsr	r25
    657c:	87 95       	ror	r24
    657e:	97 f9       	bld	r25, 7
    6580:	08 95       	ret

00006582 <__floatundisf>:
    6582:	e8 94       	clt

00006584 <__fp_di2sf>:
    6584:	f9 2f       	mov	r31, r25
    6586:	96 eb       	ldi	r25, 0xB6	; 182
    6588:	ff 23       	and	r31, r31
    658a:	81 f0       	breq	.+32     	; 0x65ac <__fp_di2sf+0x28>
    658c:	12 16       	cp	r1, r18
    658e:	13 06       	cpc	r1, r19
    6590:	14 06       	cpc	r1, r20
    6592:	44 0b       	sbc	r20, r20
    6594:	93 95       	inc	r25
    6596:	f6 95       	lsr	r31
    6598:	87 95       	ror	r24
    659a:	77 95       	ror	r23
    659c:	67 95       	ror	r22
    659e:	57 95       	ror	r21
    65a0:	40 40       	sbci	r20, 0x00	; 0
    65a2:	ff 23       	and	r31, r31
    65a4:	b9 f7       	brne	.-18     	; 0x6594 <__fp_di2sf+0x10>
    65a6:	1b c0       	rjmp	.+54     	; 0x65de <__fp_di2sf+0x5a>
    65a8:	99 27       	eor	r25, r25
    65aa:	08 95       	ret
    65ac:	88 23       	and	r24, r24
    65ae:	51 f4       	brne	.+20     	; 0x65c4 <__fp_di2sf+0x40>
    65b0:	98 50       	subi	r25, 0x08	; 8
    65b2:	d2 f7       	brpl	.-12     	; 0x65a8 <__fp_di2sf+0x24>
    65b4:	87 2b       	or	r24, r23
    65b6:	76 2f       	mov	r23, r22
    65b8:	65 2f       	mov	r22, r21
    65ba:	54 2f       	mov	r21, r20
    65bc:	43 2f       	mov	r20, r19
    65be:	32 2f       	mov	r19, r18
    65c0:	20 e0       	ldi	r18, 0x00	; 0
    65c2:	b1 f3       	breq	.-20     	; 0x65b0 <__fp_di2sf+0x2c>
    65c4:	12 16       	cp	r1, r18
    65c6:	13 06       	cpc	r1, r19
    65c8:	14 06       	cpc	r1, r20
    65ca:	44 0b       	sbc	r20, r20
    65cc:	88 23       	and	r24, r24
    65ce:	3a f0       	brmi	.+14     	; 0x65de <__fp_di2sf+0x5a>
    65d0:	9a 95       	dec	r25
    65d2:	44 0f       	add	r20, r20
    65d4:	55 1f       	adc	r21, r21
    65d6:	66 1f       	adc	r22, r22
    65d8:	77 1f       	adc	r23, r23
    65da:	88 1f       	adc	r24, r24
    65dc:	ca f7       	brpl	.-14     	; 0x65d0 <__fp_di2sf+0x4c>
    65de:	55 23       	and	r21, r21
    65e0:	4a f4       	brpl	.+18     	; 0x65f4 <__fp_di2sf+0x70>
    65e2:	44 0f       	add	r20, r20
    65e4:	55 1f       	adc	r21, r21
    65e6:	11 f4       	brne	.+4      	; 0x65ec <__fp_di2sf+0x68>
    65e8:	60 ff       	sbrs	r22, 0
    65ea:	04 c0       	rjmp	.+8      	; 0x65f4 <__fp_di2sf+0x70>
    65ec:	6f 5f       	subi	r22, 0xFF	; 255
    65ee:	7f 4f       	sbci	r23, 0xFF	; 255
    65f0:	8f 4f       	sbci	r24, 0xFF	; 255
    65f2:	9f 4f       	sbci	r25, 0xFF	; 255
    65f4:	88 0f       	add	r24, r24
    65f6:	96 95       	lsr	r25
    65f8:	87 95       	ror	r24
    65fa:	97 f9       	bld	r25, 7
    65fc:	08 95       	ret

000065fe <__fp_cmp>:
    65fe:	99 0f       	add	r25, r25
    6600:	00 08       	sbc	r0, r0
    6602:	55 0f       	add	r21, r21
    6604:	aa 0b       	sbc	r26, r26
    6606:	e0 e8       	ldi	r30, 0x80	; 128
    6608:	fe ef       	ldi	r31, 0xFE	; 254
    660a:	16 16       	cp	r1, r22
    660c:	17 06       	cpc	r1, r23
    660e:	e8 07       	cpc	r30, r24
    6610:	f9 07       	cpc	r31, r25
    6612:	c0 f0       	brcs	.+48     	; 0x6644 <__fp_cmp+0x46>
    6614:	12 16       	cp	r1, r18
    6616:	13 06       	cpc	r1, r19
    6618:	e4 07       	cpc	r30, r20
    661a:	f5 07       	cpc	r31, r21
    661c:	98 f0       	brcs	.+38     	; 0x6644 <__fp_cmp+0x46>
    661e:	62 1b       	sub	r22, r18
    6620:	73 0b       	sbc	r23, r19
    6622:	84 0b       	sbc	r24, r20
    6624:	95 0b       	sbc	r25, r21
    6626:	39 f4       	brne	.+14     	; 0x6636 <__fp_cmp+0x38>
    6628:	0a 26       	eor	r0, r26
    662a:	61 f0       	breq	.+24     	; 0x6644 <__fp_cmp+0x46>
    662c:	23 2b       	or	r18, r19
    662e:	24 2b       	or	r18, r20
    6630:	25 2b       	or	r18, r21
    6632:	21 f4       	brne	.+8      	; 0x663c <__fp_cmp+0x3e>
    6634:	08 95       	ret
    6636:	0a 26       	eor	r0, r26
    6638:	09 f4       	brne	.+2      	; 0x663c <__fp_cmp+0x3e>
    663a:	a1 40       	sbci	r26, 0x01	; 1
    663c:	a6 95       	lsr	r26
    663e:	8f ef       	ldi	r24, 0xFF	; 255
    6640:	81 1d       	adc	r24, r1
    6642:	81 1d       	adc	r24, r1
    6644:	08 95       	ret

00006646 <__fp_inf>:
    6646:	97 f9       	bld	r25, 7
    6648:	9f 67       	ori	r25, 0x7F	; 127
    664a:	80 e8       	ldi	r24, 0x80	; 128
    664c:	70 e0       	ldi	r23, 0x00	; 0
    664e:	60 e0       	ldi	r22, 0x00	; 0
    6650:	08 95       	ret

00006652 <__fp_nan>:
    6652:	9f ef       	ldi	r25, 0xFF	; 255
    6654:	80 ec       	ldi	r24, 0xC0	; 192
    6656:	08 95       	ret

00006658 <__fp_negdi>:
    6658:	90 95       	com	r25
    665a:	80 95       	com	r24
    665c:	70 95       	com	r23
    665e:	60 95       	com	r22
    6660:	50 95       	com	r21
    6662:	40 95       	com	r20
    6664:	30 95       	com	r19
    6666:	21 95       	neg	r18
    6668:	3f 4f       	sbci	r19, 0xFF	; 255
    666a:	4f 4f       	sbci	r20, 0xFF	; 255
    666c:	5f 4f       	sbci	r21, 0xFF	; 255
    666e:	6f 4f       	sbci	r22, 0xFF	; 255
    6670:	7f 4f       	sbci	r23, 0xFF	; 255
    6672:	8f 4f       	sbci	r24, 0xFF	; 255
    6674:	9f 4f       	sbci	r25, 0xFF	; 255
    6676:	08 95       	ret

00006678 <__fp_pscA>:
    6678:	00 24       	eor	r0, r0
    667a:	0a 94       	dec	r0
    667c:	16 16       	cp	r1, r22
    667e:	17 06       	cpc	r1, r23
    6680:	18 06       	cpc	r1, r24
    6682:	09 06       	cpc	r0, r25
    6684:	08 95       	ret

00006686 <__fp_pscB>:
    6686:	00 24       	eor	r0, r0
    6688:	0a 94       	dec	r0
    668a:	12 16       	cp	r1, r18
    668c:	13 06       	cpc	r1, r19
    668e:	14 06       	cpc	r1, r20
    6690:	05 06       	cpc	r0, r21
    6692:	08 95       	ret

00006694 <__fp_round>:
    6694:	09 2e       	mov	r0, r25
    6696:	03 94       	inc	r0
    6698:	00 0c       	add	r0, r0
    669a:	11 f4       	brne	.+4      	; 0x66a0 <__fp_round+0xc>
    669c:	88 23       	and	r24, r24
    669e:	52 f0       	brmi	.+20     	; 0x66b4 <__fp_round+0x20>
    66a0:	bb 0f       	add	r27, r27
    66a2:	40 f4       	brcc	.+16     	; 0x66b4 <__fp_round+0x20>
    66a4:	bf 2b       	or	r27, r31
    66a6:	11 f4       	brne	.+4      	; 0x66ac <__fp_round+0x18>
    66a8:	60 ff       	sbrs	r22, 0
    66aa:	04 c0       	rjmp	.+8      	; 0x66b4 <__fp_round+0x20>
    66ac:	6f 5f       	subi	r22, 0xFF	; 255
    66ae:	7f 4f       	sbci	r23, 0xFF	; 255
    66b0:	8f 4f       	sbci	r24, 0xFF	; 255
    66b2:	9f 4f       	sbci	r25, 0xFF	; 255
    66b4:	08 95       	ret

000066b6 <__fp_split3>:
    66b6:	57 fd       	sbrc	r21, 7
    66b8:	90 58       	subi	r25, 0x80	; 128
    66ba:	44 0f       	add	r20, r20
    66bc:	55 1f       	adc	r21, r21
    66be:	59 f0       	breq	.+22     	; 0x66d6 <__fp_splitA+0x10>
    66c0:	5f 3f       	cpi	r21, 0xFF	; 255
    66c2:	71 f0       	breq	.+28     	; 0x66e0 <__fp_splitA+0x1a>
    66c4:	47 95       	ror	r20

000066c6 <__fp_splitA>:
    66c6:	88 0f       	add	r24, r24
    66c8:	97 fb       	bst	r25, 7
    66ca:	99 1f       	adc	r25, r25
    66cc:	61 f0       	breq	.+24     	; 0x66e6 <__fp_splitA+0x20>
    66ce:	9f 3f       	cpi	r25, 0xFF	; 255
    66d0:	79 f0       	breq	.+30     	; 0x66f0 <__fp_splitA+0x2a>
    66d2:	87 95       	ror	r24
    66d4:	08 95       	ret
    66d6:	12 16       	cp	r1, r18
    66d8:	13 06       	cpc	r1, r19
    66da:	14 06       	cpc	r1, r20
    66dc:	55 1f       	adc	r21, r21
    66de:	f2 cf       	rjmp	.-28     	; 0x66c4 <__fp_split3+0xe>
    66e0:	46 95       	lsr	r20
    66e2:	f1 df       	rcall	.-30     	; 0x66c6 <__fp_splitA>
    66e4:	08 c0       	rjmp	.+16     	; 0x66f6 <__fp_splitA+0x30>
    66e6:	16 16       	cp	r1, r22
    66e8:	17 06       	cpc	r1, r23
    66ea:	18 06       	cpc	r1, r24
    66ec:	99 1f       	adc	r25, r25
    66ee:	f1 cf       	rjmp	.-30     	; 0x66d2 <__fp_splitA+0xc>
    66f0:	86 95       	lsr	r24
    66f2:	71 05       	cpc	r23, r1
    66f4:	61 05       	cpc	r22, r1
    66f6:	08 94       	sec
    66f8:	08 95       	ret

000066fa <__fp_zero>:
    66fa:	e8 94       	clt

000066fc <__fp_szero>:
    66fc:	bb 27       	eor	r27, r27
    66fe:	66 27       	eor	r22, r22
    6700:	77 27       	eor	r23, r23
    6702:	cb 01       	movw	r24, r22
    6704:	97 f9       	bld	r25, 7
    6706:	08 95       	ret

00006708 <__mulsf3>:
    6708:	0e 94 97 33 	call	0x672e	; 0x672e <__mulsf3x>
    670c:	0c 94 4a 33 	jmp	0x6694	; 0x6694 <__fp_round>
    6710:	0e 94 3c 33 	call	0x6678	; 0x6678 <__fp_pscA>
    6714:	38 f0       	brcs	.+14     	; 0x6724 <__mulsf3+0x1c>
    6716:	0e 94 43 33 	call	0x6686	; 0x6686 <__fp_pscB>
    671a:	20 f0       	brcs	.+8      	; 0x6724 <__mulsf3+0x1c>
    671c:	95 23       	and	r25, r21
    671e:	11 f0       	breq	.+4      	; 0x6724 <__mulsf3+0x1c>
    6720:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__fp_inf>
    6724:	0c 94 29 33 	jmp	0x6652	; 0x6652 <__fp_nan>
    6728:	11 24       	eor	r1, r1
    672a:	0c 94 7e 33 	jmp	0x66fc	; 0x66fc <__fp_szero>

0000672e <__mulsf3x>:
    672e:	0e 94 5b 33 	call	0x66b6	; 0x66b6 <__fp_split3>
    6732:	70 f3       	brcs	.-36     	; 0x6710 <__mulsf3+0x8>

00006734 <__mulsf3_pse>:
    6734:	95 9f       	mul	r25, r21
    6736:	c1 f3       	breq	.-16     	; 0x6728 <__mulsf3+0x20>
    6738:	95 0f       	add	r25, r21
    673a:	50 e0       	ldi	r21, 0x00	; 0
    673c:	55 1f       	adc	r21, r21
    673e:	62 9f       	mul	r22, r18
    6740:	f0 01       	movw	r30, r0
    6742:	72 9f       	mul	r23, r18
    6744:	bb 27       	eor	r27, r27
    6746:	f0 0d       	add	r31, r0
    6748:	b1 1d       	adc	r27, r1
    674a:	63 9f       	mul	r22, r19
    674c:	aa 27       	eor	r26, r26
    674e:	f0 0d       	add	r31, r0
    6750:	b1 1d       	adc	r27, r1
    6752:	aa 1f       	adc	r26, r26
    6754:	64 9f       	mul	r22, r20
    6756:	66 27       	eor	r22, r22
    6758:	b0 0d       	add	r27, r0
    675a:	a1 1d       	adc	r26, r1
    675c:	66 1f       	adc	r22, r22
    675e:	82 9f       	mul	r24, r18
    6760:	22 27       	eor	r18, r18
    6762:	b0 0d       	add	r27, r0
    6764:	a1 1d       	adc	r26, r1
    6766:	62 1f       	adc	r22, r18
    6768:	73 9f       	mul	r23, r19
    676a:	b0 0d       	add	r27, r0
    676c:	a1 1d       	adc	r26, r1
    676e:	62 1f       	adc	r22, r18
    6770:	83 9f       	mul	r24, r19
    6772:	a0 0d       	add	r26, r0
    6774:	61 1d       	adc	r22, r1
    6776:	22 1f       	adc	r18, r18
    6778:	74 9f       	mul	r23, r20
    677a:	33 27       	eor	r19, r19
    677c:	a0 0d       	add	r26, r0
    677e:	61 1d       	adc	r22, r1
    6780:	23 1f       	adc	r18, r19
    6782:	84 9f       	mul	r24, r20
    6784:	60 0d       	add	r22, r0
    6786:	21 1d       	adc	r18, r1
    6788:	82 2f       	mov	r24, r18
    678a:	76 2f       	mov	r23, r22
    678c:	6a 2f       	mov	r22, r26
    678e:	11 24       	eor	r1, r1
    6790:	9f 57       	subi	r25, 0x7F	; 127
    6792:	50 40       	sbci	r21, 0x00	; 0
    6794:	9a f0       	brmi	.+38     	; 0x67bc <__mulsf3_pse+0x88>
    6796:	f1 f0       	breq	.+60     	; 0x67d4 <__mulsf3_pse+0xa0>
    6798:	88 23       	and	r24, r24
    679a:	4a f0       	brmi	.+18     	; 0x67ae <__mulsf3_pse+0x7a>
    679c:	ee 0f       	add	r30, r30
    679e:	ff 1f       	adc	r31, r31
    67a0:	bb 1f       	adc	r27, r27
    67a2:	66 1f       	adc	r22, r22
    67a4:	77 1f       	adc	r23, r23
    67a6:	88 1f       	adc	r24, r24
    67a8:	91 50       	subi	r25, 0x01	; 1
    67aa:	50 40       	sbci	r21, 0x00	; 0
    67ac:	a9 f7       	brne	.-22     	; 0x6798 <__mulsf3_pse+0x64>
    67ae:	9e 3f       	cpi	r25, 0xFE	; 254
    67b0:	51 05       	cpc	r21, r1
    67b2:	80 f0       	brcs	.+32     	; 0x67d4 <__mulsf3_pse+0xa0>
    67b4:	0c 94 23 33 	jmp	0x6646	; 0x6646 <__fp_inf>
    67b8:	0c 94 7e 33 	jmp	0x66fc	; 0x66fc <__fp_szero>
    67bc:	5f 3f       	cpi	r21, 0xFF	; 255
    67be:	e4 f3       	brlt	.-8      	; 0x67b8 <__mulsf3_pse+0x84>
    67c0:	98 3e       	cpi	r25, 0xE8	; 232
    67c2:	d4 f3       	brlt	.-12     	; 0x67b8 <__mulsf3_pse+0x84>
    67c4:	86 95       	lsr	r24
    67c6:	77 95       	ror	r23
    67c8:	67 95       	ror	r22
    67ca:	b7 95       	ror	r27
    67cc:	f7 95       	ror	r31
    67ce:	e7 95       	ror	r30
    67d0:	9f 5f       	subi	r25, 0xFF	; 255
    67d2:	c1 f7       	brne	.-16     	; 0x67c4 <__mulsf3_pse+0x90>
    67d4:	fe 2b       	or	r31, r30
    67d6:	88 0f       	add	r24, r24
    67d8:	91 1d       	adc	r25, r1
    67da:	96 95       	lsr	r25
    67dc:	87 95       	ror	r24
    67de:	97 f9       	bld	r25, 7
    67e0:	08 95       	ret

000067e2 <round>:
    67e2:	0e 94 63 33 	call	0x66c6	; 0x66c6 <__fp_splitA>
    67e6:	e8 f0       	brcs	.+58     	; 0x6822 <round+0x40>
    67e8:	9e 37       	cpi	r25, 0x7E	; 126
    67ea:	e8 f0       	brcs	.+58     	; 0x6826 <round+0x44>
    67ec:	96 39       	cpi	r25, 0x96	; 150
    67ee:	b8 f4       	brcc	.+46     	; 0x681e <round+0x3c>
    67f0:	9e 38       	cpi	r25, 0x8E	; 142
    67f2:	48 f4       	brcc	.+18     	; 0x6806 <round+0x24>
    67f4:	67 2f       	mov	r22, r23
    67f6:	78 2f       	mov	r23, r24
    67f8:	88 27       	eor	r24, r24
    67fa:	98 5f       	subi	r25, 0xF8	; 248
    67fc:	f9 cf       	rjmp	.-14     	; 0x67f0 <round+0xe>
    67fe:	86 95       	lsr	r24
    6800:	77 95       	ror	r23
    6802:	67 95       	ror	r22
    6804:	93 95       	inc	r25
    6806:	95 39       	cpi	r25, 0x95	; 149
    6808:	d0 f3       	brcs	.-12     	; 0x67fe <round+0x1c>
    680a:	b6 2f       	mov	r27, r22
    680c:	b1 70       	andi	r27, 0x01	; 1
    680e:	6b 0f       	add	r22, r27
    6810:	71 1d       	adc	r23, r1
    6812:	81 1d       	adc	r24, r1
    6814:	20 f4       	brcc	.+8      	; 0x681e <round+0x3c>
    6816:	87 95       	ror	r24
    6818:	77 95       	ror	r23
    681a:	67 95       	ror	r22
    681c:	93 95       	inc	r25
    681e:	0c 94 15 34 	jmp	0x682a	; 0x682a <__fp_mintl>
    6822:	0c 94 30 34 	jmp	0x6860	; 0x6860 <__fp_mpack>
    6826:	0c 94 7e 33 	jmp	0x66fc	; 0x66fc <__fp_szero>

0000682a <__fp_mintl>:
    682a:	88 23       	and	r24, r24
    682c:	71 f4       	brne	.+28     	; 0x684a <__fp_mintl+0x20>
    682e:	77 23       	and	r23, r23
    6830:	21 f0       	breq	.+8      	; 0x683a <__fp_mintl+0x10>
    6832:	98 50       	subi	r25, 0x08	; 8
    6834:	87 2b       	or	r24, r23
    6836:	76 2f       	mov	r23, r22
    6838:	07 c0       	rjmp	.+14     	; 0x6848 <__fp_mintl+0x1e>
    683a:	66 23       	and	r22, r22
    683c:	11 f4       	brne	.+4      	; 0x6842 <__fp_mintl+0x18>
    683e:	99 27       	eor	r25, r25
    6840:	0d c0       	rjmp	.+26     	; 0x685c <__fp_mintl+0x32>
    6842:	90 51       	subi	r25, 0x10	; 16
    6844:	86 2b       	or	r24, r22
    6846:	70 e0       	ldi	r23, 0x00	; 0
    6848:	60 e0       	ldi	r22, 0x00	; 0
    684a:	2a f0       	brmi	.+10     	; 0x6856 <__fp_mintl+0x2c>
    684c:	9a 95       	dec	r25
    684e:	66 0f       	add	r22, r22
    6850:	77 1f       	adc	r23, r23
    6852:	88 1f       	adc	r24, r24
    6854:	da f7       	brpl	.-10     	; 0x684c <__fp_mintl+0x22>
    6856:	88 0f       	add	r24, r24
    6858:	96 95       	lsr	r25
    685a:	87 95       	ror	r24
    685c:	97 f9       	bld	r25, 7
    685e:	08 95       	ret

00006860 <__fp_mpack>:
    6860:	9f 3f       	cpi	r25, 0xFF	; 255
    6862:	31 f0       	breq	.+12     	; 0x6870 <__fp_mpack_finite+0xc>

00006864 <__fp_mpack_finite>:
    6864:	91 50       	subi	r25, 0x01	; 1
    6866:	20 f4       	brcc	.+8      	; 0x6870 <__fp_mpack_finite+0xc>
    6868:	87 95       	ror	r24
    686a:	77 95       	ror	r23
    686c:	67 95       	ror	r22
    686e:	b7 95       	ror	r27
    6870:	88 0f       	add	r24, r24
    6872:	91 1d       	adc	r25, r1
    6874:	96 95       	lsr	r25
    6876:	87 95       	ror	r24
    6878:	97 f9       	bld	r25, 7
    687a:	08 95       	ret

0000687c <vfprintf>:
    687c:	2f 92       	push	r2
    687e:	3f 92       	push	r3
    6880:	4f 92       	push	r4
    6882:	5f 92       	push	r5
    6884:	6f 92       	push	r6
    6886:	7f 92       	push	r7
    6888:	8f 92       	push	r8
    688a:	9f 92       	push	r9
    688c:	af 92       	push	r10
    688e:	bf 92       	push	r11
    6890:	cf 92       	push	r12
    6892:	df 92       	push	r13
    6894:	ef 92       	push	r14
    6896:	ff 92       	push	r15
    6898:	0f 93       	push	r16
    689a:	1f 93       	push	r17
    689c:	cf 93       	push	r28
    689e:	df 93       	push	r29
    68a0:	cd b7       	in	r28, 0x3d	; 61
    68a2:	de b7       	in	r29, 0x3e	; 62
    68a4:	60 97       	sbiw	r28, 0x10	; 16
    68a6:	cd bf       	out	0x3d, r28	; 61
    68a8:	de bf       	out	0x3e, r29	; 62
    68aa:	7c 01       	movw	r14, r24
    68ac:	1b 01       	movw	r2, r22
    68ae:	6a 01       	movw	r12, r20
    68b0:	fc 01       	movw	r30, r24
    68b2:	16 82       	std	Z+6, r1	; 0x06
    68b4:	17 82       	std	Z+7, r1	; 0x07
    68b6:	83 81       	ldd	r24, Z+3	; 0x03
    68b8:	81 ff       	sbrs	r24, 1
    68ba:	44 c3       	rjmp	.+1672   	; 0x6f44 <vfprintf+0x6c8>
    68bc:	9e 01       	movw	r18, r28
    68be:	2f 5f       	subi	r18, 0xFF	; 255
    68c0:	3f 4f       	sbci	r19, 0xFF	; 255
    68c2:	39 01       	movw	r6, r18
    68c4:	f7 01       	movw	r30, r14
    68c6:	93 81       	ldd	r25, Z+3	; 0x03
    68c8:	f1 01       	movw	r30, r2
    68ca:	93 fd       	sbrc	r25, 3
    68cc:	85 91       	lpm	r24, Z+
    68ce:	93 ff       	sbrs	r25, 3
    68d0:	81 91       	ld	r24, Z+
    68d2:	1f 01       	movw	r2, r30
    68d4:	88 23       	and	r24, r24
    68d6:	09 f4       	brne	.+2      	; 0x68da <vfprintf+0x5e>
    68d8:	31 c3       	rjmp	.+1634   	; 0x6f3c <vfprintf+0x6c0>
    68da:	85 32       	cpi	r24, 0x25	; 37
    68dc:	39 f4       	brne	.+14     	; 0x68ec <vfprintf+0x70>
    68de:	93 fd       	sbrc	r25, 3
    68e0:	85 91       	lpm	r24, Z+
    68e2:	93 ff       	sbrs	r25, 3
    68e4:	81 91       	ld	r24, Z+
    68e6:	1f 01       	movw	r2, r30
    68e8:	85 32       	cpi	r24, 0x25	; 37
    68ea:	39 f4       	brne	.+14     	; 0x68fa <vfprintf+0x7e>
    68ec:	b7 01       	movw	r22, r14
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    68f4:	56 01       	movw	r10, r12
    68f6:	65 01       	movw	r12, r10
    68f8:	e5 cf       	rjmp	.-54     	; 0x68c4 <vfprintf+0x48>
    68fa:	10 e0       	ldi	r17, 0x00	; 0
    68fc:	51 2c       	mov	r5, r1
    68fe:	91 2c       	mov	r9, r1
    6900:	ff e1       	ldi	r31, 0x1F	; 31
    6902:	f9 15       	cp	r31, r9
    6904:	d8 f0       	brcs	.+54     	; 0x693c <vfprintf+0xc0>
    6906:	8b 32       	cpi	r24, 0x2B	; 43
    6908:	79 f0       	breq	.+30     	; 0x6928 <vfprintf+0xac>
    690a:	38 f4       	brcc	.+14     	; 0x691a <vfprintf+0x9e>
    690c:	80 32       	cpi	r24, 0x20	; 32
    690e:	79 f0       	breq	.+30     	; 0x692e <vfprintf+0xb2>
    6910:	83 32       	cpi	r24, 0x23	; 35
    6912:	a1 f4       	brne	.+40     	; 0x693c <vfprintf+0xc0>
    6914:	f9 2d       	mov	r31, r9
    6916:	f0 61       	ori	r31, 0x10	; 16
    6918:	2e c0       	rjmp	.+92     	; 0x6976 <vfprintf+0xfa>
    691a:	8d 32       	cpi	r24, 0x2D	; 45
    691c:	61 f0       	breq	.+24     	; 0x6936 <vfprintf+0xba>
    691e:	80 33       	cpi	r24, 0x30	; 48
    6920:	69 f4       	brne	.+26     	; 0x693c <vfprintf+0xc0>
    6922:	29 2d       	mov	r18, r9
    6924:	21 60       	ori	r18, 0x01	; 1
    6926:	2d c0       	rjmp	.+90     	; 0x6982 <vfprintf+0x106>
    6928:	39 2d       	mov	r19, r9
    692a:	32 60       	ori	r19, 0x02	; 2
    692c:	93 2e       	mov	r9, r19
    692e:	89 2d       	mov	r24, r9
    6930:	84 60       	ori	r24, 0x04	; 4
    6932:	98 2e       	mov	r9, r24
    6934:	2a c0       	rjmp	.+84     	; 0x698a <vfprintf+0x10e>
    6936:	e9 2d       	mov	r30, r9
    6938:	e8 60       	ori	r30, 0x08	; 8
    693a:	15 c0       	rjmp	.+42     	; 0x6966 <vfprintf+0xea>
    693c:	97 fc       	sbrc	r9, 7
    693e:	2d c0       	rjmp	.+90     	; 0x699a <vfprintf+0x11e>
    6940:	20 ed       	ldi	r18, 0xD0	; 208
    6942:	28 0f       	add	r18, r24
    6944:	2a 30       	cpi	r18, 0x0A	; 10
    6946:	88 f4       	brcc	.+34     	; 0x696a <vfprintf+0xee>
    6948:	96 fe       	sbrs	r9, 6
    694a:	06 c0       	rjmp	.+12     	; 0x6958 <vfprintf+0xdc>
    694c:	3a e0       	ldi	r19, 0x0A	; 10
    694e:	13 9f       	mul	r17, r19
    6950:	20 0d       	add	r18, r0
    6952:	11 24       	eor	r1, r1
    6954:	12 2f       	mov	r17, r18
    6956:	19 c0       	rjmp	.+50     	; 0x698a <vfprintf+0x10e>
    6958:	8a e0       	ldi	r24, 0x0A	; 10
    695a:	58 9e       	mul	r5, r24
    695c:	20 0d       	add	r18, r0
    695e:	11 24       	eor	r1, r1
    6960:	52 2e       	mov	r5, r18
    6962:	e9 2d       	mov	r30, r9
    6964:	e0 62       	ori	r30, 0x20	; 32
    6966:	9e 2e       	mov	r9, r30
    6968:	10 c0       	rjmp	.+32     	; 0x698a <vfprintf+0x10e>
    696a:	8e 32       	cpi	r24, 0x2E	; 46
    696c:	31 f4       	brne	.+12     	; 0x697a <vfprintf+0xfe>
    696e:	96 fc       	sbrc	r9, 6
    6970:	e5 c2       	rjmp	.+1482   	; 0x6f3c <vfprintf+0x6c0>
    6972:	f9 2d       	mov	r31, r9
    6974:	f0 64       	ori	r31, 0x40	; 64
    6976:	9f 2e       	mov	r9, r31
    6978:	08 c0       	rjmp	.+16     	; 0x698a <vfprintf+0x10e>
    697a:	8c 36       	cpi	r24, 0x6C	; 108
    697c:	21 f4       	brne	.+8      	; 0x6986 <vfprintf+0x10a>
    697e:	29 2d       	mov	r18, r9
    6980:	20 68       	ori	r18, 0x80	; 128
    6982:	92 2e       	mov	r9, r18
    6984:	02 c0       	rjmp	.+4      	; 0x698a <vfprintf+0x10e>
    6986:	88 36       	cpi	r24, 0x68	; 104
    6988:	41 f4       	brne	.+16     	; 0x699a <vfprintf+0x11e>
    698a:	f1 01       	movw	r30, r2
    698c:	93 fd       	sbrc	r25, 3
    698e:	85 91       	lpm	r24, Z+
    6990:	93 ff       	sbrs	r25, 3
    6992:	81 91       	ld	r24, Z+
    6994:	1f 01       	movw	r2, r30
    6996:	81 11       	cpse	r24, r1
    6998:	b3 cf       	rjmp	.-154    	; 0x6900 <vfprintf+0x84>
    699a:	9b eb       	ldi	r25, 0xBB	; 187
    699c:	98 0f       	add	r25, r24
    699e:	93 30       	cpi	r25, 0x03	; 3
    69a0:	20 f4       	brcc	.+8      	; 0x69aa <vfprintf+0x12e>
    69a2:	99 2d       	mov	r25, r9
    69a4:	90 61       	ori	r25, 0x10	; 16
    69a6:	80 5e       	subi	r24, 0xE0	; 224
    69a8:	07 c0       	rjmp	.+14     	; 0x69b8 <vfprintf+0x13c>
    69aa:	9b e9       	ldi	r25, 0x9B	; 155
    69ac:	98 0f       	add	r25, r24
    69ae:	93 30       	cpi	r25, 0x03	; 3
    69b0:	08 f0       	brcs	.+2      	; 0x69b4 <vfprintf+0x138>
    69b2:	66 c1       	rjmp	.+716    	; 0x6c80 <vfprintf+0x404>
    69b4:	99 2d       	mov	r25, r9
    69b6:	9f 7e       	andi	r25, 0xEF	; 239
    69b8:	96 ff       	sbrs	r25, 6
    69ba:	16 e0       	ldi	r17, 0x06	; 6
    69bc:	9f 73       	andi	r25, 0x3F	; 63
    69be:	99 2e       	mov	r9, r25
    69c0:	85 36       	cpi	r24, 0x65	; 101
    69c2:	19 f4       	brne	.+6      	; 0x69ca <vfprintf+0x14e>
    69c4:	90 64       	ori	r25, 0x40	; 64
    69c6:	99 2e       	mov	r9, r25
    69c8:	08 c0       	rjmp	.+16     	; 0x69da <vfprintf+0x15e>
    69ca:	86 36       	cpi	r24, 0x66	; 102
    69cc:	21 f4       	brne	.+8      	; 0x69d6 <vfprintf+0x15a>
    69ce:	39 2f       	mov	r19, r25
    69d0:	30 68       	ori	r19, 0x80	; 128
    69d2:	93 2e       	mov	r9, r19
    69d4:	02 c0       	rjmp	.+4      	; 0x69da <vfprintf+0x15e>
    69d6:	11 11       	cpse	r17, r1
    69d8:	11 50       	subi	r17, 0x01	; 1
    69da:	97 fe       	sbrs	r9, 7
    69dc:	07 c0       	rjmp	.+14     	; 0x69ec <vfprintf+0x170>
    69de:	1c 33       	cpi	r17, 0x3C	; 60
    69e0:	50 f4       	brcc	.+20     	; 0x69f6 <vfprintf+0x17a>
    69e2:	44 24       	eor	r4, r4
    69e4:	43 94       	inc	r4
    69e6:	41 0e       	add	r4, r17
    69e8:	27 e0       	ldi	r18, 0x07	; 7
    69ea:	0b c0       	rjmp	.+22     	; 0x6a02 <vfprintf+0x186>
    69ec:	18 30       	cpi	r17, 0x08	; 8
    69ee:	38 f0       	brcs	.+14     	; 0x69fe <vfprintf+0x182>
    69f0:	27 e0       	ldi	r18, 0x07	; 7
    69f2:	17 e0       	ldi	r17, 0x07	; 7
    69f4:	05 c0       	rjmp	.+10     	; 0x6a00 <vfprintf+0x184>
    69f6:	27 e0       	ldi	r18, 0x07	; 7
    69f8:	9c e3       	ldi	r25, 0x3C	; 60
    69fa:	49 2e       	mov	r4, r25
    69fc:	02 c0       	rjmp	.+4      	; 0x6a02 <vfprintf+0x186>
    69fe:	21 2f       	mov	r18, r17
    6a00:	41 2c       	mov	r4, r1
    6a02:	56 01       	movw	r10, r12
    6a04:	84 e0       	ldi	r24, 0x04	; 4
    6a06:	a8 0e       	add	r10, r24
    6a08:	b1 1c       	adc	r11, r1
    6a0a:	f6 01       	movw	r30, r12
    6a0c:	60 81       	ld	r22, Z
    6a0e:	71 81       	ldd	r23, Z+1	; 0x01
    6a10:	82 81       	ldd	r24, Z+2	; 0x02
    6a12:	93 81       	ldd	r25, Z+3	; 0x03
    6a14:	04 2d       	mov	r16, r4
    6a16:	a3 01       	movw	r20, r6
    6a18:	0e 94 45 3b 	call	0x768a	; 0x768a <__ftoa_engine>
    6a1c:	6c 01       	movw	r12, r24
    6a1e:	f9 81       	ldd	r31, Y+1	; 0x01
    6a20:	fc 87       	std	Y+12, r31	; 0x0c
    6a22:	f0 ff       	sbrs	r31, 0
    6a24:	02 c0       	rjmp	.+4      	; 0x6a2a <vfprintf+0x1ae>
    6a26:	f3 ff       	sbrs	r31, 3
    6a28:	06 c0       	rjmp	.+12     	; 0x6a36 <vfprintf+0x1ba>
    6a2a:	91 fc       	sbrc	r9, 1
    6a2c:	06 c0       	rjmp	.+12     	; 0x6a3a <vfprintf+0x1be>
    6a2e:	92 fe       	sbrs	r9, 2
    6a30:	06 c0       	rjmp	.+12     	; 0x6a3e <vfprintf+0x1c2>
    6a32:	00 e2       	ldi	r16, 0x20	; 32
    6a34:	05 c0       	rjmp	.+10     	; 0x6a40 <vfprintf+0x1c4>
    6a36:	0d e2       	ldi	r16, 0x2D	; 45
    6a38:	03 c0       	rjmp	.+6      	; 0x6a40 <vfprintf+0x1c4>
    6a3a:	0b e2       	ldi	r16, 0x2B	; 43
    6a3c:	01 c0       	rjmp	.+2      	; 0x6a40 <vfprintf+0x1c4>
    6a3e:	00 e0       	ldi	r16, 0x00	; 0
    6a40:	8c 85       	ldd	r24, Y+12	; 0x0c
    6a42:	8c 70       	andi	r24, 0x0C	; 12
    6a44:	19 f0       	breq	.+6      	; 0x6a4c <vfprintf+0x1d0>
    6a46:	01 11       	cpse	r16, r1
    6a48:	5a c2       	rjmp	.+1204   	; 0x6efe <vfprintf+0x682>
    6a4a:	9b c2       	rjmp	.+1334   	; 0x6f82 <vfprintf+0x706>
    6a4c:	97 fe       	sbrs	r9, 7
    6a4e:	10 c0       	rjmp	.+32     	; 0x6a70 <vfprintf+0x1f4>
    6a50:	4c 0c       	add	r4, r12
    6a52:	fc 85       	ldd	r31, Y+12	; 0x0c
    6a54:	f4 ff       	sbrs	r31, 4
    6a56:	04 c0       	rjmp	.+8      	; 0x6a60 <vfprintf+0x1e4>
    6a58:	8a 81       	ldd	r24, Y+2	; 0x02
    6a5a:	81 33       	cpi	r24, 0x31	; 49
    6a5c:	09 f4       	brne	.+2      	; 0x6a60 <vfprintf+0x1e4>
    6a5e:	4a 94       	dec	r4
    6a60:	14 14       	cp	r1, r4
    6a62:	74 f5       	brge	.+92     	; 0x6ac0 <vfprintf+0x244>
    6a64:	28 e0       	ldi	r18, 0x08	; 8
    6a66:	24 15       	cp	r18, r4
    6a68:	78 f5       	brcc	.+94     	; 0x6ac8 <vfprintf+0x24c>
    6a6a:	88 e0       	ldi	r24, 0x08	; 8
    6a6c:	48 2e       	mov	r4, r24
    6a6e:	2c c0       	rjmp	.+88     	; 0x6ac8 <vfprintf+0x24c>
    6a70:	96 fc       	sbrc	r9, 6
    6a72:	2a c0       	rjmp	.+84     	; 0x6ac8 <vfprintf+0x24c>
    6a74:	81 2f       	mov	r24, r17
    6a76:	90 e0       	ldi	r25, 0x00	; 0
    6a78:	8c 15       	cp	r24, r12
    6a7a:	9d 05       	cpc	r25, r13
    6a7c:	9c f0       	brlt	.+38     	; 0x6aa4 <vfprintf+0x228>
    6a7e:	3c ef       	ldi	r19, 0xFC	; 252
    6a80:	c3 16       	cp	r12, r19
    6a82:	3f ef       	ldi	r19, 0xFF	; 255
    6a84:	d3 06       	cpc	r13, r19
    6a86:	74 f0       	brlt	.+28     	; 0x6aa4 <vfprintf+0x228>
    6a88:	89 2d       	mov	r24, r9
    6a8a:	80 68       	ori	r24, 0x80	; 128
    6a8c:	98 2e       	mov	r9, r24
    6a8e:	0a c0       	rjmp	.+20     	; 0x6aa4 <vfprintf+0x228>
    6a90:	e2 e0       	ldi	r30, 0x02	; 2
    6a92:	f0 e0       	ldi	r31, 0x00	; 0
    6a94:	ec 0f       	add	r30, r28
    6a96:	fd 1f       	adc	r31, r29
    6a98:	e1 0f       	add	r30, r17
    6a9a:	f1 1d       	adc	r31, r1
    6a9c:	80 81       	ld	r24, Z
    6a9e:	80 33       	cpi	r24, 0x30	; 48
    6aa0:	19 f4       	brne	.+6      	; 0x6aa8 <vfprintf+0x22c>
    6aa2:	11 50       	subi	r17, 0x01	; 1
    6aa4:	11 11       	cpse	r17, r1
    6aa6:	f4 cf       	rjmp	.-24     	; 0x6a90 <vfprintf+0x214>
    6aa8:	97 fe       	sbrs	r9, 7
    6aaa:	0e c0       	rjmp	.+28     	; 0x6ac8 <vfprintf+0x24c>
    6aac:	44 24       	eor	r4, r4
    6aae:	43 94       	inc	r4
    6ab0:	41 0e       	add	r4, r17
    6ab2:	81 2f       	mov	r24, r17
    6ab4:	90 e0       	ldi	r25, 0x00	; 0
    6ab6:	c8 16       	cp	r12, r24
    6ab8:	d9 06       	cpc	r13, r25
    6aba:	2c f4       	brge	.+10     	; 0x6ac6 <vfprintf+0x24a>
    6abc:	1c 19       	sub	r17, r12
    6abe:	04 c0       	rjmp	.+8      	; 0x6ac8 <vfprintf+0x24c>
    6ac0:	44 24       	eor	r4, r4
    6ac2:	43 94       	inc	r4
    6ac4:	01 c0       	rjmp	.+2      	; 0x6ac8 <vfprintf+0x24c>
    6ac6:	10 e0       	ldi	r17, 0x00	; 0
    6ac8:	97 fe       	sbrs	r9, 7
    6aca:	06 c0       	rjmp	.+12     	; 0x6ad8 <vfprintf+0x25c>
    6acc:	1c 14       	cp	r1, r12
    6ace:	1d 04       	cpc	r1, r13
    6ad0:	34 f4       	brge	.+12     	; 0x6ade <vfprintf+0x262>
    6ad2:	c6 01       	movw	r24, r12
    6ad4:	01 96       	adiw	r24, 0x01	; 1
    6ad6:	05 c0       	rjmp	.+10     	; 0x6ae2 <vfprintf+0x266>
    6ad8:	85 e0       	ldi	r24, 0x05	; 5
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	02 c0       	rjmp	.+4      	; 0x6ae2 <vfprintf+0x266>
    6ade:	81 e0       	ldi	r24, 0x01	; 1
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	01 11       	cpse	r16, r1
    6ae4:	01 96       	adiw	r24, 0x01	; 1
    6ae6:	11 23       	and	r17, r17
    6ae8:	31 f0       	breq	.+12     	; 0x6af6 <vfprintf+0x27a>
    6aea:	21 2f       	mov	r18, r17
    6aec:	30 e0       	ldi	r19, 0x00	; 0
    6aee:	2f 5f       	subi	r18, 0xFF	; 255
    6af0:	3f 4f       	sbci	r19, 0xFF	; 255
    6af2:	82 0f       	add	r24, r18
    6af4:	93 1f       	adc	r25, r19
    6af6:	25 2d       	mov	r18, r5
    6af8:	30 e0       	ldi	r19, 0x00	; 0
    6afa:	82 17       	cp	r24, r18
    6afc:	93 07       	cpc	r25, r19
    6afe:	14 f4       	brge	.+4      	; 0x6b04 <vfprintf+0x288>
    6b00:	58 1a       	sub	r5, r24
    6b02:	01 c0       	rjmp	.+2      	; 0x6b06 <vfprintf+0x28a>
    6b04:	51 2c       	mov	r5, r1
    6b06:	89 2d       	mov	r24, r9
    6b08:	89 70       	andi	r24, 0x09	; 9
    6b0a:	49 f4       	brne	.+18     	; 0x6b1e <vfprintf+0x2a2>
    6b0c:	55 20       	and	r5, r5
    6b0e:	39 f0       	breq	.+14     	; 0x6b1e <vfprintf+0x2a2>
    6b10:	b7 01       	movw	r22, r14
    6b12:	80 e2       	ldi	r24, 0x20	; 32
    6b14:	90 e0       	ldi	r25, 0x00	; 0
    6b16:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6b1a:	5a 94       	dec	r5
    6b1c:	f7 cf       	rjmp	.-18     	; 0x6b0c <vfprintf+0x290>
    6b1e:	00 23       	and	r16, r16
    6b20:	29 f0       	breq	.+10     	; 0x6b2c <vfprintf+0x2b0>
    6b22:	b7 01       	movw	r22, r14
    6b24:	80 2f       	mov	r24, r16
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6b2c:	93 fc       	sbrc	r9, 3
    6b2e:	09 c0       	rjmp	.+18     	; 0x6b42 <vfprintf+0x2c6>
    6b30:	55 20       	and	r5, r5
    6b32:	39 f0       	breq	.+14     	; 0x6b42 <vfprintf+0x2c6>
    6b34:	b7 01       	movw	r22, r14
    6b36:	80 e3       	ldi	r24, 0x30	; 48
    6b38:	90 e0       	ldi	r25, 0x00	; 0
    6b3a:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6b3e:	5a 94       	dec	r5
    6b40:	f7 cf       	rjmp	.-18     	; 0x6b30 <vfprintf+0x2b4>
    6b42:	97 fe       	sbrs	r9, 7
    6b44:	4c c0       	rjmp	.+152    	; 0x6bde <vfprintf+0x362>
    6b46:	46 01       	movw	r8, r12
    6b48:	d7 fe       	sbrs	r13, 7
    6b4a:	02 c0       	rjmp	.+4      	; 0x6b50 <vfprintf+0x2d4>
    6b4c:	81 2c       	mov	r8, r1
    6b4e:	91 2c       	mov	r9, r1
    6b50:	c6 01       	movw	r24, r12
    6b52:	88 19       	sub	r24, r8
    6b54:	99 09       	sbc	r25, r9
    6b56:	f3 01       	movw	r30, r6
    6b58:	e8 0f       	add	r30, r24
    6b5a:	f9 1f       	adc	r31, r25
    6b5c:	ed 87       	std	Y+13, r30	; 0x0d
    6b5e:	fe 87       	std	Y+14, r31	; 0x0e
    6b60:	96 01       	movw	r18, r12
    6b62:	24 19       	sub	r18, r4
    6b64:	31 09       	sbc	r19, r1
    6b66:	2f 87       	std	Y+15, r18	; 0x0f
    6b68:	38 8b       	std	Y+16, r19	; 0x10
    6b6a:	01 2f       	mov	r16, r17
    6b6c:	10 e0       	ldi	r17, 0x00	; 0
    6b6e:	11 95       	neg	r17
    6b70:	01 95       	neg	r16
    6b72:	11 09       	sbc	r17, r1
    6b74:	3f ef       	ldi	r19, 0xFF	; 255
    6b76:	83 16       	cp	r8, r19
    6b78:	93 06       	cpc	r9, r19
    6b7a:	29 f4       	brne	.+10     	; 0x6b86 <vfprintf+0x30a>
    6b7c:	b7 01       	movw	r22, r14
    6b7e:	8e e2       	ldi	r24, 0x2E	; 46
    6b80:	90 e0       	ldi	r25, 0x00	; 0
    6b82:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6b86:	c8 14       	cp	r12, r8
    6b88:	d9 04       	cpc	r13, r9
    6b8a:	4c f0       	brlt	.+18     	; 0x6b9e <vfprintf+0x322>
    6b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b8e:	98 89       	ldd	r25, Y+16	; 0x10
    6b90:	88 15       	cp	r24, r8
    6b92:	99 05       	cpc	r25, r9
    6b94:	24 f4       	brge	.+8      	; 0x6b9e <vfprintf+0x322>
    6b96:	ed 85       	ldd	r30, Y+13	; 0x0d
    6b98:	fe 85       	ldd	r31, Y+14	; 0x0e
    6b9a:	81 81       	ldd	r24, Z+1	; 0x01
    6b9c:	01 c0       	rjmp	.+2      	; 0x6ba0 <vfprintf+0x324>
    6b9e:	80 e3       	ldi	r24, 0x30	; 48
    6ba0:	f1 e0       	ldi	r31, 0x01	; 1
    6ba2:	8f 1a       	sub	r8, r31
    6ba4:	91 08       	sbc	r9, r1
    6ba6:	2d 85       	ldd	r18, Y+13	; 0x0d
    6ba8:	3e 85       	ldd	r19, Y+14	; 0x0e
    6baa:	2f 5f       	subi	r18, 0xFF	; 255
    6bac:	3f 4f       	sbci	r19, 0xFF	; 255
    6bae:	2d 87       	std	Y+13, r18	; 0x0d
    6bb0:	3e 87       	std	Y+14, r19	; 0x0e
    6bb2:	80 16       	cp	r8, r16
    6bb4:	91 06       	cpc	r9, r17
    6bb6:	2c f0       	brlt	.+10     	; 0x6bc2 <vfprintf+0x346>
    6bb8:	b7 01       	movw	r22, r14
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6bc0:	d9 cf       	rjmp	.-78     	; 0x6b74 <vfprintf+0x2f8>
    6bc2:	c8 14       	cp	r12, r8
    6bc4:	d9 04       	cpc	r13, r9
    6bc6:	41 f4       	brne	.+16     	; 0x6bd8 <vfprintf+0x35c>
    6bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    6bca:	96 33       	cpi	r25, 0x36	; 54
    6bcc:	20 f4       	brcc	.+8      	; 0x6bd6 <vfprintf+0x35a>
    6bce:	95 33       	cpi	r25, 0x35	; 53
    6bd0:	19 f4       	brne	.+6      	; 0x6bd8 <vfprintf+0x35c>
    6bd2:	3c 85       	ldd	r19, Y+12	; 0x0c
    6bd4:	34 ff       	sbrs	r19, 4
    6bd6:	81 e3       	ldi	r24, 0x31	; 49
    6bd8:	b7 01       	movw	r22, r14
    6bda:	90 e0       	ldi	r25, 0x00	; 0
    6bdc:	4e c0       	rjmp	.+156    	; 0x6c7a <vfprintf+0x3fe>
    6bde:	8a 81       	ldd	r24, Y+2	; 0x02
    6be0:	81 33       	cpi	r24, 0x31	; 49
    6be2:	19 f0       	breq	.+6      	; 0x6bea <vfprintf+0x36e>
    6be4:	9c 85       	ldd	r25, Y+12	; 0x0c
    6be6:	9f 7e       	andi	r25, 0xEF	; 239
    6be8:	9c 87       	std	Y+12, r25	; 0x0c
    6bea:	b7 01       	movw	r22, r14
    6bec:	90 e0       	ldi	r25, 0x00	; 0
    6bee:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6bf2:	11 11       	cpse	r17, r1
    6bf4:	05 c0       	rjmp	.+10     	; 0x6c00 <vfprintf+0x384>
    6bf6:	94 fc       	sbrc	r9, 4
    6bf8:	18 c0       	rjmp	.+48     	; 0x6c2a <vfprintf+0x3ae>
    6bfa:	85 e6       	ldi	r24, 0x65	; 101
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	17 c0       	rjmp	.+46     	; 0x6c2e <vfprintf+0x3b2>
    6c00:	b7 01       	movw	r22, r14
    6c02:	8e e2       	ldi	r24, 0x2E	; 46
    6c04:	90 e0       	ldi	r25, 0x00	; 0
    6c06:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6c0a:	1e 5f       	subi	r17, 0xFE	; 254
    6c0c:	82 e0       	ldi	r24, 0x02	; 2
    6c0e:	01 e0       	ldi	r16, 0x01	; 1
    6c10:	08 0f       	add	r16, r24
    6c12:	f3 01       	movw	r30, r6
    6c14:	e8 0f       	add	r30, r24
    6c16:	f1 1d       	adc	r31, r1
    6c18:	80 81       	ld	r24, Z
    6c1a:	b7 01       	movw	r22, r14
    6c1c:	90 e0       	ldi	r25, 0x00	; 0
    6c1e:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6c22:	80 2f       	mov	r24, r16
    6c24:	01 13       	cpse	r16, r17
    6c26:	f3 cf       	rjmp	.-26     	; 0x6c0e <vfprintf+0x392>
    6c28:	e6 cf       	rjmp	.-52     	; 0x6bf6 <vfprintf+0x37a>
    6c2a:	85 e4       	ldi	r24, 0x45	; 69
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	b7 01       	movw	r22, r14
    6c30:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6c34:	d7 fc       	sbrc	r13, 7
    6c36:	06 c0       	rjmp	.+12     	; 0x6c44 <vfprintf+0x3c8>
    6c38:	c1 14       	cp	r12, r1
    6c3a:	d1 04       	cpc	r13, r1
    6c3c:	41 f4       	brne	.+16     	; 0x6c4e <vfprintf+0x3d2>
    6c3e:	ec 85       	ldd	r30, Y+12	; 0x0c
    6c40:	e4 ff       	sbrs	r30, 4
    6c42:	05 c0       	rjmp	.+10     	; 0x6c4e <vfprintf+0x3d2>
    6c44:	d1 94       	neg	r13
    6c46:	c1 94       	neg	r12
    6c48:	d1 08       	sbc	r13, r1
    6c4a:	8d e2       	ldi	r24, 0x2D	; 45
    6c4c:	01 c0       	rjmp	.+2      	; 0x6c50 <vfprintf+0x3d4>
    6c4e:	8b e2       	ldi	r24, 0x2B	; 43
    6c50:	b7 01       	movw	r22, r14
    6c52:	90 e0       	ldi	r25, 0x00	; 0
    6c54:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6c58:	80 e3       	ldi	r24, 0x30	; 48
    6c5a:	2a e0       	ldi	r18, 0x0A	; 10
    6c5c:	c2 16       	cp	r12, r18
    6c5e:	d1 04       	cpc	r13, r1
    6c60:	2c f0       	brlt	.+10     	; 0x6c6c <vfprintf+0x3f0>
    6c62:	8f 5f       	subi	r24, 0xFF	; 255
    6c64:	fa e0       	ldi	r31, 0x0A	; 10
    6c66:	cf 1a       	sub	r12, r31
    6c68:	d1 08       	sbc	r13, r1
    6c6a:	f7 cf       	rjmp	.-18     	; 0x6c5a <vfprintf+0x3de>
    6c6c:	b7 01       	movw	r22, r14
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6c74:	b7 01       	movw	r22, r14
    6c76:	c6 01       	movw	r24, r12
    6c78:	c0 96       	adiw	r24, 0x30	; 48
    6c7a:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6c7e:	54 c1       	rjmp	.+680    	; 0x6f28 <vfprintf+0x6ac>
    6c80:	83 36       	cpi	r24, 0x63	; 99
    6c82:	31 f0       	breq	.+12     	; 0x6c90 <vfprintf+0x414>
    6c84:	83 37       	cpi	r24, 0x73	; 115
    6c86:	79 f0       	breq	.+30     	; 0x6ca6 <vfprintf+0x42a>
    6c88:	83 35       	cpi	r24, 0x53	; 83
    6c8a:	09 f0       	breq	.+2      	; 0x6c8e <vfprintf+0x412>
    6c8c:	56 c0       	rjmp	.+172    	; 0x6d3a <vfprintf+0x4be>
    6c8e:	20 c0       	rjmp	.+64     	; 0x6cd0 <vfprintf+0x454>
    6c90:	56 01       	movw	r10, r12
    6c92:	32 e0       	ldi	r19, 0x02	; 2
    6c94:	a3 0e       	add	r10, r19
    6c96:	b1 1c       	adc	r11, r1
    6c98:	f6 01       	movw	r30, r12
    6c9a:	80 81       	ld	r24, Z
    6c9c:	89 83       	std	Y+1, r24	; 0x01
    6c9e:	01 e0       	ldi	r16, 0x01	; 1
    6ca0:	10 e0       	ldi	r17, 0x00	; 0
    6ca2:	63 01       	movw	r12, r6
    6ca4:	12 c0       	rjmp	.+36     	; 0x6cca <vfprintf+0x44e>
    6ca6:	56 01       	movw	r10, r12
    6ca8:	f2 e0       	ldi	r31, 0x02	; 2
    6caa:	af 0e       	add	r10, r31
    6cac:	b1 1c       	adc	r11, r1
    6cae:	f6 01       	movw	r30, r12
    6cb0:	c0 80       	ld	r12, Z
    6cb2:	d1 80       	ldd	r13, Z+1	; 0x01
    6cb4:	96 fe       	sbrs	r9, 6
    6cb6:	03 c0       	rjmp	.+6      	; 0x6cbe <vfprintf+0x442>
    6cb8:	61 2f       	mov	r22, r17
    6cba:	70 e0       	ldi	r23, 0x00	; 0
    6cbc:	02 c0       	rjmp	.+4      	; 0x6cc2 <vfprintf+0x446>
    6cbe:	6f ef       	ldi	r22, 0xFF	; 255
    6cc0:	7f ef       	ldi	r23, 0xFF	; 255
    6cc2:	c6 01       	movw	r24, r12
    6cc4:	0e 94 57 3c 	call	0x78ae	; 0x78ae <strnlen>
    6cc8:	8c 01       	movw	r16, r24
    6cca:	f9 2d       	mov	r31, r9
    6ccc:	ff 77       	andi	r31, 0x7F	; 127
    6cce:	14 c0       	rjmp	.+40     	; 0x6cf8 <vfprintf+0x47c>
    6cd0:	56 01       	movw	r10, r12
    6cd2:	22 e0       	ldi	r18, 0x02	; 2
    6cd4:	a2 0e       	add	r10, r18
    6cd6:	b1 1c       	adc	r11, r1
    6cd8:	f6 01       	movw	r30, r12
    6cda:	c0 80       	ld	r12, Z
    6cdc:	d1 80       	ldd	r13, Z+1	; 0x01
    6cde:	96 fe       	sbrs	r9, 6
    6ce0:	03 c0       	rjmp	.+6      	; 0x6ce8 <vfprintf+0x46c>
    6ce2:	61 2f       	mov	r22, r17
    6ce4:	70 e0       	ldi	r23, 0x00	; 0
    6ce6:	02 c0       	rjmp	.+4      	; 0x6cec <vfprintf+0x470>
    6ce8:	6f ef       	ldi	r22, 0xFF	; 255
    6cea:	7f ef       	ldi	r23, 0xFF	; 255
    6cec:	c6 01       	movw	r24, r12
    6cee:	0e 94 26 3c 	call	0x784c	; 0x784c <strnlen_P>
    6cf2:	8c 01       	movw	r16, r24
    6cf4:	f9 2d       	mov	r31, r9
    6cf6:	f0 68       	ori	r31, 0x80	; 128
    6cf8:	9f 2e       	mov	r9, r31
    6cfa:	f3 fd       	sbrc	r31, 3
    6cfc:	1a c0       	rjmp	.+52     	; 0x6d32 <vfprintf+0x4b6>
    6cfe:	85 2d       	mov	r24, r5
    6d00:	90 e0       	ldi	r25, 0x00	; 0
    6d02:	08 17       	cp	r16, r24
    6d04:	19 07       	cpc	r17, r25
    6d06:	a8 f4       	brcc	.+42     	; 0x6d32 <vfprintf+0x4b6>
    6d08:	b7 01       	movw	r22, r14
    6d0a:	80 e2       	ldi	r24, 0x20	; 32
    6d0c:	90 e0       	ldi	r25, 0x00	; 0
    6d0e:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6d12:	5a 94       	dec	r5
    6d14:	f4 cf       	rjmp	.-24     	; 0x6cfe <vfprintf+0x482>
    6d16:	f6 01       	movw	r30, r12
    6d18:	97 fc       	sbrc	r9, 7
    6d1a:	85 91       	lpm	r24, Z+
    6d1c:	97 fe       	sbrs	r9, 7
    6d1e:	81 91       	ld	r24, Z+
    6d20:	6f 01       	movw	r12, r30
    6d22:	b7 01       	movw	r22, r14
    6d24:	90 e0       	ldi	r25, 0x00	; 0
    6d26:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6d2a:	51 10       	cpse	r5, r1
    6d2c:	5a 94       	dec	r5
    6d2e:	01 50       	subi	r16, 0x01	; 1
    6d30:	11 09       	sbc	r17, r1
    6d32:	01 15       	cp	r16, r1
    6d34:	11 05       	cpc	r17, r1
    6d36:	79 f7       	brne	.-34     	; 0x6d16 <vfprintf+0x49a>
    6d38:	f7 c0       	rjmp	.+494    	; 0x6f28 <vfprintf+0x6ac>
    6d3a:	84 36       	cpi	r24, 0x64	; 100
    6d3c:	11 f0       	breq	.+4      	; 0x6d42 <vfprintf+0x4c6>
    6d3e:	89 36       	cpi	r24, 0x69	; 105
    6d40:	61 f5       	brne	.+88     	; 0x6d9a <vfprintf+0x51e>
    6d42:	56 01       	movw	r10, r12
    6d44:	97 fe       	sbrs	r9, 7
    6d46:	09 c0       	rjmp	.+18     	; 0x6d5a <vfprintf+0x4de>
    6d48:	24 e0       	ldi	r18, 0x04	; 4
    6d4a:	a2 0e       	add	r10, r18
    6d4c:	b1 1c       	adc	r11, r1
    6d4e:	f6 01       	movw	r30, r12
    6d50:	60 81       	ld	r22, Z
    6d52:	71 81       	ldd	r23, Z+1	; 0x01
    6d54:	82 81       	ldd	r24, Z+2	; 0x02
    6d56:	93 81       	ldd	r25, Z+3	; 0x03
    6d58:	0a c0       	rjmp	.+20     	; 0x6d6e <vfprintf+0x4f2>
    6d5a:	f2 e0       	ldi	r31, 0x02	; 2
    6d5c:	af 0e       	add	r10, r31
    6d5e:	b1 1c       	adc	r11, r1
    6d60:	f6 01       	movw	r30, r12
    6d62:	60 81       	ld	r22, Z
    6d64:	71 81       	ldd	r23, Z+1	; 0x01
    6d66:	07 2e       	mov	r0, r23
    6d68:	00 0c       	add	r0, r0
    6d6a:	88 0b       	sbc	r24, r24
    6d6c:	99 0b       	sbc	r25, r25
    6d6e:	f9 2d       	mov	r31, r9
    6d70:	ff 76       	andi	r31, 0x6F	; 111
    6d72:	9f 2e       	mov	r9, r31
    6d74:	97 ff       	sbrs	r25, 7
    6d76:	09 c0       	rjmp	.+18     	; 0x6d8a <vfprintf+0x50e>
    6d78:	90 95       	com	r25
    6d7a:	80 95       	com	r24
    6d7c:	70 95       	com	r23
    6d7e:	61 95       	neg	r22
    6d80:	7f 4f       	sbci	r23, 0xFF	; 255
    6d82:	8f 4f       	sbci	r24, 0xFF	; 255
    6d84:	9f 4f       	sbci	r25, 0xFF	; 255
    6d86:	f0 68       	ori	r31, 0x80	; 128
    6d88:	9f 2e       	mov	r9, r31
    6d8a:	2a e0       	ldi	r18, 0x0A	; 10
    6d8c:	30 e0       	ldi	r19, 0x00	; 0
    6d8e:	a3 01       	movw	r20, r6
    6d90:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__ultoa_invert>
    6d94:	c8 2e       	mov	r12, r24
    6d96:	c6 18       	sub	r12, r6
    6d98:	3f c0       	rjmp	.+126    	; 0x6e18 <vfprintf+0x59c>
    6d9a:	09 2d       	mov	r16, r9
    6d9c:	85 37       	cpi	r24, 0x75	; 117
    6d9e:	21 f4       	brne	.+8      	; 0x6da8 <vfprintf+0x52c>
    6da0:	0f 7e       	andi	r16, 0xEF	; 239
    6da2:	2a e0       	ldi	r18, 0x0A	; 10
    6da4:	30 e0       	ldi	r19, 0x00	; 0
    6da6:	1d c0       	rjmp	.+58     	; 0x6de2 <vfprintf+0x566>
    6da8:	09 7f       	andi	r16, 0xF9	; 249
    6daa:	8f 36       	cpi	r24, 0x6F	; 111
    6dac:	91 f0       	breq	.+36     	; 0x6dd2 <vfprintf+0x556>
    6dae:	18 f4       	brcc	.+6      	; 0x6db6 <vfprintf+0x53a>
    6db0:	88 35       	cpi	r24, 0x58	; 88
    6db2:	59 f0       	breq	.+22     	; 0x6dca <vfprintf+0x54e>
    6db4:	c3 c0       	rjmp	.+390    	; 0x6f3c <vfprintf+0x6c0>
    6db6:	80 37       	cpi	r24, 0x70	; 112
    6db8:	19 f0       	breq	.+6      	; 0x6dc0 <vfprintf+0x544>
    6dba:	88 37       	cpi	r24, 0x78	; 120
    6dbc:	11 f0       	breq	.+4      	; 0x6dc2 <vfprintf+0x546>
    6dbe:	be c0       	rjmp	.+380    	; 0x6f3c <vfprintf+0x6c0>
    6dc0:	00 61       	ori	r16, 0x10	; 16
    6dc2:	04 ff       	sbrs	r16, 4
    6dc4:	09 c0       	rjmp	.+18     	; 0x6dd8 <vfprintf+0x55c>
    6dc6:	04 60       	ori	r16, 0x04	; 4
    6dc8:	07 c0       	rjmp	.+14     	; 0x6dd8 <vfprintf+0x55c>
    6dca:	94 fe       	sbrs	r9, 4
    6dcc:	08 c0       	rjmp	.+16     	; 0x6dde <vfprintf+0x562>
    6dce:	06 60       	ori	r16, 0x06	; 6
    6dd0:	06 c0       	rjmp	.+12     	; 0x6dde <vfprintf+0x562>
    6dd2:	28 e0       	ldi	r18, 0x08	; 8
    6dd4:	30 e0       	ldi	r19, 0x00	; 0
    6dd6:	05 c0       	rjmp	.+10     	; 0x6de2 <vfprintf+0x566>
    6dd8:	20 e1       	ldi	r18, 0x10	; 16
    6dda:	30 e0       	ldi	r19, 0x00	; 0
    6ddc:	02 c0       	rjmp	.+4      	; 0x6de2 <vfprintf+0x566>
    6dde:	20 e1       	ldi	r18, 0x10	; 16
    6de0:	32 e0       	ldi	r19, 0x02	; 2
    6de2:	56 01       	movw	r10, r12
    6de4:	07 ff       	sbrs	r16, 7
    6de6:	09 c0       	rjmp	.+18     	; 0x6dfa <vfprintf+0x57e>
    6de8:	84 e0       	ldi	r24, 0x04	; 4
    6dea:	a8 0e       	add	r10, r24
    6dec:	b1 1c       	adc	r11, r1
    6dee:	f6 01       	movw	r30, r12
    6df0:	60 81       	ld	r22, Z
    6df2:	71 81       	ldd	r23, Z+1	; 0x01
    6df4:	82 81       	ldd	r24, Z+2	; 0x02
    6df6:	93 81       	ldd	r25, Z+3	; 0x03
    6df8:	08 c0       	rjmp	.+16     	; 0x6e0a <vfprintf+0x58e>
    6dfa:	f2 e0       	ldi	r31, 0x02	; 2
    6dfc:	af 0e       	add	r10, r31
    6dfe:	b1 1c       	adc	r11, r1
    6e00:	f6 01       	movw	r30, r12
    6e02:	60 81       	ld	r22, Z
    6e04:	71 81       	ldd	r23, Z+1	; 0x01
    6e06:	80 e0       	ldi	r24, 0x00	; 0
    6e08:	90 e0       	ldi	r25, 0x00	; 0
    6e0a:	a3 01       	movw	r20, r6
    6e0c:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <__ultoa_invert>
    6e10:	c8 2e       	mov	r12, r24
    6e12:	c6 18       	sub	r12, r6
    6e14:	0f 77       	andi	r16, 0x7F	; 127
    6e16:	90 2e       	mov	r9, r16
    6e18:	96 fe       	sbrs	r9, 6
    6e1a:	0b c0       	rjmp	.+22     	; 0x6e32 <vfprintf+0x5b6>
    6e1c:	09 2d       	mov	r16, r9
    6e1e:	0e 7f       	andi	r16, 0xFE	; 254
    6e20:	c1 16       	cp	r12, r17
    6e22:	50 f4       	brcc	.+20     	; 0x6e38 <vfprintf+0x5bc>
    6e24:	94 fe       	sbrs	r9, 4
    6e26:	0a c0       	rjmp	.+20     	; 0x6e3c <vfprintf+0x5c0>
    6e28:	92 fc       	sbrc	r9, 2
    6e2a:	08 c0       	rjmp	.+16     	; 0x6e3c <vfprintf+0x5c0>
    6e2c:	09 2d       	mov	r16, r9
    6e2e:	0e 7e       	andi	r16, 0xEE	; 238
    6e30:	05 c0       	rjmp	.+10     	; 0x6e3c <vfprintf+0x5c0>
    6e32:	dc 2c       	mov	r13, r12
    6e34:	09 2d       	mov	r16, r9
    6e36:	03 c0       	rjmp	.+6      	; 0x6e3e <vfprintf+0x5c2>
    6e38:	dc 2c       	mov	r13, r12
    6e3a:	01 c0       	rjmp	.+2      	; 0x6e3e <vfprintf+0x5c2>
    6e3c:	d1 2e       	mov	r13, r17
    6e3e:	04 ff       	sbrs	r16, 4
    6e40:	0d c0       	rjmp	.+26     	; 0x6e5c <vfprintf+0x5e0>
    6e42:	fe 01       	movw	r30, r28
    6e44:	ec 0d       	add	r30, r12
    6e46:	f1 1d       	adc	r31, r1
    6e48:	80 81       	ld	r24, Z
    6e4a:	80 33       	cpi	r24, 0x30	; 48
    6e4c:	11 f4       	brne	.+4      	; 0x6e52 <vfprintf+0x5d6>
    6e4e:	09 7e       	andi	r16, 0xE9	; 233
    6e50:	09 c0       	rjmp	.+18     	; 0x6e64 <vfprintf+0x5e8>
    6e52:	02 ff       	sbrs	r16, 2
    6e54:	06 c0       	rjmp	.+12     	; 0x6e62 <vfprintf+0x5e6>
    6e56:	d3 94       	inc	r13
    6e58:	d3 94       	inc	r13
    6e5a:	04 c0       	rjmp	.+8      	; 0x6e64 <vfprintf+0x5e8>
    6e5c:	80 2f       	mov	r24, r16
    6e5e:	86 78       	andi	r24, 0x86	; 134
    6e60:	09 f0       	breq	.+2      	; 0x6e64 <vfprintf+0x5e8>
    6e62:	d3 94       	inc	r13
    6e64:	03 fd       	sbrc	r16, 3
    6e66:	11 c0       	rjmp	.+34     	; 0x6e8a <vfprintf+0x60e>
    6e68:	00 ff       	sbrs	r16, 0
    6e6a:	06 c0       	rjmp	.+12     	; 0x6e78 <vfprintf+0x5fc>
    6e6c:	1c 2d       	mov	r17, r12
    6e6e:	d5 14       	cp	r13, r5
    6e70:	80 f4       	brcc	.+32     	; 0x6e92 <vfprintf+0x616>
    6e72:	15 0d       	add	r17, r5
    6e74:	1d 19       	sub	r17, r13
    6e76:	0d c0       	rjmp	.+26     	; 0x6e92 <vfprintf+0x616>
    6e78:	d5 14       	cp	r13, r5
    6e7a:	58 f4       	brcc	.+22     	; 0x6e92 <vfprintf+0x616>
    6e7c:	b7 01       	movw	r22, r14
    6e7e:	80 e2       	ldi	r24, 0x20	; 32
    6e80:	90 e0       	ldi	r25, 0x00	; 0
    6e82:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6e86:	d3 94       	inc	r13
    6e88:	f7 cf       	rjmp	.-18     	; 0x6e78 <vfprintf+0x5fc>
    6e8a:	d5 14       	cp	r13, r5
    6e8c:	10 f4       	brcc	.+4      	; 0x6e92 <vfprintf+0x616>
    6e8e:	5d 18       	sub	r5, r13
    6e90:	01 c0       	rjmp	.+2      	; 0x6e94 <vfprintf+0x618>
    6e92:	51 2c       	mov	r5, r1
    6e94:	04 ff       	sbrs	r16, 4
    6e96:	10 c0       	rjmp	.+32     	; 0x6eb8 <vfprintf+0x63c>
    6e98:	b7 01       	movw	r22, r14
    6e9a:	80 e3       	ldi	r24, 0x30	; 48
    6e9c:	90 e0       	ldi	r25, 0x00	; 0
    6e9e:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6ea2:	02 ff       	sbrs	r16, 2
    6ea4:	17 c0       	rjmp	.+46     	; 0x6ed4 <vfprintf+0x658>
    6ea6:	01 fd       	sbrc	r16, 1
    6ea8:	03 c0       	rjmp	.+6      	; 0x6eb0 <vfprintf+0x634>
    6eaa:	88 e7       	ldi	r24, 0x78	; 120
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	02 c0       	rjmp	.+4      	; 0x6eb4 <vfprintf+0x638>
    6eb0:	88 e5       	ldi	r24, 0x58	; 88
    6eb2:	90 e0       	ldi	r25, 0x00	; 0
    6eb4:	b7 01       	movw	r22, r14
    6eb6:	0c c0       	rjmp	.+24     	; 0x6ed0 <vfprintf+0x654>
    6eb8:	80 2f       	mov	r24, r16
    6eba:	86 78       	andi	r24, 0x86	; 134
    6ebc:	59 f0       	breq	.+22     	; 0x6ed4 <vfprintf+0x658>
    6ebe:	01 ff       	sbrs	r16, 1
    6ec0:	02 c0       	rjmp	.+4      	; 0x6ec6 <vfprintf+0x64a>
    6ec2:	8b e2       	ldi	r24, 0x2B	; 43
    6ec4:	01 c0       	rjmp	.+2      	; 0x6ec8 <vfprintf+0x64c>
    6ec6:	80 e2       	ldi	r24, 0x20	; 32
    6ec8:	07 fd       	sbrc	r16, 7
    6eca:	8d e2       	ldi	r24, 0x2D	; 45
    6ecc:	b7 01       	movw	r22, r14
    6ece:	90 e0       	ldi	r25, 0x00	; 0
    6ed0:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6ed4:	c1 16       	cp	r12, r17
    6ed6:	38 f4       	brcc	.+14     	; 0x6ee6 <vfprintf+0x66a>
    6ed8:	b7 01       	movw	r22, r14
    6eda:	80 e3       	ldi	r24, 0x30	; 48
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6ee2:	11 50       	subi	r17, 0x01	; 1
    6ee4:	f7 cf       	rjmp	.-18     	; 0x6ed4 <vfprintf+0x658>
    6ee6:	ca 94       	dec	r12
    6ee8:	f3 01       	movw	r30, r6
    6eea:	ec 0d       	add	r30, r12
    6eec:	f1 1d       	adc	r31, r1
    6eee:	80 81       	ld	r24, Z
    6ef0:	b7 01       	movw	r22, r14
    6ef2:	90 e0       	ldi	r25, 0x00	; 0
    6ef4:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6ef8:	c1 10       	cpse	r12, r1
    6efa:	f5 cf       	rjmp	.-22     	; 0x6ee6 <vfprintf+0x66a>
    6efc:	15 c0       	rjmp	.+42     	; 0x6f28 <vfprintf+0x6ac>
    6efe:	f4 e0       	ldi	r31, 0x04	; 4
    6f00:	f5 15       	cp	r31, r5
    6f02:	60 f5       	brcc	.+88     	; 0x6f5c <vfprintf+0x6e0>
    6f04:	84 e0       	ldi	r24, 0x04	; 4
    6f06:	58 1a       	sub	r5, r24
    6f08:	93 fe       	sbrs	r9, 3
    6f0a:	1f c0       	rjmp	.+62     	; 0x6f4a <vfprintf+0x6ce>
    6f0c:	01 11       	cpse	r16, r1
    6f0e:	27 c0       	rjmp	.+78     	; 0x6f5e <vfprintf+0x6e2>
    6f10:	2c 85       	ldd	r18, Y+12	; 0x0c
    6f12:	23 ff       	sbrs	r18, 3
    6f14:	2a c0       	rjmp	.+84     	; 0x6f6a <vfprintf+0x6ee>
    6f16:	0c e5       	ldi	r16, 0x5C	; 92
    6f18:	12 e0       	ldi	r17, 0x02	; 2
    6f1a:	39 2d       	mov	r19, r9
    6f1c:	30 71       	andi	r19, 0x10	; 16
    6f1e:	93 2e       	mov	r9, r19
    6f20:	f8 01       	movw	r30, r16
    6f22:	84 91       	lpm	r24, Z
    6f24:	81 11       	cpse	r24, r1
    6f26:	24 c0       	rjmp	.+72     	; 0x6f70 <vfprintf+0x6f4>
    6f28:	55 20       	and	r5, r5
    6f2a:	09 f4       	brne	.+2      	; 0x6f2e <vfprintf+0x6b2>
    6f2c:	e4 cc       	rjmp	.-1592   	; 0x68f6 <vfprintf+0x7a>
    6f2e:	b7 01       	movw	r22, r14
    6f30:	80 e2       	ldi	r24, 0x20	; 32
    6f32:	90 e0       	ldi	r25, 0x00	; 0
    6f34:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6f38:	5a 94       	dec	r5
    6f3a:	f6 cf       	rjmp	.-20     	; 0x6f28 <vfprintf+0x6ac>
    6f3c:	f7 01       	movw	r30, r14
    6f3e:	86 81       	ldd	r24, Z+6	; 0x06
    6f40:	97 81       	ldd	r25, Z+7	; 0x07
    6f42:	26 c0       	rjmp	.+76     	; 0x6f90 <vfprintf+0x714>
    6f44:	8f ef       	ldi	r24, 0xFF	; 255
    6f46:	9f ef       	ldi	r25, 0xFF	; 255
    6f48:	23 c0       	rjmp	.+70     	; 0x6f90 <vfprintf+0x714>
    6f4a:	b7 01       	movw	r22, r14
    6f4c:	80 e2       	ldi	r24, 0x20	; 32
    6f4e:	90 e0       	ldi	r25, 0x00	; 0
    6f50:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6f54:	5a 94       	dec	r5
    6f56:	51 10       	cpse	r5, r1
    6f58:	f8 cf       	rjmp	.-16     	; 0x6f4a <vfprintf+0x6ce>
    6f5a:	d8 cf       	rjmp	.-80     	; 0x6f0c <vfprintf+0x690>
    6f5c:	51 2c       	mov	r5, r1
    6f5e:	b7 01       	movw	r22, r14
    6f60:	80 2f       	mov	r24, r16
    6f62:	90 e0       	ldi	r25, 0x00	; 0
    6f64:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6f68:	d3 cf       	rjmp	.-90     	; 0x6f10 <vfprintf+0x694>
    6f6a:	00 e6       	ldi	r16, 0x60	; 96
    6f6c:	12 e0       	ldi	r17, 0x02	; 2
    6f6e:	d5 cf       	rjmp	.-86     	; 0x6f1a <vfprintf+0x69e>
    6f70:	91 10       	cpse	r9, r1
    6f72:	80 52       	subi	r24, 0x20	; 32
    6f74:	b7 01       	movw	r22, r14
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	0e 94 72 3c 	call	0x78e4	; 0x78e4 <fputc>
    6f7c:	0f 5f       	subi	r16, 0xFF	; 255
    6f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f80:	cf cf       	rjmp	.-98     	; 0x6f20 <vfprintf+0x6a4>
    6f82:	23 e0       	ldi	r18, 0x03	; 3
    6f84:	25 15       	cp	r18, r5
    6f86:	10 f4       	brcc	.+4      	; 0x6f8c <vfprintf+0x710>
    6f88:	83 e0       	ldi	r24, 0x03	; 3
    6f8a:	bd cf       	rjmp	.-134    	; 0x6f06 <vfprintf+0x68a>
    6f8c:	51 2c       	mov	r5, r1
    6f8e:	c0 cf       	rjmp	.-128    	; 0x6f10 <vfprintf+0x694>
    6f90:	60 96       	adiw	r28, 0x10	; 16
    6f92:	cd bf       	out	0x3d, r28	; 61
    6f94:	de bf       	out	0x3e, r29	; 62
    6f96:	df 91       	pop	r29
    6f98:	cf 91       	pop	r28
    6f9a:	1f 91       	pop	r17
    6f9c:	0f 91       	pop	r16
    6f9e:	ff 90       	pop	r15
    6fa0:	ef 90       	pop	r14
    6fa2:	df 90       	pop	r13
    6fa4:	cf 90       	pop	r12
    6fa6:	bf 90       	pop	r11
    6fa8:	af 90       	pop	r10
    6faa:	9f 90       	pop	r9
    6fac:	8f 90       	pop	r8
    6fae:	7f 90       	pop	r7
    6fb0:	6f 90       	pop	r6
    6fb2:	5f 90       	pop	r5
    6fb4:	4f 90       	pop	r4
    6fb6:	3f 90       	pop	r3
    6fb8:	2f 90       	pop	r2
    6fba:	08 95       	ret

00006fbc <__mulsi3>:
    6fbc:	db 01       	movw	r26, r22
    6fbe:	8f 93       	push	r24
    6fc0:	9f 93       	push	r25
    6fc2:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <__muluhisi3>
    6fc6:	bf 91       	pop	r27
    6fc8:	af 91       	pop	r26
    6fca:	a2 9f       	mul	r26, r18
    6fcc:	80 0d       	add	r24, r0
    6fce:	91 1d       	adc	r25, r1
    6fd0:	a3 9f       	mul	r26, r19
    6fd2:	90 0d       	add	r25, r0
    6fd4:	b2 9f       	mul	r27, r18
    6fd6:	90 0d       	add	r25, r0
    6fd8:	11 24       	eor	r1, r1
    6fda:	08 95       	ret

00006fdc <__muluhisi3>:
    6fdc:	0e 94 02 38 	call	0x7004	; 0x7004 <__umulhisi3>
    6fe0:	a5 9f       	mul	r26, r21
    6fe2:	90 0d       	add	r25, r0
    6fe4:	b4 9f       	mul	r27, r20
    6fe6:	90 0d       	add	r25, r0
    6fe8:	a4 9f       	mul	r26, r20
    6fea:	80 0d       	add	r24, r0
    6fec:	91 1d       	adc	r25, r1
    6fee:	11 24       	eor	r1, r1
    6ff0:	08 95       	ret

00006ff2 <__adddi3>:
    6ff2:	2a 0d       	add	r18, r10
    6ff4:	3b 1d       	adc	r19, r11
    6ff6:	4c 1d       	adc	r20, r12
    6ff8:	5d 1d       	adc	r21, r13
    6ffa:	6e 1d       	adc	r22, r14
    6ffc:	7f 1d       	adc	r23, r15
    6ffe:	80 1f       	adc	r24, r16
    7000:	91 1f       	adc	r25, r17
    7002:	08 95       	ret

00007004 <__umulhisi3>:
    7004:	a2 9f       	mul	r26, r18
    7006:	b0 01       	movw	r22, r0
    7008:	b3 9f       	mul	r27, r19
    700a:	c0 01       	movw	r24, r0
    700c:	a3 9f       	mul	r26, r19
    700e:	70 0d       	add	r23, r0
    7010:	81 1d       	adc	r24, r1
    7012:	11 24       	eor	r1, r1
    7014:	91 1d       	adc	r25, r1
    7016:	b2 9f       	mul	r27, r18
    7018:	70 0d       	add	r23, r0
    701a:	81 1d       	adc	r24, r1
    701c:	11 24       	eor	r1, r1
    701e:	91 1d       	adc	r25, r1
    7020:	08 95       	ret

00007022 <malloc>:
    7022:	0f 93       	push	r16
    7024:	1f 93       	push	r17
    7026:	cf 93       	push	r28
    7028:	df 93       	push	r29
    702a:	82 30       	cpi	r24, 0x02	; 2
    702c:	91 05       	cpc	r25, r1
    702e:	10 f4       	brcc	.+4      	; 0x7034 <malloc+0x12>
    7030:	82 e0       	ldi	r24, 0x02	; 2
    7032:	90 e0       	ldi	r25, 0x00	; 0
    7034:	e0 91 91 2e 	lds	r30, 0x2E91	; 0x802e91 <__flp>
    7038:	f0 91 92 2e 	lds	r31, 0x2E92	; 0x802e92 <__flp+0x1>
    703c:	20 e0       	ldi	r18, 0x00	; 0
    703e:	30 e0       	ldi	r19, 0x00	; 0
    7040:	a0 e0       	ldi	r26, 0x00	; 0
    7042:	b0 e0       	ldi	r27, 0x00	; 0
    7044:	30 97       	sbiw	r30, 0x00	; 0
    7046:	19 f1       	breq	.+70     	; 0x708e <malloc+0x6c>
    7048:	40 81       	ld	r20, Z
    704a:	51 81       	ldd	r21, Z+1	; 0x01
    704c:	02 81       	ldd	r16, Z+2	; 0x02
    704e:	13 81       	ldd	r17, Z+3	; 0x03
    7050:	48 17       	cp	r20, r24
    7052:	59 07       	cpc	r21, r25
    7054:	c8 f0       	brcs	.+50     	; 0x7088 <malloc+0x66>
    7056:	84 17       	cp	r24, r20
    7058:	95 07       	cpc	r25, r21
    705a:	69 f4       	brne	.+26     	; 0x7076 <malloc+0x54>
    705c:	10 97       	sbiw	r26, 0x00	; 0
    705e:	31 f0       	breq	.+12     	; 0x706c <malloc+0x4a>
    7060:	12 96       	adiw	r26, 0x02	; 2
    7062:	0c 93       	st	X, r16
    7064:	12 97       	sbiw	r26, 0x02	; 2
    7066:	13 96       	adiw	r26, 0x03	; 3
    7068:	1c 93       	st	X, r17
    706a:	27 c0       	rjmp	.+78     	; 0x70ba <malloc+0x98>
    706c:	00 93 91 2e 	sts	0x2E91, r16	; 0x802e91 <__flp>
    7070:	10 93 92 2e 	sts	0x2E92, r17	; 0x802e92 <__flp+0x1>
    7074:	22 c0       	rjmp	.+68     	; 0x70ba <malloc+0x98>
    7076:	21 15       	cp	r18, r1
    7078:	31 05       	cpc	r19, r1
    707a:	19 f0       	breq	.+6      	; 0x7082 <malloc+0x60>
    707c:	42 17       	cp	r20, r18
    707e:	53 07       	cpc	r21, r19
    7080:	18 f4       	brcc	.+6      	; 0x7088 <malloc+0x66>
    7082:	9a 01       	movw	r18, r20
    7084:	bd 01       	movw	r22, r26
    7086:	ef 01       	movw	r28, r30
    7088:	df 01       	movw	r26, r30
    708a:	f8 01       	movw	r30, r16
    708c:	db cf       	rjmp	.-74     	; 0x7044 <malloc+0x22>
    708e:	21 15       	cp	r18, r1
    7090:	31 05       	cpc	r19, r1
    7092:	f9 f0       	breq	.+62     	; 0x70d2 <malloc+0xb0>
    7094:	28 1b       	sub	r18, r24
    7096:	39 0b       	sbc	r19, r25
    7098:	24 30       	cpi	r18, 0x04	; 4
    709a:	31 05       	cpc	r19, r1
    709c:	80 f4       	brcc	.+32     	; 0x70be <malloc+0x9c>
    709e:	8a 81       	ldd	r24, Y+2	; 0x02
    70a0:	9b 81       	ldd	r25, Y+3	; 0x03
    70a2:	61 15       	cp	r22, r1
    70a4:	71 05       	cpc	r23, r1
    70a6:	21 f0       	breq	.+8      	; 0x70b0 <malloc+0x8e>
    70a8:	fb 01       	movw	r30, r22
    70aa:	82 83       	std	Z+2, r24	; 0x02
    70ac:	93 83       	std	Z+3, r25	; 0x03
    70ae:	04 c0       	rjmp	.+8      	; 0x70b8 <malloc+0x96>
    70b0:	80 93 91 2e 	sts	0x2E91, r24	; 0x802e91 <__flp>
    70b4:	90 93 92 2e 	sts	0x2E92, r25	; 0x802e92 <__flp+0x1>
    70b8:	fe 01       	movw	r30, r28
    70ba:	32 96       	adiw	r30, 0x02	; 2
    70bc:	44 c0       	rjmp	.+136    	; 0x7146 <malloc+0x124>
    70be:	fe 01       	movw	r30, r28
    70c0:	e2 0f       	add	r30, r18
    70c2:	f3 1f       	adc	r31, r19
    70c4:	81 93       	st	Z+, r24
    70c6:	91 93       	st	Z+, r25
    70c8:	22 50       	subi	r18, 0x02	; 2
    70ca:	31 09       	sbc	r19, r1
    70cc:	28 83       	st	Y, r18
    70ce:	39 83       	std	Y+1, r19	; 0x01
    70d0:	3a c0       	rjmp	.+116    	; 0x7146 <malloc+0x124>
    70d2:	20 91 8f 2e 	lds	r18, 0x2E8F	; 0x802e8f <__brkval>
    70d6:	30 91 90 2e 	lds	r19, 0x2E90	; 0x802e90 <__brkval+0x1>
    70da:	23 2b       	or	r18, r19
    70dc:	41 f4       	brne	.+16     	; 0x70ee <malloc+0xcc>
    70de:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    70e2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    70e6:	20 93 8f 2e 	sts	0x2E8F, r18	; 0x802e8f <__brkval>
    70ea:	30 93 90 2e 	sts	0x2E90, r19	; 0x802e90 <__brkval+0x1>
    70ee:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    70f2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    70f6:	21 15       	cp	r18, r1
    70f8:	31 05       	cpc	r19, r1
    70fa:	41 f4       	brne	.+16     	; 0x710c <malloc+0xea>
    70fc:	2d b7       	in	r18, 0x3d	; 61
    70fe:	3e b7       	in	r19, 0x3e	; 62
    7100:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    7104:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    7108:	24 1b       	sub	r18, r20
    710a:	35 0b       	sbc	r19, r21
    710c:	e0 91 8f 2e 	lds	r30, 0x2E8F	; 0x802e8f <__brkval>
    7110:	f0 91 90 2e 	lds	r31, 0x2E90	; 0x802e90 <__brkval+0x1>
    7114:	e2 17       	cp	r30, r18
    7116:	f3 07       	cpc	r31, r19
    7118:	a0 f4       	brcc	.+40     	; 0x7142 <malloc+0x120>
    711a:	2e 1b       	sub	r18, r30
    711c:	3f 0b       	sbc	r19, r31
    711e:	28 17       	cp	r18, r24
    7120:	39 07       	cpc	r19, r25
    7122:	78 f0       	brcs	.+30     	; 0x7142 <malloc+0x120>
    7124:	ac 01       	movw	r20, r24
    7126:	4e 5f       	subi	r20, 0xFE	; 254
    7128:	5f 4f       	sbci	r21, 0xFF	; 255
    712a:	24 17       	cp	r18, r20
    712c:	35 07       	cpc	r19, r21
    712e:	48 f0       	brcs	.+18     	; 0x7142 <malloc+0x120>
    7130:	4e 0f       	add	r20, r30
    7132:	5f 1f       	adc	r21, r31
    7134:	40 93 8f 2e 	sts	0x2E8F, r20	; 0x802e8f <__brkval>
    7138:	50 93 90 2e 	sts	0x2E90, r21	; 0x802e90 <__brkval+0x1>
    713c:	81 93       	st	Z+, r24
    713e:	91 93       	st	Z+, r25
    7140:	02 c0       	rjmp	.+4      	; 0x7146 <malloc+0x124>
    7142:	e0 e0       	ldi	r30, 0x00	; 0
    7144:	f0 e0       	ldi	r31, 0x00	; 0
    7146:	cf 01       	movw	r24, r30
    7148:	df 91       	pop	r29
    714a:	cf 91       	pop	r28
    714c:	1f 91       	pop	r17
    714e:	0f 91       	pop	r16
    7150:	08 95       	ret

00007152 <free>:
    7152:	cf 93       	push	r28
    7154:	df 93       	push	r29
    7156:	00 97       	sbiw	r24, 0x00	; 0
    7158:	09 f4       	brne	.+2      	; 0x715c <free+0xa>
    715a:	81 c0       	rjmp	.+258    	; 0x725e <free+0x10c>
    715c:	fc 01       	movw	r30, r24
    715e:	32 97       	sbiw	r30, 0x02	; 2
    7160:	12 82       	std	Z+2, r1	; 0x02
    7162:	13 82       	std	Z+3, r1	; 0x03
    7164:	a0 91 91 2e 	lds	r26, 0x2E91	; 0x802e91 <__flp>
    7168:	b0 91 92 2e 	lds	r27, 0x2E92	; 0x802e92 <__flp+0x1>
    716c:	10 97       	sbiw	r26, 0x00	; 0
    716e:	81 f4       	brne	.+32     	; 0x7190 <free+0x3e>
    7170:	20 81       	ld	r18, Z
    7172:	31 81       	ldd	r19, Z+1	; 0x01
    7174:	82 0f       	add	r24, r18
    7176:	93 1f       	adc	r25, r19
    7178:	20 91 8f 2e 	lds	r18, 0x2E8F	; 0x802e8f <__brkval>
    717c:	30 91 90 2e 	lds	r19, 0x2E90	; 0x802e90 <__brkval+0x1>
    7180:	28 17       	cp	r18, r24
    7182:	39 07       	cpc	r19, r25
    7184:	51 f5       	brne	.+84     	; 0x71da <free+0x88>
    7186:	e0 93 8f 2e 	sts	0x2E8F, r30	; 0x802e8f <__brkval>
    718a:	f0 93 90 2e 	sts	0x2E90, r31	; 0x802e90 <__brkval+0x1>
    718e:	67 c0       	rjmp	.+206    	; 0x725e <free+0x10c>
    7190:	ed 01       	movw	r28, r26
    7192:	20 e0       	ldi	r18, 0x00	; 0
    7194:	30 e0       	ldi	r19, 0x00	; 0
    7196:	ce 17       	cp	r28, r30
    7198:	df 07       	cpc	r29, r31
    719a:	40 f4       	brcc	.+16     	; 0x71ac <free+0x5a>
    719c:	4a 81       	ldd	r20, Y+2	; 0x02
    719e:	5b 81       	ldd	r21, Y+3	; 0x03
    71a0:	9e 01       	movw	r18, r28
    71a2:	41 15       	cp	r20, r1
    71a4:	51 05       	cpc	r21, r1
    71a6:	f1 f0       	breq	.+60     	; 0x71e4 <free+0x92>
    71a8:	ea 01       	movw	r28, r20
    71aa:	f5 cf       	rjmp	.-22     	; 0x7196 <free+0x44>
    71ac:	c2 83       	std	Z+2, r28	; 0x02
    71ae:	d3 83       	std	Z+3, r29	; 0x03
    71b0:	40 81       	ld	r20, Z
    71b2:	51 81       	ldd	r21, Z+1	; 0x01
    71b4:	84 0f       	add	r24, r20
    71b6:	95 1f       	adc	r25, r21
    71b8:	c8 17       	cp	r28, r24
    71ba:	d9 07       	cpc	r29, r25
    71bc:	59 f4       	brne	.+22     	; 0x71d4 <free+0x82>
    71be:	88 81       	ld	r24, Y
    71c0:	99 81       	ldd	r25, Y+1	; 0x01
    71c2:	84 0f       	add	r24, r20
    71c4:	95 1f       	adc	r25, r21
    71c6:	02 96       	adiw	r24, 0x02	; 2
    71c8:	80 83       	st	Z, r24
    71ca:	91 83       	std	Z+1, r25	; 0x01
    71cc:	8a 81       	ldd	r24, Y+2	; 0x02
    71ce:	9b 81       	ldd	r25, Y+3	; 0x03
    71d0:	82 83       	std	Z+2, r24	; 0x02
    71d2:	93 83       	std	Z+3, r25	; 0x03
    71d4:	21 15       	cp	r18, r1
    71d6:	31 05       	cpc	r19, r1
    71d8:	29 f4       	brne	.+10     	; 0x71e4 <free+0x92>
    71da:	e0 93 91 2e 	sts	0x2E91, r30	; 0x802e91 <__flp>
    71de:	f0 93 92 2e 	sts	0x2E92, r31	; 0x802e92 <__flp+0x1>
    71e2:	3d c0       	rjmp	.+122    	; 0x725e <free+0x10c>
    71e4:	e9 01       	movw	r28, r18
    71e6:	ea 83       	std	Y+2, r30	; 0x02
    71e8:	fb 83       	std	Y+3, r31	; 0x03
    71ea:	49 91       	ld	r20, Y+
    71ec:	59 91       	ld	r21, Y+
    71ee:	c4 0f       	add	r28, r20
    71f0:	d5 1f       	adc	r29, r21
    71f2:	ec 17       	cp	r30, r28
    71f4:	fd 07       	cpc	r31, r29
    71f6:	61 f4       	brne	.+24     	; 0x7210 <free+0xbe>
    71f8:	80 81       	ld	r24, Z
    71fa:	91 81       	ldd	r25, Z+1	; 0x01
    71fc:	84 0f       	add	r24, r20
    71fe:	95 1f       	adc	r25, r21
    7200:	02 96       	adiw	r24, 0x02	; 2
    7202:	e9 01       	movw	r28, r18
    7204:	88 83       	st	Y, r24
    7206:	99 83       	std	Y+1, r25	; 0x01
    7208:	82 81       	ldd	r24, Z+2	; 0x02
    720a:	93 81       	ldd	r25, Z+3	; 0x03
    720c:	8a 83       	std	Y+2, r24	; 0x02
    720e:	9b 83       	std	Y+3, r25	; 0x03
    7210:	e0 e0       	ldi	r30, 0x00	; 0
    7212:	f0 e0       	ldi	r31, 0x00	; 0
    7214:	12 96       	adiw	r26, 0x02	; 2
    7216:	8d 91       	ld	r24, X+
    7218:	9c 91       	ld	r25, X
    721a:	13 97       	sbiw	r26, 0x03	; 3
    721c:	00 97       	sbiw	r24, 0x00	; 0
    721e:	19 f0       	breq	.+6      	; 0x7226 <free+0xd4>
    7220:	fd 01       	movw	r30, r26
    7222:	dc 01       	movw	r26, r24
    7224:	f7 cf       	rjmp	.-18     	; 0x7214 <free+0xc2>
    7226:	8d 91       	ld	r24, X+
    7228:	9c 91       	ld	r25, X
    722a:	11 97       	sbiw	r26, 0x01	; 1
    722c:	9d 01       	movw	r18, r26
    722e:	2e 5f       	subi	r18, 0xFE	; 254
    7230:	3f 4f       	sbci	r19, 0xFF	; 255
    7232:	82 0f       	add	r24, r18
    7234:	93 1f       	adc	r25, r19
    7236:	20 91 8f 2e 	lds	r18, 0x2E8F	; 0x802e8f <__brkval>
    723a:	30 91 90 2e 	lds	r19, 0x2E90	; 0x802e90 <__brkval+0x1>
    723e:	28 17       	cp	r18, r24
    7240:	39 07       	cpc	r19, r25
    7242:	69 f4       	brne	.+26     	; 0x725e <free+0x10c>
    7244:	30 97       	sbiw	r30, 0x00	; 0
    7246:	29 f4       	brne	.+10     	; 0x7252 <free+0x100>
    7248:	10 92 91 2e 	sts	0x2E91, r1	; 0x802e91 <__flp>
    724c:	10 92 92 2e 	sts	0x2E92, r1	; 0x802e92 <__flp+0x1>
    7250:	02 c0       	rjmp	.+4      	; 0x7256 <free+0x104>
    7252:	12 82       	std	Z+2, r1	; 0x02
    7254:	13 82       	std	Z+3, r1	; 0x03
    7256:	a0 93 8f 2e 	sts	0x2E8F, r26	; 0x802e8f <__brkval>
    725a:	b0 93 90 2e 	sts	0x2E90, r27	; 0x802e90 <__brkval+0x1>
    725e:	df 91       	pop	r29
    7260:	cf 91       	pop	r28
    7262:	08 95       	ret

00007264 <realloc>:
    7264:	6f 92       	push	r6
    7266:	7f 92       	push	r7
    7268:	8f 92       	push	r8
    726a:	9f 92       	push	r9
    726c:	af 92       	push	r10
    726e:	bf 92       	push	r11
    7270:	cf 92       	push	r12
    7272:	df 92       	push	r13
    7274:	ef 92       	push	r14
    7276:	ff 92       	push	r15
    7278:	0f 93       	push	r16
    727a:	1f 93       	push	r17
    727c:	cf 93       	push	r28
    727e:	df 93       	push	r29
    7280:	00 97       	sbiw	r24, 0x00	; 0
    7282:	89 f4       	brne	.+34     	; 0x72a6 <realloc+0x42>
    7284:	cb 01       	movw	r24, r22
    7286:	df 91       	pop	r29
    7288:	cf 91       	pop	r28
    728a:	1f 91       	pop	r17
    728c:	0f 91       	pop	r16
    728e:	ff 90       	pop	r15
    7290:	ef 90       	pop	r14
    7292:	df 90       	pop	r13
    7294:	cf 90       	pop	r12
    7296:	bf 90       	pop	r11
    7298:	af 90       	pop	r10
    729a:	9f 90       	pop	r9
    729c:	8f 90       	pop	r8
    729e:	7f 90       	pop	r7
    72a0:	6f 90       	pop	r6
    72a2:	0c 94 11 38 	jmp	0x7022	; 0x7022 <malloc>
    72a6:	fc 01       	movw	r30, r24
    72a8:	e6 0f       	add	r30, r22
    72aa:	f7 1f       	adc	r31, r23
    72ac:	9c 01       	movw	r18, r24
    72ae:	22 50       	subi	r18, 0x02	; 2
    72b0:	31 09       	sbc	r19, r1
    72b2:	e2 17       	cp	r30, r18
    72b4:	f3 07       	cpc	r31, r19
    72b6:	08 f4       	brcc	.+2      	; 0x72ba <realloc+0x56>
    72b8:	a9 c0       	rjmp	.+338    	; 0x740c <realloc+0x1a8>
    72ba:	ec 01       	movw	r28, r24
    72bc:	d9 01       	movw	r26, r18
    72be:	0d 91       	ld	r16, X+
    72c0:	1c 91       	ld	r17, X
    72c2:	11 97       	sbiw	r26, 0x01	; 1
    72c4:	06 17       	cp	r16, r22
    72c6:	17 07       	cpc	r17, r23
    72c8:	b0 f0       	brcs	.+44     	; 0x72f6 <realloc+0x92>
    72ca:	05 30       	cpi	r16, 0x05	; 5
    72cc:	11 05       	cpc	r17, r1
    72ce:	08 f4       	brcc	.+2      	; 0x72d2 <realloc+0x6e>
    72d0:	9b c0       	rjmp	.+310    	; 0x7408 <realloc+0x1a4>
    72d2:	c8 01       	movw	r24, r16
    72d4:	04 97       	sbiw	r24, 0x04	; 4
    72d6:	86 17       	cp	r24, r22
    72d8:	97 07       	cpc	r25, r23
    72da:	08 f4       	brcc	.+2      	; 0x72de <realloc+0x7a>
    72dc:	95 c0       	rjmp	.+298    	; 0x7408 <realloc+0x1a4>
    72de:	02 50       	subi	r16, 0x02	; 2
    72e0:	11 09       	sbc	r17, r1
    72e2:	06 1b       	sub	r16, r22
    72e4:	17 0b       	sbc	r17, r23
    72e6:	01 93       	st	Z+, r16
    72e8:	11 93       	st	Z+, r17
    72ea:	6d 93       	st	X+, r22
    72ec:	7c 93       	st	X, r23
    72ee:	cf 01       	movw	r24, r30
    72f0:	0e 94 a9 38 	call	0x7152	; 0x7152 <free>
    72f4:	89 c0       	rjmp	.+274    	; 0x7408 <realloc+0x1a4>
    72f6:	5b 01       	movw	r10, r22
    72f8:	a0 1a       	sub	r10, r16
    72fa:	b1 0a       	sbc	r11, r17
    72fc:	4c 01       	movw	r8, r24
    72fe:	80 0e       	add	r8, r16
    7300:	91 1e       	adc	r9, r17
    7302:	a0 91 91 2e 	lds	r26, 0x2E91	; 0x802e91 <__flp>
    7306:	b0 91 92 2e 	lds	r27, 0x2E92	; 0x802e92 <__flp+0x1>
    730a:	61 2c       	mov	r6, r1
    730c:	71 2c       	mov	r7, r1
    730e:	e1 2c       	mov	r14, r1
    7310:	f1 2c       	mov	r15, r1
    7312:	10 97       	sbiw	r26, 0x00	; 0
    7314:	09 f4       	brne	.+2      	; 0x7318 <realloc+0xb4>
    7316:	46 c0       	rjmp	.+140    	; 0x73a4 <realloc+0x140>
    7318:	8d 91       	ld	r24, X+
    731a:	9c 91       	ld	r25, X
    731c:	11 97       	sbiw	r26, 0x01	; 1
    731e:	a8 15       	cp	r26, r8
    7320:	b9 05       	cpc	r27, r9
    7322:	b1 f5       	brne	.+108    	; 0x7390 <realloc+0x12c>
    7324:	6c 01       	movw	r12, r24
    7326:	42 e0       	ldi	r20, 0x02	; 2
    7328:	c4 0e       	add	r12, r20
    732a:	d1 1c       	adc	r13, r1
    732c:	ca 14       	cp	r12, r10
    732e:	db 04       	cpc	r13, r11
    7330:	78 f1       	brcs	.+94     	; 0x7390 <realloc+0x12c>
    7332:	4c 01       	movw	r8, r24
    7334:	8a 18       	sub	r8, r10
    7336:	9b 08       	sbc	r9, r11
    7338:	64 01       	movw	r12, r8
    733a:	42 e0       	ldi	r20, 0x02	; 2
    733c:	c4 0e       	add	r12, r20
    733e:	d1 1c       	adc	r13, r1
    7340:	12 96       	adiw	r26, 0x02	; 2
    7342:	bc 90       	ld	r11, X
    7344:	12 97       	sbiw	r26, 0x02	; 2
    7346:	13 96       	adiw	r26, 0x03	; 3
    7348:	ac 91       	ld	r26, X
    734a:	b5 e0       	ldi	r27, 0x05	; 5
    734c:	cb 16       	cp	r12, r27
    734e:	d1 04       	cpc	r13, r1
    7350:	40 f0       	brcs	.+16     	; 0x7362 <realloc+0xfe>
    7352:	b2 82       	std	Z+2, r11	; 0x02
    7354:	a3 83       	std	Z+3, r26	; 0x03
    7356:	80 82       	st	Z, r8
    7358:	91 82       	std	Z+1, r9	; 0x01
    735a:	d9 01       	movw	r26, r18
    735c:	6d 93       	st	X+, r22
    735e:	7c 93       	st	X, r23
    7360:	09 c0       	rjmp	.+18     	; 0x7374 <realloc+0x110>
    7362:	0e 5f       	subi	r16, 0xFE	; 254
    7364:	1f 4f       	sbci	r17, 0xFF	; 255
    7366:	80 0f       	add	r24, r16
    7368:	91 1f       	adc	r25, r17
    736a:	f9 01       	movw	r30, r18
    736c:	80 83       	st	Z, r24
    736e:	91 83       	std	Z+1, r25	; 0x01
    7370:	eb 2d       	mov	r30, r11
    7372:	fa 2f       	mov	r31, r26
    7374:	e1 14       	cp	r14, r1
    7376:	f1 04       	cpc	r15, r1
    7378:	31 f0       	breq	.+12     	; 0x7386 <realloc+0x122>
    737a:	d7 01       	movw	r26, r14
    737c:	12 96       	adiw	r26, 0x02	; 2
    737e:	ed 93       	st	X+, r30
    7380:	fc 93       	st	X, r31
    7382:	13 97       	sbiw	r26, 0x03	; 3
    7384:	41 c0       	rjmp	.+130    	; 0x7408 <realloc+0x1a4>
    7386:	e0 93 91 2e 	sts	0x2E91, r30	; 0x802e91 <__flp>
    738a:	f0 93 92 2e 	sts	0x2E92, r31	; 0x802e92 <__flp+0x1>
    738e:	3c c0       	rjmp	.+120    	; 0x7408 <realloc+0x1a4>
    7390:	68 16       	cp	r6, r24
    7392:	79 06       	cpc	r7, r25
    7394:	08 f4       	brcc	.+2      	; 0x7398 <realloc+0x134>
    7396:	3c 01       	movw	r6, r24
    7398:	7d 01       	movw	r14, r26
    739a:	12 96       	adiw	r26, 0x02	; 2
    739c:	0d 90       	ld	r0, X+
    739e:	bc 91       	ld	r27, X
    73a0:	a0 2d       	mov	r26, r0
    73a2:	b7 cf       	rjmp	.-146    	; 0x7312 <realloc+0xae>
    73a4:	80 91 8f 2e 	lds	r24, 0x2E8F	; 0x802e8f <__brkval>
    73a8:	90 91 90 2e 	lds	r25, 0x2E90	; 0x802e90 <__brkval+0x1>
    73ac:	88 16       	cp	r8, r24
    73ae:	99 06       	cpc	r9, r25
    73b0:	e1 f4       	brne	.+56     	; 0x73ea <realloc+0x186>
    73b2:	66 16       	cp	r6, r22
    73b4:	77 06       	cpc	r7, r23
    73b6:	c8 f4       	brcc	.+50     	; 0x73ea <realloc+0x186>
    73b8:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
    73bc:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <__data_start+0x1>
    73c0:	00 97       	sbiw	r24, 0x00	; 0
    73c2:	41 f4       	brne	.+16     	; 0x73d4 <realloc+0x170>
    73c4:	8d b7       	in	r24, 0x3d	; 61
    73c6:	9e b7       	in	r25, 0x3e	; 62
    73c8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    73cc:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    73d0:	84 1b       	sub	r24, r20
    73d2:	95 0b       	sbc	r25, r21
    73d4:	e8 17       	cp	r30, r24
    73d6:	f9 07       	cpc	r31, r25
    73d8:	c8 f4       	brcc	.+50     	; 0x740c <realloc+0x1a8>
    73da:	e0 93 8f 2e 	sts	0x2E8F, r30	; 0x802e8f <__brkval>
    73de:	f0 93 90 2e 	sts	0x2E90, r31	; 0x802e90 <__brkval+0x1>
    73e2:	f9 01       	movw	r30, r18
    73e4:	60 83       	st	Z, r22
    73e6:	71 83       	std	Z+1, r23	; 0x01
    73e8:	0f c0       	rjmp	.+30     	; 0x7408 <realloc+0x1a4>
    73ea:	cb 01       	movw	r24, r22
    73ec:	0e 94 11 38 	call	0x7022	; 0x7022 <malloc>
    73f0:	7c 01       	movw	r14, r24
    73f2:	00 97       	sbiw	r24, 0x00	; 0
    73f4:	59 f0       	breq	.+22     	; 0x740c <realloc+0x1a8>
    73f6:	a8 01       	movw	r20, r16
    73f8:	be 01       	movw	r22, r28
    73fa:	0e 94 31 3c 	call	0x7862	; 0x7862 <memcpy>
    73fe:	ce 01       	movw	r24, r28
    7400:	0e 94 a9 38 	call	0x7152	; 0x7152 <free>
    7404:	c7 01       	movw	r24, r14
    7406:	04 c0       	rjmp	.+8      	; 0x7410 <realloc+0x1ac>
    7408:	ce 01       	movw	r24, r28
    740a:	02 c0       	rjmp	.+4      	; 0x7410 <realloc+0x1ac>
    740c:	80 e0       	ldi	r24, 0x00	; 0
    740e:	90 e0       	ldi	r25, 0x00	; 0
    7410:	df 91       	pop	r29
    7412:	cf 91       	pop	r28
    7414:	1f 91       	pop	r17
    7416:	0f 91       	pop	r16
    7418:	ff 90       	pop	r15
    741a:	ef 90       	pop	r14
    741c:	df 90       	pop	r13
    741e:	cf 90       	pop	r12
    7420:	bf 90       	pop	r11
    7422:	af 90       	pop	r10
    7424:	9f 90       	pop	r9
    7426:	8f 90       	pop	r8
    7428:	7f 90       	pop	r7
    742a:	6f 90       	pop	r6
    742c:	08 95       	ret

0000742e <strtol>:
    742e:	3f 92       	push	r3
    7430:	4f 92       	push	r4
    7432:	5f 92       	push	r5
    7434:	6f 92       	push	r6
    7436:	7f 92       	push	r7
    7438:	8f 92       	push	r8
    743a:	9f 92       	push	r9
    743c:	af 92       	push	r10
    743e:	bf 92       	push	r11
    7440:	cf 92       	push	r12
    7442:	df 92       	push	r13
    7444:	ef 92       	push	r14
    7446:	ff 92       	push	r15
    7448:	0f 93       	push	r16
    744a:	1f 93       	push	r17
    744c:	cf 93       	push	r28
    744e:	df 93       	push	r29
    7450:	5c 01       	movw	r10, r24
    7452:	6b 01       	movw	r12, r22
    7454:	7a 01       	movw	r14, r20
    7456:	61 15       	cp	r22, r1
    7458:	71 05       	cpc	r23, r1
    745a:	19 f0       	breq	.+6      	; 0x7462 <strtol+0x34>
    745c:	fb 01       	movw	r30, r22
    745e:	80 83       	st	Z, r24
    7460:	91 83       	std	Z+1, r25	; 0x01
    7462:	e1 14       	cp	r14, r1
    7464:	f1 04       	cpc	r15, r1
    7466:	29 f0       	breq	.+10     	; 0x7472 <strtol+0x44>
    7468:	c7 01       	movw	r24, r14
    746a:	02 97       	sbiw	r24, 0x02	; 2
    746c:	83 97       	sbiw	r24, 0x23	; 35
    746e:	08 f0       	brcs	.+2      	; 0x7472 <strtol+0x44>
    7470:	e5 c0       	rjmp	.+458    	; 0x763c <strtol+0x20e>
    7472:	e5 01       	movw	r28, r10
    7474:	21 96       	adiw	r28, 0x01	; 1
    7476:	f5 01       	movw	r30, r10
    7478:	10 81       	ld	r17, Z
    747a:	81 2f       	mov	r24, r17
    747c:	90 e0       	ldi	r25, 0x00	; 0
    747e:	0e 94 1d 3c 	call	0x783a	; 0x783a <isspace>
    7482:	89 2b       	or	r24, r25
    7484:	11 f0       	breq	.+4      	; 0x748a <strtol+0x5c>
    7486:	5e 01       	movw	r10, r28
    7488:	f4 cf       	rjmp	.-24     	; 0x7472 <strtol+0x44>
    748a:	1d 32       	cpi	r17, 0x2D	; 45
    748c:	29 f4       	brne	.+10     	; 0x7498 <strtol+0x6a>
    748e:	21 96       	adiw	r28, 0x01	; 1
    7490:	f5 01       	movw	r30, r10
    7492:	11 81       	ldd	r17, Z+1	; 0x01
    7494:	01 e0       	ldi	r16, 0x01	; 1
    7496:	07 c0       	rjmp	.+14     	; 0x74a6 <strtol+0x78>
    7498:	1b 32       	cpi	r17, 0x2B	; 43
    749a:	21 f4       	brne	.+8      	; 0x74a4 <strtol+0x76>
    749c:	e5 01       	movw	r28, r10
    749e:	22 96       	adiw	r28, 0x02	; 2
    74a0:	f5 01       	movw	r30, r10
    74a2:	11 81       	ldd	r17, Z+1	; 0x01
    74a4:	00 e0       	ldi	r16, 0x00	; 0
    74a6:	e1 14       	cp	r14, r1
    74a8:	f1 04       	cpc	r15, r1
    74aa:	09 f1       	breq	.+66     	; 0x74ee <strtol+0xc0>
    74ac:	f0 e1       	ldi	r31, 0x10	; 16
    74ae:	ef 16       	cp	r14, r31
    74b0:	f1 04       	cpc	r15, r1
    74b2:	29 f4       	brne	.+10     	; 0x74be <strtol+0x90>
    74b4:	3f c0       	rjmp	.+126    	; 0x7534 <strtol+0x106>
    74b6:	10 e3       	ldi	r17, 0x30	; 48
    74b8:	e1 14       	cp	r14, r1
    74ba:	f1 04       	cpc	r15, r1
    74bc:	21 f1       	breq	.+72     	; 0x7506 <strtol+0xd8>
    74be:	28 e0       	ldi	r18, 0x08	; 8
    74c0:	e2 16       	cp	r14, r18
    74c2:	f1 04       	cpc	r15, r1
    74c4:	01 f1       	breq	.+64     	; 0x7506 <strtol+0xd8>
    74c6:	54 f4       	brge	.+20     	; 0x74dc <strtol+0xae>
    74c8:	e2 e0       	ldi	r30, 0x02	; 2
    74ca:	ee 16       	cp	r14, r30
    74cc:	f1 04       	cpc	r15, r1
    74ce:	21 f5       	brne	.+72     	; 0x7518 <strtol+0xea>
    74d0:	81 2c       	mov	r8, r1
    74d2:	91 2c       	mov	r9, r1
    74d4:	a1 2c       	mov	r10, r1
    74d6:	b0 e4       	ldi	r27, 0x40	; 64
    74d8:	bb 2e       	mov	r11, r27
    74da:	3e c0       	rjmp	.+124    	; 0x7558 <strtol+0x12a>
    74dc:	fa e0       	ldi	r31, 0x0A	; 10
    74de:	ef 16       	cp	r14, r31
    74e0:	f1 04       	cpc	r15, r1
    74e2:	39 f0       	breq	.+14     	; 0x74f2 <strtol+0xc4>
    74e4:	20 e1       	ldi	r18, 0x10	; 16
    74e6:	e2 16       	cp	r14, r18
    74e8:	f1 04       	cpc	r15, r1
    74ea:	b1 f4       	brne	.+44     	; 0x7518 <strtol+0xea>
    74ec:	30 c0       	rjmp	.+96     	; 0x754e <strtol+0x120>
    74ee:	10 33       	cpi	r17, 0x30	; 48
    74f0:	19 f1       	breq	.+70     	; 0x7538 <strtol+0x10a>
    74f2:	fa e0       	ldi	r31, 0x0A	; 10
    74f4:	ef 2e       	mov	r14, r31
    74f6:	f1 2c       	mov	r15, r1
    74f8:	ac ec       	ldi	r26, 0xCC	; 204
    74fa:	8a 2e       	mov	r8, r26
    74fc:	98 2c       	mov	r9, r8
    74fe:	a8 2c       	mov	r10, r8
    7500:	ac e0       	ldi	r26, 0x0C	; 12
    7502:	ba 2e       	mov	r11, r26
    7504:	29 c0       	rjmp	.+82     	; 0x7558 <strtol+0x12a>
    7506:	78 e0       	ldi	r23, 0x08	; 8
    7508:	e7 2e       	mov	r14, r23
    750a:	f1 2c       	mov	r15, r1
    750c:	81 2c       	mov	r8, r1
    750e:	91 2c       	mov	r9, r1
    7510:	a1 2c       	mov	r10, r1
    7512:	e0 e1       	ldi	r30, 0x10	; 16
    7514:	be 2e       	mov	r11, r30
    7516:	20 c0       	rjmp	.+64     	; 0x7558 <strtol+0x12a>
    7518:	60 e0       	ldi	r22, 0x00	; 0
    751a:	70 e0       	ldi	r23, 0x00	; 0
    751c:	80 e0       	ldi	r24, 0x00	; 0
    751e:	90 e8       	ldi	r25, 0x80	; 128
    7520:	97 01       	movw	r18, r14
    7522:	0f 2c       	mov	r0, r15
    7524:	00 0c       	add	r0, r0
    7526:	44 0b       	sbc	r20, r20
    7528:	55 0b       	sbc	r21, r21
    752a:	0e 94 0b 3e 	call	0x7c16	; 0x7c16 <__udivmodsi4>
    752e:	49 01       	movw	r8, r18
    7530:	5a 01       	movw	r10, r20
    7532:	12 c0       	rjmp	.+36     	; 0x7558 <strtol+0x12a>
    7534:	10 33       	cpi	r17, 0x30	; 48
    7536:	59 f4       	brne	.+22     	; 0x754e <strtol+0x120>
    7538:	88 81       	ld	r24, Y
    753a:	8f 7d       	andi	r24, 0xDF	; 223
    753c:	88 35       	cpi	r24, 0x58	; 88
    753e:	09 f0       	breq	.+2      	; 0x7542 <strtol+0x114>
    7540:	ba cf       	rjmp	.-140    	; 0x74b6 <strtol+0x88>
    7542:	19 81       	ldd	r17, Y+1	; 0x01
    7544:	22 96       	adiw	r28, 0x02	; 2
    7546:	02 60       	ori	r16, 0x02	; 2
    7548:	80 e1       	ldi	r24, 0x10	; 16
    754a:	e8 2e       	mov	r14, r24
    754c:	f1 2c       	mov	r15, r1
    754e:	81 2c       	mov	r8, r1
    7550:	91 2c       	mov	r9, r1
    7552:	a1 2c       	mov	r10, r1
    7554:	68 e0       	ldi	r22, 0x08	; 8
    7556:	b6 2e       	mov	r11, r22
    7558:	40 e0       	ldi	r20, 0x00	; 0
    755a:	60 e0       	ldi	r22, 0x00	; 0
    755c:	70 e0       	ldi	r23, 0x00	; 0
    755e:	cb 01       	movw	r24, r22
    7560:	27 01       	movw	r4, r14
    7562:	0f 2c       	mov	r0, r15
    7564:	00 0c       	add	r0, r0
    7566:	66 08       	sbc	r6, r6
    7568:	77 08       	sbc	r7, r7
    756a:	fe 01       	movw	r30, r28
    756c:	50 ed       	ldi	r21, 0xD0	; 208
    756e:	35 2e       	mov	r3, r21
    7570:	31 0e       	add	r3, r17
    7572:	29 e0       	ldi	r18, 0x09	; 9
    7574:	23 15       	cp	r18, r3
    7576:	70 f4       	brcc	.+28     	; 0x7594 <strtol+0x166>
    7578:	2f eb       	ldi	r18, 0xBF	; 191
    757a:	21 0f       	add	r18, r17
    757c:	2a 31       	cpi	r18, 0x1A	; 26
    757e:	18 f4       	brcc	.+6      	; 0x7586 <strtol+0x158>
    7580:	39 ec       	ldi	r19, 0xC9	; 201
    7582:	33 2e       	mov	r3, r19
    7584:	06 c0       	rjmp	.+12     	; 0x7592 <strtol+0x164>
    7586:	2f e9       	ldi	r18, 0x9F	; 159
    7588:	21 0f       	add	r18, r17
    758a:	2a 31       	cpi	r18, 0x1A	; 26
    758c:	18 f5       	brcc	.+70     	; 0x75d4 <strtol+0x1a6>
    758e:	29 ea       	ldi	r18, 0xA9	; 169
    7590:	32 2e       	mov	r3, r18
    7592:	31 0e       	add	r3, r17
    7594:	23 2d       	mov	r18, r3
    7596:	30 e0       	ldi	r19, 0x00	; 0
    7598:	2e 15       	cp	r18, r14
    759a:	3f 05       	cpc	r19, r15
    759c:	dc f4       	brge	.+54     	; 0x75d4 <strtol+0x1a6>
    759e:	47 fd       	sbrc	r20, 7
    75a0:	16 c0       	rjmp	.+44     	; 0x75ce <strtol+0x1a0>
    75a2:	86 16       	cp	r8, r22
    75a4:	97 06       	cpc	r9, r23
    75a6:	a8 06       	cpc	r10, r24
    75a8:	b9 06       	cpc	r11, r25
    75aa:	70 f0       	brcs	.+28     	; 0x75c8 <strtol+0x19a>
    75ac:	a3 01       	movw	r20, r6
    75ae:	92 01       	movw	r18, r4
    75b0:	0e 94 de 37 	call	0x6fbc	; 0x6fbc <__mulsi3>
    75b4:	63 0d       	add	r22, r3
    75b6:	71 1d       	adc	r23, r1
    75b8:	81 1d       	adc	r24, r1
    75ba:	91 1d       	adc	r25, r1
    75bc:	61 30       	cpi	r22, 0x01	; 1
    75be:	71 05       	cpc	r23, r1
    75c0:	81 05       	cpc	r24, r1
    75c2:	20 e8       	ldi	r18, 0x80	; 128
    75c4:	92 07       	cpc	r25, r18
    75c6:	10 f0       	brcs	.+4      	; 0x75cc <strtol+0x19e>
    75c8:	4f ef       	ldi	r20, 0xFF	; 255
    75ca:	01 c0       	rjmp	.+2      	; 0x75ce <strtol+0x1a0>
    75cc:	41 e0       	ldi	r20, 0x01	; 1
    75ce:	21 96       	adiw	r28, 0x01	; 1
    75d0:	10 81       	ld	r17, Z
    75d2:	cb cf       	rjmp	.-106    	; 0x756a <strtol+0x13c>
    75d4:	20 2f       	mov	r18, r16
    75d6:	21 70       	andi	r18, 0x01	; 1
    75d8:	c1 14       	cp	r12, r1
    75da:	d1 04       	cpc	r13, r1
    75dc:	71 f0       	breq	.+28     	; 0x75fa <strtol+0x1cc>
    75de:	44 23       	and	r20, r20
    75e0:	29 f0       	breq	.+10     	; 0x75ec <strtol+0x1be>
    75e2:	21 97       	sbiw	r28, 0x01	; 1
    75e4:	f6 01       	movw	r30, r12
    75e6:	c0 83       	st	Z, r28
    75e8:	d1 83       	std	Z+1, r29	; 0x01
    75ea:	07 c0       	rjmp	.+14     	; 0x75fa <strtol+0x1cc>
    75ec:	01 ff       	sbrs	r16, 1
    75ee:	19 c0       	rjmp	.+50     	; 0x7622 <strtol+0x1f4>
    75f0:	22 97       	sbiw	r28, 0x02	; 2
    75f2:	f6 01       	movw	r30, r12
    75f4:	c0 83       	st	Z, r28
    75f6:	d1 83       	std	Z+1, r29	; 0x01
    75f8:	14 c0       	rjmp	.+40     	; 0x7622 <strtol+0x1f4>
    75fa:	47 ff       	sbrs	r20, 7
    75fc:	12 c0       	rjmp	.+36     	; 0x7622 <strtol+0x1f4>
    75fe:	22 23       	and	r18, r18
    7600:	29 f0       	breq	.+10     	; 0x760c <strtol+0x1de>
    7602:	60 e0       	ldi	r22, 0x00	; 0
    7604:	70 e0       	ldi	r23, 0x00	; 0
    7606:	80 e0       	ldi	r24, 0x00	; 0
    7608:	90 e8       	ldi	r25, 0x80	; 128
    760a:	04 c0       	rjmp	.+8      	; 0x7614 <strtol+0x1e6>
    760c:	6f ef       	ldi	r22, 0xFF	; 255
    760e:	7f ef       	ldi	r23, 0xFF	; 255
    7610:	8f ef       	ldi	r24, 0xFF	; 255
    7612:	9f e7       	ldi	r25, 0x7F	; 127
    7614:	22 e2       	ldi	r18, 0x22	; 34
    7616:	30 e0       	ldi	r19, 0x00	; 0
    7618:	20 93 93 2e 	sts	0x2E93, r18	; 0x802e93 <errno>
    761c:	30 93 94 2e 	sts	0x2E94, r19	; 0x802e94 <errno+0x1>
    7620:	09 c0       	rjmp	.+18     	; 0x7634 <strtol+0x206>
    7622:	22 23       	and	r18, r18
    7624:	81 f0       	breq	.+32     	; 0x7646 <strtol+0x218>
    7626:	90 95       	com	r25
    7628:	80 95       	com	r24
    762a:	70 95       	com	r23
    762c:	61 95       	neg	r22
    762e:	7f 4f       	sbci	r23, 0xFF	; 255
    7630:	8f 4f       	sbci	r24, 0xFF	; 255
    7632:	9f 4f       	sbci	r25, 0xFF	; 255
    7634:	46 2f       	mov	r20, r22
    7636:	37 2f       	mov	r19, r23
    7638:	28 2f       	mov	r18, r24
    763a:	12 c0       	rjmp	.+36     	; 0x7660 <strtol+0x232>
    763c:	40 e0       	ldi	r20, 0x00	; 0
    763e:	30 e0       	ldi	r19, 0x00	; 0
    7640:	20 e0       	ldi	r18, 0x00	; 0
    7642:	90 e0       	ldi	r25, 0x00	; 0
    7644:	0d c0       	rjmp	.+26     	; 0x7660 <strtol+0x232>
    7646:	97 ff       	sbrs	r25, 7
    7648:	f5 cf       	rjmp	.-22     	; 0x7634 <strtol+0x206>
    764a:	82 e2       	ldi	r24, 0x22	; 34
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	80 93 93 2e 	sts	0x2E93, r24	; 0x802e93 <errno>
    7652:	90 93 94 2e 	sts	0x2E94, r25	; 0x802e94 <errno+0x1>
    7656:	6f ef       	ldi	r22, 0xFF	; 255
    7658:	7f ef       	ldi	r23, 0xFF	; 255
    765a:	8f ef       	ldi	r24, 0xFF	; 255
    765c:	9f e7       	ldi	r25, 0x7F	; 127
    765e:	ea cf       	rjmp	.-44     	; 0x7634 <strtol+0x206>
    7660:	64 2f       	mov	r22, r20
    7662:	73 2f       	mov	r23, r19
    7664:	82 2f       	mov	r24, r18
    7666:	df 91       	pop	r29
    7668:	cf 91       	pop	r28
    766a:	1f 91       	pop	r17
    766c:	0f 91       	pop	r16
    766e:	ff 90       	pop	r15
    7670:	ef 90       	pop	r14
    7672:	df 90       	pop	r13
    7674:	cf 90       	pop	r12
    7676:	bf 90       	pop	r11
    7678:	af 90       	pop	r10
    767a:	9f 90       	pop	r9
    767c:	8f 90       	pop	r8
    767e:	7f 90       	pop	r7
    7680:	6f 90       	pop	r6
    7682:	5f 90       	pop	r5
    7684:	4f 90       	pop	r4
    7686:	3f 90       	pop	r3
    7688:	08 95       	ret

0000768a <__ftoa_engine>:
    768a:	28 30       	cpi	r18, 0x08	; 8
    768c:	08 f0       	brcs	.+2      	; 0x7690 <__ftoa_engine+0x6>
    768e:	27 e0       	ldi	r18, 0x07	; 7
    7690:	33 27       	eor	r19, r19
    7692:	da 01       	movw	r26, r20
    7694:	99 0f       	add	r25, r25
    7696:	31 1d       	adc	r19, r1
    7698:	87 fd       	sbrc	r24, 7
    769a:	91 60       	ori	r25, 0x01	; 1
    769c:	00 96       	adiw	r24, 0x00	; 0
    769e:	61 05       	cpc	r22, r1
    76a0:	71 05       	cpc	r23, r1
    76a2:	39 f4       	brne	.+14     	; 0x76b2 <__ftoa_engine+0x28>
    76a4:	32 60       	ori	r19, 0x02	; 2
    76a6:	2e 5f       	subi	r18, 0xFE	; 254
    76a8:	3d 93       	st	X+, r19
    76aa:	30 e3       	ldi	r19, 0x30	; 48
    76ac:	2a 95       	dec	r18
    76ae:	e1 f7       	brne	.-8      	; 0x76a8 <__ftoa_engine+0x1e>
    76b0:	08 95       	ret
    76b2:	9f 3f       	cpi	r25, 0xFF	; 255
    76b4:	30 f0       	brcs	.+12     	; 0x76c2 <__ftoa_engine+0x38>
    76b6:	80 38       	cpi	r24, 0x80	; 128
    76b8:	71 05       	cpc	r23, r1
    76ba:	61 05       	cpc	r22, r1
    76bc:	09 f0       	breq	.+2      	; 0x76c0 <__ftoa_engine+0x36>
    76be:	3c 5f       	subi	r19, 0xFC	; 252
    76c0:	3c 5f       	subi	r19, 0xFC	; 252
    76c2:	3d 93       	st	X+, r19
    76c4:	91 30       	cpi	r25, 0x01	; 1
    76c6:	08 f0       	brcs	.+2      	; 0x76ca <__ftoa_engine+0x40>
    76c8:	80 68       	ori	r24, 0x80	; 128
    76ca:	91 1d       	adc	r25, r1
    76cc:	df 93       	push	r29
    76ce:	cf 93       	push	r28
    76d0:	1f 93       	push	r17
    76d2:	0f 93       	push	r16
    76d4:	ff 92       	push	r15
    76d6:	ef 92       	push	r14
    76d8:	19 2f       	mov	r17, r25
    76da:	98 7f       	andi	r25, 0xF8	; 248
    76dc:	96 95       	lsr	r25
    76de:	e9 2f       	mov	r30, r25
    76e0:	96 95       	lsr	r25
    76e2:	96 95       	lsr	r25
    76e4:	e9 0f       	add	r30, r25
    76e6:	ff 27       	eor	r31, r31
    76e8:	e2 54       	subi	r30, 0x42	; 66
    76ea:	fd 4f       	sbci	r31, 0xFD	; 253
    76ec:	99 27       	eor	r25, r25
    76ee:	33 27       	eor	r19, r19
    76f0:	ee 24       	eor	r14, r14
    76f2:	ff 24       	eor	r15, r15
    76f4:	a7 01       	movw	r20, r14
    76f6:	e7 01       	movw	r28, r14
    76f8:	05 90       	lpm	r0, Z+
    76fa:	08 94       	sec
    76fc:	07 94       	ror	r0
    76fe:	28 f4       	brcc	.+10     	; 0x770a <__ftoa_engine+0x80>
    7700:	36 0f       	add	r19, r22
    7702:	e7 1e       	adc	r14, r23
    7704:	f8 1e       	adc	r15, r24
    7706:	49 1f       	adc	r20, r25
    7708:	51 1d       	adc	r21, r1
    770a:	66 0f       	add	r22, r22
    770c:	77 1f       	adc	r23, r23
    770e:	88 1f       	adc	r24, r24
    7710:	99 1f       	adc	r25, r25
    7712:	06 94       	lsr	r0
    7714:	a1 f7       	brne	.-24     	; 0x76fe <__ftoa_engine+0x74>
    7716:	05 90       	lpm	r0, Z+
    7718:	07 94       	ror	r0
    771a:	28 f4       	brcc	.+10     	; 0x7726 <__ftoa_engine+0x9c>
    771c:	e7 0e       	add	r14, r23
    771e:	f8 1e       	adc	r15, r24
    7720:	49 1f       	adc	r20, r25
    7722:	56 1f       	adc	r21, r22
    7724:	c1 1d       	adc	r28, r1
    7726:	77 0f       	add	r23, r23
    7728:	88 1f       	adc	r24, r24
    772a:	99 1f       	adc	r25, r25
    772c:	66 1f       	adc	r22, r22
    772e:	06 94       	lsr	r0
    7730:	a1 f7       	brne	.-24     	; 0x771a <__ftoa_engine+0x90>
    7732:	05 90       	lpm	r0, Z+
    7734:	07 94       	ror	r0
    7736:	28 f4       	brcc	.+10     	; 0x7742 <__ftoa_engine+0xb8>
    7738:	f8 0e       	add	r15, r24
    773a:	49 1f       	adc	r20, r25
    773c:	56 1f       	adc	r21, r22
    773e:	c7 1f       	adc	r28, r23
    7740:	d1 1d       	adc	r29, r1
    7742:	88 0f       	add	r24, r24
    7744:	99 1f       	adc	r25, r25
    7746:	66 1f       	adc	r22, r22
    7748:	77 1f       	adc	r23, r23
    774a:	06 94       	lsr	r0
    774c:	a1 f7       	brne	.-24     	; 0x7736 <__ftoa_engine+0xac>
    774e:	05 90       	lpm	r0, Z+
    7750:	07 94       	ror	r0
    7752:	20 f4       	brcc	.+8      	; 0x775c <__ftoa_engine+0xd2>
    7754:	49 0f       	add	r20, r25
    7756:	56 1f       	adc	r21, r22
    7758:	c7 1f       	adc	r28, r23
    775a:	d8 1f       	adc	r29, r24
    775c:	99 0f       	add	r25, r25
    775e:	66 1f       	adc	r22, r22
    7760:	77 1f       	adc	r23, r23
    7762:	88 1f       	adc	r24, r24
    7764:	06 94       	lsr	r0
    7766:	a9 f7       	brne	.-22     	; 0x7752 <__ftoa_engine+0xc8>
    7768:	84 91       	lpm	r24, Z
    776a:	10 95       	com	r17
    776c:	17 70       	andi	r17, 0x07	; 7
    776e:	41 f0       	breq	.+16     	; 0x7780 <__ftoa_engine+0xf6>
    7770:	d6 95       	lsr	r29
    7772:	c7 95       	ror	r28
    7774:	57 95       	ror	r21
    7776:	47 95       	ror	r20
    7778:	f7 94       	ror	r15
    777a:	e7 94       	ror	r14
    777c:	1a 95       	dec	r17
    777e:	c1 f7       	brne	.-16     	; 0x7770 <__ftoa_engine+0xe6>
    7780:	e4 e6       	ldi	r30, 0x64	; 100
    7782:	f2 e0       	ldi	r31, 0x02	; 2
    7784:	68 94       	set
    7786:	15 90       	lpm	r1, Z+
    7788:	15 91       	lpm	r17, Z+
    778a:	35 91       	lpm	r19, Z+
    778c:	65 91       	lpm	r22, Z+
    778e:	95 91       	lpm	r25, Z+
    7790:	05 90       	lpm	r0, Z+
    7792:	7f e2       	ldi	r23, 0x2F	; 47
    7794:	73 95       	inc	r23
    7796:	e1 18       	sub	r14, r1
    7798:	f1 0a       	sbc	r15, r17
    779a:	43 0b       	sbc	r20, r19
    779c:	56 0b       	sbc	r21, r22
    779e:	c9 0b       	sbc	r28, r25
    77a0:	d0 09       	sbc	r29, r0
    77a2:	c0 f7       	brcc	.-16     	; 0x7794 <__ftoa_engine+0x10a>
    77a4:	e1 0c       	add	r14, r1
    77a6:	f1 1e       	adc	r15, r17
    77a8:	43 1f       	adc	r20, r19
    77aa:	56 1f       	adc	r21, r22
    77ac:	c9 1f       	adc	r28, r25
    77ae:	d0 1d       	adc	r29, r0
    77b0:	7e f4       	brtc	.+30     	; 0x77d0 <__ftoa_engine+0x146>
    77b2:	70 33       	cpi	r23, 0x30	; 48
    77b4:	11 f4       	brne	.+4      	; 0x77ba <__ftoa_engine+0x130>
    77b6:	8a 95       	dec	r24
    77b8:	e6 cf       	rjmp	.-52     	; 0x7786 <__ftoa_engine+0xfc>
    77ba:	e8 94       	clt
    77bc:	01 50       	subi	r16, 0x01	; 1
    77be:	30 f0       	brcs	.+12     	; 0x77cc <__ftoa_engine+0x142>
    77c0:	08 0f       	add	r16, r24
    77c2:	0a f4       	brpl	.+2      	; 0x77c6 <__ftoa_engine+0x13c>
    77c4:	00 27       	eor	r16, r16
    77c6:	02 17       	cp	r16, r18
    77c8:	08 f4       	brcc	.+2      	; 0x77cc <__ftoa_engine+0x142>
    77ca:	20 2f       	mov	r18, r16
    77cc:	23 95       	inc	r18
    77ce:	02 2f       	mov	r16, r18
    77d0:	7a 33       	cpi	r23, 0x3A	; 58
    77d2:	28 f0       	brcs	.+10     	; 0x77de <__ftoa_engine+0x154>
    77d4:	79 e3       	ldi	r23, 0x39	; 57
    77d6:	7d 93       	st	X+, r23
    77d8:	2a 95       	dec	r18
    77da:	e9 f7       	brne	.-6      	; 0x77d6 <__ftoa_engine+0x14c>
    77dc:	10 c0       	rjmp	.+32     	; 0x77fe <__ftoa_engine+0x174>
    77de:	7d 93       	st	X+, r23
    77e0:	2a 95       	dec	r18
    77e2:	89 f6       	brne	.-94     	; 0x7786 <__ftoa_engine+0xfc>
    77e4:	06 94       	lsr	r0
    77e6:	97 95       	ror	r25
    77e8:	67 95       	ror	r22
    77ea:	37 95       	ror	r19
    77ec:	17 95       	ror	r17
    77ee:	17 94       	ror	r1
    77f0:	e1 18       	sub	r14, r1
    77f2:	f1 0a       	sbc	r15, r17
    77f4:	43 0b       	sbc	r20, r19
    77f6:	56 0b       	sbc	r21, r22
    77f8:	c9 0b       	sbc	r28, r25
    77fa:	d0 09       	sbc	r29, r0
    77fc:	98 f0       	brcs	.+38     	; 0x7824 <__ftoa_engine+0x19a>
    77fe:	23 95       	inc	r18
    7800:	7e 91       	ld	r23, -X
    7802:	73 95       	inc	r23
    7804:	7a 33       	cpi	r23, 0x3A	; 58
    7806:	08 f0       	brcs	.+2      	; 0x780a <__ftoa_engine+0x180>
    7808:	70 e3       	ldi	r23, 0x30	; 48
    780a:	7c 93       	st	X, r23
    780c:	20 13       	cpse	r18, r16
    780e:	b8 f7       	brcc	.-18     	; 0x77fe <__ftoa_engine+0x174>
    7810:	7e 91       	ld	r23, -X
    7812:	70 61       	ori	r23, 0x10	; 16
    7814:	7d 93       	st	X+, r23
    7816:	30 f0       	brcs	.+12     	; 0x7824 <__ftoa_engine+0x19a>
    7818:	83 95       	inc	r24
    781a:	71 e3       	ldi	r23, 0x31	; 49
    781c:	7d 93       	st	X+, r23
    781e:	70 e3       	ldi	r23, 0x30	; 48
    7820:	2a 95       	dec	r18
    7822:	e1 f7       	brne	.-8      	; 0x781c <__ftoa_engine+0x192>
    7824:	11 24       	eor	r1, r1
    7826:	ef 90       	pop	r14
    7828:	ff 90       	pop	r15
    782a:	0f 91       	pop	r16
    782c:	1f 91       	pop	r17
    782e:	cf 91       	pop	r28
    7830:	df 91       	pop	r29
    7832:	99 27       	eor	r25, r25
    7834:	87 fd       	sbrc	r24, 7
    7836:	90 95       	com	r25
    7838:	08 95       	ret

0000783a <isspace>:
    783a:	91 11       	cpse	r25, r1
    783c:	0c 94 ae 3d 	jmp	0x7b5c	; 0x7b5c <__ctype_isfalse>
    7840:	80 32       	cpi	r24, 0x20	; 32
    7842:	19 f0       	breq	.+6      	; 0x784a <isspace+0x10>
    7844:	89 50       	subi	r24, 0x09	; 9
    7846:	85 50       	subi	r24, 0x05	; 5
    7848:	c8 f7       	brcc	.-14     	; 0x783c <isspace+0x2>
    784a:	08 95       	ret

0000784c <strnlen_P>:
    784c:	fc 01       	movw	r30, r24
    784e:	05 90       	lpm	r0, Z+
    7850:	61 50       	subi	r22, 0x01	; 1
    7852:	70 40       	sbci	r23, 0x00	; 0
    7854:	01 10       	cpse	r0, r1
    7856:	d8 f7       	brcc	.-10     	; 0x784e <strnlen_P+0x2>
    7858:	80 95       	com	r24
    785a:	90 95       	com	r25
    785c:	8e 0f       	add	r24, r30
    785e:	9f 1f       	adc	r25, r31
    7860:	08 95       	ret

00007862 <memcpy>:
    7862:	fb 01       	movw	r30, r22
    7864:	dc 01       	movw	r26, r24
    7866:	02 c0       	rjmp	.+4      	; 0x786c <memcpy+0xa>
    7868:	01 90       	ld	r0, Z+
    786a:	0d 92       	st	X+, r0
    786c:	41 50       	subi	r20, 0x01	; 1
    786e:	50 40       	sbci	r21, 0x00	; 0
    7870:	d8 f7       	brcc	.-10     	; 0x7868 <memcpy+0x6>
    7872:	08 95       	ret

00007874 <strncmp>:
    7874:	fb 01       	movw	r30, r22
    7876:	dc 01       	movw	r26, r24
    7878:	41 50       	subi	r20, 0x01	; 1
    787a:	50 40       	sbci	r21, 0x00	; 0
    787c:	30 f0       	brcs	.+12     	; 0x788a <strncmp+0x16>
    787e:	8d 91       	ld	r24, X+
    7880:	01 90       	ld	r0, Z+
    7882:	80 19       	sub	r24, r0
    7884:	19 f4       	brne	.+6      	; 0x788c <strncmp+0x18>
    7886:	00 20       	and	r0, r0
    7888:	b9 f7       	brne	.-18     	; 0x7878 <strncmp+0x4>
    788a:	88 1b       	sub	r24, r24
    788c:	99 0b       	sbc	r25, r25
    788e:	08 95       	ret

00007890 <strncpy>:
    7890:	fb 01       	movw	r30, r22
    7892:	dc 01       	movw	r26, r24
    7894:	41 50       	subi	r20, 0x01	; 1
    7896:	50 40       	sbci	r21, 0x00	; 0
    7898:	48 f0       	brcs	.+18     	; 0x78ac <strncpy+0x1c>
    789a:	01 90       	ld	r0, Z+
    789c:	0d 92       	st	X+, r0
    789e:	00 20       	and	r0, r0
    78a0:	c9 f7       	brne	.-14     	; 0x7894 <strncpy+0x4>
    78a2:	01 c0       	rjmp	.+2      	; 0x78a6 <strncpy+0x16>
    78a4:	1d 92       	st	X+, r1
    78a6:	41 50       	subi	r20, 0x01	; 1
    78a8:	50 40       	sbci	r21, 0x00	; 0
    78aa:	e0 f7       	brcc	.-8      	; 0x78a4 <strncpy+0x14>
    78ac:	08 95       	ret

000078ae <strnlen>:
    78ae:	fc 01       	movw	r30, r24
    78b0:	61 50       	subi	r22, 0x01	; 1
    78b2:	70 40       	sbci	r23, 0x00	; 0
    78b4:	01 90       	ld	r0, Z+
    78b6:	01 10       	cpse	r0, r1
    78b8:	d8 f7       	brcc	.-10     	; 0x78b0 <strnlen+0x2>
    78ba:	80 95       	com	r24
    78bc:	90 95       	com	r25
    78be:	8e 0f       	add	r24, r30
    78c0:	9f 1f       	adc	r25, r31
    78c2:	08 95       	ret

000078c4 <fprintf>:
    78c4:	cf 93       	push	r28
    78c6:	df 93       	push	r29
    78c8:	cd b7       	in	r28, 0x3d	; 61
    78ca:	de b7       	in	r29, 0x3e	; 62
    78cc:	ae 01       	movw	r20, r28
    78ce:	46 5f       	subi	r20, 0xF6	; 246
    78d0:	5f 4f       	sbci	r21, 0xFF	; 255
    78d2:	68 85       	ldd	r22, Y+8	; 0x08
    78d4:	79 85       	ldd	r23, Y+9	; 0x09
    78d6:	8e 81       	ldd	r24, Y+6	; 0x06
    78d8:	9f 81       	ldd	r25, Y+7	; 0x07
    78da:	0e 94 3e 34 	call	0x687c	; 0x687c <vfprintf>
    78de:	df 91       	pop	r29
    78e0:	cf 91       	pop	r28
    78e2:	08 95       	ret

000078e4 <fputc>:
    78e4:	0f 93       	push	r16
    78e6:	1f 93       	push	r17
    78e8:	cf 93       	push	r28
    78ea:	df 93       	push	r29
    78ec:	fb 01       	movw	r30, r22
    78ee:	23 81       	ldd	r18, Z+3	; 0x03
    78f0:	21 fd       	sbrc	r18, 1
    78f2:	03 c0       	rjmp	.+6      	; 0x78fa <fputc+0x16>
    78f4:	8f ef       	ldi	r24, 0xFF	; 255
    78f6:	9f ef       	ldi	r25, 0xFF	; 255
    78f8:	2c c0       	rjmp	.+88     	; 0x7952 <fputc+0x6e>
    78fa:	22 ff       	sbrs	r18, 2
    78fc:	16 c0       	rjmp	.+44     	; 0x792a <fputc+0x46>
    78fe:	46 81       	ldd	r20, Z+6	; 0x06
    7900:	57 81       	ldd	r21, Z+7	; 0x07
    7902:	24 81       	ldd	r18, Z+4	; 0x04
    7904:	35 81       	ldd	r19, Z+5	; 0x05
    7906:	42 17       	cp	r20, r18
    7908:	53 07       	cpc	r21, r19
    790a:	44 f4       	brge	.+16     	; 0x791c <fputc+0x38>
    790c:	a0 81       	ld	r26, Z
    790e:	b1 81       	ldd	r27, Z+1	; 0x01
    7910:	9d 01       	movw	r18, r26
    7912:	2f 5f       	subi	r18, 0xFF	; 255
    7914:	3f 4f       	sbci	r19, 0xFF	; 255
    7916:	20 83       	st	Z, r18
    7918:	31 83       	std	Z+1, r19	; 0x01
    791a:	8c 93       	st	X, r24
    791c:	26 81       	ldd	r18, Z+6	; 0x06
    791e:	37 81       	ldd	r19, Z+7	; 0x07
    7920:	2f 5f       	subi	r18, 0xFF	; 255
    7922:	3f 4f       	sbci	r19, 0xFF	; 255
    7924:	26 83       	std	Z+6, r18	; 0x06
    7926:	37 83       	std	Z+7, r19	; 0x07
    7928:	14 c0       	rjmp	.+40     	; 0x7952 <fputc+0x6e>
    792a:	8b 01       	movw	r16, r22
    792c:	ec 01       	movw	r28, r24
    792e:	fb 01       	movw	r30, r22
    7930:	00 84       	ldd	r0, Z+8	; 0x08
    7932:	f1 85       	ldd	r31, Z+9	; 0x09
    7934:	e0 2d       	mov	r30, r0
    7936:	19 95       	eicall
    7938:	89 2b       	or	r24, r25
    793a:	e1 f6       	brne	.-72     	; 0x78f4 <fputc+0x10>
    793c:	d8 01       	movw	r26, r16
    793e:	16 96       	adiw	r26, 0x06	; 6
    7940:	8d 91       	ld	r24, X+
    7942:	9c 91       	ld	r25, X
    7944:	17 97       	sbiw	r26, 0x07	; 7
    7946:	01 96       	adiw	r24, 0x01	; 1
    7948:	16 96       	adiw	r26, 0x06	; 6
    794a:	8d 93       	st	X+, r24
    794c:	9c 93       	st	X, r25
    794e:	17 97       	sbiw	r26, 0x07	; 7
    7950:	ce 01       	movw	r24, r28
    7952:	df 91       	pop	r29
    7954:	cf 91       	pop	r28
    7956:	1f 91       	pop	r17
    7958:	0f 91       	pop	r16
    795a:	08 95       	ret

0000795c <fwrite>:
    795c:	8f 92       	push	r8
    795e:	9f 92       	push	r9
    7960:	af 92       	push	r10
    7962:	bf 92       	push	r11
    7964:	cf 92       	push	r12
    7966:	df 92       	push	r13
    7968:	ef 92       	push	r14
    796a:	ff 92       	push	r15
    796c:	0f 93       	push	r16
    796e:	1f 93       	push	r17
    7970:	cf 93       	push	r28
    7972:	df 93       	push	r29
    7974:	5b 01       	movw	r10, r22
    7976:	4a 01       	movw	r8, r20
    7978:	79 01       	movw	r14, r18
    797a:	d9 01       	movw	r26, r18
    797c:	13 96       	adiw	r26, 0x03	; 3
    797e:	2c 91       	ld	r18, X
    7980:	21 ff       	sbrs	r18, 1
    7982:	1d c0       	rjmp	.+58     	; 0x79be <fwrite+0x62>
    7984:	c0 e0       	ldi	r28, 0x00	; 0
    7986:	d0 e0       	ldi	r29, 0x00	; 0
    7988:	c8 15       	cp	r28, r8
    798a:	d9 05       	cpc	r29, r9
    798c:	d9 f0       	breq	.+54     	; 0x79c4 <fwrite+0x68>
    798e:	8c 01       	movw	r16, r24
    7990:	6c 01       	movw	r12, r24
    7992:	ca 0c       	add	r12, r10
    7994:	db 1c       	adc	r13, r11
    7996:	c8 01       	movw	r24, r16
    7998:	0c 15       	cp	r16, r12
    799a:	1d 05       	cpc	r17, r13
    799c:	71 f0       	breq	.+28     	; 0x79ba <fwrite+0x5e>
    799e:	0f 5f       	subi	r16, 0xFF	; 255
    79a0:	1f 4f       	sbci	r17, 0xFF	; 255
    79a2:	d7 01       	movw	r26, r14
    79a4:	18 96       	adiw	r26, 0x08	; 8
    79a6:	ed 91       	ld	r30, X+
    79a8:	fc 91       	ld	r31, X
    79aa:	19 97       	sbiw	r26, 0x09	; 9
    79ac:	b7 01       	movw	r22, r14
    79ae:	dc 01       	movw	r26, r24
    79b0:	8c 91       	ld	r24, X
    79b2:	19 95       	eicall
    79b4:	89 2b       	or	r24, r25
    79b6:	79 f3       	breq	.-34     	; 0x7996 <fwrite+0x3a>
    79b8:	05 c0       	rjmp	.+10     	; 0x79c4 <fwrite+0x68>
    79ba:	21 96       	adiw	r28, 0x01	; 1
    79bc:	e5 cf       	rjmp	.-54     	; 0x7988 <fwrite+0x2c>
    79be:	80 e0       	ldi	r24, 0x00	; 0
    79c0:	90 e0       	ldi	r25, 0x00	; 0
    79c2:	01 c0       	rjmp	.+2      	; 0x79c6 <fwrite+0x6a>
    79c4:	ce 01       	movw	r24, r28
    79c6:	df 91       	pop	r29
    79c8:	cf 91       	pop	r28
    79ca:	1f 91       	pop	r17
    79cc:	0f 91       	pop	r16
    79ce:	ff 90       	pop	r15
    79d0:	ef 90       	pop	r14
    79d2:	df 90       	pop	r13
    79d4:	cf 90       	pop	r12
    79d6:	bf 90       	pop	r11
    79d8:	af 90       	pop	r10
    79da:	9f 90       	pop	r9
    79dc:	8f 90       	pop	r8
    79de:	08 95       	ret

000079e0 <snprintf>:
    79e0:	0f 93       	push	r16
    79e2:	1f 93       	push	r17
    79e4:	cf 93       	push	r28
    79e6:	df 93       	push	r29
    79e8:	cd b7       	in	r28, 0x3d	; 61
    79ea:	de b7       	in	r29, 0x3e	; 62
    79ec:	2e 97       	sbiw	r28, 0x0e	; 14
    79ee:	cd bf       	out	0x3d, r28	; 61
    79f0:	de bf       	out	0x3e, r29	; 62
    79f2:	0e 89       	ldd	r16, Y+22	; 0x16
    79f4:	1f 89       	ldd	r17, Y+23	; 0x17
    79f6:	88 8d       	ldd	r24, Y+24	; 0x18
    79f8:	99 8d       	ldd	r25, Y+25	; 0x19
    79fa:	26 e0       	ldi	r18, 0x06	; 6
    79fc:	2c 83       	std	Y+4, r18	; 0x04
    79fe:	09 83       	std	Y+1, r16	; 0x01
    7a00:	1a 83       	std	Y+2, r17	; 0x02
    7a02:	97 ff       	sbrs	r25, 7
    7a04:	02 c0       	rjmp	.+4      	; 0x7a0a <snprintf+0x2a>
    7a06:	80 e0       	ldi	r24, 0x00	; 0
    7a08:	90 e8       	ldi	r25, 0x80	; 128
    7a0a:	01 97       	sbiw	r24, 0x01	; 1
    7a0c:	8d 83       	std	Y+5, r24	; 0x05
    7a0e:	9e 83       	std	Y+6, r25	; 0x06
    7a10:	ae 01       	movw	r20, r28
    7a12:	44 5e       	subi	r20, 0xE4	; 228
    7a14:	5f 4f       	sbci	r21, 0xFF	; 255
    7a16:	6a 8d       	ldd	r22, Y+26	; 0x1a
    7a18:	7b 8d       	ldd	r23, Y+27	; 0x1b
    7a1a:	ce 01       	movw	r24, r28
    7a1c:	01 96       	adiw	r24, 0x01	; 1
    7a1e:	0e 94 3e 34 	call	0x687c	; 0x687c <vfprintf>
    7a22:	4d 81       	ldd	r20, Y+5	; 0x05
    7a24:	5e 81       	ldd	r21, Y+6	; 0x06
    7a26:	57 fd       	sbrc	r21, 7
    7a28:	0a c0       	rjmp	.+20     	; 0x7a3e <snprintf+0x5e>
    7a2a:	2f 81       	ldd	r18, Y+7	; 0x07
    7a2c:	38 85       	ldd	r19, Y+8	; 0x08
    7a2e:	42 17       	cp	r20, r18
    7a30:	53 07       	cpc	r21, r19
    7a32:	0c f4       	brge	.+2      	; 0x7a36 <snprintf+0x56>
    7a34:	9a 01       	movw	r18, r20
    7a36:	f8 01       	movw	r30, r16
    7a38:	e2 0f       	add	r30, r18
    7a3a:	f3 1f       	adc	r31, r19
    7a3c:	10 82       	st	Z, r1
    7a3e:	2e 96       	adiw	r28, 0x0e	; 14
    7a40:	cd bf       	out	0x3d, r28	; 61
    7a42:	de bf       	out	0x3e, r29	; 62
    7a44:	df 91       	pop	r29
    7a46:	cf 91       	pop	r28
    7a48:	1f 91       	pop	r17
    7a4a:	0f 91       	pop	r16
    7a4c:	08 95       	ret

00007a4e <sprintf>:
    7a4e:	0f 93       	push	r16
    7a50:	1f 93       	push	r17
    7a52:	cf 93       	push	r28
    7a54:	df 93       	push	r29
    7a56:	cd b7       	in	r28, 0x3d	; 61
    7a58:	de b7       	in	r29, 0x3e	; 62
    7a5a:	2e 97       	sbiw	r28, 0x0e	; 14
    7a5c:	cd bf       	out	0x3d, r28	; 61
    7a5e:	de bf       	out	0x3e, r29	; 62
    7a60:	0e 89       	ldd	r16, Y+22	; 0x16
    7a62:	1f 89       	ldd	r17, Y+23	; 0x17
    7a64:	86 e0       	ldi	r24, 0x06	; 6
    7a66:	8c 83       	std	Y+4, r24	; 0x04
    7a68:	09 83       	std	Y+1, r16	; 0x01
    7a6a:	1a 83       	std	Y+2, r17	; 0x02
    7a6c:	8f ef       	ldi	r24, 0xFF	; 255
    7a6e:	9f e7       	ldi	r25, 0x7F	; 127
    7a70:	8d 83       	std	Y+5, r24	; 0x05
    7a72:	9e 83       	std	Y+6, r25	; 0x06
    7a74:	ae 01       	movw	r20, r28
    7a76:	46 5e       	subi	r20, 0xE6	; 230
    7a78:	5f 4f       	sbci	r21, 0xFF	; 255
    7a7a:	68 8d       	ldd	r22, Y+24	; 0x18
    7a7c:	79 8d       	ldd	r23, Y+25	; 0x19
    7a7e:	ce 01       	movw	r24, r28
    7a80:	01 96       	adiw	r24, 0x01	; 1
    7a82:	0e 94 3e 34 	call	0x687c	; 0x687c <vfprintf>
    7a86:	ef 81       	ldd	r30, Y+7	; 0x07
    7a88:	f8 85       	ldd	r31, Y+8	; 0x08
    7a8a:	e0 0f       	add	r30, r16
    7a8c:	f1 1f       	adc	r31, r17
    7a8e:	10 82       	st	Z, r1
    7a90:	2e 96       	adiw	r28, 0x0e	; 14
    7a92:	cd bf       	out	0x3d, r28	; 61
    7a94:	de bf       	out	0x3e, r29	; 62
    7a96:	df 91       	pop	r29
    7a98:	cf 91       	pop	r28
    7a9a:	1f 91       	pop	r17
    7a9c:	0f 91       	pop	r16
    7a9e:	08 95       	ret

00007aa0 <__ultoa_invert>:
    7aa0:	fa 01       	movw	r30, r20
    7aa2:	aa 27       	eor	r26, r26
    7aa4:	28 30       	cpi	r18, 0x08	; 8
    7aa6:	51 f1       	breq	.+84     	; 0x7afc <__ultoa_invert+0x5c>
    7aa8:	20 31       	cpi	r18, 0x10	; 16
    7aaa:	81 f1       	breq	.+96     	; 0x7b0c <__ultoa_invert+0x6c>
    7aac:	e8 94       	clt
    7aae:	6f 93       	push	r22
    7ab0:	6e 7f       	andi	r22, 0xFE	; 254
    7ab2:	6e 5f       	subi	r22, 0xFE	; 254
    7ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    7ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    7aba:	af 4f       	sbci	r26, 0xFF	; 255
    7abc:	b1 e0       	ldi	r27, 0x01	; 1
    7abe:	3e d0       	rcall	.+124    	; 0x7b3c <__ultoa_invert+0x9c>
    7ac0:	b4 e0       	ldi	r27, 0x04	; 4
    7ac2:	3c d0       	rcall	.+120    	; 0x7b3c <__ultoa_invert+0x9c>
    7ac4:	67 0f       	add	r22, r23
    7ac6:	78 1f       	adc	r23, r24
    7ac8:	89 1f       	adc	r24, r25
    7aca:	9a 1f       	adc	r25, r26
    7acc:	a1 1d       	adc	r26, r1
    7ace:	68 0f       	add	r22, r24
    7ad0:	79 1f       	adc	r23, r25
    7ad2:	8a 1f       	adc	r24, r26
    7ad4:	91 1d       	adc	r25, r1
    7ad6:	a1 1d       	adc	r26, r1
    7ad8:	6a 0f       	add	r22, r26
    7ada:	71 1d       	adc	r23, r1
    7adc:	81 1d       	adc	r24, r1
    7ade:	91 1d       	adc	r25, r1
    7ae0:	a1 1d       	adc	r26, r1
    7ae2:	20 d0       	rcall	.+64     	; 0x7b24 <__ultoa_invert+0x84>
    7ae4:	09 f4       	brne	.+2      	; 0x7ae8 <__ultoa_invert+0x48>
    7ae6:	68 94       	set
    7ae8:	3f 91       	pop	r19
    7aea:	2a e0       	ldi	r18, 0x0A	; 10
    7aec:	26 9f       	mul	r18, r22
    7aee:	11 24       	eor	r1, r1
    7af0:	30 19       	sub	r19, r0
    7af2:	30 5d       	subi	r19, 0xD0	; 208
    7af4:	31 93       	st	Z+, r19
    7af6:	de f6       	brtc	.-74     	; 0x7aae <__ultoa_invert+0xe>
    7af8:	cf 01       	movw	r24, r30
    7afa:	08 95       	ret
    7afc:	46 2f       	mov	r20, r22
    7afe:	47 70       	andi	r20, 0x07	; 7
    7b00:	40 5d       	subi	r20, 0xD0	; 208
    7b02:	41 93       	st	Z+, r20
    7b04:	b3 e0       	ldi	r27, 0x03	; 3
    7b06:	0f d0       	rcall	.+30     	; 0x7b26 <__ultoa_invert+0x86>
    7b08:	c9 f7       	brne	.-14     	; 0x7afc <__ultoa_invert+0x5c>
    7b0a:	f6 cf       	rjmp	.-20     	; 0x7af8 <__ultoa_invert+0x58>
    7b0c:	46 2f       	mov	r20, r22
    7b0e:	4f 70       	andi	r20, 0x0F	; 15
    7b10:	40 5d       	subi	r20, 0xD0	; 208
    7b12:	4a 33       	cpi	r20, 0x3A	; 58
    7b14:	18 f0       	brcs	.+6      	; 0x7b1c <__ultoa_invert+0x7c>
    7b16:	49 5d       	subi	r20, 0xD9	; 217
    7b18:	31 fd       	sbrc	r19, 1
    7b1a:	40 52       	subi	r20, 0x20	; 32
    7b1c:	41 93       	st	Z+, r20
    7b1e:	02 d0       	rcall	.+4      	; 0x7b24 <__ultoa_invert+0x84>
    7b20:	a9 f7       	brne	.-22     	; 0x7b0c <__ultoa_invert+0x6c>
    7b22:	ea cf       	rjmp	.-44     	; 0x7af8 <__ultoa_invert+0x58>
    7b24:	b4 e0       	ldi	r27, 0x04	; 4
    7b26:	a6 95       	lsr	r26
    7b28:	97 95       	ror	r25
    7b2a:	87 95       	ror	r24
    7b2c:	77 95       	ror	r23
    7b2e:	67 95       	ror	r22
    7b30:	ba 95       	dec	r27
    7b32:	c9 f7       	brne	.-14     	; 0x7b26 <__ultoa_invert+0x86>
    7b34:	00 97       	sbiw	r24, 0x00	; 0
    7b36:	61 05       	cpc	r22, r1
    7b38:	71 05       	cpc	r23, r1
    7b3a:	08 95       	ret
    7b3c:	9b 01       	movw	r18, r22
    7b3e:	ac 01       	movw	r20, r24
    7b40:	0a 2e       	mov	r0, r26
    7b42:	06 94       	lsr	r0
    7b44:	57 95       	ror	r21
    7b46:	47 95       	ror	r20
    7b48:	37 95       	ror	r19
    7b4a:	27 95       	ror	r18
    7b4c:	ba 95       	dec	r27
    7b4e:	c9 f7       	brne	.-14     	; 0x7b42 <__ultoa_invert+0xa2>
    7b50:	62 0f       	add	r22, r18
    7b52:	73 1f       	adc	r23, r19
    7b54:	84 1f       	adc	r24, r20
    7b56:	95 1f       	adc	r25, r21
    7b58:	a0 1d       	adc	r26, r0
    7b5a:	08 95       	ret

00007b5c <__ctype_isfalse>:
    7b5c:	99 27       	eor	r25, r25
    7b5e:	88 27       	eor	r24, r24

00007b60 <__ctype_istrue>:
    7b60:	08 95       	ret

00007b62 <eeprom_read_block>:
    7b62:	e0 ec       	ldi	r30, 0xC0	; 192
    7b64:	f1 e0       	ldi	r31, 0x01	; 1
    7b66:	a7 85       	ldd	r26, Z+15	; 0x0f
    7b68:	a7 fd       	sbrc	r26, 7
    7b6a:	fd cf       	rjmp	.-6      	; 0x7b66 <eeprom_read_block+0x4>
    7b6c:	a4 85       	ldd	r26, Z+12	; 0x0c
    7b6e:	a8 60       	ori	r26, 0x08	; 8
    7b70:	a4 87       	std	Z+12, r26	; 0x0c
    7b72:	60 50       	subi	r22, 0x00	; 0
    7b74:	70 4f       	sbci	r23, 0xF0	; 240
    7b76:	0c 94 31 3c 	jmp	0x7862	; 0x7862 <memcpy>

00007b7a <eeprom_update_block>:
    7b7a:	dc 01       	movw	r26, r24
    7b7c:	a4 0f       	add	r26, r20
    7b7e:	b5 1f       	adc	r27, r21
    7b80:	41 50       	subi	r20, 0x01	; 1
    7b82:	50 40       	sbci	r21, 0x00	; 0
    7b84:	48 f0       	brcs	.+18     	; 0x7b98 <eeprom_update_block+0x1e>
    7b86:	cb 01       	movw	r24, r22
    7b88:	84 0f       	add	r24, r20
    7b8a:	95 1f       	adc	r25, r21
    7b8c:	2e 91       	ld	r18, -X
    7b8e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <eeprom_update_r18>
    7b92:	41 50       	subi	r20, 0x01	; 1
    7b94:	50 40       	sbci	r21, 0x00	; 0
    7b96:	d0 f7       	brcc	.-12     	; 0x7b8c <eeprom_update_block+0x12>
    7b98:	08 95       	ret

00007b9a <eeprom_update_byte>:
    7b9a:	26 2f       	mov	r18, r22

00007b9c <eeprom_update_r18>:
    7b9c:	0e 94 ff 3d 	call	0x7bfe	; 0x7bfe <eeprom_mapen>
    7ba0:	00 80       	ld	r0, Z
    7ba2:	02 16       	cp	r0, r18
    7ba4:	19 f0       	breq	.+6      	; 0x7bac <eeprom_update_r18+0x10>
    7ba6:	0e 94 d9 3d 	call	0x7bb2	; 0x7bb2 <eeprom_write_r18>
    7baa:	01 97       	sbiw	r24, 0x01	; 1
    7bac:	01 97       	sbiw	r24, 0x01	; 1
    7bae:	08 95       	ret

00007bb0 <eeprom_write_byte>:
    7bb0:	26 2f       	mov	r18, r22

00007bb2 <eeprom_write_r18>:
    7bb2:	e0 ec       	ldi	r30, 0xC0	; 192
    7bb4:	f1 e0       	ldi	r31, 0x01	; 1
    7bb6:	37 85       	ldd	r19, Z+15	; 0x0f
    7bb8:	37 fd       	sbrc	r19, 7
    7bba:	fd cf       	rjmp	.-6      	; 0x7bb6 <eeprom_write_r18+0x4>
    7bbc:	34 85       	ldd	r19, Z+12	; 0x0c
    7bbe:	37 7f       	andi	r19, 0xF7	; 247
    7bc0:	34 87       	std	Z+12, r19	; 0x0c
    7bc2:	37 85       	ldd	r19, Z+15	; 0x0f
    7bc4:	31 ff       	sbrs	r19, 1
    7bc6:	09 c0       	rjmp	.+18     	; 0x7bda <eeprom_write_r18+0x28>
    7bc8:	36 e3       	ldi	r19, 0x36	; 54
    7bca:	32 87       	std	Z+10, r19	; 0x0a
    7bcc:	38 ed       	ldi	r19, 0xD8	; 216
    7bce:	34 bf       	out	0x34, r19	; 52
    7bd0:	31 e0       	ldi	r19, 0x01	; 1
    7bd2:	33 87       	std	Z+11, r19	; 0x0b
    7bd4:	37 85       	ldd	r19, Z+15	; 0x0f
    7bd6:	37 fd       	sbrc	r19, 7
    7bd8:	fd cf       	rjmp	.-6      	; 0x7bd4 <eeprom_write_r18+0x22>
    7bda:	33 e3       	ldi	r19, 0x33	; 51
    7bdc:	32 87       	std	Z+10, r19	; 0x0a
    7bde:	80 83       	st	Z, r24
    7be0:	91 83       	std	Z+1, r25	; 0x01
    7be2:	12 82       	std	Z+2, r1	; 0x02
    7be4:	24 83       	std	Z+4, r18	; 0x04
    7be6:	25 e3       	ldi	r18, 0x35	; 53
    7be8:	22 87       	std	Z+10, r18	; 0x0a
    7bea:	28 ed       	ldi	r18, 0xD8	; 216
    7bec:	31 e0       	ldi	r19, 0x01	; 1
    7bee:	24 bf       	out	0x34, r18	; 52
    7bf0:	33 87       	std	Z+11, r19	; 0x0b
    7bf2:	01 96       	adiw	r24, 0x01	; 1
    7bf4:	08 95       	ret

00007bf6 <eeprom_read_byte>:
    7bf6:	03 d0       	rcall	.+6      	; 0x7bfe <eeprom_mapen>
    7bf8:	80 81       	ld	r24, Z
    7bfa:	99 27       	eor	r25, r25
    7bfc:	08 95       	ret

00007bfe <eeprom_mapen>:
    7bfe:	e0 ec       	ldi	r30, 0xC0	; 192
    7c00:	f1 e0       	ldi	r31, 0x01	; 1
    7c02:	37 85       	ldd	r19, Z+15	; 0x0f
    7c04:	37 fd       	sbrc	r19, 7
    7c06:	fd cf       	rjmp	.-6      	; 0x7c02 <eeprom_mapen+0x4>
    7c08:	34 85       	ldd	r19, Z+12	; 0x0c
    7c0a:	38 60       	ori	r19, 0x08	; 8
    7c0c:	34 87       	std	Z+12, r19	; 0x0c
    7c0e:	fc 01       	movw	r30, r24
    7c10:	e0 50       	subi	r30, 0x00	; 0
    7c12:	f0 4f       	sbci	r31, 0xF0	; 240
    7c14:	08 95       	ret

00007c16 <__udivmodsi4>:
    7c16:	a1 e2       	ldi	r26, 0x21	; 33
    7c18:	1a 2e       	mov	r1, r26
    7c1a:	aa 1b       	sub	r26, r26
    7c1c:	bb 1b       	sub	r27, r27
    7c1e:	fd 01       	movw	r30, r26
    7c20:	0d c0       	rjmp	.+26     	; 0x7c3c <__udivmodsi4_ep>

00007c22 <__udivmodsi4_loop>:
    7c22:	aa 1f       	adc	r26, r26
    7c24:	bb 1f       	adc	r27, r27
    7c26:	ee 1f       	adc	r30, r30
    7c28:	ff 1f       	adc	r31, r31
    7c2a:	a2 17       	cp	r26, r18
    7c2c:	b3 07       	cpc	r27, r19
    7c2e:	e4 07       	cpc	r30, r20
    7c30:	f5 07       	cpc	r31, r21
    7c32:	20 f0       	brcs	.+8      	; 0x7c3c <__udivmodsi4_ep>
    7c34:	a2 1b       	sub	r26, r18
    7c36:	b3 0b       	sbc	r27, r19
    7c38:	e4 0b       	sbc	r30, r20
    7c3a:	f5 0b       	sbc	r31, r21

00007c3c <__udivmodsi4_ep>:
    7c3c:	66 1f       	adc	r22, r22
    7c3e:	77 1f       	adc	r23, r23
    7c40:	88 1f       	adc	r24, r24
    7c42:	99 1f       	adc	r25, r25
    7c44:	1a 94       	dec	r1
    7c46:	69 f7       	brne	.-38     	; 0x7c22 <__udivmodsi4_loop>
    7c48:	60 95       	com	r22
    7c4a:	70 95       	com	r23
    7c4c:	80 95       	com	r24
    7c4e:	90 95       	com	r25
    7c50:	9b 01       	movw	r18, r22
    7c52:	ac 01       	movw	r20, r24
    7c54:	bd 01       	movw	r22, r26
    7c56:	cf 01       	movw	r24, r30
    7c58:	08 95       	ret

00007c5a <_exit>:
    7c5a:	f8 94       	cli

00007c5c <__stop_program>:
    7c5c:	ff cf       	rjmp	.-2      	; 0x7c5c <__stop_program>
